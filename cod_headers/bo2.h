/*
 * PDB file: CoDMPServer_PC.pdb
 * Image architecture: i386 (0x014c)
 *
 * Dumped by pdbex tool v0.18, by wbenny
 */

enum _TAG_UNNAMED_1;
enum tagSYSKIND;
enum _TAG_UNNAMED_2;
enum eAttachmentGroup;
enum inflate_mode;
enum bdNATType;
enum tagBINDSTATUS;
enum ai_badplace_t;
enum D3D11_COMPARISON_FUNC;
enum NV_DP_DYNAMIC_RANGE;
enum _TAG_UNNAMED_3;
enum D3D11_FEATURE;
union vec3_t;
struct VehicleHover;
enum link_type_e;
enum D3D11_DEPTH_WRITE_MASK;
enum _NV_GPU_HDCP_FUSE_STATE;
struct ZBarrierBoard;
enum D3D11_STENCIL_OP;
enum _TAG_UNNAMED_4;
enum mz_zip_flags;
class bdMarketplace;
enum _TAG_UNNAMED_5;
enum gjk_entity_info_t::ENTITY_TYPE;
enum _TAG_UNNAMED_6;
enum tagURLZONE;
enum D3D11_BLEND;
struct gameTypeInfo;
struct mapStartLocInfo;
struct VehicleGunnerTags;
enum KillCamEntityType;
enum scriptInstance_t;
enum NV_MONITOR_CONN_TYPE;
enum _TAG_UNNAMED_7;
enum meansOfDeath_t;
enum rb_vehicle_model::rb_vehicle_model_flags_e;
struct PhysicsInputs;
enum _URLZONEREG;
enum _NVDRS_SETTING_TYPE;
enum D3D11_BLEND_OP;
enum _TAG_UNNAMED_8;
enum CIN_CALLBACK_TYPE;
enum D3D11_COLOR_WRITE_ENABLE;
class phys_free_list<rigid_body_constraint_point>::T_internal_base;
class phys_free_list<rigid_body_constraint_point>;
enum IKHandNames;
enum tagTYPEKIND;
enum _TAG_UNNAMED_9;
enum SphereEdgeTraceResult;
enum D3D11_MESSAGE_CATEGORY;
enum bdBitBufferDataType;
enum _TAG_UNNAMED_10;
enum D3D11_MESSAGE_SEVERITY;
enum NV_DP_LINK_RATE;
enum IKDebugColor;
enum D3D11_MESSAGE_ID;
class phys_vec3;
class phys_mat44;
enum GfxPrimStatsTarget;
enum _TAG_UNNAMED_11;
enum NV_HDMI_STEREO_TYPE;
class bdSessionParams;
enum D3D_DRIVER_TYPE;
enum PlayerSpreadOverrideState;
enum hostDelegationState_t;
enum _TAG_UNNAMED_12;
enum tracerFieldType_t;
enum D3D_PRIMITIVE_TOPOLOGY;
enum _TAG_UNNAMED_13;
enum LeagueOutcome;
enum doubleXPGroups_e;
class phys_link_list_base<pulse_sum_constraint_solver::temp_user_rigid_body>;
enum tagCHANGEKIND;
enum expOperationEnum;
struct view_limits_t;
enum _TAG_UNNAMED_14;
enum _TAG_UNNAMED_15;
enum NV_GPS_THERM_LIMIT_SRC;
enum RagdollBodyState;
enum bdLogMessageType;
enum eAttachmentTableColumns;
enum mtxItemsColumns_e;
enum _NVVIOVIDEOSTANDARD;
enum _TAG_UNNAMED_16;
enum MaterialUpdateFrequency;
enum FLAC__EntropyCodingMethodType;
enum D3D_PRIMITIVE;
enum DEBUGMAYMOVE_LIFT_ENUM;
enum tagCALLCONV;
enum _TAG_UNNAMED_17;
enum _TAG_UNNAMED_18;
enum FLAC__SubframeType;
struct $_s__RTTIBaseClassArray$_extraBytes_4;
enum __MIDL_ICodeInstall_0001;
class EntHandle;
struct entityShared_t;
enum _TAG_UNNAMED_19;
struct blowfish_key;
enum _TAG_UNNAMED_20;
enum _FPIEEE_FORMAT;
struct XModelLodInfo;
enum csParseFieldType_t;
enum NodeClaimSpecies;
enum VehicleWheelType;
enum _FINDEX_SEARCH_OPS;
class pulse_sum_cache;
enum ENotificationPosition;
enum _TAG_UNNAMED_21;
enum D3D10_MESSAGE_CATEGORY;
enum tagBINDSTRING;
enum c_pass_type;
enum bdContentStreamingBase::bdStatus;
class bdTag;
class bdFileMetaData;
class bdURL;
class bdPreCopyResult;
class bdSummaryMetaHandler;
class bdReference<bdRemoteTask>;
class bdStopwatch;
class bdHTTPWrapper;
class bdHashMD5;
class bdContentStreamingBase;
struct _XMCOLOR;
enum tagVARKIND;
enum _TAG_UNNAMED_22;
enum e_mapSelectionColumns;
struct _XMXICON4;
enum _TAG_UNNAMED_23;
struct scrVarDebugPub_t;
enum scriptAnimAIFunctionTypes_t;
enum VehicleMaterialSound;
enum GfxRenderCommand;
enum _TAG_UNNAMED_24;
enum D3D10_MESSAGE_ID;
enum trType_t;
enum expDataType;
union operandInternalDataUnion;
struct Operand;
enum MaterialVertexDeclType;
struct MenuCell;
enum tagShutdownType;
enum rieType;
enum scriptAnimMoveTypes_t;
enum _TAG_UNNAMED_25;
enum _TAG_UNNAMED_26;
enum TractionType;
enum _HEAP_INFORMATION_CLASS;
enum perksEnum;
enum DXGI_MODE_ROTATION;
enum _TAG_UNNAMED_27;
enum D3D_SRV_DIMENSION;
class phys_link_list<pulse_sum_node>;
enum _TAG_UNNAMED_28;
enum team_t;
enum GfxBlendOp;
enum PlaylistLockState;
enum _TAG_UNNAMED_29;
struct ID3D11Texture1D;
enum jqProcessor;
enum _TAG_UNNAMED_30;
struct D3D11_TEX2DMS_RTV;
enum scriptAnimEventTypes_t;
enum NV_DP_LANE_COUNT;
enum _TAG_UNNAMED_31;
enum jqWorkerType;
enum DNameStatus;
struct LerpEntityStateDestructibleHit;
struct DestructibleState;
enum GfxTextureFunc;
enum _TAG_UNNAMED_32;
enum _NVVIOOUTPUTAREA;
enum state_t;
struct sv_FxVisBlock_t;
struct fxLightingState_t;
enum _TAG_UNNAMED_33;
enum DemoType;
enum scoreBoardColumns_e;
struct _XMDECN4;
enum keyNum_t;
union __m128;
class hybrid_vector;
struct colgeom_visitor_t;
enum _TAG_UNNAMED_34;
enum _D3D_INCLUDE_TYPE;
enum ai_substate_t;
enum e_itemListColumns;
enum weapAnimFiles_t;
class pulse_sum_normal;
class pulse_sum_wheel;
enum _TAG_UNNAMED_35;
struct vehicle_spline_node_t;
enum GfxTextureOp;
enum CoreStringTable;
enum NV_COOLER_CONTROLLER;
enum destructiblePieceFieldType_t;
enum statsLocation;
enum gjccc_create_type_e;
enum _TAG_UNNAMED_36;
enum NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID;
enum _RTC_ErrorNumber;
enum _TAG_UNNAMED_37;
struct sd_decoder_pcm16;
enum GfxStencilFunc;
enum _TAG_UNNAMED_38;
enum _D3D_SHADER_VARIABLE_CLASS;
enum MaterialStateSet;
enum _TAG_UNNAMED_39;
struct $_TypeDescriptor$_extraBytes_19;
enum eWeaponOptionGroup;
enum _D3D_SHADER_VARIABLE_FLAGS;
class bdFastArray<unsigned __int64>;
enum GfxStencilOp;
struct HashEntry;
struct tagVS_FIXEDFILEINFO;
struct _MINIDUMP_MODULE_CALLBACK;
enum VehicleSeatPositions;
enum _D3DFORMAT;
enum EvalOperatorType;
enum EMemTrack;
class broad_phase_info;
struct D3D11_TEX1D_RTV;
enum WheelEffectState;
enum eAttachment;
enum DWRITE_FONT_STYLE;
struct animScript_t;
enum _D3D_SHADER_VARIABLE_TYPE;
enum eWeaponComponentType;
enum EntInfoType;
struct GfxStreamedPartInfo;
enum ddlReturnCodes_e;
struct ddlState_t;
enum aistateEnum_t;
enum clearType_t;
enum VARENUM;
struct trajectory_t;
struct LerpEntityStateTurret;
struct LerpEntityStateLoopFx;
struct LerpEntityStateActor;
struct LerpEntityStatePrimaryLight;
union Weapon;
struct LerpEntityStatePlayer;
struct LerpEntityStateVehicleGunnerAngles;
struct LerpEntityStateVehicleRotorArm;
struct LerpEntityStateVehicle;
struct LerpEntityStateMissile;
struct LerpEntityStateScriptMover;
struct LerpEntityStateBulletHit;
struct LerpEntityStateEarthquake;
struct LerpEntityStateCustomExplode;
struct LerpEntityStateExplosion;
struct LerpEntityStateExplosionJolt;
struct LerpEntityStateJetThrust;
struct LerpEntityStatePhysicsJitter;
struct LerpEntityStateCreateDynEnt;
struct LerpEntityStateStreamerHint;
struct LerpEntityStateZBarrierPiece;
struct LerpEntityStateZBarrier;
struct LerpEntityStateAnonymous;
union LerpEntityStateTypeUnion;
struct LerpEntityState;
struct renderOptions_s;
struct actorAnimState_t;
struct playerAnimState_t;
struct vehicleState_t;
struct hardlineHint_t;
struct scriptMoverState_t;
struct clientLinkInfo_t;
struct entityState_s;
enum NitrousVehicleController::VehicleHorseControlState;
enum dvar_cmd_t;
enum statIndex_t;
enum scriptAnimConditions_t;
struct _XMUSHORT2;
enum DXGI_MODE_SCALING;
enum eAttachmentPoint;
enum _D3DDEGREETYPE;
enum perfValType_t;
enum _TAG_UNNAMED_40;
enum std::pointer_safety::pointer_safety;
struct XAUDIO2_EFFECT_CHAIN;
struct SaveSourceBufferInfo;
enum animCommandFlags;
enum DWRITE_FONT_FACE_TYPE;
enum WeaponCamoMaterialFlags;
enum _TAG_UNNAMED_41;
enum jsmnPrimitiveType_e;
enum _TAG_UNNAMED_42;
class environment_rigid_body;
class phys_inplace_avl_tree<rigid_body_pair_key,rigid_body_constraint_contact,rigid_body_constraint_contact::avl_tree_accessor>;
class phys_free_list<user_rigid_body>::T_internal_base;
class phys_free_list<user_rigid_body>;
class phys_free_list<rigid_body>::T_internal_base;
class phys_free_list<rigid_body>;
class phys_free_list<rigid_body_constraint_contact>::T_internal_base;
class phys_free_list<rigid_body_constraint_contact>;
class phys_free_list<rigid_body_constraint_hinge>::T_internal_base;
class phys_free_list<rigid_body_constraint_hinge>;
class phys_free_list<rigid_body_constraint_distance>::T_internal_base;
class phys_free_list<rigid_body_constraint_distance>;
class phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base;
class phys_free_list<rigid_body_constraint_ragdoll>;
class phys_free_list<rigid_body_constraint_wheel>::T_internal_base;
class phys_free_list<rigid_body_constraint_wheel>;
class phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base;
class phys_free_list<rigid_body_constraint_custom_orientation>;
class phys_free_list<rigid_body_constraint_custom_path>::T_internal_base;
class phys_free_list<rigid_body_constraint_custom_path>;
class phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base;
class phys_free_list<rigid_body_constraint_angular_actuator>;
class phys_free_list<rigid_body_constraint_upright>::T_internal_base;
class phys_free_list<rigid_body_constraint_upright>;
struct minspec_read_write_mutex;
class phys_transient_allocator;
class physics_system;
enum _MINIDUMP_TYPE;
enum _TAG_UNNAMED_43;
enum _NVAPI_MODULE_ID;
enum eAttachmentOverrideEffects;
enum _TAG_UNNAMED_44;
struct SndOverlayInfo;
enum bdTencentAASRecord::bdRecordStatus;
class bdTencentAASRecord;
enum _TAG_UNNAMED_45;
struct MaterialArgumentCodeConst;
union MaterialArgumentDef;
enum he_type_t;
struct _LIST_ENTRY;
struct _RTL_CRITICAL_SECTION_DEBUG;
enum _TAG_UNNAMED_46;
enum combatRecordMedalCategories_t;
enum DXGI_FORMAT;
enum D3D10_DEPTH_WRITE_MASK;
enum clientlsg_t;
enum tagTYSPEC;
union vec4_t;
struct blend_ent_t;
class bdRunnable;
enum std::float_round_style;
struct _XMUSHORTN4;
enum _D3D_SHADER_INPUT_FLAGS;
enum _NVAPI_SURFACE_LAYOUT;
enum BindIndex_t;
enum eAutoMeleeState;
class bdLobbyEventHandler;
enum eGameModes;
enum _TAG_UNNAMED_47;
enum DEFAULTSAVEFOLDERTYPE;
enum _D3D_SHADER_INPUT_TYPE;
enum NV_GPS_PS_STATUS;
enum loadoutClass_t;
union GfxTexture;
struct Picmip;
struct CardMemory;
struct GfxImage;
class pulse_sum_point;
class bdSecurityID;
struct XNADDR;
class bdSecurityKey;
struct XSESSION_INFO;
enum netadrtype_t;
enum netsrc_t;
struct netadr_t;
struct ClientInfo;
enum ControllerIndex_t;
struct RegisteredUser;
struct SessionDynamicData;
enum weapPositionAnimNum_t;
class bdReference<bdByteBuffer>;
class bdBoolResult;
struct zbarrier_piece_t;
enum XAUDIO2_WINDOWS_PROCESSOR_SPECIFIER;
enum consoleChannel_e;
enum D3D10_RESOURCE_DIMENSION;
struct _XMDHENN3;
enum IdentityParam;
enum WeapAccuracyType;
enum _TAG_UNNAMED_48;
enum D3D10_RTV_DIMENSION;
enum D3D11_FILTER;
enum _NVAPI_DITHER_BITS;
struct CRCscan;
enum _TAG_UNNAMED_49;
enum _TAG_UNNAMED_50;
enum _D3D_SHADER_CBUFFER_FLAGS;
enum _TAG_UNNAMED_51;
enum XAnimFlags;
enum weapAnimNumber_t;
enum typeEnumLB;
class bdGroup;
enum itemGroup_t;
enum _D3D_CBUFFER_TYPE;
struct IRecordInfo;
enum weaponAltModel_t;
enum D3D11_TEXTURE_ADDRESS_MODE;
enum _NV_GPU_OUTPUT_TYPE;
enum _TAG_UNNAMED_52;
enum _TAG_UNNAMED_53;
enum _TAG_UNNAMED_54;
enum _TAG_UNNAMED_55;
enum _NVAPI_VIDEO_FEATURE;
union vec2_t;
struct bot_steering_t;
enum D3D_NAME;
enum svscmd_type;
enum loadoutSlot_t;
enum _TAG_UNNAMED_56;
enum statsMilestoneTypes_t;
enum _TAG_UNNAMED_57;
enum MigrationState;
enum dlcIndex_t;
enum LocalClientNum_t;
struct ltc_ecc_set_type;
enum DevEventType;
enum pmoveVehAnimState_t;
enum LbZombieGameMode;
enum _NV_ROTATE;
enum _TAG_UNNAMED_58;
enum path_type_e;
enum tagDESCKIND;
enum _NV_STANDARD_COLORSPACE;
enum scoreboardColumnType_t;
enum cacmpshared_type_e;
enum ComSaveLumpBehavior;
enum D3D_RESOURCE_RETURN_TYPE;
enum STBVorbisError;
enum UIContextIndex_t;
enum clanTagFeatureColumn_t;
enum FF_DIR;
enum bdLobbyErrorCode;
enum ClientNum_t;
struct ID3D11DepthStencilView;
enum _TAG_UNNAMED_59;
enum _TAG_UNNAMED_60;
enum tag_WBEMSTATUS;
enum Location;
enum _TAG_UNNAMED_61;
enum GameTypeSettingsType;
enum bonusCards_t;
enum D2D1_RENDER_TARGET_TYPE;
struct GfxBlendSaveScreenBlurredParam;
enum D3D_REGISTER_COMPONENT_TYPE;
enum TaskState;
enum _TAG_UNNAMED_62;
enum WeaponDobjInfo::Slot;
struct WeaponDobjInfo::ModelMask;
enum XAssetType;
enum PIMP_TECHSET;
enum D3D_TESSELLATOR_DOMAIN;
class bdArray<bdAddr>;
enum DXGI_SWAP_EFFECT;
enum _TAG_UNNAMED_63;
enum vc_attributes::YesNoMaybe;
class phys_simple_allocator<gjk_partition_t>;
enum vc_attributes::AccessType;
class phys_simple_link_list<contact_point_info>;
class phys_inplace_avl_tree_node<rigid_body_constraint_contact>;
class rigid_body_pair_key;
class rigid_body_constraint_contact;
enum statsTableColumns_t;
enum D3D_TESSELLATOR_PARTITIONING;
enum DWRITE_FONT_WEIGHT;
enum ParseThreadContext;
enum D3D_TESSELLATOR_OUTPUT_PRIMITIVE;
enum NitrousVehicle::NitrousNotifyFlags;
enum D3D10_USAGE;
enum DWRITE_READING_DIRECTION;
enum D3D11_QUERY;
enum _TAG_UNNAMED_64;
enum OffhandSecondaryClass;
enum DynEntityDrawType;
struct flamePhysics_t;
struct flameSize_t;
struct flameAge_t;
struct flameList_t;
struct flameGeneric_s;
struct flameSmoke_t;
enum _TAG_UNNAMED_65;
enum _TAG_UNNAMED_66;
enum OffhandPrimaryClass;
enum bdLobbyConnection::RecvState;
enum _TAG_UNNAMED_67;
enum _TAG_UNNAMED_68;
struct XDollBone;
enum _TAG_UNNAMED_69;
enum D3D10_QUERY;
enum _TAG_UNNAMED_70;
enum _TAG_UNNAMED_71;
class bdPendingBufferTransfer;
enum weaponstate_t;
struct DXGI_SAMPLE_DESC;
struct D3D10_TEXTURE2D_DESC;
enum D3D11_FILL_MODE;
struct tagInfo_t;
enum gjk_query_flags_e;
enum D3D11_CULL_MODE;
enum eBattleChatterPlayStates;
enum fileshareState_e;
enum ActionSlotType;
struct XAnimDeltaPart;
enum bdNATTypeDiscoveryPacket::bdNATTypeDiscoveryPacketRequest;
enum _TAG_UNNAMED_72;
enum GridPointAlignType;
enum _tagPARSEACTION;
struct GfxPixelShaderLoadDef;
struct MaterialPixelShaderProgram;
struct MaterialPixelShader;
enum bdConnectionStore::bdConnectionStoreStatus;
enum PhysWorld;
struct _XMUDECN4;
enum _TAG_UNNAMED_73;
enum language_t;
enum tagDOMNodeType;
enum bdPriority;
enum FxUpdateEffectType;
struct D3D11_BUFFEREX_SRV;
enum GfxLightType;
enum _tagPSUACTION;
struct sockaddr;
enum _TAG_UNNAMED_74;
enum weaponAttachModel_t;
enum GfxExtraCamParms::eExtraCamRenderMode;
enum _TAG_UNNAMED_75;
enum tagExtentMode;
enum StanceState;
enum tagXMLEMEM_TYPE;
enum _NVVIOCOLORSPACE;
enum AISpecies;
struct D3D11_MAPPED_SUBRESOURCE;
enum clientMigState_t;
enum _TAG_UNNAMED_76;
enum _tagQUERYOPTION;
enum _TAG_UNNAMED_77;
enum D3D11_DSV_DIMENSION;
enum bdConnectionStore::bdConnectionStoreShutdownType;
enum _TAG_UNNAMED_78;
enum ViewLockTypes;
struct RopeUpdateCmdData;
struct XAnimClientNotifyAdder;
enum VehicleAnimState;
struct XAnimNotifyInfo;
enum D3D_FEATURE_LEVEL;
enum _TAG_UNNAMED_79;
enum _NVVIOLINKID;
enum _TAG_UNNAMED_80;
enum D3D11_RTV_DIMENSION;
struct VehicleGearData;
enum serverState_t;
enum _TAG_UNNAMED_81;
enum _NV_DISPLAYCONFIG_SPANNING_ORIENTATION;
enum _TAG_UNNAMED_82;
enum MissileFlightMode;
enum VP_FindCustomPath::__l4::pathNodeTransientFlags;
enum D3D11_UAV_DIMENSION;
enum _TAG_UNNAMED_83;
enum D3D10_COUNTER;
enum D3D11_BIND_FLAG;
enum dediConnectionState_e;
struct ContentPackMetaData;
enum _TAG_UNNAMED_84;
enum D3D11_USAGE;
enum tagGLOBALOPT_EH_VALUES;
struct ValueEntry;
enum _TAG_UNNAMED_85;
enum _NVVIOSYNCSOURCE;
enum XAUDIO2_FILTER_TYPE;
enum D3D10_COUNTER_TYPE;
enum tagBANDSITECID;
enum D3D11_COUNTER_TYPE;
enum NV_MOSAIC_TOPO_TYPE;
enum ReplacesCorHdrNumericDefines;
enum _TAG_UNNAMED_86;
enum _TAG_UNNAMED_87;
struct ScriptCondition;
struct plane_lt;
enum snd_asset_format;
enum entity_event_t;
enum D2D1_BITMAP_INTERPOLATION_MODE;
enum PKA_FLAGS;
enum _TAG_UNNAMED_88;
class bdHashingClass;
class bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass>;
class bdSecurityKeyMap;
enum D3DX10_IMAGE_FILE_FORMAT;
struct GfxSaveScreenParam;
enum ConstraintType;
enum _NV_TIMING_OVERRIDE;
enum SndCsvParseEntryType;
enum AttachPointType;
enum D3D11_RESOURCE_DIMENSION;
enum GamePadButtonEvent;
enum HU_ALLOCATION_SCHEME;
enum _NVAPI_SETRESOURCEHINT_CATEGORY;
enum connectionType_e;
struct GfxStateBits;
enum _TAG_UNNAMED_89;
enum LeagueDataState;
struct LeagueStats;
struct LeagueOutcomes;
struct PartyMemberLeagueData;
enum tagFUNCKIND;
struct rectDef_s;
struct columnInfo_s;
struct listBoxDef_s;
enum _TAG_UNNAMED_90;
enum guidedMissileType_t;
enum D3D10_FEATURE_LEVEL1;
enum bdHTTPWrapperBase::bdOperation;
enum _TAG_UNNAMED_91;
struct _RTL_CRITICAL_SECTION;
struct PartySceNpId;
enum YUV_TYPE;
enum bdNATTravClientData::bdNATTravClientDataState;
enum OffhandClass;
enum D2D1_DRAW_TEXT_OPTIONS;
enum bdFileInfo::bdVisibility;
enum weapProjExposion_t;
enum _NV_PATH_MODE;
enum _TAG_UNNAMED_92;
enum activeReticleType_t;
enum GamePadStick;
enum ammoCounterClipType_t;
enum _TAG_UNNAMED_93;
enum ImpactType;
enum _TAG_UNNAMED_94;
enum _TAG_UNNAMED_95;
enum objectiveState_t;
enum statsValidation_t;
enum tagINVOKEKIND;
enum nearestNodeHeightCheck;
enum FS_SERVER_COMPARE_RESULT;
enum weapInventoryType_t;
class bdFileInfo;
enum bdAuthTicket::bdTicketTypes;
enum D3D11_COUNTER;
enum _TAG_UNNAMED_96;
enum SndNotifyType;
enum _TAG_UNNAMED_97;
struct GfxLightScale;
enum DynEntityCollType;
enum barrelType_t;
enum _TAG_UNNAMED_98;
enum tagApplicationType;
enum bb_profilelog_thread;
enum _TAG_UNNAMED_99;
struct _XMXDECN4;
enum PIDMSI_STATUS_VALUE;
enum SndSpeaker;
enum bdAuthService::bdStatus;
enum _TAG_UNNAMED_100;
enum saveFieldtype_t;
struct liveAddr;
struct platformNetAdr;
struct D3D11_TEXTURE1D_DESC;
enum bdGetHostByName::bdStatus;
enum ParamDataDesc;
enum _TAG_UNNAMED_101;
struct col_prim_t;
class colgeom_visitor_inlined_t<500>;
enum bdQoSProbe::bdQoSProbeStatus;
enum listColumnTypes_t;
enum _TAG_UNNAMED_102;
enum bdQoSProbe::bdQoSListenerState;
enum bdHeartbeatAckChunk::bdHeartbeatAckFlags;
enum rigid_body_constraint_point::ps_cache_e;
enum tracerType_t;
enum D3D11_MAP;
enum PacketSpecialEntityIndex_t;
enum SurfaceGroupEnum;
enum D3D11_DEVICE_CONTEXT_TYPE;
class phys_free_list<rigid_body>::iterator;
enum PredictionTraceResult;
enum clc_ops_e;
enum rigid_body::rigid_body_flags_e;
enum D3D10_COLOR_WRITE_ENABLE;
enum bdTwitterResultType;
struct tagCACLIPDATA;
enum _TAG_UNNAMED_103;
enum MergeDedicatedState;
enum bdDataChunk::bdDataFlags;
enum PARM_SUPPRESSION;
enum weapType_t;
enum bdReliableSendWindow::bdCongestionWindowDecreaseReason;
struct jqAtomicHeap::LevelInfo;
enum errorParm_t;
enum std::_Uninitialized;
enum tlThreadPriority;
struct MenuRow;
enum VehicleEngineState;
enum _TAG_UNNAMED_104;
class bdSocket;
struct _GUID;
struct tagTYPEDESC;
struct tagIDLDESC;
struct tagTYPEATTR;
enum Bind_t;
struct _XMFLOAT3SE;
enum _TAG_UNNAMED_105;
enum _TAG_UNNAMED_106;
enum _TAG_UNNAMED_107;
enum LaserLightEnum;
class bdLinkedList<bdPendingBufferTransfer>;
class bdQueue<bdPendingBufferTransfer>;
enum CriticalSection;
enum bdDTLSAssociationStatus;
struct DIPROPHEADER;
enum _TAG_UNNAMED_108;
enum bdDTLSAssociation::bdDTLSStatus;
enum bdShutdownChunk::bdShutdownFlags;
enum _TAG_UNNAMED_109;
enum bdDTLSError::bdDTLSErrorType;
enum CURLcode;
enum _TAG_UNNAMED_110;
struct tagCAUB;
enum _NVVIOPCILINKRATE;
enum bdKeyValuePair::bdArchiveUpdateType;
struct tagSAFEARRAYBOUND;
struct tagARRAYDESC;
class LeaderboardFileShareRow;
class bdStatsInfoEx;
struct fileshareStats_t;
enum animScriptMounted_t;
enum rigid_body_constraint_wheel::wheel_flags_e;
enum _TAG_UNNAMED_111;
enum locSel_t;
enum _TAG_UNNAMED_112;
enum bdECCKey::bdECCKeyStatus;
enum clientConnected_t;
enum cgVehicleTurretLoopState_t;
enum tlThreadFlags;
struct D3D11_DEPTH_STENCILOP_DESC;
struct D3D11_DEPTH_STENCIL_DESC;
enum MULTICAST_MODE_TYPE;
class tlAtomicMutex;
enum _TAG_UNNAMED_113;
enum UILocalVarType;
enum _NVVIOINTERLACEMODE;
enum bdFacebookFriendSort;
enum _TAG_UNNAMED_114;
enum WeapOverlayInteface_t;
enum bdAuthMsgTypes;
union XAnimDynamicIndices;
struct XAnimDeltaPartQuatDataFrames;
union XAnimDeltaPartQuatData;
struct XAnimDeltaPartQuat;
enum SndMenuCategory;
enum bdCookieEchoChunk::bdCookieEchoFlags;
enum D3D11_INPUT_CLASSIFICATION;
enum _NV_GPU_HDCP_KEY_SOURCE_STATE;
struct dwTeamClanInviteTask;
struct _SECURITY_ATTRIBUTES;
enum VehicleMantlePoints;
class bdFastArray<unsigned int>;
enum eDogRunStartKnobAnims;
enum rigid_body_constraint_hinge::ps_cache_e;
enum _TAG_UNNAMED_115;
struct D3D11_BUFFER_RTV;
struct D3D11_TEX1D_ARRAY_RTV;
struct D3D11_TEX2D_RTV;
struct D3D11_TEX2D_ARRAY_RTV;
struct D3D11_TEX2DMS_ARRAY_RTV;
struct D3D11_TEX3D_RTV;
struct D3D11_RENDER_TARGET_VIEW_DESC;
class bdYouTube;
enum weapFireType_t;
struct _iobuf;
enum destructibleFieldType_t;
enum ffa_team_t;
struct _XMUNIBBLE4;
enum rigid_body_constraint_wheel::wheel_state_e;
enum bdUPnP::bdUPnPState;
enum bdUPnPDevice::bdUPnPDeviceShutdownType;
enum scriptAnimWeaponPositions_t;
enum ai_traverse_mode_t;
enum NV_HDCP_RET_STATUS;
enum bdPagingToken::bdStatus;
enum _TAG_UNNAMED_116;
enum bdUPnPDevice::bdUPnPPortStatus;
enum D3D10_BIND_FLAG;
enum _NV_DISPLAY_TV_FORMAT;
enum connstate_t;
enum visionSetLerpStyle_t;
enum _TAG_UNNAMED_117;
class pulse_sum_contact;
enum ScriptTokenizer::TokenType;
enum bdRemoteTask::bdStatus;
enum VehicleEntryPoints;
enum shoutcaster_showperks;
enum bdNetImpl::bdNetStatus;
class char4;
enum bdAddrHandle::bdAddrHandleStatus;
struct VehicleEngineSound;
enum _NV_GPU_FB_LOCATION;
enum IKBoneNames;
enum _TAG_UNNAMED_118;
struct mover_positions_t;
struct mover_slidedata_t;
struct mover_ent_t;
enum rigid_body_constraint_upright::ps_cache_e;
enum _TAG_UNNAMED_119;
enum _NVAPI_VIDEO_FEATURE_GET_FLAG;
enum WeapStickinessType;
enum _TAG_UNNAMED_120;
enum ComDevhostCommandAI;
struct CD3D11_DEPTH_STENCIL_VIEW_DESC;
enum weapClass_t;
enum IKDebug;
enum EVehicleRotors;
enum contact_point_info::ps_cache_e;
enum eInfluencerShape;
class bdFacebookFriend;
enum PartyLeagueState;
enum D3D10_MESSAGE_SEVERITY;
struct IDXGIFactory;
enum CombatMode;
enum TraceHitType;
enum NV_DP_BPC;
enum _TAG_UNNAMED_121;
enum bdFileMetaData::bdVisibility;
enum TurretRotateState;
enum bdUPnPConfig::bdUPnPRunMode;
enum _NVAPI_STEREO_INIT_ACTIVATION_FLAGS;
enum weapOverlayReticle_t;
enum rigid_body_constraint_custom_orientation::ps_cache_e;
enum OffhandSlot;
enum _TAG_UNNAMED_122;
enum bdLobbyConnection::Status;
enum rigid_body_constraint_distance::ps_cache_e;
enum _TAG_UNNAMED_123;
enum bdNATTravClient::bdNATTravClientStatus;
class bdTwitterAccount;
enum Dtp_SurfaceType;
struct item_ent_t;
enum _TAG_UNNAMED_124;
enum weaponIconRatioType_t;
enum _NV_StereoRegistryID;
enum AI_MOVE_MODE;
enum _TAG_UNNAMED_125;
enum VehicleDriveBySoundType;
enum AI_STAIRS_STATE;
enum _TAG_UNNAMED_126;
struct cStaticModelWritable;
enum hitLocation_t;
enum weapClipType_t;
enum _TAG_UNNAMED_127;
enum rankTierTableColumns_t;
struct PartyStatePacket_s;
enum HELICOPTER_STAGES;
enum VehicleSound;
enum ai_state_transition_t;
struct BoneOrientation;
enum ComDevhostSystem;
enum _NVAPI_VENTURA_DEVICE;
enum _TAG_UNNAMED_128;
enum bdNATTypeDiscoveryClient::bdNATTypeDiscoveryClientState;
enum _TAG_UNNAMED_129;
enum _TAG_UNNAMED_130;
enum WeapRotateType;
struct D3D11_VIEWPORT;
enum bdSocketStatusCode;
enum _TAG_UNNAMED_131;
enum weapStance_t;
enum PenetrateType;
enum _TAG_UNNAMED_132;
enum bdKeyArchive::bdReservedCategory;
enum _TAG_UNNAMED_133;
enum bdDTLSPacketTypes;
enum _TAG_UNNAMED_134;
enum _TAG_UNNAMED_135;
enum bdRSAKey::bdRSAKeyStatus;
class bdDTLSError;
enum bdSocketRouter::bdSocketRouterStatus;
enum GFX_SURFACE_FLAGS;
enum MissileStage;
enum file_image_flags_t;
enum bdBandwidthTestType;
enum bdHTTPWrapperBase::bdStatus;
struct QueueElement;
enum demoInformationScreenTypes;
enum bdSequenceNumberStore::bdSequenuceStatus;
enum bdStats::bdWriteType;
enum netFieldTypes_t;
enum bdUPnPDevice::bdUPnPDeviceState;
union GfxColor;
enum bdIPDiscoveryClient::bdIPDiscoveryClientStatus;
enum eDemoSpawnLogDataType;
enum PerLocalClientAllocFlags;
enum QueryId;
enum std::_Iosb<int>::_Seekdir;
enum DeltaFlags;
enum ai_stance_e;
class bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass>;
enum hudelem_update_t;
enum trackerFileCol_e;
enum hintType_t;
struct FxSpawnDefLooping;
struct FxIntRange;
struct FxSpawnDefOneShot;
union FxSpawnDef;
struct FxFloatRange;
struct FxElemAtlas;
union FxEffectDefRef;
union FxElemVisuals;
union FxElemDefVisuals;
union FxElemExtendedDefPtr;
struct FxBillboardTrim;
union FxElemDefUnion;
struct FxElemSpawnSound;
struct FxElemDef;
enum cgDrawTalkEnum;
enum _TAG_UNNAMED_136;
enum _TAG_UNNAMED_137;
enum _TAG_UNNAMED_138;
struct Bounds;
enum profile_setting;
enum _TAG_UNNAMED_139;
enum _TAG_UNNAMED_140;
enum rope_constraint_e;
enum TexAllocFlags;
enum _TAG_UNNAMED_141;
enum ai_state_t;
class bdQoSReplyPacket;
enum cgScoreboardSort_e;
enum ELobbyComparison;
enum _TAG_UNNAMED_142;
enum PacketEntityType;
enum ddlPrimitiveTypes_e;
enum nodeType;
class bdGroupCount;
enum entityType_t;
enum SndFluxType;
enum _TAG_UNNAMED_143;
enum GfxSaveScreenParam::SAVESCREEN_MODE;
enum zmGameModeGroup_t;
enum ObjectIconType;
enum PhysicsOwnerType;
enum EAccountType;
enum ai_animmode_t;
enum std::_Iosb<int>::_Dummy_enum;
enum rigid_body_constraint_wheel::internal_wheel_flags_e;
enum _TAG_UNNAMED_144;
enum rigid_body_constraint_wheel::ps_cache_e;
struct CD3D10_TEXTURE3D_DESC;
enum eHand;
enum std::errc::errc;
enum scriptAnimVehicleEntryPos_t;
enum rigid_body_constraint_ragdoll::flags_e;
enum EMarketingMessageFlags;
enum rigid_body_constraint_ragdoll::ps_cache_e;
enum _TAG_UNNAMED_145;
enum bdShutdownCompleteChunk::bdShutdownCompleteFlags;
class rigid_body_constraint_point;
enum _TAG_UNNAMED_146;
enum STATE;
class rb_inplace_partition_node;
class rigid_body;
enum EPersonaState;
enum rigid_body_constraint_hinge::flags_e;
enum rigid_body_constraint_hinge::public_flags_e;
enum _TAG_UNNAMED_147;
enum AlertLevel;
enum std::_Iosb<int>::_Openmode;
struct HICON__;
enum winConnectionState_e;
enum bb_profilelog_id;
enum _TAG_UNNAMED_148;
enum _NVAPI_DITHER_MODE;
enum uiSessionsLines_e;
enum sessionState_t;
enum contact_point_info::flags_e;
enum _XUSER_SIGNIN_STATE;
enum visionSetMode_t;
enum DynEntityType;
enum MtlTechSetNotFoundBehavior;
enum eVoiceMuteReason;
enum rigid_body_constraint_distance::flags_e;
enum aiGoalSources;
enum ELeaderboardSortMethod;
enum DelayedWeapDropState;
enum aiphys_t;
enum _TAG_UNNAMED_149;
enum phys_gjk_cache_info::phys_gjk_cache_info_e;
struct static_colgeom_visitor_t;
enum _TAG_UNNAMED_150;
enum ERemoteStoragePlatform;
enum ai_orient_mode_t;
enum _TAG_UNNAMED_151;
enum EWorkshopFileAction;
enum _TAG_UNNAMED_152;
enum thirdPersonType;
struct IDirectSound;
enum ActorAnimStates;
enum rigid_body_constraint_angular_actuator::ps_cache_e;
enum team_indicator;
enum D2D1_COMBINE_MODE;
enum eEmblemLayers;
enum _TAG_UNNAMED_153;
class bdInAddr;
class bdInetAddr;
class bdAddr;
class bdNATTypeDiscoveryPacketReply;
enum ShockViewTypes;
enum emblemOrBacking_e;
enum CubemapShot;
enum InvalidCmdHintType;
enum scaleMode_t;
enum SuccessfulCmdHintType;
enum DWRITE_BREAK_CONDITION;
enum scriptAnimDirections_t;
enum KillCamEntityRestState;
enum rigid_body_constraint_custom_path::ps_cache_e;
class phys_inplace_avl_tree_node<auto_rigid_body>;
struct auto_rigid_body;
enum phys_gjk_info::gjk_retval_e;
enum _TAG_UNNAMED_154;
enum demoControllerConfig;
enum phys_gjk_info::gjk_flags_e;
enum _TAG_UNNAMED_155;
enum _TAG_UNNAMED_156;
enum trackerColumn_e;
enum CameraMode;
enum eSessionModes;
enum AntiBurnHudMenus;
enum LUI::LUISystem;
enum _TAG_UNNAMED_157;
enum SuperflareDrawlistModes;
enum fileShareLocation;
enum GfxPrimStatsStage;
enum GfxPrimStatsCounters;
enum eDogLookUp;
enum GfxDepthRangeType;
enum CGameID::EGameIDType;
enum _TAG_UNNAMED_158;
enum FLAC__StreamDecoderReadStatus;
struct IStream;
enum _TAG_UNNAMED_159;
enum bdContentStatusCode;
enum ActorAnimCategories;
enum _TAG_UNNAMED_160;
enum migrateClientState_t;
enum EVoiceResult;
enum _TAG_UNNAMED_161;
struct D3D11_TEX1D_ARRAY_UAV;
enum _TAG_UNNAMED_162;
enum bidTypes_e;
enum demoBookmarkType;
enum EXT_INSERTTYPE;
struct tagBLOB;
enum _TAG_UNNAMED_163;
enum D3D11_CLEAR_FLAG;
enum _TAG_UNNAMED_164;
enum CURLMSG;
enum _TAG_UNNAMED_165;
enum MaterialTextureSource;
enum _TAG_UNNAMED_166;
enum votePossible_e;
struct dynent_hit;
enum _TAG_UNNAMED_167;
enum pointsSpent_t;
enum _TAG_UNNAMED_168;
enum DWRITE_RENDERING_MODE;
enum bdUCDAccountStatus::bdElitePaidStatus;
enum _TAG_UNNAMED_169;
struct IEnumSTATSTG;
enum _TAG_UNNAMED_170;
enum PmMoveSpeeds;
enum GfxBlend;
enum _TAG_UNNAMED_171;
enum D2D1_WINDOW_STATE;
enum invalid_cmd_hint_t;
enum GfxTextureArg;
enum surfaceType_t;
enum demoClipState;
enum LocalTaskState;
enum VehicleTypes;
enum _TAG_UNNAMED_172;
enum demoSavePopup;
enum NitrousVehicle::NitrousVehicleFlags;
class bdSessionID;
class bdSessionInvite;
enum NitrousVehicle::NitrousVehicleModelFlags;
enum svc_ops_e;
enum TaskGroup;
struct ID3D11ShaderResourceView;
struct _s__RTTIClassHierarchyDescriptor;
enum DXGI_MODE_SCANLINE_ORDER;
enum _TAG_UNNAMED_173;
enum demoPacketType;
enum _TAG_UNNAMED_174;
enum GfxViewMode;
struct IXAudio2Voice;
struct static_tree_desc_s;
enum trackerColType_e;
enum ShadowType;
enum OcclusionReportsMode;
enum _TAG_UNNAMED_175;
struct XAUDIO2_BUFFER_WMA;
enum _TAG_UNNAMED_176;
enum bobType_t;
struct cLeaf_s;
enum gamertagsTableColumns_t;
enum eAttachmentOverrideSounds;
struct ID3D11BlendState;
enum std::float_denorm_style;
enum _NVAPI_STEREO_SURFACECREATEMODE;
class bdLeagueTeamMemberInfo;
enum _TAG_UNNAMED_177;
enum fsMode_t;
enum printParm_t;
enum _TAG_UNNAMED_178;
enum weapFieldType_t;
enum _TAG_UNNAMED_179;
enum demoDollyCamFX;
enum PlayerAnimType;
struct CD3D11_DEPTH_STENCIL_DESC;
enum pmtype_t;
enum _TAG_UNNAMED_180;
enum LastInput_t;
enum _TAG_UNNAMED_181;
enum DBLOCK_READY;
enum _TAG_UNNAMED_182;
enum _TAG_UNNAMED_183;
struct XVertexInfo_s;
struct XBlendLoadInfo;
struct XVertexBuffer;
enum demoHighlightReelPlayerFilter;
enum _TAG_UNNAMED_184;
enum _TAG_UNNAMED_185;
enum eBspSurfRegionType;
enum demoHighlightReelGameResultFilter;
enum VehicleTurretState;
struct D3D11_BUFFER_UAV;
struct D3D11_TEX1D_UAV;
struct D3D11_TEX2D_UAV;
struct D3D11_TEX2D_ARRAY_UAV;
struct D3D11_TEX3D_UAV;
struct D3D11_UNORDERED_ACCESS_VIEW_DESC;
enum VehicleMoveState;
enum demoLagFlag_e;
enum playerStatsKeyIndex_t;
enum prestigeTokenType_e;
enum _TAG_UNNAMED_186;
enum demoProfileData;
enum msgLocErrType_t;
enum gunLevelTableColumns_t;
enum elitePasswordStatus_e;
struct animScriptCommand_t;
enum bdUCDAccountStatus::bdMarketingOptInStatus;
enum RecordEventType;
enum NV_GPU_WARPING_VERTICE_FORMAT;
enum bdSubscriptionFilter;
struct PhysConstraint;
struct PhysConstraints;
enum proneCheckType_t;
enum PmStanceFrontBack;
enum animBodyPart_t;
enum clientplatform_t;
enum NV_I2C_SPEED;
enum EVehicleCameraMode;
enum EVehicleWiiUControlOverride;
enum TerrainFireSource;
class phys_inplace_avl_tree_node<generic_avl_map_node_t>;
enum MantleAnims;
enum _TAG_UNNAMED_187;
enum NV_COOLER_CONTROL;
enum _TAG_UNNAMED_188;
enum eEmblemCategoriesOrLayersType;
struct CD3D11_TEXTURE3D_DESC;
enum eEmblemsOrBackings;
enum eEmblemOrBackingsType;
enum emblemTypes_t;
struct timeval;
enum eEmblemCategories;
enum _NVAPI_D3D9_QUERY_COMMAND;
enum scriptAnimMoveStatusStates_t;
enum scriptAnimDmgDirections_t;
enum scriptAnimDmgTypes_t;
struct debug_patch_t;
class debug_patch_info_t;
enum scriptAnimStances_t;
struct des_key;
struct des3_key;
struct rijndael_key;
union Symmetric_key;
struct symmetric_CBC;
class bdCypher3Des;
enum scriptAnimSlopeStates_t;
enum scriptAnimPerkStates_t;
class bdTrulyRandomImpl;
enum scriptAnimAttachmentStates_t;
enum animScriptConditionTypes_t;
enum SERVER_TYPE;
class bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>;
enum scriptAnimNoteType_t;
class bdStreamSocket;
class bdUPnPConfig;
class bdUPnPDevice;
enum scriptAnimStrafeStates_t;
enum _TAG_UNNAMED_189;
enum animScriptParseMode_t;
enum EUniverse;
struct CSteamID::SteamID_t::SteamIDComponent_t;
union CSteamID::SteamID_t;
class CSteamID;
enum EDenyReason;
struct GSClientDeny_t;
enum eDogMainAnims;
class CCallbackBase;
enum eDogRunKnobAnims;
enum _TAG_UNNAMED_190;
enum eDogAttackIdleKnobAnims;
enum eDogLookDown;
struct $_TypeDescriptor$_extraBytes_60;
enum MB_PREDICTION_MODE;
enum MV_REFERENCE_FRAME;
struct MV;
union int_mv;
struct MB_MODE_INFO;
enum B_PREDICTION_MODE;
union b_mode_info;
struct MODE_INFO;
struct vehicleAntilagFrame_t;
enum eDogLookRight;
class bdFastArray<bdPacketInterceptor *>;
class bdSocketRouterConfig;
class bdReference<bdCommonAddr>;
class bdArray<bdReference<bdAddrHandle> >;
class bdAddressMap;
class bdHashMap<bdReference<bdCommonAddr>,bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>,bdHashingClass>;
class bdHashMap<unsigned int,bdQoSProbe::bdQoSProbeEntryWrapper,bdHashingClass>;
class bdQoSProbe;
class bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass>;
struct bdNATTravClient::CachedTraversal;
class bdMutex;
class bdNATTravClient;
struct ecc_point;
struct ecc_key;
class bdECCKey;
class bdServiceBandwidthArbitrator;
class bdEndpointHashingClass;
class bdHashMap<bdEndpoint,bdDTLSAssociation *,bdEndpointHashingClass>;
class bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass>;
class bdSocketRouter;
enum eDogLookLeft;
enum NV_3D_PROPERTY;
class bdArray<bdInetAddr>;
enum eDogAnimStateStart;
enum _TAG_UNNAMED_191;
enum eProgressBar;
enum stream_priority;
enum stream_status;
enum _GET_FILEEX_INFO_LEVELS;
enum _TAG_UNNAMED_192;
enum SA_AttrTarget;
enum _TAG_UNNAMED_193;
enum voteWinner_e;
union expressionRpnDataUnion;
enum _TAG_UNNAMED_194;
class ISteamFriends;
class phys_static_array<phys_vec3,512>;
enum demoHighlightReelInformationType;
enum demoControlsButton;
enum demoHighlightReelTransitionFilter;
enum DWRITE_INFORMATIONAL_STRING_ID;
enum demoHighlightReelStylesFilter;
enum demoKeyboardModes;
struct ID3D11VertexShader;
enum demoState;
struct scr_animtree_t;
enum demoStreamingThrottleState;
enum fileshareCategory_e;
enum demoFreeCameraMode;
enum _D3DRESOURCETYPE;
enum demoClipTransition;
struct ID3D11UnorderedAccessView;
enum demoRestorePoint;
struct UnarchivedMatchState;
enum demoHighlightReelPlayerPriority;
enum demoDollyCameraTimeScaleMode;
enum attachedFieldType_t;
enum demoCameraMode;
enum D3D10_MAP;
struct SessionStaticData;
enum uiMenuCommand_t;
enum eSpawnSystemDebugMode;
enum _TAG_UNNAMED_195;
enum _NVAPI_DITHER_TYPE;
struct DPCChannel;
enum _TAG_UNNAMED_196;
enum D3D10_DSV_DIMENSION;
enum profile_category_e;
class bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass>::Node;
enum demoDebugInformation;
class phys_static_array<phys_vec3 *,6144>::iterator;
enum print_msg_dest_t;
struct trigger_info_t;
enum _TAG_UNNAMED_197;
enum _TAG_UNNAMED_198;
enum _NV_GPU_ILLUMINATION_ATTRIB;
enum SndStopSoundFlags;
enum demoClipCommand;
enum _TAG_UNNAMED_199;
enum GamePadButton;
enum _TAG_UNNAMED_200;
enum filesharePrimaryTags_e;
enum _NVVIOANCPARITYCOMPUTATION;
enum fileshareMPZMPTag_e;
struct tagPARAMDESC;
struct tagELEMDESC;
enum filesharePlaylistType_e;
class bdFastArray<char [64]>;
enum demoStreamingState;
enum downloadStreamingState;
struct NTPMessage;
struct animScriptCondition_t;
struct animScriptItem_t;
enum _TAG_UNNAMED_201;
enum FxBeamType;
enum D2D1_FEATURE_LEVEL;
enum demoDollyCamInformationType;
enum _TAG_UNNAMED_202;
struct pendingServer_t;
enum turret_handler;
struct ExtraCamLodInfo;
enum _TAG_UNNAMED_203;
class RaiiSrvString;
enum GlassShard::RemoveReason;
enum DWRITE_FLOW_DIRECTION;
enum _TAG_UNNAMED_204;
enum _TAG_UNNAMED_205;
struct ExpressionStatement;
enum GlassState::State;
class phys_simple_allocator<gjk_aabb_t>;
enum GlassOutline::SplitFailReason;
enum _TAG_UNNAMED_206;
enum eScriptsMismatch;
enum _TAG_UNNAMED_207;
class CPing;
class CPingThread;
enum _TAG_UNNAMED_208;
class jqMemBaseMarker;
enum XModelLodRampType;
enum LumpType;
struct GfxVertexShaderLoadDef;
struct MaterialVertexShaderProgram;
struct MaterialVertexShader;
enum _TAG_UNNAMED_209;
struct ID3D11PixelShader;
enum _TAG_UNNAMED_210;
enum _TAG_UNNAMED_211;
struct jqAtomicQueuePtr<jqAtomicQueue<jqBatch,32>::NodeType>;
struct jqAtomicQueue<jqBatch,32>;
struct jqQueue;
class jqAtomicHeap;
struct jqBatchPool;
enum XONLINE_NAT_TYPE;
class tlAtomicReadWriteMutex;
enum bdBandwidthTestStatus;
union PackedUnitVec;
struct GfxVertex;
enum bdBandwidthTestInitStatus;
enum DWNetStatus;
struct ID3D11CommandList;
enum e_JoinRejectionReason;
enum _NVVIOBITSPERCOMPONENT;
enum IMType;
enum _TAG_UNNAMED_212;
union _LARGE_INTEGER;
enum EUserTier;
enum _TAG_UNNAMED_213;
enum bdNotificationType;
enum _NVVIOCOMPSYNCTYPE;
class bdEventLogID;
enum bdMessaging::bdBlockLevel;
class bdAntiCheatChallenges;
enum bdTwitterFieldCode;
enum twitterStatus_e;
struct multiDef_s;
struct GfxReviveFx;
enum taskCompleteResults;
enum NV_TV_BORDER_COLOR;
enum _TAG_UNNAMED_214;
enum D2D1_ALPHA_MODE;
enum statsResetReason_t;
struct WeaponDef;
enum _TAG_UNNAMED_215;
enum dwKeyArchiveCategories;
enum _NV_PATH_TARGETTYPE;
enum uJson::Type;
enum D2D1_CAP_STYLE;
enum _TAG_UNNAMED_216;
enum _TAG_UNNAMED_217;
enum _TAG_UNNAMED_218;
enum _TAG_UNNAMED_219;
enum _TAG_UNNAMED_220;
enum _TAG_UNNAMED_221;
enum _TAG_UNNAMED_222;
struct _LUID;
enum _TAG_UNNAMED_223;
enum _TAG_UNNAMED_224;
enum EServerMode;
struct MaterialStreamRouting;
enum LiveAuthFlags_t;
enum SteamServerState;
struct _XMBYTEN4;
enum EUserHasLicenseForAppResult;
struct MaterialVertexStreamRouting;
struct MaterialVertexDeclaration;
enum EChatSteamIDInstanceFlags;
enum EBeginAuthSessionResult;
enum _NV_SCALING;
enum _TAG_UNNAMED_225;
class DdlBinder;
struct _SHITEMID;
enum EResult;
class bdTaskResult;
struct gameMsgDef_s;
enum _TAG_UNNAMED_226;
enum _TAG_UNNAMED_227;
enum _TAG_UNNAMED_228;
enum _TAG_UNNAMED_229;
struct bdQoSProbe::bdQoSProbeEntryWrapper;
class bdHashMap<unsigned int,bdQoSProbe::bdQoSProbeEntryWrapper,bdHashingClass>::Node;
enum _TAG_UNNAMED_230;
union __m64;
enum _TAG_UNNAMED_231;
enum EFriendRelationship;
enum EOverlayToStoreFlag;
class phys_static_array<phys_vec3 *,6144>;
enum EChatEntryType;
class bdAntiCheatChallengeParam;
enum _TAG_UNNAMED_232;
struct tagVARDESC;
enum LiveSteam_PersonaState;
enum _NVAPI_D3D9_DMA_TRANSFER_DIR;
enum EFriendFlags;
enum _TAG_UNNAMED_233;
struct dwTwitterGetAccountTask;
class bdArray<bdAntiCheatChallengeParam>;
enum _TAG_UNNAMED_234;
enum _TAG_UNNAMED_235;
enum FLAC__StreamDecoderState;
enum _TAG_UNNAMED_236;
class LeaderboardRow<10>;
enum EAchievements;
enum _NV_GPU_FLATPANEL_SIGNAL_LINK;
struct flame_timed_damage_t;
struct trigger_ent_t;
struct corpse_ent_t;
struct missile_ent_t;
struct actor_ent_t;
struct spawner_ent_t;
struct zbarrier_ent_t;
struct gentity_t;
enum _TAG_UNNAMED_237;
enum ESteamAPICallFailure;
enum _TAG_UNNAMED_238;
enum _TAG_UNNAMED_239;
enum FLAC__StreamDecoderTellStatus;
enum ELeaderboardDisplayType;
enum ELeaderboardDataRequest;
enum NV_EVENT_LEVEL;
enum ELeaderboardUploadScoreMethod;
enum Livesteam_TicketState_t;
struct D3D11_TEX1D_DSV;
struct D3D11_TEX1D_ARRAY_DSV;
struct D3D11_TEX2D_DSV;
struct D3D11_TEX2D_ARRAY_DSV;
struct D3D11_TEX2DMS_DSV;
struct D3D11_TEX2DMS_ARRAY_DSV;
struct D3D11_DEPTH_STENCIL_VIEW_DESC;
enum EP2PSend;
enum ESNetSocketConnectionType;
union tagCY;
enum ERemoteStoragePublishedFileVisibility;
enum EWorkshopFileType;
enum _NVVIODATAFORMAT;
enum EWorkshopVideoProvider;
struct CD3D10_BUFFER_DESC;
enum EWorkshopEnumerationType;
enum EHTTPMethod;
class phys_static_array<plane_lt,512>;
enum EMatchMakingServerResponse;
struct tagSAFEARRAY;
enum ELobbyDistanceFilter;
enum ELobbyType;
enum _NV_StereoRegistryProfileType;
enum SndBus;
enum SndDuckCategoryType;
struct IDXGIFactory1;
struct cStaticModel_s;
enum SndCallLocation;
enum SndAliasType;
enum SndLimitType;
enum rankTableColumns_t;
enum _NVAPI_VENTURA_STATE;
struct D3D10_TEXTURE1D_DESC;
enum demonwareFlags_e;
enum matchHistoryKeyIndex_t;
enum matchHistoryQuitType_t;
enum zombieStatsKeyIndex_t;
enum eScoreInfoTableColumns;
struct D3D11_RENDER_TARGET_BLEND_DESC;
enum statsDeltaColumns_t;
enum gameTypeTableColumns_t;
enum _TAG_UNNAMED_240;
enum challengeSortOrder_e;
enum XSurfaceVertColType;
enum SndBankState;
enum _TAG_UNNAMED_241;
enum SndLengthType;
struct TraceCheckCount;
struct TraceThreadInfo;
enum SndCommandType;
enum SndMusicActiveSegmentState;
enum SndFileLoadingState;
enum _TAG_UNNAMED_242;
enum SndEntityUpdate;
enum JPEG_MARKER;
enum SndEnvEffectPriority;
enum filterFlags;
enum searchSessionMode_t;
enum _TAG_UNNAMED_243;
struct XModelPartsLoad;
struct XBoneInfo;
struct XModelDefault;
struct XMVECTORU32;
enum friendsMode_e;
enum filesharePlayerFilter_e;
enum _TAG_UNNAMED_244;
enum _TAG_UNNAMED_245;
enum GPUTimerId;
enum _TAG_UNNAMED_246;
enum _TAG_UNNAMED_247;
struct VehicleParameter;
enum _TAG_UNNAMED_248;
class bdAddrHash;
enum fileshareStatType_e;
enum _TAG_UNNAMED_249;
union XAnimPartQuatFrames;
struct XAnimPartQuatDataFrames;
union XAnimPartQuatData;
enum _TAG_UNNAMED_250;
enum start_game;
enum _TAG_UNNAMED_251;
enum NVAPI_DEVICE_FEATURE_LEVEL;
enum eliteStatus_e;
enum D3D11_RESOURCE_MISC_FLAG;
enum eSubLevel_e;
enum EliteStats_e;
class bdFileID;
class bdChannelMember;
enum jsmntype_t;
class bdTitleUtilities;
enum jsmnerr_t;
enum EntityFieldInfoFlags;
class bdFastArray<bdSecurityID>;
enum combatRecordInfoTypes_t;
enum std::_Iosb<int>::_Fmtflags;
enum thresholdExceeded_e;
enum _NV_GPU_FLATPANEL_SIGNAL_TYPE;
struct cached_simplex_info;
class phys_gjk_geom_id_pair_key;
class phys_gjk_cache_info;
class bdEndpoint;
enum challengeTest_t;
struct CD3D11_VIEWPORT;
class bdRichPresence;
enum challengeResponseFunctionIDs_t;
enum SndSpeakerFlag;
enum snd_occlusion_query_type;
enum mtxItemsCategory_e;
enum snd_occlusion_single_state;
enum GfxDrawSceneMethod;
struct SndCurve;
enum XAUDIO2_DEVICE_ROLE;
enum D3D10_INPUT_CLASSIFICATION;
enum tagCOINIT;
enum tagCLSCTX;
struct XAnimFrameData;
struct clientsPositionArchive_t;
struct WeaponCamo;
enum sd_decoder_state;
struct ID3D11DeviceContext;
enum sd_voice_param_state;
enum entinfoType_t;
class bdReferencable;
enum sd_mix_param_state;
enum GfxProjectionTypes;
enum sd_voice_state;
enum D3DX11_IMAGE_FILE_FORMAT;
enum _TAG_UNNAMED_252;
enum sd_mix_channel;
struct recentFrame;
struct tagRECT;
enum SndOverlayType;
enum SndDataTableType;
enum SndLoadState;
enum _TAG_UNNAMED_253;
enum SndRandomizeType;
enum fieldtype_t;
enum WICNamedWhitePoint;
enum FullscreenType;
enum _TAG_UNNAMED_254;
struct SndLineEmitter;
struct cCurve::nodeData;
enum cCurve::eCurveType;
class cCurve;
enum ai_event_t;
struct ReliableCommands;
struct netProfilePacket_t;
struct netProfileStream_t;
struct netProfileInfo_t;
struct netchan_t;
struct clientConnection_t;
enum _TAG_UNNAMED_255;
enum RadiantCommandType;
enum ActionSlotIndex;
enum GUIDType;
class bdCounter;
enum actor_think_result_t;
enum ThreatDebugStringCategory;
enum ai_teammove_t;
enum EVehicleRotorOrientation;
struct GfxDrawSurfFields;
union GfxDrawSurf;
struct MaterialInfo;
struct Material;
enum _TAG_UNNAMED_256;
enum enumForceSpawn;
struct _FILETIME;
enum SlideMoveResult;
enum std::io_errc::io_errc;
enum _TAG_UNNAMED_257;
enum bdConnection::Status;
enum BotGoalPriority;
enum _EXCEPTION_DISPOSITION;
enum BotStance;
enum _TAG_UNNAMED_258;
enum _TAG_UNNAMED_259;
enum DBCloneMethod;
enum EntInfo_AITextMode;
enum INTRNCVT_STATUS;
enum ddlIntValueChanged_e;
enum bdSAckChunk::bdSAckFlags;
enum _TAG_UNNAMED_260;
enum dvarType_t;
enum _TAG_UNNAMED_261;
enum eInfluencerScoreCurve;
enum FsListBehavior_e;
enum J_DCT_METHOD;
enum _TAG_UNNAMED_262;
enum _TAG_UNNAMED_263;
enum _TAG_UNNAMED_264;
enum _TAG_UNNAMED_265;
enum _TAG_UNNAMED_266;
enum _TAG_UNNAMED_267;
enum _TAG_UNNAMED_268;
enum GfxModelLightExtrapolation;
enum _TAG_UNNAMED_269;
enum J_DITHER_MODE;
enum _TAG_UNNAMED_270;
enum _TAG_UNNAMED_271;
struct IDirectSoundCapture;
struct FastCriticalSection;
enum ValueType;
enum _TAG_UNNAMED_272;
enum milestoneTableColumns_t;
enum _TAG_UNNAMED_273;
enum snd_flame_source_flags;
enum FLAME_TYPE;
class bdCounterValue;
enum IKEntityStatusFunctions;
enum IKLayerNames;
enum CompositeType;
enum IKDvarNames;
enum IKFootNames;
enum IKJoints;
struct std::pair<RagdollSortStruct *,RagdollSortStruct *>;
enum IKWeaponOffsetType;
enum D2D1_OPACITY_MASK_CONTENT;
enum IKWeaponSpecialNames;
enum LbColType;
enum IKWeaponClass;
class phys_free_list<PhysObjUserData>::iterator;
struct VehicleTags;
enum _TAG_UNNAMED_274;
enum IKMiscBoneNames;
enum _D3DTEXTUREFILTERTYPE;
enum TracerDrawFlags;
enum _TP_CALLBACK_PRIORITY;
enum leType_t;
enum _TAG_UNNAMED_275;
struct ID3D11GeometryShader;
enum JointType;
class bdNATTypeDiscoveryPacket;
enum _TAG_UNNAMED_276;
enum Phys_ObjFlags;
struct ddlBufferHeader_t;
enum PhysicsGeomType;
enum _TAG_UNNAMED_277;
enum _TAG_UNNAMED_278;
enum _TAG_UNNAMED_279;
enum TessPrimType;
enum mz_zip_mode;
enum _TAG_UNNAMED_280;
enum _TAG_UNNAMED_281;
class phys_static_array<phys_vec3 *,128>::iterator;
enum _TAG_UNNAMED_282;
enum _TAG_UNNAMED_283;
enum GfxDepthHackDrawMode;
enum _TAG_UNNAMED_284;
enum _TAG_UNNAMED_285;
enum _TAG_UNNAMED_286;
enum tdefl_flush;
enum _TAG_UNNAMED_287;
enum _TAG_UNNAMED_288;
enum pulse_sum_angular::flags_e;
enum physics_system::physics_system_flags_e;
enum _TAG_UNNAMED_289;
enum _TAG_UNNAMED_290;
enum std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Redbl;
enum pulse_sum_normal::flags_e;
enum _TAG_UNNAMED_291;
struct BodyState;
enum _TAG_UNNAMED_292;
enum error_types;
struct _PMD;
struct _s__RTTIBaseClassDescriptor2;
enum surface_types_e;
enum bdFacebookFieldCode;
enum Phys_SurfaceType;
enum FLAC__StreamDecoderLengthStatus;
enum Wheel;
enum PartyMemberAddResult;
enum _TAG_UNNAMED_293;
enum serverSignedStatsAction_t;
struct scrAnimPub_t;
enum codetype;
enum bdBandwidthRequest;
enum block_state;
enum DWRITE_PARAGRAPH_ALIGNMENT;
enum _TAG_UNNAMED_294;
enum _TAG_UNNAMED_295;
enum SideClassification;
enum _TAG_UNNAMED_296;
struct destructible_hit;
struct vehicle_path_node_t;
struct vehicle_node_t;
enum _TAG_UNNAMED_297;
enum _TAG_UNNAMED_298;
enum _D3DCUBEMAP_FACES;
enum ComDevhostCommandXAnim;
enum _D3DSWAPEFFECT;
enum sysEventType_t;
enum _TAG_UNNAMED_299;
struct _XMUHENDN3;
enum _TAG_UNNAMED_300;
struct ID3D11Texture3D;
enum IPPROTO;
enum DataNodeType;
enum InternetCookieState;
enum _D3DDEVTYPE;
enum INTERNET_SCHEME;
enum GfxScreenshotType;
enum ADDRESS_MODE;
enum _SPACTION;
class rbcint;
enum MARKUPSIZE;
class bdUPnP;
enum tagMENUPOPUPSELECT;
enum WinQuitBehavior;
enum _NvAPI_Status;
enum _TAG_UNNAMED_301;
enum tagCONDITION_TYPE;
enum DpvsClipChildren;
enum tagCONDITION_OPERATION;
enum _TAG_UNNAMED_302;
struct CACRoot;
enum _TAG_UNNAMED_303;
enum OfflineFolderStatus;
enum MARKUPLINKTEXT;
class CCallback<LiveSteamClient,GameRichPresenceJoinRequested_t,0>;
struct GSC_ANIMTREE_ITEM;
enum MARKUPMESSAGE;
enum _TAG_UNNAMED_304;
enum SHELL_LINK_DATA_FLAGS;
enum _TAG_UNNAMED_305;
enum __MIDL_INamespaceWalk_0001;
enum _TAG_UNNAMED_306;
enum CPVIEW;
enum _SPTEXT;
struct tm_unz_s;
enum GamePadStickDir;
enum GamepadPhysicalAxis;
enum _NV_HYBRID_MODE;
enum DUALPLAY_STATE;
enum _TAG_UNNAMED_307;
enum MB_LVL_FEATURES;
enum _TAG_UNNAMED_308;
struct PartyLeagueTeamData;
enum FRAME_TYPE;
enum _TAG_UNNAMED_309;
enum _NV_GAMUT_FORMAT;
enum ShadowmapRTTiling;
enum GamepadVirtualAxis;
enum _TAG_UNNAMED_310;
enum ROMType;
enum streamBuffErr_e;
enum D3D11_CPU_ACCESS_FLAG;
enum TIAPort;
enum AddressingMode;
enum PIAPort;
enum _TAG_UNNAMED_311;
enum _TAG_UNNAMED_312;
enum DVBLOCK_VC_COLOR;
enum _TAG_UNNAMED_313;
enum LbFilter;
enum ParseTokenType;
struct in_addr;
struct ip_msfilter;
enum Q_DATA_TYPE;
enum Q_OPERATOR;
struct ClientTreeStorage;
enum _TAG_UNNAMED_314;
enum DVBLOCK_FOG;
enum _TAG_UNNAMED_315;
enum ViewParmsType;
enum _TAG_UNNAMED_316;
enum serverAction_t;
enum EvalValueType;
enum DvarSetSource;
struct XModelConfigEntry;
enum showpacketsType_t;
enum shownetType_t;
enum _TAG_UNNAMED_317;
enum compassPartialType_t;
enum _TAG_UNNAMED_318;
enum systemTest_t;
enum server_hardware_types;
struct CD3D11_QUERY_DESC;
struct D3D11_SAMPLER_DESC;
enum FsThread;
enum SHGFP_TYPE;
enum FS_ErrorCodes;
enum TestForSunShadowList;
enum expressionRpnEnum;
class bdFastArray<bdDispatchInterceptor *>;
class bdAntiCheatChallenge;
enum afterActionReportAwards_t;
enum e_gametypesBaseColumns;
enum _TAG_UNNAMED_319;
class bdDTLSInitAck;
enum AssertOccurance;
enum _TAG_UNNAMED_320;
enum msgwnd_mode_t;
enum parseBlockTypes;
enum motdDescriptorStatus_e;
struct SndNotifyPlaybackUpdate;
enum LbAggType;
struct animParamsDef_t;
struct UIAnimInfo;
enum LbUpdateType;
enum e_inGamePlayerListColumns;
struct ActorSecondaryTarget;
enum e_challengesPerksColumns;
struct rectData_s;
enum e_statsMilestonesListColumns;
enum e_playlistsColumns;
enum _TAG_UNNAMED_321;
struct SndCommandLoadBank;
enum _TAG_UNNAMED_322;
enum emblemIdentity_e;
enum codtvType_e;
enum fileshareDataFilter_e;
struct _XMU565;
enum codtvImageCategory_e;
struct MigrationPers;
struct clientUIActive_t;
enum std::_Iosb<int>::_Iostate;
enum _TAG_UNNAMED_323;
enum _TAG_UNNAMED_324;
struct SndCommandSetGlobalFutz;
enum std::ios_base::event;
enum _TAG_UNNAMED_325;
struct tm;
enum FLAC__StreamDecoderWriteStatus;
class bdAuthInfo;
enum FLAC__StreamMetadata_Picture_Type;
enum FLAC__ChannelAssignment;
struct ITypeComp;
enum FLAC__FrameNumberType;
enum FLAC__MetadataType;
struct _DSBUFFERDESC;
enum FLAC__StreamDecoderInitStatus;
enum FLAC__StreamDecoderErrorStatus;
struct symmetric_CTR;
struct yarrow_prng;
enum FLAC__StreamDecoderSeekStatus;
enum ePreviousFrame;
struct pinglist_t;
struct serverStatus_s;
enum MigrationClientState;
struct tagLC_ID;
enum SaveType;
enum SaveHandleType;
enum _TAG_UNNAMED_326;
enum _TAG_UNNAMED_327;
struct enumDvarDef_s;
enum eExtraCamResolution;
union MaterialArgumentLocation;
struct MaterialShaderArgument;
enum CommandProcessorType;
enum _TAG_UNNAMED_328;
struct bdThreadArgs;
enum war_flag_t;
class bdByteBuffer;
enum _TAG_UNNAMED_329;
enum _TAG_UNNAMED_330;
enum _TAG_UNNAMED_331;
enum _TAG_UNNAMED_332;
enum tinfl_status;
class PIXProfile;
enum _TAG_UNNAMED_333;
enum _TAG_UNNAMED_334;
enum tdefl_status;
enum MapProfileTrackedValue;
enum youtubeStatus_e;
enum dwVoteCategory_e;
enum dwVote_e;
struct tagCADBL;
enum twitchStatus_e;
enum _TAG_UNNAMED_335;
struct FxElemVec3Range;
struct FxElemVelStateInFrame;
struct FxElemVelStateSample;
enum StatsState;
struct _XMHENDN3;
enum NameChangeType;
enum bdLeague::bdWriteType;
struct GenericEventScript;
enum bdLeague::bdOrderType;
struct cachedStatsMsg_t;
struct scrVarPub_t;
enum doubleXPColumns_t;
class CustomSearchInfo_FindCloseNode;
enum matchmakingHopperState_t;
enum bandwidth_enum;
struct PersonaStateChange_t;
enum _TAG_UNNAMED_336;
enum _TAG_UNNAMED_337;
struct _XMUHEND3;
enum _TAG_UNNAMED_338;
enum profileLocation_e;
class bdIPDiscoveryConfig;
enum audio_preset;
enum speaker_setup;
class bdConnectionListener;
enum DAMAGE_FLAGS;
enum VehicleManualMode;
struct IXAudio2;
enum eInfluencerType;
enum eSpawnSystemDebugLoadingMode;
enum XAnimFaceEvents;
enum _TAG_UNNAMED_339;
struct ai_orient_t;
enum BloodImpactFxType;
enum _TAG_UNNAMED_340;
struct BlurStackEntry;
struct UiMenuMap_t;
struct menuClientNum_t;
struct UILocalVar;
struct UILocalVarContext;
struct UiContext;
enum animScrMode_t;
enum BlurTime;
class bdLeagueSubdivisionResult;
enum BlurPriority;
enum PlayerLinkToType;
enum SaveErrorType;
enum _TAG_UNNAMED_341;
struct D3D11_BOX;
enum FxRandKey;
enum FxBoltType;
enum FxUpdateResult;
enum GfxWarningType;
enum _TAG_UNNAMED_342;
struct MaterialTechniqueSet;
enum MarkFragmentsAgainstEnum;
struct netUInt64;
struct score_s;
struct clientState_s;
enum _TAG_UNNAMED_343;
enum _TAG_UNNAMED_344;
struct MaterialPass;
class bdReference<bdAddrHandle>;
class bdAddrHandleRefWrapper;
class bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>;
enum FX_DrawElement_Setup_Handle_Overtime_Enum;
enum FxSampleChannel;
class bdPacketBufferInternal;
enum _TAG_UNNAMED_345;
enum DevGuiInputButton;
struct searchBook_t;
enum DevGuiInputAxis;
enum DevGuiInputState;
class bdYouTubeRegistrationResult;
struct pathnode_constant_t;
class SentientHandle;
struct pathnode_dynamic_t;
struct pathnode_transient_t;
struct pathnode_t;
enum DevGuiTokenResult;
enum XZoneState;
enum _TAG_UNNAMED_346;
enum _TAG_UNNAMED_347;
enum MaterialWorldVertexFormat;
struct pathstatic_t;
class rigid_body_constraint_wheel;
class phys_free_list<rigid_body_constraint_wheel>::T_internal;
enum ProberMode;
enum ProberState;
enum PartyProberStatus;
struct LeaderboardEntry_t;
class phys_free_list<rigid_body_constraint_wheel>::iterator;
struct D3D11_TEXTURE2D_DESC;
struct gjk_base_t;
enum ConnectStatus;
class bdFastArray<void (__cdecl*)(void)>;
class bdSingletonRegistryImpl;
enum partydebugValue_t;
enum _TAG_UNNAMED_348;
struct D3D11_SUBRESOURCE_DATA;
class bdQoSRemoteAddr;
enum PartyMemberProbation;
enum PeerDataPacketType;
enum _TAG_UNNAMED_349;
struct tagDEC;
struct tagVARIANT;
struct tagPARAMDESCEX;
enum wagerMedalTableColumns_t;
class ISteamMatchmaking;
enum medalTableColumns_t;
enum _TAG_UNNAMED_350;
struct ActorString;
enum LocSelInputState;
enum GamepadMapping;
enum CompositeState;
enum ClientViewViewportSize;
enum _TAG_UNNAMED_351;
enum _TAG_UNNAMED_352;
struct pathnode_resized_links_t;
enum LaserOwnerEnum;
enum tagColorIndexs;
enum WeaponOptions::ReticleType;
enum _TAG_UNNAMED_353;
struct gameTypeRow_t;
struct PlayerVehicleState;
struct PlayerHeldWeapon;
struct AmmoPool;
struct AmmoClip;
struct SprintState;
struct MantleState;
struct ActionSlotParam_SpecifyWeapon;
struct ActionSlotParam;
struct objective_t;
union hudelem_color_t;
struct hudelem_s;
struct playerState_s;
class bitarray<64>;
struct usercmd_s;
struct playerTeamState_t;
struct clientSession_t;
struct viewClamp;
struct viewClampState;
struct gclient_t;
enum FxDrawScene;
enum _TAG_UNNAMED_354;
enum eFoot;
enum dynEntFieldType_t;
enum gumpFadeState;
enum _TAG_UNNAMED_355;
enum _TAG_UNNAMED_356;
enum _TAG_UNNAMED_357;
enum GFX_SPOT_SHADOW_FLAGS;
class bdHashMap<bdReference<bdCommonAddr>,bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>,bdHashingClass>::Node;
enum _TAG_UNNAMED_358;
enum _TAG_UNNAMED_359;
enum _TAG_UNNAMED_360;
struct SubpartyMember;
enum _TAG_UNNAMED_361;
enum _TAG_UNNAMED_362;
enum _TAG_UNNAMED_363;
enum _NVAPI_D3D_RESOURCERENDERING_FLAG;
enum _TAG_UNNAMED_364;
enum RumbleSourceType;
enum _TAG_UNNAMED_365;
enum CompassType;
enum eGuidedMissileInfo;
enum e_tank_hud_component;
enum GfxAspectRatio;
enum cursorHintType_t;
enum _TAG_UNNAMED_366;
enum _TAG_UNNAMED_367;
class bdTwitterUserAttribute;
enum ADJUST_TYPES;
enum turretAnims_t;
enum _TAG_UNNAMED_368;
enum GPUTimerDisplayMode;
enum _TAG_UNNAMED_369;
class bdKeyValuePair;
enum _TAG_UNNAMED_370;
enum GfxImageFileFormat;
enum parseSkip_t;
struct SndDspDynamoParam;
enum unlockMapTableColumns_t;
enum FactionTableColumn;
struct XSurfaceCollisionAabb;
struct clientFieldCodeCallback_s;
class std::bad_array_new_length;
enum _NV_TARGET_VIEW_MODE;
struct editFieldDef_s;
enum NV_COOLER_POLICY;
struct XSurfaceCollisionNode;
enum _NV_PERF_PSTATE_CLIENT_LIMIT_ID;
enum _NV_GPU_PERF_PSTATE_ID;
enum _NV_PWR_SOURCE_INFO;
enum _NV_SELECT_INFO;
struct dwFileShareWriteFileTask;
struct ROMInfo;
enum _NV_LEVEL_INFO;
enum _TAG_UNNAMED_371;
union _ULARGE_INTEGER;
struct tagSTATSTG;
enum _NV_INFOFRAME_TYPE;
enum _NVAPI_D3D_SETRESOURCEHINT_CATEGORY;
class bdReference<bdLobbyConnection>;
enum _NVAPI_D3D_QUERY_TYPE;
struct FxEffectDef;
enum _NV_PATH_DATATYPE;
enum RenderTargetUsage;
enum _NV_PATH_PARAMTYPE;
enum _NV_SLI_MODE;
struct FLAC__StreamDecoder;
enum NVFBC_BUFFER_FORMAT;
enum NVAPI_VSYNC_MODE;
enum _NVVIOOWNERTYPE;
enum _NV_FrustumAdjustMode;
class bdHash;
enum _NV_StereoActiveEye;
class bdSequenceNumber;
enum _NV_StereoDriverMode;
struct cplane_s;
enum _NV_StereoSwapChainMode;
enum bdChunkTypes;
struct CGameID::GameID_t;
class CGameID;
struct FriendGameInfo_t;
enum _NT_PRODUCT_TYPE;
enum bdInitAckChunk::bdInitAckChunkFlags;
class bdReference<bdTaskByteBuffer>;
class bdReference<bdPendingBufferTransfer>;
class bdLobbyConnection;
enum NV_MOSAIC_TOPO;
enum _NVVIOCOMPONENTSAMPLING;
enum DXGI_SWAP_CHAIN_FLAG;
class bdSequenceNumberStore;
class bdNonce<16>;
class bdDTLSAssociation;
enum _NVVIOCAPTURESTATUS;
enum _NV_CODEC;
enum J_BUF_MODE;
enum _NVVIOSYNCSTATUS;
enum _NVAPI_D3D9_DMA_TRANSFER_TYPE;
enum ShaderParamType;
enum NV_COOLER_TARGET;
enum _NVAPI_VIDEO_ENGINES;
enum NV_GPS_SENSOR_INDEX;
struct tagCAUL;
enum NV_COOLER_TYPE;
enum _NVVIOINPUTOUTPUTSTATUS;
enum NV_HW_CURSOR_COLOR_FORMAT_FLAGS;
class CCallback<LiveSteamServer,GSClientApprove_t,1>;
enum _NVVIOSIGNALFORMAT;
enum NV_COOLER_ACTIVITY_LEVEL;
enum NV_SYSTEM_TYPE;
enum D2D1_GEOMETRY_RELATION;
enum NV_DP_COLORIMETRY;
class bdLinkable;
enum _NVVIOPCILINKWIDTH;
enum _D3DSAMPLERSTATETYPE;
enum _NVDRS_SETTING_LOCATION;
enum NV_GPU_PERF_PSTATE20_CLOCK_TYPE_ID;
enum _NVVIOVIDEOTYPE;
enum D2D1_SWEEP_DIRECTION;
enum _NV_GPU_CONNECTOR_TYPE;
enum _NVVIOSTATUSTYPE;
enum _TAG_UNNAMED_372;
enum NV_VIRTUALMODE_CMD;
enum NV_HCLONE_HOTPLUG_BEHAVIOR;
enum _NV_GPU_CONNECTOR_PLATFORM;
enum _TAG_UNNAMED_373;
enum _NV_FORMAT;
enum NV_COPROC_STATE;
enum _TAG_UNNAMED_374;
enum _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID;
struct winUserData_t;
enum NV_HDCP_COMMANDS;
enum _NVVIOCONFIGTYPE;
enum _TAG_UNNAMED_375;
enum NV_THERMAL_TARGET;
enum _NV_GPU_BUS_TYPE;
enum _TAG_UNNAMED_376;
enum _NV_GPU_PUBLIC_CLOCK_ID;
enum NV_HDCP_FLAGS;
enum NV_GPU_CLIENT_POWER_POLICIES_POLICY_ID;
enum bdUnicastConnection::bdUnicastConnectionStatus;
enum _NV_GPU_HDCP_KEY_SOURCE;
enum _FPIEEE_ROUNDING_MODE;
class bdDispatcher;
class bdConnectionStoreConfig;
class bdConnectionStore;
enum _NVAPI_VIDEO_DRIVER_ENTRY_POINT;
enum CURLversion;
struct pendingServerStatus_t;
enum NV_EVENT_TYPE;
enum NV_GPU_RAM_TYPE;
enum _D3DTEXTURESTAGESTATETYPE;
enum _NV_ECC_CONFIGURATION;
enum _NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_LANES;
enum DWRITE_TEXT_ALIGNMENT;
enum _NV_STEREO_VIDEO_FORMAT;
struct twitter_s;
enum _NV_GPU_TYPE;
enum _NV_DPCD_CMD;
enum _D3DPOOL;
class bdNATTravClientData;
class bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass>::Node;
enum NV_THERMAL_CONTROLLER;
enum NVAPI_GPIO_DIRECTION;
enum _D3DRENDERSTATETYPE;
enum NV_DP_COLOR_FORMAT;
enum _NV_DPCD_REPLY_TYPE;
struct PMD;
enum D3D10_FILL_MODE;
struct z_stream_s;
struct IXAudio2SubmixVoice;
enum D3D10_CULL_MODE;
enum _TAG_UNNAMED_377;
enum D3D10_STENCIL_OP;
class std::exception;
enum D3D10_COMPARISON_FUNC;
struct clSnapshot_t;
enum D3D10_FILTER;
enum D3D10_TEXTURE_ADDRESS_MODE;
enum DpvsForceBevels;
class bdUploadInterceptor;
struct serverStatusInfo_s;
enum D3D10_BLEND;
enum D3D10_BLEND_OP;
struct jsmntok_t;
struct _MINIDUMP_INCLUDE_MODULE_CALLBACK;
enum D2D1_GAMMA;
enum D2D1_EXTEND_MODE;
enum _TAG_UNNAMED_378;
enum D2D1_ANTIALIAS_MODE;
struct ct_data_s;
struct _MINIDUMP_INCLUDE_THREAD_CALLBACK;
struct XMFLOAT4A;
enum D2D1_TEXT_ANTIALIAS_MODE;
enum D2D1_DASH_STYLE;
struct D3D11_COUNTER_INFO;
enum D2D1_LINE_JOIN;
enum _TAG_UNNAMED_379;
enum _D3DXCLEANTYPE;
enum D2D1_LAYER_OPTIONS;
enum DWRITE_MEASURING_MODE;
enum _TAG_UNNAMED_380;
enum D2D1_RENDER_TARGET_USAGE;
enum D2D1_PRESENT_OPTIONS;
enum _TAG_UNNAMED_381;
enum D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS;
enum _D3DXERR;
enum DWRITE_FONT_FEATURE_TAG;
enum _TAG_UNNAMED_382;
struct ID3D11ClassInstance;
enum D2D1_FILL_MODE;
enum D2D1_PATH_SEGMENT;
enum DVBLOCK_VC_BLOOM;
enum D2D1_FIGURE_BEGIN;
enum D2D1_FIGURE_END;
struct SndOcclusionStartCache;
enum DWRITE_FONT_STRETCH;
enum _TAG_UNNAMED_383;
enum DWRITE_FONT_SIMULATIONS;
enum _D3DLIGHTTYPE;
enum _TAG_UNNAMED_384;
enum _D3DMULTISAMPLE_TYPE;
enum _D3DPRIMITIVETYPE;
enum DWRITE_FONT_FILE_TYPE;
enum _MAX_FVF_DECL_SIZE;
enum _D3DBACKBUFFER_TYPE;
enum _TAG_UNNAMED_385;
enum D2D1::ColorF::Enum;
enum _D3DSTATEBLOCKTYPE;
enum _D3DQUERYTYPE;
struct XSurfaceVertexInfo;
struct XSurface;
enum _D3DTRANSFORMSTATETYPE;
struct _XMUDHEN3;
enum DWRITE_WORD_WRAPPING;
struct DObjAnimMat;
enum DWRITE_LINE_SPACING_METHOD;
enum WICBitmapPaletteType;
enum _D3DBASISTYPE;
enum DWRITE_TRIMMING_GRANULARITY;
struct RadiantCommand;
struct ActorDelayedWeaponDrop;
enum D2D1_GEOMETRY_SIMPLIFICATION_OPTION;
enum D2D1_DEBUG_LEVEL;
enum DWRITE_PIXEL_GEOMETRY;
enum D2D1_ARC_SIZE;
enum DISPLAYCONFIG_SCANLINE_ORDERING;
struct SndCommandPrimeAlias;
enum bdCookieAckChunk::bdCookieAckFlags;
union XAnimDynamicFrames;
struct XAnimPartTransFrames;
enum bdHeartbeatChunk::bdHeartbeatFlags;
struct XAnimDeltaPartQuatDataFrames2;
enum bdInitChunk::bdInitChunkFlags;
enum bdShutdownAckChunk::bdShutdownAckFlags;
struct MD4_CTX;
struct ActorCoverInfluenceInfo;
enum ltc_pkcs_1_paddings;
struct XAnimParent;
class bdReference<bdBitBuffer>;
class bdAuthTicket;
class bdGetHostByNameConfig;
class bdGetHostByName;
struct Rsa_key;
class bdRSAKey;
class bdAuthService;
enum CURLoption;
struct tagCLIPDATA;
enum CURLINFO;
enum CURLMcode;
enum bdEventType;
struct SndMusicSegment;
enum ltc_pkcs_1_v1_5_blocks;
enum CullType;
enum StaticModelFlag;
enum _TAG_UNNAMED_386;
union CollisionAabbTreeIndex;
struct CollisionAabbTree;
enum LitPhaseID;
enum _TAG_UNNAMED_387;
enum LightHasShadowMap;
enum _TAG_UNNAMED_388;
enum _TAG_UNNAMED_389;
enum _TAG_UNNAMED_390;
enum _TAG_UNNAMED_391;
enum _TAG_UNNAMED_392;
struct FxElemVisualState;
enum _TAG_UNNAMED_393;
enum R_STREAMPAINT_TYPES;
enum DVBLOCK_WSI;
struct statsDelta_t;
enum _TAG_UNNAMED_394;
class SD_XAudio2Callbacks;
enum PerfTimerDisplayMode;
class bdIPDiscoveryClient;
enum PerfTimerDisplayType;
struct tagCAUI;
enum D3D11_TEXTURECUBE_FACE;
struct XMFLOAT3A;
enum DXGI_RESIDENCY;
struct _XMBYTE4;
enum J_COLOR_SPACE;
struct ActorPainDeath;
enum MtlParseSuccess;
struct ai_transition_cmd_t;
enum MaterialShaderType;
enum std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Redbl;
enum std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Redbl;
struct sd_stream_buffer;
class bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass>::Node;
enum _TAG_UNNAMED_395;
class bdTwitchUserInfo;
enum GfxFrameBufferTextures;
enum J_MESSAGE_CODE;
enum _ALTERNATIVE_ARCHITECTURE_TYPE;
struct InviteMessage;
struct SndAssetBankHeader;
enum _FINDEX_INFO_LEVELS;
enum CHARTYPE;
struct ActorFlags;
enum ARG_TYPE;
class ISteamNetworking;
struct yy_buffer_state;
enum _FP_OPERATION_CODE;
enum _FPIEEE_PRECISION;
struct PathBlockPlanes;
struct scrCompilePub_t;
class ragdoll_joint_limit_info;
enum Tokens;
class bdCommerce;
struct CachedAssets_t;
struct customGameTypeInfo;
struct mapInfo;
struct contentPackInfo;
struct sharedUiInfo_t;
union DvarValue;
union DvarLimits;
struct dvar_t;
class phys_simple_allocator<pathnode_resized_links_t>;
union textDefData_t;
struct textDef_s;
struct ActorAnimSets;
struct cbrushside_t;
struct XMFLOAT4X4A;
class bdAddrHandle;
struct MaterialTechnique;
struct SndSidechainDuck;
struct Collmap;
struct ID3D11InputLayout;
struct _XMUICO4;
struct sd_decoder_interface;
struct dwFileList;
struct tagCACY;
struct MaterialInfoRaw;
class std::bad_alloc;
struct MaterialTextureDef;
struct GfxImageLoadDef;
class phys_static_array<phys_convex_hull::ch_edge,128>::iterator;
struct _XMUBYTE4;
struct MaterialConstantDef;
struct sd_loaded;
class bdFileData;
struct dwFileTask;
struct fileRetryInfo;
struct dwFileOperationInfo;
struct dwKeyArchiveReadTask;
struct dwKeyArchiveWriteTask;
struct dwFileShareListTask;
struct dwFileShareSearchTask;
struct dwFileShareDescriptorsTask;
struct dwFileShareReadFileTask;
struct dwFileShareTagTask;
struct dwFileShareTransferTask;
struct dwFileShareRemoveTask;
struct dwFileShareSummaryTask;
class bdVoteRankStatsInfo;
struct dwFileShareGetTopRatedTask;
struct playerFileOperations;
struct GjkTraceGeom;
struct ID3D11DepthStencilState;
struct ID3D11RasterizerState;
class bdHashMap<bdEndpoint,bdDTLSAssociation *,bdEndpointHashingClass>::Node;
struct D3D11_TEX1D_SRV;
struct sockaddr_storage_xp;
struct BrushWrapper;
struct sd_decoder_output;
struct ID3D11DomainShader;
class bdAntiCheat;
struct IUnknown;
struct IDispatch;
struct UnifiedFriend;
struct UnifiedFriends;
struct _XMFLOAT4;
class bdCommonAddr;
struct FriendInfo;
struct D3D11_CLASS_INSTANCE_DESC;
struct searchPage_t;
struct ObjectVariableValue;
union tagBINDPTR;
struct tagFUNCDESC;
class bdDispatchInterceptor;
struct XModelCollTri_s;
class CCallback<LiveSteamClient,DlcInstalled_t,0>;
class bdSubscriptionInfo;
struct MigrateMemberData;
struct MigrateData;
struct PartyMemberTeam;
struct PartyMember;
struct PartyMemberProfile;
struct SubpartyInfo;
struct lobbyBanSlot_t;
struct PartyHostDetails;
struct PartyHostData;
struct partyMergeData_t;
struct PartyData_s;
class std::bad_exception;
class bdTeamInfo;
class bdLinkedList<bdPendingBufferTransfer>::Node;
struct _s__RTTIBaseClassArray;
struct SndSpeakerPair;
struct GenericEventHandler;
struct expressionRpn;
struct ddlHash_t;
struct HunkUser;
struct snd_occlusion_multiple;
struct jqBatchGroup;
struct jqModule;
class bdFeatureBanInfo;
struct PhysPreset;
struct profileMultiDef_s;
struct TurretInfo;
struct ZBarrierPieceAnims;
struct ZBarrierType;
class bdUserGroups;
struct DestructibleBurnData;
struct DESTRUCTIBLE_PIECE_INFO;
class bdDML;
struct EHExceptionRecord::EHParameters;
struct EHExceptionRecord;
struct float44;
class bdSubscription;
class bdRichPresenceService;
struct geom_plane;
struct path_trim_t;
struct potential_threat_t;
class bdNATTravListener;
struct ID3D11HullShader;
struct ActorTurret;
struct PhysGeomInfo;
class phys_inplace_avl_tree<unsigned int,generic_avl_map_node_t,generic_avl_map_node_t>;
class bdStats;
struct ActorSuppression;
struct XModelCollSurf_s;
struct tagTLIBATTR;
class bdSecurityKeyMapListener;
class short4;
class bdMatchMaking;
class bdDMLHierarchicalInfo;
struct trDebugLine_t;
class bdFastArray<unsigned char>;
struct _XMUSHORT4;
struct _jqBatch;
struct jqBatch;
class bdQoSProbeListener;
struct GfxCmdBuf;
struct cbrush_t;
class bdPooledStorage;
struct CompositeEmblemLayer;
struct BGDefaultEmblem;
struct actorAntilagFrame_t;
struct Font_s;
struct CD3D10_TEXTURE2D_DESC;
struct PhysGeomList;
struct _XMICO4;
struct Glyph;
class LinkedList<FixedSizeAllocator<GlassPhysics>::Block *>;
class FixedSizeAllocator<GlassPhysics>;
struct KerningPairs;
struct SndAliasList;
struct ddlMemberDef_t;
struct GfxLightImage;
struct GfxLightDef;
struct SndAlias;
class bdArray<bdString>;
struct FxTrailDef;
class bdSingleton<bdSingletonRegistryImpl>;
struct FxSpotLightDef;
struct tagCAFILETIME;
struct SessionData;
union PackedTexCoords;
struct GfxPackedVertex;
class bdLobbyService;
class bdRandom;
struct ai_animation_funcs_t;
class SmpScriptString_CriticalSectionBlock;
struct tagDISPPARAMS;
union Prng_state;
class bdFastArray<__int64>;
struct DpvsPlane;
struct DpvsView;
struct vis_cache_t;
struct sentient_info_t;
struct bot_goal_t;
struct bot_aim_t;
struct pathpoint_t;
struct path_t;
struct bot_t;
class bdContentUnlock;
struct ai_suppression_t;
struct scrVarGlob_t;
class bdFriends;
class bdContentStreaming;
struct ObjectVariableChildren;
union VariableUnion;
union ChildBucketMatchKeys;
struct ChildVariableValue;
class colgeom_visitor_inlined_t<300>;
struct vehicle_cache_t;
struct WeaponAttachmentUnique;
struct VariableStackBuffer;
struct GfxBloom;
struct $_TypeDescriptor$_extraBytes_30;
struct WeaponDobjInfo;
struct WeaponCamoMaterial;
struct _XMFLOAT3PK;
struct std::unary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int>;
struct CD3D11_RECT;
struct _is_ctype_compatible;
struct setloc_struct;
struct CD3D11_SHADER_RESOURCE_VIEW_DESC;
struct CD3D11_BOX;
class bdLeagueSubdivisionHistoryResult;
struct _XMSHORTN2;
struct ID3D11Asynchronous;
class bdSemaphore;
struct ID3D11Query;
struct ID3D11Counter;
struct ActorShoot;
struct tagEXCEPINFO;
struct $_TypeDescriptor$_extraBytes_26;
struct ActorProne;
struct ActorCoverArrivalInfo;
class Smp_CriticalSectionBlock;
struct ID3D11Predicate;
class bdTaskByteBuffer;
class bdLobbyConnectionListener;
struct DestructibleStage;
class tlThread;
struct scrMemTreePub_t;
class std::reverse_iterator<std::_List_const_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> > > >;
class bdAntiCheatResponses;
class bdLeagueSubdivisionInfo;
struct _EXCEPTION_REGISTRATION;
struct _XMHALF2;
class bdChannelInfo;
struct D3D11_TEX2DMS_ARRAY_SRV;
class bdMACAddr;
struct D3D11_TEX2D_SRV;
struct actorState_s;
struct ActorState;
struct ActorOrientation;
struct actor_prone_info_s;
struct ActorCachedInfo;
struct ActorLookAtInfo;
struct ActorNodeSelect;
struct ActorSight;
struct scr_animscript_t;
struct ActorAnimation;
struct ActorNavigation;
struct ActorCombat;
struct ActorReact;
struct ActorThreat;
struct ActorGrenade;
struct actor_goal_s;
struct ActorGoal;
struct actor_physics_t;
struct actor_t;
struct msg_t;
struct demoGameSettings;
struct demoHeader;
struct demoTaggedPlayers;
struct demoDefaultMetaInfo;
struct demoConnectedPlayers;
struct demoDefaultBookmark;
struct demoHeliPatches;
struct demoFooter;
struct demoKeyboardData;
struct ArchivedMatchState;
struct MatchState;
struct demoSnapshotData;
struct demoMemBlock;
struct demoMain;
struct sentient_t;
class bdSingleton<bdTrulyRandomImpl>;
struct _ldiv_t;
class bdNetStartParams;
class bdNetImpl;
class bdString;
class bdUCDPublicKeyInfo;
class bdUCD;
struct D3D11_INPUT_ELEMENT_DESC;
struct gjccc_create_t;
class bdLinkCode;
class bdFacebook;
struct ISequentialStream;
class bdPacketInterceptor;
struct defaultClassInfo_t;
class bdBackoffTimer;
struct ID3D11ComputeShader;
class bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass>::Node;
struct CD3D11_UNORDERED_ACCESS_VIEW_DESC;
struct GlassState;
struct GlassClient::Outlines;
struct GlassClient;
class tlAtomicMutexLocker;
struct _XMFLOAT3X3;
struct _CRT_DOUBLE;
struct trace_t;
struct _TEB_ACTIVE_FRAME_CONTEXT;
class bdPacketBuffer;
struct _XMSHORT2;
union XAnimIndices;
struct XAnimParts;
struct d_derived_tbl;
class bdPlatformSocket;
class bdReference<bdConnection>;
class bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>::Node;
union XAnimPartTransData;
struct XAnimPartTrans;
class bdFastArray<bdConnectionListener *>;
class bdConnection;
class bdGenericLeagueID;
struct VehicleDriveBySound;
struct _XMUBYTEN4;
class bdNATTypeDiscoveryConfig;
class bdNATTypeDiscoveryClient;
struct VehicleAntenna;
struct VehicleEngine;
class bdThread;
struct gameState_t;
struct GfxMatrix;
class std::_Exception_ptr;
struct clientField_s;
class bdSingleton<bdNetImpl>;
struct D3D11_BUFFER_SRV;
struct D3D11_TEX1D_ARRAY_SRV;
struct D3D11_TEX2D_ARRAY_SRV;
struct D3D11_TEX2DMS_SRV;
struct D3D11_TEX3D_SRV;
struct D3D11_TEXCUBE_SRV;
struct D3D11_TEXCUBE_ARRAY_SRV;
struct D3D11_SHADER_RESOURCE_VIEW_DESC;
struct hitinfo_t;
struct MapTriggers;
struct _TypeDescriptor;
struct actorLerpFrame_t;
class bdLinkedList<bdReference<bdRemoteTask> >;
struct EmblemBackground;
class bdLinkedList<bdReference<bdRemoteTask> >::Node;
struct clientFieldCallback_s;
struct bgsClientFieldCallbacks_s;
struct Engine;
class bdRemoteTask;
struct fileShareReadFileInfo;
struct in6_addr;
struct sockaddr_in6_w2ksp1;
struct ITypeInfo;
struct $_s__RTTIBaseClassArray$_extraBytes_8;
class bdTaskResultProcessor;
struct ID3D11DeviceChild;
struct tagCAPROPVARIANT;
struct _UNICODE_STRING;
class bdCypher;
struct tagTHREADNAME_INFO;
struct _TP_POOL;
struct _TP_CLEANUP_GROUP;
struct _ACTIVATION_CONTEXT;
struct _TP_CALLBACK_INSTANCE;
struct Qdb;
struct _TP_CALLBACK_ENVIRON_V1;
struct VariableValue;
struct _XMU555;
struct DObjSkelMat;
union XAnimDeltaPartQuatData2;
class rigid_body_constraint_hinge;
struct XMFLOAT2A;
struct textExp_s;
struct D3D11_COUNTER_DESC;
struct windowDef_t;
struct VehicleStun;
class bdDTLSCookieEcho;
struct ClipInfo;
struct menuDef_t;
class std::allocator<wchar_t>;
struct group_filter;
struct ItemKeyHandler;
struct tagCAFLT;
union itemDefData_t;
struct itemDef_s;
struct CD3D11_BUFFER_DESC;
struct tagVersionedStream;
class bdConsoleID;
class std::hash<__int64>;
class bdCommonAddrInfo;
struct tagCASCODE;
union focusDefData_t;
struct focusItemDef_s;
struct FxBeamTracerData;
struct VehicleTarget;
struct ID3D11RenderTargetView;
struct GfxShadowMapVolume;
struct _XMMATRIX;
struct VehicleJitter;
struct imageDef_s;
struct WheelState;
class NitrousVehicleController;
struct minspec_mutex;
class NitrousVehicle;
struct ownerDrawDef_s;
class bdEventInfo;
struct BitField;
struct VehicleSeat;
struct VehicleDef;
struct GfxLutVolume;
class bdLeagueTeamInfo;
struct CD3D11_BLEND_DESC;
struct D3D11_TEXTURE3D_DESC;
union SndEntHandle;
struct tagCABSTR;
struct WeaponCamoMaterialSet;
class bdSingletonRegistry;
struct GfxLightGridEntry;
struct ID3D11View;
struct _XMFLOAT4X4;
class rigid_body_constraint_upright;
class bdBitBuffer;
struct IStorage;
struct clipSegment;
class rigid_body_constraint_angular_actuator;
struct _XMHALF4;
struct GfxBrushModelWritable;
struct GfxBrushModel;
struct vehicle_pathpos_t;
struct vehicle_physic_t;
struct VehicleTurret;
struct vehicle_t;
struct _XMDHEN3;
struct _XMUDEC4;
class bdUserInfo;
struct _XMUDHENN3;
class bdFastArray<char>;
struct half;
struct half2;
class LinkedList<FixedSizeAllocator<GlassShard>::Block *>;
class bdArray<bdQoSRemoteAddr>;
struct GfxImageFilterPass;
class phys_gjk_geom;
class std::_Mutex;
class broad_phase_base;
struct ID3D11Device;
struct svscmd_info_t;
struct gjk_geom_list_t;
class bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>;
class bdRemoteTaskManager;
struct ID3D11Resource;
struct DXGI_RATIONAL;
struct DXGI_MODE_DESC;
class bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>::Node;
class bdEventLog;
class bdSessionNonce;
struct XAnimTree_s;
struct _s__RTTICompleteObjectLocator;
struct CD3D11_TEXTURE2D_DESC;
struct _XMSHORT4;
struct tagCACLSID;
struct XMVECTORU8;
struct playerInfo_t;
class bdTrulyRandom;
class user_rigid_body;
struct ID3D11Texture2D;
struct D3D11_QUERY_DESC;
struct GfxModelSurfaceInfo;
struct GfxModelSkinnedSurface;
struct _XMXICO4;
struct jqAtomicQueue<jqBatch,32>::NodeType;
struct FontIconName;
class rigid_body_constraint_custom_path;
struct localeinfo_struct;
struct contact_point_info::pulse_sum_cache_info;
struct threadlocaleinfostruct;
class bdOnlineUserInfo;
struct lconv;
struct __lc_time_data;
struct clientFieldNetfield_s;
struct threadmbcinfostruct;
struct _XMFLOAT3;
struct StringTable;
class jqMiniProfiler;
struct GfxFog;
class bdProfiles;
class phys_simple_allocator<mover_info_t>;
struct player_gjk_slide_move_input_t;
class bdMemory;
class bdMatchMakingInfo;
struct XAnimDeltaPartQuat2;
class std::_List_unchecked_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> > >;
struct com_parse_mark_t;
struct GlassConfigFile::Values;
struct GlassConfigFile;
class bdTwitter;
struct tagBSTRBLOB;
struct tagCAC;
struct tagCAI;
struct tagCAL;
struct tagCAH;
struct tagCAUH;
struct tagCABOOL;
struct tagCADATE;
struct tagCABSTRBLOB;
struct tagCALPSTR;
struct tagCALPWSTR;
struct tagPROPVARIANT;
struct EmblemIcon;
struct ddlDef_t;
class bdTencent;
struct DpvsCachedCell;
struct __m128d;
struct D3D11_BLEND_DESC;
class bdKeyArchive;
struct _XMDEC4;
struct SpawnVar;
struct ddlEnumDef_t;
struct WeaponAttachment;
struct _XMXDEC4;
struct CEntVehicleRotor;
struct overlappedTask;
struct GfxLight;
struct pic_packet_t;
struct D3D11_RASTERIZER_DESC;
struct $_TypeDescriptor$_extraBytes_21;
struct CD3D11_RENDER_TARGET_VIEW_DESC;
class bdDownloadInterceptor;
class bdPerformanceValue;
struct ScopedCriticalSection;
class bdArray<bdAntiCheatChallenge>;
class bdDTLSInit;
struct CD3D11_DEFAULT;
class bdDTLSData;
struct ClientVoicePacket_s;
struct voiceCommunication_t;
struct ID3D11SamplerState;
struct clientFieldSet_s;
struct gjk_slide_move_output_t;
struct TracerDef;
struct vector4;
struct _stat32;
class bdDMLInfo;
class tlNamedEventMarker;
struct GfxPortalWritable;
struct GfxPortal;
struct GlassPackedOutline::PackedVert;
class pulse_sum_node;
struct jsonWriter;
struct segment;
struct eventAccumulator;
struct GfxMarkContext;
struct MemoryFile;
class bdTags;
class bdTwitch;
struct AimTargetCache;
class Allocator::Memory;
struct svEntity_s;
class bdHTTPWrapperBase;
struct MaterialConstantDefRaw;
struct D3D11_BUFFER_DESC;
class LinkedList<FixedSizeAllocator<TempPackedOutline>::Block *>;
class FixedSizeAllocator<TempPackedOutline>;
struct CD3D11_RASTERIZER_DESC;
struct XMVECTORF32;
struct flameTable;
struct GlassAutoLock;
struct _IMAGE_TLS_DIRECTORY32;
struct CD3D11_TEXTURE1D_DESC;
struct XAnimParam;
class bdTwitterSearchResult;
struct $_TypeDescriptor$_extraBytes_15;
struct cmd_function_s;
struct demoProfile;
class MemTrackInst;
struct Destructible_BonePose;
struct DestructiblePose;
class bdGroupID;
struct SndContext;
struct CmdArgs;
class bdNet;
class broad_phase_base_list::node;
struct $_TypeDescriptor$_extraBytes_24;
struct outPacket_t;
struct ID3D11ClassLinkage;
class broad_phase_base_list;
class broad_phase_environement_query_results;
struct uploadSendInfo_t;
struct cLeafBrushNodeChildren_t;
struct _XMICON4;
class bpei_database_id;
class gjk_physics_collision_visitor;
struct UnwindGuardNode;
struct pathlink_s;
struct WeaponVariantDefHash;
struct cLeafBrushNodeLeaf_t;
union cLeafBrushNodeData_t;
struct AnimSubState;
struct _OVERLAPPED;
struct GlassPhysics::StaticLocals;
class bdTeamMember;
class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >;
struct _XMHEND3;
struct _XMUSHORTN2;
struct ClientArchiveData;
struct clientActive_t;
struct gjkcc_input_t;
struct Destructible;
struct msg_bookmark_t;
struct _XMFLOAT2;
struct DestructibleDef;
struct XMVECTORI32;
struct XModel;
struct vehicle_custom_path_t;
struct ITypeLib;
struct NetFieldList;
struct ID3D11Buffer;
struct XRigidVertList;
struct XSurfaceCollisionTree;
struct GfxStaticModelInst;
struct XSurfaceCollisionLeaf;
class rigid_body_constraint_ragdoll;
struct DestructiblePiece;
class Phys_UnitQuaternion;
struct $_TypeDescriptor$_extraBytes_31;
struct DevGraph;
struct GraphFloat;
struct serverSnapshot_t;
struct challenge_t;
struct tempBanSlot_t;
struct rateBoostingStats_t;
struct serverStatic_t;
struct MaterialRaw;
struct FxElemVisStateSample;
struct FxElemMarkVisuals;
struct jqConditionalQueue;
class contact_point_info;
struct FxTrailVertex;
struct _XMSHORTN4;
struct ZBarrierDef;
struct DXGI_SHARED_RESOURCE;
struct std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >::rebind<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >;
class phys_free_list<broad_phase_info>::T_internal_base;
class phys_free_list<broad_phase_info>;
class MatchMakingQuery;
struct generic_avl_map_node_t;
struct std::pair<WeaponComponent *,WeaponComponent *>;
struct PhysObjUserData;
class rigid_body_constraint_distance;
class broad_phase_terrain_query_callback;
struct phys_inplace_avl_tree<phys_gjk_geom_id_pair_key,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal::avl_tree_accessor>::stack_item;
struct bdHTTPBuffer;
class rigid_body_constraint_custom_orientation;
struct animation_s;
class phys_collision_pair;
class phys_vec2;
struct contact_manifold_mesh_point;
struct cached_tag_mat_t;
struct level_locals_t;
class broad_phase_group;
class phys_free_list<broad_phase_group>::T_internal;
struct GfxFilm;
struct scr_anim_s;
struct mover_record_t;
struct mover_info_t;
struct constraint_t;
class bdLeagueUserTeamResult;
struct gjk_trace_output_t;
struct animscripted_t;
struct XAnimEntry;
struct XAnim_s;
struct BINKFRAMETEXTURES;
struct CgEntCollTree;
struct viewState_t;
struct D3D10_BUFFER_DESC;
class broad_phase_collision_pair;
struct XMFLOAT4X3A;
struct D3D10_TEXTURE3D_DESC;
struct std::char_traits<unsigned short>;
struct GfxDrawSurfListInfo;
struct ViewModelHand;
struct ViewModelInfo;
struct CD3D10_TEXTURE1D_DESC;
struct GfxCmdHeader;
struct GfxCmdDrawUIQuadsReplaceImage;
struct CD3D11_SAMPLER_DESC;
class bdStringData;
struct FxModelMarkPoint;
class tlSharedAtomicMutex;
class bdDTLSHeader;
struct _lldiv_t;
struct DSkelPartBits;
struct WindState;
class StaticFixedSizeAllocator<TempPackedOutline,350>;
struct vector3;
struct ShaderIndexRange;
struct visitor_base_t;
class bdCommonAddrHash;
struct cmodel_t;
class bdFeatureBan;
struct ClipMaterial;
struct RefString;
struct visionSetLerpData_t;
struct $_TypeDescriptor$_extraBytes_20;
struct footstepEvent_t;
class SmpSpServer_CriticalSectionBlock;
struct clientControllers_t;
struct SunFlareDynamic;
class bdMessaging;
struct scrStringDebugGlob_t;
class bdTeams;
class bdStorage;
struct CEntGeneral;
struct _XMFLOAT4X3;
struct _XMUICON4;
class bdVoteRank;
struct jpeg_d_coef_controller;
class bdLeague;
struct WeaponVariantDef;
class LinkedList<FixedSizeAllocator<GlassShard *>::Block *>;
struct WeaponCamoSet;
union __m128i;
struct DiskSmodelLightmapVCInst;
struct ddlStructDef_t;
struct std::_Pair_base<unsigned int const ,ID3D11BlendState *>;
struct GfxViewParms;
struct GfxCodeImageRenderTargetFields;
union GfxCodeImageRenderTarget;
struct GfxViewport;
struct GfxSpotShadow;
struct D3D11_SO_DECLARATION_ENTRY;
struct std::_Num_float_base;
struct curl_slist;
struct pml_t;
struct TextureList;
struct std::_Allocator_base<wchar_t>;
struct StreamTempImage;
class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >;
struct jpeg_marker_struct;
struct GfxQRCodeBackend;
struct ShaderUniformDef;
struct ShaderVaryingDef;
struct ShaderParameterSet;
class bdBitOperations;
struct server_t;
struct cLeafBrushNode_s;
struct ID3D11ShaderReflectionConstantBuffer;
struct GfxWindowTarget;
struct std::pair<GfxCachedShaderText *,GfxCachedShaderText *>;
struct cgVehicleWheelEffect;
struct cgVehicle_t;
struct GfxPrimStats;
struct GfxStageStats;
struct GfxFrameStats;
struct GfxCmdBufPrimState;
struct GfxCmdBufState;
struct gjk_cylinder_t;
struct GfxWorldVertexData0;
struct GfxLightmapArray;
class std::numeric_limits<bool>;
struct MaterialTextureDefRaw;
class std::tr1::bad_weak_ptr;
struct GfxPlacement;
struct GfxScaledPlacement;
struct GfxModelRigidSurfacePiece;
struct std::_Pair_base<GfxSurface * *,GfxSurface * *>;
struct NetField;
struct IDXGIOutput;
struct PolySet;
struct IDXGISwapChain;
struct TaskRecord;
struct IPakSection;
struct std::_Pair_base<Material * *,Material * *>;
struct BINKPLANE;
struct BINKFRAMEPLANESET;
struct BINKFRAMEBUFFERS;
struct BINKTEXTURESET;
struct CD3D11_COUNTER_DESC;
struct StringTableCell;
class phys_wheel_collide_info;
struct cLinkInfo_s;
struct r_lightmapMerge_t;
struct GfxBspLoad;
struct viewDirectionalHitIndicator_t;
struct snd_context;
struct GfxDepthOfField;
struct animScriptData_t;
struct DiskTriangleSoup;
class phys_free_list<rigid_body_constraint_angular_actuator>::iterator;
struct ddlRoot_t;
struct lerpFrame_t;
struct BackgroundsResultCache;
struct GfxWorldFog;
struct emblemChallengeLookup_t;
struct EmblemChallengeTable;
struct GfxVisionSet;
struct GfxBlendSaveScreenFlashedParam;
struct _cgZBarrierPiece_t;
struct SndRuntimeAssetBank;
struct SndLoadedAssets;
struct SndBank;
struct ID2D1TransformedGeometry;
struct GfxSkinCacheEntry;
struct CEntPlayerInfo;
struct CEntTurretAngles;
struct CEntTurretInfo;
struct CEntVehicleDefGround;
struct CEntVehicleDefAir;
struct CEntVehicleDef;
struct CEntFx;
struct CEntActorInfo;
struct ShaderConstantSet;
struct cpose_t;
struct centity_t;
struct DiskGfxVertex;
struct animStringItem_t;
struct SndRadverb;
struct ResultCache;
class bdLinkedList<unsigned int>;
class std::numeric_limits<char>;
struct StackAllocator;
struct GlassesClient;
struct std::_Container_base12;
class std::numeric_limits<unsigned char>;
struct GlassServer;
struct WeaponComponent;
class phys_simple_allocator<phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal>;
class phys_inplace_avl_tree<phys_gjk_geom_id_pair_key,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal::avl_tree_accessor>;
class phys_heap_gjk_cache_system_avl_tree;
class phys_inplace_avl_tree<bpei_database_id,broad_phase_environment_info,broad_phase_environment_info::avl_tree_accessor>;
class phys_simple_allocator<broad_phase_environment_info>;
class bpei_database_t;
struct phys_transient_allocator::allocator_state;
class phys_link_list<gjk_geom_info_t>;
struct cached_query_info_t;
struct gjk_query_output;
struct gjkcc_info;
struct tagPOINT;
struct tagMINMAXINFO;
struct ray2_t;
struct GlassOutline::Vertex;
struct specialtyCollection_t;
struct cached_client_tag_t;
struct ClientTagCache;
class phys_static_array<phys_vec3,6144>;
class phys_static_array<phys_convex_hull::ch_triangle,256>;
class phys_static_array<phys_convex_hull::ch_edge,128>;
class phys_static_array<phys_vec3 *,128>;
class phys_static_array<phys_convex_hull::ch_triangle,128>;
class phys_convex_hull;
struct HHOOK__;
struct cgScriptMover_s;
struct FX_WindInfo;
class bdYouTubeUploadStats;
struct canimscripted_t;
struct cgZBarrier_s;
class phys_static_array<phys_convex_hull::ch_triangle,256>::iterator;
struct IDirectSoundCaptureBuffer;
struct std::_Iterator012<std::bidirectional_iterator_tag,GlassShard *,int,GlassShard * const *,GlassShard * const &,std::_Iterator_base0>;
struct SndDspSquelchParam;
struct SndDspFutzParam;
struct SndDspSourceParams;
struct sd_voice_param;
struct DroppedWeaponDobjInfo;
struct MantleAnimTransition;
struct Demo_SetTag_EmblemInfoParam_s;
struct AntilagClientStore;
union sd_decoder_instance;
struct sd_decoder;
struct snapshot_s;
struct playerEntity_t;
struct GfxDoubleVision;
struct GfxCompositeFx;
struct GfxGenericFilter;
struct GfxPoison;
struct GfxSaveScreenFx;
struct WaterFogDef;
struct GfxRippleWave;
struct refdef_t;
struct ScriptCamera;
struct ScriptExtraCam;
struct Camera;
struct objectiveMapInfo_t;
struct viewDamage_t;
struct shellshock_t;
struct SonarAttachmentInfo;
struct clientInfo_t;
struct animInfo_t;
struct actorInfo_t;
struct bgs_clientfieldapi_t;
struct bgs_t;
struct visionSetVars_t;
struct transPlayerState_t;
struct hudElemSoundInfo_t;
struct CompassScrambler;
struct ShieldHitDelayedEvent;
struct cg_t::FogSettings;
struct bullet_hit_info_t;
struct targetInfo_t;
struct snd_ambient_script_data;
struct snd_ambient_collider;
struct cg_t;
class std::_List_const_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> > >;
struct WeaponAttachmentTableEntry;
struct AttachmentTableEntry;
struct AnimStateDef;
struct EmblemLayer;
struct EmblemCategory;
struct EmblemIconType;
struct EmblemBGCategory;
struct EmblemSet;
class phys_link_list<pulse_sum_angular>::iterator;
struct rope_frame_verts_t;
class phys_free_list<VehicleParameter>::T_internal_base;
struct ComWorld;
struct stbi_loader;
class phys_simple_allocator<gjk_polygon_cylinder_t>;
struct PathData;
struct GameWorldSp;
class phys_free_list<rigid_body_constraint_custom_path>::T_internal;
struct QoSStatus;
struct GfxShadowGeometry;
struct GlassPackedOutline;
struct GlassShard::Mesh;
struct GlassShard;
struct FixedSizeAllocator<GlassShard>::Block;
struct GfxSceneDef;
struct GfxViewRenderControl;
struct GfxUI3DBackend;
struct GfxViewInfo;
struct SndAssetBankEntry;
struct controller_info_t;
struct VehicleHandler;
struct TxaaCtxDX;
struct DxCmdBuf;
struct DxGlobals;
struct SndPatch;
class phys_free_list<user_rigid_body>::T_internal;
struct cNode_t;
class std::numeric_limits<short>;
struct VertUsage;
struct shellshock_parms_t;
struct $_TypeDescriptor$_extraBytes_27;
class phys_link_list<gjk_trace_output_t>;
struct WeaponComponentList;
struct Image_MemUsage;
struct viewLerpWaypoint_s;
class compare_weapon_component_sort;
struct player_push_slide_move_input_t;
struct bgsAnim_s;
struct gscProfileInfo_t;
struct huffman;
struct bgsClientFields_s;
struct DynEntityServer;
struct IPakIndexEntry;
struct reliableMsg;
struct reliableClient;
class pulse_sum_contact_point;
struct stbi_gif_lzw_struct;
struct par_t;
struct DObjModel_s;
class std::hash<long double>;
struct DWRITE_UNDERLINE;
struct _DM_CMDCONT;
class std::out_of_range;
struct $_TypeDescriptor$_extraBytes_23;
class LinkedList<FixedSizeAllocator<ShardGroup>::Block *>;
class FixedSizeAllocator<ShardGroup>;
struct $_TypeDescriptor$_extraBytes_22;
struct std::_Iterator_base12;
class bdUCDAccountID;
struct GlassLock;
struct IDirectInputDeviceA;
class bdTeamProfile;
class bdUCDAccountStatus;
class SmallAllocatorTemplate<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node>;
struct phys_convex_hull::ch_edge;
struct std::char_traits<char>;
struct DSkel;
struct DObj;
struct veh_gjk_slide_move_input_t;
struct IPakHeader;
struct TriggerModel;
struct _MINIDUMP_EXCEPTION_INFORMATION;
struct AudioState;
struct GfxPointVertex;
struct TriggerSlab;
class std::domain_error;
struct tagPALETTEENTRY;
struct GfxPostFxInfo;
struct tagIPHDR;
struct tagICMPHDR;
struct tagECHOREQUEST;
struct tagECHOREPLY;
class std::hash<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >;
class std::range_error;
struct sockaddr_storage;
class std::overflow_error;
struct fileshareSummary_t;
struct TempOutlineTemplate<64>;
struct D2D_RECT_F;
struct D2D_MATRIX_3X2_F;
struct D2D1_LAYER_PARAMETERS;
struct fshCacheRatingDetails_t;
struct WinMouseVars_t;
class bdCypherAES;
class phys_free_list<PhysObjUserData>::T_internal;
struct VariantWind;
class phys_static_array<phys_convex_hull::ch_triangle,128>::iterator;
class phys_link_list_base<pulse_sum_point>;
struct WeaponFullDef;
struct buttonHoldCmd;
struct MantleResults;
struct fileshareData_t;
struct demoKeyFrame;
struct demoDollyCameraMarker;
struct demoHighlightReelInformationDefine;
struct demoHighlightReelStarLevels;
struct demoHighlightReelTimeline;
struct demoHighlightReelPreparingInformation;
struct demoHighlightReelSettings;
struct demoPlayback;
struct FxImpactEntry;
struct std::bidirectional_iterator_tag;
class standard_query;
struct DynEntityProps;
class std::numeric_limits<unsigned short>;
struct validateCACStatus_s::loadoutSlotStatus_s;
class std::numeric_limits<int>;
struct _MEMORYSTATUS;
struct std::tr1::_Nil;
struct $_TypeDescriptor$_extraBytes_36;
class type_info;
class phys_simple_allocator<gjkcc_info>;
struct XAnimState;
class std::list<GlassShard *,SmallAllocatorTemplate<GlassShard *> >;
struct ID2D1GeometrySink;
struct gjk_slide_move_input_t;
struct gunLevelRow_t;
class SmallAllocatorTemplate<GlassShard *>;
class std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >;
class phys_link_list_base<pulse_sum_node>;
class bdAuthHostToServicePlainText;
struct itemInfo_t;
struct IDirect3DStateBlock9;
struct IDXGIDeviceSubObject;
struct ScriptParseTree;
struct XAnimServerNotify;
class bdRatingInfo;
class phys_gjk_collision_info;
struct AddonMapEnts;
class broad_phase_memory_info;
struct KeyValuePairs;
class bdReference<bdDataChunk>;
class bdLinkedList<bdReference<bdDataChunk> >::Node;
struct gjk_brush_t;
class I_spuDmaSave;
struct demoSaveCmd;
struct gjk_geom_info_t;
struct LocalizeEntry;
struct gjk_entity_info_t;
struct HWND__;
struct clientDebugStringInfo_t;
struct $_TypeDescriptor$_extraBytes_28;
class phys_contact_manifold;
class phys_memory_heap;
struct GSC_ANIMNODE_ITEM;
struct uiInfo_s;
struct DpvsGlob_sunShadow;
struct SavedScreenParams;
struct SCRIPT_PENDING_BINUPDATE;
struct SndVolumeGroup;
class phys_surface_type_info;
class phys_inplace_avl_tree_node<broad_phase_environment_info>;
struct flameChunkSpawnVars_t;
class broad_phase_environment_info;
struct overlay_info_t;
class phys_static_array<rigid_body_constraint_wheel *,4>;
class rb_vehicle_model;
struct std::_Scalar_ptr_iterator_tag;
struct fileshareUploadInfo_t;
class bdStatsInfo;
struct SCR_PROFILER_DATA;
struct IDWriteTextFormat;
struct ClientPlayerWeaponInfo;
struct BaseLerpBoneDef;
struct broad_phase_environment_info::avl_tree_accessor;
struct std::unary_function<__int64,unsigned int>;
struct GfxParticleCloud;
class phys_link_list<phys_collision_pair>;
class std::invalid_argument;
struct HFONT__;
struct BoneDef;
struct JointDef;
struct SelfPairDef;
struct RagdollDef;
struct GfxTextureOverride;
struct actorGravity_t;
union std::_String_val<char,std::allocator<char> >::_Bxty;
class std::allocator<char>;
class std::_String_val<char,std::allocator<char> >;
struct CgEntCollSector;
struct CgEntCollWorld;
class std::underflow_error;
class bdPlatformMutex;
struct GfxVertexBufferState;
struct GfxMeshData;
struct GfxLightingSH;
struct GfxReflectionProbe;
struct GfxEntity;
struct TracerInfo;
struct localEntity_s;
struct cgs_t;
struct pmoveHandler_t;
struct FootstepTableDef;
struct SkinnedVertsDef;
class phys_free_list<rigid_body_constraint_contact>::iterator;
struct GfxWorldVertexData1;
struct GfxWorldDraw;
class bdCategorizedRatingInfo;
struct GfxLightGrid;
struct scr_localVar_t;
struct WeaponOptionTableEntry;
class create_gjk_geom_collision_visitor;
struct flameWeaponConfig_t;
struct cscr_mp_data_t;
struct DynEntityDef;
struct RawFile;
struct GfxLightingInfo;
struct XModelPieces;
struct flameDrips_t;
struct XModelPiece;
struct DXGI_FRAME_STATISTICS;
class phys_free_list<broad_phase_collision_pair>::T_internal_base;
class phys_free_list<broad_phase_collision_pair>;
struct gump_info_t;
struct IDXGIObject;
class phys_free_list<broad_phase_collision_pair>::T_internal;
struct std::_Pair_base<RagdollSortStruct *,RagdollSortStruct *>;
struct gjk_partition_t;
struct std::allocator<char>::rebind<char>;
struct CollisionPartition;
union std::_String_val<wchar_t,std::allocator<wchar_t> >::_Bxty;
struct tMIXERCONTROLDETAILS_BOOLEAN;
struct CgEntCollNode;
struct std::unary_function<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,unsigned int>;
class nuge;
struct FxCodeMeshData;
class std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >;
struct GfxWorldFogVolume;
class phys_free_list<broad_phase_info>::iterator;
struct stbi_resample;
class phys_free_list<broad_phase_info>::T_internal;
struct D3D10_QUERY_DESC;
class phys_free_list<PhysObjUserData>::T_internal_base;
class phys_free_list<PhysObjUserData>;
class phys_simple_link_list<contact_point_info>::iterator;
struct GfxExposureVolume;
struct gjk_double_sphere_t;
struct GfxCell;
struct gjk_obb_t;
struct stbi;
struct png;
struct gjk_query_input;
struct gjk_double_sphere_t::csi;
struct r_SkinConditions;
struct GfxWorldDpvsPlanes;
struct GfxStaticModelLmapVertexInfo;
struct phys_transient_allocator::block_header;
struct GfxPackedPlacement;
struct GfxLightingSHQuantized;
struct GfxStaticModelDrawInst;
struct Glass;
struct DXGI_OUTPUT_DESC;
struct GlassDef;
struct cachedClient_s;
struct SortData;
struct DXGI_RGB;
class phys_assert_info;
struct GSC_FIXUP_ITEM;
struct GfxWaterBuffer;
struct gjk_aabb_t;
struct GfxDebugPlume;
class broad_phase_environment_query_input;
struct LerpBone;
struct BulletFireParams;
class phys_simple_allocator<generic_avl_map_node_t>;
class phys_link_list<contact_point_info>;
class phys_contact_manifold_process;
struct Bone;
struct sunflare_t;
struct cg_level_locals_t;
class std::runtime_error;
struct phys_contact_manifold_process::isect_info;
struct debugFileInfo_t;
struct phys_contact_manifold_process::bridge;
class phys_inplace_avl_tree_node<phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal>;
struct phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal;
struct D3D10_INPUT_ELEMENT_DESC;
struct phys_gjk_info::phys_gjk_set_info;
class phys_free_list<NitrousVehicle>::T_internal_base;
class phys_free_list<NitrousVehicle>;
class gjk_unique_id_database_t;
struct GfxWorldStreamInfo;
struct GfxWorldSun;
struct SunLightParseParams;
struct GfxSkyDynamicIntensity;
struct GfxWorldDpvsStatic;
struct GfxWorldDpvsDynamic;
struct GfxWorld;
struct gjk_polygon_cylinder_t::poly_verts;
struct gjk_polygon_cylinder_t;
struct GfxLightCorona;
class phys_link_list<contact_point_info>::iterator;
struct phys_inplace_avl_tree<bpei_database_id,broad_phase_environment_info,broad_phase_environment_info::avl_tree_accessor>::stack_item;
struct GfxLightRegion;
struct IXAudio2EngineCallback;
struct qtime_s;
class rigid_body_constraint;
struct tWAVEFORMATEX;
struct XMA2WAVEFORMATEX;
struct unz_global_info_s;
struct unz_file_info_s;
struct unz_file_info_internal_s;
struct unz_s;
class phys_gjk_input;
struct serverStaticHeader_t;
struct SourceLookup;
struct _FLOATING_SAVE_AREA;
struct _CONTEXT;
struct _MINIDUMP_THREAD_CALLBACK;
struct _INTERNET_BUFFERSA;
struct XAUDIO2_FILTER_PARAMETERS;
struct FixedSizeAllocator<GlassShard *>::Block;
struct WAVEFORMATEXTENSIBLE;
struct XAUDIO2_DEVICE_DETAILS;
struct IXAudio2MasteringVoice;
class phys_auto_activate_callback;
class std::reverse_iterator<std::_List_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> > > >;
struct sd_stream;
struct sd_stream_preload;
struct sd_stream_globals;
struct PathFindInput;
struct std::_Pair_base<flameGeneric_s * *,flameGeneric_s * *>;
struct _MINIDUMP_USER_STREAM;
class phys_free_list<broad_phase_group>::T_internal_base;
class phys_free_list<broad_phase_group>;
struct XAUDIO2_DEBUG_CONFIGURATION;
struct GfxDebugPoly;
class phys_free_list<broad_phase_group>::iterator;
struct clients_rewind_context_t;
struct bbLoadoutData;
struct ExtentBounds;
struct MenuList;
struct $_TypeDescriptor$_extraBytes_40;
union sval_u;
struct VariableCompileValue;
class ProfileLog;
struct TaskDefinition;
struct FontIconAlias;
class phys_link_list<gjk_geom_info_t>::iterator;
class bitarray<768>;
struct D3DX10_IMAGE_INFO;
class query_brush_model_gjk_geom_visitor;
struct BModelDrawInfo;
class gjk_collision_visitor;
struct half4;
struct sv_rewind_context_t;
struct ThreadDebugInfo;
struct _gscBuiltinProfileInfo_t;
struct rigid_body_constraint_contact::avl_tree_accessor;
class bdIPDiscoveryPacket;
class phys_gjk_info;
struct ProbedPage;
struct TraceExtents;
struct traceWork_t;
struct Codebook;
class phys_static_array<rigid_body_constraint_wheel *,4>::iterator;
class phys_link_list_base<phys_collision_pair>;
class phys_free_list<rigid_body_constraint_custom_orientation>::iterator;
class broad_phase_memory;
struct GlassShardMeshVertex;
struct pointtrace_t;
struct phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal::avl_tree_accessor;
struct gjk_trace_input_t;
struct MaterialUsage;
struct GlassesServer;
struct actors_rewind_context_t;
struct scr_const_t;
struct _DIDATAFORMAT;
class SmallAllocator;
class Allocator;
struct GlassRenderer::Action;
struct GlassRenderer;
class ISteamGameServer;
struct SteamServerConnectFailure_t;
struct _DIOBJECTDATAFORMAT;
class CCallback<LiveSteamServer,SteamServerConnectFailure_t,1>;
struct col_context_t;
struct std::forward_iterator_tag;
class servernetadr_t;
class std::_List_unchecked_const_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> >,std::_Iterator_base0>;
struct MatchMakingKeyValuePair_t;
class pulse_sum_angular;
struct IgnoreEntParams;
struct GlassPhysics;
struct FixedSizeAllocator<GlassPhysics>::Block;
struct std::_Allocator_base<char>;
struct GfxDelayedCmdBuf;
struct GfxDrawSurfList;
struct GfxBspDrawSurfData;
struct PlayerInviteRecord;
struct RecentlyInvitedPlayers;
class phys_simple_allocator<gjk_double_sphere_t>;
class bdQoSRequestPacket;
class minspec_hash_table<phys_slot_pool,64>;
struct tagged_void_pointer_t;
class phys_slot_pool;
class phys_memory_manager;
struct r_global_permap_assets_t;
class phys_free_list<rigid_body>::T_internal;
struct _MINIDUMP_THREAD_EX_CALLBACK;
struct _MINIDUMP_IO_CALLBACK;
struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK;
struct _MINIDUMP_CALLBACK_INPUT;
struct PortalHeapNode;
class phys_link_list<gjk_trace_output_t>::iterator;
struct trStatistics_t;
struct HMONITOR__;
struct DXGI_MAPPED_RECT;
struct DXGI_GAMMA_CONTROL;
struct trViewStatistics_t;
struct DXGI_SURFACE_DESC;
struct IDXGISurface;
struct stb_memory;
struct DXGI_GAMMA_CONTROL_CAPABILITIES;
class bdBandwidthTestResults;
struct function_stack_t;
struct function_frame_t;
struct scrVmPub_t;
class bdCommerceWriter;
struct DXGI_SWAP_CHAIN_DESC;
struct contact_t;
struct GfxSunShadowBoundingPoly;
struct ShardGroup;
struct FixedSizeAllocator<ShardGroup>::Block;
struct $_TypeDescriptor$_extraBytes_18;
struct GlassOutline::EdgeDistance;
struct trDebugSphere_t;
class bdTeamProfileSearchParams;
struct HINSTANCE__;
struct DIDEVICEINSTANCEA;
struct GfxRenderTargetSurface;
struct GfxRenderTarget;
struct GlassGenVertsCmd;
struct ScreenPlacement;
struct IPakLoadedPackfile;
struct GlassShard::Triangles;
class std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >;
class bdPlatformThread;
struct GfxSunShadowPartition;
class std::hash<double>;
struct GfxIndexBufferState;
struct HDC__;
struct IDirect3DCubeTexture9;
struct GfxAabbTree;
struct GfxDrawPrimArgs;
struct GfxCodeMatrices;
class bdAuthChangeUserKeyCypherText;
struct FxMarkMeshData;
struct GfxBackEndPrimitiveData;
struct JoinSessionMessage;
struct DebugGlobals;
struct twitterFeed_t;
struct trDebugString_t;
struct StickToCodeMap_t;
struct sysEvent_t;
struct SmallAllocatorTemplate<GlassShard *>::rebind<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node>;
struct std::output_iterator_tag;
struct dwTwitterRegisterTask;
class phys_link_list<pulse_sum_point>;
struct GfxCompressedLightGridCoeffs;
class std::_List_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> > >;
struct dwTwitterPostTask;
struct dwTwitterInfoTask;
struct dwTwitterSearchTask;
struct playerTwitterOperations;
struct ScriptExpression_t;
struct MaterialMemory;
struct TempOutlineTemplate<16>;
struct GfxCmdBufInput;
struct GfxCmdBufSourceState;
class phys_link_list<pulse_sum_normal>;
struct GfxWorkerData;
struct GfxSunShadowProjection;
struct GfxSunShadow;
struct GfxBackEndData;
struct DXGI_ADAPTER_DESC1;
struct _XINPUT_GAMEPAD;
class bdArray<bdKeyValuePair>;
class std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> >;
struct _tagADDRESS;
struct ID2D1LinearGradientBrush;
struct GfxCmdArray;
struct std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node;
class bdReliableSendWindow::bdMessageFrame;
struct XModelNameMap;
struct GfxQuadMeshData;
struct IKJointBones;
struct XAnimInfo;
class bdReference<bdCookie>;
class bdCookieEchoChunk;
struct IDirect3DSwapChain9;
struct serverInfo_t;
struct WorkerCmdConditional;
struct SndPan;
struct clientDebugLineInfo_t;
struct clientDebugSphereInfo_t;
struct clientDebug_t;
struct file_in_zip_read_info_s;
struct SSkinAnim;
struct SndLoopEmitter;
struct mnode_t;
struct PredictedVehicleDef;
struct clientHeader_t;
struct SndEntityContextInfo;
union CullInfo;
struct loadAnim_t;
struct demoTheaterFileInfo;
struct scrParserGlob_t;
struct SnapshotInfo_s;
class bitarray<160>;
struct XAnimToXModel;
struct SndDspMeters;
struct demoRecordedFileUploadInfo;
struct SndEnvEffect;
struct XAnimCalcAnimInfo;
struct _WIN32_FILE_ATTRIBUTE_DATA;
struct streamingState_s;
class bdReference<bdHeartbeatAckChunk>;
struct HMENU__;
struct std::unary_function<unsigned __int64,unsigned int>;
struct GfxGlobals;
struct FxBeamLaserData;
struct FxBeamFlameData;
struct FxBeamDemoLineData;
struct FxBeamArcData;
struct FxBeam;
class std::logic_error;
struct GlassOutline;
struct IDWriteFontCollection;
struct scr_block_s;
struct GrassWind;
struct weaponState_t;
class XAnimClientNotify;
struct std::_Container_proxy;
struct clientLogo_t;
struct vidConfig_t;
struct clientStatic_t;
struct flameRender_s;
class std::numeric_limits<unsigned int>;
struct XAnimPartTransPtr;
class std::allocator<void>;
struct LeaderboardDef;
struct std::char_traits<wchar_t>;
struct uploadStreamData_t;
class std::numeric_limits<float>;
struct WebM_Url;
class std::numeric_limits<__int64>;
struct std::_Container_base0;
struct _DSCAPS;
class std::numeric_limits<unsigned long>;
struct std::_Num_int_base;
struct cgMedia_t;
struct AnimState;
struct std::_Iterator_base0;
struct WaveInLineInfo;
class std::reverse_iterator<std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >;
class std::tr1::_Ref_count_base;
class std::numeric_limits<double>;
class std::numeric_limits<long double>;
struct split_cb_params;
class std::numeric_limits<long>;
struct std::_Num_base;
struct weaponParms;
class std::numeric_limits<wchar_t>;
class std::numeric_limits<unsigned __int64>;
struct std::_Pair_base<WeaponComponent *,WeaponComponent *>;
struct smodel_debug_info_t;
class std::numeric_limits<signed char>;
struct std::_Nonscalar_ptr_iterator_tag;
union _Dconst;
struct scrEvaluateGlob_t;
struct __type_info_node;
struct code;
class bdYouTubeAuthorizationCode;
struct breakpointData_t;
struct SurfaceTypeSoundList;
struct WeaponStatsTable;
struct std::unary_function<double,unsigned int>;
struct cspField_t;
struct FxImpactTable;
union XAssetHeader;
struct zhuffman;
struct zbuf;
struct SndIndexEntry;
struct PhysGlob;
class phys_free_list<VehicleParameter>;
struct ID3D10Asynchronous;
struct SndDuck;
class CCallback<LiveSteamClient,PersonaStateChange_t,0>;
struct SndDialogScriptIdLookup;
struct clipMap_t;
struct GfxLightRegionAxis;
class rbint;
struct MapEnts;
struct uploadStreamDebugData_t;
struct TriggerHull;
struct $_TypeDescriptor$_extraBytes_70;
struct VehicleState;
struct uploadStreamHistory_t;
struct $_TypeDescriptor$_extraBytes_64;
struct XAnimTime;
struct DynEntityPose;
struct streamBuffer_t;
struct downloadStreamingInformation_t;
struct DynEntityClient;
struct GfxHeroLight;
struct DynEntityColl;
struct rope_client_verts_t;
struct rope_t;
struct XModelConfig;
struct GfxSceneDynBrush;
struct ComPrimaryLight;
struct _BLOB;
struct SSkinModel;
struct pathbasenode_t;
class phys_inplace_avl_tree<centity_t const *,auto_rigid_body,auto_rigid_body>;
struct pathnode_tree_nodes_t;
union pathnode_tree_info_t;
struct pathnode_tree_t;
struct phys_inplace_avl_tree<unsigned int,generic_avl_map_node_t,generic_avl_map_node_t>::stack_item;
struct D3DXFLOAT16;
struct D3DXVECTOR3_16F;
struct std::_Pair_base<AimTarget *,AimTarget *>;
class FixedSizeAllocator<GlassShard *>;
struct GameWorldMp;
struct SndLengthNotifyInfo;
struct SndFader;
struct SndSpeakerMap;
struct SndVoice;
struct GlassDefLoad;
struct GfxStreamingAabbTree;
struct ExtraCamDebugOrientation;
struct moveclip_t;
struct GfxVolumePlane;
struct SndEntLoop;
struct TempPackedOutline;
struct PotentialTargetData;
struct GfxWorldFogModifierVolume;
struct SndCommandStopEnt;
class GlassRenderer::SortedShardsList;
struct P2PSessionState_t;
struct SavedDObjModel;
struct SavedDObj;
struct GfxReflectionProbeVolumeData;
class ISteamUserStats;
struct GfxCompressedLightGridColors;
struct SndCommandSetMusicState;
struct _DSCBUFFERDESC;
struct GfxSkyGridVolume;
struct SndCommandAliasName;
struct dsound_sample_t;
struct std::input_iterator_tag;
struct sd_decoder_flac;
struct _NVAPI_VIDEO_SRC_INFO;
union XModelDrawInfo;
struct GfxSceneDynModel;
struct SessionGraveYard;
struct SSkinInstance;
class CustomSearchInfo_FindPathAway;
struct SSkinShaders;
struct NV_TIMING_FLAG;
struct SSkinVert;
struct D3D10_VIEWPORT;
struct GfxLightRegionHull;
struct srfTriangles_t;
struct GfxSurface;
struct SndCommandCinematicStart;
struct GfxClientFog;
struct SndNotifyEntUpdate;
struct SndNotifySubtitle;
struct SndNotifyLength;
struct SndNotifyPlaybackFree;
union SndNotifyContext;
struct GfxLodRamp;
struct Occluder;
struct GfxOutdoorBounds;
struct SndDspBiquadState;
struct GfxHeroLightTree;
class bdQoSProbeInfo;
struct FontIcon;
class ActorCmdHelper;
struct FontIconEntry;
class bdBandwidthTestClient;
struct SndDriverGlobals;
struct XAUDIO2_SEND_DESCRIPTOR;
struct SndDuckGroup;
struct SndMaster;
struct SndFutz;
struct sightclip_t;
class ISteamHTTP;
struct LbColumnDef;
class ISteamRemoteStorage;
struct XGlobals;
struct Glasses;
struct SndDuckActive;
struct $_TypeDescriptor$_extraBytes_75;
struct IXAudio2SourceVoice;
struct KeyValuePair;
class CCallback<LiveSteamServer,SteamServersDisconnected_t,1>;
struct MemoryBlock;
struct tagBITMAP;
struct GlassUpdateCmd;
struct Slug;
struct dent_info_t;
struct FootstepFXTableDef;
class CCallback<CSteamAchievements,UserStatsReceived_t,0>;
class compare_attachment_sort;
struct SmallAllocatorTemplate<GlassShard *>::rebind<GlassShard *>;
struct BulletTraceResults;
struct pmove_t;
class phys_free_list<NitrousVehicle>::iterator;
class std::length_error;
class std::basic_string<char,std::char_traits<char>,std::allocator<char> >;
struct r_double_index_t;
struct DynEntityAreaParms;
class std::_String_val<wchar_t,std::allocator<wchar_t> >;
struct FixedSizeAllocator<TempPackedOutline>::Block;
struct std::_Pair_base<pathsort_t *,pathsort_t *>;
struct std::unary_function<float,unsigned int>;
class std::reverse_iterator<std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >;
class ISteamMatchmakingRulesResponse;
struct scoreboardSortByClientNum_t;
class std::hash<float>;
struct SndAssetToLoad;
struct std::allocator<wchar_t>::rebind<wchar_t>;
class GlassTimer;
struct NV_COPROC_APP_INFO;
struct hashName_t;
struct std::unary_function<unsigned long,unsigned int>;
struct std::unary_function<long double,unsigned int>;
class std::hash<unsigned long>;
struct _EXCEPTION_RECORD;
struct std::_Pair_base<PartyInfo *,PartyInfo *>;
struct _NVAPI_D3D9_DMA_DESCRIBE_PARAMS;
class std::hash<unsigned __int64>;
struct heli_height_lock_patches_t;
class std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >;
struct SndDspSquelchState;
struct SndDspFutzState;
struct SndDspSourceState;
class std::reverse_iterator<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >;
struct $_s__RTTIBaseClassArray$_extraBytes_12;
struct vehAnimClient_t;
class PublicTeamProfile;
union float_conv;
struct slide_move_params_t;
struct userFileList;
struct AnimRateOffset;
struct $_TypeDescriptor$_extraBytes_33;
struct GroundTrace;
struct field_t;
struct unlockableItemsData;
struct _NVAPI_D3D9_ENABLE_STEREO_CHALLENGE_PARAMS;
struct NvGUID;
struct _NVAPI_D3D9_ENABLE_STEREO_RESPONSE_PARAMS;
struct _NVAPI_D3D9_ENABLE_STEREO_PARAMS;
struct fileShareWriteFileInfo;
class bdUCDAccountInfo;
struct GSPolicyResponse_t;
struct queryResults_CACMPShared;
struct challengeTableRow_t;
struct TrackType;
struct param_CACMPShared;
struct UrlMethod;
struct validateCACStatus_s;
struct AIDemoLockOnView;
struct AIDemoLockOnValues;
struct CACMPSHARED_WeaponData;
class LargeLocal;
struct gjkcc_info_database_t;
class phys_static_array<geom_plane,128>;
union XAssetPoolEntry<ddlRoot_t>;
struct XAssetPool<ddlRoot_t,1>;
struct list_gjk_trace_output;
class bdMailBody;
struct clientSnapshot_t;
struct $_TypeDescriptor$_extraBytes_29;
class phys_static_array<geom_plane,128>::iterator;
class bdReference<bdAntiCheatChallenges>;
struct archivedEntityShared_t;
struct $_TypeDescriptor$_extraBytes_37;
struct cachedActor_s;
class bdYouTubeUserToken;
struct $_TypeDescriptor$_extraBytes_57;
struct ZMLocationRichPresenceInfo;
struct BackgroundPurchasedCount;
struct animVehicleSeats_t;
struct animConditionTable_t;
struct tagNV_TIMINGEXT;
struct tagNV_TIMING;
struct jqWorkerCmd;
union XAssetPoolEntry<XModelPieces>;
struct dwTeamClanCreateTask;
struct _MINIDUMP_MEMORY_INFO;
struct client_t;
struct tree_desc_s;
struct internal_state;
struct AnimStateName;
struct uJson::array_iter;
struct IPakPriority;
struct IPakWorkData;
struct jpeg;
struct archivedSnapshot_s;
struct SndCommandPlay;
struct SndCommandStopAlias;
struct SndCommandDisconnectListener;
struct SndCommandSetListener;
struct SndCommandStopSounds;
struct SndCommandSetEnvironmentEffects;
struct SndCommandDeactivateEnvironmentEffects;
struct SndCommandSetPlaybackAttenuation;
struct SndCommandSetPlaybackAttenuationRate;
struct SndCommandSetPlaybackPitch;
struct SndCommandSetPlaybackPitchRate;
struct SndCommandStopPlayback;
struct SndCommandSetStartPaused;
struct SndCommandDuck;
struct SndCommandSetEntState;
struct SndCommandSetGameState;
struct SndCommandLoopAt;
struct SndCommandLineAt;
struct SndCommandSetContext;
struct SndCommandSetEntContext;
struct SndCommandScriptTimescale;
struct SndCommandLoadPatch;
struct SndCommandLoadGlobals;
struct SndCommandPrefetchLoadedAlias;
struct SndCommandSetDefaultAmbientContext;
struct SndCommandSetFrontendMusic;
struct SndCommandSetLoopState;
struct SndCommandPlayLoops;
union SndCommandContext;
struct SndCommand;
class bdTimeStamp;
struct chunk;
union XAssetPoolEntry<Qdb>;
struct dwTeamGetMembershipsTask;
struct _NVAPI_D3D9_DMA_UNMAP_PARAMS;
struct NV_MOSAIC_TOPO_BRIEF;
struct orientation_t;
struct stbi_gif_struct;
struct NV_HDCP_STATUS;
struct AimAssistPlayerState;
struct team_move_context_t;
class ISteamUtils;
class colgeom_visitor_inlined_t<200>;
struct IKCollisionCache;
struct BuiltinMethodDef;
struct D3D10_SO_DECLARATION_ENTRY;
struct actor_fields_s;
struct ThrottleData;
struct _NVDRS_BINARY_SETTING;
struct _NVDRS_SETTING_VALUES;
struct archivedEntity_s;
struct cachedSnapshot_t;
class CustomSearchInfo_FindPathWithLOS;
struct SndOcclusionTrace;
struct FaceQuadrantThresholds;
struct NV_GPU_GPIO_LEGAL_PINS;
struct __s_GUID;
class ISteamApps;
struct scr_classStruct_t;
struct pathnode_parent_t;
struct demoFileShareTaskHandler;
struct demoFileHandler;
struct fileShareWriteSummaryInfo;
class sd_xa2_callback;
struct snd_fire_manager;
struct NV_GPU_CLIENT_POWER_READING_V1;
struct NV_GPU_CLIENT_POWER_POLICIES_POLICY_INFO_V1;
class CCallback<CSteamAchievements,UserStatsStored_t,0>;
struct sentient_fields_s;
struct GSC_OBJGDB;
struct ai_funcs_t;
struct AITypeScript;
class ISteamMatchmakingServers;
struct node_field_t;
class phys_simple_allocator<pathnode_parent_t>;
struct NVAPI_VIDSURF_ENCRYPT_CTRL_GET_GUID_COUNT;
struct GlassStreamOutline;
struct SndAliasLookupNode;
struct SndAliasLookupCache;
struct SndBankGlobals;
struct NV_COOLER_TACHOMETER;
struct _NVAPI_DESKTOP_RES;
struct _NVAPI_VIDEO_PROCESSING_CAPS;
struct _NVAPI_VIDEO_CAPS;
struct _NVAPI_VIDEO_CAPS_PACKET;
struct BindPair_s;
struct SndDspVoiceFilterParam;
class FixedSizeAllocator<GlassShard>;
class PrivateTeamProfile;
struct eliteClanData_t;
class phys_link_list<pulse_sum_wheel>;
struct uJson;
struct uJson::object_iter;
struct NV_GPU_GET_HDCP_SUPPORT_STATUS;
struct WeaponOptions::Reticle;
struct _NV_DISPLAYCONFIG_PATH_INFO;
class MatchMakingInfo;
struct GfxLodParms;
struct r_globals_t;
struct eliteSubscriberData_t;
struct eliteUCDData_t;
struct elite_t;
struct r_global_permanent_t;
struct GroupSet;
struct GametypeRichPresenceInfo;
struct DpvsGlob;
union GfxHullPointsPool;
struct jsmn_parser;
union jsmnVal_u;
struct OutlineEdge;
class CCallback<LiveSteamClient,GameOverlayActivated_t,0>;
struct sd_decoder_ps3_mp3;
class fileShareDownloadInterceptor;
struct SndNotify;
struct _NVDRS_APPLICATION_V2;
struct LaunchData;
union XAssetPoolEntry<PhysPreset>;
struct XAssetPool<PhysPreset,1>;
class bdLogSubscriber;
struct InviteInfo;
struct Friend;
struct scr_entref_t;
struct Floor0;
class phys_inplace_avl_tree_node<pulse_sum_constraint_solver::temp_user_rigid_body>;
class pulse_sum_constraint_solver::temp_user_rigid_body;
class dwQoSMultiProbeListener;
struct pulse_sum_constraint_solver::solver_info;
class phys_link_list<pulse_sum_angular>;
class phys_link_list<pulse_sum_contact>;
class pulse_sum_constraint_solver;
struct SpawnInfluencerPreset;
class bdMailHeader;
struct DBReorderAssetEntry;
class bdNotification;
struct threat_bias_t;
struct qosPayload_t;
class phys_static_array<plane_lt,512>::iterator;
struct team_move_other_context_t;
struct PC_AgeRestrict;
class bdMessagingGroup;
struct XuidInfo;
struct s_mutePlayerInfo;
struct pathsort_t;
struct tagMONITORINFO;
struct physBatch;
struct _DSCEFFECTDESC;
struct trackerItem_s;
struct trackerQueue_s;
class phys_static_array<phys_vec3,512>::iterator;
struct sentient_sort_t;
struct tagMIXERLINEA;
struct _DSCBCAPS;
struct FxCurveIterator;
struct fileFetchData;
class CustomSearchInfo_FindPathAwayNotCrossPlanes;
class CustomSearchInfo_FindPathInCylinderWithLOSNotCrossPlanes;
class phys_simple_allocator<gjk_obb_t>;
class CustomSearchInfo_FindPathClosestPossible;
struct AttractorRepulsor_t;
struct dwFileMetadata;
struct FFOTDInfo;
struct WADEntry;
class phys_simple_allocator<gjk_cylinder_t>;
struct WADHeader;
struct Residue;
struct IXAudio2VoiceCallback;
struct chull_t;
struct gz_header_s;
struct XAUDIO2_BUFFER;
struct XZoneInfo;
struct ENTROPY_CONTEXT_PLANES;
struct FFOTDChunkFooter;
struct fetchSignedStatsKeyUserData;
struct persistentStats;
class phys_static_array<phys_vec3,6144>::iterator;
class phys_static_array<int,512>;
struct ai_gjk_slide_move_input_t;
struct RedBlackTreeNode;
class phys_link_list_base<pulse_sum_wheel>;
struct XAUDIO2_VOICE_SENDS;
struct LeagueTeamSubdivisionInfo;
struct XDoll_ConstraintInfo;
struct fileShareSearchInfo_t;
struct materialCommands_t;
struct classSets_t;
struct fileshareListingInfo_t;
struct leaves_t;
struct $_TypeDescriptor$_extraBytes_41;
struct playerNetworkData;
struct DIDEVCAPS;
struct phys_convex_hull::ch_triangle;
struct _XINPUT_STATE;
struct $_TypeDescriptor$_extraBytes_35;
class phys_free_list<rigid_body_constraint_contact>::T_internal;
struct _LUID_AND_ATTRIBUTES;
struct _TOKEN_PRIVILEGES;
struct ConversionArguments;
struct SndStartAliasInfo;
class phys_link_list_base<pulse_sum_normal>;
class fileShareUploadInterceptor;
struct tagWNDCLASSA;
struct LeagueFriendInfo;
struct sockaddr_in;
struct GSClientApprove_t;
struct tagMSG;
struct vehicle_avoidnode_t;
struct $_TypeDescriptor$_extraBytes_69;
struct SentientGlobals;
struct _EXCEPTION_POINTERS;
struct SteamServersDisconnected_t;
struct GSClientKick_t;
class CCallback<LiveSteamServer,SteamServersConnected_t,1>;
class CCallback<LiveSteamServer,GSPolicyResponse_t,1>;
class CCallback<LiveSteamServer,GSClientDeny_t,1>;
class CCallback<LiveSteamServer,GSClientKick_t,1>;
class LiveSteamServer;
struct entity_bpi_header;
class phys_link_list_base<pulse_sum_contact>;
struct DXGI_ADAPTER_DESC;
struct std::pair<pathsort_t *,pathsort_t *>;
struct SteamServersConnected_t;
struct SndCsvParseEntry;
struct _KDHELP64;
class bdAuthUtility;
struct debug_brush_t;
struct _STARTUPINFOA;
class phys_link_list_base<pulse_sum_angular>;
struct FLAC__StreamDecoderProtected;
struct IKSystem;
struct sd_source;
class cCurveManager;
struct png_color_16_struct;
class gameserveritem_t;
struct IKJointVars;
class ISteamUser;
struct SndMusicState;
class CCallResult<LiveSteamClient,EncryptedAppTicketResponse_t>;
class LiveSteamClient;
class phys_static_array<flameGeneric_s *,1000>;
struct TreeNameMap;
struct EncryptedAppTicketResponse_t;
struct GameOverlayActivated_t;
struct MappingChannel;
struct DlcInstalled_t;
struct Point;
struct GameRichPresenceJoinRequested_t;
struct sd_decoder_pc_flac;
struct PIAState;
struct $_TypeDescriptor$_extraBytes_58;
struct stb_vorbis_info;
struct MOSState;
class CCallback<CSteamAchievements,UserAchievementStored_t,0>;
class CSteamAchievements;
struct std::pair<flameGeneric_s * *,flameGeneric_s * *>;
struct TIAState;
struct Achievement_t;
struct sd_mix_bus_param;
struct IDirectSoundBuffer;
class phys_free_list<RagdollBody>::iterator;
struct UserStatsStored_t;
struct Joint;
struct RagdollBody;
class phys_free_list<RagdollBody>::T_internal;
struct DynEntSortStruct;
struct UserAchievementStored_t;
struct UserStatsReceived_t;
struct fshCacheFileDetails_t;
struct SteamParamStringArray_t;
struct ikLerpInfo_t;
struct IKState;
class ISteamGameServerStats;
class ISteamClient;
struct sd_voice;
struct SndRvParams;
struct SndRvState;
struct SndDspDynamoState;
struct SndDspVoiceFilterState;
struct sd_mix_master_state;
struct SndDspMasterEqParam;
struct sd_mix_master_param;
struct sd_globals;
struct flameStream_s;
class ISteamMatchmakingPingResponse;
struct XAnimPartQuat;
class ISteamMatchmakingServerListResponse;
struct flameSource_t;
class ISteamScreenshots;
class phys_static_array<flameGeneric_s *,1000>::iterator;
class ISteamMatchmakingPlayersResponse;
struct gameTypesTable_t;
struct unlockedItemsData_t;
class phys_free_list<RagdollBody>::T_internal_base;
class phys_free_list<RagdollBody>;
struct badplace_arc_t;
struct badplace_brush_t;
union badplace_parms_t;
struct _pendedBadPlace;
struct PhysImpulse;
struct searchContext_t;
struct search_t;
struct mz_zip_archive_file_stat;
struct SndPlayback;
struct badplace_t;
class phys_free_list<NitrousVehicle>::T_internal;
struct fileShareSearchBackoff_t;
struct ddlStackMember_t;
struct ddlStack_t;
struct scrMemTreeDebugGlob_t;
struct SndSpeakerAngle;
struct SndSpeakerConfig;
class DebuggerCriticalSection;
struct scrVmDebugPub_t;
class destructible_ent_aa;
struct dwTeamClanLeaveTask;
struct dwTeamSetPublicProfileTask;
struct dwTeamSetPrivateProfileTask;
struct dwTeamGetMembersTask;
struct dwTeamGetPublicProfileTask;
struct dwTeamGetPrivateProfileTask;
struct dwLobbyGetSubscriptionFromDWTask;
struct controllerEliteTasks_t;
struct MapnameRichPresenceInfo;
struct SndGameState;
struct SearchSessionMapPackCombinationData;
struct AnimScriptList;
struct GroupMembership;
struct corpseInfo_t;
struct InvitesGlob;
struct FxTrail;
struct gameTypeScript_t;
struct _KDHELP;
struct SndEntState;
struct SndMusicActiveSegment;
struct ClientGameState;
struct SndListener;
struct _MINIDUMP_CALLBACK_INFORMATION;
struct GSC_STRINGTABLE_ITEM;
struct SndAliasPreload;
struct SndLocal;
struct GSC_IMPORT_ITEM;
struct _MINIDUMP_CALLBACK_OUTPUT;
struct cdl_proftimer;
struct sd_decoder_mpc;
class miniDumper;
struct Flame_SortByStream;
struct PrecacheEntry;
struct collision_material_t;
struct signedStatsHash_t;
union viewedTime_u;
struct snd_occlusion_single;
struct gameBookmarks_t;
struct scrAnimGlob_t;
struct PlayerSkill;
union ddlValue_t;
struct CodeBreakpoint;
struct statsDeltaRow_t;
struct MapProfileElement;
class SndScopedPerformanceError;
struct cachedStats_t;
struct SessionCreateData;
struct CodeBreakpoints;
class bdSecurityInfo;
struct scrStringGlob_t;
struct SessionSearchPayloadData;
struct SessionTaskCheckData;
struct std::_Pair_base<unsigned int *,unsigned int *>;
struct SessionJoinData;
union XAssetPoolEntry<WeaponCamo>;
struct Ps3PresenceData;
struct Floor1;
union Floor;
union XAssetPoolEntry<SndAliasList>;
struct XAssetPool<SndAliasList,16>;
struct FriendsGlob;
struct stb_vorbis_packet;
struct scoreInfo_t;
struct PlayerIdentityData;
struct _DSA;
struct fileshareCopy_t;
struct fileshareDescriptorData_t;
struct dwLobbyRefreshDWSubscriptionTask;
union XAssetPoolEntry<menuDef_t>;
struct XAssetPool<menuDef_t,1>;
class phys_simple_allocator<gjk_brush_t>;
struct ltc_cipher_descriptor;
union XAssetPoolEntry<FxImpactTable>;
struct Mode;
struct sortedItemsData_t;
struct HashInfo;
struct ChallengeProbe;
struct ChallengeState;
struct BLOCKD;
struct YV12_BUFFER_CONFIG;
class phys_static_array<float,512>;
struct _finddata64i32_t;
struct snd_occlusion_cmd;
struct RedBlackCacheNode;
struct RedBlackTree;
struct XDollBoneOrientation;
struct DynEnt_FadeData;
struct SndDspChamberlinState;
struct SndDspChamberlinCoef;
struct socketpool_t;
struct PhysPresetInfo;
struct SndDspBiQuadCoef;
struct DIDEVICEOBJECTDATA;
struct _XINPUT_VIBRATION;
struct _XINPUT_CAPABILITIES;
struct XMAPLAYBACK;
struct FLAC__StreamDecoderPrivate;
struct RagdollSortStruct;
struct LeagueSeason;
class WinSplashStartup;
struct _DPA;
struct debugger_sval_s;
struct scrDebuggerGlob_t;
struct IDXGIAdapter1;
struct IDXGIAdapter;
struct SysInfo;
struct StreamPosInfo;
struct _MINIDUMP_USER_STREAM_INFORMATION;
struct _IMAGELIST;
struct _OSVERSIONINFOA;
struct devhostXAnimNode;
struct XAnimRootAdjustMat;
struct XAUDIO2_VOICE_DETAILS;
struct XAUDIO2_EFFECT_DESCRIPTOR;
struct XAUDIO2_VOICE_STATE;
struct XAUDIO2_PERFORMANCE_DATA;
class XAnimClientNotifyList;
struct FxEffectDefTableEntry;
struct FxEffectDefTable;
struct tMIXERCONTROLDETAILS_UNSIGNED;
struct FxEffectField;
struct nodespawn_t;
struct WinVars_t;
struct NodeNums;
struct PathLinkInfo;
struct pathlocal_t;
struct tagMIXERLINECONTROLSA;
struct tagMIXERCAPSA;
struct NodeTypeToName;
struct _DSBCAPS;
class colgeom_debug_renderer_t;
class phys_free_list<VehicleParameter>::T_internal;
struct scrMemTreeGlob_t;
struct inflate_state;
struct config_s;
struct _watchNode_t;
struct scrVmGlob_t;
struct entityHandler_t;
struct FxSpatialFrame;
union FxBoltAndSortOrder;
struct FxEffect;
class phys_simple_allocator<auto_rigid_body>;
struct scrParserPub_t;
struct FxCameraUpdate;
struct ContinueStatementInfo;
struct actor_physics_local_t;
struct SimplePlaneIntersection;
struct BuildBounds;
class ScriptTokenizer;
class CustomSearchInfo_FindPath;
struct Sphere;
class CustomSearchInfo_CouldAttack;
class CustomSearchInfo_FindPathNotCrossPlanes;
struct FxMarkPoint;
struct FxPointGroup;
union FxPointGroupPool;
class CustomSearchInfo_FindPathInCylinderWithLOS;
class CustomSearchInfo_FindPathWithWidth;
class BotSearchInfo;
class bitarray<24576>;
struct BspChunk;
struct DObjTrace_s;
struct stb_vorbis_alloc;
struct AIEventListener;
class std::basic_ostream<char,std::char_traits<char> >::_Sentry_base;
struct scr_data_t;
struct stb_vorbis;
struct checkStopParams_t;
struct `anonymous-namespace'::CommandHandler;
struct searchState_t;
struct stype_t;
struct objFileInfo_t;
struct GSC_OBJ;
struct RedBlackCache;
class std::basic_istream<wchar_t,std::char_traits<wchar_t> >;
struct VariableDebugInfo;
struct DvarSetConfigInfo;
struct SourceBufferInfo;
struct GSC_PROFILE_ITEM;
struct GSC_EXPORT_ITEM;
struct MemoryNode;
struct winDmCommand;
struct debuggerVarUsageData_t;
struct ENT_IDS;
struct scrCompileGlob_t;
struct MacroBlockD;
struct CaseStatementInfo;
struct BreakStatementInfo;
struct infoParm_t;
struct hostent;
struct DataNode;
struct MD5_CTX;
struct ButtonToCodeMap_t;
struct flameRenderList_s;
struct DIDEVICEOBJECTINSTANCEA;
struct flameChunk_s;
struct IDirectInputA;
struct flameFire_t;
struct renderQuad_t;
struct flameVarDef_t;
struct HBRUSH__;
struct conditionStackMember_t;
struct fd_set;
struct tagSIZE;
struct sha1_state;
struct codtvImageCategoryMapping_t;
struct _MEMORYSTATUSEX;
class phys_sys;
struct _tagADDRESS64;
class bdTeamProposal;
struct _tagpropertykey;
struct _PROCESS_INFORMATION;
struct _CTL_USAGE;
struct _CRYPTOAPI_BLOB;
struct _CRYPT_ALGORITHM_IDENTIFIER;
struct _CTL_INFO;
struct CURVESORTARGS;
struct StateEnt;
struct XAnimServerNotifyList;
struct XAnimDeltaInfo;
struct XDollBody;
struct VisualRope;
struct leafList_s;
struct ClientNotifyData;
struct AddressInfo_s;
struct HMIXER__;
struct WinConData;
struct mem_track_t;
class debug_brush_info_t;
struct XAnimPartQuatPtr;
struct tMIXERCONTROLDETAILS;
class phys_link_list_base<pulse_sum_constraint_solver::user_rigid_body_restore_info>;
class pulse_sum_constraint_solver::user_rigid_body_restore_info;
struct tagMIXERCONTROLA;
class phys_free_list<VehicleParameter>::iterator;
struct pulse_sum_constraint_solver::temp_user_rigid_body::avl_tree_accessor;
struct $_TypeDescriptor$_extraBytes_46;
class phys_static_array<int,512>::iterator;
struct adjacencyWinding_t;
class phys_static_array<float,512>::iterator;
struct XModelSurfs;
class dynamic_ent_aa;
struct destructible_gamestate;
struct RadiantCommandProcessor;
class std::num_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >;
struct MigrationGlob;
struct phys_inplace_avl_tree<centity_t const *,auto_rigid_body,auto_rigid_body>::stack_item;
class std::ios_base::failure;
struct destructible_event_t;
struct TestLod;
struct XSurfaceGetTriCandidatesLocals;
struct XAnimRotPos;
struct search_node_s;
struct _DSCCAPS;
struct Sample;
struct HMIXEROBJ__;
struct WSAData;
union PackedLmapCoords;
struct cmdlineArg_t;
struct _ITEMIDLIST;
struct GamePad;
class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base;
struct winDmCommandResponse;
class std::_Locbase<int>;
struct languageInfo_t;
struct Mapping;
struct DPCState;
struct Machine;
class LocalizeStringName;
class phys_list_condition_functor_has_rigid_body;
struct ent_field_t;
struct PacketQueueBlock;
class bdIPDiscoveryPacketReply;
struct phys_inplace_avl_tree<rigid_body_pair_key,rigid_body_constraint_contact,rigid_body_constraint_contact::avl_tree_accessor>::stack_item;
struct PacketQueueEntry;
union XAssetPoolEntry<FxEffectDef>;
struct XAssetPool<FxEffectDef,600>;
struct BuiltinFunctionDef;
struct BitFieldGenerateRow;
struct BitFieldGenerateTable;
struct tlSystemCallbacks;
struct SpawnInfluencer;
struct SortedPointArray;
struct IDWriteInlineObject;
struct SpawnClientPosData;
struct nodetype;
class bdArray<bdReference<bdConnection> >;
struct _D3DVERTEXELEMENT9;
struct FxFlagOutputSet;
class bdAuthGetUsernamesForLicensePlainText;
struct _NVAPI_D3D9_DMA_TRANSFER_PARAMS;
struct _D3DCLIPSTATUS9;
struct _IMAGE_DATA_DIRECTORY;
class bdLinkedList<bdReference<bdMessage> >;
class bdQueue<bdReference<bdMessage> >;
struct WINTRUST_SGNR_INFO_;
struct notebonemap_t;
struct _CRYPT_BIT_BLOB;
struct _CERT_PUBLIC_KEY_INFO;
struct _CERT_INFO;
class bdReference<bdChunk>;
class bdUnicastConnection::bdControlChunkStore;
class phys_free_list<rigid_body_constraint_hinge>::iterator;
struct NV_MOSAIC_GRID_TOPO_DISPLAY;
struct NV_MOSAIC_DISPLAY_SETTING;
struct NV_MOSAIC_GRID_TOPO;
struct _NV_GPU_QUERY_ILLUMINATION_SUPPORT_PARM_V1;
class compare_spawnpoint_sort;
struct FxElemSetupCmd;
struct cscr_data_t;
struct DEMO_SpawnInfluencerPreset;
class bdThreadedSocket;
class phys_list_condition_functor_has_rigid_body_and_user_rigid_body;
struct NV_3D_SETTING;
struct FxDrawTrailGeoCmd;
class compare_spawninfluencer_sort;
struct GfxSceneBrush;
class phys_link_list<pulse_sum_contact>::iterator;
struct ZONE_PATCH_VERSION;
struct FxVisBlocker;
struct BspSurfRegionSetupInfo;
class phys_link_list<pulse_sum_point>::iterator;
union XAssetPoolEntry<SndPatch>;
struct FxEffectAtomics;
struct FxEffectContainer;
struct FxPlayEffectAction;
struct va_info_t;
class phys_simple_allocator<axis_aligned_sweep_and_prune::sap_node>;
struct CommonAddrGroup;
struct parseInfo_t;
struct XAssetPool<FxImpactTable,4>;
struct ParseThreadInfo;
struct TIMED_RADIUS_DAMAGE;
struct MigrationClient;
struct Q_FIXUP;
class bdStreamingTask;
struct Scr_ArraySortEntity;
struct Q_COLUMN;
struct Q_QUERYSTATE;
class bpi_environment_collision_info;
struct MigrationMessage;
struct GlobalUsage;
struct Q_TABLE;
struct WICRect;
union XAssetPoolEntry<StringTable>;
struct XAssetPool<StringTable,96>;
struct DebugDrawBrushInfo;
struct Q_DATA_ELEMENT;
struct Q_QUERYDESC;
struct D2D1_BITMAP_BRUSH_PROPERTIES;
struct Q_DB;
struct Q_DB_HEADER;
struct InternalSync;
struct profilemem_t;
struct ProfileMemTree;
struct std::_Pair_base<SpawnInfluencer * *,SpawnInfluencer * *>;
struct callbackInfo;
struct profMemTreeIter_t;
struct pooldata_t;
class bdTitleStats;
struct freenode;
struct PhysicalMemoryAllocation;
struct PhysicalMemoryPrim;
struct PhysicalMemory;
struct std::pair<SpawnPoint *,SpawnPoint *>;
struct streamInfo;
struct std::pair<SpawnInfluencer * *,SpawnInfluencer * *>;
class tlFixedString;
struct ALLOCATION_SCHEME_FUNCTIONS;
struct constraint_solver_task_input;
union XAssetPoolEntry<ScriptParseTree>;
struct XAssetPool<ScriptParseTree,1024>;
struct vehicle_fields_s;
struct ltc_asn1_list_;
class phys_simple_link_list<pulse_sum_constraint_solver::temp_user_rigid_body>::iterator;
union XAssetPoolEntry<VehicleDef>;
struct XAssetPool<VehicleDef,32>;
struct OrcaPlane;
union GfxSceneEntityInfo;
struct EntHandleInfo;
struct tiger_state;
class bdLeagueStatsInfo;
struct LeagueTeamsData;
struct LeagueSeasonHistory;
struct LeagueHistoryData;
struct StatsLookup;
struct dwUCDGetUserDetailsTask;
class bdQuotaUsage;
struct HunkUserDefault;
struct League;
struct HunkUserNull;
struct dwCreateUCDAccountTask;
struct HunkUserDebug;
struct FIXED_HUNKUSER;
struct statmonitor_s;
struct ID2D1RectangleGeometry;
struct _fixed_heapnode;
struct USERHEAP_FIXED_SCHEME_SPECIFIC;
struct FIRSTFIT_HUNKUSER;
struct std::pair<useList_t *,useList_t *>;
struct _firstfit_heapnode;
union XAssetPoolEntry<FootstepTableDef>;
struct complex4_t;
struct complex_s;
struct _s__CatchableType;
struct _s__CatchableTypeArray;
struct useList_t;
struct $_TypeDescriptor$_extraBytes_5;
union intsAreFloatsHack;
union XAssetPoolEntry<FootstepFXTableDef>;
struct _D3DCOLORVALUE;
struct D2D1_GRADIENT_STOP;
struct _s__ThrowInfo;
struct IDirect3DSurface9;
struct GamerProfileBuffer;
struct GamerProfileGlobals;
union GfxEntCellRefInfo;
struct $_s__CatchableTypeArray$_extraBytes_8;
union DevMenuChild;
struct DevMenuItem;
union XAssetPoolEntry<XGlobals>;
struct XAssetPool<XGlobals,1>;
struct EvalValue;
struct Eval;
struct SaveHeader;
class bdFriendInfo;
struct _WSAPROTOCOLCHAIN;
struct doubleXPRow_t;
struct std::pair<dvar_t const * *,dvar_t const * *>;
struct XAsset;
struct D2D1_PIXEL_FORMAT;
struct D2D1_RENDER_TARGET_PROPERTIES;
union XAssetPoolEntry<Glasses>;
struct XAssetPool<Glasses,1>;
struct std::_Pair_base<dvar_t const * *,dvar_t const * *>;
struct std::pair<bot_threat_t *,bot_threat_t *>;
struct ClientRecord;
struct D2D_POINT_2U;
struct dvarCallBack_t;
struct doubleXPData_t;
struct node_params_t;
class bdCommerceGiftItem;
struct TaskRecordHistory;
struct stringTableCacheEntry_t;
struct stringTableCache_t;
struct LeagueLbData;
struct DWRITE_GLYPH_RUN;
struct sha256_state;
struct D2D_SIZE_U;
struct coreStringTableAsset_t;
struct _NV_DISPLAY_BLANKING_INFO_V1;
struct hunkUsed_t;
struct hunkHeader_t;
struct mem_track_node_s;
struct FXScopedEffectLock;
struct AssetList;
struct target_t;
struct fileData_s;
union XAssetPoolEntry<Slug>;
struct _D3DVIEWPORT9;
struct WINTRUST_BLOB_INFO_;
union qfile_gus;
struct qfile_us;
struct fileHandleData_t;
struct ID2D1Resource;
struct iwd_t;
struct NV_DISPLAY_REFRESH_RATE;
struct NV_DISPLAY_SETTING;
struct NV_HCLONE_PATH_V1;
union XAssetPoolEntry<DestructibleDef>;
struct fileInIwd_s;
struct iwd_pure_check_s;
struct searchpath_s;
struct FxMarksGridCell;
struct FxMarksHashEntry;
struct DEMO_SpawnPoint;
struct FxTriGroup;
struct directory_t;
union XAssetPoolEntry<WeaponAttachment>;
struct AddonMapDef;
class phys_free_list<rigid_body_constraint_distance>::iterator;
class jqProfNamedEventMarker;
struct rpnStaticFunction_t;
struct VP_FindCustomPath::__l4::pathNodeTransientInfo;
union XAssetPoolEntry<ZBarrierDef>;
struct OperandList;
struct OperandStack;
class bdPagingToken;
union XAssetPoolEntry<MaterialTechniqueSet>;
union entryInternalData;
struct D2D_RECT_U;
struct pc_token_s;
struct expressionEntry;
struct ID2D1Mesh;
struct ExpressionAllocState;
struct bb_msg_t;
struct ucmd_t;
struct DefinitionMap;
struct IDirectSound8;
struct bb_highwater_t;
union XAssetPoolEntry<AddonMapEnts>;
struct BBMsgHeader;
class bdBase64;
struct BBThrottle;
struct _WIN32_FIND_DATAA;
class bdLink;
struct _POINTL;
struct audioSample_t;
struct _devicemodeA;
struct _CRYPT_ATTRIBUTES;
struct GenericAabbTree;
struct GenericAabbTreeOptions;
union XAssetPoolEntry<SkinnedVertsDef>;
struct stringDef_s;
struct _CTL_ENTRY;
struct conditionStack_t;
struct _RGNDATAHEADER;
struct _RGNDATA;
struct nestingCounts_t;
struct loadAssets_t;
class bdLinkedList<bdReference<bdDataChunk> >;
class bdQueue<bdReference<bdDataChunk> >;
class bdUnreliableReceiveWindow;
struct IDWriteFontFamily;
struct KeywordHashEntry<menuDef_t,1024,128>;
struct FxFlagDef;
struct KeywordHashEntry<itemDef_s,1024,378>;
struct IDWriteFontFileStream;
struct std::pair<FxMarkTri *,FxMarkTri *>;
struct compression_state;
struct commandDef_t;
struct EdgeInfo;
class bdReference<bdMessage>;
class bdDataChunk;
struct DWRITE_GLYPH_METRICS;
struct FxAddMarkCmd;
struct png_text_struct;
struct scrollInfo_s;
struct MenuNameHash_t;
struct png_sPLT_entry_struct;
struct ScopedScrPlaceViewStack;
struct FLAC__StreamMetadata_SeekPoint;
struct ScreenPlacementStack;
struct D3DX11_IMAGE_INFO;
struct FxElem;
struct FxElemShared;
struct FxElemContainer;
struct FxPool<FxElem,FxElemContainer>;
struct FxPool<FxTrail,FxTrail>;
struct FxTrailElem;
struct FxPool<FxTrailElem,FxTrailElem>;
struct FxVisState;
struct FxUniqueHandleDb::Node;
struct FxUniqueHandleDb;
struct FxPlaySoundAction;
union FxPPUAction;
struct FxSystemBuffers;
class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >;
struct DiskPrimaryLight;
struct std::iterator<std::random_access_iterator_tag,char,int,char *,char &>;
struct BspLump;
struct OldBspHeader;
struct std::random_access_iterator_tag;
struct _NVVIOCAPS;
class std::reverse_iterator<char *>;
struct D3DXCOLOR;
struct _NV_DX_VIDEO_STEREO_INFO;
class bdLinkedList<bdEndpoint>;
struct FLAC__EntropyCodingMethod_PartitionedRice;
struct nestingStackElem_t;
struct GfxUI3DStack;
struct SpuDmaBuffer;
struct ScopedUI3DStack;
struct worldContents_s;
struct FLAC__Subframe_Constant;
struct nestingStack_t;
union XAssetPoolEntry<RawFile>;
struct GfxQuad;
struct IDWriteFont;
struct playlistEntry;
struct D3D10_TEX2DMS_DSV;
struct FxMarkTri;
struct playlistGametype;
struct D3D10_TEX1D_ARRAY_RTV;
struct playlistInfo;
struct categoryInfo;
union XAssetPoolEntry<LeaderboardDef>;
struct playlistMapList;
class bdLinkedList<bdSAckChunk::bdGapAckBlock>;
struct D3D10_TEX1D_ARRAY_SRV;
struct motd_t;
struct _D3DSURFACE_DESC;
struct D3D10_MAPPED_TEXTURE2D;
struct motdKeyHandler_t;
struct GeoPoint;
struct uiClientState_s;
struct FxElemField;
struct GfxQuadVertex;
class EditPlaylistPopulationTexture;
union XAssetPoolEntry<ddlDef_t>;
struct keyBoardUtitlity;
struct IWICPalette;
struct votingItem_t;
struct voting_t;
struct dwTwitchIsRegisteredTask;
struct dwTwitchGetAccountTask;
struct dwTwitchRegisterTask;
struct playerTwitchOperations;
struct votingHandler_t;
struct voteSortItem_t;
class bdLinkedList<bdUnicastConnection::bdControlChunkStore>::Node;
struct EmblemFilterState;
struct _D3DXFONT_DESCW;
struct emblemDownloadData_t;
struct std::_Pair_base<DynEntSortStruct *,DynEntSortStruct *>;
struct codtvFilterMapping_t;
struct LeagueFriendsInfo;
class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >,std::_Iterator_base0>;
struct codtvDWContent_t;
struct codtvTypeMapping_t;
struct D2D1_ROUNDED_RECT;
struct FxPriorityInfo;
struct codtvDWSourceMapping_t;
struct FxEditorElemAtlas;
struct FxEditorTrailDef;
struct FxEditorElemDef;
struct codtvVideoContent_t;
struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >;
class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0>;
union codtvContent_u;
struct codtvFolder_t;
class bdLinkedList<bdReference<bdMessage> >::Node;
struct _D3DPRESENT_PARAMETERS_;
class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > > >;
struct codtvDWCategoryMapping_t;
struct $_s__RTTIBaseClassArray$_extraBytes_16;
struct D3D10_SUBRESOURCE_DATA;
struct FxGraph3D;
class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >;
struct png_sPLT_struct;
class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t> >;
class std::locale;
class std::_Yarn<char>;
class std::locale::_Locimp;
struct D2D_POINT_2F;
struct D2D1_BEZIER_SEGMENT;
class std::locale::facet;
class std::locale::id;
struct _Ctypevec;
class std::ctype<char>;
struct DWRITE_GLYPH_OFFSET;
class std::_Lockit;
class std::_Locinfo;
class std::ctype_byname<char>;
class std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> >;
class std::num_get<unsigned short,std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > >;
class std::basic_istream<unsigned short,std::char_traits<unsigned short> >;
struct IDWriteFontFace;
struct FxSpriteElemDrawResource;
struct FxCloudElemDrawResource;
struct FxTrailElemDrawResource;
union FxElemDrawSource;
struct FxDrawState;
class std::basic_istream<unsigned short,std::char_traits<unsigned short> >::sentry;
struct youTube_t;
class std::basic_istream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base;
struct dwYouTubeRegistrationTask_t;
class std::hash<std::error_code>;
class std::error_code;
struct dwVoteHistoryTask_t;
class std::error_category;
struct std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base0>;
class std::ostreambuf_iterator<char,std::char_traits<char> >;
struct $_TypeDescriptor$_extraBytes_25;
class std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >;
class std::basic_ostream<char,std::char_traits<char> >;
class std::basic_ostream<char,std::char_traits<char> >::sentry;
struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >;
class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >;
struct mz_zip_array;
struct mz_zip_internal_state_tag;
class std::bad_cast;
struct ID3D10View;
class std::system_error;
struct ID3D10DepthStencilView;
class std::codecvt_base;
struct FLAC__EntropyCodingMethod_PartitionedRiceContents;
struct std::_Bool_struct;
class std::basic_ios<char,std::char_traits<char> >;
struct FxPostLight;
struct FxPostLightInfo;
class std::basic_streambuf<char,std::char_traits<char> >;
struct FLAC__Subframe_Verbatim;
struct EncState;
class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >;
struct locTraceWork_t;
class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >;
struct ShowCollisionBrushPt;
class std::istreambuf_iterator<char,std::char_traits<char> >;
struct EffectElemCountInfo;
class std::num_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >;
struct _D3DXMATRIXA16;
class std::basic_istream<char,std::char_traits<char> >;
struct FLAC__EntropyCodingMethod;
struct FLAC__Subframe_Fixed;
struct _D3DX10_TEXTURE_LOAD_INFO;
class std::basic_istream<char,std::char_traits<char> >::sentry;
class std::basic_istream<char,std::char_traits<char> >::_Sentry_base;
class Allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node,mapStringEntriesName_t>;
class Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>;
class std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >;
struct D2D1_ELLIPSE;
struct FxMarkAlphaFade;
struct FxMark;
union FxTriGroupPool;
struct FxMarksSystem;
class std::_Iosb<int>;
struct png_xy;
struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > > >;
struct _Cvtvec;
class std::codecvt<unsigned short,char,int>;
struct png_color_8_struct;
class bdLinkedList<bdReference<bdConnection> >::Node;
class std::error_condition;
struct D2D1_DRAWING_STATE_DESCRIPTION;
class std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >;
struct MapProfileEntry;
class std::ctype<wchar_t>;
struct ID3D10Resource;
struct dwYouTubeUploadTask_t;
struct dwYouTubeIsRegisteredTask_t;
struct dwYouTubeGetTokenTask_t;
struct controllerYouTubeTasks_t;
struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >;
class std::hash<std::error_condition>;
struct png_dsort_struct;
struct mapLoadProfile_t;
class std::ctype<unsigned short>;
struct CIN_CALLBACK_INFO;
class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >;
class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >;
class std::basic_ios<wchar_t,std::char_traits<wchar_t> >;
class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >;
struct ID3D10DepthStencilState;
struct $_TypeDescriptor$_extraBytes_52;
struct D3D10_TEX1D_DSV;
struct D3D10_TEX1D_ARRAY_DSV;
struct D3D10_TEX2D_DSV;
struct D3D10_TEX2D_ARRAY_DSV;
struct D3D10_TEX2DMS_ARRAY_DSV;
struct D3D10_DEPTH_STENCIL_VIEW_DESC;
class std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> >;
struct tinfl_huff_table;
class dwLobbyEventHandler;
struct FLAC__StreamMetadata_Padding;
struct NV_GPU_CONNECTOR_DATA;
struct NV_GPU_CONNECTOR_INFO;
struct DiskPrimaryLight_Version55;
class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry;
class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base;
struct FLAC__StreamMetadata_CueSheet_Index;
struct std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base0>;
struct DevGuiInput;
struct worldTree_s;
struct worldSector_s;
struct FxSprite;
struct FxSpriteInfo;
class std::fpos<int>;
class bdReference<bdStreamingTask>;
struct ID3D10ShaderResourceView;
class bdContentStatus;
struct FLAC__FrameFooter;
class std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >;
struct D3DXQUATERNION;
struct _IMAGE_DOS_HEADER;
class bdPS3AuthInfo;
struct cm_world_t;
struct std::unary_function<std::error_condition,unsigned int>;
struct NV_VIRTUALMODE_INFO;
class std::codecvt<wchar_t,char,int>;
class std::basic_ios<unsigned short,std::char_traits<unsigned short> >;
class bdLinkedList<bdReference<bdChunk> >;
struct NVAPI_VIDSURF_ENCRYPT_CTRL_SET_IV;
struct StreamDelayInfo;
class std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >;
struct NV_VIRTUALMODE_DATA;
class std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >;
class bdFriendAndRichPresence;
struct DWRITE_TEXT_RANGE;
class bdFriendProposal;
struct _D3DLOCKED_BOX;
class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry;
class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base;
struct FLAC__Subframe_LPC;
struct FLAC__Subframe;
struct dplane_t;
struct FxColor4b;
class std::_Timevec;
struct bdChunk::bdChunkData;
class bdChunk;
struct DiskCollAabbTree;
struct std::unary_function<std::error_code,unsigned int>;
struct std::ctype_base;
struct dnode_t;
class std::ios_base;
struct std::ios_base::_Iosarray;
struct D3DXVECTOR4;
struct std::ios_base::_Fnarray;
struct DiskCollPartition;
class CStringEdPackage;
struct MapProfileHotSpot;
class mapFlagMasksName_t;
struct std::_Pair_base<MapProfileHotSpot *,MapProfileHotSpot *>;
class EXT_Link<LocalizeEntry>;
class std::ios_base::Init;
class bdNATTraversalPacket;
class std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> >;
class std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > >;
union XAssetPoolEntry<SndDriverGlobals>;
struct XAssetPool<WeaponCamo,128>;
class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::sentry;
class phys_list_condition_functor_has_no_constraints;
class bdQueue<unsigned int>;
struct $_TypeDescriptor$_extraBytes_50;
struct _Collvec;
class bdTagsArray;
class LocalizeName;
class mapStringEntriesName_t;
union XAssetPoolEntry<SndBank>;
struct XAssetPool<SndBank,32>;
struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >;
struct D2D_SIZE_F;
struct D2D1_ARC_SEGMENT;
struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >,bool>;
class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >;
union XAssetPoolEntry<GfxLightDef>;
union XAssetPoolEntry<MapEnts>;
struct XAssetPool<MapEnts,2>;
struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node;
class bdAuthUserToServicePlainText;
struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::_Iterator_base0>;
struct MessageWindow;
struct MessageLine;
struct Message;
struct MessageBuffer;
struct Console;
struct SpeexBits;
struct std::binary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool>;
struct StickToCodeMap;
class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0>::value_compare;
struct XAssetPool<Qdb,4>;
struct KeyState;
class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >;
class bdAuthDeleteAccountCypherText;
class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > > >;
union XAssetPoolEntry<PhysConstraints>;
struct XAssetPool<Slug,5>;
struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >;
struct ID2D1DrawingStateBlock;
class compare_spawnpoint_score_sort;
union XAssetPoolEntry<WeaponVariantDef>;
struct XAssetPool<DestructibleDef,64>;
struct png_time_struct;
struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > > >;
class phys_free_list<user_rigid_body>::iterator;
class std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >;
struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >,bool>;
struct DEMO_SpawnBadSpawn;
union XAssetPoolEntry<WeaponAttachmentUnique>;
struct XAssetPool<WeaponAttachment,128>;
struct png_XYZ;
class LocalizeStringVectorName;
struct FxCurve;
struct Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node>;
struct XAssetPool<SndPatch,1>;
struct Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>::rebind<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >;
union XAssetPoolEntry<MemoryBlock>;
class LocalizeStringSetName;
class phys_link_list<pulse_sum_normal>::iterator;
class EXT_List<LocalizeEntry>;
struct FxCamera;
struct FxDrawSurfInfo;
struct FxSystem;
struct sd_voice_mix_temp_state;
struct std::_Pair_base<XZoneInfo *,XZoneInfo *>;
struct FLAC__StreamMetadata_SeekTable;
class bdLinkedList<bdEndpoint>::Node;
struct TeamLookup;
struct FLAC__StreamMetadata_StreamInfo;
struct saveField_t;
struct FLAC__StreamMetadata_CueSheet_Track;
struct IDirect3DQuery9;
class phys_free_list<rigid_body_constraint_ragdoll>::iterator;
struct FLAC__FrameHeader;
struct FLAC__StreamMetadata_Picture;
struct FLAC__StreamMetadata_Application;
union XAssetPoolEntry<MenuList>;
struct FLAC__StreamMetadata_VorbisComment_Entry;
union XAssetPoolEntry<Font_s>;
struct XAssetPool<Font_s,16>;
struct FLAC__StreamMetadata_CueSheet;
class bdUserGroupNumMembers;
struct FLAC__StreamMetadata_VorbisComment;
struct FLAC__StreamMetadata_Unknown;
struct std::_Pair_base<SpawnPoint *,SpawnPoint *>;
union XAssetPoolEntry<LocalizeEntry>;
struct XAssetPool<menuDef_t,450>;
struct FLAC__StreamMetadata;
struct FLAC__Frame;
struct sightpointtrace_t;
union XAssetPoolEntry<EmblemSet>;
class phys_simple_link_list<pulse_sum_constraint_solver::user_rigid_body_restore_info>;
struct ltc_prng_descriptor;
struct edge;
struct BBBulletInfo;
union XAssetPoolEntry<KeyValuePairs>;
struct dwUCDUpdateUserDetailsTask;
struct D2D1_BRUSH_PROPERTIES;
struct $_TypeDescriptor$_extraBytes_12;
struct ltc_math_descriptor;
struct D2D1_STROKE_STYLE_PROPERTIES;
class bdMarketplaceCurrency;
class bdAuthCreateAccountPlainText;
struct CacheLbTaskData;
struct client_fields_s;
struct IDirect3DVolumeTexture9;
class axis_aligned_sweep_and_prune::axis_element;
struct clientstats_t;
struct ScriptStringList;
struct XAssetList;
struct DynEntityCollTree;
struct DynEntityCollSector;
struct DynEntityCollWorld;
struct IDirect3DVolume9;
struct DynEntityConstraintCreateParams;
class PublicProfileInfo;
class bdProfileInfo;
struct _D3DRECT;
union XAssetPoolEntry<FontIcon>;
struct XAssetPool<FontIcon,1>;
struct XAssetPool<LocalizeEntry,1>;
class bdAuthResetAccountPlainText;
struct D3D10_BUFFER_SRV;
struct D3D10_TEX1D_SRV;
struct D3D10_TEX2D_SRV;
struct D3D10_TEX2D_ARRAY_SRV;
struct D3D10_TEX2DMS_SRV;
struct D3D10_TEX2DMS_ARRAY_SRV;
struct D3D10_TEX3D_SRV;
struct D3D10_TEXCUBE_SRV;
struct D3D10_SHADER_RESOURCE_VIEW_DESC;
class bdAuthResetAccountCypherText;
struct XZoneName;
struct XAssetPool<WeaponAttachment,1>;
class bdReceiveThread;
class bdUserGroupMembershipInfo;
struct XAssetPool<Slug,1>;
class bdMarketplaceInventory;
class bdCore;
class bdAuthMigrateAccountPlainText;
class bdEntityIDKeyArchiveMap;
struct ltc_hash_descriptor;
struct DWRITE_HIT_TEST_METRICS;
struct md5_state;
union Hash_state;
class bdInitChunk;
struct std::_Pair_base<FxMarkTri *,FxMarkTri *>;
struct GfxWorldVertex;
class bdHeartbeatChunk;
struct png_unknown_chunk_t;
struct MarkClipPlaneSet;
struct MarkInfoCollidedDObj;
struct MarkInfoCollidedBModel;
struct MarkInfo;
struct ClientSnapshotData;
struct snapshotEntityNumbers_t;
struct _NV_DISPLAY_FEATURE;
struct Block;
struct MigrationGlobals;
union statValue_t;
struct statAddValue_t;
struct _D3DVECTOR;
struct AimTweakables;
struct AimScreenTarget;
struct AimAssistGlobals;
struct NVAPI_FLIP_CHAIN_CALLBACK_PARAMS;
struct FxSpawnEffectCmd;
struct game_hudelem_field_t;
class bdReference<bdSAckChunk>;
struct _NVVIOGAMMARAMP8;
struct _NVVIOGAMMARAMP10;
struct bot_threat_t;
struct SaveGame;
struct _D3DBOX;
struct _NVVIOSTREAM;
struct _NVVIOINPUTCONFIG;
struct _NVVIOOUTPUTREGION;
struct _NVVIOCOLORCONVERSION;
struct _NVVIOGAMMACORRECTION;
struct _NVVIOSYNCDELAY;
struct _NVVIOCOMPOSITERANGE;
struct _NVVIOOUTPUTCONFIG_V3;
struct reservedslot_t;
class bdReliableReceiveWindow;
struct perfVal_t;
struct _WSAPROTOCOL_INFOA;
struct ConnectionLog;
class bdPlatformStreamSocket;
struct _CMSG_SIGNER_INFO;
struct _CRYPT_ATTRIBUTE;
struct BreakablePiece;
struct _CERT_EXTENSION;
struct _CTL_CONTEXT;
struct D3D10_BOX;
struct FxEditorEffectDef;
struct D2D1_BITMAP_PROPERTIES;
struct _CERT_CONTEXT;
struct _WINTRUST_DATA;
struct WINTRUST_FILE_INFO_;
class bdSAckChunk::bdGapAckBlock;
class bdLinkedList<bdSAckChunk::bdGapAckBlock>::Node;
struct WINTRUST_CATALOG_INFO_;
struct IDWriteFontFileLoader;
struct WINTRUST_CERT_INFO_;
struct FxActiveMarkSurf;
struct tlFileBuf;
class bdReference<bdInitChunk>;
struct ID2D1StrokeStyle;
struct jqWorker;
struct FxTrailSegmentDrawState;
struct _jqWorker;
struct ID3D10Counter;
struct huff_t;
struct huffman_t;
struct PathItem;
struct areaParms_t;
struct ClumpFile;
struct _D3DMATRIX;
struct EffectElementDraw;
struct winding_t;
struct stream_fh;
class bdLinkedList<bdUnicastConnection::bdControlChunkStore>;
struct png_color_struct;
struct PathRoot;
struct GamePadCheat;
struct mapping_data_t;
struct D3D10_SAMPLER_DESC;
struct PacketQueue;
struct tinfl_decompressor_tag;
struct netFieldOrderInfo_t;
union _lightLogicParam_t;
struct lightLogicParams_t;
struct _lightParams_t;
struct msg_patch_t;
struct _lightModel_t;
struct _mixerLight_t;
struct meminfo_t;
struct FxGenerateVertsCmd;
struct TempMemInfo;
class bitarray<58>;
struct SpeexSBMode;
struct IWICBitmap;
struct zombieBoxWeapon_t;
struct gdt_remote_cmd_handler;
struct GfxSkinnedXModelSurfs;
struct GfxSceneModel;
struct GfxSceneDpvs;
struct _D3DLOCKED_RECT;
struct GfxSceneEntityCull;
struct GfxSceneEntity;
struct GfxSceneGlassBrush;
struct SceneModelBatchCmd;
struct GfxScene;
class bdLinkedList<bdReference<bdChunk> >::Node;
struct ID2D1SolidColorBrush;
struct FxDrawTrailResource;
struct DiskBrushModel;
struct D3DXMATRIX;
struct FxDrawTrailResourceRequired;
struct OccQueryDebugEntry;
struct DiskLeaf_Version14;
class bdBytePacker;
struct FxInsertSortElem;
struct std::pair<MapProfileHotSpot *,MapProfileHotSpot *>;
struct _D3DX10_FONT_DESCW;
struct DvarDumpInfo;
struct std::pair<unsigned int *,unsigned int *>;
struct KnownContentPackData;
struct MINIZPNGAllocData;
struct SlowMotionCommon;
struct NV_MOSAIC_TOPOLOGY;
struct tdefl_sym_freq;
struct AimTarget;
struct MINIZPNGAllocSegmentHeader;
struct MINIZAllocData;
struct tdefl_compressor;
union XAssetPoolEntry<GfxImage>;
struct NV_U56;
struct token_s;
struct tdefl_output_buffer;
struct mz_zip_archive;
struct _NV_MONITOR_CAPS_VSDB;
struct _NV_MONITOR_CAPS_VCDB;
struct _NV_MONITOR_CAPABILITIES;
struct RBWaypoint;
struct NV_LID_DOCK_PARAMS;
class bdLoopbackConnection;
struct BattleChatterParams;
struct NV_AUDIO_INFOFRAME;
class bdReference<bdInitAckChunk>;
struct NV_PCLK_RANGE;
struct mz_internal_state;
struct mz_stream_s;
struct ID3D10RenderTargetView;
struct NVDX_ObjectHandle__;
struct BspHeader;
struct CommonAddr;
struct CmdText;
struct dynent_field_s;
struct staticmodeltrace_t;
struct leafList2_t;
struct LayeredTechniqueSetName;
struct dbrush_t;
struct NV_MOSAIC_DISPLAY_DETAILS;
struct dmaterial_t;
struct dbrushside_t;
struct DiskLeaf;
struct zombieWeaponStatHashMap_t;
struct dwUCDUpdateMarketingOptInTask;
struct png_row_info_struct;
struct png_info_def;
struct dwGetUserInfoTask;
struct XAssetPool<FootstepTableDef,32>;
union XAssetPoolEntry<XAnimParts>;
struct XAssetPool<XAnimParts,5200>;
struct png_struct_def;
struct NV_SLI_GROUP;
struct XAssetPool<FootstepFXTableDef,4>;
struct PlayerDetails;
union XAssetPoolEntry<XModel>;
struct XAssetPool<XModel,1400>;
struct EffectFile;
struct devguiGlob_t;
struct ECRYPT_ctx;
struct DynEntityCreateParams;
struct DynEnt_BurnData;
struct XAssetPool<PhysPreset,65>;
struct _NVVIOVIDEOMODE;
struct _NVVIOSIGNALFORMATDETAIL;
struct NV_GPU_THERMAL_SETTINGS_V2;
struct CG_PerfData;
struct CG_PerfInfo;
struct XAssetPool<PhysConstraints,64>;
struct RumbleDevguiGraphInfo;
struct RumbleGraph;
struct XAssetPool<WeaponVariantDef,256>;
struct NV_GPU_ECC_STATUS_INFO;
struct XAssetPool<WeaponAttachmentUnique,2048>;
struct ytDWKeys_t;
struct XAssetPool<ZBarrierDef,16>;
union XAssetPoolEntry<Material>;
struct XAssetPool<Material,4992>;
struct XAssetPool<MaterialTechniqueSet,2048>;
struct liveVote_t;
struct CompassDogs;
struct XAssetPool<GfxImage,5312>;
struct RopeRenderInfo;
struct dwVoteSubmitTask_t;
struct liveVoteTasks_t;
struct XAssetPool<AddonMapEnts,1>;
union XAssetPoolEntry<TracerDef>;
struct XAssetPool<TracerDef,50>;
struct twitch_s;
struct XAssetPool<SkinnedVertsDef,1>;
struct hostDelegateDetails_t;
struct XAssetPool<XModelPieces,64>;
struct hostDelegate_t;
struct matchClientScoreData_t;
struct listColumnInfo_t;
struct matchScoreBoardData_t;
struct MetPlayerInfo;
struct csinfo_t;
struct serverStatusInfoResponse_t;
struct GfxConfiguration;
struct LeagueDivisionIcon;
struct LeagueDivision;
struct LeagueTeam;
struct FXScopedCooperativeIteration;
class bdLeagueAndSubdivisionResult;
struct GfxPosFP16TexVertex;
class bdArray<bdReference<bdCommonAddr> >;
struct NV_INFOFRAME_PROPERTY;
class bdQueue<bdEndpoint>;
struct Leaderboard;
struct LbGlob;
struct FxMarkDObjUpdateContext;
struct lbTaskContext_t;
struct challengeHashLookup_t;
struct challengeTableInfo_t;
struct D3D10_TEX3D_RTV;
struct lbdef_t;
struct dediUserData_t;
struct SpeexMode;
struct WeaponOptions::CamoLookup;
union TaggedIndex;
struct FxSystemShared;
struct FxSystemContainer;
struct FxGraph1D;
struct SaveMemoryGlob;
struct std::_Pair_base<useList_t *,useList_t *>;
struct _NVVIOCHANNELSTATUS;
struct _NVVIOINPUTSTATUS;
struct _NVVIOOUTPUTSTATUS;
class bdCryptoUtils;
struct antilagActorStore_t;
struct antilagVehicleStore_t;
struct vehicle_path_node_link_t;
struct vn_field_t;
struct FxMarksCmd;
struct NV_HCLONE_TOPOLOGY_V1;
struct VehicleLocalPhysics;
struct kbutton_t;
struct VehiclePhysicsBackup;
struct ipFilter_s;
struct SpawnPoint;
struct SpawnClientData;
struct SpawnSystem_t;
struct XAssetPool<StringTable,1>;
struct XAssetPool<ddlDef_t,1>;
struct std::pair<int *,int *>;
struct FxElemBits;
struct ClientTriggerAabbNode;
struct GfxPosColorVertex;
struct std::_Pair_base<int *,int *>;
struct DEMO_SpawnInfluencerInstance;
struct SpawnFuncEntry;
struct _NV_BOARD_INFO;
struct game_hudelem_s;
struct XAssetPool<TracerDef,1>;
struct scoreInfoTable_t;
struct std::_Pair_base<DBReorderAssetEntry *,DBReorderAssetEntry *>;
class bdFacebookProfilePicture;
struct NV_INFOFRAME_AUDIO;
struct NV_GPU_CLIENT_POWER_POLICIES_POLICY_STATUS_V1;
class bdGroupInfo;
struct NV_GPU_CLIENT_POWER_POLICIES_STATUS_V1;
struct rankData_t;
struct std::_Pair_base<bot_threat_t *,bot_threat_t *>;
struct PrintChannel;
struct FxElemPreVisualState;
struct FxTrailDrawState;
struct EntHandleList;
struct tsVote_t;
struct tsTeam_t;
struct FxProfileEntry;
struct Avoid;
struct FxCmd;
struct NV_DX_CREATE_VIDEO_PARAMS2;
struct NV_GPU_FLAT_PANEL_INFO;
struct NV_3D_SETTING_RANGE;
struct NV_DISPLAY_PATH;
struct NV_DISPLAY_PATH_INFO;
struct ConDrawInputGlob;
struct ID2D1DCRenderTarget;
struct IDirect3DPixelShader9;
struct NV_DISPLAY_DVC_INFO_EX;
struct EffectDefGetter;
struct ElemDefGetter;
struct WeaponAttachmentUniqueFull;
struct D3D10_TEX2DMS_RTV;
struct FxUpdateElem;
struct NV_HDMI_STEREO_MODE;
struct D3D10_COUNTER_DESC;
struct FxBeamInfo;
struct NV_GPU_PERF_PSTATES_INFO_V2;
struct FxElemRenderVisualState;
struct FxElemRenderState;
struct FxSmpDrawBuffer;
struct ID3D10Texture1D;
struct D3D10_DEPTH_STENCILOP_DESC;
struct D3D10_DEPTH_STENCIL_DESC;
struct PriorityDebugEntry;
struct NVVIOTOPOLOGYTARGET;
struct _NV_VIO_TOPOLOGY;
struct MarkGenContext;
struct NvEventHandle__;
struct visField_t;
struct NV_HDCP_CN;
struct NvMonitorHandle__;
struct D3DXVECTOR3;
struct NvDRSSessionHandle__;
struct ID3D10Device;
struct AnimStateDefProperty;
struct XAssetPool<GfxLightDef,1>;
struct FxDrawSpriteGeoCmd;
struct NV_GPU_GPIO_PIN_DATA;
struct CompassZombie;
struct std::pair<DynEntSortStruct *,DynEntSortStruct *>;
struct RumbleInfo;
struct NV_DRIVER_MEMORY_INFO;
struct _NVAPI_D3D9_DMA_MAP_PARAMS;
struct _NVAPI_D3D9_DMA_EVENT_PARAMS;
struct _NVAPI_D3D9_DMA_COLOR_MATRIX_PARAMS;
struct _NVAPI_D3D9_DMA_PARAMS;
struct _NV_GAMUT_METADATA_RANGE;
struct _NV_GAMUT_METADATA_VERTICES;
struct _NV_GAMUT_METADATA;
struct _NVAPI_STEREO_HANDSHAKE_RESPONSE_PARAMS;
struct matchSummaryWeaponStatHash_t;
struct PartyInfo;
struct dwGetUCDRegistrationTask;
struct _NVAPI_STEREO_HANDSHAKE_CHALLENGE_PARAMS;
struct _NVAPI_STEREO_HANDSHAKE_PARAMS;
struct PlayerRank;
struct _NVAPI_VIDEO_FEATURE_DETAILS;
class phys_list_condition_functor_has_user_rigid_body;
struct broad_phase_prolog_task_input;
class bdMessage;
class phys_free_list<broad_phase_collision_pair>::iterator;
struct rankTierData_t;
struct XBlock;
struct NV_DISPLAY_PORT_CONFIG;
struct _NVAPI_SET_VIDEO_STATE_COMPONENT;
struct peerResults_t;
struct tempHostResults_t;
struct NV_COPROC_FLAGS_EX;
struct GfxExtraCamParms;
struct XAssetPool<GfxLightDef,32>;
struct XAssetPool<MenuList,164>;
struct CollisionBorder;
struct NvVioHandle__;
struct XAssetPool<LocalizeEntry,14336>;
struct XAssetPool<SndDriverGlobals,1>;
struct std::pair<XZoneInfo *,XZoneInfo *>;
struct ID2D1EllipseGeometry;
struct XAssetPool<EmblemSet,1>;
struct XAssetPool<RawFile,1024>;
struct NV_INFOFRAME_VIDEO;
struct XAssetPool<LeaderboardDef,128>;
struct IDirect3DIndexBuffer9;
struct XAssetPool<ddlDef_t,24>;
struct _NV_INFOFRAME_STATE;
struct XAssetPool<EmblemSet,4>;
union SHA1_Transform::__l2::CHAR64LONG16;
struct XAssetPool<KeyValuePairs,64>;
struct _NVAPI_VIDEO_FEATURE_DESCRIPTOR;
struct _NVAPI_VID_FEATURE_STRINGS;
struct _NVAPI_DX_VIDEO_FEATURE_DETAILS;
struct XAssetPool<MemoryBlock,16>;
struct XAssetPool<FxEffectDef,1>;
struct XAssetPool<Material,1>;
struct XAssetPool<DestructibleDef,1>;
class phys_free_list<rigid_body_constraint_upright>::iterator;
struct std::pair<DBReorderAssetEntry *,DBReorderAssetEntry *>;
class phys_free_list<rigid_body_constraint_point>::T_internal;
class bdLinkedList<unsigned int>::Node;
struct XAssetPool<FxImpactTable,1>;
class phys_free_list<rigid_body_constraint_upright>::T_internal;
struct XAssetPool<MemoryBlock,1>;
struct NV_DISPLAY_TV_OUTPUT_INFO;
class bdMsgGroupSubscriptionFailure;
struct ID2D1GradientStopCollection;
struct XAssetPool<XModel,1>;
struct NV_HDCP_BSTATUS;
struct ID2D1TessellationSink;
struct XAssetPool<MenuList,1>;
struct NV_U40;
struct _HeapManager::Block;
struct XAssetEntry;
union XAssetEntryPoolEntry;
class bdArbitratedStatsInfo;
class tlPcQPF;
struct XAssetPool<PhysConstraints,1>;
struct IWICBitmapSource;
struct XAssetPool<KeyValuePairs,1>;
struct XAssetPool<Font_s,1>;
struct NV_VIEW_TARGET_INFO;
class bdUnreliableSendWindow;
struct XAssetPool<FootstepFXTableDef,1>;
struct XAssetPool<SndBank,1>;
struct PerMapMaterialTable;
struct _D3DTRIPATCH_INFO;
struct XAssetPool<ZBarrierDef,1>;
struct _D3DMATERIAL9;
struct XZoneInfoInternal;
struct XAssetPool<WeaponAttachmentUnique,1>;
struct NV_GPU_CLIENT_POWER_POLICIES_INFO_V1;
struct XAssetPool<MaterialTechniqueSet,1>;
class bdLinkedList<bdReference<bdConnection> >;
class bdQueue<bdReference<bdConnection> >;
struct NV_GET_PCLK;
struct XAssetPool<RawFile,1>;
class bdSendThread;
struct XAssetPool<LeaderboardDef,1>;
class phys_free_list<rigid_body_constraint_hinge>::T_internal;
struct XAssetPool<VehicleDef,1>;
class phys_free_list<rigid_body_constraint_distance>::T_internal;
struct MtlStateMapBitGroup;
struct XAssetPool<Qdb,1>;
struct ID3D10Predicate;
struct XAssetPool<FootstepTableDef,1>;
struct BspSurfRegion;
struct XAssetPool<WeaponCamo,1>;
struct D3D10_TEX2DMS_ARRAY_RTV;
struct XAssetPool<MapEnts,1>;
struct ID3D10Buffer;
struct XAssetPool<XModelPieces,1>;
struct XZone;
struct XAssetPool<WeaponVariantDef,1>;
class phys_link_list<pulse_sum_wheel>::iterator;
struct XAssetPool<XAnimParts,1>;
struct XAssetPool<ScriptParseTree,1>;
struct XAssetPool<GfxImage,1>;
struct D2D1_TRIANGLE;
class bdFacebookUserAttribute;
class phys_link_list<phys_collision_pair>::iterator;
struct NV_GPU_PERF_PSTATES20_PARAM_DELTA;
struct NV_GPU_PSTATE20_BASE_VOLTAGE_ENTRY_V1;
struct ColVert;
class phys_free_list<rigid_body_constraint_ragdoll>::T_internal;
struct nrm3_10_11_11;
struct _D3DRECTPATCH_INFO;
union PackedLightingCoords;
struct FxInt16Range;
struct GfxPackedVertexQuant;
class bdSanitizedString;
struct ShaderStats;
struct jqProfInfo;
struct dec4;
struct NV_GPU_COOLER_POLICY_TABLE;
struct udec4;
struct FxInt8Range;
struct XSurfaceSection;
struct GfxReflectionProbeStreamPart;
struct GfxPosTexVertex;
struct jqProfThread;
struct ClientTriggers;
struct DBDecompressCmd_t;
struct DB_LOAD_STREAM;
struct DB_LoadData;
struct ID3D10PixelShader;
struct mp_int;
class phys_simple_link_list<pulse_sum_constraint_solver::user_rigid_body_restore_info>::iterator;
struct ID3D10Texture3D;
struct XFile;
class axis_aligned_sweep_and_prune::active_pair;
struct SHA1_CTX;
struct ID3D10InputLayout;
class phys_inplace_avl_tree<user_rigid_body *,pulse_sum_constraint_solver::temp_user_rigid_body,pulse_sum_constraint_solver::temp_user_rigid_body::avl_tree_accessor>;
struct PartyProber;
class phys_simple_link_list<pulse_sum_constraint_solver::temp_user_rigid_body>;
struct ErrorMap;
struct _D3DRASTER_STATUS;
struct std::pair<PartyInfo *,PartyInfo *>;
struct _stat64;
struct NV_VIDEO_INFOFRAME;
struct IDWriteTextLayout;
struct ProbeSorter;
struct ID2D1Factory;
class bdUnlockContentInfoWithSubtype;
struct PartyMessages;
struct D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES;
struct migrateClientData_t;
struct NV_GPU_TOPOLOGY_V2;
struct NV_GPU_TOPOLOGIES;
struct migrateHostData_t;
struct CharPair;
struct NormKeyVals;
struct ID3DXFont;
struct Hmac_state;
struct Assignment;
struct ID2D1GeometryGroup;
struct JoinPartyResponse;
class bdMarketplaceProductItem;
class bdMarketplaceProduct;
struct PotentialTeam;
struct s_mutePlyerData;
struct PartyField;
struct IDirect3DTexture9;
struct PrintChannelGlob;
struct _IMAGE_FILE_HEADER;
struct _NVAPI_FRAME_RATE_NOTIFY_INFO;
struct R_AddDrawCallsCmd;
struct D3D10_MAPPED_TEXTURE3D;
struct ID2D1RoundedRectangleGeometry;
class bdCommerceItem;
struct NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_STATUS_V1;
class <CrtImplementationDetails>::NativeDll;
struct ID2D1HwndRenderTarget;
struct ClientPing;
struct _D3DLIGHT9;
class bdCommerceCurrency;
struct _NVAPI_RENDERED_CURSOR_BITMAP_DATA;
struct ping_t;
struct IDWriteTextRenderer;
struct NV_GPU_DYNAMIC_PSTATES_INFO_EX;
struct PlayerKeyState;
struct keyNumToNameMapping_t;
struct IDirect3DVertexShader9;
struct GamepadVirtualAxisMapping;
struct GpadAxesGlob;
struct NV_3D_APP_INFO_V2;
struct NV_SET_PCLK;
struct DispLocals;
class phys_free_list<rigid_body_constraint_point>::iterator;
struct ID2D1Bitmap;
class bdMarketplaceEntitlement;
struct TypeDescriptor;
struct TempImage;
struct NV_GPU_PSTATE20_CLOCK_ENTRY_V1;
struct CompositeJob;
struct ClientViewParams;
struct IDWriteRenderingParams;
struct clientMouse_t;
struct ID2D1BitmapBrush;
struct AimInput;
struct AimOutput;
struct CEntityAreaParms;
struct ID3DXSprite;
struct NVAPI_VIDSURF_ENCRYPT_CTRL_GET_GUIDS;
struct ClientPlayerAttachmentInfo;
struct D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES;
struct snd_weapon_shot;
struct snd_autosim_play;
struct _s_ThrowInfo;
struct snd_autosim;
struct NV_UNDERSCAN_CONFIG;
struct ID2D1RenderTarget;
struct WeaponOptions;
struct NvUnAttachedDisplayHandle__;
struct OverheadFade;
struct CG_DrawRangefinderHUD::__l8::Element;
struct _D3DVERTEXBUFFER_DESC;
struct ExtraCamClientStateRestore;
struct TestEffect;
struct cent_field_t;
struct _D3DDEVICE_CREATION_PARAMETERS;
struct CgSoundPlaybackTrackingInfo;
struct NV_INFOFRAME_HEADER;
struct ID3DX10Sprite;
struct cent_field_s;
struct IDWriteFontList;
struct IDWriteLocalizedStrings;
struct NV_UNDERSCAN_CAP;
class std::_Tree<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >;
struct ID3DX10Font;
struct D3DXVECTOR2;
struct _D3DX10_SPRITE;
struct std::pair<unsigned int,ID3D11BlendState *>;
struct NV_EDID_V3;
struct _NV_GPS_GET_PERF_SENSOR_COUNTERS_PARAM_V1;
struct _D3DINDEXBUFFER_DESC;
class bdShutdownChunk;
struct soundRandom_t;
struct IDWritePixelSnapping;
class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >;
struct NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_INFO_V1;
struct NV_GPU_CLIENT_POWER_TOPOLOGY_INFO_V1;
class bdReference<bdCookieEchoChunk>;
struct DWRITE_TRIMMING;
struct scoreboardSortByName_t;
class bdMallocMemory;
struct ID2D1RadialGradientBrush;
struct ActiveRumble;
struct RumbleGlobals;
class bdConnectionStatistics;
struct g_MODULE_PRIVATEDATA;
struct NV_I2C_INFO_EX;
struct D3D10_BLEND_DESC;
struct _IMAGE_OPTIONAL_HEADER;
struct TargetHighlightParam;
struct IDWriteFontFile;
struct laser_cache_t;
struct cg_hudelem_t;
struct NV_GPU_ECC_CONFIGURATION_INFO;
struct DelayListInfo;
class bdShutdownCompleteChunk;
struct NV_VIEWPORTF;
struct NV_CUSTOM_DISPLAY;
struct cg_vertex_t;
struct IDWriteTypography;
struct lagometer_t;
class bdSAckChunk;
struct DrawNameEntity;
struct ID2D1SimplifiedGeometrySink;
struct ScreenBurn;
struct ScreenBlur;
struct DWRITE_LINE_METRICS;
struct CenterPrint;
struct RopeGenerateVertsCmd;
struct HudGrenade;
struct NvDRSProfileHandle__;
struct CompassObituary;
struct CompassFakeFire;
struct CompassVehicle;
struct _JMP_BUF;
struct CompassTurrets;
class bdReference<bdHeartbeatChunk>;
struct CompassGuidedMissile;
struct ID2D1PathGeometry;
struct CompassActor;
struct CompassArtillery;
struct ID2D1BitmapRenderTarget;
struct CompassHelicopter;
struct cgCloudLayer_t;
struct cgCloud_t;
struct CameraShake;
struct CameraShakeSet;
struct _NV_POSITION;
struct ID3D10Query;
struct script_s;
struct ID3D10GeometryShader;
struct punctuation_s;
struct directive_s;
struct ID3D10BlendState;
struct source_s;
struct _NVAPI_QUERY_COLOR_INFO;
struct _DDBLTBATCH;
struct define_s;
struct NV_GPU_DISPLAY_MODE;
struct indent_s;
struct D3DXVECTOR2_16F;
struct SBDecState;
struct value_s;
struct operator_s;
struct unlockMapping_t;
struct unlockableItemsDataShared;
struct tagTEXTMETRICA;
struct FactionData;
struct XVertexInfo0;
struct XVertexInfo2;
struct BG_InitClientFields::__l5::clientFieldSystemDef_s;
class D2D1::Matrix3x2F;
struct D3DX10_IMAGE_LOAD_INFO;
struct IDirect3DVertexDeclaration9;
struct IDirect3DResource9;
struct _D3DX11_TEXTURE_LOAD_INFO;
struct ID3D10RasterizerState;
struct NvPhysicalGpuHandle__;
struct ID3D10SamplerState;
struct std::pair<AimTarget *,AimTarget *>;
struct AimTargetGlob;
struct CombFilterMem;
struct ID3D10DeviceChild;
struct GfxLightGridRow;
struct NV_HYBRID_APP_INFO;
class bdFacebookAccount;
struct NV_INFOFRAME_DATA;
struct GfxLightingSHAndVis;
class bdFacebookTag;
struct _NVVIOCONFIG_V3;
struct GfxSmodelLightGlob;
struct CURLMsg;
struct _NV_OVLY_SURFS_INFO;
class Sse_SkinVertex_3;
class bdReceivedMessage;
struct NV_GPU_VOLTAGE_DOMAIN_STATUS_V1;
struct NV_GPU_VOLTAGE_DOMAINS_STATUS_V1;
struct D3DXPLANE;
class bdHMac;
struct NV_MOSAIC_DISPLAY_CAPS_V2;
struct _NVAPI_GET_VIDEO_STATE_COMPONENT;
struct NV_MOSAIC_CAPS_V2;
struct tagTEXTMETRICW;
struct _NVDRS_GPU_SUPPORT;
struct _NVDRS_PROFILE;
struct NV_HDMI_STEREO_MODES_LIST_V1;
struct _NVVIOPCIINFO;
struct NvSBox;
struct NV_DX_PRESENT_VIDEO_PARAMS1;
struct NV_DISPLAY_IMAGE_SHARPENING_INFO;
struct _NV_GPU_SET_ILLUMINATION_PARM_V1;
struct _NV_GPU_DITHER_CONTROL_V1;
struct _NV_DISPLAYCONFIG_PATH_TARGET_INFO_V2;
struct _NV_DISPLAYCONFIG_PATH_ADVANCED_TARGET_INFO_V1;
struct _NV_RESOLUTION;
struct _NV_DISPLAYCONFIG_SOURCE_MODE_INFO_V1;
class bdRichPresenceInfo;
class bdMessagingGroupInfo;
class bdTeamMemberProfile;
struct TranslatorGuardRN;
class bdAuthMigrateAccountCypherText;
struct _NVAPI_STEREO_CAPS;
class bdAuthDeleteAccountPlainText;
struct _D3DXFONT_DESCA;
struct _NVAPI_CSC_MATRIX;
struct _NV_GPU_COLORSPACE_CONVERSION_V1;
class bdDTLSCookieAck;
class DNameNode;
struct GfxDrawMethod;
struct BspSurfRegions;
class phys_free_list<rigid_body_constraint_custom_path>::iterator;
struct DWRITE_OVERHANG_METRICS;
class bdFacebookAttachmentProperty;
struct _NVAPI_QUERY_STEREO_INFO;
struct _NVAPI_DX_QUERY_VIDEO_INFO;
class bdMessageSigning;
struct NV_MOSAIC_TOPO_DETAILS;
struct NV_MOSAIC_TOPO_GROUP;
struct jqAtomicQueuePtr<jqAtomicQueue<jqConditionalQueue *,32>::NodeType>;
class bdUserGroupInfo;
struct NvLogicalGpuHandle__;
struct NV_UID;
struct NV_DISPLAY_HUE_INFO;
struct _NVDRS_SETTING;
struct D2D1_HWND_RENDER_TARGET_PROPERTIES;
struct SCOPE_ID;
struct sockaddr_in6;
class bdNumContentUpdated;
struct _NV_DPCD_PARAMS_V2;
struct NV_DISPLAY_DRIVER_MEMORY_INFO_V2;
struct _KEY_EVENT_RECORD;
class bdMarketplaceSku;
struct NV_GPU_SETCOOLER_LEVEL_V2;
struct IWICBitmapLock;
struct _NVVIOSTATUS;
struct NV_HCLONE_NODE_V1;
class phys_simple_allocator<axis_aligned_sweep_and_prune::active_pair>;
struct _LDOUBLE;
struct curl_certinfo;
struct NV_GPU_PERF_VOLTAGES;
class bdCommerceItemQuantity;
struct NV_GPU_GETCOOLER_SETTINGS_V3;
class bdCommerceReceiptStatus;
struct DWRITE_STRIKETHROUGH;
struct IDirectDrawSurface;
class bdAuthCreateAccountCypherText;
struct _NV_GPS_SET_THERMAL_LIMIT_PARM;
struct _exception;
struct NV_I2C_INFO_V3;
struct NV_COLOR_DATA;
class stdext::exception;
struct NV_GPU_ECC_ERROR_INFO;
class bdDummySocket;
struct NVAPI_VIDSURF_ENCRYPT_CTRL_SET_KEY;
struct DiskGfxDummyReflectionProbe;
class bdPlatformTrulyRandomInit;
struct D2D1_FACTORY_OPTIONS;
struct NV_DISPLAY_DVC_INFO;
class bdMailInboxInfo;
struct _s_ESTypeList;
class bdMailHeaderPriority;
struct _NVAPI_SURFACE_LAYOUT_STRUCT;
struct _NV_VIDEO_STEREO_INFO;
struct $_TypeDescriptor$_extraBytes_39;
struct _NV_GPU_GET_ILLUMINATION_PARM_V1;
class bdAuthChangeUserKeyPlainText;
struct _D3DDISPLAYMODE;
struct NV_GPU_CLIENT_POWER_TOPOLOGY_STATUS_V1;
class bdReliableSendWindow;
struct _NV_RECT;
struct NV_SLI_INFO;
struct NV_INFOFRAME;
struct _NVVIODATAFORMATDETAIL;
class bdInitAckChunk;
class bdHeartbeatAckChunk;
struct NVDX_SwapChainHandle__;
struct jpeg_marker_reader;
struct my_marker_reader;
struct NV_GPU_CLOCK_FREQUENCIES_V2;
class phys_free_list<rigid_body_constraint_custom_orientation>::T_internal;
struct NV_SCANOUT_WARPING_DATA;
struct jpeg_alloc;
struct _NV_GPS_GET_THERMAL_LIMIT_PARM;
struct NV_SCANOUT_INTENSITY_DATA_V2;
struct _NV_DX_VIDEO_CAPS;
class bdPacket;
class axis_aligned_sweep_and_prune::sap_node;
struct jpeg_progress_mgr;
struct NVAPI_VIDSURF_ENCRYPT_CTRL_SET_GUID;
struct NVAPI_VIDSURF_ENCRYPT_CTRL_ENABLE;
struct NVAPI_VIDSURF_ENCRYPT_CTRL_PARAMS;
class bdHashTiger192;
struct DWRITE_CLUSTER_METRICS;
struct _NV_GPU_DISPLAYIDS;
class bdPlatformSemaphore;
struct NV_HDMI_SUPPORT_INFO;
struct $_TypeDescriptor$_extraBytes_13;
struct NvDisplayHandle__;
struct _NV_DISPLAY_MODE_INFO;
struct _EH4_SCOPETABLE_RECORD;
struct NV_GET_CURRENT_SLI_STATE;
class bdShutdownAckChunk;
struct _D3DVSHADERCAPS2_0;
struct NV_MOSAIC_DISPLAY_TOPO_STATUS;
struct NV_HDCP_CS;
struct IDirect3D9;
class bdReference<bdCookieAckChunk>;
struct NV_GPU_PERF_PSTATES20_INFO_V1;
struct _D3DVOLUME_DESC;
struct NV_DISP_PATH_V2;
struct NV_HDCP_PACKET;
struct NV_HDCP_INFO;
struct NV_DISPLAY_DRIVER_VERSION;
struct _DDCOLORKEY;
struct _DDBLTFX;
struct NV_GPU_PERF_CLOCK_TABLE;
struct SBEncState;
struct NV_NVAPI_GET_DP_DONGLE_INFO;
struct NV_EVENT_REGISTER_CALLBACK;
struct NV_DISPLAY_PORT_INFO;
struct NV_TV_ENCODER_CONTROLS;
struct NV_MOSAIC_SUPPORTED_TOPO_INFO;
struct NV_MOSAIC_SUPPORTED_TOPOLOGIES;
struct NV_CHIPSET_INFO_v4;
struct ltp_params;
struct _COORD;
struct _MOUSE_EVENT_RECORD;
struct _WINDOW_BUFFER_SIZE_RECORD;
struct _MENU_EVENT_RECORD;
struct _FOCUS_EVENT_RECORD;
struct SpeexSubmode;
struct jpeg_color_converter;
struct my_color_converter;
struct AddSceneEntSurfsCmd;
struct SpeexCallback;
struct DecState;
struct D3D10_TEX1D_RTV;
struct FilterEntInfo;
struct D3D10_BUFFER_RTV;
struct D2D1_QUADRATIC_BEZIER_SEGMENT;
struct D3D10_TEX2D_RTV;
struct D3D10_RASTERIZER_DESC;
class bdCookie;
struct D3D10_TEX2D_ARRAY_RTV;
struct jpeg_color_deconverter;
struct my_color_deconverter;
struct D3D10_COUNTER_INFO;
struct _D3DX10_FONT_DESCA;
struct ID3D10Texture2D;
struct D3D10_RENDER_TARGET_VIEW_DESC;
struct GfxWindowParms;
struct ID3D10VertexShader;
struct jpeg_common_struct;
struct std::pair<unsigned int const ,ID3D11BlendState *>;
class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node>;
struct D3DXVECTOR4_16F;
class bdVerifyString;
struct D3DX11_IMAGE_LOAD_INFO;
class bdUserGroupList;
struct ltc_utctime;
class bdGetFilesResult;
struct ID3DInclude;
class bdTransferrableUnlockedContent;
struct DWRITE_FONT_FEATURE;
struct GfxMeshGlobals;
class bdAuthUserToHostPlainText;
struct _D3DPSHADERCAPS2_0;
struct DWRITE_FONT_METRICS;
struct DWRITE_TEXT_METRICS;
struct des_test_case;
class bdPlatformTiming;
struct DWRITE_MATRIX;
struct DWRITE_GLYPH_RUN_DESCRIPTION;
struct _D3DGAMMARAMP;
struct _D3DADAPTER_IDENTIFIER9;
struct GfxSortDrawSurfsInterface;
struct ID2D1Layer;
struct GfxCmdDrawTriangles;
class D2D1::ColorF;
struct PerfTimerFrame;
struct IDirect3DBaseTexture9;
class bdBlockedUser;
union ddscolor_t;
struct _D3DCAPS9;
class bdCookieAckChunk;
struct IDirect3DVertexBuffer9;
class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >;
struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >,bool>;
struct ID2D1Geometry;
struct RCinematicsBinkDuck;
struct DWRITE_INLINE_OBJECT_METRICS;
struct jpeg_destination_mgr;
struct my_destination_mgr;
struct bdMallocMemory::bdMemoryChainElement;
struct ID2D1Brush;
struct IDirect3DDevice9;
class bdQueue<bdUnicastConnection::bdControlChunkStore>;
class bdUnicastConnection;
struct _D3D11_SHADER_VARIABLE_DESC;
struct _PROCESS_MEMORY_COUNTERS;
union jqProfEndCaptureWrite::__l4::ProfEventUPtr;
struct jqProfEvent;
union jqProfEndCaptureWrite::__l4::ProfEventUVal;
struct std::_Pair_base<GfxSurface *,GfxSurface *>;
struct _SYSTEM_INFO;
struct VBRState;
struct jqAtomicQueue<jqConditionalQueue *,32>;
struct jqAtomicQueue<jqConditionalQueue *,32>::NodeType;
class phys_free_list<rigid_body_constraint_angular_actuator>::T_internal;
class stdext::bad_array_new_length;
struct phys_slot_pool::extra_info;
struct std::pair<XModel * *,XModel * *>;
struct DiskGfxVolumePlane;
struct SpeexNBMode;
class axis_aligned_sweep_and_prune;
struct DiskGfxLutVolume;
class gjk_sep_dir;
class narrow_phase_collision_task_input;
class bdHMacSHA1;
struct phys_inplace_avl_tree<user_rigid_body *,pulse_sum_constraint_solver::temp_user_rigid_body,pulse_sum_constraint_solver::temp_user_rigid_body::avl_tree_accessor>::stack_item;
class phys_link_list<pulse_sum_node>::iterator;
struct GfxSceneParms;
struct jpeg_decompress_struct;
struct _EXCEPTION_REGISTRATION_RECORD;
struct _EH4_EXCEPTION_REGISTRATION_RECORD;
struct std::pair<unsigned __int64 const ,ID3D11DepthStencilState *>;
struct std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node;
struct std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node;
struct _TP_CALLBACK_ENVIRON_V3;
struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > > >;
struct MtlStateMapBitName;
struct TechniqueNameControl;
class Sse_SkinVertex_0;
struct std::pair<GfxStaticModelCombinedInst *,GfxStaticModelCombinedInst *>;
struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT;
struct GfxCmdClearScreen;
struct GfxCmdProjectionSet;
struct DdsBlock_Dxt1_t;
struct DdsBlock_Dxt5_t;
struct GfxDrawRecord;
struct GfxDrawRecordGlob;
class bdUnlockContentInfo;
struct curl_version_info_data;
class bdMarketplaceInventoryItemQuantity;
struct CodeConstantSource;
struct DpvsDynamicCellCmd_Individual;
struct DpvsDynamicCellCmd;
struct DiskSmodelLightmapVColor;
struct _cpinfo;
struct jpeg_comp_master;
class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >;
struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >,bool>;
struct GfxSModelDrawSurfData;
struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned int const ,ID3D11BlendState *>,int,std::pair<unsigned int const ,ID3D11BlendState *> const *,std::pair<unsigned int const ,ID3D11BlendState *> const &,std::_Iterator_base0>;
struct GfxSModelDrawSurfLightingData;
class std::__non_rtti_object;
struct GfxStaticModelId;
struct GfxDrawConsts;
struct XAssetPool<GfxImage,5376>;
struct r_globals_load_t;
class std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >;
struct mnode_load_t;
struct GfxStaticModelSortModel;
struct DiskGfxSkyGridVolume;
struct _s_HandlerType;
struct ScopedShaderConstantSetUndo;
struct std::pair<GfxSurface *,GfxSurface *>;
struct _s_FuncInfo;
class std::bad_typeid;
struct GfxCmdResolveComposite;
struct std::_Pair_base<GfxStaticModelCombinedInst *,GfxStaticModelCombinedInst *>;
struct rterrmsgs;
struct GfxStaticModelCombinedInst;
struct GfxCmdDrawEmblemLayer;
struct std::pair<GfxStaticModelSortModel *,GfxStaticModelSortModel *>;
struct funtab;
class std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >;
struct std::_Pair_base<GfxStaticModelSortModel *,GfxStaticModelSortModel *>;
class Replicator;
struct DiskGfxCell_Version21;
struct GfxPackedWorldVertex;
class stdext::bad_exception;
class stdext::bad_alloc;
class pDNameNode;
struct DiskGfxAabbTree;
struct DiskGfxCell_Version14;
struct DiskGfxOutdoorBounds;
struct DiskLightingInfo;
struct DiskTriangleSoup_Version8;
struct ShadowGlobals;
struct DiskGfxWorldFogVolume;
struct DiskGfxReflectionProbeVolumeData;
struct DiskGfxReflectionProbe;
struct IDirectDrawPalette;
struct DiskHeroOnlyLight;
struct DiskGfxOccluder;
struct IDirectDraw;
struct DiskLightRegionHull;
struct tagUSEROBJECTFLAGS;
class std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >;
struct DiskGfxLightCorona;
struct DiskGfxWorldFogModifierVolume;
struct r_lightmapGroup_t;
struct ModelList;
struct GfxLightGridHeader;
struct ImageList;
struct DiskGfxPortal;
struct _INPUT_RECORD;
struct DiskGfxExposureVolume;
struct DiskLightRegion;
struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >,bool>;
struct DiskLightRegionAxis;
struct DiskGfxShadowMapVolume;
struct DiskTriangleSoup_Version12;
struct std::less<unsigned __int64>;
class std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0>;
struct DiskGfxStaticModelData;
struct DiskGfxCell;
class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > > >;
class std::map<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> > >;
class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > > >;
class std::map<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> > >;
class DName;
class std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >;
struct GfxBuffers;
struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > > >;
struct GfxParticleCloudVertex;
struct GfxDynamicIndices;
struct CinematicFlagsFields;
union CinematicFlags;
struct CinematicInfo;
struct AsyncOpenData;
struct CinematicGlob;
struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node>;
struct MoviePlayerFunctions;
struct CodeSamplerSource;
struct GfxCmdDrawUITriangles;
struct _FP80;
struct _FP128;
struct _I64;
struct _U64;
struct _BCD80;
struct _U32ARRAY;
struct _FPQ64;
struct _FPIEEE_EXCEPTION_FLAGS;
struct GfxCmdDrawQuadList2D;
struct _s_CatchableType;
union _dbl;
struct _FILEX;
struct std::binary_function<unsigned __int64,unsigned __int64,bool>;
struct MovieSpecificInfo;
struct CinematicTextureSet;
struct CinematicHunk;
struct CinematicGlob_Bink;
struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > > >;
struct _XCPT_ACTION;
struct BINKRECT;
struct BUNDLEPOINTERS;
struct BINKIO;
struct BINK;
struct _CRT_FLOAT;
struct std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >::rebind<std::pair<unsigned int const ,ID3D11BlendState *> >;
class Sse_SkinVertex_2;
struct std::less<unsigned int>;
class _LocaleUpdate;
struct _finddata32_t;
struct BINKSND;
struct ScriptableConstant;
struct _tiddata;
struct GfxCmdSaveScreenSection;
struct GfxCmdDrawText3D;
struct FpFormatDescriptor;
struct GfxCmdSetMaterialColor;
class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >,std::_Iterator_base0>;
class UnDecorator;
class DNameStatusNode;
struct GfxCmdDrawFullScreenColoredQuad;
struct DrawSurfListInfoSetup;
struct _s_TryBlockMapEntry;
struct DrawDepthWorkerCmd;
struct _s_UnwindMapEntry;
struct GfxCandidateShadowedLight;
struct positional_param;
struct GfxCmdSaveScreen;
struct _output_s_l::__l83::_count_string;
struct _NT_TIB;
struct BINKREALTIME;
struct GfxAssembledShaderTextFile;
struct GfxAssembledShaderText;
struct std::_Pair_base<GfxCachedShaderText *,GfxCachedShaderText *>;
struct GfxCachedShaderText;
struct ID3D10Blob;
struct _D3D_SHADER_MACRO;
struct jpeg_entropy_decoder;
struct bitread_perm_state;
struct savable_state;
struct huff_entropy_decoder;
struct SkinXModelCmd;
struct GfxModelRigidSurface;
struct bitread_working_state;
struct XModelRigidCullInfoContext;
struct BModelSurface;
struct jpeg_scan_info;
struct DpvsCellCmd;
struct jpeg_c_main_controller;
struct DpvsPlanes;
struct DpvsClipPlanes;
struct GfxCmdBufContext;
struct BspTriangleBatch_t;
struct jpeg_color_quantizer;
struct my_cquantizer;
struct GfxTrianglesDrawStream;
union large_pool_struct;
struct ID3D11ShaderReflectionType;
struct DrawLitWorkerCmd;
struct _EXCEPTION_RECORD_CRT;
struct GfxStaticModelDrawStream;
struct ID3D11ShaderReflectionVariable;
struct ScopeTable;
struct SunShadowMapUserData;
struct _D3D11_SIGNATURE_PARAMETER_DESC;
struct _SCOPETABLE_ENTRY;
struct Ui3dStatus;
struct FxWorldMarkPoint;
struct GfxReverseSortDrawSurfsInterface;
struct ExtraCamConfig;
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
struct PerfTimerStyle;
struct IDirectDrawSurface7;
struct XVertexInfo3;
struct std::pair<MaterialMemory *,MaterialMemory *>;
struct PerfTimerFrameHistory;
struct stream_dest_info_t;
struct PerfTimer;
struct GPUTimer;
struct GPUTimerFrame;
struct GPUTimeStamp;
struct jpeg_upsampler;
struct my_upsampler;
struct std::_Pair_base<GfxImage * *,GfxImage * *>;
struct std::pair<GfxImage * *,GfxImage * *>;
struct jpeg_d_post_controller;
struct my_post_controller;
struct BuiltinImageConstructorTable;
struct MaterialString;
struct GfxImageFileHeader;
struct _EH4_SCOPETABLE;
struct WaveletHuffmanDecode;
struct WaveletDecode;
struct DdsBlock_Dxt3_t;
struct MaterialStateMapRule;
struct MaterialStateMapRuleSet;
struct GfxRawPixel;
struct GfxRawImage;
struct LIST_ENTRY64;
struct GfxMetrics;
struct _DDPIXELFORMAT;
struct _DDSCAPS;
struct _DDSURFACEDESC;
struct GfxAssets;
struct IDXGIDevice;
struct IDirectDraw7;
struct IDXGIDevice1;
struct GfxGammaRamp;
struct jpeg_error_mgr;
struct jpeg_memory_mgr;
struct c_derived_tbl;
struct GfxDrawSurfListArgs;
struct _KSYSTEM_TIME;
struct _KUSER_SHARED_DATA;
struct _CLIENT_ID;
struct r_backEndGlobals_t;
struct backing_store_struct;
struct jvirt_sarray_control;
struct _ASSEMBLY_STORAGE_MAP;
struct jpeg_decomp_master;
struct jvirt_barray_control;
struct jpeg_compress_struct;
struct SpotShadowMapUserData;
struct jpeg_c_coef_controller;
struct my_coef_controller;
struct jpeg_entropy_encoder;
struct jpeg_source_mgr;
struct jpeg_c_prep_controller;
struct my_prep_controller;
struct jpeg_marker_writer;
struct Corona;
struct JQUANT_TBL;
struct GfxDecodedLightGridColors;
struct JHUFF_TBL;
struct jpeg_component_info;
struct jpeg_d_main_controller;
struct CatchGuardRN;
struct jpeg_input_controller;
struct _ACTIVATION_CONTEXT_STACK;
struct jpeg_inverse_dct;
class pairNode;
struct __JUMP_BUFFER;
class charNode;
struct _STARTUPINFOW;
struct jpeg_downsampler;
struct _FPIEEE_VALUE;
struct _FPIEEE_RECORD;
struct jpeg_forward_dct;
struct _IMAGE_NT_HEADERS;
struct LightGlobals;
struct std::pair<GfxSurface * *,GfxSurface * *>;
struct LightDefCopyConfig;
struct MarkModelCoreContext;
struct _FloatOutStruct;
struct BuiltInMaterialTable;
struct stream_source_info_t;
struct std::_Pair_base<MaterialMemory *,MaterialMemory *>;
struct MaterialList;
struct GfxShaderConstantBlock;
struct GfxRenderCommandExecState;
struct CustomCodeConstantMapping;
struct _s_CatchableTypeArray;
struct MaterialStateMap;
struct MaterialTypeInfo;
struct std::pair<Material * *,Material * *>;
struct code_page_info;
struct _D3D11_SHADER_BUFFER_DESC;
struct _D3D11_SHADER_DESC;
struct ShaderArgumentDest;
struct box;
struct ID3D11ShaderReflection;
struct _D3D11_SHADER_TYPE_DESC;
struct _D3D11_SHADER_INPUT_BIND_DESC;
struct ShaderArgumentSource;
struct VertexConstantMappingEntry;
struct VertexConstantMapping;
struct OcclusionQuery;
struct std::_Pair_base<XModel * *,XModel * *>;
struct GfxModelLightGlob;
struct my_memory_mgr;
struct SseMatrix;
class Sse_SkinVertex_1;
struct GfxPackedVertexNormal;
struct OutdoorGlob;
struct GfxShadowedLightEntry;
struct GfxShadowedLightHistory;
struct GfxCmdStretchPicRotateXY;
struct _DDOVERLAYFX;
struct GfxCmdSetViewport;
struct _TEB_ACTIVE_FRAME;
struct GfxCmdDrawFramed2D;
struct GfxCmdDrawText2D;
struct GfxCmdDrawQuadPic;
struct LIST_ENTRY32;
struct GfxCmdDrawPoints;
struct GfxCmdConstantSet;
struct GfxCmdSetCustomConstant;
struct GfxCmdSetScissor;
struct GfxCmdStretchComposite;
struct GfxCmdDrawLines;
struct GfxCmdStretchPic;
struct GfxCmdStretchPicRotateST;
struct GfxCmdBlendSavedScreenFlashed;
struct GfxCmdDrawUIQuads;
struct GfxCmdPCCopyImageGenMIP;
struct GfxCmdBlendSavedScreenBlurred;
struct GfxCmdBeginView;
struct ExtraCamSettings;
struct GfxRenderTargetTexture;
struct _GDI_TEB_BATCH;
struct _Wx86ThreadState;
struct _TEB;
struct SceneEntCmd;
struct IDirectDrawClipper;
union GfxShaderConstantState;
class std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0>::value_compare;
class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > > >;
class std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0>::value_compare;
class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > > >;
struct std::binary_function<unsigned int,unsigned int,bool>;
class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >;
class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >;
class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node>;
struct std::_Allocator_base<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >;
struct std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node>;
class std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >;
struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node>;
class std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >;
struct std::pair<unsigned __int64,ID3D11DepthStencilState *>;
struct std::_Pair_base<unsigned __int64 const ,ID3D11DepthStencilState *>;
struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > > >;
struct std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node>;
class std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0>;
class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >,std::_Iterator_base0>;
struct std::_Allocator_base<std::pair<unsigned int const ,ID3D11BlendState *> >;
struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >,bool>;
struct phuff_entropy_encoder;
class std::_Tree<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >;
struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned __int64 const ,ID3D11DepthStencilState *>,int,std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> const *,std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> const &,std::_Iterator_base0>;
union DepthStencilBitsMask;
struct IPakDataChunkHeader;
struct StreamAllocGlob;
struct CoronaState;
struct tagDDDEVICEIDENTIFIER2;
struct _DDSCAPS2;
struct GfxImageFilter;
class DDraw;
struct _DDCAPS_DX7;
struct _DDSURFACEDESC2;
struct Ui3dTextureWindow;
struct XVertexInfo1;
struct DrawEmissiveFXCallbacUserData;
struct my_fdct_controller;
struct working_state;
struct huff_entropy_encoder;
struct my_main_controller;
struct my_marker_writer;
struct my_comp_master;
struct my_downsampler;
struct my_source_mgr;
struct my_idct_controller;
struct my_input_controller;
struct my_decomp_master;
struct phuff_entropy_decoder;
union small_pool_struct;
struct _PEB_FREE_BLOCK;
struct _PEB_LDR_DATA;
struct _RTL_USER_PROCESS_PARAMETERS;
struct _ACTIVATION_CONTEXT_DATA;
struct _PEB;
struct _NLG_INFO;
struct _EXCEPTION_REGISTRATION_COMMON;
struct ExceptionRecordStruct;
struct RegistrationNode;
struct ScopeTableRecord;
struct _strflt;
struct _SYSTEMTIME;
struct stat;
struct _stat64i32;
struct errentry;
struct ioinfo;
struct _BY_HANDLE_FILE_INFORMATION;
union doubleint;
struct EnhKeyVals;
struct HWINSTA__;
struct tagLC_STRINGS;
struct tagLOCALETAB;
union FT;
struct _IMAGE_SECTION_HEADER;
struct _TIME_ZONE_INFORMATION;
struct transitiondate;
struct _LDBL12;
struct _flt;
struct _output_l::__l77::_count_string;
union _CRT_DOUBLE_COMPONENTS;
struct MTStackFrame;
struct EHRegistrationNode;
struct FrameInfo;
class _HeapManager;
class pcharNode;
struct $_s__CatchableTypeArray$_extraBytes_12;

#include <pshpack1.h>
typedef enum _TAG_UNNAMED_1
{
  XANIM_ERROR_NONE = 0,
  XANIM_ERROR_BAD_ROOT_ANIM = 1,
  XANIM_ERROR_BAD_NOTIFY = 2,
} TAG_UNNAMED_1, *PTAG_UNNAMED_1;

enum tagSYSKIND
{
  SYS_WIN16 = 0,
  SYS_WIN32 = 1,
  SYS_MAC = 2,
  SYS_WIN64 = 3,
};

typedef enum _TAG_UNNAMED_2
{
  Chars = 28,
} TAG_UNNAMED_2, *PTAG_UNNAMED_2;

enum eAttachmentGroup
{
  ATTACHMENT_GROUP_ATTACHMENT = 0,
  ATTACHMENT_GROUP_WEAPONOPTIONS = 1,
  ATTACHMENT_GROUP_COUNT = 2,
  ATTACHMENT_GROUP_INVALID = 2,
};

enum inflate_mode
{
  HEAD = 0,
  FLAGS = 1,
  TIME = 2,
  OS = 3,
  EXLEN = 4,
  EXTRA = 5,
  NAME = 6,
  COMMENT = 7,
  HCRC = 8,
  DICTID = 9,
  DICT = 10,
  TYPE = 11,
  TYPEDO = 12,
  STORED = 13,
  COPY = 14,
  TABLE = 15,
  LENLENS = 16,
  CODELENS = 17,
  LEN = 18,
  LENEXT = 19,
  DIST = 20,
  DISTEXT = 21,
  MATCH = 22,
  LIT = 23,
  CHECK = 24,
  LENGTH = 25,
  DONE = 26,
  BAD = 27,
  MEM = 28,
  SYNC = 29,
};

enum bdNATType
{
  BD_NAT_UNKNOWN = 0,
  BD_NAT_OPEN = 1,
  BD_NAT_MODERATE = 2,
  BD_NAT_STRICT = 3,
};

enum tagBINDSTATUS
{
  BINDSTATUS_FINDINGRESOURCE = 1,
  BINDSTATUS_CONNECTING = 2,
  BINDSTATUS_REDIRECTING = 3,
  BINDSTATUS_BEGINDOWNLOADDATA = 4,
  BINDSTATUS_DOWNLOADINGDATA = 5,
  BINDSTATUS_ENDDOWNLOADDATA = 6,
  BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 7,
  BINDSTATUS_INSTALLINGCOMPONENTS = 8,
  BINDSTATUS_ENDDOWNLOADCOMPONENTS = 9,
  BINDSTATUS_USINGCACHEDCOPY = 10,
  BINDSTATUS_SENDINGREQUEST = 11,
  BINDSTATUS_CLASSIDAVAILABLE = 12,
  BINDSTATUS_MIMETYPEAVAILABLE = 13,
  BINDSTATUS_CACHEFILENAMEAVAILABLE = 14,
  BINDSTATUS_BEGINSYNCOPERATION = 15,
  BINDSTATUS_ENDSYNCOPERATION = 16,
  BINDSTATUS_BEGINUPLOADDATA = 17,
  BINDSTATUS_UPLOADINGDATA = 18,
  BINDSTATUS_ENDUPLOADDATA = 19,
  BINDSTATUS_PROTOCOLCLASSID = 20,
  BINDSTATUS_ENCODING = 21,
  BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 22,
  BINDSTATUS_CLASSINSTALLLOCATION = 23,
  BINDSTATUS_DECODING = 24,
  BINDSTATUS_LOADINGMIMEHANDLER = 25,
  BINDSTATUS_CONTENTDISPOSITIONATTACH = 26,
  BINDSTATUS_FILTERREPORTMIMETYPE = 27,
  BINDSTATUS_CLSIDCANINSTANTIATE = 28,
  BINDSTATUS_IUNKNOWNAVAILABLE = 29,
  BINDSTATUS_DIRECTBIND = 30,
  BINDSTATUS_RAWMIMETYPE = 31,
  BINDSTATUS_PROXYDETECTING = 32,
  BINDSTATUS_ACCEPTRANGES = 33,
  BINDSTATUS_COOKIE_SENT = 34,
  BINDSTATUS_COMPACT_POLICY_RECEIVED = 35,
  BINDSTATUS_COOKIE_SUPPRESSED = 36,
  BINDSTATUS_COOKIE_STATE_UNKNOWN = 37,
  BINDSTATUS_COOKIE_STATE_ACCEPT = 38,
  BINDSTATUS_COOKIE_STATE_REJECT = 39,
  BINDSTATUS_COOKIE_STATE_PROMPT = 40,
  BINDSTATUS_COOKIE_STATE_LEASH = 41,
  BINDSTATUS_COOKIE_STATE_DOWNGRADE = 42,
  BINDSTATUS_POLICY_HREF = 43,
  BINDSTATUS_P3P_HEADER = 44,
  BINDSTATUS_SESSION_COOKIE_RECEIVED = 45,
  BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46,
  BINDSTATUS_SESSION_COOKIES_ALLOWED = 47,
  BINDSTATUS_CACHECONTROL = 48,
  BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49,
  BINDSTATUS_MIMETEXTPLAINMISMATCH = 50,
  BINDSTATUS_PUBLISHERAVAILABLE = 51,
  BINDSTATUS_DISPLAYNAMEAVAILABLE = 52,
  BINDSTATUS_SSLUX_NAVBLOCKED = 53,
  BINDSTATUS_SERVER_MIMETYPEAVAILABLE = 54,
  BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = 55,
  BINDSTATUS_64BIT_PROGRESS = 56,
};

enum ai_badplace_t
{
  AI_BADPLACE_NONE = 0,
  AI_BADPLACE_NORMAL = 1,
  AI_BADPLACE_REALLYBAD = 2,
};

enum D3D11_COMPARISON_FUNC
{
  D3D11_COMPARISON_NEVER = 1,
  D3D11_COMPARISON_LESS = 2,
  D3D11_COMPARISON_EQUAL = 3,
  D3D11_COMPARISON_LESS_EQUAL = 4,
  D3D11_COMPARISON_GREATER = 5,
  D3D11_COMPARISON_NOT_EQUAL = 6,
  D3D11_COMPARISON_GREATER_EQUAL = 7,
  D3D11_COMPARISON_ALWAYS = 8,
};

enum NV_DP_DYNAMIC_RANGE
{
  NV_DP_DYNAMIC_RANGE_VESA = 0,
  NV_DP_DYNAMIC_RANGE_CEA = 1,
};

typedef enum _TAG_UNNAMED_3
{
  XANIM_VERSION = 19,
  XMODEL_VERSION = 64,
  XMODEL_PIECES_VERSION = 1,
} TAG_UNNAMED_3, *PTAG_UNNAMED_3;

enum D3D11_FEATURE
{
  D3D11_FEATURE_THREADING = 0,
  D3D11_FEATURE_DOUBLES = 1,
  D3D11_FEATURE_FORMAT_SUPPORT = 2,
  D3D11_FEATURE_FORMAT_SUPPORT2 = 3,
  D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = 4,
};

union vec3_t
{
  union
  {
    struct
    {
      /* 0x0000 */ float x;
      /* 0x0004 */ float y;
      /* 0x0008 */ float z;
    }; /* size: 0x000c */
    /* 0x0000 */ float v[3];
  }; /* size: 0x000c */
}; /* size: 0x000c */

struct VehicleHover
{
  /* 0x0000 */ float hoverRadius;
  /* 0x0004 */ float hoverSpeed;
  /* 0x0008 */ float hoverAccel;
  /* 0x000c */ union vec3_t hoverGoalPos;
  /* 0x0018 */ int useHoverAccelForAngles;
}; /* size: 0x001c */

enum link_type_e
{
  PITCH_CTRL = 0,
  YAW_CTRL = 1,
  ROLL_CTRL = 2,
  SWIM_CTRL = 3,
  FULL_CTRL = 4,
  COMPASS_CTRL = 5,
};

enum D3D11_DEPTH_WRITE_MASK
{
  D3D11_DEPTH_WRITE_MASK_ZERO = 0,
  D3D11_DEPTH_WRITE_MASK_ALL = 1,
};

typedef enum _NV_GPU_HDCP_FUSE_STATE
{
  NV_GPU_HDCP_FUSE_STATE_UNKNOWN = 0,
  NV_GPU_HDCP_FUSE_STATE_DISABLED = 1,
  NV_GPU_HDCP_FUSE_STATE_ENABLED = 2,
} NV_GPU_HDCP_FUSE_STATE, *PNV_GPU_HDCP_FUSE_STATE;

struct ZBarrierBoard
{
  /* 0x0000 */ struct XModel* pBoardModel;
  /* 0x0004 */ struct XModel* pAlternateBoardModel;
  /* 0x0008 */ struct XModel* pUpgradedBoardModel;
  /* 0x000c */ const char* pTearAnim;
  /* 0x0010 */ const char* pBoardAnim;
  /* 0x0014 */ const struct FxEffectDef* repairEffect1;
  /* 0x0018 */ const struct FxEffectDef* repairEffect2;
  /* 0x001c */ union vec3_t repairEffect1Offset;
  /* 0x0028 */ union vec3_t repairEffect2Offset;
  /* 0x0034 */ unsigned int boardRepairSound;
  /* 0x0038 */ unsigned int boardRepairHoverSound;
  /* 0x003c */ unsigned int pauseAndRepeatRepSound;
  /* 0x0040 */ float minPause;
  /* 0x0044 */ float maxPause;
  /* 0x0048 */ unsigned short zombieBoardTearStateName;
  /* 0x004a */ unsigned short zombieBoardTearSubStateName;
  /* 0x004c */ unsigned int numRepsToPullProBoard;
}; /* size: 0x0050 */

enum D3D11_STENCIL_OP
{
  D3D11_STENCIL_OP_KEEP = 1,
  D3D11_STENCIL_OP_ZERO = 2,
  D3D11_STENCIL_OP_REPLACE = 3,
  D3D11_STENCIL_OP_INCR_SAT = 4,
  D3D11_STENCIL_OP_DECR_SAT = 5,
  D3D11_STENCIL_OP_INVERT = 6,
  D3D11_STENCIL_OP_INCR = 7,
  D3D11_STENCIL_OP_DECR = 8,
};

typedef enum _TAG_UNNAMED_4
{
  RIOTSHIELD_DEFAULT_MODEL = 0,
  RIOTSHIELD_RED_MODEL = 1,
} TAG_UNNAMED_4, *PTAG_UNNAMED_4;

enum mz_zip_flags
{
  MZ_ZIP_FLAG_CASE_SENSITIVE = 256,
  MZ_ZIP_FLAG_IGNORE_PATH = 512,
  MZ_ZIP_FLAG_COMPRESSED_DATA = 1024,
  MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY = 2048,
};

class bdMarketplace
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

typedef enum _TAG_UNNAMED_5
{
  VAR_TYPE_MASK = 127,
  VAR_HAS_CHILDREN_MASK = 128,
} TAG_UNNAMED_5, *PTAG_UNNAMED_5;

enum gjk_entity_info_t::ENTITY_TYPE
{
  ET_GENT = 0,
  ET_CENT = 1,
  ET_DENT = 2,
  ET_GLASS = 3,
  ET_NONE = 4,
};

typedef enum _TAG_UNNAMED_6
{
  TINFL_FLAG_PARSE_ZLIB_HEADER = 1,
  TINFL_FLAG_HAS_MORE_INPUT = 2,
  TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF = 4,
  TINFL_FLAG_COMPUTE_ADLER32 = 8,
} TAG_UNNAMED_6, *PTAG_UNNAMED_6;

enum tagURLZONE
{
  URLZONE_INVALID = -1,
  URLZONE_PREDEFINED_MIN = 0,
  URLZONE_LOCAL_MACHINE = 0,
  URLZONE_INTRANET = 1,
  URLZONE_TRUSTED = 2,
  URLZONE_INTERNET = 3,
  URLZONE_UNTRUSTED = 4,
  URLZONE_PREDEFINED_MAX = 999,
  URLZONE_USER_MIN = 1000,
  URLZONE_USER_MAX = 10000,
};

enum D3D11_BLEND
{
  D3D11_BLEND_ZERO = 1,
  D3D11_BLEND_ONE = 2,
  D3D11_BLEND_SRC_COLOR = 3,
  D3D11_BLEND_INV_SRC_COLOR = 4,
  D3D11_BLEND_SRC_ALPHA = 5,
  D3D11_BLEND_INV_SRC_ALPHA = 6,
  D3D11_BLEND_DEST_ALPHA = 7,
  D3D11_BLEND_INV_DEST_ALPHA = 8,
  D3D11_BLEND_DEST_COLOR = 9,
  D3D11_BLEND_INV_DEST_COLOR = 10,
  D3D11_BLEND_SRC_ALPHA_SAT = 11,
  D3D11_BLEND_BLEND_FACTOR = 14,
  D3D11_BLEND_INV_BLEND_FACTOR = 15,
  D3D11_BLEND_SRC1_COLOR = 16,
  D3D11_BLEND_INV_SRC1_COLOR = 17,
  D3D11_BLEND_SRC1_ALPHA = 18,
  D3D11_BLEND_INV_SRC1_ALPHA = 19,
};

struct gameTypeInfo
{
  /* 0x0000 */ char gameType[12];
  /* 0x000c */ char gameTypeName[32];
  /* 0x002c */ char gameTypeShortName[32];
  /* 0x004c */ char gameTypeNameCaps[32];
  /* 0x006c */ int splitscreen;
}; /* size: 0x0070 */

struct mapStartLocInfo
{
  /* 0x0000 */ char startLoc[12];
  /* 0x000c */ char startLocName[32];
  /* 0x002c */ char mapLoadName[24];
  /* 0x0044 */ int numGameModes;
  /* 0x0048 */ struct gameTypeInfo gameModes[16];
}; /* size: 0x0748 */

struct VehicleGunnerTags
{
  /* 0x0000 */ int turret;
  /* 0x0004 */ int barrel;
  /* 0x0008 */ int flash;
  /* 0x000c */ int flash2;
}; /* size: 0x0010 */

enum KillCamEntityType
{
  KC_NO_ENTITY = 0,
  KC_HELICOPTER = 1,
  KC_DESTRUCTIBLE = 2,
  KC_SCRIPTED = 3,
  KC_EXPLOSIVE = 4,
  KC_FAST_EXPLOSIVE = 5,
  KC_ROCKET = 6,
  KC_DRONE = 7,
  KC_DOG = 8,
  KC_ARTILLERY = 9,
  KC_VEHICLE = 10,
  KC_TURRET = 11,
};

enum scriptInstance_t
{
  SCRIPTINSTANCE_SERVER = 0,
  SCRIPTINSTANCE_CLIENT = 1,
  SCRIPT_INSTANCE_MAX = 2,
};

enum NV_MONITOR_CONN_TYPE
{
  NV_MONITOR_CONN_TYPE_UNINITIALIZED = 0,
  NV_MONITOR_CONN_TYPE_VGA = 1,
  NV_MONITOR_CONN_TYPE_COMPONENT = 2,
  NV_MONITOR_CONN_TYPE_SVIDEO = 3,
  NV_MONITOR_CONN_TYPE_HDMI = 4,
  NV_MONITOR_CONN_TYPE_DVI = 5,
  NV_MONITOR_CONN_TYPE_LVDS = 6,
  NV_MONITOR_CONN_TYPE_DP = 7,
  NV_MONITOR_CONN_TYPE_COMPOSITE = 8,
  NV_MONITOR_CONN_TYPE_UNKNOWN = -1,
};

typedef enum _TAG_UNNAMED_7
{
  HW_CURSOR_ARROW = 0,
  HW_CURSOR_GRABOPEN = 1,
  HW_CURSOR_GRABCLOSE = 2,
  HW_CURSOR_GRABOPENZM = 3,
  HW_CURSOR_GRABCLOSEZM = 4,
  HW_CURSOR_COUNT = 5,
} TAG_UNNAMED_7, *PTAG_UNNAMED_7;

enum meansOfDeath_t
{
  MOD_UNKNOWN = 0,
  MOD_PISTOL_BULLET = 1,
  MOD_RIFLE_BULLET = 2,
  MOD_GRENADE = 3,
  MOD_GRENADE_SPLASH = 4,
  MOD_PROJECTILE = 5,
  MOD_PROJECTILE_SPLASH = 6,
  MOD_MELEE = 7,
  MOD_BAYONET = 8,
  MOD_HEAD_SHOT = 9,
  MOD_CRUSH = 10,
  MOD_TELEFRAG = 11,
  MOD_FALLING = 12,
  MOD_SUICIDE = 13,
  MOD_TRIGGER_HURT = 14,
  MOD_EXPLOSIVE = 15,
  MOD_IMPACT = 16,
  MOD_BURNED = 17,
  MOD_HIT_BY_OBJECT = 18,
  MOD_DROWN = 19,
  MOD_GAS = 20,
  MOD_NUM = 21,
};

enum rb_vehicle_model::rb_vehicle_model_flags_e
{
  FLAG_IS_POWER_BRAKING = 1,
  FLAG_IS_BRAKING = 2,
  FLAG_IS_FORWARD_ACCELERATION = 4,
  FLAG_IS_REVERSE_ACCELERATION = 8,
  FLAG_IS_COASTING = 16,
};

struct PhysicsInputs
{
  /* 0x0000 */ union vec3_t vVelocity;
  /* 0x000c */ unsigned short groundEntNum;
  /* 0x000e */ char Padding_0[2];
  /* 0x0010 */ int bHasGroundPlane;
  /* 0x0014 */ float groundplaneSlope;
  /* 0x0018 */ int iFootstepTimer;
}; /* size: 0x001c */

typedef enum _URLZONEREG
{
  URLZONEREG_DEFAULT = 0,
  URLZONEREG_HKLM = 1,
  URLZONEREG_HKCU = 2,
} URLZONEREG, *PURLZONEREG;

typedef enum _NVDRS_SETTING_TYPE
{
  NVDRS_DWORD_TYPE = 0,
  NVDRS_BINARY_TYPE = 1,
  NVDRS_STRING_TYPE = 2,
  NVDRS_WSTRING_TYPE = 3,
} NVDRS_SETTING_TYPE, *PNVDRS_SETTING_TYPE;

enum D3D11_BLEND_OP
{
  D3D11_BLEND_OP_ADD = 1,
  D3D11_BLEND_OP_SUBTRACT = 2,
  D3D11_BLEND_OP_REV_SUBTRACT = 3,
  D3D11_BLEND_OP_MIN = 4,
  D3D11_BLEND_OP_MAX = 5,
};

typedef enum _TAG_UNNAMED_8
{
  CMDBUF_LIT_BSP = 0,
  CMDBUF_LIT_BSP_END = 0,
  CMDBUF_LIT_STATIC_MODEL = 1,
  CMDBUF_LIT_STATIC_MODEL_END = 1,
  CMDBUF_LIT = 2,
  CMDBUF_LIT_END = 2,
  CMDBUF_LIT_BSP_POST_RESOLVE = 3,
  CMDBUF_LIT_STATIC_MODEL_POST_RESOLVE = 4,
  CMDBUF_LIT_POST_RESOLVE = 5,
  CMDBUF_LIT_SONAR = 6,
  CMDBUF_LIGHT_MAP_BSP = 7,
  CMDBUF_LIGHT_MAP_BSP_END = 8,
  CMDBUF_LIGHT_MAP_STATIC_MODEL = 9,
  CMDBUF_LIGHT_MAP_STATIC_MODEL_END = 10,
  CMDBUF_LIGHT_MAP = 11,
  CMDBUF_LIGHT_MAP_END = 12,
  CMDBUF_LIGHT_MAP_BSP_POST_RESOLVE = 13,
  CMDBUF_LIGHT_MAP_STATIC_MODEL_POST_RESOLVE = 14,
  CMDBUF_LIGHT_MAP_POST_RESOLVE = 15,
  CMDBUF_DEPTH_HACK = 16,
  CMDBUF_TRANS = 17,
  CMDBUF_TRANS_POST_FX = 18,
  CMDBUF_LIT_QUASI_OPAQUE = 19,
  CMDBUF_EMISSIVE_OPAQUE = 20,
  CMDBUF_EMISSIVE_FX = 21,
  CMDBUF_VIEWMODEL_FX = 22,
  CMDBUF_SUPERFLARE = 23,
  CMDBUF_VIEWMODEL_TRANS = 24,
  CMDBUF_POST_BLUR = 25,
  CMDBUF_SUN_SHADOW_MAP0 = 26,
  CMDBUF_SUN_SHADOW_MAP1 = 27,
  CMDBUF_SPOT_SHADOW_MAP0 = 28,
  CMDBUF_SPOT_SHADOW_MAP1 = 29,
  CMDBUF_SPOT_SHADOW_MAP2 = 30,
  CMDBUF_SPOT_SHADOW_MAP3 = 31,
  CMDBUF_PREPASS = 32,
  CMDBUF_COUNT = 33,
} TAG_UNNAMED_8, *PTAG_UNNAMED_8;

enum CIN_CALLBACK_TYPE
{
  CINEMATIC_CALLBACK_INVALID = 0,
  CINEMATIC_CALLBACK_CSCR = 1,
  CINEMATIC_CALLBACK_IMMEDIATE = 2,
  CINEMATIC_CALLBACK_TYPE_COUNT = 3,
};

enum D3D11_COLOR_WRITE_ENABLE
{
  D3D11_COLOR_WRITE_ENABLE_RED = 1,
  D3D11_COLOR_WRITE_ENABLE_GREEN = 2,
  D3D11_COLOR_WRITE_ENABLE_BLUE = 4,
  D3D11_COLOR_WRITE_ENABLE_ALPHA = 8,
  D3D11_COLOR_WRITE_ENABLE_ALL = 15,
};

class phys_free_list<rigid_body_constraint_point>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_point>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<rigid_body_constraint_point>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<rigid_body_constraint_point>
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_point>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ class rigid_body_constraint_point* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

enum IKHandNames
{
  IKHAND_LEFT = 0,
  IKHAND_RIGHT = 1,
  IKHAND_COUNT = 2,
};

enum tagTYPEKIND
{
  TKIND_ENUM = 0,
  TKIND_RECORD = 1,
  TKIND_MODULE = 2,
  TKIND_INTERFACE = 3,
  TKIND_DISPATCH = 4,
  TKIND_COCLASS = 5,
  TKIND_ALIAS = 6,
  TKIND_UNION = 7,
  TKIND_MAX = 8,
};

typedef enum _TAG_UNNAMED_9
{
  PRIM_POINTLIST = 1,
  PRIM_LINELIST = 2,
  PRIM_LINESTRIP = 3,
  PRIM_TRIANGLELIST = 4,
  PRIM_TRIANGLESTRIP = 5,
  PRIM_TRIANGLEFAN = -1,
  PRIM_QUADLIST = -1,
  PRIM_QUADSTRIP = -1,
  PRIM_RECTLIST = -1,
} TAG_UNNAMED_9, *PTAG_UNNAMED_9;

enum SphereEdgeTraceResult
{
  SPHERE_HITS_EDGE = 0,
  SPHERE_MISSES_EDGE = 1,
  SPHERE_MAY_HIT_V0 = 2,
  SPHERE_MAY_HIT_V1 = 3,
};

enum D3D11_MESSAGE_CATEGORY
{
  D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0,
  D3D11_MESSAGE_CATEGORY_MISCELLANEOUS = 1,
  D3D11_MESSAGE_CATEGORY_INITIALIZATION = 2,
  D3D11_MESSAGE_CATEGORY_CLEANUP = 3,
  D3D11_MESSAGE_CATEGORY_COMPILATION = 4,
  D3D11_MESSAGE_CATEGORY_STATE_CREATION = 5,
  D3D11_MESSAGE_CATEGORY_STATE_SETTING = 6,
  D3D11_MESSAGE_CATEGORY_STATE_GETTING = 7,
  D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8,
  D3D11_MESSAGE_CATEGORY_EXECUTION = 9,
};

enum bdBitBufferDataType
{
  BD_BB_NO_TYPE = 0,
  BD_BB_BOOL_TYPE = 1,
  BD_BB_SIGNED_CHAR8_TYPE = 2,
  BD_BB_UNSIGNED_CHAR8_TYPE = 3,
  BD_BB_WCHAR16_TYPE = 4,
  BD_BB_SIGNED_INTEGER16_TYPE = 5,
  BD_BB_UNSIGNED_INTEGER16_TYPE = 6,
  BD_BB_SIGNED_INTEGER32_TYPE = 7,
  BD_BB_UNSIGNED_INTEGER32_TYPE = 8,
  BD_BB_SIGNED_INTEGER64_TYPE = 9,
  BD_BB_UNSIGNED_INTEGER64_TYPE = 10,
  BD_BB_RANGED_SIGNED_INTEGER32_TYPE = 11,
  BD_BB_RANGED_UNSIGNED_INTEGER32_TYPE = 12,
  BD_BB_FLOAT32_TYPE = 13,
  BD_BB_FLOAT64_TYPE = 14,
  BD_BB_RANGED_FLOAT32_TYPE = 15,
  BD_BB_SIGNED_CHAR8_STRING_TYPE = 16,
  BD_BB_UNSIGNED_CHAR8_STRING_TYPE = 17,
  BD_BB_MBSTRING_TYPE = 18,
  BD_BB_BLOB_TYPE = 19,
  BD_BB_NAN_TYPE = 20,
  BD_BB_FULL_TYPE = 21,
  BD_BB_MAX_TYPE = 32,
};

typedef enum _TAG_UNNAMED_10
{
  FLAG_IS_BPI = 1,
  FLAG_IS_BPG = 2,
  FLAG_IS_BPI_ENV = 4,
  FLAG_IS_IN_CLUSTER = 16,
  FLAG_ON_ENV_LIST = 32,
  FLAG_ON_BPG_LIST = 64,
  FLAG_IS_AUTO_ACTIVATE = 128,
  BPB_FIRST_UNUSED_FLAG = 512,
} TAG_UNNAMED_10, *PTAG_UNNAMED_10;

enum D3D11_MESSAGE_SEVERITY
{
  D3D11_MESSAGE_SEVERITY_CORRUPTION = 0,
  D3D11_MESSAGE_SEVERITY_ERROR = 1,
  D3D11_MESSAGE_SEVERITY_WARNING = 2,
  D3D11_MESSAGE_SEVERITY_INFO = 3,
};

enum NV_DP_LINK_RATE
{
  NV_DP_1_62GBPS = 6,
  NV_DP_2_70GBPS = 10,
};

enum IKDebugColor
{
  IK_DEBUG_COLOR_RED = 0,
  IK_DEBUG_COLOR_GREEN = 1,
  IK_DEBUG_COLOR_BLUE = 2,
  IK_DEBUG_COLOR_LIGHT_CYAN = 3,
};

enum D3D11_MESSAGE_ID
{
  D3D11_MESSAGE_ID_UNKNOWN = 0,
  D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 1,
  D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 2,
  D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 3,
  D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 4,
  D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 5,
  D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 6,
  D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 7,
  D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 8,
  D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 9,
  D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 10,
  D3D11_MESSAGE_ID_STRING_FROM_APPLICATION = 11,
  D3D11_MESSAGE_ID_CORRUPTED_THIS = 12,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 = 13,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 = 14,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 = 15,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 = 16,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 = 17,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 = 18,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 = 19,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 = 20,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 = 21,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 = 22,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 = 23,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 = 24,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 = 25,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 = 26,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 = 27,
  D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING = 28,
  D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 29,
  D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 30,
  D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 31,
  D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 32,
  D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 33,
  D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 34,
  D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 35,
  D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 36,
  D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 37,
  D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 38,
  D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 39,
  D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 40,
  D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 41,
  D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 42,
  D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 43,
  D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 44,
  D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 45,
  D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 46,
  D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 47,
  D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 48,
  D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 49,
  D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 50,
  D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 51,
  D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 52,
  D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 53,
  D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 54,
  D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 55,
  D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 56,
  D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 57,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 58,
  D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 59,
  D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 60,
  D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 61,
  D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 62,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 63,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 64,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 65,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 66,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 67,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 68,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 69,
  D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 70,
  D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC = 71,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 72,
  D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 73,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 74,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 75,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 76,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 77,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 78,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 79,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 80,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 81,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 82,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 83,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 84,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 85,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 86,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 87,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 88,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 89,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 90,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 91,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 92,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 93,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 94,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 95,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 96,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 97,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 98,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 99,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 100,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 101,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 102,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 103,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 104,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 105,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 106,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 107,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 108,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 109,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 110,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 111,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 112,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 113,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 114,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 115,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 116,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 117,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 118,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 119,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 120,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 121,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 122,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 123,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 124,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 125,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 126,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 127,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 128,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 129,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 130,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 131,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 132,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 133,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 134,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 135,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 136,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 137,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 138,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 139,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 140,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 141,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 142,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 143,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 144,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 145,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 146,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 147,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 148,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 149,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 150,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 151,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 152,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 153,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 154,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 155,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 156,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 157,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 158,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 159,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 160,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 161,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 162,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 163,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 164,
  D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 165,
  D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 166,
  D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 167,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 168,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 169,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 170,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 171,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 172,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 173,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 174,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 175,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 176,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 177,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 178,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 179,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 180,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 181,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 182,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 183,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 184,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 185,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 186,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 187,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 188,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 189,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 190,
  D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 191,
  D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 192,
  D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 193,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 194,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 195,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 196,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 197,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 198,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 199,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 200,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 201,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 202,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 203,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 204,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 205,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 206,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 207,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 208,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 209,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 210,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 211,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 212,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 213,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 214,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 215,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 216,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 217,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 218,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 219,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 220,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 221,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 222,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 223,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 224,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 225,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 226,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 227,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 228,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 229,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 230,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 231,
  D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 232,
  D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 233,
  D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 234,
  D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 235,
  D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 236,
  D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 237,
  D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 238,
  D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 239,
  D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 240,
  D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 241,
  D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 242,
  D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 243,
  D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 244,
  D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 245,
  D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 246,
  D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 247,
  D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 248,
  D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 249,
  D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 250,
  D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 251,
  D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 252,
  D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 253,
  D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 254,
  D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 255,
  D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 256,
  D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 257,
  D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 258,
  D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 259,
  D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 260,
  D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 261,
  D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 262,
  D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 263,
  D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 264,
  D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 265,
  D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 266,
  D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 267,
  D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 268,
  D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 269,
  D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 270,
  D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 271,
  D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 272,
  D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 273,
  D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 274,
  D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 275,
  D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 276,
  D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 277,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 278,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 279,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 280,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 281,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 282,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 283,
  D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 284,
  D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 285,
  D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 286,
  D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 287,
  D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 288,
  D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 289,
  D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 290,
  D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 291,
  D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 292,
  D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 293,
  D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 294,
  D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 295,
  D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 296,
  D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 297,
  D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 298,
  D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 299,
  D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 300,
  D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 301,
  D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 302,
  D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 303,
  D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 304,
  D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 305,
  D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 306,
  D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 307,
  D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 308,
  D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 309,
  D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 310,
  D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 311,
  D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 312,
  D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 313,
  D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 314,
  D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 315,
  D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 316,
  D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 317,
  D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 318,
  D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 319,
  D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 320,
  D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 321,
  D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 322,
  D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 323,
  D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 324,
  D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 325,
  D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 326,
  D3D11_MESSAGE_ID_REF_THREADING_MODE = 327,
  D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 328,
  D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 329,
  D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 330,
  D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 331,
  D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 332,
  D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY = 333,
  D3D11_MESSAGE_ID_REF_INFO = 334,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 335,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 336,
  D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 337,
  D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 338,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 339,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 340,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 341,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 342,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 343,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 344,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 345,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 346,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 347,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 348,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 349,
  D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 350,
  D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 351,
  D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 352,
  D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 353,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 354,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 355,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 356,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 357,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 358,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 359,
  D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 360,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 361,
  D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 362,
  D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 363,
  D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 364,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 365,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 366,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 367,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 368,
  D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 369,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 370,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 371,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 372,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 373,
  D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 374,
  D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 375,
  D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 376,
  D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 377,
  D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 378,
  D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 379,
  D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 380,
  D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 381,
  D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 382,
  D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 383,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 384,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 385,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 386,
  D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 387,
  D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 388,
  D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 389,
  D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 390,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 391,
  D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 392,
  D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 393,
  D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 394,
  D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 395,
  D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 396,
  D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 397,
  D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 398,
  D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 399,
  D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 400,
  D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC = 401,
  D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 402,
  D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 403,
  D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 404,
  D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 405,
  D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 406,
  D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 407,
  D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 408,
  D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 409,
  D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 410,
  D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 411,
  D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 412,
  D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 413,
  D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 414,
  D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 415,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 416,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 417,
  D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 418,
  D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 419,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 420,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 421,
  D3D11_MESSAGE_ID_D3D10_MESSAGES_END = 422,
  D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START = 0x100000,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 0x100001,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 0x100002,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 0x100003,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 0x100004,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 0x100005,
  D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 0x100006,
  D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100007,
  D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100008,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 0x100009,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 0x10000a,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 0x10000b,
  D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 0x10000c,
  D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 0x10000d,
  D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 0x10000e,
  D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 0x10000f,
  D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 0x100010,
  D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 0x100011,
  D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 0x100012,
  D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 0x100013,
  D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 0x100014,
  D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 0x100015,
  D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 0x100016,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 0x100017,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 0x100018,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 0x100019,
  D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 0x10001a,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 0x10001b,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 0x10001c,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 0x10001d,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 0x10001e,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 0x10001f,
  D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 0x100020,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 0x100021,
  D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 0x100022,
  D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 0x100023,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 0x100024,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 0x100025,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 0x100026,
  D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 0x100027,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 0x100028,
  D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 0x100029,
  D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 0x10002a,
  D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 0x10002b,
  D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 0x10002c,
  D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 0x10002d,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 0x10002e,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 0x10002f,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 0x100030,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 0x100031,
  D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 0x100032,
  D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 0x100033,
  D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 0x100034,
  D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 0x100035,
  D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 0x100036,
  D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 0x100037,
  D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 0x100038,
  D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 0x100039,
  D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 0x10003a,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 0x10003b,
  D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 0x10003c,
  D3D11_MESSAGE_ID_D3D10L9_MESSAGES_END = 0x10003d,
  D3D11_MESSAGE_ID_D3D11_MESSAGES_START = 0x200000,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 0x200001,
  D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 0x200002,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 0x200003,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS = 0x200004,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 0x200005,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS = 0x200006,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE = 0x200007,
  D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 0x200008,
  D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS = 0x200009,
  D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED = 0x20000a,
  D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN = 0x20000b,
  D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN = 0x20000c,
  D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN = 0x20000d,
  D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT = 0x20000e,
  D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN = 0x20000f,
  D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN = 0x200010,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 0x200011,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 0x200012,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 0x200013,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 0x200014,
  D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD = 0x200015,
  D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD = 0x200016,
  D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x200017,
  D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x200018,
  D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL = 0x200019,
  D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 0x20001a,
  D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 0x20001b,
  D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 0x20001c,
  D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 0x20001d,
  D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY = 0x20001e,
  D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x20001f,
  D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200020,
  D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY = 0x200021,
  D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY = 0x200022,
  D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200023,
  D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY = 0x200024,
  D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD = 0x200025,
  D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD = 0x200026,
  D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x200027,
  D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x200028,
  D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL = 0x200029,
  D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 0x20002a,
  D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 0x20002b,
  D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 0x20002c,
  D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 0x20002d,
  D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY = 0x20002e,
  D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x20002f,
  D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200030,
  D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY = 0x200031,
  D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY = 0x200032,
  D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200033,
  D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY = 0x200034,
  D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH = 0x200035,
  D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT = 0x200036,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER = 0x200037,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED = 0x200038,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW = 0x200039,
  D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE = 0x20003a,
  D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE = 0x20003b,
  D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS = 0x20003c,
  D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED = 0x20003d,
  D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN = 0x20003e,
  D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN = 0x20003f,
  D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD = 0x200040,
  D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE = 0x200041,
  D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 0x200042,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS = 0x200043,
  D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED = 0x200044,
  D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH = 0x200045,
  D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 0x200046,
  D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 0x200047,
  D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 0x200048,
  D3D11_MESSAGE_ID_CREATE_CONTEXT = 0x200049,
  D3D11_MESSAGE_ID_LIVE_CONTEXT = 0x20004a,
  D3D11_MESSAGE_ID_DESTROY_CONTEXT = 0x20004b,
  D3D11_MESSAGE_ID_CREATE_BUFFER = 0x20004c,
  D3D11_MESSAGE_ID_LIVE_BUFFER = 0x20004d,
  D3D11_MESSAGE_ID_DESTROY_BUFFER = 0x20004e,
  D3D11_MESSAGE_ID_CREATE_TEXTURE1D = 0x20004f,
  D3D11_MESSAGE_ID_LIVE_TEXTURE1D = 0x200050,
  D3D11_MESSAGE_ID_DESTROY_TEXTURE1D = 0x200051,
  D3D11_MESSAGE_ID_CREATE_TEXTURE2D = 0x200052,
  D3D11_MESSAGE_ID_LIVE_TEXTURE2D = 0x200053,
  D3D11_MESSAGE_ID_DESTROY_TEXTURE2D = 0x200054,
  D3D11_MESSAGE_ID_CREATE_TEXTURE3D = 0x200055,
  D3D11_MESSAGE_ID_LIVE_TEXTURE3D = 0x200056,
  D3D11_MESSAGE_ID_DESTROY_TEXTURE3D = 0x200057,
  D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW = 0x200058,
  D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 0x200059,
  D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW = 0x20005a,
  D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW = 0x20005b,
  D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW = 0x20005c,
  D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW = 0x20005d,
  D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW = 0x20005e,
  D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 0x20005f,
  D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW = 0x200060,
  D3D11_MESSAGE_ID_CREATE_VERTEXSHADER = 0x200061,
  D3D11_MESSAGE_ID_LIVE_VERTEXSHADER = 0x200062,
  D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER = 0x200063,
  D3D11_MESSAGE_ID_CREATE_HULLSHADER = 0x200064,
  D3D11_MESSAGE_ID_LIVE_HULLSHADER = 0x200065,
  D3D11_MESSAGE_ID_DESTROY_HULLSHADER = 0x200066,
  D3D11_MESSAGE_ID_CREATE_DOMAINSHADER = 0x200067,
  D3D11_MESSAGE_ID_LIVE_DOMAINSHADER = 0x200068,
  D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER = 0x200069,
  D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER = 0x20006a,
  D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER = 0x20006b,
  D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER = 0x20006c,
  D3D11_MESSAGE_ID_CREATE_PIXELSHADER = 0x20006d,
  D3D11_MESSAGE_ID_LIVE_PIXELSHADER = 0x20006e,
  D3D11_MESSAGE_ID_DESTROY_PIXELSHADER = 0x20006f,
  D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT = 0x200070,
  D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT = 0x200071,
  D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT = 0x200072,
  D3D11_MESSAGE_ID_CREATE_SAMPLER = 0x200073,
  D3D11_MESSAGE_ID_LIVE_SAMPLER = 0x200074,
  D3D11_MESSAGE_ID_DESTROY_SAMPLER = 0x200075,
  D3D11_MESSAGE_ID_CREATE_BLENDSTATE = 0x200076,
  D3D11_MESSAGE_ID_LIVE_BLENDSTATE = 0x200077,
  D3D11_MESSAGE_ID_DESTROY_BLENDSTATE = 0x200078,
  D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE = 0x200079,
  D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 0x20007a,
  D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE = 0x20007b,
  D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE = 0x20007c,
  D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE = 0x20007d,
  D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE = 0x20007e,
  D3D11_MESSAGE_ID_CREATE_QUERY = 0x20007f,
  D3D11_MESSAGE_ID_LIVE_QUERY = 0x200080,
  D3D11_MESSAGE_ID_DESTROY_QUERY = 0x200081,
  D3D11_MESSAGE_ID_CREATE_PREDICATE = 0x200082,
  D3D11_MESSAGE_ID_LIVE_PREDICATE = 0x200083,
  D3D11_MESSAGE_ID_DESTROY_PREDICATE = 0x200084,
  D3D11_MESSAGE_ID_CREATE_COUNTER = 0x200085,
  D3D11_MESSAGE_ID_LIVE_COUNTER = 0x200086,
  D3D11_MESSAGE_ID_DESTROY_COUNTER = 0x200087,
  D3D11_MESSAGE_ID_CREATE_COMMANDLIST = 0x200088,
  D3D11_MESSAGE_ID_LIVE_COMMANDLIST = 0x200089,
  D3D11_MESSAGE_ID_DESTROY_COMMANDLIST = 0x20008a,
  D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE = 0x20008b,
  D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE = 0x20008c,
  D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE = 0x20008d,
  D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE = 0x20008e,
  D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE = 0x20008f,
  D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE = 0x200090,
  D3D11_MESSAGE_ID_LIVE_DEVICE = 0x200091,
  D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 0x200092,
  D3D11_MESSAGE_ID_CREATE_COMPUTESHADER = 0x200093,
  D3D11_MESSAGE_ID_LIVE_COMPUTESHADER = 0x200094,
  D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER = 0x200095,
  D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW = 0x200096,
  D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW = 0x200097,
  D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW = 0x200098,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL = 0x200099,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH = 0x20009a,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE = 0x20009b,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX = 0x20009c,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE = 0x20009d,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA = 0x20009e,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA = 0x20009f,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS = 0x2000a0,
  D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL = 0x2000a1,
  D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE = 0x2000a2,
  D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 0x2000a3,
  D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN = 0x2000a4,
  D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD = 0x2000a5,
  D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD = 0x2000a6,
  D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x2000a7,
  D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x2000a8,
  D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL = 0x2000a9,
  D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 0x2000aa,
  D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 0x2000ab,
  D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE = 0x2000ac,
  D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 0x2000ad,
  D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY = 0x2000ae,
  D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x2000af,
  D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x2000b0,
  D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY = 0x2000b1,
  D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY = 0x2000b2,
  D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x2000b3,
  D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY = 0x2000b4,
  D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000b5,
  D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000b6,
  D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000b7,
  D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000b8,
  D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000b9,
  D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000ba,
  D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000bb,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE = 0x2000bc,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS = 0x2000bd,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 0x2000be,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 0x2000bf,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 0x2000c0,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 0x2000c1,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 0x2000c2,
  D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD = 0x2000c3,
  D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS = 0x2000c4,
  D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP = 0x2000c5,
  D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 0x2000c6,
  D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 0x2000c7,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN = 0x2000c8,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN = 0x2000c9,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS = 0x2000ca,
  D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD = 0x2000cb,
  D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH = 0x2000cc,
  D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY = 0x2000cd,
  D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY = 0x2000ce,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 0x2000cf,
  D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS = 0x2000d0,
  D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER = 0x2000d1,
  D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED = 0x2000d2,
  D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW = 0x2000d3,
  D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT = 0x2000d4,
  D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE = 0x2000d5,
  D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD = 0x2000d6,
  D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT = 0x2000d7,
  D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE = 0x2000d8,
  D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT = 0x2000d9,
  D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY = 0x2000da,
  D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY = 0x2000db,
  D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED = 0x2000dc,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH = 0x2000dd,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET = 0x2000de,
  D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP = 0x2000df,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH = 0x2000e0,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED = 0x2000e1,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED = 0x2000e2,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH = 0x2000e3,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH = 0x2000e4,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED = 0x2000e5,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED = 0x2000e6,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED = 0x2000e7,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED = 0x2000e8,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED = 0x2000e9,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED = 0x2000ea,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED = 0x2000eb,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED = 0x2000ec,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED = 0x2000ed,
  D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED = 0x2000ee,
  D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW = 0x2000ef,
  D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO = 0x2000f0,
  D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH = 0x2000f1,
  D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH = 0x2000f2,
  D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED = 0x2000f3,
  D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED = 0x2000f4,
  D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED = 0x2000f5,
  D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET = 0x2000f6,
  D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET = 0x2000f7,
  D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE = 0x2000f8,
  D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE = 0x2000f9,
  D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED = 0x2000fa,
  D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW = 0x2000fb,
  D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET = 0x2000fc,
  D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 0x2000fd,
  D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT = 0x2000fe,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED = 0x2000ff,
  D3D11_MESSAGE_ID_REF_WARNING = 0x200100,
  D3D11_MESSAGE_ID_D3D11_MESSAGES_END = 0x200101,
};

class phys_vec3
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
  /* 0x0008 */ float z;
  /* 0x000c */ float w;
}; /* size: 0x0010 */

class phys_mat44
{
  /* 0x0000 */ class phys_vec3 x;
  /* 0x0010 */ class phys_vec3 y;
  /* 0x0020 */ class phys_vec3 z;
  /* 0x0030 */ class phys_vec3 w;
}; /* size: 0x0040 */

enum GfxPrimStatsTarget
{
  GFX_PRIM_STATS_FIRST = 0,
  GFX_PRIM_STATS_DEFAULT = 0,
  GFX_PRIM_STATS_WORLD = 1,
  GFX_PRIM_STATS_SMODELRIGID = 2,
  GFX_PRIM_STATS_XMODELRIGID = 3,
  GFX_PRIM_STATS_XMODELSKINNED = 4,
  GFX_PRIM_STATS_BMODEL = 5,
  GFX_PRIM_STATS_FX = 6,
  GFX_PRIM_STATS_HUD = 7,
  GFX_PRIM_STATS_DEBUG = 8,
  GFX_PRIM_STATS_CODE = 9,
  GFX_PRIM_STATS_LAST = 9,
  GFX_PRIM_STATS_COUNT = 10,
};

typedef enum _TAG_UNNAMED_11
{
  CS_GAME_VERSION = 2,
  CS_SERVERID = 3,
  CS_MESSAGE = 4,
  CS_SCORES1 = 5,
  CS_SCORES2 = 6,
  CS_CULLDIST = 7,
  CS_SUNLIGHT = 8,
  CS_SUNDIR = 9,
  CS_FOGVARS = 10,
  CS_MOTD = 11,
  CS_GAMEENDTIME = 12,
  CS_MAPCENTER = 13,
  CS_TIMESCALE = 14,
  CS_VOTE_TIME = 15,
  CS_VOTE_STRING = 16,
  CS_VOTE_YES = 17,
  CS_VOTE_NO = 18,
  CS_VOTE_MAPNAME = 19,
  CS_VOTE_GAMETYPE = 20,
  CS_MULTI_MAPWINNER = 21,
  CS_ENEMY_CROSSHAIR = 22,
  CS_CODINFO = 23,
  CS_CODINFO_LAST = 172,
  CS_CODINFO_VALUE = 173,
  CS_CODINFO_VALUE_LAST = 322,
  CS_PLAYERINFOS = 323,
  CS_PLAYERINFOS_LAST = 340,
  CS_SESSIONNONCE = 341,
  CS_PLAYEREMBLEMS = 342,
  CS_PLAYEREMBLEMS_LAST = 359,
  CS_TARGETS = 360,
  CS_TARGETS_LAST = 391,
  CS_USE_TRIG_STRINGS = 392,
  CS_USE_TRIG_STRINGS_LAST = 487,
  CS_LOCALIZED_STRINGS = 488,
  CS_LOCALIZED_STRINGS_LAST = 999,
  CS_CLIENTSYSTEM_NAMES = 1000,
  CS_CLIENTSYSTEM_NAMES_LAST = 1008,
  CS_CASE_INSENSITIVE_BEGIN = 1009,
  CS_AMBIENT = 1009,
  CS_RUMBLES = 1010,
  CS_RUMBLE_LAST = 1057,
  CS_NORTHYAW = 1058,
  CS_MINIMAP = 1059,
  CS_VISIONSET_NAKED = 1060,
  CS_VISIONSET_NIGHT = 1061,
  CS_NIGHTVISION = 1062,
  CS_LOC_SEL_MTLS = 1063,
  CS_LOC_SEL_MTLS_LAST = 1077,
  CS_MODELS = 1078,
  CS_MODELS_LAST = 1589,
  CS_EFFECT_NAMES = 1590,
  CS_EFFECT_NAMES_LAST = 1785,
  CS_EFFECT_TAGS = 1786,
  CS_EFFECT_TAGS_LAST = 2041,
  CS_SHELLSHOCKS = 2042,
  CS_SHELLSHOCKS_LAST = 2057,
  CS_SCRIPT_MENUS = 2058,
  CS_SCRIPT_MENUS_LAST = 2089,
  CS_SERVER_MATERIALS = 2090,
  CS_SERVER_MATERIALS_LAST = 2345,
  CS_WEAPONFILES = 2346,
  CS_WEAPONFILES_LAST = 2601,
  CS_STATUS_ICONS = 2602,
  CS_STATUS_ICONS_LAST = 2609,
  CS_HEAD_ICONS = 2610,
  CS_HEAD_ICONS_LAST = 2624,
  CS_TAGS = 2625,
  CS_TAGS_LAST = 2688,
  CS_ITEMS = 2689,
  CS_VEHICLE_TYPES = 2690,
  CS_VEHICLE_TYPES_LAST = 2721,
  CS_DESTRUCTIBLES = 2722,
  CS_DESTRUCTIBLES_LAST = 2785,
  CS_ANIMTREES = 2786,
  CS_ANIMTREES_LAST = 2801,
  CS_VISIONSET_LASTSTAND = 2802,
  CS_LEADERBOARDS = 2803,
  CS_SESSIONINFO = 2804,
  CS_MATCHID = 2805,
  MAX_CONFIGSTRINGS = 2806,
} TAG_UNNAMED_11, *PTAG_UNNAMED_11;

enum NV_HDMI_STEREO_TYPE
{
  NV_HDMI_STEREO_3D_NONE = 0,
  NV_STEREO_NVISION = 1,
  NV_HDMI_STEREO_3D_FRAME_PACKING = 2,
  NV_HDMI_STEREO_3D_FRAME_PACKING_INT = 3,
  NV_HDMI_STEREO_3D_LINE_ALT = 4,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_FULL = 5,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_HORIZONTAIL_ODD_LEFT_ODD_RIGHT = 6,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_HORIZONTAIL_ODD_LEFT_EVEN_RIGHT = 7,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_HORIZONTAIL_EVEN_LEFT_ODD_RIGHT = 8,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_HORIZONTAIL_EVEN_LEFT_EVEN_RIGHT = 9,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_QUINCUX_ODD_LEFT_ODD_RIGHT = 10,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_QUINCUX_ODD_LEFT_EVEN_RIGHT = 11,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_QUINCUX_EVEN_LEFT_ODD_RIGHT = 12,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_QUINCUX_EVEN_LEFT_EVEN_RIGHT = 13,
  NV_HDMI_STEREO_3D_FIELD_ALT = 14,
  NV_HDMI_STEREO_3D_L_DEPTH = 15,
  NV_HDMI_STEREO_3D_L_DEPTH_GFX = 16,
  NV_HDMI_STEREO_3D_ANY = 255,
};

class bdSessionParams
{
}; /* size: 0x0004 */

enum D3D_DRIVER_TYPE
{
  D3D_DRIVER_TYPE_UNKNOWN = 0,
  D3D_DRIVER_TYPE_HARDWARE = 1,
  D3D_DRIVER_TYPE_REFERENCE = 2,
  D3D_DRIVER_TYPE_NULL = 3,
  D3D_DRIVER_TYPE_SOFTWARE = 4,
  D3D_DRIVER_TYPE_WARP = 5,
};

enum PlayerSpreadOverrideState
{
  PSOS_DISABLED = 0,
  PSOS_RESETTING = 1,
  PSOS_ENABLED = 2,
};

enum hostDelegationState_t
{
  HOST_NOT_DELEGATED = 0,
  HOST_DELEGATING = 1,
  HOST_DELEGATED = 2,
  CLIENT_DELEGATE_INACTIVE = 3,
  CLIENT_CREATING_SESSION = 4,
  CLIENT_ACTIVE_DELEGATE = 5,
  CLIENT_ABORT = 6,
  HOST_DELEGATE_NUM_STATES = 7,
};

typedef enum _TAG_UNNAMED_12
{
  VAR_UNDEFINED = 0,
  VAR_BEGIN_REF = 1,
  VAR_POINTER = 1,
  VAR_STRING = 2,
  VAR_ISTRING = 3,
  VAR_VECTOR = 4,
  VAR_END_REF = 5,
  VAR_HASH = 5,
  VAR_FLOAT = 6,
  VAR_INTEGER = 7,
  VAR_CODEPOS = 8,
  VAR_PRECODEPOS = 9,
  VAR_FUNCTION = 10,
  VAR_STACK = 11,
  VAR_ANIMATION = 12,
  VAR_DEVELOPER_CODEPOS = 13,
  VAR_THREAD = 14,
  VAR_NOTIFY_THREAD = 15,
  VAR_TIME_THREAD = 16,
  VAR_CHILD_THREAD = 17,
  VAR_OBJECT = 18,
  VAR_DEAD_ENTITY = 19,
  VAR_ENTITY = 20,
  VAR_ARRAY = 21,
  VAR_DEAD_THREAD = 22,
  VAR_COUNT = 23,
  VAR_FREE = 23,
  VAR_THREAD_LIST = 24,
  VAR_ENT_LIST = 25,
  VAR_TOTAL_COUNT = 26,
} TAG_UNNAMED_12, *PTAG_UNNAMED_12;

enum tracerFieldType_t
{
  TFT_TRACERTYPE = 18,
  TFT_NUM_FIELD_TYPES = 19,
};

enum D3D_PRIMITIVE_TOPOLOGY
{
  D3D_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
  D3D_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
  D3D_PRIMITIVE_TOPOLOGY_LINELIST = 2,
  D3D_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
  D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
  D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
  D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
  D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
  D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
  D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
  D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
  D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
  D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
  D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
  D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
  D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
  D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
  D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
  D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
  D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
  D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
  D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
  D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
  D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
  D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
  D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
  D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
  D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
  D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
  D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
  D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
  D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
  D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
  D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
  D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
  D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
  D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
  D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
  D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
  D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
  D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
  D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64,
  D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
  D3D10_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
  D3D10_PRIMITIVE_TOPOLOGY_LINELIST = 2,
  D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
  D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
  D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
  D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
  D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
  D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
  D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
  D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
  D3D11_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
  D3D11_PRIMITIVE_TOPOLOGY_LINELIST = 2,
  D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
  D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
  D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
  D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
  D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
  D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
  D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
  D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
  D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
  D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
  D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
  D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
  D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
  D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
  D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
  D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
  D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
  D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
  D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
  D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
  D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
  D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
  D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
  D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
  D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
  D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
  D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
  D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
  D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
  D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
  D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
  D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
  D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
  D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
  D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
  D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
  D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
  D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
  D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64,
};

typedef enum _TAG_UNNAMED_13
{
  MT_TYPE_EMPTY = 0,
  MT_TYPE_THREAD = 1,
  MT_TYPE_VECTOR = 2,
  MT_TYPE_ANIM_NOTETRACK = 3,
  MT_TYPE_ANIM_TREE = 4,
  MT_TYPE_SMALL_ANIM_TREE = 5,
  MT_TYPE_EXTERNAL = 6,
  MT_TYPE_TEMP = 7,
  MT_TYPE_SURFACE = 8,
  MT_TYPE_ANIM_PART = 9,
  MT_TYPE_MODEL_PART = 10,
  MT_TYPE_MODEL_PART_MAP = 11,
  MT_TYPE_MODEL_DUPLICATE_PARTS = 12,
  MT_TYPE_MODEL_LIST = 13,
  MT_TYPE_SCRIPT_PARSE = 14,
  MT_TYPE_SCRIPT_STRING = 15,
  MT_TYPE_CLASS = 16,
  MT_TYPE_TAG_INFO = 17,
  MT_TYPE_ANIMSCRIPTED = 18,
  MT_TYPE_CONFIG_STRING = 19,
  MT_TYPE_DEBUGGER_STRING = 20,
  MT_TYPE_VEHICLE = 21,
  MT_TYPE_GENERIC = 22,
  MT_TYPE_COUNT = 23,
} TAG_UNNAMED_13, *PTAG_UNNAMED_13;

enum LeagueOutcome
{
  LEAGUE_OUTCOME_BASE = 0,
  LEAGUE_OUTCOME_WINNER = 1,
  LEAGUE_OUTCOME_LOSER = 2,
  LEAGUE_OUTCOME_PRE_LOSER = 3,
  LEAGUE_OUTCOME_RESET = 4,
  LEAGUE_OUTCOME_DRAW = 5,
};

enum doubleXPGroups_e
{
  DOUBLEXP_EVERYONE = 0,
  DOUBLEXP_PREORDER = 1,
  DOUBLEXP_ELITE_MEMBER = 2,
  DOUBLEXP_ELITE_FOUNDER = 3,
  DOUBLEXP_ELITE3 = 4,
  DOUBLEXP_ELITE_INVALID_MARKETING_OPTIN = 5,
  DOUBLEXP_GROUP_DLCALL = 6,
  DOUBLEXP_GROUP_DLCANY = 7,
  DOUBLEXP_GROUP_DLC0 = 8,
  DOUBLEXP_GROUP_DLC_FIRST = 8,
  DOUBLEXP_GROUP_DLCZM0 = 9,
  DOUBLEXP_GROUP_DLC1 = 10,
  DOUBLEXP_GROUP_DLC2 = 11,
  DOUBLEXP_GROUP_DLC3 = 12,
  DOUBLEXP_GROUP_DLC4 = 13,
  DOUBLEXP_GROUP_DLC5 = 14,
  DOUBLEXP_GROUP_DLCSEASONPASS = 15,
  DOUBLEXP_GROUP_DLC_LAST = 15,
  DOUBLEXP_GROUP_OWN_DLCALL = 16,
  DOUBLEXP_GROUP_OWN_DLCANY = 17,
  DOUBLEXP_GROUP_OWN_DLC0 = 18,
  DOUBLEXP_GROUP_OWN_DLC_FIRST = 18,
  DOUBLEXP_GROUP_OWN_DLCZM0 = 19,
  DOUBLEXP_GROUP_OWN_DLC1 = 20,
  DOUBLEXP_GROUP_OWN_DLC2 = 21,
  DOUBLEXP_GROUP_OWN_DLC3 = 22,
  DOUBLEXP_GROUP_OWN_DLC4 = 23,
  DOUBLEXP_GROUP_OWN_DLC5 = 24,
  DOUBLEXP_GROUP_OWN_DLCSEASONPASS = 25,
  DOUBLEXP_GROUP_OWN_DLC_LAST = 25,
  DOUBLEXP_GROUP_CE_NUKETOWN_2025 = 26,
  DOUBLEXP_GROUP_CE_NUKETOWN_Z = 27,
  DOUBLEXP_GROUP_CE_CAMO = 28,
  DOUBLEXP_GROUP_PHANTOM = 29,
  DOUBLEXP_GROUP_MISC5 = 30,
  DOUBLEXP_GROUP_MISC6 = 31,
  DOUBLEXP_GROUP_COUNT = 32,
};

class phys_link_list_base<pulse_sum_constraint_solver::temp_user_rigid_body>
{
  /* 0x0000 */ class pulse_sum_constraint_solver::temp_user_rigid_body* m_next_link;
}; /* size: 0x0004 */

enum tagCHANGEKIND
{
  CHANGEKIND_ADDMEMBER = 0,
  CHANGEKIND_DELETEMEMBER = 1,
  CHANGEKIND_SETNAMES = 2,
  CHANGEKIND_SETDOCUMENTATION = 3,
  CHANGEKIND_GENERAL = 4,
  CHANGEKIND_INVALIDATE = 5,
  CHANGEKIND_CHANGEFAILED = 6,
  CHANGEKIND_MAX = 7,
};

enum expOperationEnum
{
  OP_NOOP = 0,
  OP_RIGHTPAREN = 1,
  OP_MULTIPLY = 2,
  OP_DIVIDE = 3,
  OP_MODULUS = 4,
  OP_ADD = 5,
  OP_SUBTRACT = 6,
  OP_NEGATE = 7,
  OP_NOT = 8,
  OP_LESSTHAN = 9,
  OP_LESSTHANEQUALTO = 10,
  OP_GREATERTHAN = 11,
  OP_GREATERTHANEQUALTO = 12,
  OP_EQUALS = 13,
  OP_NOTEQUAL = 14,
  OP_AND = 15,
  OP_OR = 16,
  OP_LEFTPAREN = 17,
  OP_COMMA = 18,
  OP_BITWISEAND = 19,
  OP_BITWISEOR = 20,
  OP_BITWISENOT = 21,
  OP_BITSHIFTLEFT = 22,
  OP_BITSHIFTRIGHT = 23,
  NUM_EXPRESSION_OPERATORS = 24,
  MAX_OPERATOR_VALUE = 16384,
};

struct view_limits_t
{
  /* 0x0000 */ float horizSpanLeft;
  /* 0x0004 */ float horizSpanRight;
  /* 0x0008 */ float vertSpanUp;
  /* 0x000c */ float vertSpanDown;
  /* 0x0010 */ float horizResistLeft;
  /* 0x0014 */ float horizResistRight;
  /* 0x0018 */ float vertResistUp;
  /* 0x001c */ float vertResistDown;
}; /* size: 0x0020 */

typedef enum _TAG_UNNAMED_14
{
  GFX_SYM_FILTER_1 = 0,
  GFX_SYM_FILTER_2 = 1,
  GFX_SYM_FILTER_3 = 2,
  GFX_SYM_FILTER_4 = 3,
  GFX_SYM_FILTER_5 = 4,
  GFX_SYM_FILTER_6 = 5,
  GFX_SYM_FILTER_7 = 6,
  GFX_SYM_FILTER_8 = 7,
  GFX_SYM_FILTER_COUNT = 8,
} TAG_UNNAMED_14, *PTAG_UNNAMED_14;

typedef enum _TAG_UNNAMED_15
{
  FIRST_OBJECT = 14,
  FIRST_CLEARABLE_OBJECT = 18,
  LAST_NONENTITY_OBJECT = 18,
  FIRST_ENTITY_OBJECT = 20,
  FIRST_NONFIELD_OBJECT = 21,
  FIRST_DEAD_OBJECT = 22,
} TAG_UNNAMED_15, *PTAG_UNNAMED_15;

enum NV_GPS_THERM_LIMIT_SRC
{
  NV_GPS_THERM_LIMIT_SRC_USER_LIMITED = 1,
  NV_GPS_THERM_LIMIT_SRC_SBIOS_LIMITED = 2,
  NV_GPS_THERM_LIMIT_SRC_SBIOS_UNLIMITED = 3,
  NV_GPS_THERM_LIMIT_SRC_SBIOS_NOT_SUPPORTED = 4,
  NV_GPS_THERM_LIMIT_SRC_USER_DISABLED = 5,
};

enum RagdollBodyState
{
  BS_DEAD = 0,
  BS_DOBJ_WAIT = 1,
  BS_VELOCITY_CAPTURE = 2,
  BS_TUNNEL_TEST = 3,
  BS_RUNNING = 4,
  BS_IDLE = 5,
  RAGDOLL_NUM_STATES = 6,
};

enum bdLogMessageType
{
  BD_LOG_INFO = 0,
  BD_LOG_WARNING = 1,
  BD_LOG_ERROR = 2,
};

enum eAttachmentTableColumns
{
  ATTACHMENTTABLE_NUMBER = 0,
  ATTACHMENTTABLE_ATTACH_POINT = 1,
  ATTACHMENTTABLE_GROUP = 2,
  ATTACHMENTTABLE_NAME = 3,
  ATTACHMENTTABLE_REFERENCE = 4,
  ATTACHMENTTABLE_COUNT = 5,
  ATTACHMENTTABLE_IMAGE = 6,
  ATTACHMENTTABLE_DESCRIPTION = 7,
  ATTACHMENTTABLE_DATA_STRING = 8,
  ATTACHMENTTABLE_DATA_INT = 9,
  ATTACHMENTTABLE_DATA_INT2 = 10,
  ATTACHMENTTABLE_COMPATIBLE_ATTACHMENTS = 11,
  ATTACHMENTTABLE_ALLOCATION_COST = 12,
  ATTACHMENTTABLE_UNLOCK_LVL = 13,
  ATTACHMENTTABLE_UNLOCK_PLEVEL = 14,
  ATTACHMENTTABLE_COST = 15,
  ATTACHMENTTABLE_DEFAULT_PRIMARY_CLASS = 16,
  ATTACHMENTTABLE_DEFAULT_SECONDARY_CLASS = 17,
  ATTACHMENTTABLE_IS_ELITE = 18,
  MAX_ATTACHMENTTABLE_COUNT = 19,
};

enum mtxItemsColumns_e
{
  MTX_COLUMN_ID = 0,
  MTX_COLUMN_NAME = 1,
  MTX_COLUMN_OFFERID = 2,
  MTX_COLUMN_CATEGORY = 3,
  MTX_COLUMN_PS3PRODUCTNAME = 4,
  MTX_COLUMN_PCSTEAMAPPID = 5,
  MTX_COLUMN_ISHIDDEN = 6,
};

typedef enum _NVVIOVIDEOSTANDARD
{
  NVVIOVIDEOSTANDARD_SMPTE259 = 0,
  NVVIOVIDEOSTANDARD_SMPTE260 = 1,
  NVVIOVIDEOSTANDARD_SMPTE274 = 2,
  NVVIOVIDEOSTANDARD_SMPTE295 = 3,
  NVVIOVIDEOSTANDARD_SMPTE296 = 4,
  NVVIOVIDEOSTANDARD_SMPTE372 = 5,
} NVVIOVIDEOSTANDARD, *PNVVIOVIDEOSTANDARD;

typedef enum _TAG_UNNAMED_16
{
  FX_FLESHTYPE_BODY_NONFATAL = 0,
  FX_FLESHTYPE_BODY_FATAL = 1,
  FX_FLESHTYPE_HEAD_NONFATAL = 2,
  FX_FLESHTYPE_HEAD_FATAL = 3,
  FX_FLESHTYPE_COUNT = 4,
} TAG_UNNAMED_16, *PTAG_UNNAMED_16;

enum MaterialUpdateFrequency
{
  MTL_UPDATE_PER_PRIM = 0,
  MTL_UPDATE_PER_OBJECT = 1,
  MTL_UPDATE_RARELY = 2,
  MTL_UPDATE_CUSTOM = 3,
  MTL_UPDATE_IGNORE = 4,
};

enum FLAC__EntropyCodingMethodType
{
  FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE = 0,
  FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2 = 1,
};

enum D3D_PRIMITIVE
{
  D3D_PRIMITIVE_UNDEFINED = 0,
  D3D_PRIMITIVE_POINT = 1,
  D3D_PRIMITIVE_LINE = 2,
  D3D_PRIMITIVE_TRIANGLE = 3,
  D3D_PRIMITIVE_LINE_ADJ = 6,
  D3D_PRIMITIVE_TRIANGLE_ADJ = 7,
  D3D_PRIMITIVE_1_CONTROL_POINT_PATCH = 8,
  D3D_PRIMITIVE_2_CONTROL_POINT_PATCH = 9,
  D3D_PRIMITIVE_3_CONTROL_POINT_PATCH = 10,
  D3D_PRIMITIVE_4_CONTROL_POINT_PATCH = 11,
  D3D_PRIMITIVE_5_CONTROL_POINT_PATCH = 12,
  D3D_PRIMITIVE_6_CONTROL_POINT_PATCH = 13,
  D3D_PRIMITIVE_7_CONTROL_POINT_PATCH = 14,
  D3D_PRIMITIVE_8_CONTROL_POINT_PATCH = 15,
  D3D_PRIMITIVE_9_CONTROL_POINT_PATCH = 16,
  D3D_PRIMITIVE_10_CONTROL_POINT_PATCH = 17,
  D3D_PRIMITIVE_11_CONTROL_POINT_PATCH = 18,
  D3D_PRIMITIVE_12_CONTROL_POINT_PATCH = 19,
  D3D_PRIMITIVE_13_CONTROL_POINT_PATCH = 20,
  D3D_PRIMITIVE_14_CONTROL_POINT_PATCH = 21,
  D3D_PRIMITIVE_15_CONTROL_POINT_PATCH = 22,
  D3D_PRIMITIVE_16_CONTROL_POINT_PATCH = 23,
  D3D_PRIMITIVE_17_CONTROL_POINT_PATCH = 24,
  D3D_PRIMITIVE_18_CONTROL_POINT_PATCH = 25,
  D3D_PRIMITIVE_19_CONTROL_POINT_PATCH = 26,
  D3D_PRIMITIVE_20_CONTROL_POINT_PATCH = 28,
  D3D_PRIMITIVE_21_CONTROL_POINT_PATCH = 29,
  D3D_PRIMITIVE_22_CONTROL_POINT_PATCH = 30,
  D3D_PRIMITIVE_23_CONTROL_POINT_PATCH = 31,
  D3D_PRIMITIVE_24_CONTROL_POINT_PATCH = 32,
  D3D_PRIMITIVE_25_CONTROL_POINT_PATCH = 33,
  D3D_PRIMITIVE_26_CONTROL_POINT_PATCH = 34,
  D3D_PRIMITIVE_27_CONTROL_POINT_PATCH = 35,
  D3D_PRIMITIVE_28_CONTROL_POINT_PATCH = 36,
  D3D_PRIMITIVE_29_CONTROL_POINT_PATCH = 37,
  D3D_PRIMITIVE_30_CONTROL_POINT_PATCH = 38,
  D3D_PRIMITIVE_31_CONTROL_POINT_PATCH = 39,
  D3D_PRIMITIVE_32_CONTROL_POINT_PATCH = 40,
  D3D10_PRIMITIVE_UNDEFINED = 0,
  D3D10_PRIMITIVE_POINT = 1,
  D3D10_PRIMITIVE_LINE = 2,
  D3D10_PRIMITIVE_TRIANGLE = 3,
  D3D10_PRIMITIVE_LINE_ADJ = 6,
  D3D10_PRIMITIVE_TRIANGLE_ADJ = 7,
  D3D11_PRIMITIVE_UNDEFINED = 0,
  D3D11_PRIMITIVE_POINT = 1,
  D3D11_PRIMITIVE_LINE = 2,
  D3D11_PRIMITIVE_TRIANGLE = 3,
  D3D11_PRIMITIVE_LINE_ADJ = 6,
  D3D11_PRIMITIVE_TRIANGLE_ADJ = 7,
  D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH = 8,
  D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH = 9,
  D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH = 10,
  D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH = 11,
  D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH = 12,
  D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH = 13,
  D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH = 14,
  D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH = 15,
  D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH = 16,
  D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH = 17,
  D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH = 18,
  D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH = 19,
  D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH = 20,
  D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH = 21,
  D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH = 22,
  D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH = 23,
  D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH = 24,
  D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH = 25,
  D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH = 26,
  D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH = 28,
  D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH = 29,
  D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH = 30,
  D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH = 31,
  D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH = 32,
  D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH = 33,
  D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH = 34,
  D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH = 35,
  D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH = 36,
  D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH = 37,
  D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH = 38,
  D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH = 39,
  D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH = 40,
};

enum DEBUGMAYMOVE_LIFT_ENUM
{
  DEBUGMAYMOVE_NOT_LIFTED = 0,
  DEBUGMAYMOVE_LIFTED = 1,
};

enum tagCALLCONV
{
  CC_FASTCALL = 0,
  CC_CDECL = 1,
  CC_MSCPASCAL = 2,
  CC_PASCAL = 2,
  CC_MACPASCAL = 3,
  CC_STDCALL = 4,
  CC_FPFASTCALL = 5,
  CC_SYSCALL = 6,
  CC_MPWCDECL = 7,
  CC_MPWPASCAL = 8,
  CC_MAX = 9,
};

typedef enum _TAG_UNNAMED_17
{
  k_iCallback = 1005,
} TAG_UNNAMED_17, *PTAG_UNNAMED_17;

typedef enum _TAG_UNNAMED_18
{
  R_LIGHT_OVERRIDE_BLACK = 0,
  R_LIGHT_OVERRIDE_NONE = 1,
  R_LIGHT_OVERRIDE_INTENSITY_1 = 2,
  R_LIGHT_OVERRIDE_INTENSITY_2 = 3,
  R_LIGHT_OVERRIDE_INTENSITY_3 = 4,
  R_LIGHT_OVERRIDE_INTENSITY_4 = 5,
  R_LIGHT_OVERRIDE_INTENSITY_5 = 6,
  R_LIGHT_OVERRIDE_INTENSITY_6 = 7,
  R_LIGHT_OVERRIDE_INTENSITY_7 = 8,
  R_LIGHT_OVERRIDE_INTENSITY_8 = 9,
  R_LIGHT_OVERRIDE_INTENSITY_9 = 10,
  R_LIGHT_OVERRIDE_INTENSITY_10 = 11,
  R_LIGHT_OVERRIDE_INTENSITY_11 = 12,
  R_LIGHT_OVERRIDE_INTENSITY_12 = 13,
  R_LIGHT_OVERRIDE_INTENSITY_13 = 14,
  R_LIGHT_OVERRIDE_INTENSITY_14 = 15,
  R_LIGHT_OVERRIDE_INTENSITY_15 = 16,
  R_LIGHT_OVERRIDE_INTENSITY_16 = 17,
  R_LIGHT_OVERRIDE_INTENSITY_17 = 18,
  R_LIGHT_OVERRIDE_INTENSITY_18 = 19,
  R_LIGHT_OVERRIDE_INTENSITY_19 = 20,
  R_LIGHT_OVERRIDE_INTENSITY_20 = 21,
  R_LIGHT_OVERRIDE_INTENSITY_21 = 22,
  R_LIGHT_OVERRIDE_INTENSITY_22 = 23,
  R_LIGHT_OVERRIDE_INTENSITY_23 = 24,
  R_LIGHT_OVERRIDE_INTENSITY_24 = 25,
  R_LIGHT_OVERRIDE_INTENSITY_25 = 26,
  R_LIGHT_OVERRIDE_INTENSITY_26 = 27,
  R_LIGHT_OVERRIDE_INTENSITY_27 = 28,
  R_LIGHT_OVERRIDE_INTENSITY_28 = 29,
  R_LIGHT_OVERRIDE_INTENSITY_29 = 30,
  R_LIGHT_OVERRIDE_INTENSITY_30 = 31,
  R_LIGHT_OVERRIDE_INTENSITY_31 = 32,
  R_LIGHT_OVERRIDE_COUNT = 33,
} TAG_UNNAMED_18, *PTAG_UNNAMED_18;

enum FLAC__SubframeType
{
  FLAC__SUBFRAME_TYPE_CONSTANT = 0,
  FLAC__SUBFRAME_TYPE_VERBATIM = 1,
  FLAC__SUBFRAME_TYPE_FIXED = 2,
  FLAC__SUBFRAME_TYPE_LPC = 3,
};

struct $_s__RTTIBaseClassArray$_extraBytes_4
{
  /* 0x0000 */ const struct _s__RTTIBaseClassDescriptor2* arrayOfBaseClassDescriptors[1];
  /* 0x0004 */ char __PADDING__[1];
}; /* size: 0x0005 */

typedef enum __MIDL_ICodeInstall_0001
{
  CIP_DISK_FULL = 0,
  CIP_ACCESS_DENIED = 1,
  CIP_NEWER_VERSION_EXISTS = 2,
  CIP_OLDER_VERSION_EXISTS = 3,
  CIP_NAME_CONFLICT = 4,
  CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 5,
  CIP_EXE_SELF_REGISTERATION_TIMEOUT = 6,
  CIP_UNSAFE_TO_ABORT = 7,
  CIP_NEED_REBOOT = 8,
  CIP_NEED_REBOOT_UI_PERMISSION = 9,
} _MIDL_ICodeInstall_0001, *P_MIDL_ICodeInstall_0001;

class EntHandle
{
  /* 0x0000 */ unsigned short number;
  /* 0x0002 */ unsigned short infoIndex;
}; /* size: 0x0004 */

struct entityShared_t
{
  /* 0x0000 */ unsigned char linked;
  /* 0x0001 */ unsigned char bmodel;
  /* 0x0002 */ unsigned char svFlags;
  /* 0x0003 */ unsigned char inuse;
  /* 0x0004 */ int broadcastTime;
  /* 0x0008 */ union vec3_t mins;
  /* 0x0014 */ union vec3_t maxs;
  /* 0x0020 */ int contents;
  /* 0x0024 */ union vec3_t absmin;
  /* 0x0030 */ union vec3_t absmax;
  /* 0x003c */ union vec3_t currentOrigin;
  /* 0x0048 */ union vec3_t currentAngles;
  /* 0x0054 */ class EntHandle ownerNum;
  /* 0x0058 */ int eventTime;
}; /* size: 0x005c */

typedef enum _TAG_UNNAMED_19
{
  SCR_XANIM_CLIENT = 0,
  SCR_XANIM_SERVER = 1,
  SCR_XANIM_COUNT = 2,
} TAG_UNNAMED_19, *PTAG_UNNAMED_19;

struct blowfish_key
{
  /* 0x0000 */ unsigned long S[256][4];
  /* 0x1000 */ unsigned long K[18];
}; /* size: 0x1048 */

typedef enum _TAG_UNNAMED_20
{
  BG_EMBLEM_ICON_TYPE_LOCKED = 0,
  BG_EMBLEM_ICON_TYPE_START = 1,
  BG_EMBLEM_ICON_TYPE_END = 15,
  BG_EMBLEM_ICON_TYPE_COUNT = 16,
} TAG_UNNAMED_20, *PTAG_UNNAMED_20;

typedef enum _FPIEEE_FORMAT
{
  _FpFormatFp32 = 0,
  _FpFormatFp64 = 1,
  _FpFormatFp80 = 2,
  _FpFormatFp128 = 3,
  _FpFormatI16 = 4,
  _FpFormatI32 = 5,
  _FpFormatI64 = 6,
  _FpFormatU16 = 7,
  _FpFormatU32 = 8,
  _FpFormatU64 = 9,
  _FpFormatBcd80 = 10,
  _FpFormatCompare = 11,
  _FpFormatString = 12,
} FPIEEE_FORMAT, *PFPIEEE_FORMAT;

struct XModelLodInfo
{
  /* 0x0000 */ float dist;
  /* 0x0004 */ unsigned short numsurfs;
  /* 0x0006 */ unsigned short surfIndex;
  /* 0x0008 */ int partBits[5];
}; /* size: 0x001c */

enum csParseFieldType_t
{
  CSPFT_STRING = 0,
  CSPFT_STRING_MAX_STRING_CHARS = 1,
  CSPFT_STRING_MAX_QPATH = 2,
  CSPFT_STRING_MAX_OSPATH = 3,
  CSPFT_INT = 4,
  CSPFT_UINT = 5,
  CSPFT_BOOL = 6,
  CSPFT_QBOOLEAN = 7,
  CSPFT_FLOAT = 8,
  CSPFT_MILLISECONDS = 9,
  CSPFT_FX = 10,
  CSPFT_XMODEL = 11,
  CSPFT_MATERIAL = 12,
  CSPFT_MATERIAL_STREAM = 13,
  CSPFT_PHYS_PRESET = 14,
  CSPFT_SCRIPT_STRING = 15,
  CSPFT_TRACER = 16,
  CSPFT_SOUND_ALIAS_ID = 17,
  CSPFT_NUM_BASE_FIELD_TYPES = 18,
};

enum NodeClaimSpecies
{
  NODE_CLAIM_SPECIES_BOT = 0,
  NODE_CLAIM_SPECIES_MAX = 1,
};

enum VehicleWheelType
{
  FL_WHEEL = 0,
  FR_WHEEL = 1,
  BL_WHEEL = 2,
  BR_WHEEL = 3,
  ML_WHEEL = 4,
  MR_WHEEL = 5,
  NUM_VEHICLE_WHEELS = 6,
};

typedef enum _FINDEX_SEARCH_OPS
{
  FindExSearchNameMatch = 0,
  FindExSearchLimitToDirectories = 1,
  FindExSearchLimitToDevices = 2,
  FindExSearchMaxSearchOp = 3,
} FINDEX_SEARCH_OPS, *PFINDEX_SEARCH_OPS;

class pulse_sum_cache
{
  /* 0x0000 */ float m_pulse_sum;
}; /* size: 0x0004 */

enum ENotificationPosition
{
  k_EPositionTopLeft = 0,
  k_EPositionTopRight = 1,
  k_EPositionBottomLeft = 2,
  k_EPositionBottomRight = 3,
};

typedef enum _TAG_UNNAMED_21
{
  MTL_ARG_MATERIAL_VERTEX_CONST = 0,
  MTL_ARG_LITERAL_VERTEX_CONST = 1,
  MTL_ARG_MATERIAL_PIXEL_SAMPLER = 2,
  MTL_ARG_CODE_PRIM_BEGIN = 3,
  MTL_ARG_CODE_VERTEX_CONST = 3,
  MTL_ARG_CODE_PIXEL_SAMPLER = 4,
  MTL_ARG_CODE_PIXEL_CONST = 5,
  MTL_ARG_CODE_PRIM_END = 6,
  MTL_ARG_MATERIAL_PIXEL_CONST = 6,
  MTL_ARG_LITERAL_PIXEL_CONST = 7,
  MLT_ARG_COUNT = 8,
} TAG_UNNAMED_21, *PTAG_UNNAMED_21;

enum D3D10_MESSAGE_CATEGORY
{
  D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0,
  D3D10_MESSAGE_CATEGORY_MISCELLANEOUS = 1,
  D3D10_MESSAGE_CATEGORY_INITIALIZATION = 2,
  D3D10_MESSAGE_CATEGORY_CLEANUP = 3,
  D3D10_MESSAGE_CATEGORY_COMPILATION = 4,
  D3D10_MESSAGE_CATEGORY_STATE_CREATION = 5,
  D3D10_MESSAGE_CATEGORY_STATE_SETTING = 6,
  D3D10_MESSAGE_CATEGORY_STATE_GETTING = 7,
  D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8,
  D3D10_MESSAGE_CATEGORY_EXECUTION = 9,
};

enum tagBINDSTRING
{
  BINDSTRING_HEADERS = 1,
  BINDSTRING_ACCEPT_MIMES = 2,
  BINDSTRING_EXTRA_URL = 3,
  BINDSTRING_LANGUAGE = 4,
  BINDSTRING_USERNAME = 5,
  BINDSTRING_PASSWORD = 6,
  BINDSTRING_UA_PIXELS = 7,
  BINDSTRING_UA_COLOR = 8,
  BINDSTRING_OS = 9,
  BINDSTRING_USER_AGENT = 10,
  BINDSTRING_ACCEPT_ENCODINGS = 11,
  BINDSTRING_POST_COOKIE = 12,
  BINDSTRING_POST_DATA_MIME = 13,
  BINDSTRING_URL = 14,
  BINDSTRING_IID = 15,
  BINDSTRING_FLAG_BIND_TO_OBJECT = 16,
  BINDSTRING_PTR_BIND_CONTEXT = 17,
};

enum c_pass_type
{
  main_pass = 0,
  huff_opt_pass = 1,
  output_pass = 2,
};

enum bdContentStreamingBase::bdStatus
{
  READY = 0,
  PRE_HTTP_OPERATION = 1,
  HTTP_OPERATION = 2,
  POST_HTTP_OPERATION = 3,
  DONE = 4,
  FAILED = 5,
};

class bdTag
{
  /* 0x0000 */ long Padding_1[2];
  /* 0x0008 */ unsigned __int64 m_priTag;
  /* 0x0010 */ unsigned __int64 m_secTag;
}; /* size: 0x0018 */

class bdFileMetaData
{
  /* 0x0000 */ long Padding_2[2];
  /* 0x0008 */ unsigned __int64 m_fileID;
  /* 0x0010 */ unsigned int m_createTime;
  /* 0x0014 */ unsigned int m_modifedTime;
  /* 0x0018 */ unsigned int m_fileSize;
  /* 0x001c */ long Padding_3;
  /* 0x0020 */ unsigned __int64 m_ownerID;
  /* 0x0028 */ char m_ownerName[64];
  /* 0x0068 */ unsigned short m_fileSlot;
  /* 0x006a */ char m_fileName[128];
  /* 0x00ea */ char m_url[384];
  /* 0x026a */ unsigned short m_category;
  /* 0x026c */ unsigned int m_numTags;
  /* 0x0270 */ unsigned char m_metaData[512];
  /* 0x0470 */ unsigned int m_metaDataSize;
  /* 0x0474 */ unsigned int m_summaryFileSize;
  /* 0x0478 */ class bdTag m_tags[60];
  /* 0x0a18 */ unsigned int m_numCopiesMade;
  /* 0x0a1c */ long Padding_4;
  /* 0x0a20 */ unsigned __int64 m_originID;
}; /* size: 0x0a28 */

class bdURL
{
  /* 0x0000 */ long Padding_5;
  /* 0x0004 */ char m_url[384];
  /* 0x0184 */ unsigned short m_serverType;
  /* 0x0186 */ char m_serverIndex[128];
  /* 0x0206 */ char Padding_6[2];
  /* 0x0208 */ unsigned __int64 m_fileID;
}; /* size: 0x0210 */

class bdPreCopyResult
{
  /* 0x0000 */ long Padding_7;
  /* 0x0004 */ class bdURL* m_source;
  /* 0x0008 */ char m_destination[384];
  /* 0x0188 */ unsigned int m_fileSize;
}; /* size: 0x018c */

class bdSummaryMetaHandler
{
}; /* size: 0x0a28 */

class bdReference<bdRemoteTask>
{
  /* 0x0000 */ class bdRemoteTask* m_ptr;
}; /* size: 0x0004 */

class bdStopwatch
{
  /* 0x0000 */ unsigned __int64 m_start;
}; /* size: 0x0008 */

class bdHTTPWrapper
{
  /* 0x0000 */ long Padding_8[8];
  /* 0x0020 */ void* m_curl;
  /* 0x0024 */ struct curl_slist* m_headerList;
  /* 0x0028 */ unsigned int m_bytesTransfered;
  /* 0x002c */ class bdDownloadInterceptor* m_downloadHandler;
  /* 0x0030 */ unsigned char* m_downloadBuffer;
  /* 0x0034 */ unsigned int m_downloadBufferSize;
  /* 0x0038 */ class bdUploadInterceptor* m_uploadHandler;
  /* 0x003c */ const unsigned char* m_uploadBuffer;
  /* 0x0040 */ unsigned int m_uploadSize;
  /* 0x0044 */ BOOL m_abortOperation;
  /* 0x0045 */ BOOL m_customVerification;
  /* 0x0046 */ char Padding_9[2];
  /* 0x0048 */ float m_dataRate;
  /* 0x004c */ long Padding_10;
  /* 0x0050 */ class bdStopwatch m_stopwatch;
  /* 0x0058 */ char* m_caPath;
  /* 0x005c */ char m_errorBuffer[1024];
  /* 0x045c */ int m_httpErrorCode;
  /* 0x0460 */ BOOL m_verboseOutput;
  /* 0x0461 */ BOOL m_progressMeter;
}; /* size: 0x0468 */

class bdHashMD5
{
}; /* size: 0x0004 */

class bdContentStreamingBase
{
  /* 0x0000 */ long Padding_11[2];
  /* 0x0008 */ unsigned int m_operation;
  /* 0x000c */ enum bdContentStreamingBase::bdStatus m_state;
  /* 0x0010 */ class bdUploadInterceptor* m_uploadHandler;
  /* 0x0014 */ long Padding_12;
  /* 0x0018 */ class bdFileMetaData m_taskData;
  /* 0x0a40 */ const void* m_uploadData;
  /* 0x0a44 */ class bdFileID* m_uploadFileID;
  /* 0x0a48 */ class bdURL m_URLs[3];
  /* 0x1078 */ const void* m_thumbData;
  /* 0x107c */ unsigned int m_thumbDataSize;
  /* 0x1080 */ unsigned short m_httpSite;
  /* 0x1082 */ BOOL m_sendChecksum;
  /* 0x1083 */ unsigned char m_checksum[33];
  /* 0x10a4 */ char m_clientLocale[16];
  /* 0x10b4 */ long Padding_13;
  /* 0x10b8 */ unsigned __int64 m_copySourceFileID;
  /* 0x10c0 */ BOOL m_wasCopyingPooledFile;
  /* 0x10c1 */ char Padding_14[3];
  /* 0x10c4 */ class bdDownloadInterceptor* m_downloadHandler;
  /* 0x10c8 */ class bdFileMetaData* m_downloadMetaData;
  /* 0x10cc */ void* m_downloadData;
  /* 0x10d0 */ unsigned int m_downloadDataSize;
  /* 0x10d4 */ unsigned int m_startByte;
  /* 0x10d8 */ unsigned int m_endByte;
  /* 0x10dc */ class bdPreCopyResult m_preCopyResults[3];
  /* 0x1580 */ BOOL m_uploadSummary;
  /* 0x1581 */ char Padding_15[7];
  /* 0x1588 */ class bdSummaryMetaHandler m_summaryMeta;
  /* 0x1fb0 */ class bdReference<bdRemoteTask> m_overallTask;
  /* 0x1fb4 */ class bdReference<bdRemoteTask> m_remoteTask;
  /* 0x1fb8 */ class bdHTTPWrapper m_http;
  /* 0x2420 */ class bdHashMD5 m_md5Hash;
  /* 0x2424 */ const class bdURL* m_testURLs;
  /* 0x2428 */ unsigned int m_testAddressCount;
  /* 0x242c */ BOOL m_useTestAddresses;
  /* 0x242d */ BOOL m_finalizeOnComplete;
  /* 0x242e */ char Padding_16[2];
  /* 0x2430 */ class bdRemoteTaskManager* m_remoteTaskManager;
  /* 0x0000 */ const char* const* s_statusStrings /* zero-length array */;
}; /* size: 0x2438 */

typedef struct _XMCOLOR
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int b : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned int g : 8; /* bit position: 8 */
      /* 0x0000 */ unsigned int r : 8; /* bit position: 16 */
      /* 0x0000 */ unsigned int a : 8; /* bit position: 24 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int c;
  }; /* size: 0x0004 */
} XMCOLOR, *PXMCOLOR; /* size: 0x0004 */

enum tagVARKIND
{
  VAR_PERINSTANCE = 0,
  VAR_STATIC = 1,
  VAR_CONST = 2,
  VAR_DISPATCH = 3,
};

typedef enum _TAG_UNNAMED_22
{
  SAMPLER_FILTER_SHIFT = 0,
  SAMPLER_FILTER_NEAREST = 1,
  SAMPLER_FILTER_LINEAR = 2,
  SAMPLER_FILTER_ANISO2X = 3,
  SAMPLER_FILTER_ANISO4X = 4,
  SAMPLER_FILTER_COMPARE = 5,
  SAMPLER_FILTER_MASK = 7,
  SAMPLER_MIPMAP_SHIFT = 3,
  SAMPLER_MIPMAP_DISABLED = 0,
  SAMPLER_MIPMAP_NEAREST = 8,
  SAMPLER_MIPMAP_LINEAR = 16,
  SAMPLER_MIPMAP_COUNT = 3,
  SAMPLER_MIPMAP_MASK = 24,
  SAMPLER_CLAMP_U_SHIFT = 5,
  SAMPLER_CLAMP_V_SHIFT = 6,
  SAMPLER_CLAMP_W_SHIFT = 7,
  SAMPLER_CLAMP_U = 32,
  SAMPLER_CLAMP_V = 64,
  SAMPLER_CLAMP_W = 128,
  SAMPLER_CLAMP_MASK = 224,
  SAMPLER_ANISO_SHIFT = 8,
  SAMPLER_ANISO_1X = 0,
  SAMPLER_ANISO_2X = 256,
  SAMPLER_ANISO_4X = 512,
  SAMPLER_ANISO_6X = 768,
  SAMPLER_ANISO_8X = 1024,
  SAMPLER_ANISO_10X = 1280,
  SAMPLER_ANISO_12X = 1536,
  SAMPLER_ANISO_16X = 1792,
  SAMPLER_ANISO_MASK = 1792,
  SAMPLER_CONVOLUTION = 0x20000,
  SAMPLER_GAMMA = 0x40000,
  SAMPLER_UNNORMALIZED_UV = 0x80000,
  SAMPLER_DIRECT_FILTER_UNNORMALIZED = 0x80000,
} TAG_UNNAMED_22, *PTAG_UNNAMED_22;

enum e_mapSelectionColumns
{
  FEEDER_MAPSELECTION_COLUMN_BACKGROUND = 0,
  FEEDER_MAPSELECTION_COLUMN_NAME = 1,
  FEEDER_MAPSELECTION_COLUMN_A_BUTTON = 2,
};

typedef struct _XMXICON4
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ __int64 x : 20; /* bit position: 0 */
      /* 0x0000 */ __int64 y : 20; /* bit position: 20 */
      /* 0x0000 */ __int64 z : 20; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 w : 4; /* bit position: 60 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 v;
  }; /* size: 0x0008 */
} XMXICON4, *PXMXICON4; /* size: 0x0008 */

typedef enum _TAG_UNNAMED_23
{
  VEH_ENGINESND_FADE_IN_START = 0,
  VEH_ENGINESND_FADE_IN_END = 1,
  VEH_ENGINESND_FADE_OUT_START = 2,
  VEH_ENGINESND_FADE_OUT_END = 3,
  VEH_ENGINESND_PITCH_REF = 4,
  NUM_VEHICLE_ENGINESND_PARAMS = 5,
} TAG_UNNAMED_23, *PTAG_UNNAMED_23;

struct scrVarDebugPub_t
{
  /* 0x0000 */ unsigned char** objectVarUsage;
  /* 0x0004 */ unsigned char** childVarUsage;
  /* 0x0008 */ unsigned short* extRefCount;
  /* 0x000c */ int* objectLeakCount;
  /* 0x0010 */ int* childLeakCount;
  /* 0x0014 */ BOOL dummy;
  /* 0x0015 */ char __PADDING__[3];
}; /* size: 0x0018 */

enum scriptAnimAIFunctionTypes_t
{
  AI_ANIM_FUNCTION_STOP = 0,
  AI_ANIM_FUNCTION_MOVE = 1,
  AI_ANIM_FUNCTION_COMBAT = 2,
  AI_ANIM_FUNCTION_PAIN = 3,
  AI_ANIM_FUNCTION_REACT = 4,
  AI_ANIM_FUNCTION_DEATH = 5,
};

enum VehicleMaterialSound
{
  VEH_WHEEL_ROAD_NOISE = 0,
  VEH_WHEEL_SLIDING = 1,
  VEH_WHEEL_PEELING_OUT = 2,
  NUM_VEHICLE_MATERIAL_SNDS = 3,
};

enum GfxRenderCommand
{
  RC_END_OF_LIST = 0,
  RC_SET_CUSTOM_CONSTANT = 1,
  RC_SET_MATERIAL_COLOR = 2,
  RC_SAVE_SCREEN = 3,
  RC_SAVE_SCREEN_SECTION = 4,
  RC_CLEAR_SCREEN = 5,
  RC_BEGIN_VIEW = 6,
  RC_SET_VIEWPORT = 7,
  RC_SET_SCISSOR = 8,
  RC_RESOLVE_COMPOSITE = 9,
  RC_PC_COPY_IMAGE_GEN_MIP = 10,
  RC_FIRST_NONCRITICAL = 11,
  RC_STRETCH_PIC = 11,
  RC_STRETCH_PIC_FLIP_ST = 12,
  RC_STRETCH_PIC_ROTATE_XY = 13,
  RC_STRETCH_PIC_ROTATE_ST = 14,
  RC_DRAW_QUAD_PIC = 15,
  RC_DRAW_FULL_SCREEN_COLORED_QUAD = 16,
  RC_DRAW_TEXT_2D = 17,
  RC_DRAW_TEXT_3D = 18,
  RC_BLEND_SAVED_SCREEN_BLURRED = 19,
  RC_BLEND_SAVED_SCREEN_FLASHED = 20,
  RC_DRAW_POINTS = 21,
  RC_DRAW_LINES = 22,
  RC_DRAW_UI_QUADS = 23,
  RC_DRAW_UI_QUADS_REPLACE_IMAGE = 24,
  RC_DRAW_TRIANGLES = 25,
  RC_DRAW_UI_TRIANGLES = 26,
  RC_DRAW_QUADLIST_2D = 27,
  RC_DRAW_EMBLEM_LAYER = 28,
  RC_STRETCH_COMPOSITE = 29,
  RC_PROJECTION_SET = 30,
  RC_DRAW_FRAMED = 31,
  RC_CONSTANT_SET = 32,
  RC_COUNT = 33,
};

typedef enum _TAG_UNNAMED_24
{
  OPERATOR = 0,
  OPERAND = 1,
  INVALID_ENTRY_TYPE = 2,
} TAG_UNNAMED_24, *PTAG_UNNAMED_24;

enum D3D10_MESSAGE_ID
{
  D3D10_MESSAGE_ID_UNKNOWN = 0,
  D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 1,
  D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 2,
  D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 3,
  D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 4,
  D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 5,
  D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 6,
  D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 7,
  D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 8,
  D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 9,
  D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 10,
  D3D10_MESSAGE_ID_STRING_FROM_APPLICATION = 11,
  D3D10_MESSAGE_ID_CORRUPTED_THIS = 12,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1 = 13,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2 = 14,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3 = 15,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4 = 16,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5 = 17,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6 = 18,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7 = 19,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8 = 20,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9 = 21,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10 = 22,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11 = 23,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12 = 24,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13 = 25,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14 = 26,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15 = 27,
  D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING = 28,
  D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 29,
  D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 30,
  D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 31,
  D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 32,
  D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 33,
  D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 34,
  D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 35,
  D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 36,
  D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 37,
  D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 38,
  D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 39,
  D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 40,
  D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 41,
  D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 42,
  D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 43,
  D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 44,
  D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 45,
  D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 46,
  D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 47,
  D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 48,
  D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 49,
  D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 50,
  D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 51,
  D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 52,
  D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 53,
  D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 54,
  D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 55,
  D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 56,
  D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 57,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 58,
  D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 59,
  D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 60,
  D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 61,
  D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 62,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 63,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 64,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 65,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 66,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 67,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 68,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 69,
  D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 70,
  D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC = 71,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 72,
  D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 73,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 74,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 75,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 76,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 77,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 78,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 79,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 80,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 81,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 82,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 83,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 84,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 85,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 86,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 87,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 88,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 89,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 90,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 91,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 92,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 93,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 94,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 95,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 96,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 97,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 98,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 99,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 100,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 101,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 102,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 103,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 104,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 105,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 106,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 107,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 108,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 109,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 110,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 111,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 112,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 113,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 114,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 115,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 116,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 117,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 118,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 119,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 120,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 121,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 122,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 123,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 124,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 125,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 126,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 127,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 128,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 129,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 130,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 131,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 132,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 133,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 134,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 135,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 136,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 137,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 138,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 139,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 140,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 141,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 142,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 143,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 144,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 145,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 146,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 147,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 148,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 149,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 150,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 151,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 152,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 153,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 154,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 155,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 156,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 157,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 158,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 159,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 160,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 161,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 162,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 163,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 164,
  D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 165,
  D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 166,
  D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 167,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 168,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 169,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 170,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 171,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 172,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 173,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 174,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 175,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 176,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 177,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 178,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 179,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 180,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 181,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 182,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 183,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 184,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 185,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 186,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 187,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 188,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 189,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 190,
  D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 191,
  D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 192,
  D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 193,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 194,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 195,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 196,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 197,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 198,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 199,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 200,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 201,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 202,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 203,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 204,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 205,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 206,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 207,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 208,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 209,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 210,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 211,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 212,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 213,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 214,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 215,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 216,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 217,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 218,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 219,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 220,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 221,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 222,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 223,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 224,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 225,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 226,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 227,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 228,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 229,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 230,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 231,
  D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 232,
  D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 233,
  D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 234,
  D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 235,
  D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 236,
  D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 237,
  D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 238,
  D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 239,
  D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 240,
  D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 241,
  D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 242,
  D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 243,
  D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 244,
  D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 245,
  D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 246,
  D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 247,
  D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 248,
  D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 249,
  D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 250,
  D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 251,
  D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 252,
  D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 253,
  D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 254,
  D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 255,
  D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 256,
  D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 257,
  D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 258,
  D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 259,
  D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 260,
  D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 261,
  D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 262,
  D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 263,
  D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 264,
  D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 265,
  D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 266,
  D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 267,
  D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 268,
  D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 269,
  D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 270,
  D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 271,
  D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 272,
  D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 273,
  D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 274,
  D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 275,
  D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 276,
  D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 277,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 278,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 279,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 280,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 281,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 282,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 283,
  D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 284,
  D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 285,
  D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 286,
  D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 287,
  D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 288,
  D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 289,
  D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 290,
  D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 291,
  D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 292,
  D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 293,
  D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 294,
  D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 295,
  D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 296,
  D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 297,
  D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 298,
  D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 299,
  D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 300,
  D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 301,
  D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 302,
  D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 303,
  D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 304,
  D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 305,
  D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 306,
  D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 307,
  D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 308,
  D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 309,
  D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 310,
  D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 311,
  D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 312,
  D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 313,
  D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 314,
  D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 315,
  D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 316,
  D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 317,
  D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 318,
  D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 319,
  D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 320,
  D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 321,
  D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 322,
  D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 323,
  D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 324,
  D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 325,
  D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 326,
  D3D10_MESSAGE_ID_REF_THREADING_MODE = 327,
  D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 328,
  D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 329,
  D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 330,
  D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 331,
  D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 332,
  D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY = 333,
  D3D10_MESSAGE_ID_REF_INFO = 334,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 335,
  D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 336,
  D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 337,
  D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 338,
  D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 339,
  D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 340,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 341,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 342,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 343,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 344,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 345,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 346,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 347,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 348,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 349,
  D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 350,
  D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 351,
  D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 352,
  D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 353,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 354,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 355,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 356,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 357,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 358,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 359,
  D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 360,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 361,
  D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 362,
  D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 363,
  D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 364,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 365,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 366,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 367,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 368,
  D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 369,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 370,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 371,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 372,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 373,
  D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 374,
  D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 375,
  D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 376,
  D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 377,
  D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 378,
  D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 379,
  D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 380,
  D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 381,
  D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 382,
  D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 383,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 384,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 385,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 386,
  D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 387,
  D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 388,
  D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 389,
  D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 390,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 391,
  D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 392,
  D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 393,
  D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 394,
  D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 395,
  D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 396,
  D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 397,
  D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 398,
  D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 399,
  D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 400,
  D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC = 401,
  D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 402,
  D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 403,
  D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 404,
  D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 405,
  D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 406,
  D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 407,
  D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 408,
  D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 409,
  D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 410,
  D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 411,
  D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 412,
  D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 413,
  D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 414,
  D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 415,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 416,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 417,
  D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 418,
  D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 419,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 420,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 421,
  D3D10_MESSAGE_ID_D3D10_MESSAGES_END = 422,
  D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START = 0x100000,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 0x100001,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 0x100002,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 0x100003,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 0x100004,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 0x100005,
  D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 0x100006,
  D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100007,
  D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100008,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 0x100009,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 0x10000a,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 0x10000b,
  D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 0x10000c,
  D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 0x10000d,
  D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 0x10000e,
  D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 0x10000f,
  D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 0x100010,
  D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 0x100011,
  D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 0x100012,
  D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 0x100013,
  D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 0x100014,
  D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 0x100015,
  D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 0x100016,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 0x100017,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 0x100018,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 0x100019,
  D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 0x10001a,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 0x10001b,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 0x10001c,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 0x10001d,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 0x10001e,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 0x10001f,
  D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 0x100020,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 0x100021,
  D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 0x100022,
  D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 0x100023,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 0x100024,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 0x100025,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 0x100026,
  D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 0x100027,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 0x100028,
  D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 0x100029,
  D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 0x10002a,
  D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 0x10002b,
  D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 0x10002c,
  D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 0x10002d,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 0x10002e,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 0x10002f,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 0x100030,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 0x100031,
  D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 0x100032,
  D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 0x100033,
  D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 0x100034,
  D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 0x100035,
  D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 0x100036,
  D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 0x100037,
  D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 0x100038,
  D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 0x100039,
  D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 0x10003a,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 0x10003b,
  D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 0x10003c,
  D3D10_MESSAGE_ID_D3D10L9_MESSAGES_END = 0x10003d,
};

enum trType_t
{
  TR_STATIONARY = 0,
  TR_INTERPOLATE = 1,
  TR_INTERPOLATE_MOVER = 2,
  TR_LINEAR = 3,
  TR_LINEAR_STOP = 4,
  TR_SINE = 5,
  TR_GRAVITY = 6,
  TR_LOW_GRAVITY = 7,
  TR_ACCELERATE = 8,
  TR_DECELERATE = 9,
  TR_PHYSICS = 10,
  TR_XDOLL = 11,
  TR_FIRST_RAGDOLL = 12,
  TR_RAGDOLL = 12,
  TR_RAGDOLL_GRAVITY = 13,
  TR_RAGDOLL_INTERPOLATE = 14,
  TR_LAST_RAGDOLL = 14,
  TR_MOON_GRAVITY = 15,
  NUM_TRTYPES = 16,
};

enum expDataType
{
  VAL_INT = 0,
  VAL_FLOAT = 1,
  VAL_STRING = 2,
  VAL_ADDRESS = 3,
  VAL_DVAR = 4,
};

union operandInternalDataUnion
{
  union
  {
    /* 0x0000 */ int intVal;
    /* 0x0000 */ float floatVal;
    /* 0x0000 */ const char* string;
    /* 0x0000 */ const struct dvar_t* dvar;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct Operand
{
  /* 0x0000 */ enum expDataType dataType;
  /* 0x0004 */ union operandInternalDataUnion internals;
}; /* size: 0x0008 */

enum MaterialVertexDeclType
{
  VERTDECL_GENERIC = 0,
  VERTDECL_PACKED = 1,
  VERTDECL_PACKED_LMAP_VC = 2,
  VERTDECL_WORLD = 3,
  VERTDECL_PACKED_WORLD = 4,
  VERTDECL_PACKED_WORLD_T1N0 = 5,
  VERTDECL_PACKED_WORLD_T1N1 = 6,
  VERTDECL_PACKED_WORLD_T2N0 = 7,
  VERTDECL_PACKED_WORLD_T2N1 = 8,
  VERTDECL_PACKED_WORLD_T2N2 = 9,
  VERTDECL_PACKED_WORLD_T3N0 = 10,
  VERTDECL_PACKED_WORLD_T3N1 = 11,
  VERTDECL_PACKED_WORLD_T3N2 = 12,
  VERTDECL_PACKED_WORLD_T4N0 = 13,
  VERTDECL_PACKED_WORLD_T4N1 = 14,
  VERTDECL_PACKED_WORLD_T4N2 = 15,
  VERTDECL_POS_TEX = 16,
  VERTDECL_PARTICLECLOUD = 17,
  VERTDECL_POS_COLOR = 18,
  VERTDECL_POS_FP16TEX = 19,
  VERTDECL_COUNT = 20,
};

struct MenuCell
{
  /* 0x0000 */ int type;
  /* 0x0004 */ int maxChars;
  /* 0x0008 */ char* stringValue;
}; /* size: 0x000c */

enum tagShutdownType
{
  IdleShutdown = 0,
  ForcedShutdown = 1,
};

enum rieType
{
  RIE_NONE = 0,
  RIE_NEARBYDEATH = 1,
  RIE_NEARBYEXPOSION = 2,
  RIE_NEARBYFRIENDLY = 3,
  RIE_NUMTYPES = 4,
};

enum scriptAnimMoveTypes_t
{
  ANIM_MT_UNUSED = 0,
  ANIM_MT_IDLE = 1,
  ANIM_MT_SHUFFLE = 2,
  ANIM_MT_WALK = 3,
  ANIM_MT_RUN = 4,
  ANIM_MT_CLIMBUP = 5,
  ANIM_MT_CLIMBDOWN = 6,
  ANIM_MT_SPRINT = 7,
  ANIM_MT_MANTLE_ROOT = 8,
  ANIM_MT_MANTLE_UP_57 = 9,
  ANIM_MT_MANTLE_UP_51 = 10,
  ANIM_MT_MANTLE_UP_45 = 11,
  ANIM_MT_MANTLE_UP_39 = 12,
  ANIM_MT_MANTLE_UP_33 = 13,
  ANIM_MT_MANTLE_UP_27 = 14,
  ANIM_MT_MANTLE_UP_21 = 15,
  ANIM_MT_MANTLE_OVER_HIGH = 16,
  ANIM_MT_MANTLE_OVER_MID = 17,
  ANIM_MT_MANTLE_OVER_LOW = 18,
  ANIM_MT_TURNRIGHT = 19,
  ANIM_MT_TURNLEFT = 20,
  ANIM_MT_STUMBLE = 21,
  ANIM_MT_STUMBLE_WALK = 22,
  ANIM_MT_STUMBLE_SPRINT = 23,
  ANIM_MT_SWIM = 24,
  ANIM_MT_DTP = 25,
  ANIM_MT_SLIDE = 26,
  NUM_ANIM_MOVETYPES = 27,
};

typedef enum _TAG_UNNAMED_25
{
  lkNormal = 0,
  lkPrealloc = 1,
  lkDeleted = 2,
} TAG_UNNAMED_25, *PTAG_UNNAMED_25;

typedef enum _TAG_UNNAMED_26
{
  PICMIP_PLATFORM_USED = 0,
  PICMIP_PLATFORM_MINSPEC = 1,
  PICMIP_PLATFORM_COUNT = 2,
} TAG_UNNAMED_26, *PTAG_UNNAMED_26;

enum TractionType
{
  TRACTION_TYPE_FRONT = 0,
  TRACTION_TYPE_BACK = 1,
  TRACTION_TYPE_ALL_WD = 2,
  NUM_TRACTION_TYPES = 3,
};

typedef enum _HEAP_INFORMATION_CLASS
{
  HeapCompatibilityInformation = 0,
  HeapEnableTerminationOnCorruption = 1,
} HEAP_INFORMATION_CLASS, *PHEAP_INFORMATION_CLASS;

enum perksEnum
{
  PERK_ADDITIONALPRIMARYWEAPON = 0,
  PERK_ARMORPIERCING = 1,
  PERK_ARMORVEST = 2,
  PERK_ACCURACY = 3,
  PERK_BULLETDMG = 4,
  PERK_REDUCEBULLETFLINCH = 5,
  PERK_EXTRABP = 6,
  PERK_DEADSHOT = 7,
  PERK_DELAYEXPLOSIVE = 8,
  PERK_DETECTEXPLOSIVE = 9,
  PERK_DISARMEXPLOSIVE = 10,
  PERK_EARNMOREMOMENTUM = 11,
  PERK_EXPLOSIVEDMG = 12,
  PERK_EXTRAAMMO = 13,
  PERK_FALLHEIGHT = 14,
  PERK_FASTADS = 15,
  PERK_FASTEQUIPMENTUSE = 16,
  PERK_FASTLADDERCLIMB = 17,
  PERK_FASTMANTLE = 18,
  PERK_FASTMELEE = 19,
  PERK_FASTRELOAD = 20,
  PERK_FASTTOSS = 21,
  PERK_FASTSWITCH = 22,
  PERK_FINALSTAND = 23,
  PERK_FIREPROOF = 24,
  PERK_FLAKJACKET = 25,
  PERK_FLASHPROTECTION = 26,
  PERK_JAMRADAR = 27,
  PERK_GRENADEDEATH = 28,
  PERK_HEALTHREGEN = 29,
  PERK_EXTRABREATH = 30,
  PERK_IMMUNECOUNTERUAV = 31,
  PERK_IMMUNEEMP = 32,
  PERK_IMMUNEMMS = 33,
  PERK_IMMUNENVTHERMAL = 34,
  PERK_IMMUNERANGEFINDER = 35,
  PERK_KILLSTREAK = 36,
  PERK_LONGERSPRINT = 37,
  PERK_LOUDENEMIES = 38,
  PERK_MARKSMAN = 39,
  PERK_MOVEFASTER = 40,
  PERK_NOMOTIONSENSOR = 41,
  PERK_NONAME = 42,
  PERK_NOTTARGETEDBYAIRSUPPORT = 43,
  PERK_NOKILLSTREAKRETICLE = 44,
  PERK_NOTTARGETEDBYSENTRY = 45,
  PERK_TOSSBACK = 46,
  PERK_PISTOLDEATH = 47,
  PERK_PROXIMITYPROTECTION = 48,
  PERK_QUICKREVIVE = 49,
  PERK_QUIETMOVE = 50,
  PERK_RECON = 51,
  PERK_RATEOFFIRE = 52,
  PERK_SCAVENGER = 53,
  PERK_SHOWENEMYEQUIPMENT = 54,
  PERK_STUNPROTECTION = 55,
  PERK_REDUCESHELLSHOCK = 56,
  PERK_SPRINTRECOVERY = 57,
  PERK_SHOWONRADAR = 58,
  PERK_STALKER = 59,
  PERK_TWOGRENADES = 60,
  PERK_TWOPRIMARIES = 61,
  PERK_UNLIMITEDSPRINT = 62,
  PERK_COUNT = 63,
  PERK_UNKNOWN = 63,
};

enum DXGI_MODE_ROTATION
{
  DXGI_MODE_ROTATION_UNSPECIFIED = 0,
  DXGI_MODE_ROTATION_IDENTITY = 1,
  DXGI_MODE_ROTATION_ROTATE90 = 2,
  DXGI_MODE_ROTATION_ROTATE180 = 3,
  DXGI_MODE_ROTATION_ROTATE270 = 4,
};

typedef enum _TAG_UNNAMED_27
{
  STACK_MAX_SIZE = 2,
} TAG_UNNAMED_27, *PTAG_UNNAMED_27;

enum D3D_SRV_DIMENSION
{
  D3D_SRV_DIMENSION_UNKNOWN = 0,
  D3D_SRV_DIMENSION_BUFFER = 1,
  D3D_SRV_DIMENSION_TEXTURE1D = 2,
  D3D_SRV_DIMENSION_TEXTURE1DARRAY = 3,
  D3D_SRV_DIMENSION_TEXTURE2D = 4,
  D3D_SRV_DIMENSION_TEXTURE2DARRAY = 5,
  D3D_SRV_DIMENSION_TEXTURE2DMS = 6,
  D3D_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
  D3D_SRV_DIMENSION_TEXTURE3D = 8,
  D3D_SRV_DIMENSION_TEXTURECUBE = 9,
  D3D_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
  D3D_SRV_DIMENSION_BUFFEREX = 11,
  D3D10_SRV_DIMENSION_UNKNOWN = 0,
  D3D10_SRV_DIMENSION_BUFFER = 1,
  D3D10_SRV_DIMENSION_TEXTURE1D = 2,
  D3D10_SRV_DIMENSION_TEXTURE1DARRAY = 3,
  D3D10_SRV_DIMENSION_TEXTURE2D = 4,
  D3D10_SRV_DIMENSION_TEXTURE2DARRAY = 5,
  D3D10_SRV_DIMENSION_TEXTURE2DMS = 6,
  D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
  D3D10_SRV_DIMENSION_TEXTURE3D = 8,
  D3D10_SRV_DIMENSION_TEXTURECUBE = 9,
  D3D10_1_SRV_DIMENSION_UNKNOWN = 0,
  D3D10_1_SRV_DIMENSION_BUFFER = 1,
  D3D10_1_SRV_DIMENSION_TEXTURE1D = 2,
  D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY = 3,
  D3D10_1_SRV_DIMENSION_TEXTURE2D = 4,
  D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY = 5,
  D3D10_1_SRV_DIMENSION_TEXTURE2DMS = 6,
  D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
  D3D10_1_SRV_DIMENSION_TEXTURE3D = 8,
  D3D10_1_SRV_DIMENSION_TEXTURECUBE = 9,
  D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
  D3D11_SRV_DIMENSION_UNKNOWN = 0,
  D3D11_SRV_DIMENSION_BUFFER = 1,
  D3D11_SRV_DIMENSION_TEXTURE1D = 2,
  D3D11_SRV_DIMENSION_TEXTURE1DARRAY = 3,
  D3D11_SRV_DIMENSION_TEXTURE2D = 4,
  D3D11_SRV_DIMENSION_TEXTURE2DARRAY = 5,
  D3D11_SRV_DIMENSION_TEXTURE2DMS = 6,
  D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
  D3D11_SRV_DIMENSION_TEXTURE3D = 8,
  D3D11_SRV_DIMENSION_TEXTURECUBE = 9,
  D3D11_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
  D3D11_SRV_DIMENSION_BUFFEREX = 11,
};

class phys_link_list<pulse_sum_node>
{
  /* 0x0000 */ class pulse_sum_node* m_first;
  /* 0x0004 */ class pulse_sum_node** m_last_next_ptr;
  /* 0x0008 */ int m_alloc_count;
}; /* size: 0x000c */

typedef enum _TAG_UNNAMED_28
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_28, *PTAG_UNNAMED_28;

enum team_t
{
  TEAM_FREE = 0,
  TEAM_BAD = 0,
  TEAM_ALLIES = 1,
  TEAM_AXIS = 2,
  TEAM_THREE = 3,
  TEAM_FOUR = 4,
  TEAM_FIVE = 5,
  TEAM_SIX = 6,
  TEAM_SEVEN = 7,
  TEAM_EIGHT = 8,
  TEAM_NUM_PLAYING_TEAMS = 9,
  TEAM_SPECTATOR = 9,
  TEAM_NUM_TEAMS = 10,
  TEAM_LOCALPLAYERS = 11,
  TEAM_FIRST_PLAYING_TEAM = 1,
  TEAM_LAST_PLAYING_TEAM = 8,
};

enum GfxBlendOp
{
  GFXS_BLENDOP_DISABLED = 0,
  GFXS_BLENDOP_ADD = 1,
  GFXS_BLENDOP_SUBTRACT = 2,
  GFXS_BLENDOP_REVSUBTRACT = 3,
  GFXS_BLENDOP_MIN = 4,
  GFXS_BLENDOP_MAX = 5,
  GFXS_BLENDOP_MASK = 7,
};

enum PlaylistLockState
{
  PLS_UNLOCKED = 0,
  PLS_FETCHING = 1,
  PLS_XP = 2,
  PLS_PLEVEL = 3,
  PLS_MAXPARTY = 4,
  PLS_MINPARTY = 5,
  PLS_GAMETYPEBAN = 6,
  PLS_FINISHEDSOLO = 7,
  PLS_REQUIRED_DLC_DISABLED = 8,
  PLS_REQUIRED_DLC_NOT_AVAILABLE = 9,
  PLS_CODPOINTS = 10,
  PLS_VISPROFILEVAR = 11,
  PLS_LOCALPLAYERS = 12,
  PLS_NOGUESTS = 13,
  PLS_COUNT = 14,
};

typedef enum _TAG_UNNAMED_29
{
  DAMAGE_RANGE_1 = 0,
  DAMAGE_RANGE_2 = 1,
  DAMAGE_RANGE_3 = 2,
  DAMAGE_RANGE_4 = 3,
  DAMAGE_RANGE_5 = 4,
  DAMAGE_RANGE_6 = 5,
  DAMAGE_RANGE_COUNT = 6,
  DAMAGE_RANGE_MAX = 0,
  DAMAGE_RANGE_MIN = 5,
} TAG_UNNAMED_29, *PTAG_UNNAMED_29;

struct ID3D11Texture1D
{
}; /* size: 0x0004 */

enum jqProcessor
{
  JQ_CORE_0 = 1,
  JQ_CORE_1 = 2,
  JQ_CORE_2 = 4,
  JQ_CORE_3 = 8,
  JQ_CORE_4 = 16,
  JQ_CORE_5 = 32,
  JQ_CORE_6 = 64,
  JQ_CORE_7 = 128,
  JQ_CORE_ALL = 255,
};

typedef enum _TAG_UNNAMED_30
{
  R_RENDERTARGET_NULL = 0,
  R_RENDERTARGET_SAVED_SCREEN = 1,
  R_RENDERTARGET_FRAME_BUFFER = 2,
  R_RENDERTARGET_FRAME_BUFFER_COMPOSITE = 3,
  R_RENDERTARGET_SCENE = 4,
  R_RENDERTARGET_SCENE_NULLCOLOR = 5,
  R_RENDERTARGET_RESOLVED_POST_SUN = 6,
  R_RENDERTARGET_RESOLVED_SCENE = 7,
  R_RENDERTARGET_FLOAT_Z = 8,
  R_RENDERTARGET_PINGPONG_0 = 9,
  R_RENDERTARGET_PINGPONG_1 = 10,
  R_RENDERTARGET_POST_EFFECT_SRC = 11,
  R_RENDERTARGET_POST_EFFECT_GODRAYS = 12,
  R_RENDERTARGET_POST_EFFECT_0 = 13,
  R_RENDERTARGET_POST_EFFECT_1 = 14,
  R_RENDERTARGET_SHADOWMAP_SUN = 15,
  R_RENDERTARGET_SHADOWMAP_SPOT = 16,
  R_RENDERTARGET_UI3D = 17,
  R_RENDERTARGET_UI3D_PING_PONG = 18,
  R_RENDERTARGET_MISSILE_CAM = 19,
  R_RENDERTARGET_FLOAT_Z_MISSILE_CAM = 20,
  R_RENDERTARGET_MISSILE_CAM_MULTI_0 = 21,
  R_RENDERTARGET_MISSILE_CAM_MULTI_1 = 22,
  R_RENDERTARGET_MISSILE_CAM_MULTI_2 = 23,
  R_RENDERTARGET_MISSILE_CAM_MULTI_3 = 24,
  R_RENDERTARGET_COMPOSITE = 25,
  R_RENDERTARGET_DOF_SCENE_MASK_PING = 26,
  R_RENDERTARGET_DOF_SCENE_MASK_PONG = 27,
  R_RENDERTARGET_DOF_SCENE_FP16 = 28,
  R_RENDERTARGET_DOF_SCENE_FP16_0 = 29,
  R_RENDERTARGET_DOF_SCENE_FP16_1 = 30,
  R_RENDERTARGET_DOF_SCENE_FP16_2 = 31,
  R_RENDERTARGET_DOF_SCENE_FP16_3 = 32,
  R_RENDERTARGET_DOF_SCENE_FP16_4 = 33,
  R_RENDERTARGET_DOF_SCENE_FP16_5 = 34,
  R_RENDERTARGET_DOF_SCENE_FINAL = 35,
  R_RENDERTARGET_BLOOM_MIP1_PING = 36,
  R_RENDERTARGET_BLOOM_MIP1_PONG = 37,
  R_RENDERTARGET_BLOOM_MIP2_PING = 38,
  R_RENDERTARGET_BLOOM_MIP2_PONG = 39,
  R_RENDERTARGET_BLOOM_MIP3_PING = 40,
  R_RENDERTARGET_BLOOM_MIP3_PONG = 41,
  R_RENDERTARGET_BLOOM_MIP4_PING = 42,
  R_RENDERTARGET_BLOOM_MIP4_PONG = 43,
  R_RENDERTARGET_BLOOM_STREAK = 44,
  R_RENDERTARGET_LUT2D = 45,
  R_RENDERTARGET_SSAO_CSZ = 46,
  R_RENDERTARGET_SSAO_CSZ_0 = 47,
  R_RENDERTARGET_SSAO_CSZ_1 = 48,
  R_RENDERTARGET_SSAO_CSZ_2 = 49,
  R_RENDERTARGET_SSAO_CSZ_3 = 50,
  R_RENDERTARGET_SSAO_CSZ_4 = 51,
  R_RENDERTARGET_SSAO_CSZ_5 = 52,
  R_RENDERTARGET_SSAO_1 = 53,
  R_RENDERTARGET_SSAO_2 = 54,
  R_RENDERTARGET_TXAA_FEEDBACK = 55,
  R_RENDERTARGET_TXAA_SRGB = 56,
  R_RENDERTARGET_SONAR = 57,
  R_RENDERTARGET_SONAR_BLUR = 58,
  R_RENDERTARGET_SHADOWMAP_SUN_HI_FULL = 59,
  R_RENDERTARGET_SHADOWMAP_SUN_HI_PARTITION_0 = 60,
  R_RENDERTARGET_SHADOWMAP_SUN_HI_PARTITION_1 = 61,
  R_RENDERTARGET_SHADOWMAP_SUN_LO_FULL = 62,
  R_RENDERTARGET_SHADOWMAP_SUN_LO_PARTITION_0 = 63,
  R_RENDERTARGET_SHADOWMAP_SUN_LO_PARTITION_1 = 64,
  R_RENDERTARGET_SHADOWMAP_SPOT_FULL = 65,
  R_RENDERTARGET_SHADOWMAP_SPOT_0 = 66,
  R_RENDERTARGET_SHADOWMAP_SPOT_1 = 67,
  R_RENDERTARGET_SHADOWMAP_SPOT_2 = 68,
  R_RENDERTARGET_SHADOWMAP_SPOT_3 = 69,
  R_RENDERTARGET_SHADOWMAP_SPOT_HI_0 = 70,
  R_RENDERTARGET_SHADOWMAP_SPOT_HI_1 = 71,
  R_RENDERTARGET_COUNT = 72,
  R_RENDERTARGET_NONE = 0,
} TAG_UNNAMED_30, *PTAG_UNNAMED_30;

struct D3D11_TEX2DMS_RTV
{
  /* 0x0000 */ unsigned int UnusedField_NothingToDefine;
}; /* size: 0x0004 */

enum scriptAnimEventTypes_t
{
  ANIM_ET_UNUSED = 0,
  ANIM_ET_DEATH = 1,
  ANIM_ET_FIREWEAPON = 2,
  ANIM_ET_JUMP = 3,
  ANIM_ET_LAND = 4,
  ANIM_ET_DROPWEAPON = 5,
  ANIM_ET_RAISEWEAPON = 6,
  ANIM_ET_FIRSTRAISEWEAPON = 7,
  ANIM_ET_RELOAD = 8,
  ANIM_ET_CROUCH_TO_PRONE = 9,
  ANIM_ET_PRONE_TO_CROUCH = 10,
  ANIM_ET_STAND_TO_CROUCH = 11,
  ANIM_ET_CROUCH_TO_STAND = 12,
  ANIM_ET_PRONE_TO_STAND = 13,
  ANIM_ET_PRONE_TO_SPRINT = 14,
  ANIM_ET_RUN_TO_IDLE = 15,
  ANIM_ET_MELEEATTACK = 16,
  ANIM_ET_MELEELEFT = 17,
  ANIM_ET_KNIFE_MELEE = 18,
  ANIM_ET_KNIFE_MELEE_CHARGE = 19,
  ANIM_ET_FLINCH = 20,
  ANIM_ET_SHELLSHOCK = 21,
  ANIM_ET_VEHICLE_ENTER = 22,
  ANIM_ET_VEHICLE_CHANGE_SEATS = 23,
  ANIM_ET_VEHICLE_EXIT = 24,
  ANIM_ET_SCRIPTEVENT = 25,
  ANIM_ET_DTP_TAKEOFF = 26,
  ANIM_ET_DTP_LAND = 27,
  ANIM_ET_STAND_TO_LASTSTAND = 28,
  ANIM_ET_CROUCH_TO_LASTSTAND = 29,
  ANIM_ET_PRONE_TO_LASTSTAND = 30,
  ANIM_ET_LASTSTAND_TO_STAND = 31,
  ANIM_ET_LASTSTAND_TO_CROUCH = 32,
  ANIM_ET_LASTSTAND_TO_PRONE = 33,
  ANIM_ET_FLARED = 34,
  ANIM_ET_LASTSTAND_SUICIDE = 35,
  ANIM_ET_PRIME_GRENADE = 36,
  NUM_ANIM_EVENTTYPES = 37,
};

enum NV_DP_LANE_COUNT
{
  NV_DP_1_LANE = 1,
  NV_DP_2_LANE = 2,
  NV_DP_4_LANE = 4,
};

typedef enum _TAG_UNNAMED_31
{
  DRT_ALL = 0,
  DRT_PLAYER = 1,
  DRT_PLAYERCLIP = 2,
  DRT_VEHICLE = 3,
  DRT_HELICOPTER = 4,
  DRT_AI_COLLISION = 5,
  DRT_AI_SIGHT = 6,
  DRT_WEAPON = 7,
  DRT_MANTLE = 8,
  DRT_PHYSICS = 9,
  DRT_AIM_ASSIST = 10,
  DRT_SPAWN_VISIBILITY = 11,
  DRT_TRIGGER = 12,
  DRT_CLIENTSIDE_TRIGGER = 13,
  MAX_DRT = 14,
} TAG_UNNAMED_31, *PTAG_UNNAMED_31;

enum jqWorkerType
{
  JQ_WORKER_GENERIC = 0,
  JQ_WORKER_MAX = 1,
  JQ_WORKER_DEFAULT = 0,
};

enum DNameStatus
{
  DN_valid = 0,
  DN_truncated = 1,
  DN_invalid = 2,
  DN_error = 3,
};

struct LerpEntityStateDestructibleHit
{
  /* 0x0000 */ unsigned int modelState[3];
}; /* size: 0x000c */

struct DestructibleState
{
  /* 0x0000 */ struct LerpEntityStateDestructibleHit state;
  /* 0x000c */ int time;
}; /* size: 0x0010 */

enum GfxTextureFunc
{
  GFXS_TEXFUNC_OP_SHIFT = 0,
  GFXS_TEXFUNC_DEST_SHIFT = 5,
  GFXS_TEXFUNC_ARG1_SHIFT = 10,
  GFXS_TEXFUNC_ARG2_SHIFT = 15,
  GFXS_TEXFUNC_ARG0_SHIFT = 20,
};

typedef enum _TAG_UNNAMED_32
{
  AIDEMOLOCKONVIEW_STANDING = 0,
  AIDEMOLOCKONVIEW_MISSING_LEGS = 1,
  AIDEMOLOCKONVIEW_COUNT = 2,
} TAG_UNNAMED_32, *PTAG_UNNAMED_32;

typedef enum _NVVIOOUTPUTAREA
{
  NVVIOOUTPUTAREA_FULLSIZE = 0,
  NVVIOOUTPUTAREA_SAFEACTION = 1,
  NVVIOOUTPUTAREA_SAFETITLE = 2,
} NVVIOOUTPUTAREA, *PNVVIOOUTPUTAREA;

enum state_t
{
  S_INIT = 0,
  S_EAT0L = 1,
  S_SIGNM = 2,
  S_GETL = 3,
  S_GETR = 4,
  S_POINT = 5,
  S_E = 6,
  S_SIGNE = 7,
  S_EAT0E = 8,
  S_GETE = 9,
  S_END = 10,
  S_E_IMPLICIT = 11,
};

struct sv_FxVisBlock_t
{
  /* 0x0000 */ const struct gentity_t* fxEnt;
  /* 0x0004 */ float radius;
}; /* size: 0x0008 */

struct fxLightingState_t
{
  /* 0x0000 */ float primaryLightFraction;
  /* 0x0004 */ int lightingOriginOffset;
}; /* size: 0x0008 */

typedef enum _TAG_UNNAMED_33
{
  STATMON_FPS = 0,
  STATMON_FILEACCESS = 1,
  STATMON_SOUNDCPU = 2,
  STATMON_MAXEFFECTS = 3,
  STATMON_SNAPSHOTENTS = 4,
  STATMON_TRIS = 5,
  STATMON_SERVERFPS = 6,
  STATMON_NET = 7,
  STATMON_DENSECOLLISION = 8,
  STATMON_IK = 9,
  STATMON_SCRIPTERROR = 10,
  STATMON_BANDWIDTHEXCEEDED = 11,
  STATMON_GAMESTATEEXCEEDED = 12,
  STATMON_BANDWIDTHLIMITED = 13,
  STATMON_COUNT = 14,
} TAG_UNNAMED_33, *PTAG_UNNAMED_33;

enum DemoType
{
  DEMO_TYPE_NONE = 0,
  DEMO_TYPE_CLIENT = 1,
  DEMO_TYPE_SERVER = 2,
  DEMO_TYPE_SERVER_SNAPSHOT = 3,
};

enum scoreBoardColumns_e
{
  SCOREBOARD_COLUMN_NEMESIS_BG = 0,
  SCOREBOARD_COLUMN_RANK_BG = 1,
  SCOREBOARD_COLUMN_RANK = 2,
  SCOREBOARD_COLUMN_RANK_ICON = 3,
  SCOREBOARD_COLUMN_NAME = 4,
  SCOREBOARD_COLUMN_1 = 5,
  SCOREBOARD_COLUMN_2 = 6,
  SCOREBOARD_COLUMN_3 = 7,
  SCOREBOARD_COLUMN_4 = 8,
  SCOREBOARD_COLUMN_5 = 9,
};

typedef struct _XMDECN4
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ int x : 10; /* bit position: 0 */
      /* 0x0000 */ int y : 10; /* bit position: 10 */
      /* 0x0000 */ int z : 10; /* bit position: 20 */
      /* 0x0000 */ int w : 2; /* bit position: 30 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMDECN4, *PXMDECN4; /* size: 0x0004 */

enum keyNum_t
{
  K_NONE = 0,
  K_FIRSTGAMEPADBUTTON_RANGE_1 = 1,
  K_BUTTON_A = 1,
  K_BUTTON_B = 2,
  K_BUTTON_X = 3,
  K_BUTTON_Y = 4,
  K_BUTTON_LSHLDR = 5,
  K_BUTTON_RSHLDR = 6,
  K_LASTGAMEPADBUTTON_RANGE_1 = 6,
  K_BS = 8,
  K_TAB = 9,
  K_NL = 10,
  K_ENTER = 13,
  K_FIRSTGAMEPADBUTTON_RANGE_2 = 14,
  K_BUTTON_START = 14,
  K_BUTTON_BACK = 15,
  K_BUTTON_LSTICK = 16,
  K_BUTTON_RSTICK = 17,
  K_BUTTON_LTRIG = 18,
  K_BUTTON_RTRIG = 19,
  K_DPAD_UP = 20,
  K_FIRSTDPAD = 20,
  K_DPAD_DOWN = 21,
  K_DPAD_LEFT = 22,
  K_DPAD_RIGHT = 23,
  K_BUTTON_RTRIG_PUSH = 24,
  K_BUTTON_LTRIG_PUSH = 25,
  K_BUTTON_LSTICK_ALTIMAGE2 = 16,
  K_BUTTON_RSTICK_ALTIMAGE2 = 17,
  K_BUTTON_LSTICK_ALTIMAGE = 188,
  K_NUNCHUK_RIGHT = 188,
  K_BUTTON_RSTICK_ALTIMAGE = 189,
  K_WIIUMOTE_RIGHT = 189,
  K_LASTDPAD = 23,
  K_DPAD_LEFTRIGHT = 24,
  K_DPAD_UPDOWN = 25,
  K_LASTGAMEPADBUTTON_RANGE_2 = 25,
  K_CODPOINTS = 26,
  K_ESCAPE = 27,
  K_FIRSTGAMEPADBUTTON_RANGE_3 = 28,
  K_APAD_UP = 28,
  K_FIRSTAPAD = 28,
  K_APAD_DOWN = 29,
  K_APAD_LEFT = 30,
  K_APAD_RIGHT = 31,
  K_LASTAPAD = 31,
  K_LASTGAMEPADBUTTON_RANGE_3 = 31,
  K_SPACE = 32,
  K_BACKSPACE = 127,
  K_ASCII_FIRST = 128,
  K_ASCII_181 = 128,
  K_ASCII_191 = 129,
  K_ASCII_223 = 130,
  K_ASCII_224 = 131,
  K_ASCII_225 = 132,
  K_ASCII_228 = 133,
  K_ASCII_229 = 134,
  K_ASCII_230 = 135,
  K_ASCII_231 = 136,
  K_ASCII_232 = 137,
  K_ASCII_233 = 138,
  K_ASCII_236 = 139,
  K_ASCII_241 = 140,
  K_ASCII_242 = 141,
  K_ASCII_243 = 142,
  K_ASCII_246 = 143,
  K_ASCII_248 = 144,
  K_ASCII_249 = 145,
  K_ASCII_250 = 146,
  K_ASCII_252 = 147,
  K_END_ASCII_CHARS = 148,
  K_COMMAND = 150,
  K_CAPSLOCK = 151,
  K_POWER = 152,
  K_PAUSE = 153,
  K_UPARROW = 154,
  K_DOWNARROW = 155,
  K_LEFTARROW = 156,
  K_RIGHTARROW = 157,
  K_ALT = 158,
  K_CTRL = 159,
  K_SHIFT = 160,
  K_INS = 161,
  K_DEL = 162,
  K_PGDN = 163,
  K_PGUP = 164,
  K_HOME = 165,
  K_END = 166,
  K_F1 = 167,
  K_F2 = 168,
  K_F3 = 169,
  K_F4 = 170,
  K_F5 = 171,
  K_F6 = 172,
  K_F7 = 173,
  K_F8 = 174,
  K_F9 = 175,
  K_F10 = 176,
  K_F11 = 177,
  K_F12 = 178,
  K_F13 = 179,
  K_F14 = 180,
  K_F15 = 181,
  K_KP_HOME = 182,
  K_KP_UPARROW = 183,
  K_KP_PGUP = 184,
  K_KP_LEFTARROW = 185,
  K_KP_5 = 186,
  K_KP_RIGHTARROW = 187,
  K_KP_END = 188,
  K_KP_DOWNARROW = 189,
  K_KP_PGDN = 190,
  K_KP_ENTER = 191,
  K_KP_INS = 192,
  K_KP_DEL = 193,
  K_KP_SLASH = 194,
  K_KP_MINUS = 195,
  K_KP_PLUS = 196,
  K_KP_NUMLOCK = 197,
  K_KP_STAR = 198,
  K_KP_EQUALS = 199,
  K_MOUSE1 = 200,
  K_MOUSE2 = 201,
  K_MOUSE3 = 202,
  K_MOUSE4 = 203,
  K_MOUSE5 = 204,
  K_MWHEELDOWN = 205,
  K_MWHEELUP = 206,
  K_AUX1 = 207,
  K_AUX2 = 208,
  K_AUX3 = 209,
  K_AUX4 = 210,
  K_AUX5 = 211,
  K_AUX6 = 212,
  K_AUX7 = 213,
  K_AUX8 = 214,
  K_AUX9 = 215,
  K_AUX10 = 216,
  K_AUX11 = 217,
  K_AUX12 = 218,
  K_AUX13 = 219,
  K_AUX14 = 220,
  K_AUX15 = 221,
  K_AUX16 = 222,
  K_LAST_KEY = 223,
};

typedef union __m128
{
  union
  {
    /* 0x0000 */ float m128_f32[4];
    /* 0x0000 */ unsigned __int64 m128_u64[2];
    /* 0x0000 */ char m128_i8[16];
    /* 0x0000 */ short m128_i16[8];
    /* 0x0000 */ int m128_i32[4];
    /* 0x0000 */ __int64 m128_i64[2];
    /* 0x0000 */ unsigned char m128_u8[16];
    /* 0x0000 */ unsigned short m128_u16[8];
    /* 0x0000 */ unsigned int m128_u32[4];
  }; /* size: 0x0010 */
} _m128, *P_m128; /* size: 0x0010 */

class hybrid_vector
{
  /* 0x0000 */ union __m128 vec;
}; /* size: 0x0010 */

struct colgeom_visitor_t
{
  /* 0x0000 */ long Padding_17[4];
  /* 0x0010 */ class hybrid_vector m_mn;
  /* 0x0020 */ class hybrid_vector m_mx;
  /* 0x0030 */ class hybrid_vector m_p0;
  /* 0x0040 */ class hybrid_vector m_p1;
  /* 0x0050 */ class hybrid_vector m_delta;
  /* 0x0060 */ class hybrid_vector m_rvec;
  /* 0x0070 */ float m_radius;
  /* 0x0074 */ int m_mask;
  /* 0x0078 */ struct TraceThreadInfo* m_threadInfo;
  /* 0x007c */ long __PADDING__[1];
}; /* size: 0x0080 */

typedef enum _TAG_UNNAMED_34
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_34, *PTAG_UNNAMED_34;

typedef enum _D3D_INCLUDE_TYPE
{
  D3D_INCLUDE_LOCAL = 0,
  D3D_INCLUDE_SYSTEM = 1,
  D3D10_INCLUDE_LOCAL = 0,
  D3D10_INCLUDE_SYSTEM = 1,
  D3D_INCLUDE_FORCE_DWORD = 0x7fffffff,
} D3D_INCLUDE_TYPE, *PD3D_INCLUDE_TYPE;

enum ai_substate_t
{
  STATE_EXPOSED_COMBAT = 100,
  STATE_EXPOSED_NONCOMBAT = 101,
  STATE_EXPOSED_REACQUIRE_MOVE = 102,
  STATE_EXPOSED_REACQUIRE_DONE = 103,
  STATE_EXPOSED_FLASHBANGED = 104,
  STATE_EXPOSED_REACTION = 105,
  STATE_DEATH_PRECLEANUP = 200,
  STATE_DEATH_POSTCLEANUP = 201,
  STATE_GRENADE_FLEE = 300,
  STATE_GRENADE_TAKECOVER = 301,
  STATE_GRENADE_COWER = 302,
  STATE_GRENADE_COMBAT = 303,
  STATE_GRENADE_COVERATTACK = 304,
  STATE_GRENADE_ACQUIRE = 305,
  STATE_GRENADE_THROWBACK = 306,
};

enum e_itemListColumns
{
  ITEM_LIST_COLUMN_BACKGROUND = 0,
  ITEM_LIST_COLUMN_NAME = 1,
  ITEM_LIST_COLUMN_IMAGE = 2,
  ITEM_LIST_COLUMN_COST = 3,
  ITEM_LIST_COLUMN_LOCK = 4,
  ITEM_LIST_COLUMN_COUNT = 5,
  ITEM_LIST_COLUMN_EXTRA_IMAGE = 6,
  ITEM_LIST_COLUMN_NEWICON = 7,
};

enum weapAnimFiles_t
{
  WEAP_ANIM_ROOT = 0,
  WEAP_ANIM_IDLE = 1,
  WEAP_ANIM_EMPTY_IDLE = 2,
  WEAP_ANIM_FIRE_INTRO = 3,
  WEAP_ANIM_FIRE = 4,
  WEAP_ANIM_HOLD_FIRE = 5,
  WEAP_ANIM_LASTSHOT = 6,
  WEAP_ANIM_FINALSHOT = 7,
  WEAP_ANIM_RECHAMBER = 8,
  WEAP_ANIM_MELEE = 9,
  WEAP_ANIM_MELEE1 = 10,
  WEAP_ANIM_MELEE2 = 11,
  WEAP_ANIM_MELEE3 = 12,
  WEAP_ANIM_MELEE_EMPTY = 13,
  WEAP_ANIM_MELEE_CHARGE = 14,
  WEAP_ANIM_MELEE_CHARGE_EMPTY = 15,
  WEAP_ANIM_RELOAD = 16,
  WEAP_ANIM_RELOAD_RIGHT = 17,
  WEAP_ANIM_RELOAD_EMPTY = 18,
  WEAP_ANIM_RELOAD_START = 19,
  WEAP_ANIM_RELOAD_END = 20,
  WEAP_ANIM_RELOAD_QUICK = 21,
  WEAP_ANIM_RELOAD_QUICK_EMPTY = 22,
  WEAP_ANIM_RAISE = 23,
  WEAP_ANIM_FIRST_RAISE = 24,
  WEAP_ANIM_DROP = 25,
  WEAP_ANIM_ALT_RAISE = 26,
  WEAP_ANIM_ALT_DROP = 27,
  WEAP_ANIM_QUICK_RAISE = 28,
  WEAP_ANIM_QUICK_DROP = 29,
  WEAP_ANIM_EMPTY_RAISE = 30,
  WEAP_ANIM_EMPTY_DROP = 31,
  WEAP_ANIM_SPRINT_IN = 32,
  WEAP_ANIM_SPRINT_LOOP = 33,
  WEAP_ANIM_SPRINT_OUT = 34,
  WEAP_ANIM_SPRINT_EMPTY_IN = 35,
  WEAP_ANIM_SPRINT_EMPTY_LOOP = 36,
  WEAP_ANIM_SPRINT_EMPTY_OUT = 37,
  WEAP_ANIM_LOWREADY_IN = 38,
  WEAP_ANIM_LOWREADY_LOOP = 39,
  WEAP_ANIM_LOWREADY_OUT = 40,
  WEAP_ANIM_CONT_FIRE_IN = 41,
  WEAP_ANIM_CONT_FIRE_LOOP = 42,
  WEAP_ANIM_CONT_FIRE_OUT = 43,
  WEAP_ANIM_CRAWL_IN = 44,
  WEAP_ANIM_CRAWL_FORWARD = 45,
  WEAP_ANIM_CRAWL_BACK = 46,
  WEAP_ANIM_CRAWL_RIGHT = 47,
  WEAP_ANIM_CRAWL_LEFT = 48,
  WEAP_ANIM_CRAWL_OUT = 49,
  WEAP_ANIM_CRAWL_EMPTY_IN = 50,
  WEAP_ANIM_CRAWL_EMPTY_FORWARD = 51,
  WEAP_ANIM_CRAWL_EMPTY_BACK = 52,
  WEAP_ANIM_CRAWL_EMPTY_RIGHT = 53,
  WEAP_ANIM_CRAWL_EMPTY_LEFT = 54,
  WEAP_ANIM_CRAWL_EMPTY_OUT = 55,
  WEAP_ANIM_DEPLOY = 56,
  WEAP_ANIM_BREAKDOWN = 57,
  WEAP_ANIM_DETONATE = 58,
  WEAP_ANIM_NIGHTVISION_WEAR = 59,
  WEAP_ANIM_NIGHTVISION_REMOVE = 60,
  WEAP_ANIM_ADS_FIRE = 61,
  WEAP_ANIM_ADS_LASTSHOT = 62,
  WEAP_ANIM_ADS_FIRE_INTRO = 63,
  WEAP_ANIM_ADS_RECHAMBER = 64,
  WEAP_ANIM_DTP_IN = 65,
  WEAP_ANIM_DTP_LOOP = 66,
  WEAP_ANIM_DTP_OUT = 67,
  WEAP_ANIM_DTP_EMPTY_IN = 68,
  WEAP_ANIM_DTP_EMPTY_LOOP = 69,
  WEAP_ANIM_DTP_EMPTY_OUT = 70,
  WEAP_ANIM_SLIDE_IN = 71,
  WEAP_ANIM_MANTLE = 72,
  WEAP_ANIM_CAMERA_SPRINT_LOOP = 73,
  WEAP_ANIM_CAMERA_DTP_IN = 74,
  WEAP_ANIM_CAMERA_DTP_LOOP = 75,
  WEAP_ANIM_CAMERA_DTP_OUT = 76,
  WEAP_ANIM_CAMERA_MANTLE = 77,
  WEAP_ANIM_FIRE_LEFT = 78,
  WEAP_ANIM_LASTSHOT_LEFT = 79,
  WEAP_ANIM_FINALSHOT_LEFT = 80,
  WEAP_ANIM_IDLE_LEFT = 81,
  WEAP_ANIM_EMPTY_IDLE_LEFT = 82,
  WEAP_ANIM_RELOAD_EMPTY_LEFT = 83,
  WEAP_ANIM_RELOAD_LEFT = 84,
  WEAP_ANIM_ADS_UP = 85,
  WEAP_ANIM_ADS_DOWN = 86,
  WEAP_ANIM_ADS_UP_OTHER_SCOPE = 87,
  NUM_WEAP_ANIMS = 88,
};

class pulse_sum_normal
{
  /* 0x0000 */ long Padding_18[4];
  /* 0x0010 */ class phys_vec3 m_ud;
  /* 0x0020 */ class phys_vec3 m_b1_r;
  /* 0x0030 */ class phys_vec3 m_b2_r;
  /* 0x0040 */ class phys_vec3 m_b1_ap;
  /* 0x0050 */ class phys_vec3 m_b2_ap;
  /* 0x0060 */ float m_pulse_sum_min;
  /* 0x0064 */ float m_pulse_sum_max;
  /* 0x0068 */ float m_pulse_sum;
  /* 0x006c */ float m_right_side;
  /* 0x0070 */ float m_big_dirt;
  /* 0x0074 */ float m_cfm;
  /* 0x0078 */ float m_denom;
  /* 0x007c */ float m_pulse_limit_ratio;
  /* 0x0080 */ unsigned int m_flags;
  /* 0x0084 */ class pulse_sum_normal* m_pulse_parent;
  /* 0x0088 */ class pulse_sum_node* m_b1;
  /* 0x008c */ class pulse_sum_node* m_b2;
  /* 0x0090 */ class pulse_sum_cache* m_pulse_sum_cache;
}; /* size: 0x00a0 */

class pulse_sum_wheel
{
  /* 0x0000 */ long Padding_19[4];
  /* 0x0010 */ class pulse_sum_normal m_suspension;
  /* 0x00b0 */ class pulse_sum_normal* m_side;
  /* 0x00b4 */ class pulse_sum_normal* m_fwd;
  /* 0x00b8 */ float m_side_fric_max;
}; /* size: 0x00c0 */

typedef enum _TAG_UNNAMED_35
{
  COL_PARTITION = 0,
  COL_BRUSH = 1,
} TAG_UNNAMED_35, *PTAG_UNNAMED_35;

struct vehicle_spline_node_t
{
  /* 0x0000 */ short nextIdx;
  /* 0x0002 */ short prevIdx;
  /* 0x0004 */ float length;
  /* 0x0008 */ union vec3_t dir;
  /* 0x0014 */ float t;
}; /* size: 0x0018 */

enum GfxTextureOp
{
  GFXS_TEXOP_DISABLE = 0,
  GFXS_TEXOP_SELECTARG1 = 1,
  GFXS_TEXOP_SELECTARG2 = 2,
  GFXS_TEXOP_MODULATE = 3,
  GFXS_TEXOP_MODULATE2X = 4,
  GFXS_TEXOP_MODULATE4X = 5,
  GFXS_TEXOP_ADD = 6,
  GFXS_TEXOP_ADDSIGNED = 7,
  GFXS_TEXOP_ADDSIGNED2X = 8,
  GFXS_TEXOP_SUBTRACT = 9,
  GFXS_TEXOP_ADDSMOOTH = 10,
  GFXS_TEXOP_BLENDDIFFUSEALPHA = 11,
  GFXS_TEXOP_BLENDTEXTUREALPHA = 12,
  GFXS_TEXOP_BLENDFACTORALPHA = 13,
  GFXS_TEXOP_BLENDTEXTUREALPHAPM = 14,
  GFXS_TEXOP_BLENDCURRENTALPHA = 15,
  GFXS_TEXOP_MODULATEALPHA_ADDCOLOR = 16,
  GFXS_TEXOP_MODULATECOLOR_ADDALPHA = 17,
  GFXS_TEXOP_MODULATEINVALPHA_ADDCOLOR = 18,
  GFXS_TEXOP_MODULATEINVCOLOR_ADDALPHA = 19,
  GFXS_TEXOP_DOTPRODUCT3 = 20,
  GFXS_TEXOP_MULTIPLYADD = 21,
  GFXS_TEXOP_LERP = 22,
  GFXS_TEXOP_COUNT = 23,
  GFXS_TEXOP_BITS = 5,
  GFXS_TEXOP_MASK = 31,
};

enum CoreStringTable
{
  CORE_TABLE_STATS = 0,
  CORE_TABLE_MILESTONE_0 = 1,
  CORE_TABLE_MILESTONE_FIRST = 1,
  CORE_TABLE_MILESTONE_1 = 2,
  CORE_TABLE_MILESTONE_2 = 3,
  CORE_TABLE_MILESTONE_3 = 4,
  CORE_TABLE_MILESTONE_LAST = 4,
  CORE_TABLE_GLOBAL_COUNTERS = 5,
  CORE_TABLE_GLOBAL_COUNTERS_REF = 6,
  CORE_TABLE_TRACKER_COLUMNS = 7,
  CORE_TABLE_SP_STATS = 8,
  CORE_TABLE_RANK_ICON = 9,
  CORE_TABLE_SCORE_INFO = 10,
  CORE_TABLE_GAMETYPES = 11,
  CORE_TABLE_GAMEMODES = 12,
  CORE_TABLE_RANK_ICON_ZM = 13,
  CORE_TABLE_GUNLEVELS = 14,
  CORE_TABLE_ZM_STATS = 15,
  CORE_TABLE_MTX_ITEMS = 16,
  CORE_TABLE_COUNT = 17,
};

enum NV_COOLER_CONTROLLER
{
  NVAPI_COOLER_CONTROLLER_NONE = 0,
  NVAPI_COOLER_CONTROLLER_ADI = 1,
  NVAPI_COOLER_CONTROLLER_INTERNAL = 2,
};

enum destructiblePieceFieldType_t
{
  DPFT_EXPLOSIVEDAMAGEONLY = 18,
  DPFT_EXPLOSIVEDAMAGEONLYD1 = 19,
  DPFT_EXPLOSIVEDAMAGEONLYD2 = 20,
  DPFT_EXPLOSIVEDAMAGEONLYD3 = 21,
  DPFT_EXPLOSIVEDAMAGEONLYD4 = 22,
  DPFT_MELEEDAMAGE = 23,
  DPFT_MELEEDAMAGED1 = 24,
  DPFT_MELEEDAMAGED2 = 25,
  DPFT_MELEEDAMAGED3 = 26,
  DPFT_MELEEDAMAGED4 = 27,
  DPFT_PARENTDAMAGE = 28,
  DPFT_PARENTDAMAGED1 = 29,
  DPFT_PARENTDAMAGED2 = 30,
  DPFT_PARENTDAMAGED3 = 31,
  DPFT_PARENTDAMAGED4 = 32,
  DPFT_PHYSICSONPARENTDEATH = 33,
  DPFT_PHYSICSONPARENTDEATHD1 = 34,
  DPFT_PHYSICSONPARENTDEATHD2 = 35,
  DPFT_PHYSICSONPARENTDEATHD3 = 36,
  DPFT_PHYSICSONPARENTDEATHD4 = 37,
  DPFT_MAX_FIELD_TYPES = 38,
};

enum statsLocation
{
  STATS_LOCATION_NORMAL = 0,
  STATS_LOCATION_FORCE_NORMAL = 1,
  STATS_LOCATION_BACKUP = 2,
  STATS_LOCATION_STABLE = 3,
  STATS_LOCATION_OTHERPLAYER = 4,
  STATS_LOCATION_COUNT = 5,
};

enum gjccc_create_type_e
{
  CT_CYLINDER = 0,
  CT_COLLMAP = 1,
};

typedef enum _TAG_UNNAMED_36
{
  qfalse = 0,
  qtrue = 1,
} TAG_UNNAMED_36, *PTAG_UNNAMED_36;

enum NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID
{
  NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID_TOTAL_GPU_POWER = 0,
};

typedef enum _RTC_ErrorNumber
{
  _RTC_CHKSTK = 0,
  _RTC_CVRT_LOSS_INFO = 1,
  _RTC_CORRUPT_STACK = 2,
  _RTC_UNINIT_LOCAL_USE = 3,
  _RTC_CORRUPTED_ALLOCA = 4,
  _RTC_ILLEGAL = 5,
} RTC_ErrorNumber, *PRTC_ErrorNumber;

typedef enum _TAG_UNNAMED_37
{
  IMGF_MIPMAPS = 1,
  IMGF_ALLOWPICMIP = 2,
  IMGF_CHARACTERMIP = 4,
  IMGF_LIGHTMAP = 8,
  IMGF_CLAMP_S = 16,
  IMGF_CLAMP_T = 32,
  IMGF_HEIGHTMAP = 64,
  IMGF_DELAYLOAD = 128,
  IMGF_NOOPT = 256,
  IMGF_SCREENDEPTH = 512,
  IMGF_TEXTURENAME = 1024,
  IMGF_SHEET_KEEP_FLAGS = 1,
} TAG_UNNAMED_37, *PTAG_UNNAMED_37;

struct sd_decoder_pcm16
{
  /* 0x0000 */ unsigned int channelCount;
  /* 0x0004 */ unsigned int frameOffsetIntoTopBuffer;
  /* 0x0008 */ const short* buffers[2];
  /* 0x0010 */ unsigned int bufferFrameCount[2];
}; /* size: 0x0018 */

enum GfxStencilFunc
{
  GFXS_STENCILFUNC_NEVER = 0,
  GFXS_STENCILFUNC_LESS = 1,
  GFXS_STENCILFUNC_EQUAL = 2,
  GFXS_STENCILFUNC_LESSEQUAL = 3,
  GFXS_STENCILFUNC_GREATER = 4,
  GFXS_STENCILFUNC_NOTEQUAL = 5,
  GFXS_STENCILFUNC_GREATEREQUAL = 6,
  GFXS_STENCILFUNC_ALWAYS = 7,
  GFXS_STENCILFUNC_COUNT = 8,
};

typedef enum _TAG_UNNAMED_38
{
  TDEFL_MAX_SUPPORTED_HUFF_CODESIZE = 32,
} TAG_UNNAMED_38, *PTAG_UNNAMED_38;

typedef enum _D3D_SHADER_VARIABLE_CLASS
{
  D3D_SVC_SCALAR = 0,
  D3D_SVC_VECTOR = 1,
  D3D_SVC_MATRIX_ROWS = 2,
  D3D_SVC_MATRIX_COLUMNS = 3,
  D3D_SVC_OBJECT = 4,
  D3D_SVC_STRUCT = 5,
  D3D_SVC_INTERFACE_CLASS = 6,
  D3D_SVC_INTERFACE_POINTER = 7,
  D3D10_SVC_SCALAR = 0,
  D3D10_SVC_VECTOR = 1,
  D3D10_SVC_MATRIX_ROWS = 2,
  D3D10_SVC_MATRIX_COLUMNS = 3,
  D3D10_SVC_OBJECT = 4,
  D3D10_SVC_STRUCT = 5,
  D3D11_SVC_INTERFACE_CLASS = 6,
  D3D11_SVC_INTERFACE_POINTER = 7,
  D3D_SVC_FORCE_DWORD = 0x7fffffff,
} D3D_SHADER_VARIABLE_CLASS, *PD3D_SHADER_VARIABLE_CLASS;

enum MaterialStateSet
{
  MTL_STATE_SET_ALPHA_TEST = 0,
  MTL_STATE_SET_BLEND_FUNC_RGB = 1,
  MTL_STATE_SET_BLEND_FUNC_ALPHA = 2,
  MTL_STATE_SET_CULL_FACE = 3,
  MTL_STATE_SET_DEPTH_TEST = 4,
  MTL_STATE_SET_DEPTH_WRITE = 5,
  MTL_STATE_SET_COLOR_WRITE = 6,
  MTL_STATE_SET_POLYGON_OFFSET = 7,
  MTL_STATE_SET_STENCIL = 8,
  MTL_STATE_SET_WIREFRAME = 9,
  MTL_STATE_SET_COUNT = 10,
};

typedef enum _TAG_UNNAMED_39
{
  MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIG = 0x6054b50,
  MZ_ZIP_CENTRAL_DIR_HEADER_SIG = 0x2014b50,
  MZ_ZIP_LOCAL_DIR_HEADER_SIG = 0x4034b50,
  MZ_ZIP_LOCAL_DIR_HEADER_SIZE = 30,
  MZ_ZIP_CENTRAL_DIR_HEADER_SIZE = 46,
  MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE = 22,
  MZ_ZIP_CDH_SIG_OFS = 0,
  MZ_ZIP_CDH_VERSION_MADE_BY_OFS = 4,
  MZ_ZIP_CDH_VERSION_NEEDED_OFS = 6,
  MZ_ZIP_CDH_BIT_FLAG_OFS = 8,
  MZ_ZIP_CDH_METHOD_OFS = 10,
  MZ_ZIP_CDH_FILE_TIME_OFS = 12,
  MZ_ZIP_CDH_FILE_DATE_OFS = 14,
  MZ_ZIP_CDH_CRC32_OFS = 16,
  MZ_ZIP_CDH_COMPRESSED_SIZE_OFS = 20,
  MZ_ZIP_CDH_DECOMPRESSED_SIZE_OFS = 24,
  MZ_ZIP_CDH_FILENAME_LEN_OFS = 28,
  MZ_ZIP_CDH_EXTRA_LEN_OFS = 30,
  MZ_ZIP_CDH_COMMENT_LEN_OFS = 32,
  MZ_ZIP_CDH_DISK_START_OFS = 34,
  MZ_ZIP_CDH_INTERNAL_ATTR_OFS = 36,
  MZ_ZIP_CDH_EXTERNAL_ATTR_OFS = 38,
  MZ_ZIP_CDH_LOCAL_HEADER_OFS = 42,
  MZ_ZIP_LDH_SIG_OFS = 0,
  MZ_ZIP_LDH_VERSION_NEEDED_OFS = 4,
  MZ_ZIP_LDH_BIT_FLAG_OFS = 6,
  MZ_ZIP_LDH_METHOD_OFS = 8,
  MZ_ZIP_LDH_FILE_TIME_OFS = 10,
  MZ_ZIP_LDH_FILE_DATE_OFS = 12,
  MZ_ZIP_LDH_CRC32_OFS = 14,
  MZ_ZIP_LDH_COMPRESSED_SIZE_OFS = 18,
  MZ_ZIP_LDH_DECOMPRESSED_SIZE_OFS = 22,
  MZ_ZIP_LDH_FILENAME_LEN_OFS = 26,
  MZ_ZIP_LDH_EXTRA_LEN_OFS = 28,
  MZ_ZIP_ECDH_SIG_OFS = 0,
  MZ_ZIP_ECDH_NUM_THIS_DISK_OFS = 4,
  MZ_ZIP_ECDH_NUM_DISK_CDIR_OFS = 6,
  MZ_ZIP_ECDH_CDIR_NUM_ENTRIES_ON_DISK_OFS = 8,
  MZ_ZIP_ECDH_CDIR_TOTAL_ENTRIES_OFS = 10,
  MZ_ZIP_ECDH_CDIR_SIZE_OFS = 12,
  MZ_ZIP_ECDH_CDIR_OFS_OFS = 16,
  MZ_ZIP_ECDH_COMMENT_SIZE_OFS = 20,
} TAG_UNNAMED_39, *PTAG_UNNAMED_39;

struct $_TypeDescriptor$_extraBytes_19
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[19];
}; /* size: 0x001b */

enum eWeaponOptionGroup
{
  WEAPONOPTION_GROUP_FIRST = 0,
  WEAPONOPTION_GROUP_CAMO = 0,
  WEAPONOPTION_GROUP_TAG = 1,
  WEAPONOPITON_GROUP_EMBLEM = 2,
  WEAPONOPTION_GROUP_FIRST_ATTACHMENT_OPTION = 3,
  WEAPONOPTION_GROUP_RETICLE = 3,
  WEAPONOPTION_GROUP_LENS = 4,
  WEAPONOPTION_GROUP_RETICLE_COLOR = 5,
  WEAPONOPTION_GROUP_LAST_ATTACHMENT_OPTION = 5,
  WEAPONOPTION_GROUP_COUNT = 6,
  WEAPONOPTION_GROUP_INVALID = 6,
};

typedef enum _D3D_SHADER_VARIABLE_FLAGS
{
  D3D_SVF_USERPACKED = 1,
  D3D_SVF_USED = 2,
  D3D_SVF_INTERFACE_POINTER = 4,
  D3D_SVF_INTERFACE_PARAMETER = 8,
  D3D10_SVF_USERPACKED = 1,
  D3D10_SVF_USED = 2,
  D3D11_SVF_INTERFACE_POINTER = 4,
  D3D11_SVF_INTERFACE_PARAMETER = 8,
  D3D_SVF_FORCE_DWORD = 0x7fffffff,
} D3D_SHADER_VARIABLE_FLAGS, *PD3D_SHADER_VARIABLE_FLAGS;

class bdFastArray<unsigned __int64>
{
  /* 0x0000 */ unsigned __int64* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

enum GfxStencilOp
{
  GFXS_STENCILOP_KEEP = 0,
  GFXS_STENCILOP_ZERO = 1,
  GFXS_STENCILOP_REPLACE = 2,
  GFXS_STENCILOP_INCRSAT = 3,
  GFXS_STENCILOP_DECRSAT = 4,
  GFXS_STENCILOP_INVERT = 5,
  GFXS_STENCILOP_INCR = 6,
  GFXS_STENCILOP_DECR = 7,
  GFXS_STENCILOP_COUNT = 8,
};

struct HashEntry
{
  /* 0x0000 */ unsigned int status_next;
  union
  {
    union
    {
      /* 0x0004 */ unsigned int prev;
      /* 0x0004 */ unsigned int str;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
}; /* size: 0x0008 */

struct tagVS_FIXEDFILEINFO
{
  /* 0x0000 */ unsigned long dwSignature;
  /* 0x0004 */ unsigned long dwStrucVersion;
  /* 0x0008 */ unsigned long dwFileVersionMS;
  /* 0x000c */ unsigned long dwFileVersionLS;
  /* 0x0010 */ unsigned long dwProductVersionMS;
  /* 0x0014 */ unsigned long dwProductVersionLS;
  /* 0x0018 */ unsigned long dwFileFlagsMask;
  /* 0x001c */ unsigned long dwFileFlags;
  /* 0x0020 */ unsigned long dwFileOS;
  /* 0x0024 */ unsigned long dwFileType;
  /* 0x0028 */ unsigned long dwFileSubtype;
  /* 0x002c */ unsigned long dwFileDateMS;
  /* 0x0030 */ unsigned long dwFileDateLS;
}; /* size: 0x0034 */

typedef struct _MINIDUMP_MODULE_CALLBACK
{
  /* 0x0000 */ wchar_t* FullPath;
  /* 0x0004 */ unsigned __int64 BaseOfImage;
  /* 0x000c */ unsigned long SizeOfImage;
  /* 0x0010 */ unsigned long CheckSum;
  /* 0x0014 */ unsigned long TimeDateStamp;
  /* 0x0018 */ struct tagVS_FIXEDFILEINFO VersionInfo;
  /* 0x004c */ void* CvRecord;
  /* 0x0050 */ unsigned long SizeOfCvRecord;
  /* 0x0054 */ void* MiscRecord;
  /* 0x0058 */ unsigned long SizeOfMiscRecord;
} MINIDUMP_MODULE_CALLBACK, *PMINIDUMP_MODULE_CALLBACK; /* size: 0x005c */

enum VehicleSeatPositions
{
  VEH_POS_NONE = -1,
  VEH_POS_DRIVER = 0,
  VEH_POS_MIN_GUNNER = 1,
  VEH_POS_GUNNER_1 = 1,
  VEH_POS_GUNNER_2 = 2,
  VEH_POS_GUNNER_3 = 3,
  VEH_POS_GUNNER_4 = 4,
  VEH_POS_MAX_GUNNER = 4,
  VEH_POS_MIN_PASSENGER = 5,
  VEH_POS_PASSENGER_1 = 5,
  VEH_POS_PASSENGER_2 = 6,
  VEH_POS_PASSENGER_3 = 7,
  VEH_POS_PASSENGER_4 = 8,
  VEH_POS_PASSENGER_5 = 9,
  VEH_POS_PASSENGER_6 = 10,
  VEH_POS_MAX_PASSENGER = 10,
  NUM_VEHICLE_POSITIONS = 11,
};

typedef enum _D3DFORMAT
{
  D3DFMT_UNKNOWN = 0,
  D3DFMT_R8G8B8 = 20,
  D3DFMT_A8R8G8B8 = 21,
  D3DFMT_X8R8G8B8 = 22,
  D3DFMT_R5G6B5 = 23,
  D3DFMT_X1R5G5B5 = 24,
  D3DFMT_A1R5G5B5 = 25,
  D3DFMT_A4R4G4B4 = 26,
  D3DFMT_R3G3B2 = 27,
  D3DFMT_A8 = 28,
  D3DFMT_A8R3G3B2 = 29,
  D3DFMT_X4R4G4B4 = 30,
  D3DFMT_A2B10G10R10 = 31,
  D3DFMT_A8B8G8R8 = 32,
  D3DFMT_X8B8G8R8 = 33,
  D3DFMT_G16R16 = 34,
  D3DFMT_A2R10G10B10 = 35,
  D3DFMT_A16B16G16R16 = 36,
  D3DFMT_A8P8 = 40,
  D3DFMT_P8 = 41,
  D3DFMT_L8 = 50,
  D3DFMT_A8L8 = 51,
  D3DFMT_A4L4 = 52,
  D3DFMT_V8U8 = 60,
  D3DFMT_L6V5U5 = 61,
  D3DFMT_X8L8V8U8 = 62,
  D3DFMT_Q8W8V8U8 = 63,
  D3DFMT_V16U16 = 64,
  D3DFMT_A2W10V10U10 = 67,
  D3DFMT_UYVY = 0x59565955,
  D3DFMT_R8G8_B8G8 = 0x47424752,
  D3DFMT_YUY2 = 0x32595559,
  D3DFMT_G8R8_G8B8 = 0x42475247,
  D3DFMT_DXT1 = 0x31545844,
  D3DFMT_DXT2 = 0x32545844,
  D3DFMT_DXT3 = 0x33545844,
  D3DFMT_DXT4 = 0x34545844,
  D3DFMT_DXT5 = 0x35545844,
  D3DFMT_D16_LOCKABLE = 70,
  D3DFMT_D32 = 71,
  D3DFMT_D15S1 = 73,
  D3DFMT_D24S8 = 75,
  D3DFMT_D24X8 = 77,
  D3DFMT_D24X4S4 = 79,
  D3DFMT_D16 = 80,
  D3DFMT_D32F_LOCKABLE = 82,
  D3DFMT_D24FS8 = 83,
  D3DFMT_D32_LOCKABLE = 84,
  D3DFMT_S8_LOCKABLE = 85,
  D3DFMT_L16 = 81,
  D3DFMT_VERTEXDATA = 100,
  D3DFMT_INDEX16 = 101,
  D3DFMT_INDEX32 = 102,
  D3DFMT_Q16W16V16U16 = 110,
  D3DFMT_MULTI2_ARGB8 = 0x3154454d,
  D3DFMT_R16F = 111,
  D3DFMT_G16R16F = 112,
  D3DFMT_A16B16G16R16F = 113,
  D3DFMT_R32F = 114,
  D3DFMT_G32R32F = 115,
  D3DFMT_A32B32G32R32F = 116,
  D3DFMT_CxV8U8 = 117,
  D3DFMT_A1 = 118,
  D3DFMT_A2B10G10R10_XR_BIAS = 119,
  D3DFMT_BINARYBUFFER = 199,
  D3DFMT_FORCE_DWORD = 0x7fffffff,
} D3DFORMAT, *PD3DFORMAT;

enum EvalOperatorType
{
  EVAL_OP_LPAREN = 0,
  EVAL_OP_RPAREN = 1,
  EVAL_OP_COLON = 2,
  EVAL_OP_QUESTION = 3,
  EVAL_OP_PLUS = 4,
  EVAL_OP_MINUS = 5,
  EVAL_OP_UNARY_PLUS = 6,
  EVAL_OP_UNARY_MINUS = 7,
  EVAL_OP_MULTIPLY = 8,
  EVAL_OP_DIVIDE = 9,
  EVAL_OP_MODULUS = 10,
  EVAL_OP_LSHIFT = 11,
  EVAL_OP_RSHIFT = 12,
  EVAL_OP_BITWISE_NOT = 13,
  EVAL_OP_BITWISE_AND = 14,
  EVAL_OP_BITWISE_OR = 15,
  EVAL_OP_BITWISE_XOR = 16,
  EVAL_OP_LOGICAL_NOT = 17,
  EVAL_OP_LOGICAL_AND = 18,
  EVAL_OP_LOGICAL_OR = 19,
  EVAL_OP_EQUALS = 20,
  EVAL_OP_NOT_EQUAL = 21,
  EVAL_OP_LESS = 22,
  EVAL_OP_LESS_EQUAL = 23,
  EVAL_OP_GREATER = 24,
  EVAL_OP_GREATER_EQUAL = 25,
  EVAL_OP_COUNT = 26,
};

enum EMemTrack
{
  TRACK_DEBUG = 0,
  TRACK_HUNK = 1,
  TRACK_BINARIES = 2,
  TRACK_MISC_SWAP = 3,
  TRACK_DELIMITER1 = 4,
  TRACK_AI = 5,
  TRACK_AI_NODES = 6,
  TRACK_SCRIPT = 7,
  TRACK_SCRIPT_DEBUG = 8,
  TRACK_FX = 9,
  TRACK_GLASS = 10,
  TRACK_NETWORK_ENTITY = 11,
  TRACK_MISC = 12,
  TRACK_FASTFILE = 13,
  TRACK_ANIMATION = 14,
  TRACK_ANIMCACHE = 15,
  TRACK_WORLD_GLOBALS = 16,
  TRACK_SOUND_GLOBALS = 17,
  TRACK_CLIENT_ANIMSCRIPT = 18,
  TRACK_SOUND = 19,
  TRACK_DELIMITER2 = 20,
  TRACK_RENDERER_GLOBALS = 21,
  TRACK_RENDERER_IMAGES = 22,
  TRACK_RENDERER_WORLD = 23,
  TRACK_RENDERER_MODELS = 24,
  TRACK_RENDERER_MISC = 25,
  TRACK_RENDERER_SIEGE = 26,
  TRACK_CINEMATICS = 27,
  TRACK_DELIMITER3 = 28,
  TRACK_COLLISION_MISC = 29,
  TRACK_COLLISION_BRUSH = 30,
  TRACK_COLLISION_MODEL_TRI = 31,
  TRACK_COLLISION_TERRAIN = 32,
  TRACK_PHYSICS = 33,
  TRACK_MAP_ENTS = 34,
  TRACK_TEMP = 35,
  TRACK_DELIMITER4 = 36,
  TRACK_LOCALIZATION = 37,
  TRACK_FLAME = 38,
  TRACK_UI = 39,
  TRACK_TL = 40,
  TRACK_ZMEM = 41,
  TRACK_FIREMANAGER = 42,
  TRACK_PROFILE = 43,
  TRACK_CLIENT = 44,
  TRACK_RECORDER = 45,
  TRACK_RSTREAM = 46,
  TRACK_RENDERER_STREAMBUFFER = 47,
  TRACK_RENDERER_STREAMBUFFER_EXTRA = 48,
  TRACK_GEOSTREAM = 49,
  TRACK_DDL = 50,
  TRACK_ONLINE = 51,
  TRACK_EMBLEM = 52,
  TRACK_VEHICLEDEF = 53,
  TRACK_THREAD_LOCAL = 54,
  TRACK_MINSPEC_IMAGES = 55,
  TRACK_DELIMITER5 = 56,
  TRACK_NONE = 57,
  TRACK_COUNT = 58,
};

class broad_phase_info
{
  /* 0x0000 */ long Padding_20[20];
  /* 0x0050 */ class rigid_body* m_rb;
  /* 0x0054 */ const class phys_mat44* m_rb_to_world_xform;
  /* 0x0058 */ const class phys_mat44* m_cg_to_world_xform;
  /* 0x005c */ const class phys_mat44* m_cg_to_rb_xform;
  /* 0x0060 */ const class phys_gjk_geom* m_gjk_geom;
  /* 0x0064 */ unsigned int m_gjk_geom_id;
  /* 0x0068 */ int m_surface_type;
}; /* size: 0x0070 */

struct D3D11_TEX1D_RTV
{
  /* 0x0000 */ unsigned int MipSlice;
}; /* size: 0x0004 */

enum WheelEffectState
{
  WHEEL_STATE_ROLLING = 0,
  WHEEL_STATE_AIRBORN = 1,
  WHEEL_STATE_SKIDDING = 2,
  WHEEL_STATE_MAX = 3,
};

enum eAttachment
{
  ATTACHMENT_NONE = 0,
  ATTACHMENT_ACOG = 1,
  ATTACHMENT_DUALCLIP = 2,
  ATTACHMENT_DUALOPTIC = 3,
  ATTACHMENT_DW = 4,
  ATTACHMENT_EXTBARREL = 5,
  ATTACHMENT_EXTCLIP = 6,
  ATTACHMENT_EXTRAMAGS = 7,
  ATTACHMENT_FASTADS = 8,
  ATTACHMENT_FASTRELOAD = 9,
  ATTACHMENT_FMJ = 10,
  ATTACHMENT_GL = 11,
  ATTACHMENT_GRIP = 12,
  ATTACHMENT_HOLO = 13,
  ATTACHMENT_IR = 14,
  ATTACHMENT_IRONSIGHTS = 15,
  ATTACHMENT_LONGBREATH = 16,
  ATTACHMENT_MK = 17,
  ATTACHMENT_MMS = 18,
  ATTACHMENT_RANGEFINDER = 19,
  ATTACHMENT_REFLEX = 20,
  ATTACHMENT_RF = 21,
  ATTACHMENT_SELECTFIRE = 22,
  ATTACHMENT_SILENCER = 23,
  ATTACHMENT_STACKFIRE = 24,
  ATTACHMENT_STALKER = 25,
  ATTACHMENT_STEADYAIM = 26,
  ATTACHMENT_SWAYREDUC = 27,
  ATTACHMENT_TACKNIFE = 28,
  ATTACHMENT_VZOOM = 29,
  ATTACHMENT_TYPE_COUNT = 30,
  ATTACHMENT_INVALID = 30,
};

enum DWRITE_FONT_STYLE
{
};

struct animScript_t
{
  /* 0x0000 */ int numItems;
  /* 0x0004 */ struct animScriptItem_t* items[128];
}; /* size: 0x0204 */

typedef enum _D3D_SHADER_VARIABLE_TYPE
{
  D3D_SVT_VOID = 0,
  D3D_SVT_BOOL = 1,
  D3D_SVT_INT = 2,
  D3D_SVT_FLOAT = 3,
  D3D_SVT_STRING = 4,
  D3D_SVT_TEXTURE = 5,
  D3D_SVT_TEXTURE1D = 6,
  D3D_SVT_TEXTURE2D = 7,
  D3D_SVT_TEXTURE3D = 8,
  D3D_SVT_TEXTURECUBE = 9,
  D3D_SVT_SAMPLER = 10,
  D3D_SVT_SAMPLER1D = 11,
  D3D_SVT_SAMPLER2D = 12,
  D3D_SVT_SAMPLER3D = 13,
  D3D_SVT_SAMPLERCUBE = 14,
  D3D_SVT_PIXELSHADER = 15,
  D3D_SVT_VERTEXSHADER = 16,
  D3D_SVT_PIXELFRAGMENT = 17,
  D3D_SVT_VERTEXFRAGMENT = 18,
  D3D_SVT_UINT = 19,
  D3D_SVT_UINT8 = 20,
  D3D_SVT_GEOMETRYSHADER = 21,
  D3D_SVT_RASTERIZER = 22,
  D3D_SVT_DEPTHSTENCIL = 23,
  D3D_SVT_BLEND = 24,
  D3D_SVT_BUFFER = 25,
  D3D_SVT_CBUFFER = 26,
  D3D_SVT_TBUFFER = 27,
  D3D_SVT_TEXTURE1DARRAY = 28,
  D3D_SVT_TEXTURE2DARRAY = 29,
  D3D_SVT_RENDERTARGETVIEW = 30,
  D3D_SVT_DEPTHSTENCILVIEW = 31,
  D3D_SVT_TEXTURE2DMS = 32,
  D3D_SVT_TEXTURE2DMSARRAY = 33,
  D3D_SVT_TEXTURECUBEARRAY = 34,
  D3D_SVT_HULLSHADER = 35,
  D3D_SVT_DOMAINSHADER = 36,
  D3D_SVT_INTERFACE_POINTER = 37,
  D3D_SVT_COMPUTESHADER = 38,
  D3D_SVT_DOUBLE = 39,
  D3D_SVT_RWTEXTURE1D = 40,
  D3D_SVT_RWTEXTURE1DARRAY = 41,
  D3D_SVT_RWTEXTURE2D = 42,
  D3D_SVT_RWTEXTURE2DARRAY = 43,
  D3D_SVT_RWTEXTURE3D = 44,
  D3D_SVT_RWBUFFER = 45,
  D3D_SVT_BYTEADDRESS_BUFFER = 46,
  D3D_SVT_RWBYTEADDRESS_BUFFER = 47,
  D3D_SVT_STRUCTURED_BUFFER = 48,
  D3D_SVT_RWSTRUCTURED_BUFFER = 49,
  D3D_SVT_APPEND_STRUCTURED_BUFFER = 50,
  D3D_SVT_CONSUME_STRUCTURED_BUFFER = 51,
  D3D10_SVT_VOID = 0,
  D3D10_SVT_BOOL = 1,
  D3D10_SVT_INT = 2,
  D3D10_SVT_FLOAT = 3,
  D3D10_SVT_STRING = 4,
  D3D10_SVT_TEXTURE = 5,
  D3D10_SVT_TEXTURE1D = 6,
  D3D10_SVT_TEXTURE2D = 7,
  D3D10_SVT_TEXTURE3D = 8,
  D3D10_SVT_TEXTURECUBE = 9,
  D3D10_SVT_SAMPLER = 10,
  D3D10_SVT_SAMPLER1D = 11,
  D3D10_SVT_SAMPLER2D = 12,
  D3D10_SVT_SAMPLER3D = 13,
  D3D10_SVT_SAMPLERCUBE = 14,
  D3D10_SVT_PIXELSHADER = 15,
  D3D10_SVT_VERTEXSHADER = 16,
  D3D10_SVT_PIXELFRAGMENT = 17,
  D3D10_SVT_VERTEXFRAGMENT = 18,
  D3D10_SVT_UINT = 19,
  D3D10_SVT_UINT8 = 20,
  D3D10_SVT_GEOMETRYSHADER = 21,
  D3D10_SVT_RASTERIZER = 22,
  D3D10_SVT_DEPTHSTENCIL = 23,
  D3D10_SVT_BLEND = 24,
  D3D10_SVT_BUFFER = 25,
  D3D10_SVT_CBUFFER = 26,
  D3D10_SVT_TBUFFER = 27,
  D3D10_SVT_TEXTURE1DARRAY = 28,
  D3D10_SVT_TEXTURE2DARRAY = 29,
  D3D10_SVT_RENDERTARGETVIEW = 30,
  D3D10_SVT_DEPTHSTENCILVIEW = 31,
  D3D10_SVT_TEXTURE2DMS = 32,
  D3D10_SVT_TEXTURE2DMSARRAY = 33,
  D3D10_SVT_TEXTURECUBEARRAY = 34,
  D3D11_SVT_HULLSHADER = 35,
  D3D11_SVT_DOMAINSHADER = 36,
  D3D11_SVT_INTERFACE_POINTER = 37,
  D3D11_SVT_COMPUTESHADER = 38,
  D3D11_SVT_DOUBLE = 39,
  D3D11_SVT_RWTEXTURE1D = 40,
  D3D11_SVT_RWTEXTURE1DARRAY = 41,
  D3D11_SVT_RWTEXTURE2D = 42,
  D3D11_SVT_RWTEXTURE2DARRAY = 43,
  D3D11_SVT_RWTEXTURE3D = 44,
  D3D11_SVT_RWBUFFER = 45,
  D3D11_SVT_BYTEADDRESS_BUFFER = 46,
  D3D11_SVT_RWBYTEADDRESS_BUFFER = 47,
  D3D11_SVT_STRUCTURED_BUFFER = 48,
  D3D11_SVT_RWSTRUCTURED_BUFFER = 49,
  D3D11_SVT_APPEND_STRUCTURED_BUFFER = 50,
  D3D11_SVT_CONSUME_STRUCTURED_BUFFER = 51,
  D3D_SVT_FORCE_DWORD = 0x7fffffff,
} D3D_SHADER_VARIABLE_TYPE, *PD3D_SHADER_VARIABLE_TYPE;

enum eWeaponComponentType
{
  WEAPON_COMPONENT_UNKNOWN = 0,
  WEAPON_COMPONENT_ATTACHMENT = 1,
  WEAPON_COMPONENT_BASE = 2,
};

enum EntInfoType
{
  ENTINFO_TYPE_ALL = 0,
  ENTINFO_TYPE_AI = 1,
  ENTINFO_TYPE_VEHICLE = 2,
  ENTINFO_TYPE_TRIGGER = 3,
  NUM_ENTINFO_TYPE = 4,
};

struct GfxStreamedPartInfo
{
  /* 0x0000 */ unsigned int levelCountAndSize;
  /* 0x0004 */ unsigned int hash;
  /* 0x0008 */ unsigned short width;
  /* 0x000a */ unsigned short height;
  /* 0x000c */ unsigned int offset : 32; /* bit position: 0 */
  struct /* bitfield */
  {
    /* 0x0010 */ unsigned int size : 28; /* bit position: 0 */
    /* 0x0010 */ unsigned int ipakIndex : 4; /* bit position: 28 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0014 */ unsigned int adjacentLeft : 15; /* bit position: 0 */
    /* 0x0014 */ unsigned int adjacentRight : 15; /* bit position: 15 */
    /* 0x0014 */ unsigned int compressed : 1; /* bit position: 30 */
    /* 0x0014 */ unsigned int valid : 1; /* bit position: 31 */
  }; /* bitfield */
}; /* size: 0x0018 */

enum ddlReturnCodes_e
{
  DDL_RC_SUCCESS = 0,
  DDL_RC_ERROR = -1,
  DDL_RC_BUFFER_IO_ERROR = -2,
  DDL_RC_STATE_INVALID = -3,
  DDL_RC_MEMBER_NULL = -4,
  DDL_RC_MEMBER_INVALID = -5,
  DDL_RC_OFFSET_INVALID = -6,
  DDL_RC_TRUNCATED = -7,
};

struct ddlState_t
{
  /* 0x0000 */ int absoluteOffset;
  /* 0x0004 */ int arrayIndex;
  /* 0x0008 */ struct ddlMemberDef_t* member;
  /* 0x000c */ const struct ddlDef_t* ddl;
  /* 0x0010 */ enum ddlReturnCodes_e returnCode;
}; /* size: 0x0014 */

enum aistateEnum_t
{
  AISTATE_COMBAT = 0,
  MAX_AISTATES = 1,
};

enum clearType_t
{
  R_CLEAR_NEVER = 0,
  R_CLEAR_DEV_ONLY_BLINK = 1,
  R_CLEAR_BLINK = 2,
  R_CLEAR_STEADY = 3,
  R_CLEAR_FOG_COLOR = 4,
  R_CLEAR_COUNT = 5,
};

enum VARENUM
{
  VT_EMPTY = 0,
  VT_NULL = 1,
  VT_I2 = 2,
  VT_I4 = 3,
  VT_R4 = 4,
  VT_R8 = 5,
  VT_CY = 6,
  VT_DATE = 7,
  VT_BSTR = 8,
  VT_DISPATCH = 9,
  VT_ERROR = 10,
  VT_BOOL = 11,
  VT_VARIANT = 12,
  VT_UNKNOWN = 13,
  VT_DECIMAL = 14,
  VT_I1 = 16,
  VT_UI1 = 17,
  VT_UI2 = 18,
  VT_UI4 = 19,
  VT_I8 = 20,
  VT_UI8 = 21,
  VT_INT = 22,
  VT_UINT = 23,
  VT_VOID = 24,
  VT_HRESULT = 25,
  VT_PTR = 26,
  VT_SAFEARRAY = 27,
  VT_CARRAY = 28,
  VT_USERDEFINED = 29,
  VT_LPSTR = 30,
  VT_LPWSTR = 31,
  VT_RECORD = 36,
  VT_INT_PTR = 37,
  VT_UINT_PTR = 38,
  VT_FILETIME = 64,
  VT_BLOB = 65,
  VT_STREAM = 66,
  VT_STORAGE = 67,
  VT_STREAMED_OBJECT = 68,
  VT_STORED_OBJECT = 69,
  VT_BLOB_OBJECT = 70,
  VT_CF = 71,
  VT_CLSID = 72,
  VT_VERSIONED_STREAM = 73,
  VT_BSTR_BLOB = 4095,
  VT_VECTOR = 4096,
  VT_ARRAY = 8192,
  VT_BYREF = 16384,
  VT_RESERVED = 0xffff8000,
  VT_ILLEGAL = 0xffffffff,
  VT_ILLEGALMASKED = 4095,
  VT_TYPEMASK = 4095,
};

struct trajectory_t
{
  /* 0x0000 */ unsigned char trType;
  /* 0x0001 */ char Padding_21[3];
  /* 0x0004 */ int trTime;
  /* 0x0008 */ int trDuration;
  /* 0x000c */ union vec3_t trBase;
  /* 0x0018 */ union vec3_t trDelta;
}; /* size: 0x0024 */

struct LerpEntityStateTurret
{
  /* 0x0000 */ union vec3_t gunAngles;
  /* 0x000c */ int ownerNum;
  /* 0x0010 */ float heatVal;
  /* 0x0014 */ int overheating;
  /* 0x0018 */ float pivotOffset;
  /* 0x001c */ int flags;
}; /* size: 0x0020 */

struct LerpEntityStateLoopFx
{
  /* 0x0000 */ float cullDist;
  /* 0x0004 */ int period;
}; /* size: 0x0008 */

struct LerpEntityStateActor
{
  union
  {
    union
    {
      /* 0x0000 */ int actorNum;
      /* 0x0000 */ int corpseNum;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ index;
  /* 0x0004 */ int species;
  /* 0x0008 */ int team;
  /* 0x000c */ int enemy;
  /* 0x0010 */ int freeCameraLockOnAllowed;
  struct
  {
    /* 0x0014 */ short fBodyPitch;
  } /* size: 0x0002 */ proneInfo;
  /* 0x0016 */ unsigned short aiType;
}; /* size: 0x0018 */

struct LerpEntityStatePrimaryLight
{
  /* 0x0000 */ unsigned char colorAndExp[4];
  /* 0x0004 */ float intensity;
  /* 0x0008 */ float radius;
  /* 0x000c */ float cosHalfFovOuter;
  /* 0x0010 */ float cosHalfFovInner;
  /* 0x0014 */ unsigned int mixerIndex;
}; /* size: 0x0018 */

union Weapon
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int weaponIdx : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned int attachment1 : 6; /* bit position: 8 */
      /* 0x0000 */ unsigned int attachment2 : 6; /* bit position: 14 */
      /* 0x0000 */ unsigned int attachment3 : 6; /* bit position: 20 */
      /* 0x0000 */ unsigned int padding : 6; /* bit position: 26 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int weaponData;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct LerpEntityStatePlayer
{
  /* 0x0000 */ float leanf;
  /* 0x0004 */ int movementDir;
  /* 0x0008 */ int moveType;
  /* 0x000c */ union Weapon primaryWeapon;
  /* 0x0010 */ union Weapon stowedWeapon;
  /* 0x0014 */ union Weapon offhandWeapon;
  /* 0x0018 */ union Weapon meleeWeapon;
  /* 0x001c */ unsigned char meleeWeaponCamo;
  /* 0x001d */ unsigned char meleeWeaponModel;
  /* 0x001e */ unsigned char vehicleType;
  /* 0x001f */ unsigned char vehicleAnimBoneIndex;
  /* 0x0020 */ unsigned char vehicleSeat;
  /* 0x0021 */ unsigned char stowedWeaponCamo;
  /* 0x0022 */ unsigned char weaponHeat;
  /* 0x0023 */ unsigned char proneLegsAngle;
}; /* size: 0x0024 */

struct LerpEntityStateVehicleGunnerAngles
{
  /* 0x0000 */ short pitch;
  /* 0x0002 */ short yaw;
}; /* size: 0x0004 */

struct LerpEntityStateVehicleRotorArm
{
  /* 0x0000 */ short pitch;
  /* 0x0002 */ short roll;
}; /* size: 0x0004 */

struct LerpEntityStateVehicle
{
  /* 0x0000 */ float steerYaw;
  /* 0x0004 */ float bodyRoll;
  union
  {
    /* 0x0008 */ struct LerpEntityStateVehicleGunnerAngles gunnerAngles[4];
    /* 0x0008 */ struct LerpEntityStateVehicleRotorArm rotors[4];
  }; /* size: 0x0010 */
  union
  {
    /* 0x0018 */ short throttle;
    /* 0x0018 */ short bodyPitch;
  }; /* size: 0x0002 */
  /* 0x001a */ short gunPitch;
  /* 0x001c */ short gunYaw;
  /* 0x001e */ unsigned char targetRotorSpeed;
  /* 0x001f */ char __PADDING__[1];
}; /* size: 0x0020 */

struct LerpEntityStateMissile
{
  /* 0x0000 */ int launchTime;
  /* 0x0004 */ int parentClientNum;
  /* 0x0008 */ int fuseTime;
  /* 0x000c */ int forcedDud;
  /* 0x0010 */ float autoDetonateTime;
  /* 0x0014 */ union vec3_t passThrough;
}; /* size: 0x0020 */

struct LerpEntityStateScriptMover
{
  /* 0x0000 */ unsigned char attachTagIndex[4];
  /* 0x0004 */ int attachedTagIndex;
  /* 0x0008 */ short attachModelIndex[4];
  /* 0x0010 */ short animScriptedAnim;
  /* 0x0012 */ short attachedEntNum;
  /* 0x0014 */ int attachedEntTime;
  /* 0x0018 */ short exploderIndex;
  /* 0x001a */ unsigned short scale;
  /* 0x001c */ unsigned char flags;
  /* 0x001d */ char Padding_22;
  /* 0x001e */ unsigned short aiType;
}; /* size: 0x0020 */

struct LerpEntityStateBulletHit
{
  /* 0x0000 */ union vec3_t start;
}; /* size: 0x000c */

struct LerpEntityStateEarthquake
{
  /* 0x0000 */ float scale;
  /* 0x0004 */ float radius;
  /* 0x0008 */ int duration;
}; /* size: 0x000c */

struct LerpEntityStateCustomExplode
{
  /* 0x0000 */ int startTime;
  /* 0x0004 */ int effectIndex;
}; /* size: 0x0008 */

struct LerpEntityStateExplosion
{
  /* 0x0000 */ float innerRadius;
  /* 0x0004 */ float magnitude;
  /* 0x0008 */ float innerDamage;
  /* 0x000c */ int dummy;
  /* 0x0010 */ float outerDamage;
}; /* size: 0x0014 */

struct LerpEntityStateExplosionJolt
{
  /* 0x0000 */ float innerRadius;
  /* 0x0004 */ union vec3_t impulse;
}; /* size: 0x0010 */

struct LerpEntityStateJetThrust
{
  /* 0x0000 */ union vec3_t thrustDir;
  /* 0x000c */ int dummy;
  /* 0x0010 */ float dotLimit;
}; /* size: 0x0014 */

struct LerpEntityStatePhysicsJitter
{
  /* 0x0000 */ float innerRadius;
  /* 0x0004 */ float minDisplacement;
  /* 0x0008 */ float maxDisplacement;
}; /* size: 0x000c */

struct LerpEntityStateCreateDynEnt
{
  /* 0x0000 */ int model;
  /* 0x0004 */ int fxId;
  /* 0x0008 */ int mature;
}; /* size: 0x000c */

struct LerpEntityStateStreamerHint
{
  /* 0x0000 */ float factor;
}; /* size: 0x0004 */

struct LerpEntityStateZBarrierPiece
{
  /* 0x0000 */ unsigned char flags;
  /* 0x0001 */ unsigned char animTime;
}; /* size: 0x0002 */

struct LerpEntityStateZBarrier
{
  /* 0x0000 */ unsigned int barrierTypeIndex;
  /* 0x0004 */ struct LerpEntityStateZBarrierPiece pieces[6];
}; /* size: 0x0010 */

struct LerpEntityStateAnonymous
{
  /* 0x0000 */ int data[9];
}; /* size: 0x0024 */

union LerpEntityStateTypeUnion
{
  union
  {
    /* 0x0000 */ struct LerpEntityStateTurret turret;
    /* 0x0000 */ struct LerpEntityStateLoopFx loopFx;
    /* 0x0000 */ struct LerpEntityStateActor actor;
    /* 0x0000 */ struct LerpEntityStatePrimaryLight primaryLight;
    /* 0x0000 */ struct LerpEntityStatePlayer player;
    /* 0x0000 */ struct LerpEntityStateVehicle vehicle;
    /* 0x0000 */ struct LerpEntityStateMissile missile;
    /* 0x0000 */ struct LerpEntityStateScriptMover scriptMover;
    /* 0x0000 */ struct LerpEntityStateBulletHit bulletHit;
    /* 0x0000 */ struct LerpEntityStateEarthquake earthquake;
    /* 0x0000 */ struct LerpEntityStateCustomExplode customExplode;
    /* 0x0000 */ struct LerpEntityStateExplosion explosion;
    /* 0x0000 */ struct LerpEntityStateExplosionJolt explosionJolt;
    /* 0x0000 */ struct LerpEntityStateJetThrust jetThrust;
    /* 0x0000 */ struct LerpEntityStatePhysicsJitter physicsJitter;
    /* 0x0000 */ struct LerpEntityStateDestructibleHit destructibleHit;
    /* 0x0000 */ struct LerpEntityStateCreateDynEnt createDynEnt;
    /* 0x0000 */ struct LerpEntityStateStreamerHint streamerHint;
    /* 0x0000 */ struct LerpEntityStateZBarrier zbarrier;
    /* 0x0000 */ struct LerpEntityStateAnonymous anonymous;
  }; /* size: 0x0024 */
}; /* size: 0x0024 */

struct LerpEntityState
{
  /* 0x0000 */ int eFlags;
  /* 0x0004 */ int eFlags2;
  /* 0x0008 */ struct trajectory_t pos;
  /* 0x002c */ struct trajectory_t apos;
  /* 0x0050 */ union LerpEntityStateTypeUnion u;
  /* 0x0074 */ short useCount;
  union
  {
    union
    {
      /* 0x0076 */ unsigned char iHeadIconTeam;
      /* 0x0076 */ short teamAndOwnerIndex;
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ faction;
  /* 0x0078 */ unsigned int clientFields;
}; /* size: 0x007c */

struct renderOptions_s
{
  /* 0x0000 */ unsigned int s;
}; /* size: 0x0004 */

struct actorAnimState_t
{
  /* 0x0000 */ short state;
  /* 0x0002 */ unsigned char subState;
  /* 0x0003 */ char Padding_23;
  /* 0x0004 */ float fLeanAmount;
  /* 0x0008 */ float fAimUpDown;
  /* 0x000c */ float fAimLeftRight;
}; /* size: 0x0010 */

struct playerAnimState_t
{
  /* 0x0000 */ int legsAnim;
  /* 0x0004 */ int torsoAnim;
  /* 0x0008 */ float fTorsoPitch;
  /* 0x000c */ float fWaistPitch;
}; /* size: 0x0010 */

struct vehicleState_t
{
  /* 0x0000 */ short flags;
  /* 0x0002 */ unsigned char vehicleDefIndex;
  /* 0x0003 */ unsigned char treeId;
  /* 0x0004 */ short animId;
  /* 0x0006 */ short attachModelIndex[2];
  /* 0x000a */ unsigned char attachTagIndex[2];
}; /* size: 0x000c */

struct hardlineHint_t
{
  /* 0x0000 */ unsigned char team;
  /* 0x0001 */ unsigned char perk;
  /* 0x0002 */ unsigned char hint;
}; /* size: 0x0003 */

struct scriptMoverState_t
{
  /* 0x0000 */ unsigned char fov;
  /* 0x0001 */ unsigned char treeId;
  /* 0x0002 */ short animId;
}; /* size: 0x0004 */

struct clientLinkInfo_t
{
  /* 0x0000 */ short parentEnt;
  /* 0x0002 */ unsigned char tagIndex;
  /* 0x0003 */ unsigned char flags;
}; /* size: 0x0004 */

struct entityState_s
{
  /* 0x0000 */ int number;
  /* 0x0004 */ struct LerpEntityState lerp;
  /* 0x0080 */ int time2;
  /* 0x0084 */ unsigned int loopSoundId;
  /* 0x0088 */ int solid;
  /* 0x008c */ struct renderOptions_s renderOptions;
  union
  {
    union
    {
      /* 0x0090 */ struct actorAnimState_t animState;
      /* 0x0090 */ struct playerAnimState_t anim;
      /* 0x0090 */ struct vehicleState_t vehicleState;
      /* 0x0090 */ struct hardlineHint_t hardline;
      /* 0x0090 */ struct scriptMoverState_t moverState;
      /* 0x0090 */ struct fxLightingState_t fx;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ un2;
  union
  {
    union
    {
      /* 0x00a0 */ int hintString;
      /* 0x00a0 */ int vehicleXModel;
      /* 0x00a0 */ unsigned int secondBcAlias;
      /* 0x00a0 */ unsigned int soundTag;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ un3;
  /* 0x00a4 */ unsigned int partBits[5];
  /* 0x00b8 */ struct clientLinkInfo_t clientLinkInfo;
  /* 0x00bc */ int clientMask[1];
  /* 0x00c0 */ unsigned char events[4];
  /* 0x00c4 */ unsigned int eventParms[4];
  /* 0x00d4 */ unsigned int eventParm;
  /* 0x00d8 */ short eType;
  /* 0x00da */ short groundEntityNum;
  union
  {
    union
    {
      /* 0x00dc */ short brushmodel;
      /* 0x00dc */ short xmodel;
      /* 0x00dc */ short primaryLight;
      /* 0x00dc */ unsigned short bone;
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ index;
  /* 0x00de */ short otherEntityNum;
  /* 0x00e0 */ short attackerEntityNum;
  /* 0x00e2 */ short enemyModel;
  /* 0x00e4 */ union Weapon weapon;
  /* 0x00e8 */ union Weapon lastStandPrevWeapon;
  /* 0x00ec */ unsigned short targetname;
  /* 0x00ee */ short loopSoundFade;
  /* 0x00f0 */ short eventSequence;
  /* 0x00f2 */ unsigned char surfType;
  /* 0x00f3 */ unsigned char clientNum;
  /* 0x00f4 */ unsigned char iHeadIcon;
  /* 0x00f5 */ unsigned char weaponModel;
  union
  {
    union
    {
      /* 0x00f6 */ unsigned char scale;
      /* 0x00f6 */ unsigned char eventParm2;
      /* 0x00f6 */ unsigned char helicopterStage;
      /* 0x00f6 */ unsigned char destructibleid;
      /* 0x00f6 */ unsigned char zombieShrinkOn;
    }; /* size: 0x0001 */
  } /* size: 0x0001 */ un1;
  /* 0x00f7 */ char __PADDING__[1];
}; /* size: 0x00f8 */

enum NitrousVehicleController::VehicleHorseControlState
{
  LEFT_STICK_STEERS_HORSE_AND_CAMERA = 0,
  LEFT_STICK_STEERS_HORSE_RIGHT_STICK_CAMERA = 1,
  RIGHT_STICK_STEERS_HORSE_AND_CAMERA = 2,
};

enum dvar_cmd_t
{
  DVAR_CMD_AIM_LOCKON_PITCH_STRENGTH = 0,
  DVAR_CMD_AMMO_COUNTER_HIDE = 1,
  DVAR_CMD_CG_OBJECTIVE_TEXT = 2,
  DVAR_CMD_COMPASS = 3,
  DVAR_CMD_DRAW_TALK = 4,
  DVAR_CMD_FOV = 5,
  DVAR_CMD_HUD_HARDCORE = 6,
  DVAR_CMD_PLAYER_SPRINT_TIME = 7,
  DVAR_CMD_MINI_SCOREBOARD_HIDE = 8,
  DVAR_CMD_NUM_LIVES = 9,
  DVAR_CMD_PLAYER_PUSH_AMOUNT = 10,
  DVAR_CMD_PLAYER_STEP_ON_ACTORS = 11,
  DVAR_CMD_SCRIPT_MAIN_MENU = 12,
  DVAR_CMD_THIRD_PERSON = 13,
  DVAR_CMD_THIRD_PERSON_ANGLE = 14,
  DVAR_CMD_COUNT = 15,
};

enum statIndex_t
{
  STAT_HEALTH = 0,
  STAT_DEAD_YAW = 1,
  STAT_MAX_HEALTH = 2,
  STAT_SPAWN_COUNT = 3,
  MAX_STATS = 4,
};

enum scriptAnimConditions_t
{
  ANIM_COND_PLAYERANIMTYPE = 0,
  ANIM_COND_WEAPONCLASS = 1,
  ANIM_COND_NEXTPLAYERANIMTYPE = 2,
  ANIM_COND_NEXTWEAPONCLASS = 3,
  ANIM_COND_MOUNTED = 4,
  ANIM_COND_MOVESTATUS = 5,
  ANIM_COND_PREVDIRECTION = 6,
  ANIM_COND_DIRECTION = 7,
  ANIM_COND_DMGDIRECTION = 8,
  ANIM_COND_DMGTYPE = 9,
  ANIM_COND_STANCE = 10,
  ANIM_COND_UNDERHAND = 11,
  ANIM_COND_FIRING = 12,
  ANIM_COND_WEAPON_POSITION = 13,
  ANIM_COND_SLOPE = 14,
  ANIM_COND_PERK = 15,
  ANIM_COND_ATTACHMENT = 16,
  ANIM_COND_RIOTSHIELDNEXT = 17,
  ANIM_COND_VEHICLE_NAME = 18,
  ANIM_COND_VEHICLE_SEAT_TO = 19,
  ANIM_COND_VEHICLE_SEAT_FROM = 20,
  ANIM_COND_VEHICLE_ANIM_STAGE = 21,
  ANIM_COND_VEHICLE_ENTRY_POS = 22,
  ANIM_COND_EVENT = 23,
  ANIM_COND_CAC = 24,
  NUM_ANIM_CONDITIONS = 25,
};

typedef struct _XMUSHORT2
{
  /* 0x0000 */ unsigned short x;
  /* 0x0002 */ unsigned short y;
} XMUSHORT2, *PXMUSHORT2; /* size: 0x0004 */

enum DXGI_MODE_SCALING
{
  DXGI_MODE_SCALING_UNSPECIFIED = 0,
  DXGI_MODE_SCALING_CENTERED = 1,
  DXGI_MODE_SCALING_STRETCHED = 2,
};

enum eAttachmentPoint
{
  ATTACHMENT_POINT_NONE = 0,
  ATTACHMENT_POINT_TOP = 1,
  ATTACHMENT_POINT_FIRST = 1,
  ATTACHMENT_POINT_BOTTOM = 2,
  ATTACHMENT_POINT_TRIGGER = 3,
  ATTACHMENT_POINT_MUZZLE = 4,
  ATTACHMENT_POINT_GUNPERK = 5,
  ATTACHMENT_POINT_COUNT = 6,
  ATTACHMENT_POINT_INVALID = 6,
};

typedef enum _D3DDEGREETYPE
{
  D3DDEGREE_LINEAR = 1,
  D3DDEGREE_QUADRATIC = 2,
  D3DDEGREE_CUBIC = 3,
  D3DDEGREE_QUINTIC = 5,
  D3DDEGREE_FORCE_DWORD = 0x7fffffff,
} D3DDEGREETYPE, *PD3DDEGREETYPE;

enum perfValType_t
{
  PERF_CLIENTPING = 0,
  PERF_CLIENTTIMEOUTS = 1,
  PERF_DWTASKSCOMPLETE = 2,
  PERF_DWTASKSFAIL = 3,
  PERF_DWTASKSTIMEOUT = 4,
  PERF_TASKTIME = 5,
  PERF_DWDISCONNECTS = 6,
  PERF_SERVERFRAMEMS = 7,
  PERF_SNAPSHOT_CLIENT_NODELTA = 8,
  PERF_SNAPSHOT_STALE_DELTA = 9,
  PERF_SNAPSHOT_STALE_ENTS = 10,
  PERF_SNAPSHOT_OK_DELTA = 11,
  PERF_GAMESTATES = 12,
  PERF_PARTYSTATES = 13,
  PERF_MAX_COUNTERS = 14,
};

typedef enum _TAG_UNNAMED_40
{
  DRAW_SURF_BSP_CAMERA_LIT = 0,
  DRAW_SURF_SMODEL_CAMERA_LIT = 1,
  DRAW_SURF_CAMERA_LIT_BEGIN = 2,
  DRAW_SURF_ENT_CAMERA_LIT = 2,
  DRAW_SURF_CAMERA_LIT_END = 3,
  DRAW_SURF_BSP_CAMERA_LIGHT_MAP = 3,
  DRAW_SURF_SMODEL_CAMERA_LIGHT_MAP_OPAQUE = 4,
  DRAW_SURF_CAMERA_LIGHT_MAP_BEGIN = 5,
  DRAW_SURF_ENT_CAMERA_LIGHT_MAP_OPAQUE = 5,
  DRAW_SURF_CAMERA_LIGHT_MAP_END = 6,
  DRAW_SURF_DEPTH_HACK_BEGIN = 6,
  DRAW_SURF_DEPTH_HACK_CAMERA = 6,
  DRAW_SURF_DEPTH_HACK_END = 7,
  DRAW_SURF_CAMERA_LIT_TRANS_BEGIN = 7,
  DRAW_SURF_BSP_CAMERA_LIT_TRANS = 7,
  DRAW_SURF_SMODEL_CAMERA_LIT_TRANS = 8,
  DRAW_SURF_ENT_CAMERA_LIT_TRANS = 9,
  DRAW_SURF_CAMERA_LIT_TRANS_END = 10,
  DRAW_SURF_CAMERA_LIT_QUASI_OPAQUE_BEGIN = 10,
  DRAW_SURF_SMODEL_CAMERA_LIT_QUASI_OPAQUE = 10,
  DRAW_SURF_ENT_CAMERA_LIT_QUASI_OPAQUE = 11,
  DRAW_SURF_CAMERA_LIT_QUASI_OPAQUE_END = 12,
  DRAW_SURF_CAMERA_LIT_FX_BEGIN = 12,
  DRAW_SURF_FX_CAMERA_LIT = 12,
  DRAW_SURF_FX_CAMERA_LIT_AUTO = 13,
  DRAW_SURF_FX_CAMERA_LIT_DECAL = 14,
  DRAW_SURF_CODEMESH_CAMERA_LIT = 15,
  DRAW_SURF_CAMERA_LIT_FX_END = 16,
  DRAW_SURF_CAMERA_EMISSIVE_OPAQUE_BEGIN = 16,
  DRAW_SURF_BSP_CAMERA_EMISSIVE_OPAQUE = 16,
  DRAW_SURF_SMODEL_CAMERA_EMISSIVE_OPAQUE = 17,
  DRAW_SURF_ENT_CAMERA_EMISSIVE_OPAQUE = 18,
  DRAW_SURF_CAMERA_EMISSIVE_OPAQUE_END = 19,
  DRAW_SURF_CAMERA_EMISSIVE_TRANS_BEGIN = 19,
  DRAW_SURF_BSP_CAMERA_EMISSIVE_TRANS = 19,
  DRAW_SURF_SMODEL_CAMERA_EMISSIVE_TRANS = 20,
  DRAW_SURF_ENT_CAMERA_EMISSIVE_TRANS = 21,
  DRAW_SURF_CAMERA_EMISSIVE_TRANS_END = 22,
  DRAW_SURF_CAMERA_EMISSIVE_FX_BEGIN = 22,
  DRAW_SURF_SMODEL_CAMERA_EMISSIVE_FX = 22,
  DRAW_SURF_ENT_CAMERA_EMISSIVE_FX = 23,
  DRAW_SURF_FX_CAMERA_EMISSIVE = 24,
  DRAW_SURF_FX_CAMERA_EMISSIVE_AUTO = 25,
  DRAW_SURF_FX_CAMERA_EMISSIVE_DECAL = 26,
  DRAW_SURF_FX_CAMERA_EMISSIVE_VIEWMODEL = 27,
  DRAW_SURF_FX_CAMERA_EMISSIVE_SUPERFLARE = 28,
  DRAW_SURF_CAMERA_EMISSIVE_FX_END = 29,
  DRAW_SURF_SUNSHADOW_0_BEGIN = 29,
  DRAW_SURF_BSP_SUNSHADOW_0 = 29,
  DRAW_SURF_SMODEL_SUNSHADOW_0 = 30,
  DRAW_SURF_ENT_SUNSHADOW_0 = 31,
  DRAW_SURF_CODEMESH_SUNSHADOW_0 = 32,
  DRAW_SURF_SUNSHADOW_1_BEGIN = 33,
  DRAW_SURF_BSP_SUNSHADOW_1 = 33,
  DRAW_SURF_SMODEL_SUNSHADOW_1 = 34,
  DRAW_SURF_ENT_SUNSHADOW_1 = 35,
  DRAW_SURF_CODEMESH_SUNSHADOW_1 = 36,
  DRAW_SURF_SPOTSHADOW_0_BEGIN = 37,
  DRAW_SURF_BSP_SPOTSHADOW_0 = 37,
  DRAW_SURF_SMODEL_SPOTSHADOW_0 = 38,
  DRAW_SURF_ENT_SPOTSHADOW_0 = 39,
  DRAW_SURF_SPOTSHADOW_1_BEGIN = 40,
  DRAW_SURF_BSP_SPOTSHADOW_1 = 40,
  DRAW_SURF_SMODEL_SPOTSHADOW_1 = 41,
  DRAW_SURF_ENT_SPOTSHADOW_1 = 42,
  DRAW_SURF_SPOTSHADOW_2_BEGIN = 43,
  DRAW_SURF_BSP_SPOTSHADOW_2 = 43,
  DRAW_SURF_SMODEL_SPOTSHADOW_2 = 44,
  DRAW_SURF_ENT_SPOTSHADOW_2 = 45,
  DRAW_SURF_SPOTSHADOW_3_BEGIN = 46,
  DRAW_SURF_BSP_SPOTSHADOW_3 = 46,
  DRAW_SURF_SMODEL_SPOTSHADOW_3 = 47,
  DRAW_SURF_ENT_SPOTSHADOW_3 = 48,
  DRAW_SURF_ENT_CAMERA_SONAR = 49,
  DRAW_SURF_TYPE_COUNT = 50,
} TAG_UNNAMED_40, *PTAG_UNNAMED_40;

enum std::pointer_safety::pointer_safety
{
  relaxed = 0,
  preferred = 1,
  strict = 2,
};

struct XAUDIO2_EFFECT_CHAIN
{
  /* 0x0000 */ unsigned int EffectCount;
  /* 0x0004 */ struct XAUDIO2_EFFECT_DESCRIPTOR* pEffectDescriptors;
}; /* size: 0x0008 */

struct SaveSourceBufferInfo
{
  /* 0x0000 */ char* sourceBuf;
  /* 0x0004 */ int len;
}; /* size: 0x0008 */

enum animCommandFlags
{
  ANIM_FL_THROW_GRENADE = 0,
  ANIM_FL_TURN_TO_TURRET = 1,
  ANIM_FL_MAX = 2,
};

enum DWRITE_FONT_FACE_TYPE
{
};

enum WeaponCamoMaterialFlags
{
  WCM_REPLACE_COLOR = 1,
  WCM_REPLACE_NORMAL = 2,
  WCM_REPLACE_SPECULAR = 4,
};

typedef enum _TAG_UNNAMED_41
{
  INVALID_NODE = -1,
} TAG_UNNAMED_41, *PTAG_UNNAMED_41;

enum jsmnPrimitiveType_e
{
  JSMN_PRIMITIVE_TYPE_INVALID = 0,
  JSMN_PRIMITIVE_TYPE_INT = 1,
  JSMN_PRIMITIVE_TYPE_BOOL = 2,
};

typedef enum _TAG_UNNAMED_42
{
  TECHNIQUE_DEPTH_PREPASS = 0,
  TECHNIQUE_BUILD_SHADOWMAP_DEPTH = 1,
  TECHNIQUE_UNLIT = 2,
  TECHNIQUE_EMISSIVE = 3,
  TECHNIQUE_LIT_BEGIN = 4,
  TECHNIQUE_LIT = 4,
  TECHNIQUE_LIT_SUN = 5,
  TECHNIQUE_LIT_SUN_SHADOW = 6,
  TECHNIQUE_LIT_SPOT = 7,
  TECHNIQUE_LIT_SPOT_SHADOW = 8,
  TECHNIQUE_LIT_SPOT_SQUARE = 9,
  TECHNIQUE_LIT_SPOT_SQUARE_SHADOW = 10,
  TECHNIQUE_LIT_SPOT_ROUND = 11,
  TECHNIQUE_LIT_SPOT_ROUND_SHADOW = 12,
  TECHNIQUE_LIT_OMNI = 13,
  TECHNIQUE_LIT_OMNI_SHADOW = 14,
  TECHNIQUE_LIT_DLIGHT_GLIGHT = 15,
  TECHNIQUE_LIT_SUN_DLIGHT_GLIGHT = 16,
  TECHNIQUE_LIT_SUN_SHADOW_DLIGHT_GLIGHT = 17,
  TECHNIQUE_LIT_SPOT_DLIGHT_GLIGHT = 18,
  TECHNIQUE_LIT_SPOT_SHADOW_DLIGHT_GLIGHT = 19,
  TECHNIQUE_LIT_SPOT_SQUARE_DLIGHT_GLIGHT = 20,
  TECHNIQUE_LIT_SPOT_SQUARE_SHADOW_DLIGHT_GLIGHT = 21,
  TECHNIQUE_LIT_SPOT_ROUND_DLIGHT_GLIGHT = 22,
  TECHNIQUE_LIT_SPOT_ROUND_SHADOW_DLIGHT_GLIGHT = 23,
  TECHNIQUE_LIT_OMNI_DLIGHT_GLIGHT = 24,
  TECHNIQUE_LIT_OMNI_SHADOW_DLIGHT_GLIGHT = 25,
  TECHNIQUE_LIT_END = 26,
  TECHNIQUE_LIGHT_SPOT = 26,
  TECHNIQUE_LIGHT_OMNI = 27,
  TECHNIQUE_FAKELIGHT_NORMAL = 28,
  TECHNIQUE_FAKELIGHT_VIEW = 29,
  TECHNIQUE_SUNLIGHT_PREVIEW = 30,
  TECHNIQUE_CASE_TEXTURE = 31,
  TECHNIQUE_WIREFRAME_SOLID = 32,
  TECHNIQUE_WIREFRAME_SHADED = 33,
  TECHNIQUE_DEBUG_BUMPMAP = 34,
  TECHNIQUE_DEBUG_PERFORMANCE = 35,
  TECHNIQUE_COUNT = 36,
  TECHNIQUE_TOTAL_COUNT = 37,
  TECHNIQUE_CUSTOM_01 = 2,
  TECHNIQUE_CUSTOM_02 = 3,
  TECHNIQUE_CUSTOM_03 = 4,
  TECHNIQUE_CUSTOM_04 = 5,
  TECHNIQUE_CUSTOM_05 = 6,
  TECHNIQUE_CUSTOM_06 = 7,
  TECHNIQUE_CUSTOM_07 = 8,
  TECHNIQUE_CUSTOM_08 = 9,
  TECHNIQUE_CUSTOM_09 = 10,
  TECHNIQUE_CUSTOM_10 = 11,
  TECHNIQUE_CUSTOM_11 = 12,
  TECHNIQUE_CUSTOM_12 = 13,
  TECHNIQUE_CUSTOM_13 = 14,
  TECHNIQUE_CUSTOM_14 = 15,
  TECHNIQUE_CUSTOM_15 = 16,
  TECHNIQUE_CUSTOM_16 = 17,
  TECHNIQUE_CUSTOM_17 = 18,
  TECHNIQUE_CUSTOM_18 = 19,
  TECHNIQUE_CUSTOM_19 = 20,
  TECHNIQUE_CUSTOM_20 = 21,
  TECHNIQUE_CUSTOM_21 = 22,
  TECHNIQUE_CUSTOM_22 = 23,
  TECHNIQUE_CUSTOM_23 = 24,
  TECHNIQUE_CUSTOM_24 = 25,
  TECHNIQUE_CUSTOM_25 = 26,
  TECHNIQUE_CUSTOM_26 = 27,
  TECHNIQUE_CUSTOM_27 = 28,
  TECHNIQUE_CUSTOM_28 = 29,
  TECHNIQUE_CUSTOM_29 = 30,
  TECHNIQUE_CUSTOM_30 = 31,
  TECHNIQUE_CUSTOM_COUNT = 32,
  TECHNIQUE_NONE = 255,
} TAG_UNNAMED_42, *PTAG_UNNAMED_42;

class environment_rigid_body
{
}; /* size: 0x0160 */

class phys_inplace_avl_tree<rigid_body_pair_key,rigid_body_constraint_contact,rigid_body_constraint_contact::avl_tree_accessor>
{
  /* 0x0000 */ class rigid_body_constraint_contact* m_tree_root;
}; /* size: 0x0004 */

class phys_free_list<user_rigid_body>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<user_rigid_body>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<user_rigid_body>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<user_rigid_body>
{
  /* 0x0000 */ class phys_free_list<user_rigid_body>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ class user_rigid_body* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

class phys_free_list<rigid_body>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<rigid_body>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<rigid_body>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<rigid_body>
{
  /* 0x0000 */ class phys_free_list<rigid_body>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ class rigid_body* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

class phys_free_list<rigid_body_constraint_contact>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_contact>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<rigid_body_constraint_contact>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<rigid_body_constraint_contact>
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_contact>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ class rigid_body_constraint_contact* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

class phys_free_list<rigid_body_constraint_hinge>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_hinge>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<rigid_body_constraint_hinge>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<rigid_body_constraint_hinge>
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_hinge>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ class rigid_body_constraint_hinge* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

class phys_free_list<rigid_body_constraint_distance>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_distance>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<rigid_body_constraint_distance>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<rigid_body_constraint_distance>
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_distance>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ class rigid_body_constraint_distance* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

class phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<rigid_body_constraint_ragdoll>
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ class rigid_body_constraint_ragdoll* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

class phys_free_list<rigid_body_constraint_wheel>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_wheel>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<rigid_body_constraint_wheel>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<rigid_body_constraint_wheel>
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_wheel>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ class rigid_body_constraint_wheel* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

class phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<rigid_body_constraint_custom_orientation>
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ class rigid_body_constraint_custom_orientation* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

class phys_free_list<rigid_body_constraint_custom_path>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_custom_path>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<rigid_body_constraint_custom_path>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<rigid_body_constraint_custom_path>
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_custom_path>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ class rigid_body_constraint_custom_path* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

class phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<rigid_body_constraint_angular_actuator>
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ class rigid_body_constraint_angular_actuator* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

class phys_free_list<rigid_body_constraint_upright>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_upright>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<rigid_body_constraint_upright>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<rigid_body_constraint_upright>
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_upright>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ class rigid_body_constraint_upright* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

struct minspec_read_write_mutex
{
  /* 0x0000 */ volatile unsigned int m_count;
}; /* size: 0x0004 */

class phys_transient_allocator
{
  /* 0x0000 */ struct phys_transient_allocator::block_header* m_first_block;
  /* 0x0004 */ char* m_cur;
  /* 0x0008 */ char* m_end;
  /* 0x000c */ unsigned int m_total_memory_allocated;
  /* 0x0010 */ struct minspec_read_write_mutex m_mutex;
  /* 0x0014 */ void* m_slot_pool;
}; /* size: 0x0018 */

class physics_system
{
  /* 0x0000 */ int m_flags;
  /* 0x0004 */ float m_outside_sub_delta_t;
  /* 0x0008 */ void* m_collision_callback /* function */;
  /* 0x000c */ float m_max_delta_t;
  /* 0x0010 */ int m_max_vel_iters;
  /* 0x0014 */ int m_max_vel_pos_iters;
  /* 0x0018 */ long Padding_24[2];
  /* 0x0020 */ class environment_rigid_body m_environment_rigid_body;
  /* 0x0180 */ class phys_inplace_avl_tree<rigid_body_pair_key,rigid_body_constraint_contact,rigid_body_constraint_contact::avl_tree_accessor> m_search_tree_rbc_contact;
  /* 0x0184 */ class phys_free_list<user_rigid_body> m_list_user_rigid_body;
  /* 0x0598 */ class phys_free_list<rigid_body> m_list_rigid_body;
  /* 0x09ac */ class phys_free_list<rigid_body_constraint_contact> m_list_rbc_contact;
  /* 0x0dc0 */ class phys_free_list<rigid_body_constraint_point> m_list_rbc_point;
  /* 0x11d4 */ class phys_free_list<rigid_body_constraint_hinge> m_list_rbc_hinge;
  /* 0x15e8 */ class phys_free_list<rigid_body_constraint_distance> m_list_rbc_dist;
  /* 0x19fc */ class phys_free_list<rigid_body_constraint_ragdoll> m_list_rbc_ragdoll;
  /* 0x1e10 */ class phys_free_list<rigid_body_constraint_wheel> m_list_rbc_wheel;
  /* 0x2224 */ class phys_free_list<rigid_body_constraint_custom_orientation> m_list_rbc_custom_orientation;
  /* 0x2638 */ class phys_free_list<rigid_body_constraint_custom_path> m_list_rbc_custom_path;
  /* 0x2a4c */ class phys_free_list<rigid_body_constraint_angular_actuator> m_list_rbc_angular_actuator;
  /* 0x2e60 */ class phys_free_list<rigid_body_constraint_upright> m_list_rbc_upright;
  /* 0x3274 */ class phys_transient_allocator m_contact_point_buffer_1;
  /* 0x328c */ class phys_transient_allocator m_contact_point_buffer_2;
  /* 0x32a4 */ class rigid_body** m_list_island;
  /* 0x32a8 */ int m_list_island_count;
  /* 0x32ac */ int m_solver_memory_high_water;
  /* 0x32b0 */ int m_contact_point_buffer_high_water;
}; /* size: 0x32c0 */

typedef enum _MINIDUMP_TYPE
{
  MiniDumpNormal = 0,
  MiniDumpWithDataSegs = 1,
  MiniDumpWithFullMemory = 2,
  MiniDumpWithHandleData = 4,
  MiniDumpFilterMemory = 8,
  MiniDumpScanMemory = 16,
  MiniDumpWithUnloadedModules = 32,
  MiniDumpWithIndirectlyReferencedMemory = 64,
  MiniDumpFilterModulePaths = 128,
  MiniDumpWithProcessThreadData = 256,
  MiniDumpWithPrivateReadWriteMemory = 512,
  MiniDumpWithoutOptionalData = 1024,
  MiniDumpWithFullMemoryInfo = 2048,
  MiniDumpWithThreadInfo = 4096,
  MiniDumpWithCodeSegs = 8192,
  MiniDumpWithoutAuxiliaryState = 16384,
  MiniDumpWithFullAuxiliaryState = 0xffff8000,
  MiniDumpWithPrivateWriteCopyMemory = 0x10000,
  MiniDumpIgnoreInaccessibleMemory = 0x20000,
  MiniDumpWithTokenInformation = 0x40000,
  MiniDumpValidTypeFlags = 0x7ffff,
} MINIDUMP_TYPE, *PMINIDUMP_TYPE;

typedef enum _TAG_UNNAMED_43
{
  DSKEL_CREATE_INC = 32,
} TAG_UNNAMED_43, *PTAG_UNNAMED_43;

typedef enum _NVAPI_MODULE_ID
{
  NVAPI_MODULE_GPU = 0,
  NVAPI_MODULE_PEP = 1,
} NVAPI_MODULE_ID, *PNVAPI_MODULE_ID;

enum eAttachmentOverrideEffects
{
  ATTACHMENT_OVERRIDE_EFFECT_VIEW_FLASH = 0,
  ATTACHMENT_OVERRIDE_EFFECT_WORLD_FLASH = 1,
  NUM_ATTACHMENT_OVERRIDE_EFFECTS = 2,
};

typedef enum _TAG_UNNAMED_44
{
  FX_STATUS2_NO_RESTART_ON_REWIND = 1,
  FX_STATUS2_OFFSCREEN_SPAWN = 4,
  FX_STATUS2_OFFSCREEN_RETRIGGER = 8,
} TAG_UNNAMED_44, *PTAG_UNNAMED_44;

struct SndOverlayInfo
{
  /* 0x0000 */ char pszSampleName[128];
  /* 0x0080 */ char name[64];
  /* 0x00c0 */ char spatial[8];
  /* 0x00c8 */ int channel;
  /* 0x00cc */ float fGlobalPriority;
  /* 0x00d0 */ float fLosOcclusion;
  /* 0x00d4 */ float fDry;
  /* 0x00d8 */ float fWet;
  /* 0x00dc */ float fDistance;
  /* 0x00e0 */ float fPitch;
  /* 0x00e4 */ int iEntity;
  /* 0x00e8 */ int group;
  /* 0x00ec */ int pan;
  /* 0x00f0 */ __int64 played;
  /* 0x00f8 */ int bus;
  /* 0x00fc */ int duckGroup;
}; /* size: 0x0100 */

enum bdTencentAASRecord::bdRecordStatus
{
  PENDING = 0,
  NOINFO = 1,
  MINOR = 2,
  ADULT = 3,
};

class bdTencentAASRecord
{
  /* 0x0000 */ long Padding_25[2];
  /* 0x0008 */ unsigned __int64 m_userID;
  /* 0x0010 */ enum bdTencentAASRecord::bdRecordStatus m_ageStatus;
  /* 0x0014 */ unsigned int m_gameplaySeconds;
  /* 0x0018 */ unsigned int m_recordAge;
}; /* size: 0x0020 */

typedef enum _TAG_UNNAMED_45
{
  TRACK_LOCATION_MRAM = 0,
  TRACK_LOCATION_LRAM = 1,
  TRACK_LOCATION_COUNT = 2,
} TAG_UNNAMED_45, *PTAG_UNNAMED_45;

struct MaterialArgumentCodeConst
{
  /* 0x0000 */ unsigned short index;
  /* 0x0002 */ unsigned char firstRow;
  /* 0x0003 */ unsigned char rowCount;
}; /* size: 0x0004 */

union MaterialArgumentDef
{
  union
  {
    /* 0x0000 */ const float* literalConst;
    /* 0x0000 */ struct MaterialArgumentCodeConst codeConst;
    /* 0x0000 */ unsigned int codeSampler;
    /* 0x0000 */ unsigned int nameHash;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

enum he_type_t
{
  HE_TYPE_FREE = 0,
  HE_TYPE_TEXT = 1,
  HE_TYPE_VALUE = 2,
  HE_TYPE_PLAYERNAME = 3,
  HE_TYPE_MAPNAME = 4,
  HE_TYPE_GAMETYPE = 5,
  HE_TYPE_DAMAGE_INDICATOR = 6,
  HE_TYPE_SCORE = 7,
  HE_TYPE_MATERIAL = 8,
  HE_TYPE_TIMER_DOWN = 9,
  HE_TYPE_TIMER_UP = 10,
  HE_TYPE_TENTHS_TIMER_DOWN = 11,
  HE_TYPE_TENTHS_TIMER_UP = 12,
  HE_TYPE_CLOCK_DOWN = 13,
  HE_TYPE_CLOCK_UP = 14,
  HE_TYPE_WAYPOINT = 15,
  HE_TYPE_PERKS = 16,
  HE_TYPE_COUNT = 17,
};

typedef struct _LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY* Flink;
  /* 0x0004 */ struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; /* size: 0x0008 */

typedef struct _RTL_CRITICAL_SECTION_DEBUG
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned short CreatorBackTraceIndex;
  /* 0x0004 */ struct _RTL_CRITICAL_SECTION* CriticalSection;
  /* 0x0008 */ struct _LIST_ENTRY ProcessLocksList;
  /* 0x0010 */ unsigned long EntryCount;
  /* 0x0014 */ unsigned long ContentionCount;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned short CreatorBackTraceIndexHigh;
  /* 0x001e */ unsigned short SpareWORD;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG; /* size: 0x0020 */

typedef enum _TAG_UNNAMED_46
{
  PM_WATER_LEVEL_NONE = 0,
  PM_WATER_LEVEL_SHALLOW = 1,
  PM_WATER_LEVEL_WAIST = 2,
  PM_WATER_LEVEL_CHEST = 3,
  PM_WATER_LEVEL_SWIM = 4,
  PM_WATER_LEVEL_DEEP = 5,
  PM_WATER_LEVEL_UNDER_WATER = 6,
  PM_WATER_LEVEL_COUNT = 7,
} TAG_UNNAMED_46, *PTAG_UNNAMED_46;

enum combatRecordMedalCategories_t
{
  CATEGORY_NONE = 0,
  CATEGORY_COMBAT = 1,
  CATEGORY_SCORESTREAKS = 2,
  CATEGORY_ANTISCORESTREAKS = 3,
  CATEGORY_GAMEMODES = 4,
  CATEGORY_COUNT = 5,
};

enum DXGI_FORMAT
{
  DXGI_FORMAT_UNKNOWN = 0,
  DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
  DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
  DXGI_FORMAT_R32G32B32A32_UINT = 3,
  DXGI_FORMAT_R32G32B32A32_SINT = 4,
  DXGI_FORMAT_R32G32B32_TYPELESS = 5,
  DXGI_FORMAT_R32G32B32_FLOAT = 6,
  DXGI_FORMAT_R32G32B32_UINT = 7,
  DXGI_FORMAT_R32G32B32_SINT = 8,
  DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
  DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
  DXGI_FORMAT_R16G16B16A16_UNORM = 11,
  DXGI_FORMAT_R16G16B16A16_UINT = 12,
  DXGI_FORMAT_R16G16B16A16_SNORM = 13,
  DXGI_FORMAT_R16G16B16A16_SINT = 14,
  DXGI_FORMAT_R32G32_TYPELESS = 15,
  DXGI_FORMAT_R32G32_FLOAT = 16,
  DXGI_FORMAT_R32G32_UINT = 17,
  DXGI_FORMAT_R32G32_SINT = 18,
  DXGI_FORMAT_R32G8X24_TYPELESS = 19,
  DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
  DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
  DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
  DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
  DXGI_FORMAT_R10G10B10A2_UNORM = 24,
  DXGI_FORMAT_R10G10B10A2_UINT = 25,
  DXGI_FORMAT_R11G11B10_FLOAT = 26,
  DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
  DXGI_FORMAT_R8G8B8A8_UNORM = 28,
  DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
  DXGI_FORMAT_R8G8B8A8_UINT = 30,
  DXGI_FORMAT_R8G8B8A8_SNORM = 31,
  DXGI_FORMAT_R8G8B8A8_SINT = 32,
  DXGI_FORMAT_R16G16_TYPELESS = 33,
  DXGI_FORMAT_R16G16_FLOAT = 34,
  DXGI_FORMAT_R16G16_UNORM = 35,
  DXGI_FORMAT_R16G16_UINT = 36,
  DXGI_FORMAT_R16G16_SNORM = 37,
  DXGI_FORMAT_R16G16_SINT = 38,
  DXGI_FORMAT_R32_TYPELESS = 39,
  DXGI_FORMAT_D32_FLOAT = 40,
  DXGI_FORMAT_R32_FLOAT = 41,
  DXGI_FORMAT_R32_UINT = 42,
  DXGI_FORMAT_R32_SINT = 43,
  DXGI_FORMAT_R24G8_TYPELESS = 44,
  DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
  DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
  DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
  DXGI_FORMAT_R8G8_TYPELESS = 48,
  DXGI_FORMAT_R8G8_UNORM = 49,
  DXGI_FORMAT_R8G8_UINT = 50,
  DXGI_FORMAT_R8G8_SNORM = 51,
  DXGI_FORMAT_R8G8_SINT = 52,
  DXGI_FORMAT_R16_TYPELESS = 53,
  DXGI_FORMAT_R16_FLOAT = 54,
  DXGI_FORMAT_D16_UNORM = 55,
  DXGI_FORMAT_R16_UNORM = 56,
  DXGI_FORMAT_R16_UINT = 57,
  DXGI_FORMAT_R16_SNORM = 58,
  DXGI_FORMAT_R16_SINT = 59,
  DXGI_FORMAT_R8_TYPELESS = 60,
  DXGI_FORMAT_R8_UNORM = 61,
  DXGI_FORMAT_R8_UINT = 62,
  DXGI_FORMAT_R8_SNORM = 63,
  DXGI_FORMAT_R8_SINT = 64,
  DXGI_FORMAT_A8_UNORM = 65,
  DXGI_FORMAT_R1_UNORM = 66,
  DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
  DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
  DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
  DXGI_FORMAT_BC1_TYPELESS = 70,
  DXGI_FORMAT_BC1_UNORM = 71,
  DXGI_FORMAT_BC1_UNORM_SRGB = 72,
  DXGI_FORMAT_BC2_TYPELESS = 73,
  DXGI_FORMAT_BC2_UNORM = 74,
  DXGI_FORMAT_BC2_UNORM_SRGB = 75,
  DXGI_FORMAT_BC3_TYPELESS = 76,
  DXGI_FORMAT_BC3_UNORM = 77,
  DXGI_FORMAT_BC3_UNORM_SRGB = 78,
  DXGI_FORMAT_BC4_TYPELESS = 79,
  DXGI_FORMAT_BC4_UNORM = 80,
  DXGI_FORMAT_BC4_SNORM = 81,
  DXGI_FORMAT_BC5_TYPELESS = 82,
  DXGI_FORMAT_BC5_UNORM = 83,
  DXGI_FORMAT_BC5_SNORM = 84,
  DXGI_FORMAT_B5G6R5_UNORM = 85,
  DXGI_FORMAT_B5G5R5A1_UNORM = 86,
  DXGI_FORMAT_B8G8R8A8_UNORM = 87,
  DXGI_FORMAT_B8G8R8X8_UNORM = 88,
  DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
  DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
  DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
  DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
  DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
  DXGI_FORMAT_BC6H_TYPELESS = 94,
  DXGI_FORMAT_BC6H_UF16 = 95,
  DXGI_FORMAT_BC6H_SF16 = 96,
  DXGI_FORMAT_BC7_TYPELESS = 97,
  DXGI_FORMAT_BC7_UNORM = 98,
  DXGI_FORMAT_BC7_UNORM_SRGB = 99,
  DXGI_FORMAT_FORCE_UINT = -1,
};

enum D3D10_DEPTH_WRITE_MASK
{
};

enum clientlsg_t
{
  CLIENT_LSG_DEV = 0,
  CLIENT_LSG_CERT = 1,
  CLIENT_LSG_LIVE = 2,
  MAX_CLIENT_LSGS = 3,
};

enum tagTYSPEC
{
  TYSPEC_CLSID = 0,
  TYSPEC_FILEEXT = 1,
  TYSPEC_MIMETYPE = 2,
  TYSPEC_FILENAME = 3,
  TYSPEC_PROGID = 4,
  TYSPEC_PACKAGENAME = 5,
  TYSPEC_OBJECTID = 6,
};

union vec4_t
{
  union
  {
    /* 0x0000 */ float v[4];
    struct
    {
      /* 0x0000 */ float x;
      /* 0x0004 */ float y;
      /* 0x0008 */ float z;
      /* 0x000c */ float w;
    }; /* size: 0x0010 */
    struct
    {
      /* 0x0000 */ float r;
      /* 0x0004 */ float g;
      /* 0x0008 */ float b;
      /* 0x000c */ float a;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

struct blend_ent_t
{
  /* 0x0000 */ union vec3_t pos;
  /* 0x000c */ union vec3_t vel;
  /* 0x0018 */ union vec4_t viewQuat;
  /* 0x0028 */ BOOL changed;
  /* 0x0029 */ char Padding_26[3];
  /* 0x002c */ float posAccelTime;
  /* 0x0030 */ float posDecelTime;
  /* 0x0034 */ float angleAccelTime;
  /* 0x0038 */ float angleDecelTime;
  /* 0x003c */ float startTime;
  /* 0x0040 */ float posTotalTime;
  /* 0x0044 */ float angleTotalTime;
}; /* size: 0x0048 */

class bdRunnable
{
  /* 0x0000 */ long Padding_27;
  /* 0x0004 */ BOOL m_stop;
}; /* size: 0x0008 */

enum std::float_round_style
{
  round_indeterminate = -1,
  round_toward_zero = 0,
  round_to_nearest = 1,
  round_toward_infinity = 2,
  round_toward_neg_infinity = 3,
};

typedef struct _XMUSHORTN4
{
  /* 0x0000 */ unsigned short x;
  /* 0x0002 */ unsigned short y;
  /* 0x0004 */ unsigned short z;
  /* 0x0006 */ unsigned short w;
} XMUSHORTN4, *PXMUSHORTN4; /* size: 0x0008 */

typedef enum _D3D_SHADER_INPUT_FLAGS
{
  D3D_SIF_USERPACKED = 1,
  D3D_SIF_COMPARISON_SAMPLER = 2,
  D3D_SIF_TEXTURE_COMPONENT_0 = 4,
  D3D_SIF_TEXTURE_COMPONENT_1 = 8,
  D3D_SIF_TEXTURE_COMPONENTS = 12,
  D3D10_SIF_USERPACKED = 1,
  D3D10_SIF_COMPARISON_SAMPLER = 2,
  D3D10_SIF_TEXTURE_COMPONENT_0 = 4,
  D3D10_SIF_TEXTURE_COMPONENT_1 = 8,
  D3D10_SIF_TEXTURE_COMPONENTS = 12,
  D3D_SIF_FORCE_DWORD = 0x7fffffff,
} D3D_SHADER_INPUT_FLAGS, *PD3D_SHADER_INPUT_FLAGS;

typedef enum _NVAPI_SURFACE_LAYOUT
{
  NVAPI_SURFACE_LAYOUT_BL = 0,
  NVAPI_SURFACE_LAYOUT_PL = 1,
  NVAPI_SURFACE_LAYOUT_TILED = 2,
} NVAPI_SURFACE_LAYOUT, *PNVAPI_SURFACE_LAYOUT;

enum BindIndex_t
{
  BIND_INDEX_PLAYER = 0,
  BIND_INDEX_START = 0,
  BIND_INDEX_VEHICLE = 1,
  BIND_INDEX_COUNT = 2,
};

enum eAutoMeleeState
{
  AMS_NOT_ACTIVE = 0,
  AIM_MELEE_STATE_TARGETED = 1,
  AIM_MELEE_STATE_UPDATING = 2,
};

class bdLobbyEventHandler
{
}; /* size: 0x0004 */

enum eGameModes
{
  GAMEMODE_PUBLIC_MATCH = 0,
  GAMEMODE_PRIVATE_MATCH = 1,
  GAMEMODE_LOCAL_SPLITSCREEN = 2,
  GAMEMODE_WAGER_MATCH = 3,
  GAMEMODE_BASIC_TRAINING = 4,
  GAMEMODE_THEATER = 5,
  GAMEMODE_LEAGUE_MATCH = 6,
  GAMEMODE_RTS = 7,
  GAMEMODE_MAX = 8,
  INVALID_GAMEMODE = 9,
};

typedef enum _TAG_UNNAMED_47
{
  CAMERA_REGION_LIT_OPAQUE = 0,
  CAMERA_REGION_LIT_TRANS = 1,
  CAMERA_REGION_LIT_QUASI_OPAQUE = 2,
  CAMERA_REGION_EMISSIVE_OPAQUE = 3,
  CAMERA_REGION_EMISSIVE_TRANS = 4,
  CAMERA_REGION_EMISSIVE_FX = 5,
  CAMERA_REGION_LIGHT_MAP_OPAQUE = 6,
  CAMERA_REGION_DEPTH_HACK = 7,
  CAMERA_REGION_UNUSED = 8,
  CAMERA_REGION_SONAR = 9,
  CAMERA_REGION_COUNT = 10,
  CAMERA_REGION_NONE = 10,
} TAG_UNNAMED_47, *PTAG_UNNAMED_47;

enum DEFAULTSAVEFOLDERTYPE
{
  DSFT_DETECT = 1,
  DSFT_PRIVATE = 2,
  DSFT_PUBLIC = 3,
};

typedef enum _D3D_SHADER_INPUT_TYPE
{
  D3D_SIT_CBUFFER = 0,
  D3D_SIT_TBUFFER = 1,
  D3D_SIT_TEXTURE = 2,
  D3D_SIT_SAMPLER = 3,
  D3D_SIT_UAV_RWTYPED = 4,
  D3D_SIT_STRUCTURED = 5,
  D3D_SIT_UAV_RWSTRUCTURED = 6,
  D3D_SIT_BYTEADDRESS = 7,
  D3D_SIT_UAV_RWBYTEADDRESS = 8,
  D3D_SIT_UAV_APPEND_STRUCTURED = 9,
  D3D_SIT_UAV_CONSUME_STRUCTURED = 10,
  D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = 11,
  D3D10_SIT_CBUFFER = 0,
  D3D10_SIT_TBUFFER = 1,
  D3D10_SIT_TEXTURE = 2,
  D3D10_SIT_SAMPLER = 3,
  D3D11_SIT_UAV_RWTYPED = 4,
  D3D11_SIT_STRUCTURED = 5,
  D3D11_SIT_UAV_RWSTRUCTURED = 6,
  D3D11_SIT_BYTEADDRESS = 7,
  D3D11_SIT_UAV_RWBYTEADDRESS = 8,
  D3D11_SIT_UAV_APPEND_STRUCTURED = 9,
  D3D11_SIT_UAV_CONSUME_STRUCTURED = 10,
  D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = 11,
} D3D_SHADER_INPUT_TYPE, *PD3D_SHADER_INPUT_TYPE;

enum NV_GPS_PS_STATUS
{
  NV_GPS_PS_DISABLED = 0,
  NV_GPS_PS_ENABLED = 1,
  NV_GPS_PS_NOT_SUPPORTED = 2,
};

enum loadoutClass_t
{
  CLASS_INVALID = -1,
  CUSTOM_CLASS_1 = 0,
  CUSTOM_CLASS_FIRST = 0,
  CUSTOM_CLASS_2 = 1,
  CUSTOM_CLASS_3 = 2,
  CUSTOM_CLASS_4 = 3,
  CUSTOM_CLASS_5 = 4,
  BASIC_CUSTOM_CLASS_COUNT = 5,
  CUSTOM_CLASS_6 = 5,
  CUSTOM_CLASS_7 = 6,
  CUSTOM_CLASS_8 = 7,
  CUSTOM_CLASS_9 = 8,
  CUSTOM_CLASS_10 = 9,
  CUSTOM_CLASS_COUNT = 10,
  DEFAULT_CLASS_FIRST = 10,
  DEFAULT_CLASS_SMG = 10,
  DEFAULT_CLASS_CQB = 11,
  DEFAULT_CLASS_ASSAULT = 12,
  DEFAULT_CLASS_LMG = 13,
  DEFAULT_CLASS_SNIPER = 14,
  DEFAULT_CLASS_LAST = 14,
  TOTAL_CLASS_COUNT = 15,
};

union GfxTexture
{
  union
  {
    /* 0x0000 */ struct ID3D11ShaderResourceView* basemap;
    /* 0x0000 */ struct GfxImageLoadDef* loadDef;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct Picmip
{
  /* 0x0000 */ unsigned char platform[2];
}; /* size: 0x0002 */

struct CardMemory
{
  /* 0x0000 */ int platform[2];
}; /* size: 0x0008 */

struct GfxImage
{
  /* 0x0000 */ union GfxTexture texture;
  /* 0x0004 */ unsigned char mapType;
  /* 0x0005 */ unsigned char semantic;
  /* 0x0006 */ unsigned char category;
  /* 0x0007 */ BOOL delayLoadPixels;
  /* 0x0008 */ struct Picmip picmip;
  /* 0x000a */ BOOL noPicmip;
  /* 0x000b */ unsigned char track;
  /* 0x000c */ struct CardMemory cardMemory;
  /* 0x0014 */ unsigned short width;
  /* 0x0016 */ unsigned short height;
  /* 0x0018 */ unsigned short depth;
  /* 0x001a */ unsigned char levelCount;
  /* 0x001b */ unsigned char streaming;
  /* 0x001c */ unsigned int baseSize;
  /* 0x0020 */ unsigned char* pixels;
  /* 0x0024 */ struct GfxStreamedPartInfo streamedParts[1];
  /* 0x003c */ unsigned char streamedPartCount;
  /* 0x003d */ char Padding_28[3];
  /* 0x0040 */ unsigned int loadedSize;
  /* 0x0044 */ unsigned char skippedMipLevels;
  /* 0x0045 */ char Padding_29[3];
  /* 0x0048 */ const char* name;
  /* 0x004c */ unsigned int hash;
}; /* size: 0x0050 */

class pulse_sum_point
{
  /* 0x0000 */ long Padding_30[4];
  /* 0x0010 */ class phys_vec3 m_b1_r;
  /* 0x0020 */ class phys_vec3 m_b2_r;
  /* 0x0030 */ class phys_vec3 m_b1_apx;
  /* 0x0040 */ class phys_vec3 m_b2_apx;
  /* 0x0050 */ class phys_vec3 m_b1_apy;
  /* 0x0060 */ class phys_vec3 m_b2_apy;
  /* 0x0070 */ class phys_vec3 m_b1_apz;
  /* 0x0080 */ class phys_vec3 m_b2_apz;
  /* 0x0090 */ class phys_vec3 m_pulse_sum;
  /* 0x00a0 */ class phys_vec3 m_right_side;
  /* 0x00b0 */ class phys_vec3 m_big_dirt;
  /* 0x00c0 */ class phys_vec3 m_cr23;
  /* 0x00d0 */ class phys_vec3 m_cr31;
  /* 0x00e0 */ class phys_vec3 m_cr12;
  /* 0x00f0 */ class phys_vec3 m_denom;
  /* 0x0100 */ float m_cfm;
  /* 0x0104 */ class pulse_sum_node* m_b1;
  /* 0x0108 */ class pulse_sum_node* m_b2;
  /* 0x010c */ class pulse_sum_cache* m_pulse_sum_cache;
}; /* size: 0x0110 */

class bdSecurityID
{
  /* 0x0000 */ unsigned char ab[8];
}; /* size: 0x0008 */

struct XNADDR
{
  /* 0x0000 */ unsigned char addrBuff[37];
}; /* size: 0x0025 */

class bdSecurityKey
{
  /* 0x0000 */ unsigned char ab[16];
}; /* size: 0x0010 */

struct XSESSION_INFO
{
  /* 0x0000 */ class bdSecurityID sessionID;
  /* 0x0008 */ struct XNADDR hostAddress;
  /* 0x002d */ class bdSecurityKey keyExchangeKey;
}; /* size: 0x003d */

enum netadrtype_t
{
  NA_BOT = 0,
  NA_BAD = 1,
  NA_LOOPBACK = 2,
  NA_BROADCAST = 3,
  NA_IP = 4,
};

enum netsrc_t
{
  NS_NULL = -1,
  NS_CLIENT1 = 0,
  NS_CLIENT2 = 1,
  NS_CLIENT3 = 2,
  NS_CLIENT4 = 3,
  NS_SERVER = 4,
  NS_MAXCLIENTS = 4,
  NS_PACKET = 5,
};

struct netadr_t
{
  union
  {
    /* 0x0000 */ unsigned char ip[4];
    /* 0x0000 */ unsigned int inaddr;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned short port;
  /* 0x0006 */ char Padding_31[2];
  /* 0x0008 */ enum netadrtype_t type;
  /* 0x000c */ enum netsrc_t localNetID;
  /* 0x0010 */ unsigned short serverID;
  /* 0x0012 */ char __PADDING__[2];
}; /* size: 0x0014 */

struct ClientInfo
{
  /* 0x0000 */ BOOL registered;
  /* 0x0001 */ BOOL voiceRegistered;
  /* 0x0002 */ char Padding_32[6];
  /* 0x0008 */ unsigned __int64 xuid;
  /* 0x0010 */ int natType;
  /* 0x0014 */ struct netadr_t addr;
  /* 0x0028 */ int voiceConnectivityBits;
  /* 0x002c */ int lastConnectivityTestTime[1];
  /* 0x0030 */ BOOL friends;
  /* 0x0031 */ char Padding_33[3];
  /* 0x0034 */ int flags;
  /* 0x0038 */ BOOL muted;
  /* 0x0039 */ char Padding_34[3];
  /* 0x003c */ int performanceValue;
  /* 0x0040 */ BOOL privateSlot;
  /* 0x0041 */ char __PADDING__[7];
}; /* size: 0x0048 */

enum ControllerIndex_t
{
  INVALID_CONTROLLER_PORT = -1,
  CONTROLLER_INDEX_FIRST = 0,
  CONTROLLER_INDEX_0 = 0,
  CONTROLLER_INDEX_COUNT = 1,
};

struct RegisteredUser
{
  /* 0x0000 */ BOOL active;
  /* 0x0001 */ char Padding_35[7];
  /* 0x0008 */ unsigned __int64 xuid;
  /* 0x0010 */ BOOL privateSlot;
  /* 0x0011 */ char Padding_36[3];
  /* 0x0014 */ int performanceValue;
}; /* size: 0x0018 */

struct SessionDynamicData
{
  /* 0x0000 */ BOOL sessionHandle;
  /* 0x0001 */ struct XSESSION_INFO sessionInfo;
  /* 0x003e */ BOOL keysGenerated;
  /* 0x003f */ BOOL sessionStartCalled;
  /* 0x0040 */ unsigned __int64 sessionNonce;
  /* 0x0048 */ int privateSlots;
  /* 0x004c */ int publicSlots;
  /* 0x0050 */ int flags;
  /* 0x0054 */ BOOL qosListenEnabled;
  /* 0x0055 */ char Padding_37[3];
  /* 0x0058 */ struct ClientInfo users[19];
  /* 0x05b0 */ enum ControllerIndex_t sessionCreateController;
  /* 0x05b4 */ int sessionDeleteTime;
  /* 0x05b8 */ int actualPublicSlots;
  /* 0x05bc */ int voiceConnectivityBits;
  /* 0x05c0 */ struct RegisteredUser internalRegisteredUsers[19];
}; /* size: 0x0788 */

enum weapPositionAnimNum_t
{
  WEAPPOS_HIP_TO_ADS = 0,
  WEAPPOS_ADS_TO_HIP = 1,
  NUM_WEAPPOS_ANIMS = 2,
};

class bdReference<bdByteBuffer>
{
  /* 0x0000 */ class bdByteBuffer* m_ptr;
}; /* size: 0x0004 */

class bdBoolResult
{
  /* 0x0000 */ long Padding_38;
  /* 0x0004 */ BOOL m_result;
}; /* size: 0x0008 */

struct zbarrier_piece_t
{
  /* 0x0000 */ unsigned char state;
  /* 0x0001 */ unsigned char scalar;
  /* 0x0002 */ unsigned char nextState;
  /* 0x0003 */ char Padding_39;
  /* 0x0004 */ int startTime;
}; /* size: 0x0008 */

enum XAUDIO2_WINDOWS_PROCESSOR_SPECIFIER
{
  Processor1 = 1,
  Processor2 = 2,
  Processor3 = 4,
  Processor4 = 8,
  Processor5 = 16,
  Processor6 = 32,
  Processor7 = 64,
  Processor8 = 128,
  Processor9 = 256,
  Processor10 = 512,
  Processor11 = 1024,
  Processor12 = 2048,
  Processor13 = 4096,
  Processor14 = 8192,
  Processor15 = 16384,
  Processor16 = 0xffff8000,
  Processor17 = 0x10000,
  Processor18 = 0x20000,
  Processor19 = 0x40000,
  Processor20 = 0x80000,
  Processor21 = 0x100000,
  Processor22 = 0x200000,
  Processor23 = 0x400000,
  Processor24 = 0x800000,
  Processor25 = 0x1000000,
  Processor26 = 0x2000000,
  Processor27 = 0x4000000,
  Processor28 = 0x8000000,
  Processor29 = 0x10000000,
  Processor30 = 0x20000000,
  Processor31 = 0x40000000,
  Processor32 = -2147483648,
  XAUDIO2_ANY_PROCESSOR = -1,
  XAUDIO2_DEFAULT_PROCESSOR = -1,
};

enum consoleChannel_e
{
  CON_CHANNEL_DONT_FILTER = 0,
  CON_CHANNEL_ERROR = 1,
  CON_CHANNEL_GAMENOTIFY = 2,
  CON_CHANNEL_BOLDGAME = 3,
  CON_CHANNEL_OBJNOTIFY = 4,
  CON_CHANNEL_SUBTITLE = 5,
  CON_CHANNEL_OBITUARY = 6,
  CON_CHANNEL_COOPINFO = 7,
  CON_CHANNEL_LOGFILEONLY = 8,
  CON_CHANNEL_CONSOLEONLY = 9,
  CON_CHANNEL_SYSTEM = 10,
  CON_CHANNEL_NETWORK = 11,
  CON_CHANNEL_TASK = 12,
  CON_CHANNEL_GFX = 13,
  CON_CHANNEL_SOUND = 14,
  CON_CHANNEL_FILES = 15,
  CON_CHANNEL_UI = 16,
  CON_CHANNEL_AI = 17,
  CON_CHANNEL_ANIM = 18,
  CON_CHANNEL_PHYS = 19,
  CON_CHANNEL_FX = 20,
  CON_CHANNEL_SCRIPT = 21,
  CON_CHANNEL_TL = 22,
  CON_CHANNEL_PERFORMANCE = 23,
  CON_CHANNEL_DEVGUI = 24,
  CON_CHANNEL_CLIENT = 25,
  CON_CHANNEL_SERVER = 26,
  CON_CHANNEL_PLAYERWEAP = 27,
  CON_CHANNEL_LIVE = 28,
  CON_CHANNEL_FROMSCRIPT = 29,
  CON_CHANNEL_SPAWNSYSTEM = 30,
  CON_CHANNEL_LEADERBOARDS = 31,
  CON_CHANNEL_DDL = 32,
  CON_CHANNEL_SPU = 33,
  CON_CHANNEL_GAMERPROFILE = 34,
  CON_CHANNEL_PRESENCE = 35,
  CON_CHANNEL_RUMBLE = 36,
  CON_CHANNEL_UNLOCKABLES = 37,
  CON_CHANNEL_VOICE = 38,
  CON_CHANNEL_HTTP = 39,
  CON_CHANNEL_GFWL = 40,
  CON_CHANNEL_IPAK = 41,
  CON_CHANNEL_WEBM = 42,
  CON_CHANNEL_PROBER = 43,
  CON_CHANNEL_MIPSTER = 44,
  CON_CHANNEL_STEAM = 45,
  CON_CHANNEL_SOCIAL = 46,
  CON_CHANNEL_DCACHE = 47,
  CON_CHANNEL_RSTREAM = 48,
  CON_CHANNEL_SCHEDULER = 49,
  CON_CHANNEL_MATCHRECORD = 50,
  CON_CHANNEL_MIGRATE = 51,
  CON_BUILTIN_CHANNEL_COUNT = 52,
  CON_FIRST_DEBUG_CHANNEL = 46,
};

enum D3D10_RESOURCE_DIMENSION
{
};

typedef struct _XMDHENN3
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ int x : 10; /* bit position: 0 */
      /* 0x0000 */ int y : 11; /* bit position: 10 */
      /* 0x0000 */ int z : 11; /* bit position: 21 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMDHENN3, *PXMDHENN3; /* size: 0x0004 */

enum IdentityParam
{
  IDENTITY_ID = 0,
  IDENTITY_TITLE_ID = 1,
  IDENTITY_AUTH_ADDR = 2,
  IDENTITY_LSG_ADDR = 3,
  IDENTITY_DW_KEY = 4,
  IDENTITY_ENVIRONMENT = 5,
  IDENTITY_PLATFORM = 6,
  IDENTITY_PARAM_COUNT = 7,
};

enum WeapAccuracyType
{
  WEAP_ACCURACY_AI_VS_AI = 0,
  WEAP_ACCURACY_AI_VS_PLAYER = 1,
  WEAP_ACCURACY_COUNT = 2,
};

typedef enum _TAG_UNNAMED_48
{
  CF_INVALID = -1,
  CF_WORLDFIELDS = 0,
  CF_ACTORFIELDS = 1,
  CF_VEHICLEFIELDS = 2,
  CF_PLAYERFIELDS_CLIENTSIDE = 3,
  CF_PLAYERFIELDS_SERVERSIDE = 4,
  CF_PLAYERSTATEFIELDS = 5,
  CF_SCRIPTMOVERFIELDS = 6,
  CF_HELICOPTERFIELDS = 7,
  CF_PLANEFIELDS = 8,
  CF_TURRETFIELDS = 9,
  CF_MISSILEFIELDS = 10,
  CF_ZBARRIERFIELDS = 11,
  MAX_CLIENTFIELD_SETS = 12,
} TAG_UNNAMED_48, *PTAG_UNNAMED_48;

enum D3D10_RTV_DIMENSION
{
};

enum D3D11_FILTER
{
  D3D11_FILTER_MIN_MAG_MIP_POINT = 0,
  D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1,
  D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4,
  D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5,
  D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16,
  D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17,
  D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20,
  D3D11_FILTER_MIN_MAG_MIP_LINEAR = 21,
  D3D11_FILTER_ANISOTROPIC = 85,
  D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128,
  D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129,
  D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132,
  D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133,
  D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144,
  D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145,
  D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148,
  D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149,
  D3D11_FILTER_COMPARISON_ANISOTROPIC = 213,
};

typedef enum _NVAPI_DITHER_BITS
{
  NVAPI_DITHER_BITS_6BITS = 0,
  NVAPI_DITHER_BITS_8BITS = 1,
} NVAPI_DITHER_BITS, *PNVAPI_DITHER_BITS;

struct CRCscan
{
  /* 0x0000 */ unsigned int goal_crc;
  /* 0x0004 */ int bytes_left;
  /* 0x0008 */ unsigned int crc_so_far;
  /* 0x000c */ int bytes_done;
  /* 0x0010 */ unsigned int sample_loc;
}; /* size: 0x0014 */

typedef enum _TAG_UNNAMED_49
{
  _BUF_SIZE = 8,
} TAG_UNNAMED_49, *PTAG_UNNAMED_49;

typedef enum _TAG_UNNAMED_50
{
  REQUEST_MULTI_LB_READ_COMBAT_RECORD_DATA = 1,
  REQUEST_MULTI_LB_READ_MINI_LBS = 2,
} TAG_UNNAMED_50, *PTAG_UNNAMED_50;

typedef enum _D3D_SHADER_CBUFFER_FLAGS
{
  D3D_CBF_USERPACKED = 1,
  D3D10_CBF_USERPACKED = 1,
  D3D_CBF_FORCE_DWORD = 0x7fffffff,
} D3D_SHADER_CBUFFER_FLAGS, *PD3D_SHADER_CBUFFER_FLAGS;

typedef enum _TAG_UNNAMED_51
{
  CFT_TYPE = 18,
  CFT_NUM = 19,
} TAG_UNNAMED_51, *PTAG_UNNAMED_51;

enum XAnimFlags
{
  XANIM_LOOP_SYNC_TIME = 1,
  XANIM_NONLOOP_SYNC_TIME = 2,
  XANIM_SYNC_ROOT = 4,
  XANIM_COMPLETE = 8,
  XANIM_ADDITIVE = 16,
  XANIM_CLIENT = 32,
  XANIM_SEPARATE = 64,
  XANIM_FORCELOAD = 128,
  XANIM_PROPOGATE_FLAGS = 99,
};

enum weapAnimNumber_t
{
  WEAP_IDLE = 0,
  WEAP_FORCE_IDLE = 1,
  WEAP_ATTACK = 2,
  WEAP_ATTACK_LEFT = 3,
  WEAP_ATTACK_LASTSHOT = 4,
  WEAP_ATTACK_LASTSHOT_LEFT = 5,
  WEAP_RECHAMBER = 6,
  WEAP_ADS_ATTACK = 7,
  WEAP_ADS_ATTACK_LASTSHOT = 8,
  WEAP_ADS_RECHAMBER = 9,
  WEAP_MELEE_ATTACK = 10,
  WEAP_MELEE_ATTACK_EMPTY = 11,
  WEAP_MELEE_CHARGE = 12,
  WEAP_MELEE_CHARGE_EMPTY = 13,
  WEAP_DROP = 14,
  WEAP_RAISE = 15,
  WEAP_FIRST_RAISE = 16,
  WEAP_RELOAD = 17,
  WEAP_RELOAD_EMPTY = 18,
  WEAP_RELOAD_START = 19,
  WEAP_RELOAD_END = 20,
  WEAP_RELOAD_QUICK = 21,
  WEAP_RELOAD_QUICK_EMPTY = 22,
  WEAP_ALTSWITCHFROM = 23,
  WEAP_ALTSWITCHTO = 24,
  WEAP_QUICK_DROP = 25,
  WEAP_QUICK_RAISE = 26,
  WEAP_EMPTY_DROP = 27,
  WEAP_EMPTY_RAISE = 28,
  WEAP_SPRINT_IN = 29,
  WEAP_SPRINT_LOOP = 30,
  WEAP_SPRINT_OUT = 31,
  WEAP_SPRINT_EMPTY_IN = 32,
  WEAP_SPRINT_EMPTY_LOOP = 33,
  WEAP_SPRINT_EMPTY_OUT = 34,
  WEAP_LOWREADY_IN = 35,
  WEAP_LOWREADY_LOOP = 36,
  WEAP_LOWREADY_OUT = 37,
  WEAP_CONT_FIRE_IN = 38,
  WEAP_CONT_FIRE_LOOP = 39,
  WEAP_CONT_FIRE_OUT = 40,
  WEAP_HOLD_FIRE = 41,
  WEAP_DETONATE = 42,
  WEAP_NIGHTVISION_WEAR = 43,
  WEAP_NIGHTVISION_REMOVE = 44,
  WEAP_DEPLOYING = 45,
  WEAP_BREAKING_DOWN = 46,
  WEAP_DTP_IN = 47,
  WEAP_DTP_LOOP = 48,
  WEAP_DTP_OUT = 49,
  WEAP_DTP_EMPTY_IN = 50,
  WEAP_DTP_EMPTY_LOOP = 51,
  WEAP_DTP_EMPTY_OUT = 52,
  WEAP_SLIDE_IN = 53,
  WEAP_MANTLE = 54,
  WEAP_JAM = 55,
  WEAP_CRAWL_IN = 56,
  WEAP_CRAWL_FORWARD = 57,
  WEAP_CRAWL_BACK = 58,
  WEAP_CRAWL_RIGHT = 59,
  WEAP_CRAWL_LEFT = 60,
  WEAP_CRAWL_OUT = 61,
  WEAP_CRAWL_EMPTY_IN = 62,
  WEAP_CRAWL_EMPTY_FORWARD = 63,
  WEAP_CRAWL_EMPTY_BACK = 64,
  WEAP_CRAWL_EMPTY_RIGHT = 65,
  WEAP_CRAWL_EMPTY_LEFT = 66,
  WEAP_CRAWL_EMPTY_OUT = 67,
  MAX_WP_ANIMATIONS = 68,
};

enum typeEnumLB
{
  LB_SERVER = 0,
  LB_OWNERSHIP_PLAYED = 1,
  LB_OWNERSHIP_OWNED = 2,
  LB_OWNERSHIP_DENIED = 3,
};

class bdGroup
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

enum itemGroup_t
{
  ITEMGROUP_SMG = 0,
  ITEMGROUP_FIRST = 0,
  ITEMGROUP_ASSAULT = 1,
  ITEMGROUP_CQB = 2,
  ITEMGROUP_LMG = 3,
  ITEMGROUP_SNIPER = 4,
  ITEMGROUP_PISTOL = 5,
  ITEMGROUP_LAUNCHER = 6,
  ITEMGROUP_SPECIAL = 7,
  ITEMGROUP_SHOTGUN = 8,
  ITEMGROUP_EXPLOSIVE = 9,
  ITEMGROUP_GRENADE = 10,
  ITEMGROUP_MASTERKEY = 11,
  ITEMGROUP_GRENADELAUNCHER = 12,
  ITEMGROUP_FLAMETHROWER = 13,
  ITEMGROUP_SPECIALTY = 14,
  ITEMGROUP_SPECIALGRENADE = 15,
  ITEMGROUP_MISCWEAPON = 16,
  ITEMGROUP_FEATURE = 17,
  ITEMGROUP_BONUSCARD = 18,
  ITEMGROUP_GLOBAL_ITEMS_START = 19,
  ITEMGROUP_KILLSTREAK = 19,
  ITEMGROUP_COUNT = 20,
  ITEMGROUP_INVALID = -1,
};

typedef enum _D3D_CBUFFER_TYPE
{
  D3D_CT_CBUFFER = 0,
  D3D_CT_TBUFFER = 1,
  D3D_CT_INTERFACE_POINTERS = 2,
  D3D_CT_RESOURCE_BIND_INFO = 3,
  D3D10_CT_CBUFFER = 0,
  D3D10_CT_TBUFFER = 1,
  D3D11_CT_CBUFFER = 0,
  D3D11_CT_TBUFFER = 1,
  D3D11_CT_INTERFACE_POINTERS = 2,
  D3D11_CT_RESOURCE_BIND_INFO = 3,
} D3D_CBUFFER_TYPE, *PD3D_CBUFFER_TYPE;

struct IRecordInfo
{
}; /* size: 0x0004 */

enum weaponAltModel_t
{
  WEAP_ALT_MODEL0 = 0,
  WEAP_ALT_MODEL1 = 1,
  WEAP_ALT_MODEL2 = 2,
  WEAP_ALT_MODEL3 = 3,
  WEAP_ALT_MODEL4 = 4,
  WEAP_ALT_MODEL5 = 5,
  WEAP_ALT_MODEL6 = 6,
  WEAP_ALT_MODEL7 = 7,
  WEAP_ALT_MODEL8 = 8,
  WEAP_ALT_MODEL9 = 9,
  WEAP_ALT_MODEL10 = 10,
  WEAP_ALT_MODEL11 = 11,
  WEAP_ALT_MODEL12 = 12,
  WEAP_ALT_MODEL13 = 13,
  WEAP_ALT_MODEL14 = 14,
  WEAP_ALT_MODEL15 = 15,
  NUM_WEAP_ALTMODELS = 16,
};

enum D3D11_TEXTURE_ADDRESS_MODE
{
  D3D11_TEXTURE_ADDRESS_WRAP = 1,
  D3D11_TEXTURE_ADDRESS_MIRROR = 2,
  D3D11_TEXTURE_ADDRESS_CLAMP = 3,
  D3D11_TEXTURE_ADDRESS_BORDER = 4,
  D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 5,
};

typedef enum _NV_GPU_OUTPUT_TYPE
{
  NVAPI_GPU_OUTPUT_UNKNOWN = 0,
  NVAPI_GPU_OUTPUT_CRT = 1,
  NVAPI_GPU_OUTPUT_DFP = 2,
  NVAPI_GPU_OUTPUT_TV = 3,
} NV_GPU_OUTPUT_TYPE, *PNV_GPU_OUTPUT_TYPE;

typedef enum _TAG_UNNAMED_52
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_52, *PTAG_UNNAMED_52;

typedef enum _TAG_UNNAMED_53
{
  XANIM_NOTIFY_NO_ONE = 0,
  XANIM_NOTIFY_SERVER = 1,
  XANIM_NOTIFY_CLIENT = 2,
  XANIM_NOTIFY_BOTH = 3,
} TAG_UNNAMED_53, *PTAG_UNNAMED_53;

typedef enum _TAG_UNNAMED_54
{
  VFT_TYPE = 18,
  VFT_CAMERAMODE = 19,
  VFT_TRACTION_TYPE = 20,
  VFT_MPH_TO_INCHES_PER_SECOND = 21,
  VFT_POUNDS_TO_GAME_MASS = 22,
  VFT_TEAM = 23,
  VFT_KEY_BINDING = 24,
  VFT_GRAPH = 25,
  VFT_WIIUCONTROLOVERRIDE = 26,
  VFT_NUM = 27,
} TAG_UNNAMED_54, *PTAG_UNNAMED_54;

typedef enum _TAG_UNNAMED_55
{
  MT_NODE_SIZE = 24,
} TAG_UNNAMED_55, *PTAG_UNNAMED_55;

typedef enum _NVAPI_VIDEO_FEATURE
{
  NVAPI_VF_UNKNOWN = 0,
  NVAPI_VF_MPEG2SDDecodeAcceleration = 1,
  NVAPI_VF_MPEG2HDDecodeAcceleration = 2,
  NVAPI_VF_VC1SDDecodeAcceleration = 3,
  NVAPI_VF_VC1HDDecodeAcceleration = 4,
  NVAPI_VF_H264SDDecodeAcceleration = 5,
  NVAPI_VF_H264HDDecodeAcceleration = 6,
  NVAPI_VF_WMV9SDDecodeAcceleration = 7,
  NVAPI_VF_WMV9HDDecodeAcceleration = 8,
  NVAPI_VF_ProcAmp = 9,
  NVAPI_VF_ColorTemperatureCorrection = 10,
  NVAPI_VF_ColorSpaceConversion = 11,
  NVAPI_VF_GammaCorrection = 12,
  NVAPI_VF_OverDrive = 13,
  NVAPI_VF_DynamicContrastEnhancement = 14,
  NVAPI_VF_StretchBlueGreenSkin = 15,
  NVAPI_VF_AdaptiveDeInterlacing = 16,
  NVAPI_VF_NoiseReduction = 17,
  NVAPI_VF_EdgeEnhancement = 18,
  NVAPI_VF_InverseTelecine = 19,
  NVAPI_VF_Scaling = 20,
  NVAPI_VF_VideoMirror = 21,
  NVAPI_VF_Blend = 22,
  NVAPI_VF_DxvaHDTest = 23,
  NVAPI_VF_GamutRemap = 24,
  NVAPI_VF_MftXcode = 25,
  NVAPI_VF_SkinToneCorrection = 26,
  NVAPI_VF_MftYUY2Xcode = 27,
  NVAPI_VF_MftDivxXcode = 28,
  NVAPI_VF_MftWmv9Encode = 29,
  NVAPI_VF_DynamicPState = 30,
  NVAPI_VF_PostProcessVIC = 31,
  NVAPI_VF_MVCHDDecodeAcceleration = 32,
  NVAPI_VF_SVCHDDecodeAcceleration = 33,
  NVAPI_VF_SimpleScaling = 34,
  NVAPI_VF_ID_LAST = 35,
} NVAPI_VIDEO_FEATURE, *PNVAPI_VIDEO_FEATURE;

union vec2_t
{
  union
  {
    /* 0x0000 */ float v[2];
    struct
    {
      /* 0x0000 */ float x;
      /* 0x0004 */ float y;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct bot_steering_t
{
  /* 0x0000 */ union vec2_t anglesDesired;
  /* 0x0008 */ union vec2_t anglesAverage;
  /* 0x0010 */ union vec2_t anglesBase;
  /* 0x0018 */ float yawDelta;
  /* 0x001c */ float pitchDelta;
}; /* size: 0x0020 */

enum D3D_NAME
{
  D3D_NAME_UNDEFINED = 0,
  D3D_NAME_POSITION = 1,
  D3D_NAME_CLIP_DISTANCE = 2,
  D3D_NAME_CULL_DISTANCE = 3,
  D3D_NAME_RENDER_TARGET_ARRAY_INDEX = 4,
  D3D_NAME_VIEWPORT_ARRAY_INDEX = 5,
  D3D_NAME_VERTEX_ID = 6,
  D3D_NAME_PRIMITIVE_ID = 7,
  D3D_NAME_INSTANCE_ID = 8,
  D3D_NAME_IS_FRONT_FACE = 9,
  D3D_NAME_SAMPLE_INDEX = 10,
  D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR = 11,
  D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 12,
  D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR = 13,
  D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR = 14,
  D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR = 15,
  D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR = 16,
  D3D_NAME_TARGET = 64,
  D3D_NAME_DEPTH = 65,
  D3D_NAME_COVERAGE = 66,
  D3D_NAME_DEPTH_GREATER_EQUAL = 67,
  D3D_NAME_DEPTH_LESS_EQUAL = 68,
  D3D10_NAME_UNDEFINED = 0,
  D3D10_NAME_POSITION = 1,
  D3D10_NAME_CLIP_DISTANCE = 2,
  D3D10_NAME_CULL_DISTANCE = 3,
  D3D10_NAME_RENDER_TARGET_ARRAY_INDEX = 4,
  D3D10_NAME_VIEWPORT_ARRAY_INDEX = 5,
  D3D10_NAME_VERTEX_ID = 6,
  D3D10_NAME_PRIMITIVE_ID = 7,
  D3D10_NAME_INSTANCE_ID = 8,
  D3D10_NAME_IS_FRONT_FACE = 9,
  D3D10_NAME_SAMPLE_INDEX = 10,
  D3D10_NAME_TARGET = 64,
  D3D10_NAME_DEPTH = 65,
  D3D10_NAME_COVERAGE = 66,
  D3D11_NAME_FINAL_QUAD_EDGE_TESSFACTOR = 11,
  D3D11_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 12,
  D3D11_NAME_FINAL_TRI_EDGE_TESSFACTOR = 13,
  D3D11_NAME_FINAL_TRI_INSIDE_TESSFACTOR = 14,
  D3D11_NAME_FINAL_LINE_DETAIL_TESSFACTOR = 15,
  D3D11_NAME_FINAL_LINE_DENSITY_TESSFACTOR = 16,
  D3D11_NAME_DEPTH_GREATER_EQUAL = 67,
  D3D11_NAME_DEPTH_LESS_EQUAL = 68,
};

enum svscmd_type
{
  SV_CMD_CAN_IGNORE = 0,
  SV_CMD_RELIABLE = 1,
};

enum loadoutSlot_t
{
  LOADOUTSLOT_INVALID = -1,
  LOADOUTSLOT_FIRST = 0,
  LOADOUTSLOT_PRIMARY_WEAPON = 0,
  LOADOUTSLOT_PRIMARY_ATTACHMENT1 = 1,
  LOADOUTSLOT_PRIMARY_ATTACHMENT2 = 2,
  LOADOUTSLOT_PRIMARY_ATTACHMENT3 = 3,
  LOADOUTSLOT_PRIMARY_CAMO = 4,
  LOADOUTSLOT_PRIMARY_RETICLE = 5,
  LOADOUTSLOT_PRIMARY_RETICLE_COLOR = 6,
  LOADOUTSLOT_PRIMARY_LENS = 7,
  LOADOUTSLOT_PRIMARY_EMBLEM = 8,
  LOADOUTSLOT_PRIMARY_TAG = 9,
  LOADOUTSLOT_SECONDARY_WEAPON = 10,
  LOADOUTSLOT_SECONDARY_ATTACHMENT1 = 11,
  LOADOUTSLOT_SECONDARY_ATTACHMENT2 = 12,
  LOADOUTSLOT_SECONDARY_ATTACHMENT3 = 13,
  LOADOUTSLOT_SECONDARY_CAMO = 14,
  LOADOUTSLOT_SECONDARY_RETICLE = 15,
  LOADOUTSLOT_SECONDARY_RETICLE_COLOR = 16,
  LOADOUTSLOT_SECONDARY_LENS = 17,
  LOADOUTSLOT_SECONDARY_EMBLEM = 18,
  LOADOUTSLOT_SECONDARY_TAG = 19,
  LOADOUTSLOT_KNIFE_CAMO = 20,
  LOADOUTSLOT_FIRST_SPECIALTY = 21,
  LOADOUTSLOT_SPECIALTY1 = 21,
  LOADOUTSLOT_SPECIALTY2 = 22,
  LOADOUTSLOT_SPECIALTY3 = 23,
  LOADOUTSLOT_SPECIALTY4 = 24,
  LOADOUTSLOT_SPECIALTY5 = 25,
  LOADOUTSLOT_SPECIALTY6 = 26,
  LOADOUTSLOT_LAST_SPECIALTY = 26,
  LOADOUTSLOT_PRIMARY_GRENADE = 27,
  LOADOUTSLOT_PRIMARY_GRENADE_COUNT = 28,
  LOADOUTSLOT_PRIMARY_GRENADE_STATUS1 = 29,
  LOADOUTSLOT_PRIMARY_GRENADE_STATUS2 = 30,
  LOADOUTSLOT_PRIMARY_GRENADE_STATUS3 = 31,
  LOADOUTSLOT_SPECIAL_GRENADE = 32,
  LOADOUTSLOT_SPECIAL_GRENADE_COUNT = 33,
  LOADOUTSLOT_SPECIAL_GRENADE_STATUS1 = 34,
  LOADOUTSLOT_SPECIAL_GRENADE_STATUS2 = 35,
  LOADOUTSLOT_SPECIAL_GRENADE_STATUS3 = 36,
  LOADOUTSLOT_FIRST_BONUSCARD = 37,
  LOADOUTSLOT_BONUSCARD1 = 37,
  LOADOUTSLOT_BONUSCARD2 = 38,
  LOADOUTSLOT_BONUSCARD3 = 39,
  LOADOUTSLOT_LAST_BONUSCARD = 39,
  LOADOUTSLOT_GLOBAL_ITEMS_START = 40,
  LOADOUTSLOT_KILLSTREAK1 = 40,
  LOADOUTSLOT_KILLSTREAK2 = 41,
  LOADOUTSLOT_KILLSTREAK3 = 42,
  LOADOUTSLOT_KILLSTREAK4 = 43,
  LOADOUTSLOT_GLOBAL_ITEMS_END = 43,
  LOADOUTSLOT_COUNT = 44,
};

typedef enum _TAG_UNNAMED_56
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_56, *PTAG_UNNAMED_56;

enum statsMilestoneTypes_t
{
  MILESTONE_GLOBAL = 0,
  MILESTONE_FIRST = 0,
  MILESTONE_WEAPON = 1,
  MILESTONE_GAMEMODE = 2,
  MILESTONE_GROUP = 3,
  MILESTONE_ATTACHMENTS = 4,
  MILESTONE_COUNT = 5,
  MILESTONE_INVALID = 5,
};

typedef enum _TAG_UNNAMED_57
{
  _BUF_SIZE = 16,
} TAG_UNNAMED_57, *PTAG_UNNAMED_57;

enum MigrationState
{
  MSTATE_INACTIVE = 0,
  MSTATE_STARTING = 1,
  MSTATE_HEADER = 2,
  MSTATE_SENDING = 3,
  MSTATE_FINALIZING = 4,
};

enum dlcIndex_t
{
  CONTENT_DEV_MAP_INDEX = -1,
  CONTENT_ORIGINAL_MAP_INDEX = 0,
  CONTENT_DLC0_INDEX = 1,
  CONTENT_DLCZM0_INDEX = 2,
  CONTENT_DLC1_INDEX = 3,
  CONTENT_DLC2_INDEX = 4,
  CONTENT_DLC3_INDEX = 5,
  CONTENT_DLC4_INDEX = 6,
  CONTENT_DLC5_INDEX = 7,
  CONTENT_DLC0DD_INDEX = 8,
  CONTENT_DLCSEASONPASS_INDEX = 9,
  CONTENT_DLC_INDEX_MAX = 10,
};

enum LocalClientNum_t
{
  INVALID_LOCAL_CLIENT = -1,
  LOCAL_CLIENT_FIRST = 0,
  LOCAL_CLIENT_0 = 0,
  ONLY_LOCAL_CLIENT = 0,
  LOCAL_CLIENT_COUNT = 1,
};

struct ltc_ecc_set_type
{
  /* 0x0000 */ int size;
  /* 0x0004 */ char* name;
  /* 0x0008 */ char* prime;
  /* 0x000c */ char* B;
  /* 0x0010 */ char* order;
  /* 0x0014 */ char* Gx;
  /* 0x0018 */ char* Gy;
}; /* size: 0x001c */

enum DevEventType
{
  EVENT_ACTIVATE = 0,
  EVENT_DEACTIVATE = 1,
  EVENT_ACCEPT = 2,
  EVENT_UPDATE = 3,
  EVENT_DRAW = 4,
  EVENT_SAVE = 5,
};

enum pmoveVehAnimState_t
{
  PMOVE_VEH_ANIM_STATE_PLAYING = 0,
  PMOVE_VEH_ANIM_STATE_END_STAGE = 1,
  PMOVE_VEH_ANIM_STATE_COMPLETE = 2,
};

enum LbZombieGameMode
{
  LB_GAMEMODE_ZGRIEF = 0,
  LB_ZOMBIE_GAMEMODE_START = 0,
  LB_GAMEMODE_ZCLASSIC = 1,
  LB_GAMEMODE_ZSTANDARD = 2,
  LB_GAMEMODE_ZCLEANSED = 3,
  LB_ZOMBIE_GAMEMODE_COUNT = 4,
};

typedef enum _NV_ROTATE
{
  NV_ROTATE_0 = 0,
  NV_ROTATE_90 = 1,
  NV_ROTATE_180 = 2,
  NV_ROTATE_270 = 3,
  NV_ROTATE_IGNORED = 4,
} NV_ROTATE, *PNV_ROTATE;

typedef enum _TAG_UNNAMED_58
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_58, *PTAG_UNNAMED_58;

enum path_type_e
{
  PT_OLD_SPLINE = 0,
  PT_SPLINE = 1,
};

enum tagDESCKIND
{
  DESCKIND_NONE = 0,
  DESCKIND_FUNCDESC = 1,
  DESCKIND_VARDESC = 2,
  DESCKIND_TYPECOMP = 3,
  DESCKIND_IMPLICITAPPOBJ = 4,
  DESCKIND_MAX = 5,
};

typedef enum _NV_STANDARD_COLORSPACE
{
  NV_STANDARD_COLORSPACE_DISABLED = 0,
  NV_STANDARD_COLORSPACE_AUTOSELECT = 1,
  NV_STANDARD_COLORSPACE_sRGB = 2,
  NV_STANDARD_COLORSPACE_MONITOR_RGB = 3,
  NV_STANDARD_COLORSPACE_ADOBE_RGB = 4,
  NV_STANDARD_COLORSPACE_ADOBE_WIDE_GAMUT = 5,
  NV_STANDARD_COLORSPACE_APPLE = 6,
  NV_STANDARD_COLORSPACE_NTSC = 7,
  NV_STANDARD_COLORSPACE_HDTV = 8,
  NV_STANDARD_COLORSPACE_PAL = 9,
  NV_STANDARD_COLORSPACE_DCIP3 = 10,
  NV_STANDARD_COLORSPACE_MAX = 11,
} NV_STANDARD_COLORSPACE, *PNV_STANDARD_COLORSPACE;

enum scoreboardColumnType_t
{
  SB_TYPE_INVALID = 0,
  SB_TYPE_NONE = 1,
  SB_TYPE_SCORE = 2,
  SB_TYPE_KILLS = 3,
  SB_TYPE_DEATHS = 4,
  SB_TYPE_ASSISTS = 5,
  SB_TYPE_DEFENDS = 6,
  SB_TYPE_PLANTS = 7,
  SB_TYPE_DEFUSES = 8,
  SB_TYPE_RETURNS = 9,
  SB_TYPE_CAPTURES = 10,
  SB_TYPE_DESTRUCTIONS = 11,
  SB_TYPE_KDRATIO = 12,
  SB_TYPE_SURVIVED = 13,
  SB_TYPE_STABS = 14,
  SB_TYPE_TOMAHAWKS = 15,
  SB_TYPE_HUMILIATED = 16,
  SB_TYPE_X2SCORE = 17,
  SB_TYPE_HEADSHOTS = 18,
  SB_TYPE_DOWNS = 19,
  SB_TYPE_REVIVES = 20,
  SB_TYPE_AGRKILLS = 21,
  SB_TYPE_HACKS = 22,
  SB_TYPE_POINTS_TO_WIN = 23,
  SB_TYPE_KILLS_CONFIRMED = 24,
  SB_TYPE_KILLS_DENIED = 25,
  NUM_SB_TYPES = 26,
};

enum cacmpshared_type_e
{
  CACMPSHARED_TYPE_NONE = 0,
  CACMPSHARED_TYPE_WEAPON = 1,
};

enum ComSaveLumpBehavior
{
  COM_SAVE_LUMP_AND_CLOSE = 0,
  COM_SAVE_LUMP_AND_REOPEN = 1,
};

enum D3D_RESOURCE_RETURN_TYPE
{
  D3D_RETURN_TYPE_UNORM = 1,
  D3D_RETURN_TYPE_SNORM = 2,
  D3D_RETURN_TYPE_SINT = 3,
  D3D_RETURN_TYPE_UINT = 4,
  D3D_RETURN_TYPE_FLOAT = 5,
  D3D_RETURN_TYPE_MIXED = 6,
  D3D_RETURN_TYPE_DOUBLE = 7,
  D3D_RETURN_TYPE_CONTINUED = 8,
  D3D10_RETURN_TYPE_UNORM = 1,
  D3D10_RETURN_TYPE_SNORM = 2,
  D3D10_RETURN_TYPE_SINT = 3,
  D3D10_RETURN_TYPE_UINT = 4,
  D3D10_RETURN_TYPE_FLOAT = 5,
  D3D10_RETURN_TYPE_MIXED = 6,
  D3D11_RETURN_TYPE_UNORM = 1,
  D3D11_RETURN_TYPE_SNORM = 2,
  D3D11_RETURN_TYPE_SINT = 3,
  D3D11_RETURN_TYPE_UINT = 4,
  D3D11_RETURN_TYPE_FLOAT = 5,
  D3D11_RETURN_TYPE_MIXED = 6,
  D3D11_RETURN_TYPE_DOUBLE = 7,
  D3D11_RETURN_TYPE_CONTINUED = 8,
};

enum STBVorbisError
{
  VORBIS__no_error = 0,
  VORBIS_need_more_data = 1,
  VORBIS_invalid_api_mixing = 2,
  VORBIS_outofmem = 3,
  VORBIS_feature_not_supported = 4,
  VORBIS_too_many_channels = 5,
  VORBIS_file_open_failure = 6,
  VORBIS_seek_without_length = 7,
  VORBIS_unexpected_eof = 10,
  VORBIS_seek_invalid = 11,
  VORBIS_invalid_setup = 20,
  VORBIS_invalid_stream = 21,
  VORBIS_missing_capture_pattern = 30,
  VORBIS_invalid_stream_structure_version = 31,
  VORBIS_continued_packet_flag_invalid = 32,
  VORBIS_incorrect_stream_serial_number = 33,
  VORBIS_invalid_first_page = 34,
  VORBIS_bad_packet_type = 35,
  VORBIS_cant_find_last_page = 36,
  VORBIS_seek_failed = 37,
};

enum UIContextIndex_t
{
  INVALID_UI_CONTEXT = -1,
  UI_CONTEXT_FRONTEND = 0,
  UI_CONTEXT_INDEX_0 = 0,
  UI_CONTEXT_COUNT = 1,
};

enum clanTagFeatureColumn_t
{
  CLANTAG_COL_INDEX = 0,
  CLANTAG_COL_NAME = 1,
  CLANTAG_COL_UNLOCKLVL = 2,
  CLANTAG_COL_UNLOCKPLVL = 3,
  CLANTAG_COL_COST = 4,
  CLANTAG_COL_TYPE = 5,
  CLANTAG_COL_DATA = 6,
  CLANTAG_COL_NUMFRAMES = 7,
  CLANTAG_COL_PHASE = 8,
  CLANTAG_COL_FRAME1 = 9,
  CLANTAG_COL_FRAME2 = 10,
  CLANTAG_COL_FRAME3 = 11,
  CLANTAG_COL_FRAME4 = 12,
  CLANTAG_COL_FRAME5 = 13,
  CLANTAG_COL_FRAME6 = 14,
  CLANTAG_COL_FRAME7 = 15,
  CLANTAG_COL_FRAME8 = 16,
};

enum FF_DIR
{
  FFD_DEFAULT = 0,
};

enum bdLobbyErrorCode
{
  BD_NO_ERROR = 0,
  BD_TOO_MANY_TASKS = 1,
  BD_NOT_CONNECTED = 2,
  BD_SEND_FAILED = 3,
  BD_HANDLE_TASK_FAILED = 4,
  BD_START_TASK_FAILED = 5,
  BD_RESULT_EXCEEDS_BUFFER_SIZE = 100,
  BD_ACCESS_DENIED = 101,
  BD_EXCEPTION_IN_DB = 102,
  BD_MALFORMED_TASK_HEADER = 103,
  BD_INVALID_ROW = 104,
  BD_EMPTY_ARG_LIST = 105,
  BD_PARAM_PARSE_ERROR = 106,
  BD_PARAM_MISMATCHED_TYPE = 107,
  BD_SERVICE_NOT_AVAILABLE = 108,
  BD_CONNECTION_RESET = 109,
  BD_INVALID_USER_ID = 110,
  BD_LOBBY_PROTOCOL_VERSION_FAILURE = 111,
  BD_LOBBY_INTERNAL_FAILURE = 112,
  BD_LOBBY_PROTOCOL_ERROR = 113,
  BD_LOBBY_FAILED_TO_DECODE_UTF8 = 114,
  BD_LOBBY_ASCII_EXPECTED = 115,
  BD_ASYNCHRONOUS_ERROR = 200,
  BD_STREAMING_COMPLETE = 201,
  BD_MEMBER_NO_PROPOSAL = 300,
  BD_TEAMNAME_ALREADY_EXISTS = 301,
  BD_MAX_TEAM_MEMBERSHIPS_LIMITED = 302,
  BD_MAX_TEAM_OWNERSHIPS_LIMITED = 303,
  BD_NOT_A_TEAM_MEMBER = 304,
  BD_INVALID_TEAM_ID = 305,
  BD_INVALID_TEAM_NAME = 306,
  BD_NOT_A_TEAM_OWNER = 307,
  BD_NOT_AN_ADMIN_OR_OWNER = 308,
  BD_MEMBER_PROPOSAL_EXISTS = 309,
  BD_MEMBER_EXISTS = 310,
  BD_TEAM_FULL = 311,
  BD_VULGAR_TEAM_NAME = 312,
  BD_TEAM_USERID_BANNED = 313,
  BD_TEAM_EMPTY = 314,
  BD_INVALID_TEAM_PROFILE_QUERY_ID = 315,
  BD_TEAMNAME_TOO_SHORT = 316,
  BD_UNIQUE_PROFILE_DATA_EXISTS_ALREADY = 317,
  BD_INVALID_LEADERBOARD_ID = 400,
  BD_INVALID_STATS_SET = 401,
  BD_EMPTY_STATS_SET_IGNORED = 403,
  BD_NO_DIRECT_ACCESS_TO_ARBITRATED_LBS = 404,
  BD_STATS_WRITE_PERMISSION_DENIED = 405,
  BD_STATS_WRITE_TYPE_DATA_TYPE_MISMATCH = 406,
  BD_NO_STATS_FOR_USER = 407,
  BD_INVALID_ACCESS_TO_UNRANKED_LB = 408,
  BD_INVALID_EXTERNAL_TITLE_ID = 409,
  BD_DIFFERENT_LEADERBOARD_SCHEMAS = 410,
  BD_TOO_MANY_LEADERBOARDS_REQUESTED = 411,
  BD_ENTITLEMENTS_ERROR = 412,
  BD_ENTITLEMENTS_INVALID_TITLEID = 413,
  BD_ENTITLEMENTS_INVALID_LEADERBOARDID = 414,
  BD_ENTITLEMENTS_INVALID_GET_MODE_FOR_TITLE = 415,
  BD_ENTITLEMENTS_URL_CONNECTION_ERROR = 416,
  BD_ENTITLEMENTS_CONFIG_ERROR = 417,
  BD_ENTITLEMENTS_NAMED_PARENT_ERROR = 418,
  BD_ENTITLEMENTS_NAMED_KEY_ERROR = 419,
  BD_TOO_MANY_ENTITY_IDS_REQUESTED = 420,
  BD_STATS_READ_FAILED = 421,
  BD_INVALID_TITLE_ID = 500,
  BD_MESSAGING_INVALID_MAIL_ID = 600,
  BD_SELF_BLOCK_NOT_ALLOWED = 601,
  BD_GLOBAL_MESSAGE_ACCESS_DENIED = 602,
  BD_GLOBAL_MESSAGES_USER_LIMIT_EXCEEDED = 603,
  BD_AUTH_NO_ERROR = 700,
  BD_AUTH_BAD_REQUEST = 701,
  BD_AUTH_SERVER_CONFIG_ERROR = 702,
  BD_AUTH_BAD_TITLE_ID = 703,
  BD_AUTH_BAD_ACCOUNT = 704,
  BD_AUTH_ILLEGAL_OPERATION = 705,
  BD_AUTH_INCORRECT_LICENSE_CODE = 706,
  BD_AUTH_CREATE_USERNAME_EXISTS = 707,
  BD_AUTH_CREATE_USERNAME_ILLEGAL = 708,
  BD_AUTH_CREATE_USERNAME_VULGAR = 709,
  BD_AUTH_CREATE_MAX_ACC_EXCEEDED = 710,
  BD_AUTH_MIGRATE_NOT_SUPPORTED = 711,
  BD_AUTH_TITLE_DISABLED = 712,
  BD_AUTH_ACCOUNT_EXPIRED = 713,
  BD_AUTH_ACCOUNT_LOCKED = 714,
  BD_AUTH_UNKNOWN_ERROR = 715,
  BD_AUTH_INCORRECT_PASSWORD = 716,
  BD_AUTH_IP_NOT_IN_ALLOWED_RANGE = 717,
  BD_AUTH_WII_TOKEN_VERIFICATION_FAILED = 718,
  BD_AUTH_WII_AUTHENTICATION_FAILED = 719,
  BD_AUTH_IP_KEY_LIMIT_REACHED = 720,
  BD_AUTH_INVALID_GSPID = 721,
  BD_AUTH_INVALID_IP_RANGE_ID = 722,
  BD_AUTH_3DS_TOKEN_VERIFICATION_FAILED = 721,
  BD_AUTH_3DS_AUTHENTICATION_FAILED = 722,
  BD_AUTH_STEAM_APP_ID_MISMATCH = 723,
  BD_AUTH_ABACCOUNTS_APP_ID_MISMATCH = 724,
  BD_AUTH_CODO_USERNAME_NOT_SET = 725,
  BD_AUTH_WIIU_TOKEN_VERIFICATION_FAILED = 726,
  BD_AUTH_WIIU_AUTHENTICATION_FAILED = 727,
  BD_AUTH_CODO_USERNAME_NOT_BASE64 = 728,
  BD_AUTH_CODO_USERNAME_NOT_UTF8 = 729,
  BD_AUTH_TENCENT_TICKET_EXPIRED = 730,
  BD_NO_PROFILE_INFO_EXISTS = 800,
  BD_FRIENDSHIP_NOT_REQUSTED = 900,
  BD_NOT_A_FRIEND = 901,
  BD_SELF_FRIENDSHIP_NOT_ALLOWED = 903,
  BD_FRIENDSHIP_EXISTS = 904,
  BD_PENDING_FRIENDSHIP_EXISTS = 905,
  BD_USERID_BANNED = 906,
  BD_FRIENDS_FULL = 908,
  BD_FRIENDS_NO_RICH_PRESENCE = 909,
  BD_RICH_PRESENCE_TOO_LARGE = 910,
  BD_NO_FILE = 1000,
  BD_PERMISSION_DENIED = 1001,
  BD_FILESIZE_LIMIT_EXCEEDED = 1002,
  BD_FILENAME_MAX_LENGTH_EXCEEDED = 1003,
  BD_CHANNEL_DOES_NOT_EXIST = 1101,
  BD_CHANNEL_ALREADY_SUBSCRIBED = 1102,
  BD_CHANNEL_NOT_SUBSCRIBED = 1103,
  BD_CHANNEL_FULL = 1104,
  BD_CHANNEL_SUBSCRIPTIONS_FULL = 1105,
  BD_CHANNEL_NO_SELF_WHISPERING = 1106,
  BD_CHANNEL_ADMIN_REQUIRED = 1107,
  BD_CHANNEL_TARGET_NOT_SUBSCRIBED = 1108,
  BD_CHANNEL_REQUIRES_PASSWORD = 1109,
  BD_CHANNEL_TARGET_IS_SELF = 1110,
  BD_CHANNEL_PUBLIC_BAN_NOT_ALLOWED = 1111,
  BD_CHANNEL_USER_BANNED = 1112,
  BD_CHANNEL_PUBLIC_PASSWORD_NOT_ALLOWED = 1113,
  BD_CHANNEL_PUBLIC_KICK_NOT_ALLOWED = 1114,
  BD_EVENT_DESC_TRUNCATED = 1200,
  BD_CONTENT_UNLOCK_UNKNOWN_ERROR = 1300,
  BD_UNLOCK_KEY_INVALID = 1301,
  BD_UNLOCK_KEY_ALREADY_USED_UP = 1302,
  BD_SHARED_UNLOCK_LIMIT_REACHED = 1303,
  BD_DIFFERENT_HARDWARE_ID = 1304,
  BD_INVALID_CONTENT_OWNER = 1305,
  BD_CONTENT_UNLOCK_INVALID_USER = 1306,
  BD_KEY_ARCHIVE_INVALID_WRITE_TYPE = 1500,
  BD_KEY_ARCHIVE_EXCEEDED_MAX_IDS_PER_REQUEST = 1501,
  BD_BANDWIDTH_TEST_TRY_AGAIN = 1810,
  BD_BANDWIDTH_TEST_STILL_IN_PROGRESS = 1811,
  BD_BANDWIDTH_TEST_NOT_PROGRESS = 1812,
  BD_BANDWIDTH_TEST_SOCKET_ERROR = 1813,
  BD_INVALID_SESSION_NONCE = 1901,
  BD_ARBITRATION_FAILURE = 1903,
  BD_ARBITRATION_USER_NOT_REGISTERED = 1905,
  BD_ARBITRATION_NOT_CONFIGURED = 1906,
  BD_CONTENTSTREAMING_FILE_NOT_AVAILABLE = 2000,
  BD_CONTENTSTREAMING_STORAGE_SPACE_EXCEEDED = 2001,
  BD_CONTENTSTREAMING_NUM_FILES_EXCEEDED = 2002,
  BD_CONTENTSTREAMING_UPLOAD_BANDWIDTH_EXCEEDED = 2003,
  BD_CONTENTSTREAMING_FILENAME_MAX_LENGTH_EXCEEDED = 2004,
  BD_CONTENTSTREAMING_MAX_THUMB_DATA_SIZE_EXCEEDED = 2005,
  BD_CONTENTSTREAMING_DOWNLOAD_BANDWIDTH_EXCEEDED = 2006,
  BD_CONTENTSTREAMING_NOT_ENOUGH_DOWNLOAD_BUFFER_SPACE = 2007,
  BD_CONTENTSTREAMING_SERVER_NOT_CONFIGURED = 2008,
  BD_CONTENTSTREAMING_INVALID_APPLE_RECEIPT = 2010,
  BD_CONTENTSTREAMING_APPLE_STORE_NOT_AVAILABLE = 2011,
  BD_CONTENTSTREAMING_APPLE_RECEIPT_FILENAME_MISMATCH = 2012,
  BD_CONTENTSTREAMING_HTTP_ERROR = 2020,
  BD_CONTENTSTREAMING_FAILED_TO_START_HTTP = 2021,
  BD_CONTENTSTREAMING_LOCALE_INVALID = 2022,
  BD_CONTENTSTREAMING_LOCALE_MISSING = 2023,
  BD_VOTERANK_ERROR_EMPTY_RATING_SUBMISSION = 2030,
  BD_VOTERANK_ERROR_MAX_VOTES_EXCEEDED = 2031,
  BD_VOTERANK_ERROR_INVALID_RATING = 2032,
  BD_MAX_NUM_TAGS_EXCEEDED = 2090,
  BD_TAGGED_COLLECTION_DOES_NOT_EXIST = 2091,
  BD_EMPTY_TAG_ARRAY = 2092,
  BD_INVALID_QUERY_ID = 2100,
  BD_NO_ENTRY_TO_UPDATE = 2101,
  BD_SESSION_INVITE_EXISTS = 2102,
  BD_INVALID_SESSION_ID = 2103,
  BD_ATTACHMENT_TOO_LARGE = 2104,
  BD_INVALID_GROUP_ID = 2800,
  BD_UCD_SERVICE_ERROR = 3200,
  BD_UCD_SERVICE_DISABLED = 3201,
  BD_UCD_UNINTIALIZED_ERROR = 3202,
  BD_UCD_ACCOUNT_ALREADY_REGISTERED = 3203,
  BD_UCD_ACCOUNT_NOT_REGISTERED = 3204,
  BD_UCD_AUTH_ATTEMPT_FAILED = 3205,
  BD_UCD_ACCOUNT_LINKING_ERROR = 3206,
  BD_UCD_ENCRYPTION_ERROR = 3207,
  BD_UCD_ACCOUNT_DATA_INVALID = 3208,
  BD_UCD_ACCOUNT_DATA_INVALID_FIRSTNAME = 3209,
  BD_UCD_ACCOUNT_DATA_INVALID_LASTNAME = 3210,
  BD_UCD_ACCOUNT_DATA_INVALID_DOB = 3211,
  BD_UCD_ACCOUNT_DATA_INVALID_EMAIL = 3212,
  BD_UCD_ACCOUNT_DATA_INVALID_COUNTRY = 3213,
  BD_UCD_ACCOUNT_DATA_INVALID_POSTCODE = 3214,
  BD_UCD_ACCOUNT_NAME_ALREADY_RESISTERED = 3220,
  BD_UCD_ACCOUNT_EMAIL_ALREADY_RESISTERED = 3221,
  BD_TWITCH_SERVICE_ERROR = 3101,
  BD_TWITCH_ACCOUNT_ALREADY_LINKED = 3102,
  BD_TWITCH_NO_LINKED_ACCOUNT = 3103,
  BD_YOUTUBE_SERVICE_ERROR = 3301,
  BD_YOUTUBE_SERVICE_COMMUNICATION_ERROR = 3302,
  BD_YOUTUBE_USER_DENIED_AUTHORIZATION = 3303,
  BD_YOUTUBE_AUTH_MAX_TIME_EXCEEDED = 3304,
  BD_YOUTUBE_USER_UNAUTHORIZED = 3305,
  BD_YOUTUBE_UPLOAD_MAX_TIME_EXCEEDED = 3306,
  BD_YOUTUBE_DUPLICATE_UPLOAD = 3307,
  BD_YOUTUBE_FAILED_UPLOAD = 3308,
  BD_YOUTUBE_ACCOUNT_ALREADY_REGISTERED = 3309,
  BD_YOUTUBE_ACCOUNT_NOT_REGISTERED = 3310,
  BD_YOUTUBE_CONTENT_SERVER_ERROR = 3311,
  BD_YOUTUBE_UPLOAD_DOES_NOT_EXIST = 3312,
  BD_YOUTUBE_NO_LINKED_ACCOUNT = 3313,
  BD_YOUTUBE_DEVELOPER_TAGS_INVALID = 3314,
  BD_TWITTER_AUTH_ATTEMPT_FAILED = 3501,
  BD_TWITTER_AUTH_TOKEN_INVALID = 3502,
  BD_TWITTER_UPDATE_LIMIT_REACHED = 3503,
  BD_TWITTER_UNAVAILABLE = 3504,
  BD_TWITTER_ERROR = 3505,
  BD_TWITTER_TIMED_OUT = 3506,
  BD_TWITTER_DISABLED_FOR_USER = 3507,
  BD_TWITTER_ACCOUNT_AMBIGUOUS = 3508,
  BD_TWITTER_MAXIMUM_ACCOUNTS_REACHED = 3509,
  BD_TWITTER_ACCOUNT_NOT_REGISTERED = 3510,
  BD_TWITTER_DUPLICATE_STATUS = 3511,
  BD_TWITTER_ACCOUNT_ALREADY_REGISTERED = 3612,
  BD_FACEBOOK_AUTH_ATTEMPT_FAILED = 3601,
  BD_FACEBOOK_AUTH_TOKEN_INVALID = 3602,
  BD_FACEBOOK_PHOTO_DOES_NOT_EXIST = 3603,
  BD_FACEBOOK_PHOTO_INVALID = 3604,
  BD_FACEBOOK_PHOTO_ALBUM_FULL = 3605,
  BD_FACEBOOK_UNAVAILABLE = 3606,
  BD_FACEBOOK_ERROR = 3607,
  BD_FACEBOOK_TIMED_OUT = 3608,
  BD_FACEBOOK_DISABLED_FOR_USER = 3609,
  BD_FACEBOOK_ACCOUNT_AMBIGUOUS = 3610,
  BD_FACEBOOK_MAXIMUM_ACCOUNTS_REACHED = 3611,
  BD_FACEBOOK_INVALID_NUM_PICTURES_REQUESTED = 3612,
  BD_FACEBOOK_VIDEO_DOES_NOT_EXIST = 3613,
  BD_FACEBOOK_ACCOUNT_ALREADY_REGISTERED = 3614,
  BD_APNS_INVALID_PAYLOAD = 3700,
  BD_MAX_CONSOLEID_LENGTH_EXCEEDED = 3809,
  BD_MAX_WHITELIST_LENGTH_EXCEEDED = 3810,
  BD_USERGROUP_NAME_ALREADY_EXISTS = 6000,
  BD_INVALID_USERGROUP_ID = 6001,
  BD_USER_ALREADY_IN_USERGROUP = 6002,
  BD_USER_NOT_IN_USERGROUP = 6003,
  BD_INVALID_USERGROUP_MEMBER_TYPE = 6004,
  BD_TOO_MANY_MEMBERS_REQUESTED = 6005,
  BD_USERGROUP_NAME_TOO_SHORT = 6006,
  BD_RICH_PRESENCE_DATA_TOO_LARGE = 6800,
  BD_RICH_PRESENCE_TOO_MANY_USERS = 6801,
  BD_SUBSCRIPTION_TOO_MANY_USERS = 7000,
  BD_SUBSCRIPTION_TICKET_PARSE_ERROR = 7001,
  BD_CODO_ID_INVALID_DATA = 7100,
  BD_INVALID_MESSAGE_FORMAT = 7101,
  BD_TLOG_TOO_MANY_MESSAGES = 7102,
  BD_CODO_ID_NOT_IN_WHITELIST = 7103,
  BD_TLOG_MESSAGE_TRANSFORMATION_ERROR = 7104,
  BD_MARKETPLACE_ERROR = 8000,
  BD_MARKETPLACE_RESOURCE_NOT_FOUND = 8001,
  BD_MARKETPLACE_INVALID_CURRENCY = 8002,
  BD_MARKETPLACE_INVALID_PARAMETER = 8003,
  BD_MARKETPLACE_RESOURCE_CONFLICT = 8004,
  BD_MARKETPLACE_STORAGE_ERROR = 8005,
  BD_MARKETPLACE_INTEGRITY_ERROR = 8006,
  BD_MARKETPLACE_INSUFFICIENT_FUNDS_ERROR = 8007,
  BD_MARKETPLACE_MMP_SERVICE_ERROR = 8008,
  BD_MARKETPLACE_PRECONDITION_REQUIRED = 8009,
  BD_MARKETPLACE_ITEM_MULTIPLE_PURCHASE_ERROR = 8010,
  BD_MARKETPLACE_MISSING_REQUIRED_ENTITLEMENT = 8011,
  BD_MARKETPLACE_VALIDATION_ERROR = 8012,
  BD_MARKETPLACE_TENCENT_PAYMENT_ERROR = 8013,
  BD_MARKETPLACE_SKU_NOT_COUPON_ENABLED_ERROR = 8014,
  BD_LEAGUE_INVALID_TEAM_SIZE = 8100,
  BD_LEAGUE_INVALID_TEAM = 8101,
  BD_LEAGUE_INVALID_SUBDIVISION = 8102,
  BD_LEAGUE_INVALID_LEAGUE = 8103,
  BD_LEAGUE_TOO_MANY_RESULTS_REQUESTED = 8104,
  BD_LEAGUE_METADATA_TOO_LARGE = 8105,
  BD_LEAGUE_TEAM_ICON_TOO_LARGE = 8106,
  BD_LEAGUE_TEAM_NAME_TOO_LONG = 8107,
  BD_LEAGUE_ARRAY_SIZE_MISMATCH = 8108,
  BD_LEAGUE_SUBDIVISION_MISMATCH = 8200,
  BD_LEAGUE_INVALID_WRITE_TYPE = 8201,
  BD_LEAGUE_INVALID_STATS_DATA = 8202,
  BD_LEAGUE_SUBDIVISION_UNRANKED = 8203,
  BD_LEAGUE_CROSS_TEAM_STATS_WRITE_PREVENTED = 8204,
  BD_LEAGUE_INVALID_STATS_SEASON = 8205,
  BD_COMMERCE_ERROR = 8300,
  BD_COMMERCE_RESOURCE_NOT_FOUND = 8301,
  BD_COMMERCE_STORAGE_INVALID_PARAMETER = 8302,
  BD_COMMERCE_APPLICATION_INVALID_PARAMETER = 8303,
  BD_COMMERCE_RESOURCE_CONFLICT = 8304,
  BD_COMMERCE_STORAGE_ERROR = 8305,
  BD_COMMERCE_INTEGRITY_ERROR = 8306,
  BD_COMMERCE_MMP_SERVICE_ERROR = 8307,
  BD_COMMERCE_PERMISSION_DENIED = 8308,
  BD_COMMERCE_INSUFFICIENT_FUNDS_ERROR = 8309,
  BD_COMMERCE_UNKNOWN_CURRENCY = 8310,
  BD_COMMERCE_INVALID_RECEIPT = 8311,
  BD_COMMERCE_RECEIPT_USED = 8312,
  BD_COMMERCE_TRANSACTION_ALREADY_APPLIED = 8313,
  BD_COMMERCE_INVALID_CURRENCY_TYPE = 8314,
  BD_CONNECTION_COUNTER_ERROR = 8400,
  BD_GMSG_INVALID_CATEGORY_ID = 10200,
  BD_GMSG_CATEGORY_MEMBERSHIPS_LIMIT = 10201,
  BD_GMSG_NONMEMBER_POST_DISALLOWED = 10202,
  BD_GMSG_CATEGORY_DISALLOWS_CLIENT_TYPE = 10203,
  BD_GMSG_PAYLOAD_TOO_BIG = 10204,
  BD_GMSG_MEMBER_POST_DISALLOWED = 10205,
  BD_GMSG_OVERLOADED = 10206,
  BD_GMSG_USER_PERCATEGORY_POST_RATE_EXCEEDED = 10207,
  BD_GMSG_USER_GLOBAL_POST_RATE_EXCEEDED = 10208,
  BD_GMSG_GROUP_POST_RATE_EXCEEDED = 10209,
  BD_MAX_ERROR_CODE = 10210,
};

enum ClientNum_t
{
  INVALID_CLIENT_INDEX = -1,
  CLIENT_INDEX_FIRST = 0,
  CLIENT_INDEX_0 = 0,
  CLIENT_INDEX_1 = 1,
  CLIENT_INDEX_2 = 2,
  CLIENT_INDEX_3 = 3,
  CLIENT_INDEX_4 = 4,
  CLIENT_INDEX_5 = 5,
  CLIENT_INDEX_6 = 6,
  CLIENT_INDEX_7 = 7,
  CLIENT_INDEX_8 = 8,
  CLIENT_INDEX_9 = 9,
  CLIENT_INDEX_10 = 10,
  CLIENT_INDEX_11 = 11,
  CLIENT_INDEX_12 = 12,
  CLIENT_INDEX_13 = 13,
  CLIENT_INDEX_14 = 14,
  CLIENT_INDEX_15 = 15,
  CLIENT_INDEX_16 = 16,
  CLIENT_INDEX_17 = 17,
  CLIENT_INDEX_18 = 18,
  CLIENT_INDEX_19 = 19,
  CLIENT_INDEX_20 = 20,
  CLIENT_INDEX_21 = 21,
  CLIENT_INDEX_22 = 22,
  CLIENT_INDEX_23 = 23,
  CLIENT_INDEX_24 = 24,
  CLIENT_INDEX_25 = 25,
  CLIENT_INDEX_26 = 26,
  CLIENT_INDEX_27 = 27,
  CLIENT_INDEX_28 = 28,
  CLIENT_INDEX_29 = 29,
  CLIENT_INDEX_30 = 30,
  CLIENT_INDEX_31 = 31,
  CLIENT_INDEX_COUNT = 18,
};

struct ID3D11DepthStencilView
{
}; /* size: 0x0004 */

typedef enum _TAG_UNNAMED_59
{
  PART_TYPE_NO_QUAT = 0,
  PART_TYPE_HALF_QUAT = 1,
  PART_TYPE_FULL_QUAT = 2,
  PART_TYPE_HALF_QUAT_NO_SIZE = 3,
  PART_TYPE_FULL_QUAT_NO_SIZE = 4,
  PART_TYPE_SMALL_TRANS = 5,
  PART_TYPE_TRANS = 6,
  PART_TYPE_TRANS_NO_SIZE = 7,
  PART_TYPE_NO_TRANS = 8,
  PART_TYPE_ALL = 9,
  PART_TYPE_COUNT = 10,
} TAG_UNNAMED_59, *PTAG_UNNAMED_59;

typedef enum _TAG_UNNAMED_60
{
  DDL_USERFLAGS_VALUE_CHANGED = 1,
  DDL_USERFLAGS_ONLINE_RANKED_STATS = 2,
  DDL_USERFLAGS_ONLINE_ZOMBIE_STATS = 8,
  DDL_USERFLAGS_ALL = 11,
  DDL_USERFLAGS_COUNT = 3,
} TAG_UNNAMED_60, *PTAG_UNNAMED_60;

enum tag_WBEMSTATUS
{
  WBEM_NO_ERROR = 0,
  WBEM_S_NO_ERROR = 0,
  WBEM_S_SAME = 0,
  WBEM_S_FALSE = 1,
  WBEM_S_ALREADY_EXISTS = 0x40001,
  WBEM_S_RESET_TO_DEFAULT = 0x40002,
  WBEM_S_DIFFERENT = 0x40003,
  WBEM_S_TIMEDOUT = 0x40004,
  WBEM_S_NO_MORE_DATA = 0x40005,
  WBEM_S_OPERATION_CANCELLED = 0x40006,
  WBEM_S_PENDING = 0x40007,
  WBEM_S_DUPLICATE_OBJECTS = 0x40008,
  WBEM_S_ACCESS_DENIED = 0x40009,
  WBEM_S_PARTIAL_RESULTS = 0x40010,
  WBEM_S_SOURCE_NOT_AVAILABLE = 0x40017,
  WBEM_E_FAILED = -2147217407,
  WBEM_E_NOT_FOUND = -2147217406,
  WBEM_E_ACCESS_DENIED = -2147217405,
  WBEM_E_PROVIDER_FAILURE = -2147217404,
  WBEM_E_TYPE_MISMATCH = -2147217403,
  WBEM_E_OUT_OF_MEMORY = -2147217402,
  WBEM_E_INVALID_CONTEXT = -2147217401,
  WBEM_E_INVALID_PARAMETER = -2147217400,
  WBEM_E_NOT_AVAILABLE = -2147217399,
  WBEM_E_CRITICAL_ERROR = -2147217398,
  WBEM_E_INVALID_STREAM = -2147217397,
  WBEM_E_NOT_SUPPORTED = -2147217396,
  WBEM_E_INVALID_SUPERCLASS = -2147217395,
  WBEM_E_INVALID_NAMESPACE = -2147217394,
  WBEM_E_INVALID_OBJECT = -2147217393,
  WBEM_E_INVALID_CLASS = -2147217392,
  WBEM_E_PROVIDER_NOT_FOUND = -2147217391,
  WBEM_E_INVALID_PROVIDER_REGISTRATION = -2147217390,
  WBEM_E_PROVIDER_LOAD_FAILURE = -2147217389,
  WBEM_E_INITIALIZATION_FAILURE = -2147217388,
  WBEM_E_TRANSPORT_FAILURE = -2147217387,
  WBEM_E_INVALID_OPERATION = -2147217386,
  WBEM_E_INVALID_QUERY = -2147217385,
  WBEM_E_INVALID_QUERY_TYPE = -2147217384,
  WBEM_E_ALREADY_EXISTS = -2147217383,
  WBEM_E_OVERRIDE_NOT_ALLOWED = -2147217382,
  WBEM_E_PROPAGATED_QUALIFIER = -2147217381,
  WBEM_E_PROPAGATED_PROPERTY = -2147217380,
  WBEM_E_UNEXPECTED = -2147217379,
  WBEM_E_ILLEGAL_OPERATION = -2147217378,
  WBEM_E_CANNOT_BE_KEY = -2147217377,
  WBEM_E_INCOMPLETE_CLASS = -2147217376,
  WBEM_E_INVALID_SYNTAX = -2147217375,
  WBEM_E_NONDECORATED_OBJECT = -2147217374,
  WBEM_E_READ_ONLY = -2147217373,
  WBEM_E_PROVIDER_NOT_CAPABLE = -2147217372,
  WBEM_E_CLASS_HAS_CHILDREN = -2147217371,
  WBEM_E_CLASS_HAS_INSTANCES = -2147217370,
  WBEM_E_QUERY_NOT_IMPLEMENTED = -2147217369,
  WBEM_E_ILLEGAL_NULL = -2147217368,
  WBEM_E_INVALID_QUALIFIER_TYPE = -2147217367,
  WBEM_E_INVALID_PROPERTY_TYPE = -2147217366,
  WBEM_E_VALUE_OUT_OF_RANGE = -2147217365,
  WBEM_E_CANNOT_BE_SINGLETON = -2147217364,
  WBEM_E_INVALID_CIM_TYPE = -2147217363,
  WBEM_E_INVALID_METHOD = -2147217362,
  WBEM_E_INVALID_METHOD_PARAMETERS = -2147217361,
  WBEM_E_SYSTEM_PROPERTY = -2147217360,
  WBEM_E_INVALID_PROPERTY = -2147217359,
  WBEM_E_CALL_CANCELLED = -2147217358,
  WBEM_E_SHUTTING_DOWN = -2147217357,
  WBEM_E_PROPAGATED_METHOD = -2147217356,
  WBEM_E_UNSUPPORTED_PARAMETER = -2147217355,
  WBEM_E_MISSING_PARAMETER_ID = -2147217354,
  WBEM_E_INVALID_PARAMETER_ID = -2147217353,
  WBEM_E_NONCONSECUTIVE_PARAMETER_IDS = -2147217352,
  WBEM_E_PARAMETER_ID_ON_RETVAL = -2147217351,
  WBEM_E_INVALID_OBJECT_PATH = -2147217350,
  WBEM_E_OUT_OF_DISK_SPACE = -2147217349,
  WBEM_E_BUFFER_TOO_SMALL = -2147217348,
  WBEM_E_UNSUPPORTED_PUT_EXTENSION = -2147217347,
  WBEM_E_UNKNOWN_OBJECT_TYPE = -2147217346,
  WBEM_E_UNKNOWN_PACKET_TYPE = -2147217345,
  WBEM_E_MARSHAL_VERSION_MISMATCH = -2147217344,
  WBEM_E_MARSHAL_INVALID_SIGNATURE = -2147217343,
  WBEM_E_INVALID_QUALIFIER = -2147217342,
  WBEM_E_INVALID_DUPLICATE_PARAMETER = -2147217341,
  WBEM_E_TOO_MUCH_DATA = -2147217340,
  WBEM_E_SERVER_TOO_BUSY = -2147217339,
  WBEM_E_INVALID_FLAVOR = -2147217338,
  WBEM_E_CIRCULAR_REFERENCE = -2147217337,
  WBEM_E_UNSUPPORTED_CLASS_UPDATE = -2147217336,
  WBEM_E_CANNOT_CHANGE_KEY_INHERITANCE = -2147217335,
  WBEM_E_CANNOT_CHANGE_INDEX_INHERITANCE = -2147217328,
  WBEM_E_TOO_MANY_PROPERTIES = -2147217327,
  WBEM_E_UPDATE_TYPE_MISMATCH = -2147217326,
  WBEM_E_UPDATE_OVERRIDE_NOT_ALLOWED = -2147217325,
  WBEM_E_UPDATE_PROPAGATED_METHOD = -2147217324,
  WBEM_E_METHOD_NOT_IMPLEMENTED = -2147217323,
  WBEM_E_METHOD_DISABLED = -2147217322,
  WBEM_E_REFRESHER_BUSY = -2147217321,
  WBEM_E_UNPARSABLE_QUERY = -2147217320,
  WBEM_E_NOT_EVENT_CLASS = -2147217319,
  WBEM_E_MISSING_GROUP_WITHIN = -2147217318,
  WBEM_E_MISSING_AGGREGATION_LIST = -2147217317,
  WBEM_E_PROPERTY_NOT_AN_OBJECT = -2147217316,
  WBEM_E_AGGREGATING_BY_OBJECT = -2147217315,
  WBEM_E_UNINTERPRETABLE_PROVIDER_QUERY = -2147217313,
  WBEM_E_BACKUP_RESTORE_WINMGMT_RUNNING = -2147217312,
  WBEM_E_QUEUE_OVERFLOW = -2147217311,
  WBEM_E_PRIVILEGE_NOT_HELD = -2147217310,
  WBEM_E_INVALID_OPERATOR = -2147217309,
  WBEM_E_LOCAL_CREDENTIALS = -2147217308,
  WBEM_E_CANNOT_BE_ABSTRACT = -2147217307,
  WBEM_E_AMENDED_OBJECT = -2147217306,
  WBEM_E_CLIENT_TOO_SLOW = -2147217305,
  WBEM_E_NULL_SECURITY_DESCRIPTOR = -2147217304,
  WBEM_E_TIMED_OUT = -2147217303,
  WBEM_E_INVALID_ASSOCIATION = -2147217302,
  WBEM_E_AMBIGUOUS_OPERATION = -2147217301,
  WBEM_E_QUOTA_VIOLATION = -2147217300,
  WBEM_E_RESERVED_001 = -2147217299,
  WBEM_E_RESERVED_002 = -2147217298,
  WBEM_E_UNSUPPORTED_LOCALE = -2147217297,
  WBEM_E_HANDLE_OUT_OF_DATE = -2147217296,
  WBEM_E_CONNECTION_FAILED = -2147217295,
  WBEM_E_INVALID_HANDLE_REQUEST = -2147217294,
  WBEM_E_PROPERTY_NAME_TOO_WIDE = -2147217293,
  WBEM_E_CLASS_NAME_TOO_WIDE = -2147217292,
  WBEM_E_METHOD_NAME_TOO_WIDE = -2147217291,
  WBEM_E_QUALIFIER_NAME_TOO_WIDE = -2147217290,
  WBEM_E_RERUN_COMMAND = -2147217289,
  WBEM_E_DATABASE_VER_MISMATCH = -2147217288,
  WBEM_E_VETO_DELETE = -2147217287,
  WBEM_E_VETO_PUT = -2147217286,
  WBEM_E_INVALID_LOCALE = -2147217280,
  WBEM_E_PROVIDER_SUSPENDED = -2147217279,
  WBEM_E_SYNCHRONIZATION_REQUIRED = -2147217278,
  WBEM_E_NO_SCHEMA = -2147217277,
  WBEM_E_PROVIDER_ALREADY_REGISTERED = -2147217276,
  WBEM_E_PROVIDER_NOT_REGISTERED = -2147217275,
  WBEM_E_FATAL_TRANSPORT_ERROR = -2147217274,
  WBEM_E_ENCRYPTED_CONNECTION_REQUIRED = -2147217273,
  WBEM_E_PROVIDER_TIMED_OUT = -2147217272,
  WBEM_E_NO_KEY = -2147217271,
  WBEM_E_PROVIDER_DISABLED = -2147217270,
  WBEMESS_E_REGISTRATION_TOO_BROAD = -2147213311,
  WBEMESS_E_REGISTRATION_TOO_PRECISE = -2147213310,
  WBEMESS_E_AUTHZ_NOT_PRIVILEGED = -2147213309,
  WBEMMOF_E_EXPECTED_QUALIFIER_NAME = -2147205119,
  WBEMMOF_E_EXPECTED_SEMI = -2147205118,
  WBEMMOF_E_EXPECTED_OPEN_BRACE = -2147205117,
  WBEMMOF_E_EXPECTED_CLOSE_BRACE = -2147205116,
  WBEMMOF_E_EXPECTED_CLOSE_BRACKET = -2147205115,
  WBEMMOF_E_EXPECTED_CLOSE_PAREN = -2147205114,
  WBEMMOF_E_ILLEGAL_CONSTANT_VALUE = -2147205113,
  WBEMMOF_E_EXPECTED_TYPE_IDENTIFIER = -2147205112,
  WBEMMOF_E_EXPECTED_OPEN_PAREN = -2147205111,
  WBEMMOF_E_UNRECOGNIZED_TOKEN = -2147205110,
  WBEMMOF_E_UNRECOGNIZED_TYPE = -2147205109,
  WBEMMOF_E_EXPECTED_PROPERTY_NAME = -2147205108,
  WBEMMOF_E_TYPEDEF_NOT_SUPPORTED = -2147205107,
  WBEMMOF_E_UNEXPECTED_ALIAS = -2147205106,
  WBEMMOF_E_UNEXPECTED_ARRAY_INIT = -2147205105,
  WBEMMOF_E_INVALID_AMENDMENT_SYNTAX = -2147205104,
  WBEMMOF_E_INVALID_DUPLICATE_AMENDMENT = -2147205103,
  WBEMMOF_E_INVALID_PRAGMA = -2147205102,
  WBEMMOF_E_INVALID_NAMESPACE_SYNTAX = -2147205101,
  WBEMMOF_E_EXPECTED_CLASS_NAME = -2147205100,
  WBEMMOF_E_TYPE_MISMATCH = -2147205099,
  WBEMMOF_E_EXPECTED_ALIAS_NAME = -2147205098,
  WBEMMOF_E_INVALID_CLASS_DECLARATION = -2147205097,
  WBEMMOF_E_INVALID_INSTANCE_DECLARATION = -2147205096,
  WBEMMOF_E_EXPECTED_DOLLAR = -2147205095,
  WBEMMOF_E_CIMTYPE_QUALIFIER = -2147205094,
  WBEMMOF_E_DUPLICATE_PROPERTY = -2147205093,
  WBEMMOF_E_INVALID_NAMESPACE_SPECIFICATION = -2147205092,
  WBEMMOF_E_OUT_OF_RANGE = -2147205091,
  WBEMMOF_E_INVALID_FILE = -2147205090,
  WBEMMOF_E_ALIASES_IN_EMBEDDED = -2147205089,
  WBEMMOF_E_NULL_ARRAY_ELEM = -2147205088,
  WBEMMOF_E_DUPLICATE_QUALIFIER = -2147205087,
  WBEMMOF_E_EXPECTED_FLAVOR_TYPE = -2147205086,
  WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES = -2147205085,
  WBEMMOF_E_MULTIPLE_ALIASES = -2147205084,
  WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES2 = -2147205083,
  WBEMMOF_E_NO_ARRAYS_RETURNED = -2147205082,
  WBEMMOF_E_MUST_BE_IN_OR_OUT = -2147205081,
  WBEMMOF_E_INVALID_FLAGS_SYNTAX = -2147205080,
  WBEMMOF_E_EXPECTED_BRACE_OR_BAD_TYPE = -2147205079,
  WBEMMOF_E_UNSUPPORTED_CIMV22_QUAL_VALUE = -2147205078,
  WBEMMOF_E_UNSUPPORTED_CIMV22_DATA_TYPE = -2147205077,
  WBEMMOF_E_INVALID_DELETEINSTANCE_SYNTAX = -2147205076,
  WBEMMOF_E_INVALID_QUALIFIER_SYNTAX = -2147205075,
  WBEMMOF_E_QUALIFIER_USED_OUTSIDE_SCOPE = -2147205074,
  WBEMMOF_E_ERROR_CREATING_TEMP_FILE = -2147205073,
  WBEMMOF_E_ERROR_INVALID_INCLUDE_FILE = -2147205072,
  WBEMMOF_E_INVALID_DELETECLASS_SYNTAX = -2147205071,
};

enum Location
{
  LOC_TIA = 0,
  LOC_PIA_RAM = 1,
  LOC_PIA = 2,
  LOC_ROM = 3,
};

typedef enum _TAG_UNNAMED_61
{
  TOTAL_STRINGLIST_SIZE = 0xffffc000,
  STRINGLIST_SIZE = 0xffffc000,
} TAG_UNNAMED_61, *PTAG_UNNAMED_61;

enum GameTypeSettingsType
{
  GAMETYPE_SETTINGS_FIRST = 0,
  GAMETYPE_SETTINGS_DISALLOW_AIM_SLOWDOWN = 0,
  GAMETYPE_SETTINGS_DISALLOW_PRONE = 1,
  GAMETYPE_SETTINGS_ALLOW_SPECTATING = 2,
  GAMETYPE_SETTINGS_AUTO_TEAM_BALANCE = 3,
  GAMETYPE_SETTINGS_TEAM_COUNT = 4,
  GAMETYPE_SETTINGS_PRESET_CLASSES_PER_TEAM = 5,
  GAMETYPE_SETTINGS_MAX_ALLOCATION = 6,
  GAMETYPE_SETTINGS_HARDCORE_MODE = 7,
  GAMETYPE_SETTINGS_DISABLE_THIRD_PERSON_SPECTATING = 8,
  GAMETYPE_SETTINGS_NUM = 9,
};

enum bonusCards_t
{
  BONUSCARD_INVALID = -1,
  BONUSCARD_FIRST = 0,
  BONUSCARD_PRIMARY_GUNFIGHTER = 0,
  BONUSCARD_SECONDARY_GUNFIGHTER = 1,
  BONUSCARD_OVERKILL = 2,
  BONUSCARD_PERK_1_GREED = 3,
  BONUSCARD_PERK_2_GREED = 4,
  BONUSCARD_PERK_3_GREED = 5,
  BONUSCARD_DANGER_CLOSE = 6,
  BONUSCARD_TWO_TACTICALS = 7,
  BONUSCARD_COUNT = 8,
};

enum D2D1_RENDER_TARGET_TYPE
{
  D2D1_RENDER_TARGET_TYPE_DEFAULT = 0,
  D2D1_RENDER_TARGET_TYPE_SOFTWARE = 1,
  D2D1_RENDER_TARGET_TYPE_HARDWARE = 2,
  D2D1_RENDER_TARGET_TYPE_FORCE_DWORD = -1,
};

struct GfxBlendSaveScreenBlurredParam
{
  /* 0x0000 */ int fadeMsec;
  /* 0x0004 */ float s0;
  /* 0x0008 */ float t0;
  /* 0x000c */ float ds;
  /* 0x0010 */ float dt;
  /* 0x0014 */ int screenTimerId;
  /* 0x0018 */ unsigned char enabled;
  /* 0x0019 */ char __PADDING__[3];
}; /* size: 0x001c */

enum D3D_REGISTER_COMPONENT_TYPE
{
  D3D_REGISTER_COMPONENT_UNKNOWN = 0,
  D3D_REGISTER_COMPONENT_UINT32 = 1,
  D3D_REGISTER_COMPONENT_SINT32 = 2,
  D3D_REGISTER_COMPONENT_FLOAT32 = 3,
  D3D10_REGISTER_COMPONENT_UNKNOWN = 0,
  D3D10_REGISTER_COMPONENT_UINT32 = 1,
  D3D10_REGISTER_COMPONENT_SINT32 = 2,
  D3D10_REGISTER_COMPONENT_FLOAT32 = 3,
};

enum TaskState
{
  TASK_STATE_INVALID = 0,
  TASK_STATE_INIT = 1,
  TASK_STATE_INPROGRESS = 2,
  TASK_STATE_INCALLBACK = 3,
  TASK_STATE_CHILDCOMPLETE = 4,
  TASK_STATE_CHILDFAILED = 5,
  TASK_STATE_COMPLETED = 6,
  TASK_STATE_FAILED = 7,
  TASK_STATE_CANCELLED = 8,
};

typedef enum _TAG_UNNAMED_62
{
  MAX_FILE_IDS = 64,
} TAG_UNNAMED_62, *PTAG_UNNAMED_62;

enum WeaponDobjInfo::Slot
{
  HELD = 0,
  STOWED = 1,
  MELEE = 2,
};

struct WeaponDobjInfo::ModelMask
{
  /* 0x0000 */ enum WeaponDobjInfo::Slot slot;
  /* 0x0004 */ BOOL weapon;
  /* 0x0005 */ char Padding_40[3];
  union
  {
    /* 0x0008 */ const struct WeaponDef* weapDef;
    /* 0x0008 */ const struct WeaponAttachmentUnique* attachment;
  }; /* size: 0x0004 */
  /* 0x000c */ unsigned int dobjModelMask;
}; /* size: 0x0010 */

enum XAssetType
{
  ASSET_TYPE_XMODELPIECES = 0,
  ASSET_TYPE_PHYSPRESET = 1,
  ASSET_TYPE_PHYSCONSTRAINTS = 2,
  ASSET_TYPE_DESTRUCTIBLEDEF = 3,
  ASSET_TYPE_XANIMPARTS = 4,
  ASSET_TYPE_XMODEL = 5,
  ASSET_TYPE_MATERIAL = 6,
  ASSET_TYPE_TECHNIQUE_SET = 7,
  ASSET_TYPE_IMAGE = 8,
  ASSET_TYPE_SOUND = 9,
  ASSET_TYPE_SOUND_PATCH = 10,
  ASSET_TYPE_CLIPMAP = 11,
  ASSET_TYPE_CLIPMAP_PVS = 12,
  ASSET_TYPE_COMWORLD = 13,
  ASSET_TYPE_GAMEWORLD_SP = 14,
  ASSET_TYPE_GAMEWORLD_MP = 15,
  ASSET_TYPE_MAP_ENTS = 16,
  ASSET_TYPE_GFXWORLD = 17,
  ASSET_TYPE_LIGHT_DEF = 18,
  ASSET_TYPE_UI_MAP = 19,
  ASSET_TYPE_FONT = 20,
  ASSET_TYPE_FONTICON = 21,
  ASSET_TYPE_MENULIST = 22,
  ASSET_TYPE_MENU = 23,
  ASSET_TYPE_LOCALIZE_ENTRY = 24,
  ASSET_TYPE_WEAPON = 25,
  ASSET_TYPE_WEAPONDEF = 26,
  ASSET_TYPE_WEAPON_VARIANT = 27,
  ASSET_TYPE_WEAPON_FULL = 28,
  ASSET_TYPE_ATTACHMENT = 29,
  ASSET_TYPE_ATTACHMENT_UNIQUE = 30,
  ASSET_TYPE_WEAPON_CAMO = 31,
  ASSET_TYPE_SNDDRIVER_GLOBALS = 32,
  ASSET_TYPE_FX = 33,
  ASSET_TYPE_IMPACT_FX = 34,
  ASSET_TYPE_AITYPE = 35,
  ASSET_TYPE_MPTYPE = 36,
  ASSET_TYPE_MPBODY = 37,
  ASSET_TYPE_MPHEAD = 38,
  ASSET_TYPE_CHARACTER = 39,
  ASSET_TYPE_XMODELALIAS = 40,
  ASSET_TYPE_RAWFILE = 41,
  ASSET_TYPE_STRINGTABLE = 42,
  ASSET_TYPE_LEADERBOARD = 43,
  ASSET_TYPE_XGLOBALS = 44,
  ASSET_TYPE_DDL = 45,
  ASSET_TYPE_GLASSES = 46,
  ASSET_TYPE_EMBLEMSET = 47,
  ASSET_TYPE_SCRIPTPARSETREE = 48,
  ASSET_TYPE_KEYVALUEPAIRS = 49,
  ASSET_TYPE_VEHICLEDEF = 50,
  ASSET_TYPE_MEMORYBLOCK = 51,
  ASSET_TYPE_ADDON_MAP_ENTS = 52,
  ASSET_TYPE_TRACER = 53,
  ASSET_TYPE_SKINNEDVERTS = 54,
  ASSET_TYPE_QDB = 55,
  ASSET_TYPE_SLUG = 56,
  ASSET_TYPE_FOOTSTEP_TABLE = 57,
  ASSET_TYPE_FOOTSTEPFX_TABLE = 58,
  ASSET_TYPE_ZBARRIER = 59,
  ASSET_TYPE_COUNT = 60,
  ASSET_TYPE_STRING = 60,
  ASSET_TYPE_ASSETLIST = 61,
  ASSET_TYPE_REPORT = 62,
  ASSET_TYPE_DEPEND = 63,
  ASSET_TYPE_FULL_COUNT = 64,
};

enum PIMP_TECHSET
{
  PIMP_TECHSET_DEFAULT = 0,
  PIMP_TECHSET_MODEL = 1,
  PIMP_TECHSET_WORLD = 2,
  PIMP_TECHSET_PACKED_WORLD = 3,
  PIMP_TECHSET_QUANT_WORLD_NO_COLOR = 4,
  PIMP_TECHSET_QUANT_WORLD = 5,
  PIMP_TECHSET_LMAP_VERTEX_MODEL = 6,
  PIMP_TECHSET_COUNT = 7,
};

enum D3D_TESSELLATOR_DOMAIN
{
  D3D_TESSELLATOR_DOMAIN_UNDEFINED = 0,
  D3D_TESSELLATOR_DOMAIN_ISOLINE = 1,
  D3D_TESSELLATOR_DOMAIN_TRI = 2,
  D3D_TESSELLATOR_DOMAIN_QUAD = 3,
  D3D11_TESSELLATOR_DOMAIN_UNDEFINED = 0,
  D3D11_TESSELLATOR_DOMAIN_ISOLINE = 1,
  D3D11_TESSELLATOR_DOMAIN_TRI = 2,
  D3D11_TESSELLATOR_DOMAIN_QUAD = 3,
};

class bdArray<bdAddr>
{
  /* 0x0000 */ class bdAddr* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

enum DXGI_SWAP_EFFECT
{
  DXGI_SWAP_EFFECT_DISCARD = 0,
  DXGI_SWAP_EFFECT_SEQUENTIAL = 1,
};

typedef enum _TAG_UNNAMED_63
{
  COMPRESS_NONE = 0,
  COMPRESS_HUFFMAN = 1,
  COMPRESS_ZLIB = 2,
} TAG_UNNAMED_63, *PTAG_UNNAMED_63;

enum vc_attributes::YesNoMaybe
{
  No = 0xfff0001,
  Maybe = 0xfff0010,
  Yes = 0xfff0100,
};

class phys_simple_allocator<gjk_partition_t>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

enum vc_attributes::AccessType
{
  NoAccess = 0,
  Read = 1,
  Write = 2,
  ReadWrite = 3,
};

class phys_simple_link_list<contact_point_info>
{
  /* 0x0000 */ class contact_point_info* m_first;
}; /* size: 0x0004 */

class phys_inplace_avl_tree_node<rigid_body_constraint_contact>
{
  /* 0x0000 */ class rigid_body_constraint_contact* m_left;
  /* 0x0004 */ class rigid_body_constraint_contact* m_right;
  /* 0x0008 */ int m_balance;
}; /* size: 0x000c */

class rigid_body_pair_key
{
  /* 0x0000 */ class rigid_body* m_b1;
  /* 0x0004 */ class rigid_body* m_b2;
}; /* size: 0x0008 */

class rigid_body_constraint_contact
{
  /* 0x0000 */ long Padding_41[3];
  /* 0x000c */ class phys_simple_link_list<contact_point_info> m_list_contact_point_info_buffer_1;
  /* 0x0010 */ class phys_simple_link_list<contact_point_info> m_list_contact_point_info_buffer_2;
  /* 0x0014 */ unsigned int m_solver_priority;
  /* 0x0018 */ class phys_inplace_avl_tree_node<rigid_body_constraint_contact> m_avl_tree_node;
  /* 0x0024 */ class rigid_body_pair_key m_avl_key;
}; /* size: 0x002c */

enum statsTableColumns_t
{
  STATSTABLE_NUMBER = 0,
  STATSTABLE_PASSIVE = 1,
  STATSTABLE_GROUP = 2,
  STATSTABLE_NAME = 3,
  STATSTABLE_REFERENCE = 4,
  STATSTABLE_ITEMCOUNT = 5,
  STATSTABLE_IMAGE = 6,
  STATSTABLE_DESCRIPTION = 7,
  STATSTABLE_ATTACHMENTS_DATA = 8,
  STATSTABLE_SORTKEY = 9,
  STATSTABLE_UNLOCK_LVL = 10,
  STATSTABLE_DEFAULT_CLASS = 11,
  STATSTABLE_ALLOCATION_COST = 12,
  STATSTABLE_LOADOUT_SLOT = 13,
  STATSTABLE_UNLOCK_PLVL = 14,
  STATSTABLE_DLC_INDEX = 15,
  STATSTABLE_MOMENTUM_COST = 16,
  STATSTABLE_COST = 17,
  STATSTABLE_DEMO_VERSION = 18,
  STATSTABLE_ZM_MAPS_TRACKED_BY = 19,
  STATSTABLE_COUNT = 20,
};

enum D3D_TESSELLATOR_PARTITIONING
{
  D3D_TESSELLATOR_PARTITIONING_UNDEFINED = 0,
  D3D_TESSELLATOR_PARTITIONING_INTEGER = 1,
  D3D_TESSELLATOR_PARTITIONING_POW2 = 2,
  D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 3,
  D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 4,
  D3D11_TESSELLATOR_PARTITIONING_UNDEFINED = 0,
  D3D11_TESSELLATOR_PARTITIONING_INTEGER = 1,
  D3D11_TESSELLATOR_PARTITIONING_POW2 = 2,
  D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 3,
  D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 4,
};

enum DWRITE_FONT_WEIGHT
{
};

enum ParseThreadContext
{
  PARSE_THREAD_MAIN = 0,
  PARSE_THREAD_BACKEND = 1,
  PARSE_THREAD_SERVER = 2,
  PARSE_THREAD_FASTFILE = 3,
  PARSE_THREAD_COUNT = 4,
};

enum D3D_TESSELLATOR_OUTPUT_PRIMITIVE
{
  D3D_TESSELLATOR_OUTPUT_UNDEFINED = 0,
  D3D_TESSELLATOR_OUTPUT_POINT = 1,
  D3D_TESSELLATOR_OUTPUT_LINE = 2,
  D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW = 3,
  D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 4,
  D3D11_TESSELLATOR_OUTPUT_UNDEFINED = 0,
  D3D11_TESSELLATOR_OUTPUT_POINT = 1,
  D3D11_TESSELLATOR_OUTPUT_LINE = 2,
  D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW = 3,
  D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 4,
};

enum NitrousVehicle::NitrousNotifyFlags
{
  NOTIFY_COLLISION = 1,
  NOTIFY_IN_AIR = 2,
  NOTIFY_LANDED = 4,
  NOTIFY_SUSPENSION_LIMIT_ACTIVATED = 8,
  NOTIFY_ENGINE_STUTTER = 16,
  NOTIFY_REACHED_GOAL = 32,
  NOTIFY_STUCK = 64,
};

enum D3D10_USAGE
{
  D3D10_USAGE_DEFAULT = 0,
  D3D10_USAGE_IMMUTABLE = 1,
  D3D10_USAGE_DYNAMIC = 2,
  D3D10_USAGE_STAGING = 3,
};

enum DWRITE_READING_DIRECTION
{
};

enum D3D11_QUERY
{
  D3D11_QUERY_EVENT = 0,
  D3D11_QUERY_OCCLUSION = 1,
  D3D11_QUERY_TIMESTAMP = 2,
  D3D11_QUERY_TIMESTAMP_DISJOINT = 3,
  D3D11_QUERY_PIPELINE_STATISTICS = 4,
  D3D11_QUERY_OCCLUSION_PREDICATE = 5,
  D3D11_QUERY_SO_STATISTICS = 6,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE = 7,
  D3D11_QUERY_SO_STATISTICS_STREAM0 = 8,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = 9,
  D3D11_QUERY_SO_STATISTICS_STREAM1 = 10,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = 11,
  D3D11_QUERY_SO_STATISTICS_STREAM2 = 12,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = 13,
  D3D11_QUERY_SO_STATISTICS_STREAM3 = 14,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = 15,
};

typedef enum _TAG_UNNAMED_64
{
  GEOGRAPHICAL_MATCHMAKING_OVERRIDE_NONE = 0,
  GEOGRAPHICAL_MATCHMAKING_OVERRIDE_ALL_PREFERRED = 1,
  GEOGRAPHICAL_MATCHMAKING_OVERRIDE_FOREIGN_PREFERRED = 2,
} TAG_UNNAMED_64, *PTAG_UNNAMED_64;

enum OffhandSecondaryClass
{
  PLAYER_OFFHAND_SECONDARY_SMOKE = 0,
  PLAYER_OFFHAND_SECONDARY_FLASH = 1,
  PLAYER_OFFHAND_SECONDARIES_TOTAL = 2,
};

enum DynEntityDrawType
{
  DYNENT_DRAW_MODEL = 0,
  DYNENT_DRAW_BRUSH = 1,
  DYNENT_DRAW_COUNT = 2,
};

struct flamePhysics_t
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ union vec3_t newPos;
  /* 0x0018 */ union vec3_t velocity;
  /* 0x0024 */ float invStartSpeed;
  /* 0x0028 */ float gravity;
  /* 0x002c */ float rotation;
  /* 0x0030 */ float rotVel;
}; /* size: 0x0034 */

struct flameSize_t
{
  /* 0x0000 */ float current;
  /* 0x0004 */ float rate;
}; /* size: 0x0008 */

struct flameAge_t
{
  /* 0x0000 */ int lastUpdateTime;
  /* 0x0004 */ int startTime;
  /* 0x0008 */ int endTime;
}; /* size: 0x000c */

struct flameList_t
{
  /* 0x0000 */ struct flameGeneric_s* prev;
  /* 0x0004 */ struct flameGeneric_s* next;
}; /* size: 0x0008 */

struct flameGeneric_s
{
  /* 0x0000 */ struct flamePhysics_t phys;
  /* 0x0034 */ struct flameSize_t size;
  /* 0x003c */ struct flameAge_t age;
  /* 0x0048 */ struct flameList_t listGlobal;
  /* 0x0050 */ struct flameList_t listLocal;
  /* 0x0058 */ struct flameStream_s* stream;
  struct /* bitfield */
  {
    /* 0x005c */ unsigned long type : 3; /* bit position: 0 */
    /* 0x005c */ unsigned long delete_chunk : 1; /* bit position: 3 */
    /* 0x005c */ unsigned long id : 28; /* bit position: 4 */
  }; /* bitfield */
}; /* size: 0x0060 */

struct flameSmoke_t
{
  /* 0x0000 */ struct flameGeneric_s gen;
  /* 0x0060 */ struct Material* material;
  /* 0x0064 */ float smokeFadein;
  /* 0x0068 */ float smokeFadeout;
  /* 0x006c */ float smokeMaxAlpha;
  /* 0x0070 */ float smokeBrightness;
}; /* size: 0x0074 */

typedef enum _TAG_UNNAMED_65
{
  THREAD_VALUE_PROF_STACK = 0,
  THREAD_VALUE_VA = 1,
  THREAD_VALUE_COM_ERROR = 2,
  THREAD_VALUE_TRACE = 3,
  THREAD_VALUE_CMD = 4,
  THREAD_VALUE_COUNT = 5,
} TAG_UNNAMED_65, *PTAG_UNNAMED_65;

typedef enum _TAG_UNNAMED_66
{
  AI_MOVEMODE_SPRINT = 0,
  AI_MOVEMODE_RUN = 1,
  AI_MOVEMODE_WALK = 2,
  AI_MOVEMODE_CROUCH_RUN = 3,
  AI_MOVEMODE_CROUCH_WALK = 4,
  AI_MOVEMODE_PRONE = 5,
} TAG_UNNAMED_66, *PTAG_UNNAMED_66;

enum OffhandPrimaryClass
{
  PLAYER_OFFHAND_PRIMARY_FRAG = 0,
  PLAYER_OFFHAND_PRIMARY_GEAR = 1,
  PLAYER_OFFHAND_PRIMARIES_TOTAL = 2,
};

enum bdLobbyConnection::RecvState
{
  BD_READ_INIT = 0,
  BD_READ_SIZE = 1,
  BD_READ_ENCRYPT = 2,
  BD_READ_MESSAGE = 3,
  BD_READ_COMPLETE = 4,
};

typedef enum _TAG_UNNAMED_67
{
  FX_ED_FLAG_LOOPING = 1,
  FX_ED_FLAG_USE_RANDOM_COLOR = 2,
  FX_ED_FLAG_USE_RANDOM_ALPHA = 4,
  FX_ED_FLAG_USE_RANDOM_SIZE_0 = 8,
  FX_ED_FLAG_USE_RANDOM_SIZE_1 = 16,
  FX_ED_FLAG_USE_RANDOM_SCALE = 32,
  FX_ED_FLAG_USE_RANDOM_ROTATION_DELTA = 64,
  FX_ED_FLAG_MODULATE_COLOR_BY_ALPHA = 128,
  FX_ED_FLAG_USE_RANDOM_VELOCITY_0 = 256,
  FX_ED_FLAG_USE_RANDOM_VELOCITY_1 = 512,
  FX_ED_FLAG_BACKCOMPAT_VELOCITY = 1024,
  FX_ED_FLAG_ABSOLUTE_VELOCITY_0 = 2048,
  FX_ED_FLAG_ABSOLUTE_VELOCITY_1 = 4096,
  FX_ED_FLAG_PLAY_ON_TOUCH = 8192,
  FX_ED_FLAG_PLAY_ON_DEATH = 16384,
  FX_ED_FLAG_PLAY_ON_RUN = 0xffff8000,
  FX_ED_FLAG_BOUNDING_SPHERE = 0x10000,
  FX_ED_FLAG_PLAY_ATTACHED = 0x40000,
  FX_ED_FLAG_DISABLED = -2147483648,
} TAG_UNNAMED_67, *PTAG_UNNAMED_67;

typedef enum _TAG_UNNAMED_68
{
  THREAD_CONTEXT_MAIN = 0,
  THREAD_CONTEXT_BACKEND = 1,
  THREAD_CONTEXT_WORKER0 = 2,
  THREAD_CONTEXT_WORKER1 = 3,
  THREAD_CONTEXT_WORKER2 = 4,
  THREAD_CONTEXT_WORKER3 = 5,
  THREAD_CONTEXT_WORKER4 = 6,
  THREAD_CONTEXT_WORKER5 = 7,
  THREAD_CONTEXT_WORKER6 = 8,
  THREAD_CONTEXT_WORKER7 = 9,
  THREAD_CONTEXT_SERVER = 10,
  THREAD_CONTEXT_TITLE_SERVER = 11,
  THREAD_CONTEXT_DATABASE = 12,
  THREAD_CONTEXT_TRACE_COUNT = 13,
  THREAD_CONTEXT_TRACE_LAST = 12,
  THREAD_CONTEXT_STREAM = 13,
  THREAD_CONTEXT_SOUND_MIX = 14,
  THREAD_CONTEXT_SOUND_DECODE = 15,
  THREAD_CONTEXT_WEBM_DEC_DECODE = 16,
  THREAD_CONTEXT_COUNT = 17,
  THREAD_CONTEXT_INVALID = -1,
} TAG_UNNAMED_68, *PTAG_UNNAMED_68;

struct XDollBone
{
  /* 0x0000 */ unsigned char index;
  /* 0x0001 */ unsigned char flags;
  /* 0x0002 */ char Padding_42[2];
  /* 0x0004 */ unsigned int name_hash;
  /* 0x0008 */ int rigidBody;
  /* 0x000c */ struct PhysPreset* physPreset;
}; /* size: 0x0010 */

typedef enum _TAG_UNNAMED_69
{
  GAMETYPES_COL_GAME_REF = 1,
  GAMETYPES_COL_GAME_NAMECAPS = 2,
  GAMETYPES_COL_GAME_DESCRIPTION = 3,
  GAMETYPES_COL_GAME_IMAGE = 4,
  GAMETYPES_COL_GAME_INDEX = 5,
  GAMETYPES_COL_GAME_SPLITSCREEN = 6,
  GAMETYPES_COL_GAME_NAMELOWER = 7,
  GAMETYPES_COL_GAME_ISTEAMBASED = 8,
  GAMETYPES_COL_GAME_GROUP = 9,
} TAG_UNNAMED_69, *PTAG_UNNAMED_69;

enum D3D10_QUERY
{
  D3D10_QUERY_EVENT = 0,
  D3D10_QUERY_OCCLUSION = 1,
  D3D10_QUERY_TIMESTAMP = 2,
  D3D10_QUERY_TIMESTAMP_DISJOINT = 3,
  D3D10_QUERY_PIPELINE_STATISTICS = 4,
  D3D10_QUERY_OCCLUSION_PREDICATE = 5,
  D3D10_QUERY_SO_STATISTICS = 6,
  D3D10_QUERY_SO_OVERFLOW_PREDICATE = 7,
};

typedef enum _TAG_UNNAMED_70
{
  FX_MARK_VISUALS_CLASS_MODEL_INDEX = 0,
  FX_MARK_VISUALS_CLASS_WORLD_INDEX = 1,
  FX_MARK_VISUALS_CLASS_COUNT = 2,
} TAG_UNNAMED_70, *PTAG_UNNAMED_70;

typedef enum _TAG_UNNAMED_71
{
  FX_STATUS_REF_COUNT_MASK = 16383,
  FX_STATUS_IS_STALE_ATTACHED_FX = 16384,
  FX_STATUS_BASE_REF_REMOVED = 0xffff8000,
  FX_STATUS_HAS_PENDING_LOOP_ELEMS = 0x10000,
  FX_STATUS_OWNED_EFFECTS_SHIFT = 17,
  FX_STATUS_OWNED_EFFECTS_MASK = 0x7fe0000,
  FX_STATUS_IS_LOCKED = 0x20000000,
  FX_STATUS_IS_LOCKED_MASK = 0x60000000,
} TAG_UNNAMED_71, *PTAG_UNNAMED_71;

class bdPendingBufferTransfer
{
  /* 0x0000 */ long Padding_43[2];
  /* 0x0008 */ class bdReference<bdByteBuffer> m_buffer;
  /* 0x000c */ unsigned char* m_txPtr;
  /* 0x0010 */ unsigned int m_txAvail;
}; /* size: 0x0014 */

enum weaponstate_t
{
  WEAPON_READY = 0,
  WEAPON_RAISING = 1,
  WEAPON_RAISING_ALTSWITCH = 2,
  WEAPON_DROPPING = 3,
  WEAPON_DROPPING_QUICK = 4,
  WEAPON_DROPPING_ALTSWITCH = 5,
  WEAPON_FIRING = 6,
  WEAPON_RECHAMBER_START = 7,
  WEAPON_RECHAMBERING = 8,
  WEAPON_RELOADING_RIGHT = 9,
  WEAPON_RELOADING_LEFT = 10,
  WEAPON_RELOADING = 11,
  WEAPON_RELOADING_INTERUPT = 12,
  WEAPON_RELOAD_START = 13,
  WEAPON_RELOAD_START_RECHAMBER = 14,
  WEAPON_RELOAD_START_INTERUPT = 15,
  WEAPON_RELOAD_END = 16,
  WEAPON_RELOAD_QUICK = 17,
  WEAPON_RELOAD_QUICK_EMPTY = 18,
  WEAPON_MELEE_INIT = 19,
  WEAPON_MELEE_FIRE = 20,
  WEAPON_MELEE_END = 21,
  WEAPON_OFFHAND_INIT = 22,
  WEAPON_OFFHAND_PREPARE = 23,
  WEAPON_OFFHAND_HOLD = 24,
  WEAPON_OFFHAND_DETONATE = 25,
  WEAPON_OFFHAND_START = 26,
  WEAPON_OFFHAND = 27,
  WEAPON_OFFHAND_HOLDUSE = 28,
  WEAPON_OFFHAND_END = 29,
  WEAPON_RIOTSHIELD_PREPARE = 30,
  WEAPON_RIOTSHIELD_START = 31,
  WEAPON_RIOTSHIELD_HOLD = 32,
  WEAPON_RIOTSHIELD = 33,
  WEAPON_RIOTSHIELD_END = 34,
  WEAPON_DETONATING = 35,
  WEAPON_SPRINT_RAISE = 36,
  WEAPON_SPRINT_LOOP = 37,
  WEAPON_SPRINT_DROP = 38,
  WEAPON_CONT_FIRE_IN = 39,
  WEAPON_CONT_FIRE_LOOP = 40,
  WEAPON_CONT_FIRE_OUT = 41,
  WEAPON_NIGHTVISION_WEAR = 42,
  WEAPON_NIGHTVISION_REMOVE = 43,
  WEAPON_DEPLOYING = 44,
  WEAPON_DEPLOYED = 45,
  WEAPON_BREAKING_DOWN = 46,
  WEAPON_SWIM_IN = 47,
  WEAPON_SWIM_OUT = 48,
  WEAPON_DTP_IN = 49,
  WEAPON_DTP_LOOP = 50,
  WEAPON_DTP_OUT = 51,
  WEAPON_SLIDE_IN = 52,
  WEAPON_FIRING_LEFT = 53,
  WEAPON_FIRING_BOTH = 54,
  WEAPON_JAMMED = 55,
  WEAPON_LOWREADY_RAISE = 56,
  WEAPON_LOWREADY_LOOP = 57,
  WEAPON_LOWREADY_DROP = 58,
  WEAPON_CRAWL_IN = 59,
  WEAPON_CRAWL_FORWARD = 60,
  WEAPON_CRAWL_BACK = 61,
  WEAPON_CRAWL_RIGHT = 62,
  WEAPON_CRAWL_LEFT = 63,
  WEAPON_CRAWL_OUT = 64,
  WEAPONSTATES_NUM = 65,
};

struct DXGI_SAMPLE_DESC
{
  /* 0x0000 */ unsigned int Count;
  /* 0x0004 */ unsigned int Quality;
}; /* size: 0x0008 */

struct D3D10_TEXTURE2D_DESC
{
  /* 0x0000 */ unsigned int Width;
  /* 0x0004 */ unsigned int Height;
  /* 0x0008 */ unsigned int MipLevels;
  /* 0x000c */ unsigned int ArraySize;
  /* 0x0010 */ enum DXGI_FORMAT Format;
  /* 0x0014 */ struct DXGI_SAMPLE_DESC SampleDesc;
  /* 0x001c */ enum D3D10_USAGE Usage;
  /* 0x0020 */ unsigned int BindFlags;
  /* 0x0024 */ unsigned int CPUAccessFlags;
  /* 0x0028 */ unsigned int MiscFlags;
}; /* size: 0x002c */

enum D3D11_FILL_MODE
{
  D3D11_FILL_WIREFRAME = 2,
  D3D11_FILL_SOLID = 3,
};

struct tagInfo_t
{
  /* 0x0000 */ struct gentity_t* parent;
  /* 0x0004 */ struct gentity_t* next;
  /* 0x0008 */ unsigned short name;
  /* 0x000a */ BOOL blendToParent;
  /* 0x000b */ BOOL blendOnlyYaw;
  /* 0x000c */ BOOL collisionPhysics;
  /* 0x000d */ char Padding_44[3];
  /* 0x0010 */ int index;
  /* 0x0014 */ union vec3_t axis[4];
  /* 0x0044 */ union vec3_t parentInvAxis[4];
}; /* size: 0x0074 */

enum gjk_query_flags_e
{
  GJK_QUERY_FLAG_TERRAIN = 1,
  GJK_QUERY_FLAG_ENTS = 2,
  GJK_QUERY_FLAG_DENTS = 4,
};

enum D3D11_CULL_MODE
{
  D3D11_CULL_NONE = 1,
  D3D11_CULL_FRONT = 2,
  D3D11_CULL_BACK = 3,
};

enum eBattleChatterPlayStates
{
  BCMP_NONE = 0,
  BCMP_SOUND_ONE = 1,
  BCMP_SOUND_TWO = 2,
};

enum fileshareState_e
{
  FILESHARE_STATE_INVALID = 0,
  FILESHARE_STATE_WORKING = 1,
  FILESHARE_STATE_SLOTS_FETCHED = 2,
  FILESHARE_STATE_VIEWS_FETCHED = 3,
  FILESHARE_STATE_VOTES_FETCHED = 4,
  FILESHARE_STATE_FAILURE = 5,
  FILESHARE_STATE_VALID = 6,
};

enum ActionSlotType
{
  ACTIONSLOTTYPE_DONOTHING = 0,
  ACTIONSLOTTYPE_SPECIFYWEAPON = 1,
  ACTIONSLOTTYPE_ALTWEAPONTOGGLE = 2,
  ACTIONSLOTTYPE_NIGHTVISION = 3,
  ACTIONSLOTTYPECOUNT = 4,
};

struct XAnimDeltaPart
{
  /* 0x0000 */ struct XAnimPartTrans* trans;
  /* 0x0004 */ struct XAnimDeltaPartQuat2* quat2;
  /* 0x0008 */ struct XAnimDeltaPartQuat* quat;
}; /* size: 0x000c */

enum bdNATTypeDiscoveryPacket::bdNATTypeDiscoveryPacketRequest
{
  BD_NTDP_SAME_ADDR = 0,
  BD_NTDP_DIFF_PORT = 1,
  BD_NTDP_DIFF_IP = 2,
  BD_NTDP_DIFF_PORT_IP = 3,
  BD_NTDP_INVALID_TYPE = 4,
};

typedef enum _TAG_UNNAMED_72
{
  DOBJ_MAX_PARTS = 160,
  DOBJ_MAX_PART_BITS = 5,
  MAX_LODS = 4,
} TAG_UNNAMED_72, *PTAG_UNNAMED_72;

enum GridPointAlignType
{
  GRID_TOP_LEFT_ALIGN = 0,
  GRID_TOP_CENTER_ALIGN = 1,
  GRID_TOP_RIGHT_ALIGN = 2,
  GRID_LEFT_ALIGN = 3,
  GRID_CENTER_ALIGN = 4,
  GRID_RIGHT_ALIGN = 5,
  GRID_BOTTOM_LEFT_ALIGN = 6,
  GRID_BOTTOM_CENTER_ALIGN = 7,
  GRID_BOTTOM_RIGHT_ALIGN = 8,
};

typedef enum _tagPARSEACTION
{
  PARSE_CANONICALIZE = 1,
  PARSE_FRIENDLY = 2,
  PARSE_SECURITY_URL = 3,
  PARSE_ROOTDOCUMENT = 4,
  PARSE_DOCUMENT = 5,
  PARSE_ANCHOR = 6,
  PARSE_ENCODE_IS_UNESCAPE = 7,
  PARSE_DECODE_IS_ESCAPE = 8,
  PARSE_PATH_FROM_URL = 9,
  PARSE_URL_FROM_PATH = 10,
  PARSE_MIME = 11,
  PARSE_SERVER = 12,
  PARSE_SCHEMA = 13,
  PARSE_SITE = 14,
  PARSE_DOMAIN = 15,
  PARSE_LOCATION = 16,
  PARSE_SECURITY_DOMAIN = 17,
  PARSE_ESCAPE = 18,
  PARSE_UNESCAPE = 19,
} tagPARSEACTION, *PtagPARSEACTION;

struct GfxPixelShaderLoadDef
{
  /* 0x0000 */ unsigned char* program;
  /* 0x0004 */ unsigned int programSize;
}; /* size: 0x0008 */

struct MaterialPixelShaderProgram
{
  /* 0x0000 */ struct ID3D11PixelShader* ps;
  /* 0x0004 */ struct GfxPixelShaderLoadDef loadDef;
}; /* size: 0x000c */

struct MaterialPixelShader
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ struct MaterialPixelShaderProgram prog;
}; /* size: 0x0010 */

enum bdConnectionStore::bdConnectionStoreStatus
{
  BD_CONNECTION_STORE_UNINITIALIZED = 0,
  BD_CONNECTION_STORE_INITIALIZED = 1,
  BD_CONNECTION_STORE_SHUTTING_DOWN = 2,
  BD_CONNECTION_STORE_ERROR = 3,
};

enum PhysWorld
{
  PHYS_WORLD_DYNENT = 0,
  PHYS_WORLD_FX = 1,
  PHYS_WORLD_RAGDOLL = 2,
  PHYS_WORLD_COUNT = 3,
};

typedef struct _XMUDECN4
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int x : 10; /* bit position: 0 */
      /* 0x0000 */ unsigned int y : 10; /* bit position: 10 */
      /* 0x0000 */ unsigned int z : 10; /* bit position: 20 */
      /* 0x0000 */ unsigned int w : 2; /* bit position: 30 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMUDECN4, *PXMUDECN4; /* size: 0x0004 */

typedef enum _TAG_UNNAMED_73
{
  ASSERT_TYPE_ASSERT = 0,
  ASSERT_TYPE_SANITY = 1,
  ASSERT_TYPE_STACKTRACE = 2,
} TAG_UNNAMED_73, *PTAG_UNNAMED_73;

enum language_t
{
  LANGUAGE_ENGLISH = 0,
  LANGUAGE_FRENCH = 1,
  LANGUAGE_FRENCHCANADIAN = 2,
  LANGUAGE_GERMAN = 3,
  LANGUAGE_AUSTRIAN = 4,
  LANGUAGE_ITALIAN = 5,
  LANGUAGE_SPANISH = 6,
  LANGUAGE_BRITISH = 7,
  LANGUAGE_RUSSIAN = 8,
  LANGUAGE_POLISH = 9,
  LANGUAGE_KOREAN = 10,
  LANGUAGE_JAPANESE = 11,
  LANGUAGE_CZECH = 12,
  LANGUAGE_FULLJAPANESE = 13,
  LANGUAGE_PORTUGUESE = 14,
  LANGUAGE_MEXICANSPANISH = 15,
  MAX_LANGUAGES = 16,
};

enum tagDOMNodeType
{
  NODE_INVALID = 0,
  NODE_ELEMENT = 1,
  NODE_ATTRIBUTE = 2,
  NODE_TEXT = 3,
  NODE_CDATA_SECTION = 4,
  NODE_ENTITY_REFERENCE = 5,
  NODE_ENTITY = 6,
  NODE_PROCESSING_INSTRUCTION = 7,
  NODE_COMMENT = 8,
  NODE_DOCUMENT = 9,
  NODE_DOCUMENT_TYPE = 10,
  NODE_DOCUMENT_FRAGMENT = 11,
  NODE_NOTATION = 12,
};

enum bdPriority
{
  BD_PRIORITY_VERY_LOW = 0,
  BD_PRIORITY_LOW = 1,
  BD_PRIORITY_NORMAL = 2,
  BD_PRIORITY_HIGH = 3,
  BD_PRIORITY_VERY_HIGH = 4,
  BD_NUM_PRIORITIES = 5,
};

enum FxUpdateEffectType
{
  UPDATE_EFFECT_INDEPENDENT = 0,
  UPDATE_EFFECT_BOLTED = 1,
  UPDATE_EFFECT_NONSPRITE = 2,
  UPDATE_EFFECT_PORTALLED = 3,
  UPDATE_EFFECT_INVALID = 4,
};

struct D3D11_BUFFEREX_SRV
{
  /* 0x0000 */ unsigned int FirstElement;
  /* 0x0004 */ unsigned int NumElements;
  /* 0x0008 */ unsigned int Flags;
}; /* size: 0x000c */

enum GfxLightType
{
  GFX_LIGHT_TYPE_NONE = 0,
  GFX_LIGHT_TYPE_DIR = 1,
  GFX_LIGHT_TYPE_SPOT = 2,
  GFX_LIGHT_TYPE_SPOT_SQUARE = 3,
  GFX_LIGHT_TYPE_SPOT_ROUND = 4,
  GFX_LIGHT_TYPE_OMNI = 5,
  GFX_LIGHT_TYPE_COUNT = 6,
  GFX_LIGHT_TYPE_DIR_SHADOWMAP = 6,
  GFX_LIGHT_TYPE_SPOT_SHADOWMAP = 7,
  GFX_LIGHT_TYPE_SPOT_SQUARE_SHADOWMAP = 8,
  GFX_LIGHT_TYPE_SPOT_ROUND_SHADOWMAP = 9,
  GFX_LIGHT_TYPE_OMNI_SHADOWMAP = 10,
  GFX_LIGHT_TYPE_COUNT_WITH_SHADOWMAP_VERSIONS = 11,
};

typedef enum _tagPSUACTION
{
  PSU_DEFAULT = 1,
  PSU_SECURITY_URL_ONLY = 2,
} tagPSUACTION, *PtagPSUACTION;

struct sockaddr
{
  /* 0x0000 */ unsigned short sa_family;
  /* 0x0002 */ char sa_data[14];
}; /* size: 0x0010 */

typedef enum _TAG_UNNAMED_74
{
  BITS_PER_WORD = 32,
  WORD_COUNT = 2,
} TAG_UNNAMED_74, *PTAG_UNNAMED_74;

enum weaponAttachModel_t
{
  WEAP_ATTACH_MODEL_OPTIC_1 = 0,
  WEAP_ATTACH_MODEL_OPTIC_2 = 1,
  WEAP_ATTACH_MODEL_IRONSIGHTS = 2,
  WEAP_ATTACH_MODEL_MUZZLE = 3,
  WEAP_ATTACH_MODEL_UNDERBARREL = 4,
  WEAP_ATTACH_MODEL_MISC = 5,
  WEAP_ATTACH_MODEL_CLIP = 6,
  WEAP_ATTACH_MODEL_OPTIC_1_ADS = 7,
  NUM_WEAP_ATTACHMODELS = 8,
};

enum GfxExtraCamParms::eExtraCamRenderMode
{
  EXTRA_CAM_NONE = 0,
  EXTRA_CAM_SINGLE = 1,
  EXTRA_CAM_MULTI = 2,
};

typedef enum _TAG_UNNAMED_75
{
  ENUM_NOP = 0,
  ENUM_program = 1,
  ENUM_assignment = 2,
  ENUM_unknown_variable = 3,
  ENUM_duplicate_variable = 4,
  ENUM_local_variable = 5,
  ENUM_local_variable_frozen = 6,
  ENUM_duplicate_expression = 7,
  ENUM_primitive_expression = 8,
  ENUM_integer = 9,
  ENUM_float = 10,
  ENUM_minus_integer = 11,
  ENUM_minus_float = 12,
  ENUM_string = 13,
  ENUM_istring = 14,
  ENUM_array_variable = 15,
  ENUM_unknown_field = 16,
  ENUM_field_variable = 17,
  ENUM_field_variable_frozen = 18,
  ENUM_variable = 19,
  ENUM_function = 20,
  ENUM_call_expression = 21,
  ENUM_local_function = 22,
  ENUM_far_function = 23,
  ENUM_function_pointer = 24,
  ENUM_call = 25,
  ENUM_method = 26,
  ENUM_call_expression_statement = 27,
  ENUM_script_call = 28,
  ENUM_return = 29,
  ENUM_return2 = 30,
  ENUM_wait = 31,
  ENUM_script_thread_call = 32,
  ENUM_script_child_thread_call = 33,
  ENUM_script_builtin_call_pointer = 34,
  ENUM_undefined = 35,
  ENUM_self = 36,
  ENUM_self_frozen = 37,
  ENUM_level = 38,
  ENUM_game = 39,
  ENUM_anim = 40,
  ENUM_if = 41,
  ENUM_if_else = 42,
  ENUM_while = 43,
  ENUM_for = 44,
  ENUM_inc = 45,
  ENUM_dec = 46,
  ENUM_binary_equals = 47,
  ENUM_statement_list = 48,
  ENUM_developer_statement_list = 49,
  ENUM_expression_list = 50,
  ENUM_bool_or = 51,
  ENUM_bool_and = 52,
  ENUM_binary = 53,
  ENUM_bool_not = 54,
  ENUM_bool_complement = 55,
  ENUM_size_field = 56,
  ENUM_self_field = 57,
  ENUM_precachetree = 58,
  ENUM_waittill = 59,
  ENUM_waittillmatch = 60,
  ENUM_waittillFrameEnd = 61,
  ENUM_notify = 62,
  ENUM_endon = 63,
  ENUM_switch = 64,
  ENUM_case = 65,
  ENUM_default = 66,
  ENUM_break = 67,
  ENUM_continue = 68,
  ENUM_expression = 69,
  ENUM_empty_array = 70,
  ENUM_animation = 71,
  ENUM_animation_animtree = 72,
  ENUM_thread = 73,
  ENUM_begin_developer_thread = 74,
  ENUM_end_developer_thread = 75,
  ENUM_usingtree = 76,
  ENUM_false = 77,
  ENUM_true = 78,
  ENUM_animtree = 79,
  ENUM_breakon = 80,
  ENUM_breakpoint = 81,
  ENUM_prof_begin = 82,
  ENUM_prof_end = 83,
  ENUM_vector = 84,
  ENUM_object = 85,
  ENUM_thread_object = 86,
  ENUM_local = 87,
  ENUM_statement = 88,
  ENUM_bad_expression = 89,
  ENUM_bad_statement = 90,
  ENUM_include = 91,
  ENUM_argument = 92,
  ENUM_thisthread = 93,
  ENUM_construct_array = 94,
  ENUM_define_statement = 95,
} TAG_UNNAMED_75, *PTAG_UNNAMED_75;

enum tagExtentMode
{
  DVEXTENT_CONTENT = 0,
  DVEXTENT_INTEGRAL = 1,
};

enum StanceState
{
  CL_STANCE_STAND = 0,
  CL_STANCE_CROUCH = 1,
  CL_STANCE_PRONE = 2,
  CL_STANCE_DIVE_TO_PRONE = 3,
};

enum tagXMLEMEM_TYPE
{
  XMLELEMTYPE_ELEMENT = 0,
  XMLELEMTYPE_TEXT = 1,
  XMLELEMTYPE_COMMENT = 2,
  XMLELEMTYPE_DOCUMENT = 3,
  XMLELEMTYPE_DTD = 4,
  XMLELEMTYPE_PI = 5,
  XMLELEMTYPE_OTHER = 6,
};

typedef enum _NVVIOCOLORSPACE
{
  NVVIOCOLORSPACE_UNKNOWN = 0,
  NVVIOCOLORSPACE_YCBCR = 1,
  NVVIOCOLORSPACE_YCBCRA = 2,
  NVVIOCOLORSPACE_YCBCRD = 3,
  NVVIOCOLORSPACE_GBR = 4,
  NVVIOCOLORSPACE_GBRA = 5,
  NVVIOCOLORSPACE_GBRD = 6,
} NVVIOCOLORSPACE, *PNVVIOCOLORSPACE;

enum AISpecies
{
  AI_SPECIES_DOG = 0,
  AI_SPECIES_BIGDOG = 1,
  AI_SPECIES_ZOMBIE = 2,
  AI_SPECIES_ZOMBIE_DOG = 3,
  MAX_AI_SPECIES = 4,
  AI_SPECIES_ALL = 4,
};

struct D3D11_MAPPED_SUBRESOURCE
{
  /* 0x0000 */ void* pData;
  /* 0x0004 */ unsigned int RowPitch;
  /* 0x0008 */ unsigned int DepthPitch;
}; /* size: 0x000c */

enum clientMigState_t
{
  CMSTATE_INACTIVE = 0,
  CMSTATE_OLDHOSTLEAVING = 1,
  CMSTATE_LIMBO = 2,
  CMSTATE_NEWHOSTCONNECT = 3,
  CMSTATE_COUNT = 4,
};

typedef enum _TAG_UNNAMED_76
{
  TS_IDLE = 0,
  TS_FIRING_HEAD = 1,
  TS_FIRING_FEET = 2,
} TAG_UNNAMED_76, *PTAG_UNNAMED_76;

typedef enum _tagQUERYOPTION
{
  QUERY_EXPIRATION_DATE = 1,
  QUERY_TIME_OF_LAST_CHANGE = 2,
  QUERY_CONTENT_ENCODING = 3,
  QUERY_CONTENT_TYPE = 4,
  QUERY_REFRESH = 5,
  QUERY_RECOMBINE = 6,
  QUERY_CAN_NAVIGATE = 7,
  QUERY_USES_NETWORK = 8,
  QUERY_IS_CACHED = 9,
  QUERY_IS_INSTALLEDENTRY = 10,
  QUERY_IS_CACHED_OR_MAPPED = 11,
  QUERY_USES_CACHE = 12,
  QUERY_IS_SECURE = 13,
  QUERY_IS_SAFE = 14,
  QUERY_USES_HISTORYFOLDER = 15,
} tagQUERYOPTION, *PtagQUERYOPTION;

typedef enum _TAG_UNNAMED_77
{
  BITS_PER_WORD = 32,
  WORD_COUNT = 768,
} TAG_UNNAMED_77, *PTAG_UNNAMED_77;

enum D3D11_DSV_DIMENSION
{
  D3D11_DSV_DIMENSION_UNKNOWN = 0,
  D3D11_DSV_DIMENSION_TEXTURE1D = 1,
  D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 2,
  D3D11_DSV_DIMENSION_TEXTURE2D = 3,
  D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 4,
  D3D11_DSV_DIMENSION_TEXTURE2DMS = 5,
  D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 6,
};

enum bdConnectionStore::bdConnectionStoreShutdownType
{
  BD_CONNECTION_STORE_SHUTDOWN_ELEGANT = 0,
  BD_CONNECTION_STORE_SHUTDOWN_IMMEDIATE = 1,
};

typedef enum _TAG_UNNAMED_78
{
  VERTS_PER_SPRITE_ELEM = 4,
  INDICES_PER_SPRITE_ELEM = 6,
} TAG_UNNAMED_78, *PTAG_UNNAMED_78;

enum ViewLockTypes
{
  PLAYERVIEWLOCK_NONE = 0,
  PLAYERVIEWLOCK_FULL = 1,
  PLAYERVIEWLOCK_WEAPONJITTER = 2,
  PLAYERVIEWLOCKCOUNT = 3,
};

struct RopeUpdateCmdData
{
  /* 0x0000 */ union vec3_t viewOrg;
  /* 0x000c */ int ropeCount;
  /* 0x0010 */ union vec4_t screenMtx[4];
  /* 0x0050 */ struct rope_t* ropes;
  /* 0x0054 */ long __PADDING__[3];
}; /* size: 0x0060 */

struct XAnimClientNotifyAdder
{
}; /* size: 0x0001 */

enum VehicleAnimState
{
  VEHICLEANIMSTATE_IDLE = 0,
  VEHICLEANIMSTATE_ENTRY = 1,
  VEHICLEANIMSTATE_CHANGEPOS = 2,
  VEHICLEANIMSTATE_EXIT = 3,
  VEHICLEANIMSTATECOUNT = 4,
};

struct XAnimNotifyInfo
{
  /* 0x0000 */ unsigned short name;
  /* 0x0002 */ char Padding_45[2];
  /* 0x0004 */ float time;
}; /* size: 0x0008 */

enum D3D_FEATURE_LEVEL
{
  D3D_FEATURE_LEVEL_9_1 = 0xffff9100,
  D3D_FEATURE_LEVEL_9_2 = 0xffff9200,
  D3D_FEATURE_LEVEL_9_3 = 0xffff9300,
  D3D_FEATURE_LEVEL_10_0 = 0xffffa000,
  D3D_FEATURE_LEVEL_10_1 = 0xffffa100,
  D3D_FEATURE_LEVEL_11_0 = 0xffffb000,
};

typedef enum _TAG_UNNAMED_79
{
  CONTROL_ANGLES_BACK_LOW = 0,
  CONTROL_ANGLES_BACK_MID = 1,
  CONTROL_ANGLES_BACK_UP = 2,
  CONTROL_ANGLES_NECK = 3,
  CONTROL_ANGLES_HEAD = 4,
  CONTROL_ANGLES_PELVIS = 5,
  CONTROL_ANGLES_COUNT = 6,
} TAG_UNNAMED_79, *PTAG_UNNAMED_79;

typedef enum _NVVIOLINKID
{
  NVVIOLINKID_UNKNOWN = 0,
  NVVIOLINKID_A = 1,
  NVVIOLINKID_B = 2,
  NVVIOLINKID_C = 3,
  NVVIOLINKID_D = 4,
} NVVIOLINKID, *PNVVIOLINKID;

typedef enum _TAG_UNNAMED_80
{
  BUILTIN_ANY = 0,
  BUILTIN_DEVELOPER_ONLY = 1,
} TAG_UNNAMED_80, *PTAG_UNNAMED_80;

enum D3D11_RTV_DIMENSION
{
  D3D11_RTV_DIMENSION_UNKNOWN = 0,
  D3D11_RTV_DIMENSION_BUFFER = 1,
  D3D11_RTV_DIMENSION_TEXTURE1D = 2,
  D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 3,
  D3D11_RTV_DIMENSION_TEXTURE2D = 4,
  D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 5,
  D3D11_RTV_DIMENSION_TEXTURE2DMS = 6,
  D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
  D3D11_RTV_DIMENSION_TEXTURE3D = 8,
};

struct VehicleGearData
{
  /* 0x0000 */ float minRPM;
  /* 0x0004 */ float maxRPM;
  /* 0x0008 */ float ratio;
}; /* size: 0x000c */

enum serverState_t
{
  SS_DEAD = 0,
  SS_LOADING = 1,
  SS_GAME = 2,
};

typedef enum _TAG_UNNAMED_81
{
  MARK_MODEL_TYPE_WORLD_BRUSH = 0,
  MARK_MODEL_TYPE_WORLD_MODEL = 64,
  MARK_MODEL_TYPE_ENT_BRUSH = 128,
  MARK_MODEL_TYPE_ENT_MODEL = 192,
  MARK_MODEL_TYPE_MASK = 192,
  MARK_MODEL_SURF_MASK = 63,
  MARK_MODEL_MASK_ENTMDL_INDEX = 31,
  MARK_MODEL_MASK_ENTMDL_VIEWMDL = 32,
} TAG_UNNAMED_81, *PTAG_UNNAMED_81;

typedef enum _NV_DISPLAYCONFIG_SPANNING_ORIENTATION
{
  NV_DISPLAYCONFIG_SPAN_NONE = 0,
  NV_DISPLAYCONFIG_SPAN_HORIZONTAL = 1,
  NV_DISPLAYCONFIG_SPAN_VERTICAL = 2,
} NV_DISPLAYCONFIG_SPANNING_ORIENTATION, *PNV_DISPLAYCONFIG_SPANNING_ORIENTATION;

typedef enum _TAG_UNNAMED_82
{
  SERVER_VARIABLELIST_PARENT_SIZE = 24576,
  SERVER_VARIABLELIST_CHILD_SIZE = 0x10000,
  SERVER_VARIABLELIST_SIZE = 0x16000,
  SERVER_VARIABLELIST_PARENT_DEV_SIZE = 21376,
  SERVER_VARIABLELIST_CHILD_DEV_SIZE = 0xfffff380,
} TAG_UNNAMED_82, *PTAG_UNNAMED_82;

enum MissileFlightMode
{
  MISSILEFLIGHTMODE_TOP = 0,
  MISSILEFLIGHTMODE_DIRECT = 1,
};

enum VP_FindCustomPath::__l4::pathNodeTransientFlags
{
  FLAG_OPEN = 1,
  FLAG_CLOSED = 2,
};

enum D3D11_UAV_DIMENSION
{
  D3D11_UAV_DIMENSION_UNKNOWN = 0,
  D3D11_UAV_DIMENSION_BUFFER = 1,
  D3D11_UAV_DIMENSION_TEXTURE1D = 2,
  D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 3,
  D3D11_UAV_DIMENSION_TEXTURE2D = 4,
  D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 5,
  D3D11_UAV_DIMENSION_TEXTURE3D = 8,
};

typedef enum _TAG_UNNAMED_83
{
  THREAD_COUNT = 0,
  THREAD_INDICES = 1,
} TAG_UNNAMED_83, *PTAG_UNNAMED_83;

enum D3D10_COUNTER
{
  D3D10_COUNTER_GPU_IDLE = 0,
  D3D10_COUNTER_VERTEX_PROCESSING = 1,
  D3D10_COUNTER_GEOMETRY_PROCESSING = 2,
  D3D10_COUNTER_PIXEL_PROCESSING = 3,
  D3D10_COUNTER_OTHER_GPU_PROCESSING = 4,
  D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION = 5,
  D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION = 6,
  D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION = 7,
  D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION = 8,
  D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION = 9,
  D3D10_COUNTER_VS_MEMORY_LIMITED = 10,
  D3D10_COUNTER_VS_COMPUTATION_LIMITED = 11,
  D3D10_COUNTER_GS_MEMORY_LIMITED = 12,
  D3D10_COUNTER_GS_COMPUTATION_LIMITED = 13,
  D3D10_COUNTER_PS_MEMORY_LIMITED = 14,
  D3D10_COUNTER_PS_COMPUTATION_LIMITED = 15,
  D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE = 16,
  D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE = 17,
  D3D10_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000,
};

enum D3D11_BIND_FLAG
{
  D3D11_BIND_VERTEX_BUFFER = 1,
  D3D11_BIND_INDEX_BUFFER = 2,
  D3D11_BIND_CONSTANT_BUFFER = 4,
  D3D11_BIND_SHADER_RESOURCE = 8,
  D3D11_BIND_STREAM_OUTPUT = 16,
  D3D11_BIND_RENDER_TARGET = 32,
  D3D11_BIND_DEPTH_STENCIL = 64,
  D3D11_BIND_UNORDERED_ACCESS = 128,
};

enum dediConnectionState_e
{
  DEDI_STATUS_ERROR = 0,
  DEDI_STATUS_NOT_CONNECTED = 1,
  DEDI_STATUS_AUTHORIZING = 2,
  DEDI_STATUS_CONNECTING = 3,
  DEDI_STATUS_CONNECTED = 4,
  DEDI_STATUS_IN_BACKOFF = 5,
};

struct ContentPackMetaData
{
  /* 0x0000 */ int contentPack;
  /* 0x0004 */ char filename[256];
  /* 0x0104 */ char drivename[16];
  /* 0x0114 */ unsigned int licenseBits;
  /* 0x0118 */ BOOL mounted;
  /* 0x0119 */ BOOL isAuthorizedToUse;
  /* 0x011a */ BOOL controllers[1];
  /* 0x011b */ char __PADDING__[1];
}; /* size: 0x011c */

typedef enum _TAG_UNNAMED_84
{
  CLIENT_VARIABLELIST_PARENT_SIZE = 16384,
  CLIENT_VARIABLELIST_CHILD_SIZE = 0x10000,
  CLIENT_VARIABLELIST_PARENT_DEV_SIZE = 13184,
  CLIENT_VARIABLELIST_CHILD_DEV_SIZE = 0xfffff380,
  CLIENT_VARIABLELIST_SIZE = 0x14000,
} TAG_UNNAMED_84, *PTAG_UNNAMED_84;

enum D3D11_USAGE
{
  D3D11_USAGE_DEFAULT = 0,
  D3D11_USAGE_IMMUTABLE = 1,
  D3D11_USAGE_DYNAMIC = 2,
  D3D11_USAGE_STAGING = 3,
};

enum tagGLOBALOPT_EH_VALUES
{
  COMGLB_EXCEPTION_HANDLE = 0,
  COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1,
  COMGLB_EXCEPTION_DONOT_HANDLE = 1,
  COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2,
};

struct ValueEntry
{
  /* 0x0000 */ unsigned int valueName;
  /* 0x0004 */ unsigned int theValue;
}; /* size: 0x0008 */

typedef enum _TAG_UNNAMED_85
{
  VAR_NAME_BITS = 8,
  VAR_NAME_LOW_MASK = 0xffffff,
  VAR_NAME_HIGH_MASK = -256,
  VAR_MIN_INT = -8388608,
  VAR_MAX_INT = 0x7fffff,
  ENTITY_NUM_BITS = 14,
} TAG_UNNAMED_85, *PTAG_UNNAMED_85;

typedef enum _NVVIOSYNCSOURCE
{
  NVVIOSYNCSOURCE_SDISYNC = 0,
  NVVIOSYNCSOURCE_COMPSYNC = 1,
} NVVIOSYNCSOURCE, *PNVVIOSYNCSOURCE;

enum XAUDIO2_FILTER_TYPE
{
  LowPassFilter = 0,
  BandPassFilter = 1,
  HighPassFilter = 2,
  NotchFilter = 3,
};

enum D3D10_COUNTER_TYPE
{
  D3D10_COUNTER_TYPE_FLOAT32 = 0,
  D3D10_COUNTER_TYPE_UINT16 = 1,
  D3D10_COUNTER_TYPE_UINT32 = 2,
  D3D10_COUNTER_TYPE_UINT64 = 3,
};

enum tagBANDSITECID
{
  BSID_BANDADDED = 0,
  BSID_BANDREMOVED = 1,
};

enum D3D11_COUNTER_TYPE
{
  D3D11_COUNTER_TYPE_FLOAT32 = 0,
  D3D11_COUNTER_TYPE_UINT16 = 1,
  D3D11_COUNTER_TYPE_UINT32 = 2,
  D3D11_COUNTER_TYPE_UINT64 = 3,
};

enum NV_MOSAIC_TOPO_TYPE
{
  NV_MOSAIC_TOPO_TYPE_ALL = 0,
  NV_MOSAIC_TOPO_TYPE_BASIC = 1,
  NV_MOSAIC_TOPO_TYPE_PASSIVE_STEREO = 2,
  NV_MOSAIC_TOPO_TYPE_SCALED_CLONE = 3,
  NV_MOSAIC_TOPO_TYPE_PASSIVE_STEREO_SCALED_CLONE = 4,
  NV_MOSAIC_TOPO_TYPE_MAX = 5,
};

enum ReplacesCorHdrNumericDefines
{
  COMIMAGE_FLAGS_ILONLY = 1,
  COMIMAGE_FLAGS_32BITREQUIRED = 2,
  COMIMAGE_FLAGS_IL_LIBRARY = 4,
  COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
  COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
  COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
  COR_VERSION_MAJOR_V2 = 2,
  COR_VERSION_MAJOR = 2,
  COR_VERSION_MINOR = 0,
  COR_DELETED_NAME_LENGTH = 8,
  COR_VTABLEGAP_NAME_LENGTH = 8,
  NATIVE_TYPE_MAX_CB = 1,
  COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
  IMAGE_COR_MIH_METHODRVA = 1,
  IMAGE_COR_MIH_EHRVA = 2,
  IMAGE_COR_MIH_BASICBLOCK = 8,
  COR_VTABLE_32BIT = 1,
  COR_VTABLE_64BIT = 2,
  COR_VTABLE_FROM_UNMANAGED = 4,
  COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
  COR_VTABLE_CALL_MOST_DERIVED = 16,
  IMAGE_COR_EATJ_THUNK_SIZE = 32,
  MAX_CLASS_NAME = 1024,
  MAX_PACKAGE_NAME = 1024,
};

typedef enum _TAG_UNNAMED_86
{
  UT_STATIC = 0,
  UT_VSTATIC = 1,
  UT_MALLOC = 2,
  UT_HUNK = 3,
  UT_VOID = 4,
  UT_IMAGE = 5,
  UT_TEMP = 6,
  UT_PHYSICAL = 7,
  UT_USERHUNK = 8,
  UT_COUNT = 9,
} TAG_UNNAMED_86, *PTAG_UNNAMED_86;

typedef enum _TAG_UNNAMED_87
{
  BOMB_TIMER_PRIMARY = 0,
  BOMB_TIMER_SECONDARY = 1,
  BOMB_TIMER_COUNT = 2,
} TAG_UNNAMED_87, *PTAG_UNNAMED_87;

struct ScriptCondition
{
  /* 0x0000 */ BOOL fireOnTrue;
  /* 0x0001 */ char Padding_46[3];
  /* 0x0004 */ int constructID;
  /* 0x0008 */ int blockID;
  /* 0x000c */ struct ScriptCondition* next;
}; /* size: 0x0010 */

struct plane_lt
{
  /* 0x0000 */ class phys_vec3 n;
  /* 0x0010 */ float d;
  /* 0x0014 */ long __PADDING__[3];
}; /* size: 0x0020 */

enum snd_asset_format
{
  SND_ASSET_FORMAT_PCMS16 = 0,
  SND_ASSET_FORMAT_PCMS24 = 1,
  SND_ASSET_FORMAT_PCMS32 = 2,
  SND_ASSET_FORMAT_IEEE = 3,
  SND_ASSET_FORMAT_XMA4 = 4,
  SND_ASSET_FORMAT_MP3 = 5,
  SND_ASSET_FORMAT_MSADPCM = 6,
  SND_ASSET_FORMAT_WMA = 7,
  SND_ASSET_FORMAT_FLAC = 8,
  SND_ASSET_FORMAT_WIIUADPCM = 9,
  SND_ASSET_FORMAT_MPC = 10,
  SND_ASSET_FORMAT_COUNT = 11,
};

enum entity_event_t
{
  EV_NONE = 0,
  EV_FOLIAGE_SOUND = 1,
  EV_STOP_WEAPON_SOUND = 2,
  EV_STOP_SOUND_ALIAS = 3,
  EV_SOUND_ALIAS = 4,
  EV_SOUND_ALIAS_NOTIFY = 5,
  EV_SOUND_BATTLECHAT_ALIAS = 6,
  EV_STOPSOUNDS = 7,
  EV_STANCE_FORCE_STAND = 8,
  EV_STANCE_FORCE_CROUCH = 9,
  EV_STANCE_FORCE_PRONE = 10,
  EV_ITEM_PICKUP = 11,
  EV_AMMO_PICKUP = 12,
  EV_NOAMMO = 13,
  EV_NOAMMO_LEFT = 14,
  EV_EMPTYCLIP = 15,
  EV_EMPTY_OFFHAND = 16,
  EV_RESET_ADS = 17,
  EV_RELOAD = 18,
  EV_RELOAD_FROM_EMPTY = 19,
  EV_RELOAD_START = 20,
  EV_RELOAD_END = 21,
  EV_RELOAD_START_NOTIFY = 22,
  EV_RELOAD_ADDAMMO = 23,
  EV_RAISE_WEAPON = 24,
  EV_FIRST_RAISE_WEAPON = 25,
  EV_RAISE_PICKUP_WEAPON = 26,
  EV_PUTAWAY_WEAPON = 27,
  EV_WEAPON_ALT = 28,
  EV_WEAPON_SWITCH_STARTED = 29,
  EV_PULLBACK_WEAPON = 30,
  EV_FIRE_WEAPON_SCRIPTED = 31,
  EV_FIRE_WEAPON = 32,
  EV_FIRE_WEAPON_LASTSHOT = 33,
  EV_FIRE_WEAPON_LEFT = 34,
  EV_FIRE_WEAPON_LASTSHOT_LEFT = 35,
  EV_FIRE_RICOCHET = 36,
  EV_RECHAMBER_WEAPON = 37,
  EV_EJECT_BRASS = 38,
  EV_MELEE_SWIPE = 39,
  EV_FIRE_MELEE = 40,
  EV_WEAPON_DEPLOYING = 41,
  EV_WEAPON_FINISH_DEPLOYING = 42,
  EV_WEAPON_BREAKING_DOWN = 43,
  EV_WEAPON_FINISH_BREAKING_DOWN = 44,
  EV_INC_CHARGESHOT_LEVEL = 45,
  EV_CHARGESHOT_DISCHARGEWEAPON = 46,
  EV_PREP_OFFHAND = 47,
  EV_USE_OFFHAND = 48,
  EV_SWITCH_OFFHAND = 49,
  EV_PREP_RIOTSHIELD = 50,
  EV_DEPLOY_RIOTSHIELD = 51,
  EV_LOWER_RIOTSHIELD = 52,
  EV_MELEE_HIT = 53,
  EV_MELEE_MISS = 54,
  EV_MELEE_BLOOD = 55,
  EV_FIRE_WEAPON_MOUNTED_TURRET = 56,
  EV_FIRE_WEAPON_MOUNTED_TURRETA = 57,
  EV_FIRE_BARREL_1 = 58,
  EV_FIRE_BARREL_2 = 59,
  EV_FIRE_BARREL_3 = 60,
  EV_FIRE_BARREL_4 = 61,
  EV_BULLET_HIT = 62,
  EV_BULLET_HIT_SHIELD = 63,
  EV_BULLET_HIT_CLIENT_SHIELD = 64,
  EV_EXPLOSIVE_IMPACT_ON_SHIELD = 65,
  EV_EXPLOSIVE_SPLASH_ON_SHIELD = 66,
  EV_BULLET_HIT_CLIENT_SMALL = 67,
  EV_BULLET_HIT_CLIENT_LARGE = 68,
  EV_DESTRUCTIBLE_BULLET_HIT = 69,
  EV_DESTRUCTIBLE_EXPLOSION_HIT = 70,
  EV_GRENADE_BOUNCE = 71,
  EV_GRENADE_EXPLODE = 72,
  EV_ROCKET_EXPLODE = 73,
  EV_ROCKET_EXPLODE_NOMARKS = 74,
  EV_FLASHBANG_EXPLODE = 75,
  EV_CUSTOM_EXPLODE = 76,
  EV_CUSTOM_EXPLODE_NOMARKS = 77,
  EV_SENSOR_GRENADE_EXPLODE = 78,
  EV_CHANGE_TO_DUD = 79,
  EV_DUD_EXPLODE = 80,
  EV_DUD_IMPACT = 81,
  EV_FIRE_EXPLODE = 82,
  EV_TIMED_FX = 83,
  EV_MOLOTOV_FLOAT = 84,
  EV_FAKE_FIRE = 85,
  EV_PLAY_FX = 86,
  EV_PLAY_FX_ON_TAG = 87,
  EV_PHYS_EXPLOSION_SPHERE = 88,
  EV_PHYS_EXPLOSION_CYLINDER = 89,
  EV_PHYS_EXPLOSION_JOLT = 90,
  EV_PHYS_JET_THRUST = 91,
  EV_PHYS_LAUNCH = 92,
  EV_CREATE_DYNENT = 93,
  EV_CREATE_ROPE = 94,
  EV_BLOOD_IMPACTS = 95,
  EV_DETACH_ENTITY = 96,
  EV_DELETE_ROPE = 97,
  EV_ROPE_COLLIDE = 98,
  EV_ROPE_SETFLAG = 99,
  EV_ROPE_SETPARAM = 100,
  EV_ROPE_ADDANCHOR = 101,
  EV_ROPE_REMOVEANCHOR = 102,
  EV_ROPE_MOVEANCHOR = 103,
  EV_SETWETNESS = 104,
  EV_EARTHQUAKE = 105,
  EV_GRENADE_DROP = 106,
  EV_GRENADE_SUICIDE = 107,
  EV_DETONATE = 108,
  EV_NIGHTVISION_WEAR = 109,
  EV_NIGHTVISION_REMOVE = 110,
  EV_MISSILE_REMOTE_BOOST = 111,
  EV_PLAY_RUMBLE_ON_ENT = 112,
  EV_PLAY_RUMBLE_ON_POS = 113,
  EV_PLAY_RUMBLELOOP_ON_ENT = 114,
  EV_PLAY_RUMBLELOOP_ON_POS = 115,
  EV_STOP_RUMBLE = 116,
  EV_STOP_ALL_RUMBLES = 117,
  EV_OBITUARY = 118,
  EV_REVIVE_OBITUARY = 119,
  EV_DIRECTIONAL_HIT_INDICATOR = 120,
  EV_ANIMATE_UI = 121,
  EV_KILLSTREAK_DAMAGE = 122,
  EV_NO_FRAG_GRENADE_HINT = 123,
  EV_NO_SPECIAL_GRENADE_HINT = 124,
  EV_TARGET_TOO_CLOSE_HINT = 125,
  EV_TARGET_NOT_ENOUGH_CLEARANCE = 126,
  EV_LOCKON_REQUIRED_HINT = 127,
  EV_FOOTSTEP_SPRINT = 128,
  EV_FOOTSTEP_RUN = 129,
  EV_FOOTSTEP_WALK = 130,
  EV_FOOTSTEP_CROUCHRUN = 131,
  EV_FOOTSTEP_CROUCHWALK = 132,
  EV_FOOTSTEP_PRONE = 133,
  EV_LADDER_HAND_GRAB = 134,
  EV_MANTLE = 135,
  EV_JUMP = 136,
  EV_LANDING_FIRST = 137,
  EV_LANDING_LAST = 168,
  EV_LANDING_PAIN_FIRST = 169,
  EV_LANDING_PAIN_LAST = 200,
  EV_FIRE_VEHICLE_TURRET = 201,
  EV_FIRE_GUNNER_1 = 202,
  EV_FIRE_GUNNER_2 = 203,
  EV_FIRE_GUNNER_3 = 204,
  EV_FIRE_GUNNER_4 = 205,
  EV_FIRE_GUNNER_1A = 206,
  EV_FIRE_GUNNER_2A = 207,
  EV_FIRE_GUNNER_3A = 208,
  EV_FIRE_GUNNER_4A = 209,
  EV_START_CAMERA_TWEEN = 210,
  EV_DESTRUCTIBLE_DISABLE_PIECES = 211,
  EV_FOOTPRINT = 212,
  EV_CANNOTPLANT = 213,
  EV_CANT_EQUIP_PRONE = 214,
  EV_DTP_LAUNCH = 215,
  EV_DTP_LAND = 216,
  EV_SLIDE_START = 217,
  EV_SLIDE_STOP = 218,
  EV_SCOPE_ZOOM = 219,
  EV_JAM_WEAPON = 220,
  EV_STACKFIRE = 221,
  EV_BOLT_IMPACT = 222,
  EV_BOLT_IMPALE = 223,
  EV_PLAY_WEAPON_DEATH_EFFECTS = 224,
  EV_PLAY_WEAPON_DAMAGE_EFFECTS = 225,
  EV_FACE_EVENT = 226,
  EV_SETLOCALWIND = 227,
  EV_FLOAT_LONGER = 228,
  EV_FORCE_BUOYANCY = 229,
  EV_DISABLE_DEPTH_BUOYANCY_ADJUSTMENTS = 230,
  EV_SCALE_BUOYANCY = 231,
  EV_ALLOWPITCH = 232,
  EV_GIB = 233,
  EV_STANCE_INVALID = 234,
  EV_ENTER_VEHICLE = 235,
  EV_EXIT_VEHICLE = 236,
  EV_IMMEDIATE_RAGDOLL = 237,
  EV_ENT_SPAWNED_SENTINEL = 238,
  EV_PROJECTILE_PASS_THROUGH = 239,
  EV_MAX_EVENTS = 240,
};

enum D2D1_BITMAP_INTERPOLATION_MODE
{
  D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0,
  D2D1_BITMAP_INTERPOLATION_MODE_LINEAR = 1,
  D2D1_BITMAP_INTERPOLATION_MODE_FORCE_DWORD = -1,
};

enum PKA_FLAGS
{
  PKA_SET = 0,
  PKA_APPEND = 1,
  PKA_DELETE = 2,
};

typedef enum _TAG_UNNAMED_88
{
  FS_LOOK_IN_MAIN = 1,
  FS_LOOK_IN_DEV = 2,
  FS_LOOK_IN_TEMP = 4,
  FS_LOOK_IN_RAW = 8,
  FS_LOOK_IN_RAWSHARED = 16,
  FS_LOOK_IN_DEVRAW = 32,
  FS_LOOK_IN_ALL = 63,
} TAG_UNNAMED_88, *PTAG_UNNAMED_88;

class bdHashingClass
{
}; /* size: 0x0001 */

class bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass>
{
  /* 0x0000 */ unsigned int m_size;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ float m_loadFactor;
  /* 0x000c */ unsigned int m_threshold;
  /* 0x0010 */ class bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass>::Node** m_map;
  /* 0x0014 */ class bdHashingClass m_hashClass;
}; /* size: 0x0018 */

class bdSecurityKeyMap
{
  /* 0x0000 */ class bdSecurityKeyMapListener* m_listener;
  /* 0x0004 */ class bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass> m_map;
}; /* size: 0x001c */

enum D3DX10_IMAGE_FILE_FORMAT
{
};

struct GfxSaveScreenParam
{
  /* 0x0000 */ float s0;
  /* 0x0004 */ float t0;
  /* 0x0008 */ float ds;
  /* 0x000c */ float dt;
  /* 0x0010 */ enum LocalClientNum_t screenTimerId;
  /* 0x0014 */ unsigned char mode;
  /* 0x0015 */ char __PADDING__[3];
}; /* size: 0x0018 */

enum ConstraintType
{
  CONSTRAINT_NONE = 0,
  CONSTRAINT_POINT = 1,
  CONSTRAINT_DISTANCE = 2,
  CONSTRAINT_HINGE = 3,
  CONSTRAINT_JOINT = 4,
  CONSTRAINT_ACTUATOR = 5,
  CONSTRAINT_FAKE_SHAKE = 6,
  CONSTRAINT_LAUNCH = 7,
  CONSTRAINT_ROPE = 8,
  CONSTRAINT_LIGHT = 9,
  NUM_CONSTRAINT_TYPES = 10,
};

typedef enum _NV_TIMING_OVERRIDE
{
  NV_TIMING_OVERRIDE_CURRENT = 0,
  NV_TIMING_OVERRIDE_AUTO = 1,
  NV_TIMING_OVERRIDE_EDID = 2,
  NV_TIMING_OVERRIDE_DMT = 3,
  NV_TIMING_OVERRIDE_DMT_RB = 4,
  NV_TIMING_OVERRIDE_CVT = 5,
  NV_TIMING_OVERRIDE_CVT_RB = 6,
  NV_TIMING_OVERRIDE_GTF = 7,
  NV_TIMING_OVERRIDE_EIA861 = 8,
  NV_TIMING_OVERRIDE_ANALOG_TV = 9,
  NV_TIMING_OVERRIDE_CUST = 10,
  NV_TIMING_OVERRIDE_NV_PREDEFINED = 11,
  NV_TIMING_OVERRIDE_NV_PSF = 11,
  NV_TIMING_OVERRIDE_NV_ASPR = 12,
  NV_TIMING_OVERRIDE_SDI = 13,
  NV_TIMING_OVRRIDE_MAX = 14,
} NV_TIMING_OVERRIDE, *PNV_TIMING_OVERRIDE;

enum SndCsvParseEntryType
{
  SND_CSV_STRING = 0,
  SND_CSV_FLOAT = 1,
  SND_CSV_INT = 2,
  SND_CSV_ENUM = 3,
  SND_CSV_FLAG = 4,
  SND_CSV_USHORT_DBSPL = 5,
  SND_CSV_FLOAT_DBSPL = 6,
  SND_CSV_CENTS = 7,
  SND_CSV_HASH = 8,
  SND_CSV_ENUM_BITS = 9,
  SND_CSV_FLAG_BITS = 10,
  SND_CSV_BYTE = 11,
  SND_CSV_ENUM_BYTE = 12,
  SND_CSV_SHORT = 13,
  SND_CSV_USHORT = 14,
  SND_CSV_NORM_BYTE = 15,
  SND_CSV_DISTANCE = 16,
};

enum AttachPointType
{
  ATTACH_POINT_WORLD = 0,
  ATTACH_POINT_DYNENT = 1,
  ATTACH_POINT_ENT = 2,
  ATTACH_POINT_BONE = 3,
};

enum D3D11_RESOURCE_DIMENSION
{
  D3D11_RESOURCE_DIMENSION_UNKNOWN = 0,
  D3D11_RESOURCE_DIMENSION_BUFFER = 1,
  D3D11_RESOURCE_DIMENSION_TEXTURE1D = 2,
  D3D11_RESOURCE_DIMENSION_TEXTURE2D = 3,
  D3D11_RESOURCE_DIMENSION_TEXTURE3D = 4,
};

enum GamePadButtonEvent
{
  GPAD_BUTTON_RELEASED = 0,
  GPAD_BUTTON_PRESSED = 1,
  GPAD_BUTTON_UPDATE = 2,
};

enum HU_ALLOCATION_SCHEME
{
  HU_SCHEME_DEFAULT = 0,
  HU_SCHEME_DEBUG = 1,
  HU_SCHEME_FIRSTFIT = 2,
  HU_SCHEME_FIXED = 3,
  HU_SCHEME_NULL = 4,
  HU_SCHEME_COUNT = 5,
};

typedef enum _NVAPI_SETRESOURCEHINT_CATEGORY
{
  NvApiHints_Sli = 1,
} NVAPI_SETRESOURCEHINT_CATEGORY, *PNVAPI_SETRESOURCEHINT_CATEGORY;

enum connectionType_e
{
  CONNECTION_TYPE_UNKNOWN = 0,
  CONNECTION_TYPE_WIRED = 1,
  CONNECTION_TYPE_WIRELESS = 2,
};

struct GfxStateBits
{
  /* 0x0000 */ unsigned int loadBits[2];
  /* 0x0008 */ struct ID3D11BlendState* blendState;
  /* 0x000c */ struct ID3D11DepthStencilState* depthStencilState;
  /* 0x0010 */ struct ID3D11RasterizerState* rasterizerState;
}; /* size: 0x0014 */

typedef enum _TAG_UNNAMED_89
{
  MZ_DEFAULT_STRATEGY = 0,
  MZ_FILTERED = 1,
  MZ_HUFFMAN_ONLY = 2,
  MZ_RLE = 3,
  MZ_FIXED = 4,
} TAG_UNNAMED_89, *PTAG_UNNAMED_89;

enum LeagueDataState
{
  LEAGUE_DATA_REQUESTING_BASE = 0,
  LEAGUE_DATA_BASE_RECEIVED = 1,
  LEAGUE_DATA_SENDING_OUTCOMES = 2,
  LEAGUE_DATA_OUTCOMES_ACKED = 3,
};

struct LeagueStats
{
  /* 0x0000 */ int rankPoints;
  /* 0x0004 */ int rank;
  /* 0x0008 */ float floats[3];
  /* 0x0014 */ int ints[8];
}; /* size: 0x0034 */

struct LeagueOutcomes
{
  /* 0x0000 */ struct LeagueStats base;
  /* 0x0034 */ struct LeagueStats winner;
  /* 0x0068 */ struct LeagueStats loser;
}; /* size: 0x009c */

struct PartyMemberLeagueData
{
  /* 0x0000 */ enum LeagueDataState state;
  /* 0x0004 */ int stateChangeTime;
  /* 0x0008 */ int stateUpdateTime;
  /* 0x000c */ long Padding_47;
  /* 0x0010 */ unsigned __int64 teamID;
  /* 0x0018 */ unsigned __int64 subdivisionID;
  /* 0x0020 */ int divisionID;
  /* 0x0024 */ int memberCount;
  /* 0x0028 */ char teamName[32];
  /* 0x0048 */ struct LeagueOutcomes outcomes;
  /* 0x00e4 */ long __PADDING__[1];
}; /* size: 0x00e8 */

enum tagFUNCKIND
{
  FUNC_VIRTUAL = 0,
  FUNC_PUREVIRTUAL = 1,
  FUNC_NONVIRTUAL = 2,
  FUNC_STATIC = 3,
  FUNC_DISPATCH = 4,
};

struct rectDef_s
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
  /* 0x0008 */ float w;
  /* 0x000c */ float h;
  /* 0x0010 */ int horzAlign;
  /* 0x0014 */ int vertAlign;
}; /* size: 0x0018 */

struct columnInfo_s
{
  /* 0x0000 */ int elementStyle;
  /* 0x0004 */ int maxChars;
  /* 0x0008 */ struct rectDef_s rect;
}; /* size: 0x0020 */

struct listBoxDef_s
{
  /* 0x0000 */ int mousePos;
  /* 0x0004 */ int cursorPos[1];
  /* 0x0008 */ int startPos[1];
  /* 0x000c */ int endPos[1];
  /* 0x0010 */ int drawPadding;
  /* 0x0014 */ float elementWidth;
  /* 0x0018 */ float elementHeight;
  /* 0x001c */ int numColumns;
  /* 0x0020 */ float special;
  /* 0x0024 */ struct columnInfo_s columnInfo[16];
  /* 0x0224 */ int notselectable;
  /* 0x0228 */ int noScrollBars;
  /* 0x022c */ int usePaging;
  /* 0x0230 */ union vec4_t selectBorder;
  /* 0x0240 */ union vec4_t disableColor;
  /* 0x0250 */ union vec4_t focusColor;
  /* 0x0260 */ union vec4_t elementHighlightColor;
  /* 0x0270 */ union vec4_t elementBackgroundColor;
  /* 0x0280 */ struct Material* selectIcon;
  /* 0x0284 */ struct Material* backgroundItemListbox;
  /* 0x0288 */ struct Material* highlightTexture;
  /* 0x028c */ int noBlinkingHighlight;
  /* 0x0290 */ struct MenuRow* rows;
  /* 0x0294 */ int maxRows;
  /* 0x0298 */ int rowCount;
}; /* size: 0x029c */

typedef enum _TAG_UNNAMED_90
{
  SCR_GAMECONST_ILLEGAL = 0,
  SCR_GAMECONST___name = 1,
  SCR_GAMECONST_abs = 2,
  SCR_GAMECONST_absangleclamp180 = 3,
  SCR_GAMECONST_absangleclamp360 = 4,
  SCR_GAMECONST_accuracy = 5,
  SCR_GAMECONST_acos = 6,
  SCR_GAMECONST_actionslotfourbuttonpressed = 7,
  SCR_GAMECONST_actionslotonebuttonpressed = 8,
  SCR_GAMECONST_actionslotthreebuttonpressed = 9,
  SCR_GAMECONST_actionslottwobuttonpressed = 10,
  SCR_GAMECONST_activateclientexploder = 11,
  SCR_GAMECONST_activatecrosshair = 12,
  SCR_GAMECONST_activatemixer = 13,
  SCR_GAMECONST_activator = 14,
  SCR_GAMECONST_addaieventlistener = 15,
  SCR_GAMECONST_addargus = 16,
  SCR_GAMECONST_addcylinderinfluencer = 17,
  SCR_GAMECONST_adddebugcommand = 18,
  SCR_GAMECONST_adddemobookmark = 19,
  SCR_GAMECONST_adddstat = 20,
  SCR_GAMECONST_addfriendlyscrambler = 21,
  SCR_GAMECONST_addgoal = 22,
  SCR_GAMECONST_addnodetocurve = 23,
  SCR_GAMECONST_addgametypestat = 24,
  SCR_GAMECONST_addplayerstat = 25,
  SCR_GAMECONST_addplayerstatwithgametype = 26,
  SCR_GAMECONST_addrankxp = 27,
  SCR_GAMECONST_addrankxpvalue = 28,
  SCR_GAMECONST_addreactionevent = 29,
  SCR_GAMECONST_addspawnpoints = 30,
  SCR_GAMECONST_addsphereinfluencer = 31,
  SCR_GAMECONST_addtestclient = 32,
  SCR_GAMECONST_addtocompass = 33,
  SCR_GAMECONST_addtomenuroot = 34,
  SCR_GAMECONST_addvehicletocompass = 35,
  SCR_GAMECONST_addweaponstat = 36,
  SCR_GAMECONST_addbonuscardstat = 37,
  SCR_GAMECONST_adsbuttonpressed = 38,
  SCR_GAMECONST_aimatpos = 39,
  SCR_GAMECONST_aimingatfriendly = 40,
  SCR_GAMECONST_aiteam = 41,
  SCR_GAMECONST_aiweapon = 42,
  SCR_GAMECONST_alertlevel = 43,
  SCR_GAMECONST_alertlevelint = 44,
  SCR_GAMECONST_alignx = 45,
  SCR_GAMECONST_aligny = 46,
  SCR_GAMECONST_allclientsprint = 47,
  SCR_GAMECONST_allocatemixerlights = 48,
  SCR_GAMECONST_allocatesoundrandoms = 49,
  SCR_GAMECONST_allowads = 50,
  SCR_GAMECONST_allowcrouch = 51,
  SCR_GAMECONST_allowdeath = 52,
  SCR_GAMECONST_allowedstances = 53,
  SCR_GAMECONST_allowjump = 54,
  SCR_GAMECONST_allowlean = 55,
  SCR_GAMECONST_allowmelee = 56,
  SCR_GAMECONST_allowpain = 57,
  SCR_GAMECONST_blockingpain = 58,
  SCR_GAMECONST_allowpickupweapons = 59,
  SCR_GAMECONST_allowpitchangle = 60,
  SCR_GAMECONST_allowprone = 61,
  SCR_GAMECONST_allowreact = 62,
  SCR_GAMECONST_allowspectateteam = 63,
  SCR_GAMECONST_allowsprint = 64,
  SCR_GAMECONST_allowstand = 65,
  SCR_GAMECONST_alpha = 66,
  SCR_GAMECONST_angleclamp180 = 67,
  SCR_GAMECONST_anglelerp = 68,
  SCR_GAMECONST_anglelerprate = 69,
  SCR_GAMECONST_angles = 70,
  SCR_GAMECONST_anglestoforward = 71,
  SCR_GAMECONST_anglestoright = 72,
  SCR_GAMECONST_anglestoup = 73,
  SCR_GAMECONST_anim_pose = 74,
  SCR_GAMECONST_animateui = 75,
  SCR_GAMECONST_animcustom = 76,
  SCR_GAMECONST_animgetchildat = 77,
  SCR_GAMECONST_animgetnumchildren = 78,
  SCR_GAMECONST_animhasnotetrack = 79,
  SCR_GAMECONST_animmode = 80,
  SCR_GAMECONST_animrelative = 81,
  SCR_GAMECONST_animscript = 82,
  SCR_GAMECONST_animscripted = 83,
  SCR_GAMECONST_animscriptedskiprestart = 84,
  SCR_GAMECONST_animtranslationscale = 85,
  SCR_GAMECONST_announcement = 86,
  SCR_GAMECONST_anyammoforweaponmodes = 87,
  SCR_GAMECONST_archived = 88,
  SCR_GAMECONST_archivetime = 89,
  SCR_GAMECONST_areallmissionsatscore = 90,
  SCR_GAMECONST_arecontrolsfrozen = 91,
  SCR_GAMECONST_aretexturesloaded = 92,
  SCR_GAMECONST_array = 93,
  SCR_GAMECONST_artilleryiconlocation = 94,
  SCR_GAMECONST_asin = 95,
  SCR_GAMECONST_assert = 96,
  SCR_GAMECONST_assertmsg = 97,
  SCR_GAMECONST_assists = 98,
  SCR_GAMECONST_atan = 99,
  SCR_GAMECONST_atdangerousnode = 100,
  SCR_GAMECONST_attach = 101,
  SCR_GAMECONST_attachpath = 102,
  SCR_GAMECONST_attachtodec20terminal = 103,
  SCR_GAMECONST_attackbuttonpressed = 104,
  SCR_GAMECONST_attacker = 105,
  SCR_GAMECONST_attackeraccuracy = 106,
  SCR_GAMECONST_badplace_arc = 107,
  SCR_GAMECONST_badplace_brush = 108,
  SCR_GAMECONST_badplace_cylinder = 109,
  SCR_GAMECONST_badplace_delete = 110,
  SCR_GAMECONST_badplaceawareness = 111,
  SCR_GAMECONST_ban = 112,
  SCR_GAMECONST_bbprint = 113,
  SCR_GAMECONST_beginlocationairstrikeselection = 114,
  SCR_GAMECONST_beginlocationartilleryselection = 115,
  SCR_GAMECONST_beginlocationcomlinkselection = 116,
  SCR_GAMECONST_beginlocationmortarselection = 117,
  SCR_GAMECONST_beginlocationnapalmselection = 118,
  SCR_GAMECONST_beginlocationselection = 119,
  SCR_GAMECONST_beginprediction = 120,
  SCR_GAMECONST_birthtime = 121,
  SCR_GAMECONST_bloodimpact = 122,
  SCR_GAMECONST_boundswouldtelefrag = 123,
  SCR_GAMECONST_box = 124,
  SCR_GAMECONST_breakrope = 125,
  SCR_GAMECONST_buildcurve = 126,
  SCR_GAMECONST_bulletspread = 127,
  SCR_GAMECONST_bullettrace = 128,
  SCR_GAMECONST_bullettracepassed = 129,
  SCR_GAMECONST_bullettracer = 130,
  SCR_GAMECONST_buttonpressed = 131,
  SCR_GAMECONST_bypasssledgehammer = 132,
  SCR_GAMECONST_calclookaheadpos = 133,
  SCR_GAMECONST_calcpathlength = 134,
  SCR_GAMECONST_calcplayeroptions = 135,
  SCR_GAMECONST_calcweaponoptions = 136,
  SCR_GAMECONST_cameraactivate = 137,
  SCR_GAMECONST_camerasetlookat = 138,
  SCR_GAMECONST_camerasetposition = 139,
  SCR_GAMECONST_canattackenemynode = 140,
  SCR_GAMECONST_cancelaimove = 141,
  SCR_GAMECONST_cancelgoal = 142,
  SCR_GAMECONST_canflank = 143,
  SCR_GAMECONST_canplaceriotshield = 144,
  SCR_GAMECONST_canplayerplaceturret = 145,
  SCR_GAMECONST_canplayerplacevehicle = 146,
  SCR_GAMECONST_cansee = 147,
  SCR_GAMECONST_canseepathgoal = 148,
  SCR_GAMECONST_canshoot = 149,
  SCR_GAMECONST_canshootenemy = 150,
  SCR_GAMECONST_canspawnturret = 151,
  SCR_GAMECONST_canuseturret = 152,
  SCR_GAMECONST_captures = 153,
  SCR_GAMECONST_carryturret = 154,
  SCR_GAMECONST_ceil = 155,
  SCR_GAMECONST_changeadvertisedstatus = 156,
  SCR_GAMECONST_changefontscaleovertime = 157,
  SCR_GAMECONST_changelevel = 158,
  SCR_GAMECONST_changeseatbuttonpressed = 159,
  SCR_GAMECONST_checkcoverexitposwithpath = 160,
  SCR_GAMECONST_checkgrenadelaunch = 161,
  SCR_GAMECONST_checkgrenadelaunchpos = 162,
  SCR_GAMECONST_checkgrenadethrow = 163,
  SCR_GAMECONST_checkgrenadethrowpos = 164,
  SCR_GAMECONST_checkprone = 165,
  SCR_GAMECONST_circle = 166,
  SCR_GAMECONST_classname = 167,
  SCR_GAMECONST_cleanupspawneddynents = 168,
  SCR_GAMECONST_clearallcorpses = 169,
  SCR_GAMECONST_clearalltextafterhudelem = 170,
  SCR_GAMECONST_clearalternateaimparams = 171,
  SCR_GAMECONST_clearanim = 172,
  SCR_GAMECONST_clearanimlimited = 173,
  SCR_GAMECONST_clearcenterpopups = 174,
  SCR_GAMECONST_clearclientflag = 175,
  SCR_GAMECONST_cleardamageindicator = 176,
  SCR_GAMECONST_cleardefaultpitch = 177,
  SCR_GAMECONST_clearendgame = 178,
  SCR_GAMECONST_clearenemy = 179,
  SCR_GAMECONST_clearentityowner = 180,
  SCR_GAMECONST_clearentitytarget = 181,
  SCR_GAMECONST_clearfixednodesafevolume = 182,
  SCR_GAMECONST_cleargoalvolume = 183,
  SCR_GAMECONST_cleargoalyaw = 184,
  SCR_GAMECONST_cleargunnertarget = 185,
  SCR_GAMECONST_clearlocalizedstrings = 186,
  SCR_GAMECONST_clearlookatent = 187,
  SCR_GAMECONST_clearmovehistory = 188,
  SCR_GAMECONST_clearnearestenemyscrambler = 189,
  SCR_GAMECONST_clearperks = 190,
  SCR_GAMECONST_clearphysicsgravity = 191,
  SCR_GAMECONST_clearpitchorient = 192,
  SCR_GAMECONST_clearpopups = 193,
  SCR_GAMECONST_clearpotentialthreat = 194,
  SCR_GAMECONST_clearruntopos = 195,
  SCR_GAMECONST_clearscriptenemy = 196,
  SCR_GAMECONST_clearscriptgoal = 197,
  SCR_GAMECONST_clearspawnpoints = 198,
  SCR_GAMECONST_clearstowedweapon = 199,
  SCR_GAMECONST_clearspawnpointsbaseweight = 200,
  SCR_GAMECONST_cleartargetent = 201,
  SCR_GAMECONST_cleartargetentity = 202,
  SCR_GAMECONST_cleartargetyaw = 203,
  SCR_GAMECONST_clearturrettarget = 204,
  SCR_GAMECONST_clearvehgoalpos = 205,
  SCR_GAMECONST_clearviewlockent = 206,
  SCR_GAMECONST_clientannouncement = 207,
  SCR_GAMECONST_clientclaimtrigger = 208,
  SCR_GAMECONST_clientflag = 209,
  SCR_GAMECONST_clienthassnapshot = 210,
  SCR_GAMECONST_clientprint = 211,
  SCR_GAMECONST_clientreleasetrigger = 212,
  SCR_GAMECONST_clientsysregister = 213,
  SCR_GAMECONST_clientsyssetstate = 214,
  SCR_GAMECONST_cloneplayer = 215,
  SCR_GAMECONST_closefile = 216,
  SCR_GAMECONST_closeingamemenu = 217,
  SCR_GAMECONST_closemainmenu = 218,
  SCR_GAMECONST_closemenu = 219,
  SCR_GAMECONST_closer = 220,
  SCR_GAMECONST_codeplayloopedfx = 221,
  SCR_GAMECONST_codespawn = 222,
  SCR_GAMECONST_codespawnerforcespawn = 223,
  SCR_GAMECONST_codespawnerspawn = 224,
  SCR_GAMECONST_codespawnfx = 225,
  SCR_GAMECONST_codespawnturret = 226,
  SCR_GAMECONST_codespawnvehicle = 227,
  SCR_GAMECONST_collisiontestpointsinbox = 228,
  SCR_GAMECONST_collisiontestpointsincone = 229,
  SCR_GAMECONST_collisiontestpointsincylinder = 230,
  SCR_GAMECONST_collisiontestpointsinpill = 231,
  SCR_GAMECONST_collisiontestpointsinsphere = 232,
  SCR_GAMECONST_color = 233,
  SCR_GAMECONST_combatmode = 234,
  SCR_GAMECONST_combineangles = 235,
  SCR_GAMECONST_commitsave = 236,
  SCR_GAMECONST_compassscale = 237,
  SCR_GAMECONST_connectpaths = 238,
  SCR_GAMECONST_coopinfo = 239,
  SCR_GAMECONST_cos = 240,
  SCR_GAMECONST_count = 241,
  SCR_GAMECONST_createdynentandlaunch = 242,
  SCR_GAMECONST_createprintchannel = 243,
  SCR_GAMECONST_createrope = 244,
  SCR_GAMECONST_createsoundrandom = 245,
  SCR_GAMECONST_createstreamerhint = 246,
  SCR_GAMECONST_createthreatbiasgroup = 247,
  SCR_GAMECONST_createtrack = 248,
  SCR_GAMECONST_cruncharray = 249,
  SCR_GAMECONST_damageconetrace = 250,
  SCR_GAMECONST_damagedir = 251,
  SCR_GAMECONST_damagelocation = 252,
  SCR_GAMECONST_damagemod = 253,
  SCR_GAMECONST_damagetaken = 254,
  SCR_GAMECONST_damageweapon = 255,
  SCR_GAMECONST_damageyaw = 256,
  SCR_GAMECONST_deactivatechannelvolumes = 257,
  SCR_GAMECONST_deactivateclientexploder = 258,
  SCR_GAMECONST_deactivatereverb = 259,
  SCR_GAMECONST_deathfxname = 260,
  SCR_GAMECONST_deathfxsound = 261,
  SCR_GAMECONST_deathfxtag = 262,
  SCR_GAMECONST_deathmodel = 263,
  SCR_GAMECONST_deathquakeduration = 264,
  SCR_GAMECONST_deathquakeradius = 265,
  SCR_GAMECONST_deathquakescale = 266,
  SCR_GAMECONST_deaths = 267,
  SCR_GAMECONST_deathstreakactive = 268,
  SCR_GAMECONST_debugstar = 269,
  SCR_GAMECONST_defends = 270,
  SCR_GAMECONST_defuses = 271,
  SCR_GAMECONST_delayeddeath = 272,
  SCR_GAMECONST_delete = 273,
  SCR_GAMECONST_deletefakeent = 274,
  SCR_GAMECONST_deletefx = 275,
  SCR_GAMECONST_deletepathnode = 276,
  SCR_GAMECONST_deleterope = 277,
  SCR_GAMECONST_deployriotshield = 278,
  SCR_GAMECONST_depthinwater = 279,
  SCR_GAMECONST_desiredangle = 280,
  SCR_GAMECONST_destroy = 281,
  SCR_GAMECONST_destructiblehasnotify = 282,
  SCR_GAMECONST_destructions = 283,
  SCR_GAMECONST_detach = 284,
  SCR_GAMECONST_detachall = 285,
  SCR_GAMECONST_detachdec20terminal = 286,
  SCR_GAMECONST_detonate = 287,
  SCR_GAMECONST_devaddpitch = 288,
  SCR_GAMECONST_devaddroll = 289,
  SCR_GAMECONST_devaddyaw = 290,
  SCR_GAMECONST_diequietly = 291,
  SCR_GAMECONST_difftrack = 292,
  SCR_GAMECONST_difftrackangle = 293,
  SCR_GAMECONST_disableaimassist = 294,
  SCR_GAMECONST_disableclientlinkto = 295,
  SCR_GAMECONST_disabledeathstreak = 296,
  SCR_GAMECONST_disabledepthbuoyancyadjustments = 297,
  SCR_GAMECONST_disabledestructiblepieces = 298,
  SCR_GAMECONST_disablegrenadesuicide = 299,
  SCR_GAMECONST_disablegrenadetouchdamage = 300,
  SCR_GAMECONST_disablegunnerfiring = 301,
  SCR_GAMECONST_disableimpactmarks = 302,
  SCR_GAMECONST_disableinvulnerability = 303,
  SCR_GAMECONST_disableoffhandweapons = 304,
  SCR_GAMECONST_disableturretdismount = 305,
  SCR_GAMECONST_disableusability = 306,
  SCR_GAMECONST_disableweaponcycling = 307,
  SCR_GAMECONST_disableweaponfire = 308,
  SCR_GAMECONST_disableweaponreload = 309,
  SCR_GAMECONST_disableweapons = 310,
  SCR_GAMECONST_disallowvehicleusage = 311,
  SCR_GAMECONST_disconnectpaths = 312,
  SCR_GAMECONST_displaykillstreak = 313,
  SCR_GAMECONST_distance = 314,
  SCR_GAMECONST_distance2d = 315,
  SCR_GAMECONST_distance2dsquared = 316,
  SCR_GAMECONST_distancesquared = 317,
  SCR_GAMECONST_divetoprone = 318,
  SCR_GAMECONST_dmg = 319,
  SCR_GAMECONST_dochallengecompleteui = 320,
  SCR_GAMECONST_dointelacquiredui = 321,
  SCR_GAMECONST_dodamage = 322,
  SCR_GAMECONST_doingambush = 323,
  SCR_GAMECONST_dontavoidplayer = 324,
  SCR_GAMECONST_dontinterpolate = 325,
  SCR_GAMECONST_dosplevelwrapup = 326,
  SCR_GAMECONST_downs = 327,
  SCR_GAMECONST_drawcompassfriendlies = 328,
  SCR_GAMECONST_drawcurve = 329,
  SCR_GAMECONST_drawnode = 330,
  SCR_GAMECONST_drawoncompass = 331,
  SCR_GAMECONST_drawtrajectory = 332,
  SCR_GAMECONST_drivebysoundtime0 = 333,
  SCR_GAMECONST_drivebysoundtime1 = 334,
  SCR_GAMECONST_drivepath = 335,
  SCR_GAMECONST_dropitem = 336,
  SCR_GAMECONST_dropnodetofloor = 337,
  SCR_GAMECONST_dropscavengeritem = 338,
  SCR_GAMECONST_dropweapon = 339,
  SCR_GAMECONST_dumpanims = 340,
  SCR_GAMECONST_dumphistory = 341,
  SCR_GAMECONST_earthquake = 342,
  SCR_GAMECONST_eflags = 343,
  SCR_GAMECONST_eflags2 = 344,
  SCR_GAMECONST_enableaimassist = 345,
  SCR_GAMECONST_enablealldestructiblepieces = 346,
  SCR_GAMECONST_enableclientlinkto = 347,
  SCR_GAMECONST_enabledeathshield = 348,
  SCR_GAMECONST_enabledeathstreak = 349,
  SCR_GAMECONST_enablegrenadesuicide = 350,
  SCR_GAMECONST_enablegrenadetouchdamage = 351,
  SCR_GAMECONST_enablehealthshield = 352,
  SCR_GAMECONST_enableimpactmarks = 353,
  SCR_GAMECONST_enableinfluencer = 354,
  SCR_GAMECONST_enableinvulnerability = 355,
  SCR_GAMECONST_enablelinkto = 356,
  SCR_GAMECONST_enableoccluder = 357,
  SCR_GAMECONST_enableoffhandweapons = 358,
  SCR_GAMECONST_enablereactionsystem = 359,
  SCR_GAMECONST_enablesledgehammer = 360,
  SCR_GAMECONST_enableturretdismount = 361,
  SCR_GAMECONST_enableusability = 362,
  SCR_GAMECONST_enablewatersheetfx = 363,
  SCR_GAMECONST_enableweaponcycling = 364,
  SCR_GAMECONST_enableweaponfire = 365,
  SCR_GAMECONST_enableweaponreload = 366,
  SCR_GAMECONST_enableweapons = 367,
  SCR_GAMECONST_endlobby = 368,
  SCR_GAMECONST_endlocationselection = 369,
  SCR_GAMECONST_endparty = 370,
  SCR_GAMECONST_endprediction = 371,
  SCR_GAMECONST_enemy = 372,
  SCR_GAMECONST_engagemaxdist = 373,
  SCR_GAMECONST_engagemaxfalloffdist = 374,
  SCR_GAMECONST_engagemindist = 375,
  SCR_GAMECONST_engageminfalloffdist = 376,
  SCR_GAMECONST_enterprone = 377,
  SCR_GAMECONST_entgetsweaponfirenotification = 378,
  SCR_GAMECONST_entsearch = 379,
  SCR_GAMECONST_entyawoverrideslinkyaw = 380,
  SCR_GAMECONST_execdevgui = 381,
  SCR_GAMECONST_exhaustfxname = 382,
  SCR_GAMECONST_exitlevel = 383,
  SCR_GAMECONST_exitprone = 384,
  SCR_GAMECONST_exposedduration = 385,
  SCR_GAMECONST_extracamconfig = 386,
  SCR_GAMECONST_facemotion = 387,
  SCR_GAMECONST_fadeovertime = 388,
  SCR_GAMECONST_fadewhentargeted = 389,
  SCR_GAMECONST_fastrestart = 390,
  SCR_GAMECONST_favoriteenemy = 391,
  SCR_GAMECONST_ffateam = 392,
  SCR_GAMECONST_fgetarg = 393,
  SCR_GAMECONST_finalaccuracy = 394,
  SCR_GAMECONST_findanimbyname = 395,
  SCR_GAMECONST_findbestcovernode = 396,
  SCR_GAMECONST_findbestcovernodes = 397,
  SCR_GAMECONST_findcovernode = 398,
  SCR_GAMECONST_findcovernodeatlocation = 399,
  SCR_GAMECONST_findnearbycovernode = 400,
  SCR_GAMECONST_findpath = 401,
  SCR_GAMECONST_findreacquiredirectpath = 402,
  SCR_GAMECONST_findreacquirenode = 403,
  SCR_GAMECONST_findreacquireproximatepath = 404,
  SCR_GAMECONST_findshufflecovernode = 405,
  SCR_GAMECONST_finishactordamage = 406,
  SCR_GAMECONST_finishplayerdamage = 407,
  SCR_GAMECONST_finishvehicledamage = 408,
  SCR_GAMECONST_finishvehicleradiusdamage = 409,
  SCR_GAMECONST_fire = 410,
  SCR_GAMECONST_firegrenadelauncher = 411,
  SCR_GAMECONST_firegunnerweapon = 412,
  SCR_GAMECONST_fireweapon = 413,
  SCR_GAMECONST_fixednode = 414,
  SCR_GAMECONST_fixednodesaferadius = 415,
  SCR_GAMECONST_flagenemyunattackable = 416,
  SCR_GAMECONST_flashbangimmunity = 417,
  SCR_GAMECONST_float = 418,
  SCR_GAMECONST_floatlonger = 419,
  SCR_GAMECONST_floor = 420,
  SCR_GAMECONST_flushgump = 421,
  SCR_GAMECONST_followmax = 422,
  SCR_GAMECONST_followmin = 423,
  SCR_GAMECONST_font = 424,
  SCR_GAMECONST_font3duseglowcolor = 425,
  SCR_GAMECONST_fontscale = 426,
  SCR_GAMECONST_fontstyle = 427,
  SCR_GAMECONST_fontstyle3d = 428,
  SCR_GAMECONST_forcebuoyancy = 429,
  SCR_GAMECONST_forcedelete = 430,
  SCR_GAMECONST_forcegamemodemappings = 431,
  SCR_GAMECONST_setrimintensity = 432,
  SCR_GAMECONST_setgenericscenevalue = 433,
  SCR_GAMECONST_forcelevelend = 434,
  SCR_GAMECONST_forceragdollimmediate = 435,
  SCR_GAMECONST_forceteleport = 436,
  SCR_GAMECONST_forceviewmodelanimation = 437,
  SCR_GAMECONST_foreground = 438,
  SCR_GAMECONST_fovcosine = 439,
  SCR_GAMECONST_fovcosinebusy = 440,
  SCR_GAMECONST_fprintfields = 441,
  SCR_GAMECONST_fprintln = 442,
  SCR_GAMECONST_fragbuttonpressed = 443,
  SCR_GAMECONST_freadln = 444,
  SCR_GAMECONST_freecurve = 445,
  SCR_GAMECONST_freehelicopter = 446,
  SCR_GAMECONST_freevehicle = 447,
  SCR_GAMECONST_freezecontrols = 448,
  SCR_GAMECONST_freezecontrolsallowlook = 449,
  SCR_GAMECONST_gamehistorystartmatch = 450,
  SCR_GAMECONST_gamemodeismode = 451,
  SCR_GAMECONST_gamemodeisusingstats = 452,
  SCR_GAMECONST_gamemodeisusingxp = 453,
  SCR_GAMECONST_gasbuttonpressed = 454,
  SCR_GAMECONST_getaiarray = 455,
  SCR_GAMECONST_getaicount = 456,
  SCR_GAMECONST_getailimit = 457,
  SCR_GAMECONST_getaispeciesarray = 458,
  SCR_GAMECONST_getaitriggerflags = 459,
  SCR_GAMECONST_getaivelocity = 460,
  SCR_GAMECONST_getallnodes = 461,
  SCR_GAMECONST_getallvehiclenodes = 462,
  SCR_GAMECONST_getammocount = 463,
  SCR_GAMECONST_getangledelta = 464,
  SCR_GAMECONST_getanglestolikelyenemypath = 465,
  SCR_GAMECONST_getangularvelocity = 466,
  SCR_GAMECONST_getanimassettype = 467,
  SCR_GAMECONST_getanimcurrframecount = 468,
  SCR_GAMECONST_getanimdumpmodel = 469,
  SCR_GAMECONST_getanimdumptotaltime = 470,
  SCR_GAMECONST_getanimdumptree = 471,
  SCR_GAMECONST_getanimframecount = 472,
  SCR_GAMECONST_getanimlength = 473,
  SCR_GAMECONST_getanimstate = 474,
  SCR_GAMECONST_getanimstatecategory = 475,
  SCR_GAMECONST_getanimtime = 476,
  SCR_GAMECONST_getanimvalue = 477,
  SCR_GAMECONST_getanynodearray = 478,
  SCR_GAMECONST_getarraykeys = 479,
  SCR_GAMECONST_getassignedteam = 480,
  SCR_GAMECONST_getatrloaded = 481,
  SCR_GAMECONST_getattachignorecollision = 482,
  SCR_GAMECONST_getattachmentindex = 483,
  SCR_GAMECONST_getattachmodelname = 484,
  SCR_GAMECONST_getattachpos = 485,
  SCR_GAMECONST_getattachsize = 486,
  SCR_GAMECONST_getattachtagname = 487,
  SCR_GAMECONST_getbaseweaponitemindex = 488,
  SCR_GAMECONST_getbinklength = 489,
  SCR_GAMECONST_getbottomarc = 490,
  SCR_GAMECONST_getbrake = 491,
  SCR_GAMECONST_getbrushmodelcenter = 492,
  SCR_GAMECONST_getcamangles = 493,
  SCR_GAMECONST_getcampos = 494,
  SCR_GAMECONST_getcentroid = 495,
  SCR_GAMECONST_getcinematictimeremaining = 496,
  SCR_GAMECONST_getclientuivisibilityflag = 497,
  SCR_GAMECONST_getclosestanimdumpframefortime = 498,
  SCR_GAMECONST_getclosestenemysqdist = 499,
  SCR_GAMECONST_getcommandfromkey = 500,
  SCR_GAMECONST_getcontractname = 501,
  SCR_GAMECONST_getcontractrequiredcount = 502,
  SCR_GAMECONST_getcontractrequirements = 503,
  SCR_GAMECONST_getcontractresetconditions = 504,
  SCR_GAMECONST_getcontractrewardcp = 505,
  SCR_GAMECONST_getcontractrewardxp = 506,
  SCR_GAMECONST_getcontractstatname = 507,
  SCR_GAMECONST_getcontractstattype = 508,
  SCR_GAMECONST_getcorpseanim = 509,
  SCR_GAMECONST_getcorpsearray = 510,
  SCR_GAMECONST_getcountertotal = 511,
  SCR_GAMECONST_getcovernode = 512,
  SCR_GAMECONST_getcovernodearray = 513,
  SCR_GAMECONST_getcurrentoffhand = 514,
  SCR_GAMECONST_getcurrentweapon = 515,
  SCR_GAMECONST_getcurrentweaponclipammo = 516,
  SCR_GAMECONST_getcurrentweaponincludingmelee = 517,
  SCR_GAMECONST_getcurve = 518,
  SCR_GAMECONST_getcurvecurpos = 519,
  SCR_GAMECONST_getcurveserverpos = 520,
  SCR_GAMECONST_getcustomclassloadoutitem = 521,
  SCR_GAMECONST_getcustomclassmodifier = 522,
  SCR_GAMECONST_getcycleoriginoffset = 523,
  SCR_GAMECONST_getdate = 524,
  SCR_GAMECONST_getdebugdvar = 525,
  SCR_GAMECONST_getdebugdvarfloat = 526,
  SCR_GAMECONST_getdebugdvarint = 527,
  SCR_GAMECONST_getdebugeye = 528,
  SCR_GAMECONST_getdefaultclassslot = 529,
  SCR_GAMECONST_getclassindexfromname = 530,
  SCR_GAMECONST_getdeltaturnyaw = 531,
  SCR_GAMECONST_getdemofileid = 532,
  SCR_GAMECONST_getdepthoffield_farblur = 533,
  SCR_GAMECONST_getdepthoffield_farend = 534,
  SCR_GAMECONST_getdepthoffield_farstart = 535,
  SCR_GAMECONST_getdepthoffield_nearblur = 536,
  SCR_GAMECONST_getdepthoffield_nearend = 537,
  SCR_GAMECONST_getdepthoffield_nearstart = 538,
  SCR_GAMECONST_getdestructibledefs = 539,
  SCR_GAMECONST_getdestructiblename = 540,
  SCR_GAMECONST_getdifficulty = 541,
  SCR_GAMECONST_getdronemodel = 542,
  SCR_GAMECONST_getdroppedweapons = 543,
  SCR_GAMECONST_getdroptofloorposition = 544,
  SCR_GAMECONST_getdstat = 545,
  SCR_GAMECONST_getdstatarraycount = 546,
  SCR_GAMECONST_getdumpcmdsfortimedelta = 547,
  SCR_GAMECONST_getdvar = 548,
  SCR_GAMECONST_getdvarcoloralpha = 549,
  SCR_GAMECONST_getdvarcolorblue = 550,
  SCR_GAMECONST_getdvarcolorgreen = 551,
  SCR_GAMECONST_getdvarcolorred = 552,
  SCR_GAMECONST_getdvarfloat = 553,
  SCR_GAMECONST_getdvarint = 554,
  SCR_GAMECONST_getdvarvector = 555,
  SCR_GAMECONST_getdynent = 556,
  SCR_GAMECONST_getdynentarray = 557,
  SCR_GAMECONST_getdynmodels = 558,
  SCR_GAMECONST_getenemyinfo = 559,
  SCR_GAMECONST_getenemyscrambleramount = 560,
  SCR_GAMECONST_getenemysqdist = 561,
  SCR_GAMECONST_getent = 562,
  SCR_GAMECONST_getentarray = 563,
  SCR_GAMECONST_getentbynum = 564,
  SCR_GAMECONST_getentitynumber = 565,
  SCR_GAMECONST_getentitytype = 566,
  SCR_GAMECONST_getentnum = 567,
  SCR_GAMECONST_getextracamstatic = 568,
  SCR_GAMECONST_geteye = 569,
  SCR_GAMECONST_geteyeapprox = 570,
  SCR_GAMECONST_getfirstarraykey = 571,
  SCR_GAMECONST_getfixednodesafevolume = 572,
  SCR_GAMECONST_getflashbangedstrength = 573,
  SCR_GAMECONST_getfogsettings = 574,
  SCR_GAMECONST_getfootstepstrings = 575,
  SCR_GAMECONST_getfractionmaxammo = 576,
  SCR_GAMECONST_getfractionstartammo = 577,
  SCR_GAMECONST_getfriendlyscrambleramount = 578,
  SCR_GAMECONST_getfxvisibility = 579,
  SCR_GAMECONST_getgametypeenumfromname = 580,
  SCR_GAMECONST_getgametypesetting = 581,
  SCR_GAMECONST_getgoalspeedmph = 582,
  SCR_GAMECONST_getgoalvolume = 583,
  SCR_GAMECONST_getgridfrompos = 584,
  SCR_GAMECONST_getgroundenttype = 585,
  SCR_GAMECONST_getguid = 586,
  SCR_GAMECONST_getgunneranimpitch = 587,
  SCR_GAMECONST_getgunneranimyaw = 588,
  SCR_GAMECONST_getgunnertargetent = 589,
  SCR_GAMECONST_getgunnertargetvec = 590,
  SCR_GAMECONST_getgvrule = 591,
  SCR_GAMECONST_gethandbrake = 592,
  SCR_GAMECONST_gethelidamagestate = 593,
  SCR_GAMECONST_getheliheightlock = 594,
  SCR_GAMECONST_getheliheightlockheight = 595,
  SCR_GAMECONST_gethitenttype = 596,
  SCR_GAMECONST_gethityaw = 597,
  SCR_GAMECONST_getinkillcam = 598,
  SCR_GAMECONST_getinventoryweapon = 599,
  SCR_GAMECONST_getitemarray = 600,
  SCR_GAMECONST_getitemattachment = 601,
  SCR_GAMECONST_getitemattachmentallocationcost = 602,
  SCR_GAMECONST_getitemgroupfromitemindex = 603,
  SCR_GAMECONST_getkeybinding = 604,
  SCR_GAMECONST_getknownlength = 605,
  SCR_GAMECONST_getleftarc = 606,
  SCR_GAMECONST_getlevelalias = 607,
  SCR_GAMECONST_getlightcolor = 608,
  SCR_GAMECONST_getlightexponent = 609,
  SCR_GAMECONST_getlightfovinner = 610,
  SCR_GAMECONST_getlightfovouter = 611,
  SCR_GAMECONST_getlightintensity = 612,
  SCR_GAMECONST_getlightradius = 613,
  SCR_GAMECONST_getlinkedent = 614,
  SCR_GAMECONST_getloadoutitem = 615,
  SCR_GAMECONST_getlocalclientangles = 616,
  SCR_GAMECONST_getlocalclientdriver = 617,
  SCR_GAMECONST_getlocalclienteyepos = 618,
  SCR_GAMECONST_getlocalclienthealth = 619,
  SCR_GAMECONST_getlocalclientmaxhealth = 620,
  SCR_GAMECONST_getlocalclientnumber = 621,
  SCR_GAMECONST_getlocalclientpos = 622,
  SCR_GAMECONST_getlocalgunnerangles = 623,
  SCR_GAMECONST_getlocalplayer = 624,
  SCR_GAMECONST_getlocalplayers = 625,
  SCR_GAMECONST_getlocalplayerteam = 626,
  SCR_GAMECONST_getlocalprofilearrayint = 627,
  SCR_GAMECONST_getlocalprofilefloat = 628,
  SCR_GAMECONST_getlocalprofileint = 629,
  SCR_GAMECONST_getlocalprofilestring = 630,
  SCR_GAMECONST_getlockonradius = 631,
  SCR_GAMECONST_getlockonspeed = 632,
  SCR_GAMECONST_getlookaheaddir = 633,
  SCR_GAMECONST_getlookaheaddist = 634,
  SCR_GAMECONST_getmapcenter = 635,
  SCR_GAMECONST_getmapsundirection = 636,
  SCR_GAMECONST_getmapsunlight = 637,
  SCR_GAMECONST_getmaxactivecontracts = 638,
  SCR_GAMECONST_getmaxlocalclients = 639,
  SCR_GAMECONST_getactivelocalclients = 640,
  SCR_GAMECONST_getmaxreversespeed = 641,
  SCR_GAMECONST_getmaxspeed = 642,
  SCR_GAMECONST_getmaxvehicles = 643,
  SCR_GAMECONST_getmiscmodels = 644,
  SCR_GAMECONST_getmotionangle = 645,
  SCR_GAMECONST_getmovedelta = 646,
  SCR_GAMECONST_getmovehistoryaverage = 647,
  SCR_GAMECONST_getnegotiationendnode = 648,
  SCR_GAMECONST_getnegotiationstartnode = 649,
  SCR_GAMECONST_getnextarraykey = 650,
  SCR_GAMECONST_getnode = 651,
  SCR_GAMECONST_getnodearray = 652,
  SCR_GAMECONST_getnodearraysorted = 653,
  SCR_GAMECONST_getnodeowner = 654,
  SCR_GAMECONST_getnodesinradius = 655,
  SCR_GAMECONST_getnodesinradiussorted = 656,
  SCR_GAMECONST_getnormalhealth = 657,
  SCR_GAMECONST_getnormalizedcameramovement = 658,
  SCR_GAMECONST_getnormalizedmovement = 659,
  SCR_GAMECONST_getnorthyaw = 660,
  SCR_GAMECONST_getnotetracksindelta = 661,
  SCR_GAMECONST_getnotetracktimes = 662,
  SCR_GAMECONST_getnumchallengescomplete = 663,
  SCR_GAMECONST_getnumconnectedplayers = 664,
  SCR_GAMECONST_getnumexpectedplayers = 665,
  SCR_GAMECONST_getnumgvrules = 666,
  SCR_GAMECONST_getnumparts = 667,
  SCR_GAMECONST_getnumrestarts = 668,
  SCR_GAMECONST_getnumvehicles = 669,
  SCR_GAMECONST_getoccupantseat = 670,
  SCR_GAMECONST_getoffhandsecondaryclass = 671,
  SCR_GAMECONST_getorientmode = 672,
  SCR_GAMECONST_getorigin = 673,
  SCR_GAMECONST_getowner = 674,
  SCR_GAMECONST_getparententity = 675,
  SCR_GAMECONST_getpartname = 676,
  SCR_GAMECONST_getpathlength = 677,
  SCR_GAMECONST_getperfectinfo = 678,
  SCR_GAMECONST_getperks = 679,
  SCR_GAMECONST_getpersistentprofilevar = 680,
  SCR_GAMECONST_getphysacceleration = 681,
  SCR_GAMECONST_getplaybacktime = 682,
  SCR_GAMECONST_getplayerangles = 683,
  SCR_GAMECONST_getplayercamerapos = 684,
  SCR_GAMECONST_getplayerconnectionstate = 685,
  SCR_GAMECONST_getplayers = 686,
  SCR_GAMECONST_getplayerspawnid = 687,
  SCR_GAMECONST_getplayerviewheight = 688,
  SCR_GAMECONST_getpointinbounds = 689,
  SCR_GAMECONST_getreacquirenode = 690,
  SCR_GAMECONST_getreactionevent = 691,
  SCR_GAMECONST_getrealtime = 692,
  SCR_GAMECONST_getreffromitemindex = 693,
  SCR_GAMECONST_getreflectionlocs = 694,
  SCR_GAMECONST_getreflectionorigin = 695,
  SCR_GAMECONST_getretrievableweapons = 696,
  SCR_GAMECONST_getrightarc = 697,
  SCR_GAMECONST_getrope = 698,
  SCR_GAMECONST_getscoremultiplier = 699,
  SCR_GAMECONST_getscriptbrake = 700,
  SCR_GAMECONST_getscriptmoverarray = 701,
  SCR_GAMECONST_getseatfiringangles = 702,
  SCR_GAMECONST_getseatfiringorigin = 703,
  SCR_GAMECONST_getseatoccupant = 704,
  SCR_GAMECONST_getservertime = 705,
  SCR_GAMECONST_getservervolumetricfogdensity = 706,
  SCR_GAMECONST_getsessstat = 707,
  SCR_GAMECONST_getsessstatarraycount = 708,
  SCR_GAMECONST_setsessstat = 709,
  SCR_GAMECONST_addsessstat = 710,
  SCR_GAMECONST_getshootatpos = 711,
  SCR_GAMECONST_getsnapshotindexarray = 712,
  SCR_GAMECONST_getsortedspawnpoints = 713,
  SCR_GAMECONST_getsoundcount = 714,
  SCR_GAMECONST_getsoundname = 715,
  SCR_GAMECONST_getspawnerarray = 716,
  SCR_GAMECONST_getspawnerteamarray = 717,
  SCR_GAMECONST_getspeed = 718,
  SCR_GAMECONST_getspeedmph = 719,
  SCR_GAMECONST_getstance = 720,
  SCR_GAMECONST_getstartangles = 721,
  SCR_GAMECONST_getstartorigin = 722,
  SCR_GAMECONST_getstarttime = 723,
  SCR_GAMECONST_getsteering = 724,
  SCR_GAMECONST_getsubstr = 725,
  SCR_GAMECONST_getsurfacestrings = 726,
  SCR_GAMECONST_findstaticmodelindex = 727,
  SCR_GAMECONST_hidestaticmodel = 728,
  SCR_GAMECONST_unhidestaticmodel = 729,
  SCR_GAMECONST_getsystemtime = 730,
  SCR_GAMECONST_gettagangles = 731,
  SCR_GAMECONST_gettagforwardvector = 732,
  SCR_GAMECONST_gettagorigin = 733,
  SCR_GAMECONST_gettargetentity = 734,
  SCR_GAMECONST_gettargetorigin = 735,
  SCR_GAMECONST_getteam = 736,
  SCR_GAMECONST_getteamplayersalive = 737,
  SCR_GAMECONST_getteamsatellite = 738,
  SCR_GAMECONST_getteamscore = 739,
  SCR_GAMECONST_getteamspyplane = 740,
  SCR_GAMECONST_gettextwidth = 741,
  SCR_GAMECONST_getthreat = 742,
  SCR_GAMECONST_getthreatbias = 743,
  SCR_GAMECONST_getthreatbiasgroup = 744,
  SCR_GAMECONST_getthrottle = 745,
  SCR_GAMECONST_gettime = 746,
  SCR_GAMECONST_gettimescale = 747,
  SCR_GAMECONST_gettoparc = 748,
  SCR_GAMECONST_gettotalammo = 749,
  SCR_GAMECONST_getturret = 750,
  SCR_GAMECONST_getturretheatvalue = 751,
  SCR_GAMECONST_getturretowner = 752,
  SCR_GAMECONST_getturretarclimits = 753,
  SCR_GAMECONST_getturrettarget = 754,
  SCR_GAMECONST_getvalidcoverpeekouts = 755,
  SCR_GAMECONST_getvehiclearray = 756,
  SCR_GAMECONST_getvehicleavoidance = 757,
  SCR_GAMECONST_getvehiclehealth = 758,
  SCR_GAMECONST_getvehiclenode = 759,
  SCR_GAMECONST_getvehiclenodearray = 760,
  SCR_GAMECONST_getvehicleoccupied = 761,
  SCR_GAMECONST_getvehicleowner = 762,
  SCR_GAMECONST_getvehiclespawnerarray = 763,
  SCR_GAMECONST_getvehicletreadfxarray = 764,
  SCR_GAMECONST_getvehicletriggerflags = 765,
  SCR_GAMECONST_getvehoccupants = 766,
  SCR_GAMECONST_getvelocity = 767,
  SCR_GAMECONST_getviewmodel = 768,
  SCR_GAMECONST_getvisionsetnaked = 769,
  SCR_GAMECONST_getwagergametypelist = 770,
  SCR_GAMECONST_getwatcherweapons = 771,
  SCR_GAMECONST_getwaterheight = 772,
  SCR_GAMECONST_getweaponaccuracy = 773,
  SCR_GAMECONST_getweaponammoclip = 774,
  SCR_GAMECONST_getweaponammostock = 775,
  SCR_GAMECONST_getweaponclipmodel = 776,
  SCR_GAMECONST_getweaponfiresound = 777,
  SCR_GAMECONST_getweaponfiresoundplayer = 778,
  SCR_GAMECONST_getweaponforwarddir = 779,
  SCR_GAMECONST_getweaponfusetime = 780,
  SCR_GAMECONST_getweaponindexfromname = 781,
  SCR_GAMECONST_getweaponmaxdamage = 782,
  SCR_GAMECONST_getweaponmaxdamagerange = 783,
  SCR_GAMECONST_getweaponmindamage = 784,
  SCR_GAMECONST_getweaponmindamagerange = 785,
  SCR_GAMECONST_getweaponmodel = 786,
  SCR_GAMECONST_getweaponmuzzlepoint = 787,
  SCR_GAMECONST_getweaponpickupsound = 788,
  SCR_GAMECONST_getweaponpickupsoundplayer = 789,
  SCR_GAMECONST_getweaponposfrac = 790,
  SCR_GAMECONST_getweaponprojexplosionsound = 791,
  SCR_GAMECONST_getweaponrenderoptions = 792,
  SCR_GAMECONST_getweaponslist = 793,
  SCR_GAMECONST_getweaponslistprimaries = 794,
  SCR_GAMECONST_getweaponstowedmodel = 795,
  SCR_GAMECONST_getwheelsurface = 796,
  SCR_GAMECONST_getworldfogscriptid = 797,
  SCR_GAMECONST_getxuid = 798,
  SCR_GAMECONST_gib = 799,
  SCR_GAMECONST_giveachievement = 800,
  SCR_GAMECONST_givegamerpicture = 801,
  SCR_GAMECONST_givemaxammo = 802,
  SCR_GAMECONST_givenextbaseweapon = 803,
  SCR_GAMECONST_givestartammo = 804,
  SCR_GAMECONST_giveweapon = 805,
  SCR_GAMECONST_giveweaponnextattachment = 806,
  SCR_GAMECONST_glassradiusdamage = 807,
  SCR_GAMECONST_glowalpha = 808,
  SCR_GAMECONST_glowcolor = 809,
  SCR_GAMECONST_goalangle = 810,
  SCR_GAMECONST_goalheight = 811,
  SCR_GAMECONST_goalpos = 812,
  SCR_GAMECONST_goalradius = 813,
  SCR_GAMECONST_goodshootpos = 814,
  SCR_GAMECONST_goodshootposvalid = 815,
  SCR_GAMECONST_gpr = 816,
  SCR_GAMECONST_grenade = 817,
  SCR_GAMECONST_grenadeammo = 818,
  SCR_GAMECONST_grenadeawareness = 819,
  SCR_GAMECONST_grenadeawarness = 820,
  SCR_GAMECONST_grenadeexplosioneffect = 821,
  SCR_GAMECONST_grenadethrowback = 822,
  SCR_GAMECONST_grenadeweapon = 823,
  SCR_GAMECONST_groundentity = 824,
  SCR_GAMECONST_groundsurfacetype = 825,
  SCR_GAMECONST_groundtrace = 826,
  SCR_GAMECONST_groundtype = 827,
  SCR_GAMECONST_gunblockedbywall = 828,
  SCR_GAMECONST_hasagrenadepulledback = 829,
  SCR_GAMECONST_hasallintel = 830,
  SCR_GAMECONST_hasanimtree = 831,
  SCR_GAMECONST_hascollectible = 832,
  SCR_GAMECONST_hascompletedallgamechallenges = 833,
  SCR_GAMECONST_hasdobj = 834,
  SCR_GAMECONST_hasdstats = 835,
  SCR_GAMECONST_haspath = 836,
  SCR_GAMECONST_hasperk = 837,
  SCR_GAMECONST_hassatellite = 838,
  SCR_GAMECONST_hasscriptgoal = 839,
  SCR_GAMECONST_hasspyplane = 840,
  SCR_GAMECONST_hastacticalmaskoverlay = 841,
  SCR_GAMECONST_hasusedweapon = 842,
  SCR_GAMECONST_hasweapon = 843,
  SCR_GAMECONST_headicon = 844,
  SCR_GAMECONST_headiconteam = 845,
  SCR_GAMECONST_headshots = 846,
  SCR_GAMECONST_health = 847,
  SCR_GAMECONST_healthdefault = 848,
  SCR_GAMECONST_healthmax = 849,
  SCR_GAMECONST_healthmin = 850,
  SCR_GAMECONST_height = 851,
  SCR_GAMECONST_heliheightlockoffset = 852,
  SCR_GAMECONST_hide = 853,
  SCR_GAMECONST_hidepart = 854,
  SCR_GAMECONST_hidescores = 855,
  SCR_GAMECONST_hideviewmodel = 856,
  SCR_GAMECONST_hidewhendead = 857,
  SCR_GAMECONST_hidewhenindemo = 858,
  SCR_GAMECONST_hidewheninkillcam = 859,
  SCR_GAMECONST_hidewheninmenu = 860,
  SCR_GAMECONST_hidewheninscope = 861,
  SCR_GAMECONST_hidewhileremotecontrolling = 862,
  SCR_GAMECONST_highlyawareradius = 863,
  SCR_GAMECONST_horzalign = 864,
  SCR_GAMECONST_humiliated = 865,
  SCR_GAMECONST_ignoreall = 866,
  SCR_GAMECONST_ignoreclosefoliage = 867,
  SCR_GAMECONST_ignoreexplosionevents = 868,
  SCR_GAMECONST_ignoreforfixednodesafecheck = 869,
  SCR_GAMECONST_ignoreforfriendlyfire = 870,
  SCR_GAMECONST_ignorelocationaldamage = 871,
  SCR_GAMECONST_ignoreme = 872,
  SCR_GAMECONST_ignorerandombulletdamage = 873,
  SCR_GAMECONST_ignoresuppression = 874,
  SCR_GAMECONST_ignoretriggers = 875,
  SCR_GAMECONST_ikpriority = 876,
  SCR_GAMECONST_incrementcounter = 877,
  SCR_GAMECONST_index = 878,
  SCR_GAMECONST_initchallengestats = 879,
  SCR_GAMECONST_initclientobjectives = 880,
  SCR_GAMECONST_initdec20terminal = 881,
  SCR_GAMECONST_inmeleecharge = 882,
  SCR_GAMECONST_int = 883,
  SCR_GAMECONST_interval = 884,
  SCR_GAMECONST_inventorybuttonpressed = 885,
  SCR_GAMECONST_iprintln = 886,
  SCR_GAMECONST_iprintlnbold = 887,
  SCR_GAMECONST_isads = 888,
  SCR_GAMECONST_isai = 889,
  SCR_GAMECONST_isalive = 890,
  SCR_GAMECONST_isanimleaf = 891,
  SCR_GAMECONST_isanimloaded = 892,
  SCR_GAMECONST_isanimlooping = 893,
  SCR_GAMECONST_isarray = 894,
  SCR_GAMECONST_isassetloaded = 895,
  SCR_GAMECONST_isbadguy = 896,
  SCR_GAMECONST_isbeingwatched = 897,
  SCR_GAMECONST_isbigdog = 898,
  SCR_GAMECONST_isbonuscardactive = 899,
  SCR_GAMECONST_isbinkfinished = 900,
  SCR_GAMECONST_isburning = 901,
  SCR_GAMECONST_iscameraspiketoggled = 902,
  SCR_GAMECONST_iscarryingturret = 903,
  SCR_GAMECONST_iscoopepd = 904,
  SCR_GAMECONST_isdeflected = 905,
  SCR_GAMECONST_isdemoplaying = 906,
  SCR_GAMECONST_isdog = 907,
  SCR_GAMECONST_isdriving = 908,
  SCR_GAMECONST_isempjammed = 909,
  SCR_GAMECONST_isextracam = 910,
  SCR_GAMECONST_isfiring = 911,
  SCR_GAMECONST_isfiringturret = 912,
  SCR_GAMECONST_isflared = 913,
  SCR_GAMECONST_isfloat = 914,
  SCR_GAMECONST_isfxplaying = 915,
  SCR_GAMECONST_isglobalstatsserver = 916,
  SCR_GAMECONST_isgodmode = 917,
  SCR_GAMECONST_isgrenadepossafe = 918,
  SCR_GAMECONST_isgunnerfiring = 919,
  SCR_GAMECONST_ishost = 920,
  SCR_GAMECONST_isingoal = 921,
  SCR_GAMECONST_isinhelicopter = 922,
  SCR_GAMECONST_isinmovemode = 923,
  SCR_GAMECONST_isinscriptedstate = 924,
  SCR_GAMECONST_isinsideheliheightlock = 925,
  SCR_GAMECONST_isint = 926,
  SCR_GAMECONST_isinvehicle = 927,
  SCR_GAMECONST_isknownenemyinradius = 928,
  SCR_GAMECONST_isknownenemyinvolume = 929,
  SCR_GAMECONST_islocalclientdriver = 930,
  SCR_GAMECONST_islocalplayer = 931,
  SCR_GAMECONST_islocalplayerviewlinked = 932,
  SCR_GAMECONST_islocalplayerweaponviewonlylinked = 933,
  SCR_GAMECONST_islocaltohost = 934,
  SCR_GAMECONST_islookingat = 935,
  SCR_GAMECONST_ismantling = 936,
  SCR_GAMECONST_ismaturecontentenabled = 937,
  SCR_GAMECONST_ismeleeing = 938,
  SCR_GAMECONST_ismixerbehaviorhardcoded = 939,
  SCR_GAMECONST_ismixerlightbehaviorhardcoded = 940,
  SCR_GAMECONST_ismovesuppressed = 941,
  SCR_GAMECONST_ismp = 942,
  SCR_GAMECONST_isnodeoccupied = 943,
  SCR_GAMECONST_isnoreclosefoliage = 944,
  SCR_GAMECONST_isnotarget = 945,
  SCR_GAMECONST_isonground = 946,
  SCR_GAMECONST_isonladder = 947,
  SCR_GAMECONST_isonturret = 948,
  SCR_GAMECONST_ispathdirect = 949,
  SCR_GAMECONST_ispc = 950,
  SCR_GAMECONST_ispeelingout = 951,
  SCR_GAMECONST_isphysicsvehicle = 952,
  SCR_GAMECONST_isplayer = 953,
  SCR_GAMECONST_isplayernumber = 954,
  SCR_GAMECONST_isplayeronsamemachine = 955,
  SCR_GAMECONST_isplayerreloading = 956,
  SCR_GAMECONST_isplayingloopsound = 957,
  SCR_GAMECONST_ispoisoned = 958,
  SCR_GAMECONST_ispregameenabled = 959,
  SCR_GAMECONST_ispregamegamestarted = 960,
  SCR_GAMECONST_isps3 = 961,
  SCR_GAMECONST_isragdoll = 962,
  SCR_GAMECONST_isremotecontrolling = 963,
  SCR_GAMECONST_issaverecentlyloaded = 964,
  SCR_GAMECONST_issavesuccessful = 965,
  SCR_GAMECONST_isscrambled = 966,
  SCR_GAMECONST_issentient = 967,
  SCR_GAMECONST_isshufflecovernode = 968,
  SCR_GAMECONST_issoundloop = 969,
  SCR_GAMECONST_isspawner = 970,
  SCR_GAMECONST_isspawnpointvisible = 971,
  SCR_GAMECONST_isspectating = 972,
  SCR_GAMECONST_issplitscreen = 973,
  SCR_GAMECONST_issplitscreenhost = 974,
  SCR_GAMECONST_issprinting = 975,
  SCR_GAMECONST_isstartingclassdefault = 976,
  SCR_GAMECONST_isstartingclasseraappropriate = 977,
  SCR_GAMECONST_isstanceallowed = 978,
  SCR_GAMECONST_isstereoon = 979,
  SCR_GAMECONST_isstring = 980,
  SCR_GAMECONST_issubstr = 981,
  SCR_GAMECONST_issuppressed = 982,
  SCR_GAMECONST_issuppressionwaiting = 983,
  SCR_GAMECONST_isswitchingweapons = 984,
  SCR_GAMECONST_istalking = 985,
  SCR_GAMECONST_isthrowinggrenade = 986,
  SCR_GAMECONST_istouching = 987,
  SCR_GAMECONST_istring = 988,
  SCR_GAMECONST_isturretactive = 989,
  SCR_GAMECONST_isturretfiring = 990,
  SCR_GAMECONST_isturretready = 991,
  SCR_GAMECONST_isvalidgametype = 992,
  SCR_GAMECONST_isvec = 993,
  SCR_GAMECONST_isvehicle = 994,
  SCR_GAMECONST_isvehicleimmunetodamage = 995,
  SCR_GAMECONST_isvehicleturretoverheating = 996,
  SCR_GAMECONST_isvehicleusable = 997,
  SCR_GAMECONST_isvehicleinwater = 998,
  SCR_GAMECONST_iswaitingonsound = 999,
  SCR_GAMECONST_isweaponcliponly = 1000,
  SCR_GAMECONST_isweapondetonationtimed = 1001,
  SCR_GAMECONST_isweaponequipment = 1002,
  SCR_GAMECONST_isweaponoverheating = 1003,
  SCR_GAMECONST_isweaponprimary = 1004,
  SCR_GAMECONST_isweaponscopeoverlay = 1005,
  SCR_GAMECONST_isweaponspecificuse = 1006,
  SCR_GAMECONST_isweaponviewonlylinked = 1007,
  SCR_GAMECONST_iswheelcolliding = 1008,
  SCR_GAMECONST_iswheelsliding = 1009,
  SCR_GAMECONST_iswounded = 1010,
  SCR_GAMECONST_isxenon = 1011,
  SCR_GAMECONST_itemweaponsetammo = 1012,
  SCR_GAMECONST_itemweaponsetoptions = 1013,
  SCR_GAMECONST_joltbody = 1014,
  SCR_GAMECONST_jumpbuttonpressed = 1015,
  SCR_GAMECONST_keepclaimednode = 1016,
  SCR_GAMECONST_keepclaimednodeifvalid = 1017,
  SCR_GAMECONST_keepnodeduringscriptedanim = 1018,
  SCR_GAMECONST_kick = 1019,
  SCR_GAMECONST_kill = 1020,
  SCR_GAMECONST_killcamentity = 1021,
  SCR_GAMECONST_killcamtargetentity = 1022,
  SCR_GAMECONST_kills = 1023,
  SCR_GAMECONST_killserver = 1024,
  SCR_GAMECONST_knockback = 1025,
  SCR_GAMECONST_label = 1026,
  SCR_GAMECONST_laseroff = 1027,
  SCR_GAMECONST_laseron = 1028,
  SCR_GAMECONST_lastenemysightpos = 1029,
  SCR_GAMECONST_lastknownpos = 1030,
  SCR_GAMECONST_lastknowntime = 1031,
  SCR_GAMECONST_lastscriptstate = 1032,
  SCR_GAMECONST_launch = 1033,
  SCR_GAMECONST_launchbomb = 1034,
  SCR_GAMECONST_launchdynent = 1035,
  SCR_GAMECONST_launchlevel = 1036,
  SCR_GAMECONST_launchragdoll = 1037,
  SCR_GAMECONST_launchvehicle = 1038,
  SCR_GAMECONST_leanamount = 1039,
  SCR_GAMECONST_length = 1040,
  SCR_GAMECONST_lengthsquared = 1041,
  SCR_GAMECONST_lerp_to_darker = 1042,
  SCR_GAMECONST_lerp_to_lighter = 1043,
  SCR_GAMECONST_lerpfloat = 1044,
  SCR_GAMECONST_lerpposition = 1045,
  SCR_GAMECONST_lerpsundirection = 1046,
  SCR_GAMECONST_lerpvector = 1047,
  SCR_GAMECONST_lerpviewangleclamp = 1048,
  SCR_GAMECONST_line = 1049,
  SCR_GAMECONST_linelist = 1050,
  SCR_GAMECONST_linkguidedmissilecamera = 1051,
  SCR_GAMECONST_linknodes = 1052,
  SCR_GAMECONST_linkto = 1053,
  SCR_GAMECONST_linktoblendtotag = 1054,
  SCR_GAMECONST_linktocamera = 1055,
  SCR_GAMECONST_linktomissile = 1056,
  SCR_GAMECONST_loadfx = 1057,
  SCR_GAMECONST_loadgump = 1058,
  SCR_GAMECONST_localclientactive = 1059,
  SCR_GAMECONST_localtoworldcoords = 1060,
  SCR_GAMECONST_log = 1061,
  SCR_GAMECONST_logprint = 1062,
  SCR_GAMECONST_logstring = 1063,
  SCR_GAMECONST_lookahead = 1064,
  SCR_GAMECONST_lookaheaddir = 1065,
  SCR_GAMECONST_lookaheaddist = 1066,
  SCR_GAMECONST_lookaheadnodepos = 1067,
  SCR_GAMECONST_lookatent = 1068,
  SCR_GAMECONST_lookatentity = 1069,
  SCR_GAMECONST_lookatpos = 1070,
  SCR_GAMECONST_lookforward = 1071,
  SCR_GAMECONST_lookright = 1072,
  SCR_GAMECONST_lookup = 1073,
  SCR_GAMECONST_luinotifyevent = 1074,
  SCR_GAMECONST_magicbullet = 1075,
  SCR_GAMECONST_magicgrenade = 1076,
  SCR_GAMECONST_magicgrenademanual = 1077,
  SCR_GAMECONST_magicgrenadetype = 1078,
  SCR_GAMECONST_makedvarserverinfo = 1079,
  SCR_GAMECONST_makefakeai = 1080,
  SCR_GAMECONST_makelight = 1081,
  SCR_GAMECONST_makelocalizedstring = 1082,
  SCR_GAMECONST_makemixerlight = 1083,
  SCR_GAMECONST_maketurretunusable = 1084,
  SCR_GAMECONST_maketurretusable = 1085,
  SCR_GAMECONST_makeunusable = 1086,
  SCR_GAMECONST_makeusable = 1087,
  SCR_GAMECONST_makevehicleunusable = 1088,
  SCR_GAMECONST_makevehicleusable = 1089,
  SCR_GAMECONST_map = 1090,
  SCR_GAMECONST_map_material = 1091,
  SCR_GAMECONST_map_restart = 1092,
  SCR_GAMECONST_mapexists = 1093,
  SCR_GAMECONST_mapshaderconstant = 1094,
  SCR_GAMECONST_matchend = 1095,
  SCR_GAMECONST_material = 1096,
  SCR_GAMECONST_matrix4x4transformpoints = 1097,
  SCR_GAMECONST_max = 1098,
  SCR_GAMECONST_maxfaceenemydist = 1099,
  SCR_GAMECONST_maxhealth = 1100,
  SCR_GAMECONST_maxs = 1101,
  SCR_GAMECONST_maxsightdistsqrd = 1102,
  SCR_GAMECONST_maxvisibledist = 1103,
  SCR_GAMECONST_maymovefrompointtopoint = 1104,
  SCR_GAMECONST_maymovetopoint = 1105,
  SCR_GAMECONST_melee = 1106,
  SCR_GAMECONST_meleeattackdist = 1107,
  SCR_GAMECONST_meleebuttonpressed = 1108,
  SCR_GAMECONST_min = 1109,
  SCR_GAMECONST_minpaindamage = 1110,
  SCR_GAMECONST_mins = 1111,
  SCR_GAMECONST_minusedistsq = 1112,
  SCR_GAMECONST_missile_createattractorent = 1113,
  SCR_GAMECONST_missile_createattractororigin = 1114,
  SCR_GAMECONST_missile_createrepulsorent = 1115,
  SCR_GAMECONST_missile_createrepulsororigin = 1116,
  SCR_GAMECONST_missile_deleteattractor = 1117,
  SCR_GAMECONST_missile_settarget = 1118,
  SCR_GAMECONST_missile_dronesetvisible = 1119,
  SCR_GAMECONST_missionfailed = 1120,
  SCR_GAMECONST_missionsuccess = 1121,
  SCR_GAMECONST_model = 1122,
  SCR_GAMECONST_modelhasphyspreset = 1123,
  SCR_GAMECONST_modelswapdelay = 1124,
  SCR_GAMECONST_momentum = 1125,
  SCR_GAMECONST_movegravity = 1126,
  SCR_GAMECONST_movemode = 1127,
  SCR_GAMECONST_moveovertime = 1128,
  SCR_GAMECONST_moveslide = 1129,
  SCR_GAMECONST_moveto = 1130,
  SCR_GAMECONST_movex = 1131,
  SCR_GAMECONST_movey = 1132,
  SCR_GAMECONST_movez = 1133,
  SCR_GAMECONST_name = 1134,
  SCR_GAMECONST_nearclaimnode = 1135,
  SCR_GAMECONST_nearclaimnodeandangle = 1136,
  SCR_GAMECONST_nearnode = 1137,
  SCR_GAMECONST_netupdate = 1138,
  SCR_GAMECONST_newclienthudelem = 1139,
  SCR_GAMECONST_newdebughudelem = 1140,
  SCR_GAMECONST_newenemyreaction = 1141,
  SCR_GAMECONST_newenemyreactiondistsq = 1142,
  SCR_GAMECONST_newenemyreactionpos = 1143,
  SCR_GAMECONST_newhudelem = 1144,
  SCR_GAMECONST_newmaterialelem = 1145,
  SCR_GAMECONST_newmenuelem = 1146,
  SCR_GAMECONST_newscorehudelem = 1147,
  SCR_GAMECONST_newteamhudelem = 1148,
  SCR_GAMECONST_newtextelem = 1149,
  SCR_GAMECONST_nextallowedreacttime = 1150,
  SCR_GAMECONST_nextplayerrenderoption = 1151,
  SCR_GAMECONST_nightvisionforceoff = 1152,
  SCR_GAMECONST_noattackeraccuracymod = 1153,
  SCR_GAMECONST_node = 1154,
  SCR_GAMECONST_nodeoffsetpos = 1155,
  SCR_GAMECONST_nododgemove = 1156,
  SCR_GAMECONST_nogrenadereturnthrow = 1157,
  SCR_GAMECONST_nolean = 1158,
  SCR_GAMECONST_nopronerotation = 1159,
  SCR_GAMECONST_notifyoncommand = 1160,
  SCR_GAMECONST_notsolid = 1161,
  SCR_GAMECONST_numfreehudelem = 1162,
  SCR_GAMECONST_numremoteclients = 1163,
  SCR_GAMECONST_obituary = 1164,
  SCR_GAMECONST_objective_clearall = 1165,
  SCR_GAMECONST_objective_add = 1166,
  SCR_GAMECONST_objective_add_team = 1167,
  SCR_GAMECONST_objective_additionalcurrent = 1168,
  SCR_GAMECONST_objective_additionalposition = 1169,
  SCR_GAMECONST_objective_current = 1170,
  SCR_GAMECONST_objective_delete = 1171,
  SCR_GAMECONST_objective_flipicon = 1172,
  SCR_GAMECONST_objective_icon = 1173,
  SCR_GAMECONST_objective_onentity = 1174,
  SCR_GAMECONST_objective_position = 1175,
  SCR_GAMECONST_objective_ring = 1176,
  SCR_GAMECONST_objective_set3d = 1177,
  SCR_GAMECONST_objective_setcolor = 1178,
  SCR_GAMECONST_objective_setflag = 1179,
  SCR_GAMECONST_objective_seticon = 1180,
  SCR_GAMECONST_objective_setinvisibletoall = 1181,
  SCR_GAMECONST_objective_setinvisibletoplayer = 1182,
  SCR_GAMECONST_objective_seticonsize = 1183,
  SCR_GAMECONST_objective_setstencil = 1184,
  SCR_GAMECONST_objective_setsize = 1185,
  SCR_GAMECONST_objective_setvisibletoall = 1186,
  SCR_GAMECONST_objective_setvisibletoplayer = 1187,
  SCR_GAMECONST_objective_size = 1188,
  SCR_GAMECONST_objective_state = 1189,
  SCR_GAMECONST_objective_string = 1190,
  SCR_GAMECONST_objective_string_nomessage = 1191,
  SCR_GAMECONST_objective_team = 1192,
  SCR_GAMECONST_objective_printtext = 1193,
  SCR_GAMECONST_oktospawn = 1194,
  SCR_GAMECONST_oneexhaust = 1195,
  SCR_GAMECONST_openfile = 1196,
  SCR_GAMECONST_openmainmenu = 1197,
  SCR_GAMECONST_openmenu = 1198,
  SCR_GAMECONST_openmenunomouse = 1199,
  SCR_GAMECONST_orientmode = 1200,
  SCR_GAMECONST_origin = 1201,
  SCR_GAMECONST_pacifist = 1202,
  SCR_GAMECONST_pacifistwait = 1203,
  SCR_GAMECONST_pathdistancetraveled = 1204,
  SCR_GAMECONST_pathenemyfightdist = 1205,
  SCR_GAMECONST_pathenemylookahead = 1206,
  SCR_GAMECONST_pathfixedoffset = 1207,
  SCR_GAMECONST_pathfixedoffsetclear = 1208,
  SCR_GAMECONST_pathgoalpos = 1209,
  SCR_GAMECONST_pathlookpos = 1210,
  SCR_GAMECONST_pathmove = 1211,
  SCR_GAMECONST_pathmoveclear = 1212,
  SCR_GAMECONST_pathpos = 1213,
  SCR_GAMECONST_pathrandompercent = 1214,
  SCR_GAMECONST_pathstartpos = 1215,
  SCR_GAMECONST_pathvariableoffset = 1216,
  SCR_GAMECONST_pathvariableoffsetclear = 1217,
  SCR_GAMECONST_pathwidth = 1218,
  SCR_GAMECONST_pathwidthlookaheadfrac = 1219,
  SCR_GAMECONST_pause3dcinematic = 1220,
  SCR_GAMECONST_pcserverupdateplaylist = 1221,
  SCR_GAMECONST_perfectaim = 1222,
  SCR_GAMECONST_pers = 1223,
  SCR_GAMECONST_physicsexplosioncylinder = 1224,
  SCR_GAMECONST_physicsexplosionsphere = 1225,
  SCR_GAMECONST_physicsjolt = 1226,
  SCR_GAMECONST_physicslaunch = 1227,
  SCR_GAMECONST_physicstrace = 1228,
  SCR_GAMECONST_physicstraceex = 1229,
  SCR_GAMECONST_pickupgrenade = 1230,
  SCR_GAMECONST_pingplayer = 1231,
  SCR_GAMECONST_pixbeginevent = 1232,
  SCR_GAMECONST_pixendevent = 1233,
  SCR_GAMECONST_pixmarker = 1234,
  SCR_GAMECONST_placespawnpoint = 1235,
  SCR_GAMECONST_plants = 1236,
  SCR_GAMECONST_playbink = 1237,
  SCR_GAMECONST_playclientairstrike = 1238,
  SCR_GAMECONST_playclientnapalm = 1239,
  SCR_GAMECONST_player_setoffscreendownmaterial = 1240,
  SCR_GAMECONST_player_setoffscreenmaterial = 1241,
  SCR_GAMECONST_playerads = 1242,
  SCR_GAMECONST_playeranimscriptevent = 1243,
  SCR_GAMECONST_playeranimscripteventend = 1244,
  SCR_GAMECONST_playerbullettrace = 1245,
  SCR_GAMECONST_playercamlinkto = 1246,
  SCR_GAMECONST_playercamunlink = 1247,
  SCR_GAMECONST_playerknockback = 1248,
  SCR_GAMECONST_playerlinkedoffsetdisable = 1249,
  SCR_GAMECONST_playerlinkedoffsetenable = 1250,
  SCR_GAMECONST_playerlinkedsetusebaseangleforviewclamp = 1251,
  SCR_GAMECONST_playerlinkto = 1252,
  SCR_GAMECONST_playerlinktoabsolute = 1253,
  SCR_GAMECONST_playerlinktoblend = 1254,
  SCR_GAMECONST_playerlinktodelta = 1255,
  SCR_GAMECONST_playerlinkweaponviewtodelta = 1256,
  SCR_GAMECONST_playername = 1257,
  SCR_GAMECONST_playerphysicstrace = 1258,
  SCR_GAMECONST_playerpositionvalid = 1259,
  SCR_GAMECONST_playersetgroundreferenceent = 1260,
  SCR_GAMECONST_playersighttrace = 1261,
  SCR_GAMECONST_playfx = 1262,
  SCR_GAMECONST_playfxondynent = 1263,
  SCR_GAMECONST_playfxontag = 1264,
  SCR_GAMECONST_playlocalsound = 1265,
  SCR_GAMECONST_playloopedfx = 1266,
  SCR_GAMECONST_playloopsound = 1267,
  SCR_GAMECONST_playrumblelooponentity = 1268,
  SCR_GAMECONST_playrumblelooponposition = 1269,
  SCR_GAMECONST_playrumbleonentity = 1270,
  SCR_GAMECONST_playrumbleonposition = 1271,
  SCR_GAMECONST_playsound = 1272,
  SCR_GAMECONST_playsoundasmaster = 1273,
  SCR_GAMECONST_playsoundatposition = 1274,
  SCR_GAMECONST_playsoundontag = 1275,
  SCR_GAMECONST_playsoundtoplayer = 1276,
  SCR_GAMECONST_playviewmodelfx = 1277,
  SCR_GAMECONST_playweapondamageeffects = 1278,
  SCR_GAMECONST_playweapondeatheffects = 1279,
  SCR_GAMECONST_pointonsegmentnearesttopoint = 1280,
  SCR_GAMECONST_popaistate = 1281,
  SCR_GAMECONST_positionwouldtelefrag = 1282,
  SCR_GAMECONST_pow = 1283,
  SCR_GAMECONST_precacheheadicon = 1284,
  SCR_GAMECONST_precacheitem = 1285,
  SCR_GAMECONST_precachelocationselector = 1286,
  SCR_GAMECONST_precachemenu = 1287,
  SCR_GAMECONST_precachemodel = 1288,
  SCR_GAMECONST_precacherumble = 1289,
  SCR_GAMECONST_precacheshader = 1290,
  SCR_GAMECONST_precacheshellshock = 1291,
  SCR_GAMECONST_precachespawner = 1292,
  SCR_GAMECONST_precachestatusicon = 1293,
  SCR_GAMECONST_precachestring = 1294,
  SCR_GAMECONST_precacheturret = 1295,
  SCR_GAMECONST_precachevehicle = 1296,
  SCR_GAMECONST_predictanim = 1297,
  SCR_GAMECONST_predictoriginandangles = 1298,
  SCR_GAMECONST_prefetchlevel = 1299,
  SCR_GAMECONST_pregamestartgame = 1300,
  SCR_GAMECONST_presentation = 1301,
  SCR_GAMECONST_pressattackbutton = 1302,
  SCR_GAMECONST_pressusebutton = 1303,
  SCR_GAMECONST_prevanimdelta = 1304,
  SCR_GAMECONST_prevnode = 1305,
  SCR_GAMECONST_primaryweapon = 1306,
  SCR_GAMECONST_print = 1307,
  SCR_GAMECONST_print3d = 1308,
  SCR_GAMECONST_println = 1309,
  SCR_GAMECONST_profilelog_begintiming = 1310,
  SCR_GAMECONST_profilelog_endtiming = 1311,
  SCR_GAMECONST_proneok = 1312,
  SCR_GAMECONST_providecoveringfire = 1313,
  SCR_GAMECONST_psoffsettime = 1314,
  SCR_GAMECONST_pushable = 1315,
  SCR_GAMECONST_pushplayer = 1316,
  SCR_GAMECONST_qsortscoredspawnpointsascending = 1317,
  SCR_GAMECONST_quitlobby = 1318,
  SCR_GAMECONST_quitparty = 1319,
  SCR_GAMECONST_radius = 1320,
  SCR_GAMECONST_radiusdamage = 1321,
  SCR_GAMECONST_radiusdamagemax = 1322,
  SCR_GAMECONST_radiusdamagemin = 1323,
  SCR_GAMECONST_radiusdamageradius = 1324,
  SCR_GAMECONST_randomfloat = 1325,
  SCR_GAMECONST_randomfloatrange = 1326,
  SCR_GAMECONST_randomint = 1327,
  SCR_GAMECONST_randomintrange = 1328,
  SCR_GAMECONST_rate = 1329,
  SCR_GAMECONST_reacquiremove = 1330,
  SCR_GAMECONST_reacquirestep = 1331,
  SCR_GAMECONST_reactorigin = 1332,
  SCR_GAMECONST_reconnectvehiclenodes = 1333,
  SCR_GAMECONST_record3dtext = 1334,
  SCR_GAMECONST_recordcircle = 1335,
  SCR_GAMECONST_recordent = 1336,
  SCR_GAMECONST_recordenttext = 1337,
  SCR_GAMECONST_recorderplayback = 1338,
  SCR_GAMECONST_recordline = 1339,
  SCR_GAMECONST_recordmatchbegin = 1340,
  SCR_GAMECONST_recordplayermatchend = 1341,
  SCR_GAMECONST_recordplayerstats = 1342,
  SCR_GAMECONST_recordsphere = 1343,
  SCR_GAMECONST_recordusedspawnpoint = 1344,
  SCR_GAMECONST_refreshhudammocounter = 1345,
  SCR_GAMECONST_refreshhudcompass = 1346,
  SCR_GAMECONST_registerxp = 1347,
  SCR_GAMECONST_relativedir = 1348,
  SCR_GAMECONST_releaseclaimedtrigger = 1349,
  SCR_GAMECONST_relinktoturret = 1350,
  SCR_GAMECONST_reloadbuttonpressed = 1351,
  SCR_GAMECONST_removeaieventlistener = 1352,
  SCR_GAMECONST_removeallfriendlyscramblers = 1353,
  SCR_GAMECONST_removeforcenocull = 1354,
  SCR_GAMECONST_removefriendlyscrambler = 1355,
  SCR_GAMECONST_removeinfluencer = 1356,
  SCR_GAMECONST_removevehiclefromcompass = 1357,
  SCR_GAMECONST_reportclientdisconnected = 1358,
  SCR_GAMECONST_gamerepthresholdexceeded = 1359,
  SCR_GAMECONST_reportmtu = 1360,
  SCR_GAMECONST_reportuser = 1361,
  SCR_GAMECONST_requestarrivalnotify = 1362,
  SCR_GAMECONST_reset = 1363,
  SCR_GAMECONST_resetadswidthandlerp = 1364,
  SCR_GAMECONST_resetailimit = 1365,
  SCR_GAMECONST_resetcompassscale = 1366,
  SCR_GAMECONST_resetcurve = 1367,
  SCR_GAMECONST_resetmissiledetonationtime = 1368,
  SCR_GAMECONST_resetplayerviewratescale = 1369,
  SCR_GAMECONST_resetqosgamedatapayload = 1370,
  SCR_GAMECONST_resetspreadoverride = 1371,
  SCR_GAMECONST_resetsundirection = 1372,
  SCR_GAMECONST_resetsunlight = 1373,
  SCR_GAMECONST_resettimeout = 1374,
  SCR_GAMECONST_resetviewclamp = 1375,
  SCR_GAMECONST_restoredefaultdroppitch = 1376,
  SCR_GAMECONST_resumespeed = 1377,
  SCR_GAMECONST_returnplayercontrol = 1378,
  SCR_GAMECONST_returns = 1379,
  SCR_GAMECONST_revive = 1380,
  SCR_GAMECONST_reviveobituary = 1381,
  SCR_GAMECONST_reviveplayer = 1382,
  SCR_GAMECONST_revives = 1383,
  SCR_GAMECONST_ropeaddentityanchor = 1384,
  SCR_GAMECONST_ropeaddworldanchor = 1385,
  SCR_GAMECONST_ropecollide = 1386,
  SCR_GAMECONST_ropegetposition = 1387,
  SCR_GAMECONST_ropemoveanchor = 1388,
  SCR_GAMECONST_roperemoveanchor = 1389,
  SCR_GAMECONST_ropesetflag = 1390,
  SCR_GAMECONST_ropesetparam = 1391,
  SCR_GAMECONST_rotatepitch = 1392,
  SCR_GAMECONST_rotatepoint = 1393,
  SCR_GAMECONST_rotateroll = 1394,
  SCR_GAMECONST_rotateto = 1395,
  SCR_GAMECONST_rotatevelocity = 1396,
  SCR_GAMECONST_rotateyaw = 1397,
  SCR_GAMECONST_rumbleadditionaltime = 1398,
  SCR_GAMECONST_rumblebasetime = 1399,
  SCR_GAMECONST_rumbleduration = 1400,
  SCR_GAMECONST_rumbleradius = 1401,
  SCR_GAMECONST_rumblescale = 1402,
  SCR_GAMECONST_rumbletype = 1403,
  SCR_GAMECONST_runscriptonent = 1404,
  SCR_GAMECONST_safetochangescript = 1405,
  SCR_GAMECONST_savegame = 1406,
  SCR_GAMECONST_savegamenocommit = 1407,
  SCR_GAMECONST_sayall = 1408,
  SCR_GAMECONST_sayteam = 1409,
  SCR_GAMECONST_scalebuoyancy = 1410,
  SCR_GAMECONST_scaleovertime = 1411,
  SCR_GAMECONST_scalespeed = 1412,
  SCR_GAMECONST_score = 1413,
  SCR_GAMECONST_script_linkname = 1414,
  SCR_GAMECONST_script_noteworthy = 1415,
  SCR_GAMECONST_script_owner = 1416,
  SCR_GAMECONST_scriptenemy = 1417,
  SCR_GAMECONST_scriptenemytag = 1418,
  SCR_GAMECONST_scriptstate = 1419,
  SCR_GAMECONST_searchforonlinegames = 1420,
  SCR_GAMECONST_seatgetweapon = 1421,
  SCR_GAMECONST_secondaryoffhandbuttonpressed = 1422,
  SCR_GAMECONST_secondaryweapon = 1423,
  SCR_GAMECONST_seerecently = 1424,
  SCR_GAMECONST_sendaiscriptkeys = 1425,
  SCR_GAMECONST_sendaiscriptvals = 1426,
  SCR_GAMECONST_sendfaceevent = 1427,
  SCR_GAMECONST_sendranks = 1428,
  SCR_GAMECONST_sessionmodeisonlinegame = 1429,
  SCR_GAMECONST_sessionmodeisprivate = 1430,
  SCR_GAMECONST_sessionmodeisprivateonlinegame = 1431,
  SCR_GAMECONST_sessionmodeissystemlink = 1432,
  SCR_GAMECONST_sessionmodeiszombiesgame = 1433,
  SCR_GAMECONST_sessionstate = 1434,
  SCR_GAMECONST_sessionteam = 1435,
  SCR_GAMECONST_set_filter_pass_constant = 1436,
  SCR_GAMECONST_set_filter_pass_enabled = 1437,
  SCR_GAMECONST_set_filter_pass_material = 1438,
  SCR_GAMECONST_set_filter_pass_quads = 1439,
  SCR_GAMECONST_set_filter_bit_flag = 1440,
  SCR_GAMECONST_set_overlay_constant = 1441,
  SCR_GAMECONST_set_overlay_enabled = 1442,
  SCR_GAMECONST_set_overlay_material = 1443,
  SCR_GAMECONST_setacceleration = 1444,
  SCR_GAMECONST_setactionslot = 1445,
  SCR_GAMECONST_setadswidthandlerp = 1446,
  SCR_GAMECONST_setafteractionreportstate = 1447,
  SCR_GAMECONST_setailimit = 1448,
  SCR_GAMECONST_setaimanims = 1449,
  SCR_GAMECONST_setaimanimweights = 1450,
  SCR_GAMECONST_setairresistance = 1451,
  SCR_GAMECONST_setaispread = 1452,
  SCR_GAMECONST_setambientsnapshot = 1453,
  SCR_GAMECONST_setambientsidechainduck = 1454,
  SCR_GAMECONST_setangularvelocity = 1455,
  SCR_GAMECONST_setanim = 1456,
  SCR_GAMECONST_setanimdumpuseserveranims = 1457,
  SCR_GAMECONST_setanimforcenew = 1458,
  SCR_GAMECONST_setanimknob = 1459,
  SCR_GAMECONST_setanimknoball = 1460,
  SCR_GAMECONST_setanimknoballlimited = 1461,
  SCR_GAMECONST_setanimknoballlimitedrestart = 1462,
  SCR_GAMECONST_setanimknoballrestart = 1463,
  SCR_GAMECONST_setanimknoblimited = 1464,
  SCR_GAMECONST_setanimknoblimitedrestart = 1465,
  SCR_GAMECONST_setanimknobrestart = 1466,
  SCR_GAMECONST_setanimlimited = 1467,
  SCR_GAMECONST_setanimlimitedrestart = 1468,
  SCR_GAMECONST_setanimratecomplete = 1469,
  SCR_GAMECONST_setanimrestart = 1470,
  SCR_GAMECONST_setanimstate = 1471,
  SCR_GAMECONST_setanimtime = 1472,
  SCR_GAMECONST_setarchive = 1473,
  SCR_GAMECONST_setattacker = 1474,
  SCR_GAMECONST_setautopickup = 1475,
  SCR_GAMECONST_setblockweaponpickup = 1476,
  SCR_GAMECONST_setblur = 1477,
  SCR_GAMECONST_setbombtimer = 1478,
  SCR_GAMECONST_setbottomarc = 1479,
  SCR_GAMECONST_setbrake = 1480,
  SCR_GAMECONST_setburn = 1481,
  SCR_GAMECONST_setcandamage = 1482,
  SCR_GAMECONST_setcellinvisible = 1483,
  SCR_GAMECONST_setcellinvisibleatpos = 1484,
  SCR_GAMECONST_setcellvisible = 1485,
  SCR_GAMECONST_setcellvisibleatpos = 1486,
  SCR_GAMECONST_setchannelvolumes = 1487,
  SCR_GAMECONST_setclientaimlockonpitchstrength = 1488,
  SCR_GAMECONST_setclientammocounterhide = 1489,
  SCR_GAMECONST_setclientcgobjectivetext = 1490,
  SCR_GAMECONST_setclientcompass = 1491,
  SCR_GAMECONST_setclientdrawtalk = 1492,
  SCR_GAMECONST_setclientdvar = 1493,
  SCR_GAMECONST_setclientdvars = 1494,
  SCR_GAMECONST_setclientflag = 1495,
  SCR_GAMECONST_setclientflagasval = 1496,
  SCR_GAMECONST_setclientfov = 1497,
  SCR_GAMECONST_setclienthudhardcore = 1498,
  SCR_GAMECONST_setclientminiscoreboardhide = 1499,
  SCR_GAMECONST_setclientnamemode = 1500,
  SCR_GAMECONST_setclientnumlives = 1501,
  SCR_GAMECONST_setclientplayerpushamount = 1502,
  SCR_GAMECONST_setclientplayersteponactors = 1503,
  SCR_GAMECONST_setclientplayersprinttime = 1504,
  SCR_GAMECONST_setclientprofilevar = 1505,
  SCR_GAMECONST_setclientscriptmainmenu = 1506,
  SCR_GAMECONST_setclientthirdperson = 1507,
  SCR_GAMECONST_setclientthirdpersonangle = 1508,
  SCR_GAMECONST_setclientuivisibilityflag = 1509,
  SCR_GAMECONST_setclientvolumetricfog = 1510,
  SCR_GAMECONST_setclock = 1511,
  SCR_GAMECONST_setclockup = 1512,
  SCR_GAMECONST_setcod7decodefx = 1513,
  SCR_GAMECONST_setcollectible = 1514,
  SCR_GAMECONST_setcompassicon = 1515,
  SCR_GAMECONST_setcontents = 1516,
  SCR_GAMECONST_setconvergencetime = 1517,
  SCR_GAMECONST_setculldist = 1518,
  SCR_GAMECONST_setcurrentspectatorclient = 1519,
  SCR_GAMECONST_setcursorhint = 1520,
  SCR_GAMECONST_setcurvebspline = 1521,
  SCR_GAMECONST_setcurvecameraent = 1522,
  SCR_GAMECONST_setcurvenotifyent = 1523,
  SCR_GAMECONST_setcurverounded = 1524,
  SCR_GAMECONST_setcurvesmooth = 1525,
  SCR_GAMECONST_setcurvespeed = 1526,
  SCR_GAMECONST_setdamagestage = 1527,
  SCR_GAMECONST_setdeathcontents = 1528,
  SCR_GAMECONST_setdebugangles = 1529,
  SCR_GAMECONST_setdebugorigin = 1530,
  SCR_GAMECONST_setdebugsideswitch = 1531,
  SCR_GAMECONST_setdeceleration = 1532,
  SCR_GAMECONST_setdefaultdroppitch = 1533,
  SCR_GAMECONST_setdefaultpitch = 1534,
  SCR_GAMECONST_setdemointermissionpoint = 1535,
  SCR_GAMECONST_setdepthoffield = 1536,
  SCR_GAMECONST_setdoublevision = 1537,
  SCR_GAMECONST_setdrivepathphysicsscale = 1538,
  SCR_GAMECONST_setdstat = 1539,
  SCR_GAMECONST_setdvar = 1540,
  SCR_GAMECONST_setdvarbool = 1541,
  SCR_GAMECONST_setdvarfloat = 1542,
  SCR_GAMECONST_setdynentenabled = 1543,
  SCR_GAMECONST_setelectrified = 1544,
  SCR_GAMECONST_setempjammed = 1545,
  SCR_GAMECONST_setenablenode = 1546,
  SCR_GAMECONST_setenemyglobalscrambler = 1547,
  SCR_GAMECONST_setenemyscrambleramount = 1548,
  SCR_GAMECONST_setengagementmaxdist = 1549,
  SCR_GAMECONST_setengagementmindist = 1550,
  SCR_GAMECONST_setentertime = 1551,
  SCR_GAMECONST_setentityowner = 1552,
  SCR_GAMECONST_setentitytarget = 1553,
  SCR_GAMECONST_setexcludeteamfortrigger = 1554,
  SCR_GAMECONST_setexpfog = 1555,
  SCR_GAMECONST_setexploderid = 1556,
  SCR_GAMECONST_setextracamactive = 1557,
  SCR_GAMECONST_setextracamangles = 1558,
  SCR_GAMECONST_setextracamentity = 1559,
  SCR_GAMECONST_setextracamfov = 1560,
  SCR_GAMECONST_setextracamorigin = 1561,
  SCR_GAMECONST_setextracamstatic = 1562,
  SCR_GAMECONST_setfakeentorg = 1563,
  SCR_GAMECONST_setfixednodesafevolume = 1564,
  SCR_GAMECONST_setflagasaway = 1565,
  SCR_GAMECONST_setflaggedanim = 1566,
  SCR_GAMECONST_setflaggedanimknob = 1567,
  SCR_GAMECONST_setflaggedanimknoball = 1568,
  SCR_GAMECONST_setflaggedanimknoballrestart = 1569,
  SCR_GAMECONST_setflaggedanimknoblimited = 1570,
  SCR_GAMECONST_setflaggedanimknoblimitedrestart = 1571,
  SCR_GAMECONST_setflaggedanimknobrestart = 1572,
  SCR_GAMECONST_setflaggedanimlimited = 1573,
  SCR_GAMECONST_setflaggedanimlimitedrestart = 1574,
  SCR_GAMECONST_setflaggedanimrestart = 1575,
  SCR_GAMECONST_setflashbanged = 1576,
  SCR_GAMECONST_setflashbangimmunity = 1577,
  SCR_GAMECONST_setforcenocull = 1578,
  SCR_GAMECONST_setfriendlyscrambleramount = 1579,
  SCR_GAMECONST_setgameendtime = 1580,
  SCR_GAMECONST_setgametypesetting = 1581,
  SCR_GAMECONST_setgametypestring = 1582,
  SCR_GAMECONST_setgoalentity = 1583,
  SCR_GAMECONST_setgoalnode = 1584,
  SCR_GAMECONST_setgoalpos = 1585,
  SCR_GAMECONST_setgoalvolume = 1586,
  SCR_GAMECONST_setgoalvolumeauto = 1587,
  SCR_GAMECONST_setgoalyaw = 1588,
  SCR_GAMECONST_setgpr = 1589,
  SCR_GAMECONST_setgravity = 1590,
  SCR_GAMECONST_setgroupsnapshot = 1591,
  SCR_GAMECONST_setglobalfutz = 1592,
  SCR_GAMECONST_setgunnertargetent = 1593,
  SCR_GAMECONST_setgunnertargetvec = 1594,
  SCR_GAMECONST_setgunnerturretontargetrange = 1595,
  SCR_GAMECONST_sethealthsnapshot = 1596,
  SCR_GAMECONST_setheightlockoffset = 1597,
  SCR_GAMECONST_setheldweaponmodel = 1598,
  SCR_GAMECONST_setheliheightlock = 1599,
  SCR_GAMECONST_setheliheightpatchenabled = 1600,
  SCR_GAMECONST_sethighlighted = 1601,
  SCR_GAMECONST_sethintstring = 1602,
  SCR_GAMECONST_sethostmigrationstatus = 1603,
  SCR_GAMECONST_sethoverparams = 1604,
  SCR_GAMECONST_sethudoutlinecolor = 1605,
  SCR_GAMECONST_sethudwarningtype = 1606,
  SCR_GAMECONST_setignoremegroup = 1607,
  SCR_GAMECONST_setinfluencerteammask = 1608,
  SCR_GAMECONST_setinfraredvision = 1609,
  SCR_GAMECONST_setinfraredvisionset = 1610,
  SCR_GAMECONST_setinventoryweapon = 1611,
  SCR_GAMECONST_setinvisibletoplayer = 1612,
  SCR_GAMECONST_setjitterparams = 1613,
  SCR_GAMECONST_setlaststandprevweap = 1614,
  SCR_GAMECONST_setleftarc = 1615,
  SCR_GAMECONST_setlevelfadesnapshot = 1616,
  SCR_GAMECONST_setlightcolor = 1617,
  SCR_GAMECONST_setlightexponent = 1618,
  SCR_GAMECONST_setlightfovrange = 1619,
  SCR_GAMECONST_setlightintensity = 1620,
  SCR_GAMECONST_setlightradius = 1621,
  SCR_GAMECONST_setlocalprofilearrayvar = 1622,
  SCR_GAMECONST_setlocalprofilevar = 1623,
  SCR_GAMECONST_setlocalradarenabled = 1624,
  SCR_GAMECONST_setlocalradarposition = 1625,
  SCR_GAMECONST_setlocalwindsource = 1626,
  SCR_GAMECONST_setlookat = 1627,
  SCR_GAMECONST_setlookatanimnodes = 1628,
  SCR_GAMECONST_setlookatent = 1629,
  SCR_GAMECONST_setlookattext = 1630,
  SCR_GAMECONST_setlookatyawlimits = 1631,
  SCR_GAMECONST_setloweredweapon = 1632,
  SCR_GAMECONST_setlowready = 1633,
  SCR_GAMECONST_setmantleenabled = 1634,
  SCR_GAMECONST_setmapcenter = 1635,
  SCR_GAMECONST_setmapnamestring = 1636,
  SCR_GAMECONST_setmatchflag = 1637,
  SCR_GAMECONST_setmatchtalkflag = 1638,
  SCR_GAMECONST_setmaxhealth = 1639,
  SCR_GAMECONST_setmaxpitchroll = 1640,
  SCR_GAMECONST_setmenuroot = 1641,
  SCR_GAMECONST_setminimap = 1642,
  SCR_GAMECONST_setmissilecoasting = 1643,
  SCR_GAMECONST_setmixerbehavior = 1644,
  SCR_GAMECONST_setmixerexploderid = 1645,
  SCR_GAMECONST_setmixerl2rrampspeed = 1646,
  SCR_GAMECONST_setmixerlightbehavior = 1647,
  SCR_GAMECONST_setmixerlightcolor = 1648,
  SCR_GAMECONST_setmixerlightexponent = 1649,
  SCR_GAMECONST_setmixerlightfovrange = 1650,
  SCR_GAMECONST_setmixerlightintensity = 1651,
  SCR_GAMECONST_setmixerlightmodels = 1652,
  SCR_GAMECONST_setmixerlightparam = 1653,
  SCR_GAMECONST_setmixerlightradius = 1654,
  SCR_GAMECONST_setmixerlightrotatetime = 1655,
  SCR_GAMECONST_setmixerparam = 1656,
  SCR_GAMECONST_setmixerr2lrampspeed = 1657,
  SCR_GAMECONST_setmixerspinmodels = 1658,
  SCR_GAMECONST_setmode = 1659,
  SCR_GAMECONST_setmodel = 1660,
  SCR_GAMECONST_setmovespeedscale = 1661,
  SCR_GAMECONST_setmovingplatformenabled = 1662,
  SCR_GAMECONST_setmultiextracamactive = 1663,
  SCR_GAMECONST_setnearestenemyscrambler = 1664,
  SCR_GAMECONST_setneargoalnotifydist = 1665,
  SCR_GAMECONST_setnodepriority = 1666,
  SCR_GAMECONST_setnormalhealth = 1667,
  SCR_GAMECONST_setnorthyaw = 1668,
  SCR_GAMECONST_setoffhandprimaryclass = 1669,
  SCR_GAMECONST_setoffhandsecondaryclass = 1670,
  SCR_GAMECONST_setontargetangle = 1671,
  SCR_GAMECONST_setorigin = 1672,
  SCR_GAMECONST_setowner = 1673,
  SCR_GAMECONST_setperk = 1674,
  SCR_GAMECONST_setperks = 1675,
  SCR_GAMECONST_setpersistentprofilevar = 1676,
  SCR_GAMECONST_setphysacceleration = 1677,
  SCR_GAMECONST_setphysangles = 1678,
  SCR_GAMECONST_setphysicsgravity = 1679,
  SCR_GAMECONST_setphysicsgravitydir = 1680,
  SCR_GAMECONST_setphysparams = 1681,
  SCR_GAMECONST_setplacementhint = 1682,
  SCR_GAMECONST_setplanebarrelroll = 1683,
  SCR_GAMECONST_setplanegoalpos = 1684,
  SCR_GAMECONST_setplayerangles = 1685,
  SCR_GAMECONST_setplayercollision = 1686,
  SCR_GAMECONST_setplayerignoreradiusdamage = 1687,
  SCR_GAMECONST_setplayernamestring = 1688,
  SCR_GAMECONST_setplayerrenderoptions = 1689,
  SCR_GAMECONST_setplayerspread = 1690,
  SCR_GAMECONST_setplayerteamrank = 1691,
  SCR_GAMECONST_setplayerviewratescale = 1692,
  SCR_GAMECONST_setpotentialthreat = 1693,
  SCR_GAMECONST_setpredatoreffect = 1694,
  SCR_GAMECONST_setprintchannel = 1695,
  SCR_GAMECONST_setproneanimnodes = 1696,
  SCR_GAMECONST_setpulsefx = 1697,
  SCR_GAMECONST_setqosgamedatapayload = 1698,
  SCR_GAMECONST_setrank = 1699,
  SCR_GAMECONST_setredactfx = 1700,
  SCR_GAMECONST_setreverb = 1701,
  SCR_GAMECONST_setrightarc = 1702,
  SCR_GAMECONST_setriotshieldfailhint = 1703,
  SCR_GAMECONST_setrotorspeed = 1704,
  SCR_GAMECONST_setroundsplayed = 1705,
  SCR_GAMECONST_setruntopos = 1706,
  SCR_GAMECONST_setsaveddvar = 1707,
  SCR_GAMECONST_setscale = 1708,
  SCR_GAMECONST_settargethighlight = 1709,
  SCR_GAMECONST_setscanningpitch = 1710,
  SCR_GAMECONST_setscoreboardcolumns = 1711,
  SCR_GAMECONST_setscoremultiplier = 1712,
  SCR_GAMECONST_setscriptenemy = 1713,
  SCR_GAMECONST_setscriptgoal = 1714,
  SCR_GAMECONST_setscripthintstring = 1715,
  SCR_GAMECONST_setseatoccupied = 1716,
  SCR_GAMECONST_setservervolumetricfogdensity = 1717,
  SCR_GAMECONST_setshader = 1718,
  SCR_GAMECONST_setshaderconstant = 1719,
  SCR_GAMECONST_setslowmotion = 1720,
  SCR_GAMECONST_setsonarenabled = 1721,
  SCR_GAMECONST_setsoundblend = 1722,
  SCR_GAMECONST_setsoundcontext = 1723,
  SCR_GAMECONST_setsoundentcontext = 1724,
  SCR_GAMECONST_setloopstate = 1725,
  SCR_GAMECONST_setsoundpitch = 1726,
  SCR_GAMECONST_setsoundpitchrate = 1727,
  SCR_GAMECONST_setsoundvolume = 1728,
  SCR_GAMECONST_setsoundvolumerate = 1729,
  SCR_GAMECONST_setspawnerteam = 1730,
  SCR_GAMECONST_setspawnpointrandomvariation = 1731,
  SCR_GAMECONST_setspawnpointsbaseweight = 1732,
  SCR_GAMECONST_setspawnweapon = 1733,
  SCR_GAMECONST_setspeed = 1734,
  SCR_GAMECONST_setspeedimmediate = 1735,
  SCR_GAMECONST_setspreadoverride = 1736,
  SCR_GAMECONST_setsprintcooldown = 1737,
  SCR_GAMECONST_setsprintduration = 1738,
  SCR_GAMECONST_setstablemissile = 1739,
  SCR_GAMECONST_setstance = 1740,
  SCR_GAMECONST_setstowedweapon = 1741,
  SCR_GAMECONST_setstunned = 1742,
  SCR_GAMECONST_setsundirection = 1743,
  SCR_GAMECONST_setsunlight = 1744,
  SCR_GAMECONST_setsuppressiontime = 1745,
  SCR_GAMECONST_setswitchnode = 1746,
  SCR_GAMECONST_settalktospecies = 1747,
  SCR_GAMECONST_settargetent = 1748,
  SCR_GAMECONST_settargetentity = 1749,
  SCR_GAMECONST_settargetorigin = 1750,
  SCR_GAMECONST_settargetyaw = 1751,
  SCR_GAMECONST_setteam = 1752,
  SCR_GAMECONST_setteamfortrigger = 1753,
  SCR_GAMECONST_setteamsatellite = 1754,
  SCR_GAMECONST_setteamscore = 1755,
  SCR_GAMECONST_setteamspyplane = 1756,
  SCR_GAMECONST_settenthstimer = 1757,
  SCR_GAMECONST_settenthstimerup = 1758,
  SCR_GAMECONST_settext = 1759,
  SCR_GAMECONST_setthreatbias = 1760,
  SCR_GAMECONST_setthreatbiasagainstall = 1761,
  SCR_GAMECONST_setthreatbiasgroup = 1762,
  SCR_GAMECONST_settimer = 1763,
  SCR_GAMECONST_settimerup = 1764,
  SCR_GAMECONST_settimescale = 1765,
  SCR_GAMECONST_settoparc = 1766,
  SCR_GAMECONST_settransported = 1767,
  SCR_GAMECONST_setturningability = 1768,
  SCR_GAMECONST_setturretaccuracy = 1769,
  SCR_GAMECONST_setturretanim = 1770,
  SCR_GAMECONST_setturretcarried = 1771,
  SCR_GAMECONST_setturretignoregoals = 1772,
  SCR_GAMECONST_setturretnode = 1773,
  SCR_GAMECONST_setturretowner = 1774,
  SCR_GAMECONST_setturretspinning = 1775,
  SCR_GAMECONST_setturrettargetent = 1776,
  SCR_GAMECONST_setturrettargetvec = 1777,
  SCR_GAMECONST_setturretteam = 1778,
  SCR_GAMECONST_setturrettype = 1779,
  SCR_GAMECONST_setuinextlevel = 1780,
  SCR_GAMECONST_setvalue = 1781,
  SCR_GAMECONST_setvehgoalpos = 1782,
  SCR_GAMECONST_setvehicleattachments = 1783,
  SCR_GAMECONST_setvehicleavoidance = 1784,
  SCR_GAMECONST_setvehiclelockedon = 1785,
  SCR_GAMECONST_setvehiclelookattext = 1786,
  SCR_GAMECONST_setvehiclenodeenabled = 1787,
  SCR_GAMECONST_setvehicletype = 1788,
  SCR_GAMECONST_setvehmaxspeed = 1789,
  SCR_GAMECONST_setvehvelocity = 1790,
  SCR_GAMECONST_setvehweapon = 1791,
  SCR_GAMECONST_setvelocity = 1792,
  SCR_GAMECONST_setviewangleresistance = 1793,
  SCR_GAMECONST_setviewclamp = 1794,
  SCR_GAMECONST_setviewlockent = 1795,
  SCR_GAMECONST_setviewmodel = 1796,
  SCR_GAMECONST_setviewmodeldepthoffield = 1797,
  SCR_GAMECONST_setviewmodelrenderflag = 1798,
  SCR_GAMECONST_setvisibletoall = 1799,
  SCR_GAMECONST_setvisibletoplayer = 1800,
  SCR_GAMECONST_setvisionsetforplayer = 1801,
  SCR_GAMECONST_setvolfog = 1802,
  SCR_GAMECONST_setvolfogforclient = 1803,
  SCR_GAMECONST_setvotenocount = 1804,
  SCR_GAMECONST_setvotestring = 1805,
  SCR_GAMECONST_setvotetime = 1806,
  SCR_GAMECONST_setvoteyescount = 1807,
  SCR_GAMECONST_setwargamedata = 1808,
  SCR_GAMECONST_setwatchstyle = 1809,
  SCR_GAMECONST_setwaterbrush = 1810,
  SCR_GAMECONST_setwaterdrops = 1811,
  SCR_GAMECONST_setwaterfog = 1812,
  SCR_GAMECONST_setwatersheeting = 1813,
  SCR_GAMECONST_setwaypoint = 1814,
  SCR_GAMECONST_setweapon = 1815,
  SCR_GAMECONST_setweaponammoclip = 1816,
  SCR_GAMECONST_setweaponammostock = 1817,
  SCR_GAMECONST_setwetness = 1818,
  SCR_GAMECONST_setwinningplayer = 1819,
  SCR_GAMECONST_setwinningteam = 1820,
  SCR_GAMECONST_setworldfogactivebank = 1821,
  SCR_GAMECONST_setyawspeed = 1822,
  SCR_GAMECONST_shellshock = 1823,
  SCR_GAMECONST_shoot = 1824,
  SCR_GAMECONST_shootblank = 1825,
  SCR_GAMECONST_shootrumble = 1826,
  SCR_GAMECONST_shootshock = 1827,
  SCR_GAMECONST_shootturret = 1828,
  SCR_GAMECONST_shootup = 1829,
  SCR_GAMECONST_shouldfacemotion = 1830,
  SCR_GAMECONST_shouldmonitorai = 1831,
  SCR_GAMECONST_show = 1832,
  SCR_GAMECONST_showallparts = 1833,
  SCR_GAMECONST_showpart = 1834,
  SCR_GAMECONST_showscores = 1835,
  SCR_GAMECONST_showui = 1836,
  SCR_GAMECONST_showviewmodel = 1837,
  SCR_GAMECONST_sidearm = 1838,
  SCR_GAMECONST_sightconetrace = 1839,
  SCR_GAMECONST_sightlatency = 1840,
  SCR_GAMECONST_sighttracepassed = 1841,
  SCR_GAMECONST_sin = 1842,
  SCR_GAMECONST_snapshotacknowledged = 1843,
  SCR_GAMECONST_solid = 1844,
  SCR_GAMECONST_sort = 1845,
  SCR_GAMECONST_soundexists = 1846,
  SCR_GAMECONST_soundgetplaybacktime = 1847,
  SCR_GAMECONST_soundfade = 1848,
  SCR_GAMECONST_soundsetmusicstate = 1849,
  SCR_GAMECONST_soundlineemitter = 1850,
  SCR_GAMECONST_soundloopemitter = 1851,
  SCR_GAMECONST_soundplaying = 1852,
  SCR_GAMECONST_soundstoplineemitter = 1853,
  SCR_GAMECONST_soundstoploopemitter = 1854,
  SCR_GAMECONST_soundtimescale = 1855,
  SCR_GAMECONST_spawn = 1856,
  SCR_GAMECONST_spawnapalmgroundflame = 1857,
  SCR_GAMECONST_spawncollision = 1858,
  SCR_GAMECONST_spawndynent = 1859,
  SCR_GAMECONST_spawnfakeent = 1860,
  SCR_GAMECONST_spawnflags = 1861,
  SCR_GAMECONST_spawnfx = 1862,
  SCR_GAMECONST_spawnhelicopter = 1863,
  SCR_GAMECONST_spawnpathnode = 1864,
  SCR_GAMECONST_spawnplane = 1865,
  SCR_GAMECONST_spawnstruct = 1866,
  SCR_GAMECONST_spawntimedfx = 1867,
  SCR_GAMECONST_spawnturret = 1868,
  SCR_GAMECONST_spawnvehicle = 1869,
  SCR_GAMECONST_species = 1870,
  SCR_GAMECONST_spectatorclient = 1871,
  SCR_GAMECONST_speed = 1872,
  SCR_GAMECONST_sphere = 1873,
  SCR_GAMECONST_splitargs = 1874,
  SCR_GAMECONST_splitviewallowed = 1875,
  SCR_GAMECONST_sprintbuttonpressed = 1876,
  SCR_GAMECONST_sprinting = 1877,
  SCR_GAMECONST_sqrt = 1878,
  SCR_GAMECONST_stabs = 1879,
  SCR_GAMECONST_stairsstate = 1880,
  SCR_GAMECONST_start3dcinematic = 1881,
  SCR_GAMECONST_startactorreact = 1882,
  SCR_GAMECONST_startbinocs = 1883,
  SCR_GAMECONST_startcameratween = 1884,
  SCR_GAMECONST_startcoverarrival = 1885,
  SCR_GAMECONST_startcurve = 1886,
  SCR_GAMECONST_startdoorbreach = 1887,
  SCR_GAMECONST_startfadingblur = 1888,
  SCR_GAMECONST_startfiring = 1889,
  SCR_GAMECONST_starthostmigration = 1890,
  SCR_GAMECONST_startignoringspotlight = 1891,
  SCR_GAMECONST_startmultiplayergame = 1892,
  SCR_GAMECONST_startparty = 1893,
  SCR_GAMECONST_startpath = 1894,
  SCR_GAMECONST_startpoisoning = 1895,
  SCR_GAMECONST_startprivatematch = 1896,
  SCR_GAMECONST_startragdoll = 1897,
  SCR_GAMECONST_startrevive = 1898,
  SCR_GAMECONST_startscriptedanim = 1899,
  SCR_GAMECONST_startshoot = 1900,
  SCR_GAMECONST_starttanning = 1901,
  SCR_GAMECONST_starttime = 1902,
  SCR_GAMECONST_starttraversearrival = 1903,
  SCR_GAMECONST_startwatersheetfx = 1904,
  SCR_GAMECONST_statechangereason = 1905,
  SCR_GAMECONST_statusicon = 1906,
  SCR_GAMECONST_stop3dcinematic = 1907,
  SCR_GAMECONST_stopallrumbles = 1908,
  SCR_GAMECONST_stopanimdistsq = 1909,
  SCR_GAMECONST_stopanimscripted = 1910,
  SCR_GAMECONST_stopbink = 1911,
  SCR_GAMECONST_stopbinocs = 1912,
  SCR_GAMECONST_stopcarryturret = 1913,
  SCR_GAMECONST_stopcurve = 1914,
  SCR_GAMECONST_stopdoorbreach = 1915,
  SCR_GAMECONST_stopextracam = 1916,
  SCR_GAMECONST_stopfireweapon = 1917,
  SCR_GAMECONST_stopfiring = 1918,
  SCR_GAMECONST_stopfx = 1919,
  SCR_GAMECONST_stopignoringspotlight = 1920,
  SCR_GAMECONST_stoplocalsound = 1921,
  SCR_GAMECONST_stoplookat = 1922,
  SCR_GAMECONST_stoploopsound = 1923,
  SCR_GAMECONST_stopmoveslide = 1924,
  SCR_GAMECONST_stoppoisoning = 1925,
  SCR_GAMECONST_stoprevive = 1926,
  SCR_GAMECONST_stoprumble = 1927,
  SCR_GAMECONST_stopshellshock = 1928,
  SCR_GAMECONST_stopshoot = 1929,
  SCR_GAMECONST_stopshootturret = 1930,
  SCR_GAMECONST_stopsound = 1931,
  SCR_GAMECONST_stopsounds = 1932,
  SCR_GAMECONST_stopuseanimtree = 1933,
  SCR_GAMECONST_stopuseturret = 1934,
  SCR_GAMECONST_stopusingturret = 1935,
  SCR_GAMECONST_stopwatersheetfx = 1936,
  SCR_GAMECONST_strtok = 1937,
  SCR_GAMECONST_structinfo = 1938,
  SCR_GAMECONST_suicide = 1939,
  SCR_GAMECONST_suppressionduration = 1940,
  SCR_GAMECONST_suppressionmeter = 1941,
  SCR_GAMECONST_suppressionstarttime = 1942,
  SCR_GAMECONST_suppressionwait = 1943,
  SCR_GAMECONST_supressionwait = 1944,
  SCR_GAMECONST_surprisedbymedistsq = 1945,
  SCR_GAMECONST_survived = 1946,
  SCR_GAMECONST_suspended = 1947,
  SCR_GAMECONST_swimming = 1948,
  SCR_GAMECONST_switchtoclientvolumetricfog = 1949,
  SCR_GAMECONST_switchtooffhand = 1950,
  SCR_GAMECONST_switchtoservervolumetricfog = 1951,
  SCR_GAMECONST_switchtoweapon = 1952,
  SCR_GAMECONST_switchtoweaponimmediate = 1953,
  SCR_GAMECONST_syncedmeleetarget = 1954,
  SCR_GAMECONST_tablelookup = 1955,
  SCR_GAMECONST_tablelookupcolumnforrow = 1956,
  SCR_GAMECONST_tablelookupistring = 1957,
  SCR_GAMECONST_tablelookuprownum = 1958,
  SCR_GAMECONST_tablelookupfindcoreasset = 1959,
  SCR_GAMECONST_takeallweapons = 1960,
  SCR_GAMECONST_purchaseitem = 1961,
  SCR_GAMECONST_getitemstatus = 1962,
  SCR_GAMECONST_takedamage = 1963,
  SCR_GAMECONST_takeplayercontrol = 1964,
  SCR_GAMECONST_takeweapon = 1965,
  SCR_GAMECONST_tan = 1966,
  SCR_GAMECONST_target = 1967,
  SCR_GAMECONST_target_clearreticlelockon = 1968,
  SCR_GAMECONST_target_getarray = 1969,
  SCR_GAMECONST_target_isincircle = 1970,
  SCR_GAMECONST_target_isinrect = 1971,
  SCR_GAMECONST_target_istarget = 1972,
  SCR_GAMECONST_target_remove = 1973,
  SCR_GAMECONST_target_set = 1974,
  SCR_GAMECONST_target_setattackmode = 1975,
  SCR_GAMECONST_target_setjavelinonly = 1976,
  SCR_GAMECONST_target_setoffscreenshader = 1977,
  SCR_GAMECONST_target_setshader = 1978,
  SCR_GAMECONST_target_setturretaquire = 1979,
  SCR_GAMECONST_target_startreticlelockon = 1980,
  SCR_GAMECONST_target2 = 1981,
  SCR_GAMECONST_targetname = 1982,
  SCR_GAMECONST_team = 1983,
  SCR_GAMECONST_teammovewaittime = 1984,
  SCR_GAMECONST_teleport = 1985,
  SCR_GAMECONST_testspawnpoint = 1986,
  SCR_GAMECONST_threadbias = 1987,
  SCR_GAMECONST_threatbias = 1988,
  SCR_GAMECONST_threatbiasgroup = 1989,
  SCR_GAMECONST_threatbiasgroupexists = 1990,
  SCR_GAMECONST_throwbackgrenadekilledoriginalowner = 1991,
  SCR_GAMECONST_throwbuttonpressed = 1992,
  SCR_GAMECONST_throwdownweapon = 1993,
  SCR_GAMECONST_throwgrenade = 1994,
  SCR_GAMECONST_timedradiusdamage = 1995,
  SCR_GAMECONST_toggleik = 1996,
  SCR_GAMECONST_tolower = 1997,
  SCR_GAMECONST_tomahawks = 1998,
  SCR_GAMECONST_tracepoint = 1999,
  SCR_GAMECONST_trackscriptstate = 2000,
  SCR_GAMECONST_transmittargetname = 2001,
  SCR_GAMECONST_traversemode = 2002,
  SCR_GAMECONST_treadfxnamearray = 2003,
  SCR_GAMECONST_triggerfx = 2004,
  SCR_GAMECONST_trimpathtoattack = 2005,
  SCR_GAMECONST_turnrate = 2006,
  SCR_GAMECONST_turretcantarget = 2007,
  SCR_GAMECONST_turretfiredisable = 2008,
  SCR_GAMECONST_turretfireenable = 2009,
  SCR_GAMECONST_turretinvulnerability = 2010,
  SCR_GAMECONST_turretrotscale = 2011,
  SCR_GAMECONST_turretweapon = 2012,
  SCR_GAMECONST_type = 2013,
  SCR_GAMECONST_ufomode = 2014,
  SCR_GAMECONST_ui3dsetwindow = 2015,
  SCR_GAMECONST_ui3dwindow = 2016,
  SCR_GAMECONST_uncruncharray = 2017,
  SCR_GAMECONST_underwater = 2018,
  SCR_GAMECONST_undolaststand = 2019,
  SCR_GAMECONST_unlink = 2020,
  SCR_GAMECONST_unlinkallfromcamera = 2021,
  SCR_GAMECONST_unlinkfromcamera = 2022,
  SCR_GAMECONST_unlinkfrommissile = 2023,
  SCR_GAMECONST_unlinkguidedmissilecamera = 2024,
  SCR_GAMECONST_unlinknodes = 2025,
  SCR_GAMECONST_unsetperk = 2026,
  SCR_GAMECONST_unsetturretnode = 2027,
  SCR_GAMECONST_updateclientnames = 2028,
  SCR_GAMECONST_updategamerprofile = 2029,
  SCR_GAMECONST_updateplayersightaccuracy = 2030,
  SCR_GAMECONST_updateprone = 2031,
  SCR_GAMECONST_updatestatratio = 2032,
  SCR_GAMECONST_updateweaponoptions = 2033,
  SCR_GAMECONST_uploadscore = 2034,
  SCR_GAMECONST_uploadstats = 2035,
  SCR_GAMECONST_uploadtime = 2036,
  SCR_GAMECONST_useable = 2037,
  SCR_GAMECONST_usealternateaimparams = 2038,
  SCR_GAMECONST_useanimtree = 2039,
  SCR_GAMECONST_usebuttonheld = 2040,
  SCR_GAMECONST_usebuttonpressed = 2041,
  SCR_GAMECONST_useby = 2042,
  SCR_GAMECONST_usechokepoints = 2043,
  SCR_GAMECONST_usecombatscriptatcover = 2044,
  SCR_GAMECONST_usecovernode = 2045,
  SCR_GAMECONST_usereacquirenode = 2046,
  SCR_GAMECONST_useservervisionset = 2047,
  SCR_GAMECONST_usetriggerrequirelookat = 2048,
  SCR_GAMECONST_useturret = 2049,
  SCR_GAMECONST_usevehicle = 2050,
  SCR_GAMECONST_useweaponhidetags = 2051,
  SCR_GAMECONST_usingturret = 2052,
  SCR_GAMECONST_usingvehicle = 2053,
  SCR_GAMECONST_vectorcross = 2054,
  SCR_GAMECONST_vectordot = 2055,
  SCR_GAMECONST_vectorfromlinetopoint = 2056,
  SCR_GAMECONST_vectorlerp = 2057,
  SCR_GAMECONST_vectornormalize = 2058,
  SCR_GAMECONST_vectorscale = 2059,
  SCR_GAMECONST_vectortoangles = 2060,
  SCR_GAMECONST_vehcansee = 2061,
  SCR_GAMECONST_vehclearenemy = 2062,
  SCR_GAMECONST_vehclearentitytarget = 2063,
  SCR_GAMECONST_vehgetmodel = 2064,
  SCR_GAMECONST_vehicleclass = 2065,
  SCR_GAMECONST_vehicleposition = 2066,
  SCR_GAMECONST_vehicletype = 2067,
  SCR_GAMECONST_vehseenrecently = 2068,
  SCR_GAMECONST_vehsetentitytarget = 2069,
  SCR_GAMECONST_vehspeed = 2070,
  SCR_GAMECONST_velocity = 2071,
  SCR_GAMECONST_vertalign = 2072,
  SCR_GAMECONST_vibrate = 2073,
  SCR_GAMECONST_viewkick = 2074,
  SCR_GAMECONST_viewlockedentity = 2075,
  SCR_GAMECONST_visionsetdamage = 2076,
  SCR_GAMECONST_visionsetlaststand = 2077,
  SCR_GAMECONST_visionsetlerpratio = 2078,
  SCR_GAMECONST_visionsetnaked = 2079,
  SCR_GAMECONST_visionsetnight = 2080,
  SCR_GAMECONST_visionsetunderwater = 2081,
  SCR_GAMECONST_vteam = 2082,
  SCR_GAMECONST_wagerwinnings = 2083,
  SCR_GAMECONST_walkdist = 2084,
  SCR_GAMECONST_waterplop = 2085,
  SCR_GAMECONST_weapon = 2086,
  SCR_GAMECONST_weaponaccuracy = 2087,
  SCR_GAMECONST_weaponaltweaponname = 2088,
  SCR_GAMECONST_weaponbayonetinfo = 2089,
  SCR_GAMECONST_weaponbottomarc = 2090,
  SCR_GAMECONST_weaponclass = 2091,
  SCR_GAMECONST_weaponclipsize = 2092,
  SCR_GAMECONST_weaponcliptype = 2093,
  SCR_GAMECONST_weapondogibbing = 2094,
  SCR_GAMECONST_weapondualwieldweaponname = 2095,
  SCR_GAMECONST_weaponfightdist = 2096,
  SCR_GAMECONST_weaponfiretime = 2097,
  SCR_GAMECONST_weaponguidedmissiletype = 2098,
  SCR_GAMECONST_weaponhasattachment = 2099,
  SCR_GAMECONST_weaponattachmentcount = 2100,
  SCR_GAMECONST_weaponhasbayonet = 2101,
  SCR_GAMECONST_weaponinventorytype = 2102,
  SCR_GAMECONST_weaponisboltaction = 2103,
  SCR_GAMECONST_weaponisdualwield = 2104,
  SCR_GAMECONST_weaponisgasweapon = 2105,
  SCR_GAMECONST_weaponissemiauto = 2106,
  SCR_GAMECONST_weaponischargeshot = 2107,
  SCR_GAMECONST_weaponissniperweapon = 2108,
  SCR_GAMECONST_weaponleftarc = 2109,
  SCR_GAMECONST_weaponlockfinalize = 2110,
  SCR_GAMECONST_weaponlockfree = 2111,
  SCR_GAMECONST_weaponlocknoclearance = 2112,
  SCR_GAMECONST_weaponlockonradius = 2113,
  SCR_GAMECONST_weaponlockonspeed = 2114,
  SCR_GAMECONST_weaponlockstart = 2115,
  SCR_GAMECONST_weaponlocktargettooclose = 2116,
  SCR_GAMECONST_weaponmaxammo = 2117,
  SCR_GAMECONST_weaponmaxdist = 2118,
  SCR_GAMECONST_weaponmaxgibdistance = 2119,
  SCR_GAMECONST_weaponmountable = 2120,
  SCR_GAMECONST_weaponreloadtime = 2121,
  SCR_GAMECONST_weaponrightarc = 2122,
  SCR_GAMECONST_weaponspinsettings = 2123,
  SCR_GAMECONST_weaponstartammo = 2124,
  SCR_GAMECONST_weapontoparc = 2125,
  SCR_GAMECONST_weapontype = 2126,
  SCR_GAMECONST_width = 2127,
  SCR_GAMECONST_withinapproxpathdist = 2128,
  SCR_GAMECONST_worldentnumber = 2129,
  SCR_GAMECONST_worldtolocalcoords = 2130,
  SCR_GAMECONST_x = 2131,
  SCR_GAMECONST_x2score = 2132,
  SCR_GAMECONST_y = 2133,
  SCR_GAMECONST_z = 2134,
  SCR_GAMECONST_zerogravityvolumeoff = 2135,
  SCR_GAMECONST_zerogravityvolumeon = 2136,
  SCR_GAMECONST_setinvisibletoall = 2137,
  SCR_GAMECONST_setvisibletoallexceptteam = 2138,
  SCR_GAMECONST_setvisibletoteam = 2139,
  SCR_GAMECONST_islinkedto = 2140,
  SCR_GAMECONST_getangles = 2141,
  SCR_GAMECONST_getmins = 2142,
  SCR_GAMECONST_getmaxs = 2143,
  SCR_GAMECONST_getabsmins = 2144,
  SCR_GAMECONST_getabsmaxs = 2145,
  SCR_GAMECONST_istouchingswept = 2146,
  SCR_GAMECONST_istouchingvolume = 2147,
  SCR_GAMECONST_playsoundwithnotify = 2148,
  SCR_GAMECONST_playsoundtoteam = 2149,
  SCR_GAMECONST_playbattlechattertoteam = 2150,
  SCR_GAMECONST_setzombieshrink = 2151,
  SCR_GAMECONST_setenemymodel = 2152,
  SCR_GAMECONST_ghost = 2153,
  SCR_GAMECONST_showtoplayer = 2154,
  SCR_GAMECONST_setrevivehintstring = 2155,
  SCR_GAMECONST_setfovforkillcam = 2156,
  SCR_GAMECONST_sethintstringforperk = 2157,
  SCR_GAMECONST_sethintlowpriority = 2158,
  SCR_GAMECONST_triggerignoreteam = 2159,
  SCR_GAMECONST_spawnnapalmgroundflame = 2160,
  SCR_GAMECONST_needsrevive = 2161,
  SCR_GAMECONST_isinsecondchance = 2162,
  SCR_GAMECONST_depthofplayerinwater = 2163,
  SCR_GAMECONST_stopburning = 2164,
  SCR_GAMECONST_displaymedal = 2165,
  SCR_GAMECONST_displaygamemodemessage = 2166,
  SCR_GAMECONST_displayteammessage = 2167,
  SCR_GAMECONST_displaycontract = 2168,
  SCR_GAMECONST_displaychallengecomplete = 2169,
  SCR_GAMECONST_displaygunlevelup = 2170,
  SCR_GAMECONST_displayendgame = 2171,
  SCR_GAMECONST_displayendgamemilestone = 2172,
  SCR_GAMECONST_displayrankup = 2173,
  SCR_GAMECONST_displaywagerpopup = 2174,
  SCR_GAMECONST_displayhudanim = 2175,
  SCR_GAMECONST_isturretlockedon = 2176,
  SCR_GAMECONST_heliturretsighttrace = 2177,
  SCR_GAMECONST_heliturretdogtrace = 2178,
  SCR_GAMECONST_docowardswayanims = 2179,
  SCR_GAMECONST_setcameraspikeactive = 2180,
  SCR_GAMECONST_isinsideheightlock = 2181,
  SCR_GAMECONST_ismissileinsideheightlock = 2182,
  SCR_GAMECONST_getgroundent = 2183,
  SCR_GAMECONST_attachshieldmodel = 2184,
  SCR_GAMECONST_detachshieldmodel = 2185,
  SCR_GAMECONST_ismartyrdomgrenade = 2186,
  SCR_GAMECONST_setspawnclientflag = 2187,
  SCR_GAMECONST_directionalhitindicator = 2188,
  SCR_GAMECONST_setplayergravity = 2189,
  SCR_GAMECONST_clearplayergravity = 2190,
  SCR_GAMECONST_setperkfortrigger = 2191,
  SCR_GAMECONST_setignoreentfortrigger = 2192,
  SCR_GAMECONST_isitemlocked = 2193,
  SCR_GAMECONST_isitempurchased = 2194,
  SCR_GAMECONST_uploadleaderboards = 2195,
  SCR_GAMECONST_setnemesisxuid = 2196,
  SCR_GAMECONST_getmovespeedscale = 2197,
  SCR_GAMECONST_setzombiename = 2198,
  SCR_GAMECONST_setentgravitytrajectory = 2199,
  SCR_GAMECONST_setvehicleteam = 2200,
  SCR_GAMECONST_setturretminimapvisible = 2201,
  SCR_GAMECONST_spawnactor = 2202,
  SCR_GAMECONST_predictspawnpoint = 2203,
  SCR_GAMECONST_makegrenadedud = 2204,
  SCR_GAMECONST_getclientflag = 2205,
  SCR_GAMECONST_setscriptmoverflag = 2206,
  SCR_GAMECONST_fakefire = 2207,
  SCR_GAMECONST_predictgrenade = 2208,
  SCR_GAMECONST_getindexforactivecontract = 2209,
  SCR_GAMECONST_getactivecontractprogress = 2210,
  SCR_GAMECONST_incrementactivecontractprogress = 2211,
  SCR_GAMECONST_incrementactivecontracttime = 2212,
  SCR_GAMECONST_isactivecontractcomplete = 2213,
  SCR_GAMECONST_hasactivecontractexpired = 2214,
  SCR_GAMECONST_getactivecontracttimepassed = 2215,
  SCR_GAMECONST_resetactivecontractprogress = 2216,
  SCR_GAMECONST_getpregameclass = 2217,
  SCR_GAMECONST_getpregameteam = 2218,
  SCR_GAMECONST_setpregameclass = 2219,
  SCR_GAMECONST_setpregameteam = 2220,
  SCR_GAMECONST_istestclient = 2221,
  SCR_GAMECONST_actorikenabled = 2222,
  SCR_GAMECONST_aimatentityik = 2223,
  SCR_GAMECONST_aimatposik = 2224,
  SCR_GAMECONST_setthirdperson = 2225,
  SCR_GAMECONST_project2dto3d = 2226,
  SCR_GAMECONST_throw = 2227,
  SCR_GAMECONST_forwardrotatearoundupbyangle = 2228,
  SCR_GAMECONST_linktoupdateoffset = 2229,
  SCR_GAMECONST_setcharacterindex = 2230,
  SCR_GAMECONST_getcharacterindex = 2231,
  SCR_GAMECONST_scriptcallbackonfootstepevent = 2232,
  SCR_GAMECONST_usefootsteptable = 2233,
  SCR_GAMECONST_useplayerfootsteptable = 2234,
  SCR_GAMECONST_footstepdonothing = 2235,
  SCR_GAMECONST_footstepdoeverything = 2236,
  SCR_GAMECONST_footstepdosound = 2237,
  SCR_GAMECONST_footstepdofootstepfx = 2238,
  SCR_GAMECONST_usefootstepfxtable = 2239,
  SCR_GAMECONST_setmaterialoverride = 2240,
  SCR_GAMECONST_clearmaterialoverride = 2241,
  SCR_GAMECONST_setsteptriggersound = 2242,
  SCR_GAMECONST_clearsteptriggersound = 2243,
  SCR_GAMECONST_getmovementtype = 2244,
  SCR_GAMECONST_luiload = 2245,
  SCR_GAMECONST_luishow = 2246,
  SCR_GAMECONST_luihide = 2247,
  SCR_GAMECONST_luievent = 2248,
  SCR_GAMECONST_startmultiplayer = 2249,
  SCR_GAMECONST_startzombies = 2250,
  SCR_GAMECONST_launchsavegame = 2251,
  SCR_GAMECONST_suienable = 2252,
  SCR_GAMECONST_suidisable = 2253,
  SCR_GAMECONST_bbclasschoice = 2254,
  SCR_GAMECONST_luienable = 2255,
  SCR_GAMECONST_luidisable = 2256,
  SCR_GAMECONST_isluienabled = 2257,
  SCR_GAMECONST_argusgetorigin = 2258,
  SCR_GAMECONST_deleteelem = 2259,
  SCR_GAMECONST_setloadoutitem = 2260,
  SCR_GAMECONST_argussetdistance = 2261,
  SCR_GAMECONST_argussetattach = 2262,
  SCR_GAMECONST_argussetvisible = 2263,
  SCR_GAMECONST_argussetstacked = 2264,
  SCR_GAMECONST_argussetbracket = 2265,
  SCR_GAMECONST_removeargus = 2266,
  SCR_GAMECONST_getanimforstate = 2267,
  SCR_GAMECONST_iscinematicinprogress = 2268,
  SCR_GAMECONST_iscinematicpreloading = 2269,
  SCR_GAMECONST_argussetoffset = 2270,
  SCR_GAMECONST_argussetfaderate = 2271,
  SCR_GAMECONST_setsonarattachmentenabled = 2272,
  SCR_GAMECONST_precacheleaderboards = 2273,
  SCR_GAMECONST_setcolorelem = 2274,
  SCR_GAMECONST_moveelem = 2275,
  SCR_GAMECONST_presentation_rate = 2276,
  SCR_GAMECONST_rpc = 2277,
  SCR_GAMECONST_is_visible = 2278,
  SCR_GAMECONST_rotateelem = 2279,
  SCR_GAMECONST_vehfovcosine = 2280,
  SCR_GAMECONST_vehfovcosinebusy = 2281,
  SCR_GAMECONST_vehmaxsightdistsqrd = 2282,
  SCR_GAMECONST_vehsightlatency = 2283,
  SCR_GAMECONST_vehignoreclosefoliage = 2284,
  SCR_GAMECONST_setripplewave = 2285,
  SCR_GAMECONST_x_alignment = 2286,
  SCR_GAMECONST_y_alignment = 2287,
  SCR_GAMECONST_x_anchor = 2288,
  SCR_GAMECONST_y_anchor = 2289,
  SCR_GAMECONST_elemvirtualtophysical = 2290,
  SCR_GAMECONST_elemphysicaltovirtual = 2291,
  SCR_GAMECONST_gettimefromvehiclenodetonode = 2292,
  SCR_GAMECONST_ishostforbots = 2293,
  SCR_GAMECONST_is_radial = 2294,
  SCR_GAMECONST_start_angle = 2295,
  SCR_GAMECONST_end_angle = 2296,
  SCR_GAMECONST_newradialmaterialelem = 2297,
  SCR_GAMECONST_scale_children = 2298,
  SCR_GAMECONST_argusgetui = 2299,
  SCR_GAMECONST_columns = 2300,
  SCR_GAMECONST_rows = 2301,
  SCR_GAMECONST_precacheanimstatedef = 2302,
  SCR_GAMECONST_setanimstatefromasd = 2303,
  SCR_GAMECONST_hasanimstatefromasd = 2304,
  SCR_GAMECONST_getanimstatefromasd = 2305,
  SCR_GAMECONST_getanimsubstatefromasd = 2306,
  SCR_GAMECONST_getanimsubstatecountfromasd = 2307,
  SCR_GAMECONST_getanimfromasd = 2308,
  SCR_GAMECONST_getanimlengthfromasd = 2309,
  SCR_GAMECONST_getanimhasnotetrackfromasd = 2310,
  SCR_GAMECONST_argusforcedrawbracket = 2311,
  SCR_GAMECONST_chargeshotlevel = 2312,
  SCR_GAMECONST_skillcleardata = 2313,
  SCR_GAMECONST_skillplayersetresult = 2314,
  SCR_GAMECONST_skillupdate = 2315,
  SCR_GAMECONST_recordleaguewinner = 2316,
  SCR_GAMECONST_recordleaguepreloser = 2317,
  SCR_GAMECONST_fixedlinkyawonly = 2318,
  SCR_GAMECONST_getzbarrierarray = 2319,
  SCR_GAMECONST_iszbarrier = 2320,
  SCR_GAMECONST_getnumzbarrierpieces = 2321,
  SCR_GAMECONST_getzbarrierpiecestate = 2322,
  SCR_GAMECONST_setzbarrierpiecestate = 2323,
  SCR_GAMECONST_iszbarrieropen = 2324,
  SCR_GAMECONST_iszbarrierclosed = 2325,
  SCR_GAMECONST_hidezbarrierpiece = 2326,
  SCR_GAMECONST_showzbarrierpiece = 2327,
  SCR_GAMECONST_zbarrierpieceusedefaultmodel = 2328,
  SCR_GAMECONST_zbarrierpieceusealternatemodel = 2329,
  SCR_GAMECONST_zbarrierpieceuseupgradedmodel = 2330,
  SCR_GAMECONST_getupgradedpiecenumlives = 2331,
  SCR_GAMECONST_getzbarrierpieceindicesinstate = 2332,
  SCR_GAMECONST_getzbarrierpieceanimlengthforstate = 2333,
  SCR_GAMECONST_getzbarrierpieceanimstate = 2334,
  SCR_GAMECONST_getzbarrierpieceanimsubstate = 2335,
  SCR_GAMECONST_zbarriersupportszombietaunts = 2336,
  SCR_GAMECONST_zbarriersupportszombiereachthroughattacks = 2337,
  SCR_GAMECONST_getzbarriertauntanimstate = 2338,
  SCR_GAMECONST_getzbarrierreachthroughattackanimstate = 2339,
  SCR_GAMECONST_getzbarriernumattackslots = 2340,
  SCR_GAMECONST_getzbarrierattackslothorzoffset = 2341,
  SCR_GAMECONST_setpathtransitiontime = 2342,
  SCR_GAMECONST_setteamhasmeat = 2343,
  SCR_GAMECONST_vehdontejectoccupantsondeath = 2344,
  SCR_GAMECONST_nodesarelinked = 2345,
  SCR_GAMECONST_forceyellowdot = 2346,
  SCR_GAMECONST_disableyellowdot = 2347,
  SCR_GAMECONST_allowcamerarotation = 2348,
  SCR_GAMECONST_reloadonnunchuk = 2349,
  SCR_GAMECONST_reloadonwiiumote = 2350,
  SCR_GAMECONST_debugbreak = 2351,
  SCR_GAMECONST_setcheapflag = 2352,
  SCR_GAMECONST_physicsjetthrust = 2353,
  SCR_GAMECONST_getpathfixedoffset = 2354,
  SCR_GAMECONST_getpathvariableoffset = 2355,
  SCR_GAMECONST_getvehicleavoidancenodes = 2356,
  SCR_GAMECONST_ismeleecharged = 2357,
  SCR_GAMECONST_initialweaponraise = 2358,
  SCR_GAMECONST_seteverhadweaponall = 2359,
  SCR_GAMECONST_getcurrentweaponspinlerp = 2360,
  SCR_GAMECONST_setcurrentweaponspinlerp = 2361,
  SCR_GAMECONST_lightfxnamearray = 2362,
  SCR_GAMECONST_lightfxtagarray = 2363,
  SCR_GAMECONST_friendlylightfxname = 2364,
  SCR_GAMECONST_friendlylightfxtag = 2365,
  SCR_GAMECONST_enemylightfxname = 2366,
  SCR_GAMECONST_enemylightfxtag = 2367,
  SCR_GAMECONST_lookat = 2368,
  SCR_GAMECONST_settypewriterfx = 2369,
  SCR_GAMECONST_playerbeingspectated = 2370,
  SCR_GAMECONST_weaponplayejectbrass = 2371,
  SCR_GAMECONST_setdrawinfrared = 2372,
  SCR_GAMECONST_newdamageindicatorhudelem = 2373,
  SCR_GAMECONST_sprintuprequired = 2374,
  SCR_GAMECONST_atgoal = 2375,
  SCR_GAMECONST_hasgoal = 2376,
  SCR_GAMECONST_isusingoffhand = 2377,
  SCR_GAMECONST_arrayremovevalue = 2378,
  SCR_GAMECONST_arrayremoveindex = 2379,
  SCR_GAMECONST_arrayinsert = 2380,
  SCR_GAMECONST_trackweaponfirenative = 2381,
  SCR_GAMECONST_arraycombine = 2382,
  SCR_GAMECONST_arraycopy = 2383,
  SCR_GAMECONST_bbpostdemostreamstatsforround = 2384,
  SCR_GAMECONST_isinarray = 2385,
  SCR_GAMECONST_remotecontrolturret = 2386,
  SCR_GAMECONST_remotecontrolturretoff = 2387,
  SCR_GAMECONST_recordkillstreakevent = 2388,
  SCR_GAMECONST_recordgameevent = 2389,
  SCR_GAMECONST_recordkillmodifier = 2390,
  SCR_GAMECONST_recordmedal = 2391,
  SCR_GAMECONST_recordloadoutandperks = 2392,
  SCR_GAMECONST_recordnumzombierounds = 2393,
  SCR_GAMECONST_recordgameresult = 2394,
  SCR_GAMECONST_recordmultikill = 2395,
  SCR_GAMECONST_registerclientfield = 2396,
  SCR_GAMECONST_codesetclientfield = 2397,
  SCR_GAMECONST_codegetclientfield = 2398,
  SCR_GAMECONST_codesetworldclientfield = 2399,
  SCR_GAMECONST_codegetworldclientfield = 2400,
  SCR_GAMECONST_setlightingentity = 2401,
  SCR_GAMECONST_vehmodel = 2402,
  SCR_GAMECONST_vehmodelenemy = 2403,
  SCR_GAMECONST_setplayercurrentobjective = 2404,
  SCR_GAMECONST_setobjectivepointstatus = 2405,
  SCR_GAMECONST_setdemolockonvalues = 2406,
  SCR_GAMECONST_ignorecheapentityflag = 2407,
  SCR_GAMECONST_setforceads = 2408,
  SCR_GAMECONST_setlutvolumeactivebank = 2409,
  SCR_GAMECONST_getlastarraykey = 2410,
  SCR_GAMECONST_getprevarraykey = 2411,
  SCR_GAMECONST_makesentient = 2412,
  SCR_GAMECONST_coversearchinterval = 2413,
  SCR_GAMECONST_agrkills = 2414,
  SCR_GAMECONST_hacks = 2415,
  SCR_GAMECONST_setplayercurrentstreak = 2416,
  SCR_GAMECONST_currentspectatingclient = 2417,
  SCR_GAMECONST_goodenemyonly = 2418,
  SCR_GAMECONST_scriptmodelsuseanimtree = 2419,
  SCR_GAMECONST_toupper = 2420,
  SCR_GAMECONST_getcontrollertype = 2421,
  SCR_GAMECONST_setambienttrigger = 2422,
  SCR_GAMECONST_setambientpackage = 2423,
  SCR_GAMECONST_forceambientroom = 2424,
  SCR_GAMECONST_forceambientpackage = 2425,
  SCR_GAMECONST_setambientroomcontextengine = 2426,
  SCR_GAMECONST_ambient_package = 2427,
  SCR_GAMECONST_createqrcode = 2428,
  SCR_GAMECONST_deleteqrcode = 2429,
  SCR_GAMECONST_getnearestnode = 2430,
  SCR_GAMECONST_getvisiblenode = 2431,
  SCR_GAMECONST_gamepadusedlast = 2432,
  SCR_GAMECONST_vehcheckforpredictedcrash = 2433,
  SCR_GAMECONST_vehonpath = 2434,
  SCR_GAMECONST_turnedhuman = 2435,
  SCR_GAMECONST_usealternatereviveicon = 2436,
  SCR_GAMECONST_setdvarint = 2437,
  SCR_GAMECONST_clearlookat = 2438,
  SCR_GAMECONST_getgoal = 2439,
  SCR_GAMECONST_vehaircraftcollisionenabled = 2440,
  SCR_GAMECONST_tension = 2441,
  SCR_GAMECONST_nodesvisible = 2442,
  SCR_GAMECONST_nodescanpath = 2443,
  SCR_GAMECONST_setlutscriptindex = 2444,
  SCR_GAMECONST_getloadoutitemref = 2445,
  SCR_GAMECONST_getloadoutweapon = 2446,
  SCR_GAMECONST_getloadoutperks = 2447,
  SCR_GAMECONST_codesetplayerstateclientfield = 2448,
  SCR_GAMECONST_codegetplayerstateclientfield = 2449,
  SCR_GAMECONST_applyknockback = 2450,
  SCR_GAMECONST_getmissileowner = 2451,
  SCR_GAMECONST_canclaimnode = 2452,
  SCR_GAMECONST_getminbitcountfornum = 2453,
  SCR_GAMECONST_setweaponoverheating = 2454,
  SCR_GAMECONST_getloadoutallocation = 2455,
  SCR_GAMECONST_getvisiblenodes = 2456,
  SCR_GAMECONST_visionsetnakedlerp = 2457,
  SCR_GAMECONST_cincaptureenablealpha = 2458,
  SCR_GAMECONST_cincapturedisablealpha = 2459,
  SCR_GAMECONST_sethidegumpalpha = 2460,
  SCR_GAMECONST_gettouchingvolume = 2461,
  SCR_GAMECONST_objective_visibleteams = 2462,
  SCR_GAMECONST_objective_setprogress = 2463,
  SCR_GAMECONST_objective_setplayerusing = 2464,
  SCR_GAMECONST_objective_clearplayerusing = 2465,
  SCR_GAMECONST_objective_clearallusing = 2466,
  SCR_GAMECONST_forceoffhandend = 2467,
  SCR_GAMECONST_objective_setgamemodeflags = 2468,
  SCR_GAMECONST_objective_getgamemodeflags = 2469,
  SCR_GAMECONST_setupclientfieldcodecallbacks = 2470,
  SCR_GAMECONST_zbarrierpieceuseboxriselogic = 2471,
  SCR_GAMECONST_resetzombieboxweapons = 2472,
  SCR_GAMECONST_addzombieboxweapon = 2473,
  SCR_GAMECONST_getmoverent = 2474,
  SCR_GAMECONST_objective_clearentity = 2475,
  SCR_GAMECONST_ismovingplatform = 2476,
  SCR_GAMECONST_entitytrace = 2477,
  SCR_GAMECONST_allowattack = 2478,
  SCR_GAMECONST_pressads = 2479,
  SCR_GAMECONST_getthreats = 2480,
  SCR_GAMECONST_predictposition = 2481,
  SCR_GAMECONST_botsighttracepassed = 2482,
  SCR_GAMECONST_isreloading = 2483,
  SCR_GAMECONST_setmissileowner = 2484,
  SCR_GAMECONST_getgunangles = 2485,
  SCR_GAMECONST_setinitialplayersconnected = 2486,
  SCR_GAMECONST_setzbarriercolmodel = 2487,
  SCR_GAMECONST_stancebuttonpressed = 2488,
  SCR_GAMECONST_arraysort = 2489,
  SCR_GAMECONST_worldtrace = 2490,
  SCR_GAMECONST_getdamageableentarray = 2491,
  SCR_GAMECONST_vehhighlyawareradius = 2492,
  SCR_GAMECONST_pressmelee = 2493,
  SCR_GAMECONST_setmaplatlong = 2494,
  SCR_GAMECONST_setteamreviveicon = 2495,
  SCR_GAMECONST_allowtacticalinsertion = 2496,
  SCR_GAMECONST_recordkillstreakendevent = 2497,
  SCR_GAMECONST_incrementlifestat = 2498,
  SCR_GAMECONST_incrementplayerstat = 2499,
  SCR_GAMECONST_recordmatchsummaryzombieendgamedata = 2500,
  SCR_GAMECONST_matchrecorderincrementheaderstat = 2501,
  SCR_GAMECONST_recordplayerdeathzombies = 2502,
  SCR_GAMECONST_recordmatchinit = 2503,
  SCR_GAMECONST_recordloadoutperksandkillstreaks = 2504,
  SCR_GAMECONST_setpitchorient = 2505,
  SCR_GAMECONST_getfriendlies = 2506,
  SCR_GAMECONST_getenemies = 2507,
  SCR_GAMECONST_getutc = 2508,
  SCR_GAMECONST_luinotifyeventtospectators = 2509,
  SCR_GAMECONST_setweaponheatpercent = 2510,
  SCR_GAMECONST_forceinfraredmaterialsstreaming = 2511,
  SCR_GAMECONST_setalphafadeforname = 2512,
  SCR_GAMECONST_botsetfailsafenode = 2513,
  SCR_GAMECONST_pressdtpbutton = 2514,
  SCR_GAMECONST_ropepulse = 2515,
  SCR_GAMECONST_getweaponsupportedattachments = 2516,
  SCR_GAMECONST_setactorweapon = 2517,
  SCR_GAMECONST_immunetodemogamehudsettings = 2518,
  SCR_GAMECONST_resetfov = 2519,
  SCR_GAMECONST_getcurrentweaponaltweapon = 2520,
  SCR_GAMECONST_murderline = 2521,
  SCR_GAMECONST_setentityweapon = 2522,
  SCR_GAMECONST_gamehistoryfinishmatch = 2523,
  SCR_GAMECONST_animflaggedscripted = 2524,
  SCR_GAMECONST_getloadoutitemindex = 2525,
  SCR_GAMECONST_ishidden = 2526,
  SCR_GAMECONST_getclientfieldversion = 2527,
  SCR_GAMECONST_getfreeactorcount = 2528,
  SCR_GAMECONST_pointstowin = 2529,
  SCR_GAMECONST_vehviewmodel = 2530,
  SCR_GAMECONST_fxblocksight = 2531,
  SCR_GAMECONST_allowbottargetting = 2532,
  SCR_GAMECONST_getserverhighestclientfieldversion = 2533,
  SCR_GAMECONST_setblurbylocalclientnum = 2534,
  SCR_GAMECONST_killsconfirmed = 2535,
  SCR_GAMECONST_killsdenied = 2536,
  SCR_GAMECONST_isweapondisallowedatmatchstart = 2537,
  SCR_GAMECONST_is_ps3 = 2538,
  SCR_GAMECONST_is_xenon = 2539,
  SCR_GAMECONST_is_pc = 2540,
  SCR_GAMECONST_is_wiiu = 2541,
  SCR_GAMECONST_botsetdefaultclass = 2542,
  SCR_GAMECONST_botclassadditem = 2543,
  SCR_GAMECONST_botclassaddattachment = 2544,
  SCR_GAMECONST_getweaponexplosionradius = 2545,
  SCR_GAMECONST_getweaponattachments = 2546,
  SCR_GAMECONST_getwiiuremotepointerposition = 2547,
  SCR_GAMECONST_getcamposbylocalclientnum = 2548,
  SCR_GAMECONST_getcamanglesbylocalclientnum = 2549,
  SCR_GAMECONST_demoisanyfreemovecamera = 2550,
  SCR_GAMECONST_demoismoviecamera = 2551,
  SCR_GAMECONST_demoiseditcamera = 2552,
  SCR_GAMECONST_demoisdollycamera = 2553,
  SCR_GAMECONST_movepoint = 2554,
  SCR_GAMECONST_setfreecameralockonallowed = 2555,
  SCR_GAMECONST_botleavegame = 2556,
  SCR_GAMECONST_immunetodemofreecamera = 2557,
  SCR_GAMECONST_setrenderinthirdpersonspectate = 2558,
  SCR_GAMECONST_iscinematicwebm = 2559,
  SCR_GAMECONST_ghostindemo = 2560,
  SCR_GAMECONST_showindemo = 2561,
  SCR_GAMECONST_useweaponmodel = 2562,
  SCR_GAMECONST_islocalgame = 2563,
  SCR_GAMECONST_refreshshieldattachment = 2564,
  SCR_GAMECONST_overridelightingorigin = 2565,
  SCR_GAMECONST_gpsjammeractive = 2566,
  SCR_GAMECONST_gpsjammerinactive = 2567,
  SCR_GAMECONST_finishmeleehit = 2568,
  SCR_GAMECONST_makelightslave = 2569,
  SCR_GAMECONST_getenterbutton = 2570,
  SCR_GAMECONST_setforcenotsimple = 2571,
  SCR_GAMECONST_forcegrenadethrow = 2572,
  SCR_GAMECONST_setoffhandvisible = 2573,
  SCR_GAMECONST_sendkillstreakdamageevent = 2574,
  SCR_GAMECONST_getstowedweapon = 2575,
  SCR_GAMECONST_createstreamermodelhint = 2576,
  SCR_GAMECONST_fakedamagefrom = 2577,
  SCR_GAMECONST_doesweaponreplacespawnweapon = 2578,
  SCR_GAMECONST_getscreenwidth = 2579,
  SCR_GAMECONST_getscreenheight = 2580,
  SCR_GAMECONST_MAX = 2581,
} TAG_UNNAMED_90, *PTAG_UNNAMED_90;

enum guidedMissileType_t
{
  MISSILE_GUIDANCE_NONE = 0,
  MISSILE_GUIDANCE_SIDEWINDER = 1,
  MISSILE_GUIDANCE_HELLFIRE = 2,
  MISSILE_GUIDANCE_JAVELIN = 3,
  MISSILE_GUIDANCE_BALLISTIC = 4,
  MISSILE_GUIDANCE_WIREGUIDED = 5,
  MISSILE_GUIDANCE_TVGUIDED = 6,
  MISSILE_GUIDANCE_DRONE = 7,
  MISSILE_GUIDANCE_HEATSEEKING = 8,
  MISSILE_GUIDANCE_COUNT = 9,
};

enum D3D10_FEATURE_LEVEL1
{
  D3D10_FEATURE_LEVEL_10_0 = 0xffffa000,
  D3D10_FEATURE_LEVEL_10_1 = 0xffffa100,
  D3D10_FEATURE_LEVEL_9_1 = 0xffff9100,
  D3D10_FEATURE_LEVEL_9_2 = 0xffff9200,
  D3D10_FEATURE_LEVEL_9_3 = 0xffff9300,
};

enum bdHTTPWrapperBase::bdOperation
{
  BD_IDLE = 0,
  BD_UPLOAD = 1,
  BD_DOWNLOAD = 2,
  BD_DELETE = 3,
  BD_COPY = 4,
};

typedef enum _TAG_UNNAMED_91
{
  BACKEND_EVENT_WORKER_CMD = 0,
  BACKEND_EVENT_GENERIC = 1,
  BACKEND_EVENT_COUNT = 2,
} TAG_UNNAMED_91, *PTAG_UNNAMED_91;

typedef struct _RTL_CRITICAL_SECTION
{
  /* 0x0000 */ struct _RTL_CRITICAL_SECTION_DEBUG* DebugInfo;
  /* 0x0004 */ long LockCount;
  /* 0x0008 */ long RecursionCount;
  /* 0x000c */ void* OwningThread;
  /* 0x0010 */ void* LockSemaphore;
  /* 0x0014 */ unsigned long SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION; /* size: 0x0018 */

struct PartySceNpId
{
  /* 0x0000 */ char handle[20];
  /* 0x0014 */ unsigned char opt[8];
  /* 0x001c */ unsigned char reserved[8];
}; /* size: 0x0024 */

enum YUV_TYPE
{
  REG_YUV = 0,
  INT_YUV = 1,
};

enum bdNATTravClientData::bdNATTravClientDataState
{
  BD_NTCDS_INITIAL = 0,
  BD_NTCDS_STAGE_1 = 1,
  BD_NTCDS_STAGE_2 = 2,
  BD_NTCDS_STAGE_3 = 3,
};

enum OffhandClass
{
  OFFHAND_CLASS_NONE = 0,
  OFFHAND_CLASS_FRAG_GRENADE = 1,
  OFFHAND_CLASS_SMOKE_GRENADE = 2,
  OFFHAND_CLASS_FLASH_GRENADE = 3,
  OFFHAND_CLASS_GEAR = 4,
  OFFHAND_CLASS_SUPPLYDROP_MARKER = 5,
  OFFHAND_CLASS_COUNT = 6,
};

enum D2D1_DRAW_TEXT_OPTIONS
{
  D2D1_DRAW_TEXT_OPTIONS_NO_SNAP = 1,
  D2D1_DRAW_TEXT_OPTIONS_CLIP = 2,
  D2D1_DRAW_TEXT_OPTIONS_NONE = 0,
  D2D1_DRAW_TEXT_OPTIONS_FORCE_DWORD = -1,
};

enum bdFileInfo::bdVisibility
{
  BD_VISIBLE_PUBLIC = 0,
  BD_VISIBLE_PRIVATE = 1,
  BD_MAX_VISIBILITY_TYPE = 2,
};

enum weapProjExposion_t
{
  WEAPPROJEXP_GRENADE = 0,
  WEAPPROJEXP_ROCKET = 1,
  WEAPPROJEXP_FLASHBANG = 2,
  WEAPPROJEXP_NONE = 3,
  WEAPPROJEXP_DUD = 4,
  WEAPPROJEXP_SMOKE = 5,
  WEAPPROJEXP_HEAVY = 6,
  WEAPPROJEXP_FIRE = 7,
  WEAPPROJEXP_NAPALMBLOB = 8,
  WEAPPROJEXP_BOLT = 9,
  WEAPPROJEXP_SHRAPNELSPAN = 10,
  WEAPPROJEXP_NUM = 11,
};

typedef enum _NV_PATH_MODE
{
  FILL_PATH_NV = 0xffff8f18,
  STROKE_PATH_NV = 0xffff8f19,
} NV_PATH_MODE, *PNV_PATH_MODE;

typedef enum _TAG_UNNAMED_92
{
  CRYPT_OK = 0,
  CRYPT_ERROR = 1,
  CRYPT_NOP = 2,
  CRYPT_INVALID_KEYSIZE = 3,
  CRYPT_INVALID_ROUNDS = 4,
  CRYPT_FAIL_TESTVECTOR = 5,
  CRYPT_BUFFER_OVERFLOW = 6,
  CRYPT_INVALID_PACKET = 7,
  CRYPT_INVALID_PRNGSIZE = 8,
  CRYPT_ERROR_READPRNG = 9,
  CRYPT_INVALID_CIPHER = 10,
  CRYPT_INVALID_HASH = 11,
  CRYPT_INVALID_PRNG = 12,
  CRYPT_MEM = 13,
  CRYPT_PK_TYPE_MISMATCH = 14,
  CRYPT_PK_NOT_PRIVATE = 15,
  CRYPT_INVALID_ARG = 16,
  CRYPT_FILE_NOTFOUND = 17,
  CRYPT_PK_INVALID_TYPE = 18,
  CRYPT_PK_INVALID_SYSTEM = 19,
  CRYPT_PK_DUP = 20,
  CRYPT_PK_NOT_FOUND = 21,
  CRYPT_PK_INVALID_SIZE = 22,
  CRYPT_INVALID_PRIME_SIZE = 23,
  CRYPT_PK_INVALID_PADDING = 24,
} TAG_UNNAMED_92, *PTAG_UNNAMED_92;

enum activeReticleType_t
{
  VEH_ACTIVE_RETICLE_NONE = 0,
  VEH_ACTIVE_RETICLE_PIP_ON_A_STICK = 1,
  VEH_ACTIVE_RETICLE_BOUNCING_DIAMOND = 2,
  VEH_ACTIVE_RETICLE_MISSILE_LOCK = 3,
  VEH_ACTIVE_RETICLE_COUNT = 4,
};

enum GamePadStick
{
  GPAD_INVALID = 0,
  GPAD_LX = 0x40000000,
  GPAD_LY = 0x40000001,
  GPAD_RX = 0x40000002,
  GPAD_RY = 0x40000003,
};

enum ammoCounterClipType_t
{
  AMMO_COUNTER_CLIP_NONE = 0,
  AMMO_COUNTER_CLIP_MAGAZINE = 1,
  AMMO_COUNTER_CLIP_SHORTMAGAZINE = 2,
  AMMO_COUNTER_CLIP_SHOTGUN = 3,
  AMMO_COUNTER_CLIP_ROCKET = 4,
  AMMO_COUNTER_CLIP_BELTFED = 5,
  AMMO_COUNTER_CLIP_ALTWEAPON = 6,
  AMMO_COUNTER_CLIP_COUNT = 7,
};

typedef enum _TAG_UNNAMED_93
{
  LL_GP_RAMP_DOWN_INIT = 2,
  LL_GP_RAMP_DOWN = 3,
  LL_GP_RAMP_UP_INIT = 4,
  LL_GP_RAMP_UP = 5,
  LL_GP_RAMP_UP_HOLD_INIT = 6,
  LL_GP_WAIT = 7,
  LL_GP_WAIT_ON_INIT = 8,
  LL_GP_WAIT_OFF_INIT = 9,
} TAG_UNNAMED_93, *PTAG_UNNAMED_93;

enum ImpactType
{
  IMPACT_TYPE_NONE = 0,
  IMPACT_TYPE_BULLET_SMALL = 1,
  IMPACT_TYPE_BULLET_LARGE = 2,
  IMPACT_TYPE_BULLET_AP = 3,
  IMPACT_TYPE_BULLET_XTREME = 4,
  IMPACT_TYPE_SHOTGUN = 5,
  IMPACT_TYPE_GRENADE_BOUNCE = 6,
  IMPACT_TYPE_GRENADE_EXPLODE = 7,
  IMPACT_TYPE_RIFLE_GRENADE = 8,
  IMPACT_TYPE_ROCKET_EXPLODE = 9,
  IMPACT_TYPE_ROCKET_EXPLODE_XTREME = 10,
  IMPACT_TYPE_PROJECTILE_DUD = 11,
  IMPACT_TYPE_MORTAR_SHELL = 12,
  IMPACT_TYPE_TANK_SHELL = 13,
  IMPACT_TYPE_BOLT = 14,
  IMPACT_TYPE_BLADE = 15,
  IMPACT_TYPE_COUNT = 16,
};

typedef enum _TAG_UNNAMED_94
{
  NUM_MOVER_RECORDS = 32,
} TAG_UNNAMED_94, *PTAG_UNNAMED_94;

typedef enum _TAG_UNNAMED_95
{
  AVOID_FLAG_STUBBORN = 1,
  AVOID_FLAG_DISABLED = 2,
} TAG_UNNAMED_95, *PTAG_UNNAMED_95;

enum objectiveState_t
{
  OBJST_EMPTY = 0,
  OBJST_ACTIVE = 1,
  OBJST_INVISIBLE = 2,
  OBJST_NUMSTATES = 3,
};

enum statsValidation_t
{
  STATS_VALIDATION_PASSED = 0,
  STATS_VALIDATION_FAILED_REPORT = 1,
  STATS_VALIDATION_FAILED_TAKEACTION = 2,
};

enum tagINVOKEKIND
{
  INVOKE_FUNC = 1,
  INVOKE_PROPERTYGET = 2,
  INVOKE_PROPERTYPUT = 4,
  INVOKE_PROPERTYPUTREF = 8,
};

enum nearestNodeHeightCheck
{
  NEAREST_NODE_DO_HEIGHT_CHECK = 0,
  NEAREST_NODE_DONT_DO_HEIGHT_CHECK = 1,
};

enum FS_SERVER_COMPARE_RESULT
{
  FILES_MATCH = 0,
  NEED_DOWNLOAD = 1,
  NOT_DOWNLOADABLE = 2,
};

enum weapInventoryType_t
{
  WEAPINVENTORY_PRIMARY = 0,
  WEAPINVENTORY_OFFHAND = 1,
  WEAPINVENTORY_ITEM = 2,
  WEAPINVENTORY_ALTMODE = 3,
  WEAPINVENTORY_MELEE = 4,
  WEAPINVENTORY_DWLEFTHAND = 5,
  WEAPINVENTORYCOUNT = 6,
};

class bdFileInfo
{
  /* 0x0000 */ long Padding_48[2];
  /* 0x0008 */ unsigned __int64 m_fileID;
  /* 0x0010 */ unsigned int m_createTime;
  /* 0x0014 */ unsigned int m_modifedTime;
  /* 0x0018 */ enum bdFileInfo::bdVisibility m_visibility;
  /* 0x001c */ long Padding_49;
  /* 0x0020 */ unsigned __int64 m_ownerID;
  /* 0x0028 */ char m_fileName[128];
  /* 0x00a8 */ unsigned int m_fileSize;
}; /* size: 0x00b0 */

enum bdAuthTicket::bdTicketTypes
{
  BD_AUTH_USER_TO_SERVICE_TICKET = 0,
  BD_AUTH_HOST_TO_SERVICE_TICKET = 1,
  BD_AUTH_USER_TO_HOST_TICKET = 2,
};

enum D3D11_COUNTER
{
  D3D11_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000,
};

typedef enum _TAG_UNNAMED_96
{
  LL_GS_WAIT_OFF_INIT = 2,
  LL_GS_WAIT = 3,
  LL_GS_WAIT_ON_INIT = 4,
} TAG_UNNAMED_96, *PTAG_UNNAMED_96;

enum SndNotifyType
{
  SND_NOTIFY_NOP = 0,
  SND_NOTIFY_ENT_UPDATE = 1,
  SND_NOTIFY_SUBTITLE = 2,
  SND_NOTIFY_LENGTH = 3,
  SND_NOTIFY_PLAYBACK_UPDATE = 4,
  SND_NOTIFY_PLAYBACK_FREE = 5,
  SND_NOTIFY_BANK_FREE = 6,
};

typedef enum _TAG_UNNAMED_97
{
  MAX_HISTORY = 4,
} TAG_UNNAMED_97, *PTAG_UNNAMED_97;

struct GfxLightScale
{
  /* 0x0000 */ float diffuseScale;
  /* 0x0004 */ float specularScale;
}; /* size: 0x0008 */

enum DynEntityCollType
{
  DYNENT_COLL_CLIENT_FIRST = 0,
  DYNENT_COLL_CLIENT_MODEL = 0,
  DYNENT_COLL_CLIENT_BRUSH = 1,
  DYNENT_COLL_SERVER_FIRST = 2,
  DYNENT_COLL_SERVER_MODEL = 2,
  DYNENT_COLL_SERVER_BRUSH = 3,
  DYNENT_COLL_COUNT = 4,
};

enum barrelType_t
{
  BARREL_TYPE_SINGLE = 0,
  BARREL_TYPE_DUAL = 1,
  BARREL_TYPE_DUAL_ALTERNATE = 2,
  BARREL_TYPE_QUAD = 3,
  BARREL_TYPE_QUAD_ALTERNATE = 4,
  BARREL_TYPE_QUAD_DOUBLE_ALTERNATE = 5,
  BARREL_TYPE_COUNT = 6,
};

typedef enum _TAG_UNNAMED_98
{
  CENT_ACTOR_PRONE_NONE = 0,
  CENT_ACTOR_PRONE_NORMAL = 1,
  CENT_ACTOR_PRONE_CORPSE = 2,
} TAG_UNNAMED_98, *PTAG_UNNAMED_98;

enum tagApplicationType
{
  ServerApplication = 0,
  LibraryApplication = 1,
};

enum bb_profilelog_thread
{
  PROFILELOG_THREAD_UNKNOWN = 0,
  PROFILELOG_THREAD_SERVER = 1,
  PROFILELOG_THREAD_MAINTHREAD = 2,
  PROFILELOG_THREAD_SERVER_NETWORK_FRAME = 3,
  PROFILELOG_THREAD_COUNT = 4,
};

typedef enum _TAG_UNNAMED_99
{
  FX_CMD_CAMERA_REGULAR = 0,
  FX_CMD_CAMERA_EXTRA = 1,
} TAG_UNNAMED_99, *PTAG_UNNAMED_99;

typedef struct _XMXDECN4
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ int x : 10; /* bit position: 0 */
      /* 0x0000 */ int y : 10; /* bit position: 10 */
      /* 0x0000 */ int z : 10; /* bit position: 20 */
      /* 0x0000 */ unsigned int w : 2; /* bit position: 30 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMXDECN4, *PXMXDECN4; /* size: 0x0004 */

enum PIDMSI_STATUS_VALUE
{
  PIDMSI_STATUS_NORMAL = 0,
  PIDMSI_STATUS_NEW = 1,
  PIDMSI_STATUS_PRELIM = 2,
  PIDMSI_STATUS_DRAFT = 3,
  PIDMSI_STATUS_INPROGRESS = 4,
  PIDMSI_STATUS_EDIT = 5,
  PIDMSI_STATUS_REVIEW = 6,
  PIDMSI_STATUS_PROOF = 7,
  PIDMSI_STATUS_FINAL = 8,
  PIDMSI_STATUS_OTHER = 32767,
};

enum SndSpeaker
{
  SND_SPEAKER_LEFT = 0,
  SND_SPEAKER_RIGHT = 1,
  SND_SPEAKER_CENTER = 2,
  SND_SPEAKER_LFE = 3,
  SND_SPEAKER_LEFT_SURROUND = 4,
  SND_SPEAKER_RIGHT_SURROUND = 5,
  SND_SPEAKER_LEFT_REAR_SURROUND = 6,
  SND_SPEAKER_RIGHT_REAR_SURROUND = 7,
  SND_SPEAKER_COUNT = 8,
};

enum bdAuthService::bdStatus
{
  BD_READY = 0,
  BD_CONNECTING = 1,
  BD_PENDING_REPLY = 2,
};

typedef enum _TAG_UNNAMED_100
{
  FRIEND_ICON = 0,
  FRIEND_CHAT_ICON = 1,
  FRIEND_REVIVE_ICON = 2,
  FRIEND_ICON_NUM = 3,
} TAG_UNNAMED_100, *PTAG_UNNAMED_100;

enum saveFieldtype_t
{
  SF_NONE = 0,
  SF_STRING = 1,
  SF_ENTITY = 2,
  SF_ENTHANDLE = 3,
  SF_CLIENT = 4,
  SF_ACTOR = 5,
  SF_SENTIENT = 6,
  SF_SENTIENTHANDLE = 7,
  SF_VEHICLE = 8,
  SF_TURRETINFO = 9,
  SF_DESTRUCTIBLE = 10,
  SF_THREAD = 11,
  SF_ANIMSCRIPT = 12,
  SF_PATHNODE = 13,
  SF_ANIMTREE = 14,
  SF_TYPE_TAG_INFO = 15,
  SF_TYPE_SCRIPTED = 16,
  SF_ACTOR_INFO = 17,
  SF_MODELUSHORT = 18,
  SF_MODELINT = 19,
  SF_SCRIPTFUNCTION = 20,
};

struct liveAddr
{
  /* 0x0000 */ struct XNADDR xnaddr;
}; /* size: 0x0025 */

struct platformNetAdr
{
  /* 0x0000 */ struct netadr_t netAddr;
  /* 0x0014 */ struct liveAddr liveaddr;
  /* 0x0039 */ char __PADDING__[3];
}; /* size: 0x003c */

struct D3D11_TEXTURE1D_DESC
{
  /* 0x0000 */ unsigned int Width;
  /* 0x0004 */ unsigned int MipLevels;
  /* 0x0008 */ unsigned int ArraySize;
  /* 0x000c */ enum DXGI_FORMAT Format;
  /* 0x0010 */ enum D3D11_USAGE Usage;
  /* 0x0014 */ unsigned int BindFlags;
  /* 0x0018 */ unsigned int CPUAccessFlags;
  /* 0x001c */ unsigned int MiscFlags;
}; /* size: 0x0020 */

enum bdGetHostByName::bdStatus
{
  BD_LOOKUP_UNINITIALIZED = 0,
  BD_LOOKUP_PENDING = 1,
  BD_LOOKUP_SUCCEEDED = 2,
  BD_LOOKUP_FAILED = 3,
  BD_LOOKUP_CANCELLED = 4,
  BD_LOOKUP_TIMED_OUT = 5,
  BD_LOOKUP_ERROR = 6,
};

enum ParamDataDesc
{
  P_WORKERCMD = 0,
  P_FENCE = 1,
  P_LAST = 2,
};

typedef enum _TAG_UNNAMED_101
{
  GJK_BASE = 0,
  GJK_AABB = 1,
  GJK_BRUSH = 2,
  GJK_PARTITION = 3,
  GJK_DOUBLE_SPHERE = 4,
  GJK_CYLINDER = 5,
  GJK_OBB = 6,
  GJK_POLYGON_CYLINDER = 7,
} TAG_UNNAMED_101, *PTAG_UNNAMED_101;

struct col_prim_t
{
  /* 0x0000 */ int type;
  union
  {
    /* 0x0004 */ const struct CollisionAabbTree* tree;
    /* 0x0004 */ const struct cbrush_t* brush;
  }; /* size: 0x0004 */
}; /* size: 0x0008 */

class colgeom_visitor_inlined_t<500>
{
  /* 0x0000 */ long Padding_50[32];
  /* 0x0080 */ int nprims;
  /* 0x0084 */ BOOL overflow;
  /* 0x0085 */ char Padding_51[3];
  /* 0x0088 */ struct col_prim_t prims[500];
}; /* size: 0x1030 */

enum bdQoSProbe::bdQoSProbeStatus
{
  BD_QOS_PROBE_UNINITIALIZED = 0,
  BD_QOS_PROBE_INITIALIZED = 1,
  BD_QOS_PROBE_RUNNING = 2,
};

enum listColumnTypes_t
{
  LCT_RANK_ICON = 0,
  LCT_STATUS_ICON = 1,
  LCT_NAME = 2,
  LCT_TALKING_ICON = 3,
  LCT_SCORE = 4,
  LCT_SB_COLUMN = 5,
  LCT_PING = 6,
  LCT_NUM = 7,
};

typedef enum _TAG_UNNAMED_102
{
  IMPACTEFFECT_HEADSHOT = 1,
  IMPACTEFFECT_FATAL = 2,
  IMPACTEFFECT_EXIT = 4,
  IMPACTEFFECT_UNDERWATER = 8,
  IMPACTEFFECT_VEH_ARMOR = 16,
  IMPACTEFFECT_VEH_LOCOMOTION = 32,
} TAG_UNNAMED_102, *PTAG_UNNAMED_102;

enum bdQoSProbe::bdQoSListenerState
{
  BD_QOS_OFF = 0,
  BD_QOS_DISABLED = 1,
  BD_QOS_ENABLED = 2,
};

enum bdHeartbeatAckChunk::bdHeartbeatAckFlags
{
  BD_CA_NO_FLAGS = 0,
};

enum rigid_body_constraint_point::ps_cache_e
{
  PSC_X = 0,
  PSC_Y = 1,
  PSC_Z = 2,
  NUM_PSC = 3,
};

enum tracerType_t
{
  TRACERTYPE_LASER = 0,
  TRACERTYPE_SMOKE = 1,
  TRACERTYPE_NUM = 2,
};

enum D3D11_MAP
{
  D3D11_MAP_READ = 1,
  D3D11_MAP_WRITE = 2,
  D3D11_MAP_READ_WRITE = 3,
  D3D11_MAP_WRITE_DISCARD = 4,
  D3D11_MAP_WRITE_NO_OVERWRITE = 5,
};

enum PacketSpecialEntityIndex_t
{
  ANALYZE_ENTITY_STANDARD = 0,
  ANALYZE_ENTITY_CLIENTSTATES = 1024,
  ANALYZE_ENTITY_MATCHSTATE = 1042,
  ANALYZE_ENTITY_GLASS = 1043,
  ANALYZE_ENTITY_PERF = 1044,
  ANALYZE_ENTITY_SERVERCMD = 1045,
  ANALYZE_ENTITY_SERVERCMD_END = 1061,
  ANALYZE_ENTITY_VOIP_UPLOAD = 1062,
  ANALYZE_ENTITY_VOIP_DOWNLOAD = 1063,
  ANALYZE_ENTITY_DEMO_UPLOAD = 1064,
  ANALYZE_ENTITY_CLIENT_UPLOAD = 1065,
  ANALYZE_ENTITY_CLIENT_PING = 1066,
  ANALYZE_ENTITY_CLIENT_PACKETS = 1067,
  ANALYZE_ENTITY_CLIENT_PACKETS_END = 1074,
  ANALYZE_MAX_UPDATE_ITEMS = 1075,
};

enum SurfaceGroupEnum
{
  SURF_GROUP_SOFT = 0,
  SURF_GROUP_HARD = 1,
  NUM_SURF_GROUPS = 2,
};

enum D3D11_DEVICE_CONTEXT_TYPE
{
  D3D11_DEVICE_CONTEXT_IMMEDIATE = 0,
  D3D11_DEVICE_CONTEXT_DEFERRED = 1,
};

class phys_free_list<rigid_body>::iterator
{
  /* 0x0000 */ class phys_free_list<rigid_body>::T_internal_base* m_ptr;
}; /* size: 0x0004 */

enum PredictionTraceResult
{
  PTR_SUCCESS = 0,
  PTR_HIT_WORLD = 1,
  PTR_HIT_ENTITY = 2,
};

enum clc_ops_e
{
  clc_move = 0,
  clc_moveNoDelta = 1,
  clc_clientCommand = 2,
  clc_EOF = 3,
};

enum rigid_body::rigid_body_flags_e
{
  FLAG_DISABLE_FORCES = 1,
  FLAG_STABLE = 4,
  FLAG_GROUP_STABLE = 8,
  FLAG_ENVIRONMENT_RIGID_BODY = 16,
  FLAG_USER_RIGID_BODY = 32,
  FLAG_NO_AUTO_REMOVE = 64,
  FLAG_DANGEROUS = 128,
  FLAG_HAS_RBC_CONTACT = 256,
  FLAG_EXPENSIVE = 512,
  FLAG_CLIENT_FLAGS_START = 1024,
};

enum D3D10_COLOR_WRITE_ENABLE
{
  D3D10_COLOR_WRITE_ENABLE_RED = 1,
  D3D10_COLOR_WRITE_ENABLE_GREEN = 2,
  D3D10_COLOR_WRITE_ENABLE_BLUE = 4,
  D3D10_COLOR_WRITE_ENABLE_ALPHA = 8,
  D3D10_COLOR_WRITE_ENABLE_ALL = 15,
};

enum bdTwitterResultType
{
  BD_TWITTER_DEFAULT_RESULT = 0,
  BD_TWITTER_MIXED_RESULT = 1,
  BD_TWITTER_RECENT_RESULT = 2,
  BD_TWITTER_POPULAR_RESULT = 3,
};

struct tagCACLIPDATA
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ struct tagCLIPDATA* pElems;
}; /* size: 0x0008 */

typedef enum _TAG_UNNAMED_103
{
  NUM_VERTS_ = 12,
} TAG_UNNAMED_103, *PTAG_UNNAMED_103;

enum MergeDedicatedState
{
  MERGE_DEDICATED_COMPLETE = 0,
  MERGE_DEDICATED_NOT_REQUESTED = 1,
  MERGE_DEDICATED_REQUESTED = 2,
  MERGE_DEDICATED_IN_PROGRESS = 3,
};

enum bdDataChunk::bdDataFlags
{
  BD_DC_NO_FLAGS = 0,
  BD_DC_UNRELIABLE = 1,
  BD_DC_ENC_DATA = 2,
  BD_DC_UNENC_DATA = 4,
};

enum PARM_SUPPRESSION
{
  DO_SUPPRESSION = 0,
  DONT_SUPPRESS = 1,
};

enum weapType_t
{
  WEAPTYPE_BULLET = 0,
  WEAPTYPE_GRENADE = 1,
  WEAPTYPE_PROJECTILE = 2,
  WEAPTYPE_BINOCULARS = 3,
  WEAPTYPE_GAS = 4,
  WEAPTYPE_BOMB = 5,
  WEAPTYPE_MINE = 6,
  WEAPTYPE_MELEE = 7,
  WEAPTYPE_RIOTSHIELD = 8,
  WEAPTYPE_NUM = 9,
};

enum bdReliableSendWindow::bdCongestionWindowDecreaseReason
{
  BD_CWDR_PACKET_LOSS_DETECTED = 0,
  BD_CWDR_RESEND_TIMER_EXPIRED = 1,
  BD_CWDR_INACTIVE = 2,
};

struct jqAtomicHeap::LevelInfo
{
  /* 0x0000 */ unsigned int BlockSize;
  /* 0x0004 */ int NBlocks;
  /* 0x0008 */ int NCells;
  /* 0x000c */ unsigned __int64* CellAvailable;
  /* 0x0010 */ unsigned __int64* CellAllocated;
}; /* size: 0x0014 */

enum errorParm_t
{
  ERR_FATAL = 0,
  ERR_DROP = 1,
  ERR_FROM_STARTUP = 2,
  ERR_SERVERDISCONNECT = 3,
  ERR_DISCONNECT = 4,
  ERR_SCRIPT = 5,
  ERR_SCRIPT_DROP = 6,
  ERR_LOCALIZATION = 7,
};

enum std::_Uninitialized
{
  _Noinit = 0,
};

enum tlThreadPriority
{
  TL_THREAD_PRIORITY_IDLE = -2,
  TL_THREAD_PRIORITY_LOWEST = -2,
  TL_THREAD_PRIORITY_BELOW_NORMAL = -1,
  TL_THREAD_PRIORITY_NORMAL = 0,
  TL_THREAD_PRIORITY_ABOVE_NORMAL = 1,
  TL_THREAD_PRIORITY_HIGHEST = 2,
  TL_THREAD_PRIORITY_TIME_CRITICAL = 15,
};

struct MenuRow
{
  /* 0x0000 */ struct MenuCell* cells;
  /* 0x0004 */ char* eventName;
  /* 0x0008 */ char* onFocusEventName;
  /* 0x000c */ BOOL disableArg;
  /* 0x000d */ char Padding_52[3];
  /* 0x0010 */ int status;
  /* 0x0014 */ int name;
}; /* size: 0x0018 */

enum VehicleEngineState
{
  VEH_ENGINE_STATE_IDLE = 0,
  VEH_ENGINE_STATE_IN_GEAR = 1,
  VEH_ENGINE_STATE_SHIFT_UP = 2,
  VEH_ENGINE_STATE_SHIFT_DOWN = 3,
};

typedef enum _TAG_UNNAMED_104
{
  LL_FC_START_FLICKER = 2,
  LL_FC_FLICKER = 3,
} TAG_UNNAMED_104, *PTAG_UNNAMED_104;

class bdSocket
{
  /* 0x0000 */ long Padding_53;
  /* 0x0004 */ int m_handle;
}; /* size: 0x0008 */

typedef struct _GUID
{
  /* 0x0000 */ unsigned long Data1;
  /* 0x0004 */ unsigned short Data2;
  /* 0x0006 */ unsigned short Data3;
  /* 0x0008 */ unsigned char Data4[8];
} GUID, *PGUID; /* size: 0x0010 */

struct tagTYPEDESC
{
  union
  {
    /* 0x0000 */ struct tagTYPEDESC* lptdesc;
    /* 0x0000 */ struct tagARRAYDESC* lpadesc;
    /* 0x0000 */ unsigned long hreftype;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned short vt;
  /* 0x0006 */ char __PADDING__[2];
}; /* size: 0x0008 */

struct tagIDLDESC
{
  /* 0x0000 */ unsigned long dwReserved;
  /* 0x0004 */ unsigned short wIDLFlags;
  /* 0x0006 */ char __PADDING__[2];
}; /* size: 0x0008 */

struct tagTYPEATTR
{
  /* 0x0000 */ struct _GUID guid;
  /* 0x0010 */ unsigned long lcid;
  /* 0x0014 */ unsigned long dwReserved;
  /* 0x0018 */ long memidConstructor;
  /* 0x001c */ long memidDestructor;
  /* 0x0020 */ wchar_t* lpstrSchema;
  /* 0x0024 */ unsigned long cbSizeInstance;
  /* 0x0028 */ enum tagTYPEKIND typekind;
  /* 0x002c */ unsigned short cFuncs;
  /* 0x002e */ unsigned short cVars;
  /* 0x0030 */ unsigned short cImplTypes;
  /* 0x0032 */ unsigned short cbSizeVft;
  /* 0x0034 */ unsigned short cbAlignment;
  /* 0x0036 */ unsigned short wTypeFlags;
  /* 0x0038 */ unsigned short wMajorVerNum;
  /* 0x003a */ unsigned short wMinorVerNum;
  /* 0x003c */ struct tagTYPEDESC tdescAlias;
  /* 0x0044 */ struct tagIDLDESC idldescType;
}; /* size: 0x004c */

enum Bind_t
{
  BIND_VOID = 0,
  BIND_ATTACK1 = 1,
  BIND_ATTACK0 = 2,
  BIND_MELEE1 = 3,
  BIND_MELEE0 = 4,
  BIND_FRAG1 = 5,
  BIND_FRAG0 = 6,
  BIND_SMOKE1 = 7,
  BIND_SMOKE0 = 8,
  BIND_BREATH_SPRINT1 = 9,
  BIND_BREATH_SPRINT0 = 10,
  BIND_USERELOAD1 = 11,
  BIND_USERELOAD0 = 12,
  BIND_SPEED_THROW1 = 13,
  BIND_SPEED_THROW0 = 14,
  BIND_TOGGLEADS_THROW1 = 15,
  BIND_TOGGLEADS_THROW0 = 16,
  BIND_ACTIONSLOT11 = 17,
  BIND_ACTIONSLOT10 = 18,
  BIND_ACTIONSLOT21 = 19,
  BIND_ACTIONSLOT20 = 20,
  BIND_ACTIONSLOT31 = 21,
  BIND_ACTIONSLOT30 = 22,
  BIND_ACTIONSLOT41 = 23,
  BIND_ACTIONSLOT40 = 24,
  BIND_ACTIONSLOT51 = 25,
  BIND_ACTIONSLOT50 = 26,
  BIND_ACTIONSLOT61 = 27,
  BIND_ACTIONSLOT60 = 28,
  BIND_ACTIONSLOT71 = 29,
  BIND_ACTIONSLOT70 = 30,
  BIND_STANCE1 = 31,
  BIND_STANCE0 = 32,
  BIND_GOSTAND1 = 33,
  BIND_GOSTAND0 = 34,
  BIND_SPECNEXT1 = 35,
  BIND_SPECNEXT0 = 36,
  BIND_SPECPREV1 = 37,
  BIND_SPECPREV0 = 38,
  BIND_TOGGLESPEC1 = 39,
  BIND_TOGGLESPEC0 = 40,
  BIND_MELEE_ZOOM1 = 41,
  BIND_MELEE_ZOOM0 = 42,
  BIND_CHANGEZOOM1 = 43,
  BIND_CHANGEZOOM0 = 44,
  BIND_WEAPNEXTINVENTORY1 = 45,
  BIND_WEAPNEXTINVENTORY0 = 46,
  BIND_GAS1 = 47,
  BIND_GAS0 = 48,
  BIND_REVERSE1 = 49,
  BIND_REVERSE0 = 50,
  BIND_HANDBRAKE1 = 51,
  BIND_HANDBRAKE0 = 52,
  BIND_VEHICLEATTACK1 = 53,
  BIND_VEHICLEATTACK0 = 54,
  BIND_VEHICLESECONDATTACK1 = 55,
  BIND_VEHICLESECONDATTACK0 = 56,
  BIND_VEHICLEBOOST1 = 57,
  BIND_VEHICLEBOOST0 = 58,
  BIND_VEHICLEMOVEUP1 = 59,
  BIND_VEHICLEMOVEUP0 = 60,
  BIND_VEHICLEMOVEDOWN1 = 61,
  BIND_VEHICLEMOVEDOWN0 = 62,
  BIND_VEHICLESWTICHSEAT1 = 63,
  BIND_VEHICLESWTICHSEAT0 = 64,
  BIND_FORWARD1 = 65,
  BIND_FORWARD0 = 66,
  BIND_BACK1 = 67,
  BIND_BACK0 = 68,
  BIND_MOVELEFT1 = 69,
  BIND_MOVELEFT0 = 70,
  BIND_MOVERIGHT1 = 71,
  BIND_MOVERIGHT0 = 72,
  BIND_MOVEDOWN1 = 73,
  BIND_MOVEDOWN0 = 74,
  BIND_LEFT1 = 75,
  BIND_LEFT0 = 76,
  BIND_RIGHT1 = 77,
  BIND_RIGHT0 = 78,
  BIND_LOOKUP1 = 79,
  BIND_LOOKUP0 = 80,
  BIND_LOOKDOWN1 = 81,
  BIND_LOOKDOWN0 = 82,
  BIND_STRAFE1 = 83,
  BIND_STRAFE0 = 84,
  BIND_HOLDBREATH1 = 85,
  BIND_HOLDBREATH0 = 86,
  BIND_ACTIVATE1 = 87,
  BIND_ACTIVATE0 = 88,
  BIND_RELOAD1 = 89,
  BIND_RELOAD0 = 90,
  BIND_PRONE1 = 91,
  BIND_PRONE0 = 92,
  BIND_MLOOK1 = 93,
  BIND_MLOOK0 = 94,
  BIND_SPRINT1 = 95,
  BIND_SPRINT0 = 96,
  BIND_SCORES1 = 97,
  BIND_SCORES0 = 98,
  BIND_LEANLEFT1 = 99,
  BIND_LEANLEFT0 = 100,
  BIND_LEANRIGHT1 = 101,
  BIND_LEANRIGHT0 = 102,
  BIND_TALK1 = 103,
  BIND_TALK0 = 104,
  BIND_FIRST_NON_UP_DOWN = 105,
  BIND_TOGGLEMENU = 105,
  BIND_WEAPNEXT = 106,
  BIND_PAUSE = 107,
  BIND_CHATMODEPUBLIC = 108,
  BIND_CHATMODETEAM = 109,
  BIND_INVENTORY = 110,
  BIND_WEAPPREV = 111,
  BIND_CENTERVIEW = 112,
  BIND_TOGGLECROUCH = 113,
  BIND_TOGGLEPRONE = 114,
  BIND_GOPRONE = 115,
  BIND_GOCROUCH = 116,
  BIND_TOGGLEADS = 117,
  BIND_LEAVEADS = 118,
  BIND_VOTEYES = 119,
  BIND_VOTENO = 120,
  BIND_SCREENSHOTJPEG = 121,
  BIND_TOGGLESCORES = 122,
  BIND_SKIP = 123,
  BIND_CHOOSECLASS = 124,
  BIND_ACCEPTLASTGAMEINVITE = 125,
  BIND_COUNT = 126,
};

typedef struct _XMFLOAT3SE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int xm : 9; /* bit position: 0 */
      /* 0x0000 */ unsigned int ym : 9; /* bit position: 9 */
      /* 0x0000 */ unsigned int zm : 9; /* bit position: 18 */
      /* 0x0000 */ unsigned int e : 5; /* bit position: 27 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMFLOAT3SE, *PXMFLOAT3SE; /* size: 0x0004 */

typedef enum _TAG_UNNAMED_105
{
  FIXED_LINK_ANGLES = 0,
  FIXED_LINK_ANGLES_YAW_ONLY = 1,
  FIXED_LINK_ANGLES_NONE = 2,
} TAG_UNNAMED_105, *PTAG_UNNAMED_105;

typedef enum _TAG_UNNAMED_106
{
  NUM_GLOBAL_MODULES = 100,
} TAG_UNNAMED_106, *PTAG_UNNAMED_106;

typedef enum _TAG_UNNAMED_107
{
  FX_ATLAS_START_FIXED = 0,
  FX_ATLAS_START_RANDOM = 1,
  FX_ATLAS_START_INDEXED = 2,
  FX_ATLAS_START_FIXED_RANGE = 3,
  FX_ATLAS_START_MASK = 3,
  FX_ATLAS_PLAY_OVER_LIFE = 4,
  FX_ATLAS_LOOP_ONLY_N_TIMES = 8,
} TAG_UNNAMED_107, *PTAG_UNNAMED_107;

enum LaserLightEnum
{
  LASER_LIGHT_OFF = 0,
  LASER_LIGHT_ON = 1,
};

class bdLinkedList<bdPendingBufferTransfer>
{
  /* 0x0000 */ class bdLinkedList<bdPendingBufferTransfer>::Node* m_head;
  /* 0x0004 */ class bdLinkedList<bdPendingBufferTransfer>::Node* m_tail;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

class bdQueue<bdPendingBufferTransfer>
{
  /* 0x0000 */ class bdLinkedList<bdPendingBufferTransfer> m_list;
}; /* size: 0x000c */

enum CriticalSection
{
  CRITSECT_ALLOC_MARK = 0,
  CRITSECT_FX_VIS = 1,
  CRITSECT_OCCLUSION_QUERY = 2,
  CRITSECT_PHYSICS = 3,
  CRITSECT_PHYSICS_UPDATE = 4,
  CRITSECT_PHYSICS_DESTRUCTIBLE_HIT = 5,
  CRITSECT_FX_UNIQUE_HANDLE = 6,
  CRITSECT_SOUND_COMMAND_ALLOC = 7,
  CRITSECT_SOUND_COMMAND_PUSH = 8,
  CRITSECT_SOUND_NOTIFY_ALLOC = 9,
  CRITSECT_SOUND_NOTIFY_PUSH = 10,
  CRITSECT_SOUND_BANK = 11,
  CRITSECT_SOUND_LOOKUP_CACHE = 12,
  CRITSECT_CAREER_STATS = 13,
  CRITSECT_CONSOLE = 14,
  CRITSECT_DEBUG_SOCKET = 15,
  CRITSECT_COM_ERROR = 16,
  CRITSECT_STATMON = 17,
  CRITSECT_MEM_ALLOC0 = 18,
  CRITSECT_MEM_ALLOC1 = 19,
  CRITSECT_DEBUG_LINE = 20,
  CRITSECT_DEBUG_BRUSHES_AND_PATCHES = 21,
  CRITSECT_CLIENT_MESSAGE = 22,
  CRITSECT_CLIENT_CMD = 23,
  CRITSECT_DOBJ_ALLOC = 24,
  CRITSECT_XANIM_ALLOC = 25,
  CRITSECT_KEY_BINDINGS = 26,
  CRITSECT_SERVER_MESSAGE = 27,
  CRITSECT_SERVER_PLAYERINFO = 28,
  CRITSECT_SCRIPT_STRING = 29,
  CRITSECT_MEMORY_TREE = 30,
  CRITSECT_ASSERT = 31,
  CRITSECT_RD_BUFFER = 32,
  CRITSECT_SYS_EVENT_QUEUE = 33,
  CRITSECT_FATAL_ERROR = 34,
  CRITSECT_DXDEVICE = 35,
  CRITSECT_DXDEVICE_GLOB = 36,
  CRITSECT_DXCONTEXT = 37,
  CRITSECT_SCRIPT_DEBUGGER_ALLOC = 38,
  CRITSECT_SCRIPT_DEBUGGER = 39,
  CRITSECT_REMOTE = 40,
  CRITSECT_MISSING_ASSET = 41,
  CRITSECT_LIVE = 42,
  CRITSECT_AUDIO_PHYSICS = 43,
  CRITSECT_LUI = 44,
  CRITSECT_VCS = 45,
  CRITSECT_CINEMATIC = 46,
  CRITSECT_CINEMATIC_TARGET_CHANGE = 47,
  CRITSECT_CINEMATIC_UPDATEFRAME = 48,
  CRITSECT_RB_TRANSFER = 49,
  CRITSECT_NETTHREAD_OVERRIDE = 50,
  CRITSECT_DEMONWARE = 51,
  CRITSECT_IK = 52,
  CRITSECT_TL_MEMALLOC = 53,
  CRITSECT_VA_ALLOC = 54,
  CRITSECT_MEMTRACK = 55,
  CRITSECT_CBUF = 56,
  CRITSECT_CURVEALLOC = 57,
  CRITSECT_NETQUEUE = 58,
  CRITSECT_ZLIB = 59,
  CRITSECT_BLACKBOX = 60,
  CRITSECT_GDT_COMMAND = 61,
  CRITSECT_STRINGED_COMMAND = 62,
  CRITSECT_RADIANT_SERVER_COMMAND = 63,
  CRITSECT_RADIANT_CLIENT_COMMAND = 64,
  CRITSECT_RECORDER = 65,
  CRITSECT_SERVERDEMO = 66,
  CRITSECT_IO_SCHEDULER = 67,
  CRITSECT_FILE_ID_ARRAY = 68,
  CRITSECT_MEMFIRSTFIT = 69,
  CRITSECT_FXBEAM = 70,
  CRITSECT_GLASS_ACTIONS = 71,
  CRITSECT_DBHASH = 72,
  CRITSECT_CLUMP = 73,
  CRITSECT_SNAPSHOT_PROFILE = 74,
  CRITSEC_WEBM_STREAM_ACCESS = 75,
  CRITSEC_SV_LEADERBOARDS = 76,
  CRITSECT_COUNT = 77,
};

enum bdDTLSAssociationStatus
{
  BD_SOCKET_IDLE = 0,
  BD_SOCKET_PENDING = 1,
  BD_SOCKET_CONNECTED = 2,
  BD_SOCKET_LOST = 3,
};

struct DIPROPHEADER
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwHeaderSize;
  /* 0x0008 */ unsigned long dwObj;
  /* 0x000c */ unsigned long dwHow;
}; /* size: 0x0010 */

typedef enum _TAG_UNNAMED_108
{
  FX_ELEM_SPAWN_RELATIVE_TO_EFFECT = 2,
  FX_ELEM_SPAWN_FRUSTUM_CULL = 4,
  FX_ELEM_RUNNER_USES_RAND_ROT = 8,
  FX_ELEM_SPAWN_OFFSET_NONE = 0,
  FX_ELEM_SPAWN_OFFSET_SPHERE = 16,
  FX_ELEM_SPAWN_OFFSET_CYLINDER = 32,
  FX_ELEM_SPAWN_OFFSET_MASK = 48,
  FX_ELEM_RUN_RELATIVE_TO_WORLD = 0,
  FX_ELEM_RUN_RELATIVE_TO_SPAWN = 64,
  FX_ELEM_RUN_RELATIVE_TO_EFFECT = 128,
  FX_ELEM_RUN_RELATIVE_TO_OFFSET = 192,
  FX_ELEM_RUN_RELATIVE_TO_OFFSET_EFFECT_NOW = 256,
  FX_ELEM_RUN_MASK = 448,
  FX_ELEM_USE_COLLISION = 512,
  FX_ELEM_DIE_ON_TOUCH = 1024,
  FX_ELEM_DRAW_PAST_FOG = 2048,
  FX_ELEM_DRAW_WITH_VIEWMODEL = 4096,
  FX_ELEM_BLOCK_SIGHT = 8192,
  FX_ELEM_USE_ITEM_CLIP = 16384,
  FX_ELEM_USE_OCCLUSION_QUERY = 0xffff8000,
  FX_ELEM_IS_SUPERFLARE = 0x10000,
  FX_ELEM_USE_THERMAL = 0x20000,
  FX_ELEM_DISABLE_ALPHA_CULLING = 0x40000,
  FX_ELEM_USE_WORLD_UP = 0x80000,
  FX_ELEM_ALIGN_VIEWPOINT = 0x100000,
  FX_ELEM_USE_BILLBOARD_PIVOT = 0x200000,
  FX_ELEM_USE_GAUSSIAN_CLOUD = 0x400000,
  FX_ELEM_USE_ROTATIONAXIS = 0x800000,
  FX_ELEM_HAS_VELOCITY_GRAPH_LOCAL = 0x1000000,
  FX_ELEM_HAS_VELOCITY_GRAPH_WORLD = 0x2000000,
  FX_ELEM_HAS_GRAVITY = 0x4000000,
  FX_ELEM_USE_MODEL_PHYSICS = 0x8000000,
  FX_ELEM_NONUNIFORM_SCALE = 0x10000000,
  FX_ELEM_FLAME_CHUNK = 0x20000000,
  FX_ELEM_HAS_REFLECTION = 0x40000000,
  FX_ELEM_IS_MATURE_CONTENT = -2147483648,
} TAG_UNNAMED_108, *PTAG_UNNAMED_108;

enum bdDTLSAssociation::bdDTLSStatus
{
  BD_DTLS_CLOSED = 0,
  BD_DTLS_COOKIE_WAIT = 1,
  BD_DTLS_COOKIE_ECHOED = 2,
  BD_DTLS_ESTABLISHED = 3,
};

enum bdShutdownChunk::bdShutdownFlags
{
  BD_SC_NO_FLAGS = 0,
};

typedef enum _TAG_UNNAMED_109
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_109, *PTAG_UNNAMED_109;

enum bdDTLSError::bdDTLSErrorType
{
  BD_DTLS_ERROR_BAD_SECID = 0,
  BD_DTLS_INVALID_STATE = 1,
};

enum CURLcode
{
  CURLE_OK = 0,
  CURLE_UNSUPPORTED_PROTOCOL = 1,
  CURLE_FAILED_INIT = 2,
  CURLE_URL_MALFORMAT = 3,
  CURLE_OBSOLETE4 = 4,
  CURLE_COULDNT_RESOLVE_PROXY = 5,
  CURLE_COULDNT_RESOLVE_HOST = 6,
  CURLE_COULDNT_CONNECT = 7,
  CURLE_FTP_WEIRD_SERVER_REPLY = 8,
  CURLE_REMOTE_ACCESS_DENIED = 9,
  CURLE_OBSOLETE10 = 10,
  CURLE_FTP_WEIRD_PASS_REPLY = 11,
  CURLE_OBSOLETE12 = 12,
  CURLE_FTP_WEIRD_PASV_REPLY = 13,
  CURLE_FTP_WEIRD_227_FORMAT = 14,
  CURLE_FTP_CANT_GET_HOST = 15,
  CURLE_OBSOLETE16 = 16,
  CURLE_FTP_COULDNT_SET_TYPE = 17,
  CURLE_PARTIAL_FILE = 18,
  CURLE_FTP_COULDNT_RETR_FILE = 19,
  CURLE_OBSOLETE20 = 20,
  CURLE_QUOTE_ERROR = 21,
  CURLE_HTTP_RETURNED_ERROR = 22,
  CURLE_WRITE_ERROR = 23,
  CURLE_OBSOLETE24 = 24,
  CURLE_UPLOAD_FAILED = 25,
  CURLE_READ_ERROR = 26,
  CURLE_OUT_OF_MEMORY = 27,
  CURLE_OPERATION_TIMEDOUT = 28,
  CURLE_OBSOLETE29 = 29,
  CURLE_FTP_PORT_FAILED = 30,
  CURLE_FTP_COULDNT_USE_REST = 31,
  CURLE_OBSOLETE32 = 32,
  CURLE_RANGE_ERROR = 33,
  CURLE_HTTP_POST_ERROR = 34,
  CURLE_SSL_CONNECT_ERROR = 35,
  CURLE_BAD_DOWNLOAD_RESUME = 36,
  CURLE_FILE_COULDNT_READ_FILE = 37,
  CURLE_LDAP_CANNOT_BIND = 38,
  CURLE_LDAP_SEARCH_FAILED = 39,
  CURLE_OBSOLETE40 = 40,
  CURLE_FUNCTION_NOT_FOUND = 41,
  CURLE_ABORTED_BY_CALLBACK = 42,
  CURLE_BAD_FUNCTION_ARGUMENT = 43,
  CURLE_OBSOLETE44 = 44,
  CURLE_INTERFACE_FAILED = 45,
  CURLE_OBSOLETE46 = 46,
  CURLE_TOO_MANY_REDIRECTS = 47,
  CURLE_UNKNOWN_TELNET_OPTION = 48,
  CURLE_TELNET_OPTION_SYNTAX = 49,
  CURLE_OBSOLETE50 = 50,
  CURLE_PEER_FAILED_VERIFICATION = 51,
  CURLE_GOT_NOTHING = 52,
  CURLE_SSL_ENGINE_NOTFOUND = 53,
  CURLE_SSL_ENGINE_SETFAILED = 54,
  CURLE_SEND_ERROR = 55,
  CURLE_RECV_ERROR = 56,
  CURLE_OBSOLETE57 = 57,
  CURLE_SSL_CERTPROBLEM = 58,
  CURLE_SSL_CIPHER = 59,
  CURLE_SSL_CACERT = 60,
  CURLE_BAD_CONTENT_ENCODING = 61,
  CURLE_LDAP_INVALID_URL = 62,
  CURLE_FILESIZE_EXCEEDED = 63,
  CURLE_USE_SSL_FAILED = 64,
  CURLE_SEND_FAIL_REWIND = 65,
  CURLE_SSL_ENGINE_INITFAILED = 66,
  CURLE_LOGIN_DENIED = 67,
  CURLE_TFTP_NOTFOUND = 68,
  CURLE_TFTP_PERM = 69,
  CURLE_REMOTE_DISK_FULL = 70,
  CURLE_TFTP_ILLEGAL = 71,
  CURLE_TFTP_UNKNOWNID = 72,
  CURLE_REMOTE_FILE_EXISTS = 73,
  CURLE_TFTP_NOSUCHUSER = 74,
  CURLE_CONV_FAILED = 75,
  CURLE_CONV_REQD = 76,
  CURLE_SSL_CACERT_BADFILE = 77,
  CURLE_REMOTE_FILE_NOT_FOUND = 78,
  CURLE_SSH = 79,
  CURLE_SSL_SHUTDOWN_FAILED = 80,
  CURLE_AGAIN = 81,
  CURLE_SSL_CRL_BADFILE = 82,
  CURLE_SSL_ISSUER_ERROR = 83,
  CURL_LAST = 84,
};

typedef enum _TAG_UNNAMED_110
{
  WATER_EFFECT_HIT_SM = 0,
  WATER_EFFECT_HIT_MD = 1,
  WATER_EFFECT_HIT_LG = 2,
  WATER_EFFECT_HIT_OBJECT_RIPPLE = 3,
  WATER_EFFECT_HIT_BUBBLES = 4,
  WATER_EFFECT_HIT_WAIST_RIPPLE = 5,
  WATER_EFFECT_HIT_KNEE_RIPPLE = 6,
  WATER_EFFECT_HIT_SPLASH = 7,
  WATER_EFFECT_NUM = 8,
} TAG_UNNAMED_110, *PTAG_UNNAMED_110;

struct tagCAUB
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ unsigned char* pElems;
}; /* size: 0x0008 */

typedef enum _NVVIOPCILINKRATE
{
  NVVIOPCILINKRATE_UNKNOWN = 0,
  NVVIOPCILINKRATE_GEN1 = 1,
  NVVIOPCILINKRATE_GEN2 = 2,
  NVVIOPCILINKRATE_GEN3 = 3,
} NVVIOPCILINKRATE, *PNVVIOPCILINKRATE;

enum bdKeyValuePair::bdArchiveUpdateType
{
  BD_REPLACE = 0,
  BD_ADD = 1,
  BD_MAX = 2,
  BD_MIN = 3,
  BD_AND = 4,
  BD_OR = 5,
  BD_XOR = 6,
  BD_SUB_SAFE = 7,
};

struct tagSAFEARRAYBOUND
{
  /* 0x0000 */ unsigned long cElements;
  /* 0x0004 */ long lLbound;
}; /* size: 0x0008 */

struct tagARRAYDESC
{
  /* 0x0000 */ struct tagTYPEDESC tdescElem;
  /* 0x0008 */ unsigned short cDims;
  /* 0x000a */ char Padding_54[2];
  /* 0x000c */ struct tagSAFEARRAYBOUND rgbounds[1];
}; /* size: 0x0014 */

class LeaderboardFileShareRow
{
  /* 0x0000 */ long Padding_55[28];
  /* 0x0070 */ unsigned int m_columns[4];
  /* 0x0080 */ unsigned __int64 m_entityID;
  /* 0x0088 */ char m_entityName[65];
  /* 0x0000 */ unsigned int m_columnCount;
}; /* size: 0x00d0 */

class bdStatsInfoEx
{
  /* 0x0000 */ long Padding_56;
  /* 0x0004 */ unsigned int m_leaderboardID;
  /* 0x0008 */ unsigned int m_error;
  /* 0x000c */ long Padding_57;
  /* 0x0010 */ unsigned __int64 m_entityID;
  /* 0x0018 */ class bdStatsInfo* m_statsInfo;
}; /* size: 0x0020 */

struct fileshareStats_t
{
  /* 0x0000 */ class LeaderboardFileShareRow ustats[800];
  /* 0x28a00 */ class bdStatsInfoEx ustatsInfo[800];
  /* 0x2ee00 */ class bdStatsInfoEx* ustatsInfoPtr[800];
  /* 0x2fa80 */ int count;
  /* 0x2fa84 */ long __PADDING__[1];
}; /* size: 0x2fa88 */

enum animScriptMounted_t
{
  MOUNTED_UNUSED = 0,
  MOUNTED_TURRET = 1,
  NUM_ANIM_COND_MOUNTED = 2,
};

enum rigid_body_constraint_wheel::wheel_flags_e
{
  WHEEL_FLAG_HAS_TURNING = 8,
  WHEEL_FLAG_HAS_POWER = 16,
  WHEEL_FLAG_HAS_POWER_BRAKING = 32,
  WHEEL_FLAG_HAS_BRAKING = 64,
  WHEEL_FLAG_HOVER = 128,
};

typedef enum _TAG_UNNAMED_111
{
  DEV_CHILD_MENU = 0,
  DEV_CHILD_DVAR = 1,
  DEV_CHILD_DVAR_LIST = 2,
  DEV_CHILD_COMMAND = 3,
  DEV_CHILD_GRAPH = 4,
  DEV_CHILD_TYPECOUNT = 5,
} TAG_UNNAMED_111, *PTAG_UNNAMED_111;

enum locSel_t
{
  LOC_SEL_NONE = 0,
  LOC_SEL_ARTILLERY = 1,
  LOC_SEL_AIRSTRIKE = 2,
  LOC_SEL_MORTAR = 3,
  LOC_SEL_NAPALM = 4,
  LOC_SEL_COMLINK = 5,
};

typedef enum _TAG_UNNAMED_112
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_112, *PTAG_UNNAMED_112;

enum bdECCKey::bdECCKeyStatus
{
  BD_ECC_KEY_UNINITIALIZED = 0,
  BD_ECC_KEY_INITIALIZED = 1,
};

enum clientConnected_t
{
  CON_DISCONNECTED = 0,
  CON_CONNECTING = 1,
  CON_CONNECTED = 2,
};

enum cgVehicleTurretLoopState_t
{
  CG_VEHICLE_LOOP_STOP = 0,
  CG_VEHICLE_LOOP_PLAY = 1,
  CG_VEHICLE_LOOP_STOPPING = 2,
};

enum tlThreadFlags
{
  TL_THREAD_JOINABLE = 0,
  TL_THREAD_CREATE_SUSPENDED = 4,
  TL_THREAD_DEFAULT_FLAGS = 0,
};

struct D3D11_DEPTH_STENCILOP_DESC
{
  /* 0x0000 */ enum D3D11_STENCIL_OP StencilFailOp;
  /* 0x0004 */ enum D3D11_STENCIL_OP StencilDepthFailOp;
  /* 0x0008 */ enum D3D11_STENCIL_OP StencilPassOp;
  /* 0x000c */ enum D3D11_COMPARISON_FUNC StencilFunc;
}; /* size: 0x0010 */

struct D3D11_DEPTH_STENCIL_DESC
{
  /* 0x0000 */ int DepthEnable;
  /* 0x0004 */ enum D3D11_DEPTH_WRITE_MASK DepthWriteMask;
  /* 0x0008 */ enum D3D11_COMPARISON_FUNC DepthFunc;
  /* 0x000c */ int StencilEnable;
  /* 0x0010 */ unsigned char StencilReadMask;
  /* 0x0011 */ unsigned char StencilWriteMask;
  /* 0x0012 */ char Padding_58[2];
  /* 0x0014 */ struct D3D11_DEPTH_STENCILOP_DESC FrontFace;
  /* 0x0024 */ struct D3D11_DEPTH_STENCILOP_DESC BackFace;
}; /* size: 0x0034 */

enum MULTICAST_MODE_TYPE
{
  MCAST_INCLUDE = 0,
  MCAST_EXCLUDE = 1,
};

class tlAtomicMutex
{
  /* 0x0000 */ unsigned __int64 ThreadId;
  /* 0x0008 */ int LockCount;
  /* 0x000c */ class tlAtomicMutex* ThisPtr;
}; /* size: 0x0010 */

typedef enum _TAG_UNNAMED_113
{
  CONNECT_PATHS_NONE = 0,
  CONNECT_PATHS_RUN_GAME_WHEN_DONE = 1,
  CONNECT_PATHS_EXIT_WHEN_DONE = 2,
  CONNECT_PATHS_EXIT_WHEN_DONE_OR_ERROR = 3,
  NUM_CONNECT_PATH_OPTIONS = 3,
} TAG_UNNAMED_113, *PTAG_UNNAMED_113;

enum UILocalVarType
{
  UILOCALVAR_INT = 0,
  UILOCALVAR_FLOAT = 1,
  UILOCALVAR_STRING = 2,
};

typedef enum _NVVIOINTERLACEMODE
{
  NVVIOINTERLACEMODE_PROGRESSIVE = 0,
  NVVIOINTERLACEMODE_INTERLACE = 1,
  NVVIOINTERLACEMODE_PSF = 2,
} NVVIOINTERLACEMODE, *PNVVIOINTERLACEMODE;

enum bdFacebookFriendSort
{
  BD_FBSORT_UNSORTED = 0,
  BD_FBSORT_ACCOUNT_NAME_ASC = 1,
  BD_FBSORT_ACCOUNT_NAME_DESC = 2,
};

typedef enum _TAG_UNNAMED_114
{
  FX_TYPE_BULLET_HIT_SMALL_NORMAL = 0,
  FX_TYPE_BULLET_HIT_SMALL_EXIT = 1,
  FX_TYPE_BULLET_HIT_SMALL_UNDERWATER = 2,
  FX_TYPE_BULLET_HIT_LARGE_NORMAL = 3,
  FX_TYPE_BULLET_HIT_LARGE_EXIT = 4,
  FX_TYPE_SHOTGUN_HIT_NORMAL = 5,
  FX_TYPE_SHOTGUN_HIT_EXIT = 6,
  FX_TYPE_BULLET_HIT_AP_NORMAL = 7,
  FX_TYPE_BULLET_HIT_AP_EXIT = 8,
  FX_TYPE_BULLET_HIT_XTREME_NORMAL = 9,
  FX_TYPE_BULLET_HIT_XTREME_EXIT = 10,
  FX_TYPE_GRENADE_BOUNCE = 11,
  FX_TYPE_GRENADE_EXPLODE = 12,
  FX_TYPE_ROCKET_EXPLODE = 13,
  FX_TYPE_ROCKET_EXPLODE_XTREME = 14,
  FX_TYPE_PROJECTILE_DUD = 15,
  FX_TYPE_MORTAR_SHELL = 16,
  FX_TYPE_TANK_SHELL = 17,
  FX_TYPE_PHYSICS_IMPACT = 18,
  FX_TYPE_BOLT = 19,
  FX_TYPE_BLADE = 20,
  FX_TYPE_COUNT = 21,
} TAG_UNNAMED_114, *PTAG_UNNAMED_114;

enum WeapOverlayInteface_t
{
  WEAPOVERLAYINTERFACE_NONE = 0,
  WEAPOVERLAYINTERFACE_JAVELIN = 1,
  WEAPOVERLAYINTERFACE_TURRETSCOPE = 2,
  WEAPOVERLAYINTERFACECOUNT = 3,
};

enum bdAuthMsgTypes
{
  BD_AUTH_CREATE_ACCOUNT_REQUEST = 0,
  BD_AUTH_CREATE_ACCOUNT_REPLY = 1,
  BD_AUTH_CHANGE_USER_KEY_REQUEST = 2,
  BD_AUTH_CHANGE_USER_KEY_REPLY = 3,
  BD_AUTH_RESET_ACCOUNT_REQUEST = 4,
  BD_AUTH_RESET_ACCOUNT_REPLY = 5,
  BD_AUTH_DELETE_ACCOUNT_REQUEST = 6,
  BD_AUTH_DELETE_ACCOUNT_REPLY = 7,
  BD_AUTH_MIGRATE_ACCOUNTS_REQUEST = 8,
  BD_AUTH_MIGRATE_ACCOUNTS_REPLY = 9,
  BD_AUTH_ACCOUNT_FOR_MMP_REQUEST = 10,
  BD_AUTH_ACCOUNT_FOR_MMP_REPLY = 11,
  BD_AUTH_HOST_FOR_MMP_REQUEST = 12,
  BD_AUTH_HOST_FOR_MMP_REPLY = 13,
  BD_AUTH_ACCOUNT_FOR_HOST_REQUEST = 14,
  BD_AUTH_ACCOUNT_FOR_HOST_REPLY = 15,
  BD_AUTH_ANONYMOUS_FOR_MMP_REQUEST = 16,
  BD_AUTH_ANONYMOUS_FOR_MMP_REPLY = 17,
  BD_AUTH_PS3_FOR_MMP_REQUEST = 18,
  BD_AUTH_PS3_FOR_MMP_REPLY = 19,
  BD_AUTH_GET_USERNAMES_BY_LICENSE_REQUEST = 20,
  BD_AUTH_GET_USERNAMES_BY_LICENSE_REPLY = 21,
  BD_AUTH_WII_FOR_MMP_REQUEST = 22,
  BD_AUTH_WII_FOR_MMP_REPLY = 23,
  BD_AUTH_FOR_DEDICATED_SERVER_REQUEST = 24,
  BD_AUTH_FOR_DEDICATED_SERVER_REPLY = 25,
  BD_AUTH_FOR_DEDICATED_SERVER_REQUEST_RSA = 26,
  BD_AUTH_FOR_DEDICATED_SERVER_REPLY_RSA = 27,
  BD_AUTH_STEAM_FOR_MMP_REQUEST = 28,
  BD_AUTH_STEAM_FOR_MMP_REPLY = 29,
  BD_AUTH_3DS_FOR_MMP_REQUEST = 30,
  BD_AUTH_3DS_FOR_MMP_REPLY = 31,
  BD_AUTH_CODO_FOR_MMP_REQUEST = 32,
  BD_AUTH_CODO_FOR_MMP_REPLY = 33,
  BD_AUTH_ABACCOUNTS_FOR_MMP_REQUEST = 34,
  BD_AUTH_ABACCOUNTS_FOR_MMP_REPLY = 35,
  BD_AUTH_WIIU_FOR_MMP_REQUEST = 36,
  BD_AUTH_WIIU_FOR_MMP_REPLY = 37,
  BD_AUTH_WIIU_FOR_MMP_REQUEST2 = 38,
  BD_AUTH_WIIU_FOR_MMP_REPLY2 = 39,
  BD_AUTH_WIIU_SECONDARY_FOR_MMP_REQUEST = 40,
  BD_AUTH_WIIU_SECONDARY_FOR_MMP_REPLY = 41,
};

union XAnimDynamicIndices
{
  union
  {
    /* 0x0000 */ unsigned char _1[1];
    /* 0x0000 */ unsigned short _2[1];
  }; /* size: 0x0002 */
}; /* size: 0x0002 */

struct XAnimDeltaPartQuatDataFrames
{
  /* 0x0000 */ short* frames[4];
  /* 0x0004 */ union XAnimDynamicIndices indices;
  /* 0x0006 */ char __PADDING__[2];
}; /* size: 0x0008 */

union XAnimDeltaPartQuatData
{
  union
  {
    /* 0x0000 */ struct XAnimDeltaPartQuatDataFrames frames;
    /* 0x0000 */ short frame0[4];
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct XAnimDeltaPartQuat
{
  /* 0x0000 */ unsigned short size;
  /* 0x0002 */ char Padding_59[2];
  /* 0x0004 */ union XAnimDeltaPartQuatData u;
}; /* size: 0x000c */

enum SndMenuCategory
{
  SND_CATEGORY_SFX = 0,
  SND_CATEGORY_MUSIC = 1,
  SND_CATEGORY_VOICE = 2,
  SND_CATEGORY_UI = 3,
  SND_CATEGORY_CINEMATIC = 4,
  SND_CATEGORY_COUNT = 5,
};

enum bdCookieEchoChunk::bdCookieEchoFlags
{
  BD_CE_NO_FLAGS = 0,
};

enum D3D11_INPUT_CLASSIFICATION
{
  D3D11_INPUT_PER_VERTEX_DATA = 0,
  D3D11_INPUT_PER_INSTANCE_DATA = 1,
};

typedef enum _NV_GPU_HDCP_KEY_SOURCE_STATE
{
  NV_GPU_HDCP_KEY_SOURCE_STATE_UNKNOWN = 0,
  NV_GPU_HDCP_KEY_SOURCE_STATE_ABSENT = 1,
  NV_GPU_HDCP_KEY_SOURCE_STATE_PRESENT = 2,
} NV_GPU_HDCP_KEY_SOURCE_STATE, *PNV_GPU_HDCP_KEY_SOURCE_STATE;

struct dwTeamClanInviteTask
{
  /* 0x0000 */ unsigned __int64 teamID;
  /* 0x0008 */ unsigned __int64 newUserID;
}; /* size: 0x0010 */

typedef struct _SECURITY_ATTRIBUTES
{
  /* 0x0000 */ unsigned long nLength;
  /* 0x0004 */ void* lpSecurityDescriptor;
  /* 0x0008 */ int bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES; /* size: 0x000c */

enum VehicleMantlePoints
{
  MANTLE_ANGLE_FRONT = 0,
  MANTLE_ANGLE_BACK = 1,
  MANTLE_ANGLE_LEFT = 2,
  MANTLE_ANGLE_RIGHT = 3,
  MANTLE_ANGLE_MAX = 4,
};

class bdFastArray<unsigned int>
{
  /* 0x0000 */ unsigned int* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

enum eDogRunStartKnobAnims
{
  DOG_ANIMINDEX_RUN_START_KNOB_ROOT = 0,
  DOG_ANIMINDEX_RUN_START = 1,
  DOG_ANIMINDEX_RUN_START_COUNT = 2,
};

enum rigid_body_constraint_hinge::ps_cache_e
{
  PSC_X = 0,
  PSC_Y = 1,
  PSC_Z = 2,
  PSC_DAMP = 3,
  PSC_A1 = 4,
  PSC_A2 = 5,
  PSC_MIN_LIMIT = 6,
  PSC_MAX_LIMIT = 7,
  NUM_PSC = 8,
};

typedef enum _TAG_UNNAMED_115
{
  DB_GUMP_1 = 1,
  DB_GUMP_2 = 2,
  DB_GUMP_3 = 4,
  DB_GUMP_4 = 8,
} TAG_UNNAMED_115, *PTAG_UNNAMED_115;

struct D3D11_BUFFER_RTV
{
  union
  {
    /* 0x0000 */ unsigned int FirstElement;
    /* 0x0000 */ unsigned int ElementOffset;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0004 */ unsigned int NumElements;
    /* 0x0004 */ unsigned int ElementWidth;
  }; /* size: 0x0004 */
}; /* size: 0x0008 */

struct D3D11_TEX1D_ARRAY_RTV
{
  /* 0x0000 */ unsigned int MipSlice;
  /* 0x0004 */ unsigned int FirstArraySlice;
  /* 0x0008 */ unsigned int ArraySize;
}; /* size: 0x000c */

struct D3D11_TEX2D_RTV
{
  /* 0x0000 */ unsigned int MipSlice;
}; /* size: 0x0004 */

struct D3D11_TEX2D_ARRAY_RTV
{
  /* 0x0000 */ unsigned int MipSlice;
  /* 0x0004 */ unsigned int FirstArraySlice;
  /* 0x0008 */ unsigned int ArraySize;
}; /* size: 0x000c */

struct D3D11_TEX2DMS_ARRAY_RTV
{
  /* 0x0000 */ unsigned int FirstArraySlice;
  /* 0x0004 */ unsigned int ArraySize;
}; /* size: 0x0008 */

struct D3D11_TEX3D_RTV
{
  /* 0x0000 */ unsigned int MipSlice;
  /* 0x0004 */ unsigned int FirstWSlice;
  /* 0x0008 */ unsigned int WSize;
}; /* size: 0x000c */

struct D3D11_RENDER_TARGET_VIEW_DESC
{
  /* 0x0000 */ enum DXGI_FORMAT Format;
  /* 0x0004 */ enum D3D11_RTV_DIMENSION ViewDimension;
  union
  {
    /* 0x0008 */ struct D3D11_BUFFER_RTV Buffer;
    /* 0x0008 */ struct D3D11_TEX1D_RTV Texture1D;
    /* 0x0008 */ struct D3D11_TEX1D_ARRAY_RTV Texture1DArray;
    /* 0x0008 */ struct D3D11_TEX2D_RTV Texture2D;
    /* 0x0008 */ struct D3D11_TEX2D_ARRAY_RTV Texture2DArray;
    /* 0x0008 */ struct D3D11_TEX2DMS_RTV Texture2DMS;
    /* 0x0008 */ struct D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
    /* 0x0008 */ struct D3D11_TEX3D_RTV Texture3D;
  }; /* size: 0x000c */
}; /* size: 0x0014 */

class bdYouTube
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

enum weapFireType_t
{
  WEAPON_FIRETYPE_FULLAUTO = 0,
  WEAPON_FIRETYPE_SINGLESHOT = 1,
  WEAPON_FIRETYPE_BURSTFIRE2 = 2,
  WEAPON_FIRETYPE_BURSTFIRE3 = 3,
  WEAPON_FIRETYPE_BURSTFIRE4 = 4,
  WEAPON_FIRETYPE_BURSTFIRE5 = 5,
  WEAPON_FIRETYPE_STACKED = 6,
  WEAPON_FIRETYPE_MINIGUN = 7,
  WEAPON_FIRETYPE_CHARGESHOT = 8,
  WEAPON_FIRETYPE_JETGUN = 9,
  WEAPON_FIRETYPECOUNT = 10,
};

typedef struct _iobuf
{
  /* 0x0000 */ char* _ptr;
  /* 0x0004 */ int _cnt;
  /* 0x0008 */ char* _base;
  /* 0x000c */ int _flag;
  /* 0x0010 */ int _file;
  /* 0x0014 */ int _charbuf;
  /* 0x0018 */ int _bufsiz;
  /* 0x001c */ char* _tmpfname;
} iobuf, *Piobuf; /* size: 0x0020 */

enum destructibleFieldType_t
{
  DFT_PIECE0 = 18,
  DFT_PIECE1 = 19,
  DFT_PIECE2 = 20,
  DFT_PIECE3 = 21,
  DFT_PIECE4 = 22,
  DFT_PIECE5 = 23,
  DFT_PIECE6 = 24,
  DFT_PIECE7 = 25,
  DFT_PIECE8 = 26,
  DFT_PIECE9 = 27,
  DFT_PIECE10 = 28,
  DFT_PIECE11 = 29,
  DFT_PIECE12 = 30,
  DFT_PIECE13 = 31,
  DFT_PIECE14 = 32,
  DFT_PIECE15 = 33,
  DFT_PIECE16 = 34,
  DFT_PIECE17 = 35,
  DFT_PIECE18 = 36,
  DFT_PIECE19 = 37,
  DFT_PIECE20 = 38,
  DFT_PIECE21 = 39,
  DFT_PIECE22 = 40,
  DFT_PIECE23 = 41,
  DFT_PIECE24 = 42,
  DFT_PIECE25 = 43,
  DFT_PIECE26 = 44,
  DFT_PIECE27 = 45,
  DFT_PIECE28 = 46,
  DFT_PIECE29 = 47,
  DFT_PIECE30 = 48,
  DFT_PIECE31 = 49,
  DFT_PIECE_HEALTH0 = 50,
  DFT_PIECE_HEALTH1 = 51,
  DFT_PIECE_HEALTH2 = 52,
  DFT_PIECE_HEALTH3 = 53,
  DFT_PIECE_HEALTH4 = 54,
  DFT_PIECE_HEALTH5 = 55,
  DFT_PIECE_HEALTH6 = 56,
  DFT_PIECE_HEALTH7 = 57,
  DFT_PIECE_HEALTH8 = 58,
  DFT_PIECE_HEALTH9 = 59,
  DFT_PIECE_HEALTH10 = 60,
  DFT_PIECE_HEALTH11 = 61,
  DFT_PIECE_HEALTH12 = 62,
  DFT_PIECE_HEALTH13 = 63,
  DFT_PIECE_HEALTH14 = 64,
  DFT_PIECE_HEALTH15 = 65,
  DFT_PIECE_HEALTH16 = 66,
  DFT_PIECE_HEALTH17 = 67,
  DFT_PIECE_HEALTH18 = 68,
  DFT_PIECE_HEALTH19 = 69,
  DFT_PIECE_HEALTH20 = 70,
  DFT_PIECE_HEALTH21 = 71,
  DFT_PIECE_HEALTH22 = 72,
  DFT_PIECE_HEALTH23 = 73,
  DFT_PIECE_HEALTH24 = 74,
  DFT_PIECE_HEALTH25 = 75,
  DFT_PIECE_HEALTH26 = 76,
  DFT_PIECE_HEALTH27 = 77,
  DFT_PIECE_HEALTH28 = 78,
  DFT_PIECE_HEALTH29 = 79,
  DFT_PIECE_HEALTH30 = 80,
  DFT_PIECE_HEALTH31 = 81,
  DFT_PARENT_PIECE0 = 82,
  DFT_PARENT_PIECE1 = 83,
  DFT_PARENT_PIECE2 = 84,
  DFT_PARENT_PIECE3 = 85,
  DFT_PARENT_PIECE4 = 86,
  DFT_PARENT_PIECE5 = 87,
  DFT_PARENT_PIECE6 = 88,
  DFT_PARENT_PIECE7 = 89,
  DFT_PARENT_PIECE8 = 90,
  DFT_PARENT_PIECE9 = 91,
  DFT_PARENT_PIECE10 = 92,
  DFT_PARENT_PIECE11 = 93,
  DFT_PARENT_PIECE12 = 94,
  DFT_PARENT_PIECE13 = 95,
  DFT_PARENT_PIECE14 = 96,
  DFT_PARENT_PIECE15 = 97,
  DFT_PARENT_PIECE16 = 98,
  DFT_PARENT_PIECE17 = 99,
  DFT_PARENT_PIECE18 = 100,
  DFT_PARENT_PIECE19 = 101,
  DFT_PARENT_PIECE20 = 102,
  DFT_PARENT_PIECE21 = 103,
  DFT_PARENT_PIECE22 = 104,
  DFT_PARENT_PIECE23 = 105,
  DFT_PARENT_PIECE24 = 106,
  DFT_PARENT_PIECE25 = 107,
  DFT_PARENT_PIECE26 = 108,
  DFT_PARENT_PIECE27 = 109,
  DFT_PARENT_PIECE28 = 110,
  DFT_PARENT_PIECE29 = 111,
  DFT_PARENT_PIECE30 = 112,
  DFT_PARENT_PIECE31 = 113,
  DFT_PARENT_DAMAGE_PERCENT0 = 114,
  DFT_PARENT_DAMAGE_PERCENT1 = 115,
  DFT_PARENT_DAMAGE_PERCENT2 = 116,
  DFT_PARENT_DAMAGE_PERCENT3 = 117,
  DFT_PARENT_DAMAGE_PERCENT4 = 118,
  DFT_PARENT_DAMAGE_PERCENT5 = 119,
  DFT_PARENT_DAMAGE_PERCENT6 = 120,
  DFT_PARENT_DAMAGE_PERCENT7 = 121,
  DFT_PARENT_DAMAGE_PERCENT8 = 122,
  DFT_PARENT_DAMAGE_PERCENT9 = 123,
  DFT_PARENT_DAMAGE_PERCENT10 = 124,
  DFT_PARENT_DAMAGE_PERCENT11 = 125,
  DFT_PARENT_DAMAGE_PERCENT12 = 126,
  DFT_PARENT_DAMAGE_PERCENT13 = 127,
  DFT_PARENT_DAMAGE_PERCENT14 = 128,
  DFT_PARENT_DAMAGE_PERCENT15 = 129,
  DFT_PARENT_DAMAGE_PERCENT16 = 130,
  DFT_PARENT_DAMAGE_PERCENT17 = 131,
  DFT_PARENT_DAMAGE_PERCENT18 = 132,
  DFT_PARENT_DAMAGE_PERCENT19 = 133,
  DFT_PARENT_DAMAGE_PERCENT20 = 134,
  DFT_PARENT_DAMAGE_PERCENT21 = 135,
  DFT_PARENT_DAMAGE_PERCENT22 = 136,
  DFT_PARENT_DAMAGE_PERCENT23 = 137,
  DFT_PARENT_DAMAGE_PERCENT24 = 138,
  DFT_PARENT_DAMAGE_PERCENT25 = 139,
  DFT_PARENT_DAMAGE_PERCENT26 = 140,
  DFT_PARENT_DAMAGE_PERCENT27 = 141,
  DFT_PARENT_DAMAGE_PERCENT28 = 142,
  DFT_PARENT_DAMAGE_PERCENT29 = 143,
  DFT_PARENT_DAMAGE_PERCENT30 = 144,
  DFT_PARENT_DAMAGE_PERCENT31 = 145,
  DFT_BULLET_DAMAGE_SCALE0 = 146,
  DFT_BULLET_DAMAGE_SCALE1 = 147,
  DFT_BULLET_DAMAGE_SCALE2 = 148,
  DFT_BULLET_DAMAGE_SCALE3 = 149,
  DFT_BULLET_DAMAGE_SCALE4 = 150,
  DFT_BULLET_DAMAGE_SCALE5 = 151,
  DFT_BULLET_DAMAGE_SCALE6 = 152,
  DFT_BULLET_DAMAGE_SCALE7 = 153,
  DFT_BULLET_DAMAGE_SCALE8 = 154,
  DFT_BULLET_DAMAGE_SCALE9 = 155,
  DFT_BULLET_DAMAGE_SCALE10 = 156,
  DFT_BULLET_DAMAGE_SCALE11 = 157,
  DFT_BULLET_DAMAGE_SCALE12 = 158,
  DFT_BULLET_DAMAGE_SCALE13 = 159,
  DFT_BULLET_DAMAGE_SCALE14 = 160,
  DFT_BULLET_DAMAGE_SCALE15 = 161,
  DFT_BULLET_DAMAGE_SCALE16 = 162,
  DFT_BULLET_DAMAGE_SCALE17 = 163,
  DFT_BULLET_DAMAGE_SCALE18 = 164,
  DFT_BULLET_DAMAGE_SCALE19 = 165,
  DFT_BULLET_DAMAGE_SCALE20 = 166,
  DFT_BULLET_DAMAGE_SCALE21 = 167,
  DFT_BULLET_DAMAGE_SCALE22 = 168,
  DFT_BULLET_DAMAGE_SCALE23 = 169,
  DFT_BULLET_DAMAGE_SCALE24 = 170,
  DFT_BULLET_DAMAGE_SCALE25 = 171,
  DFT_BULLET_DAMAGE_SCALE26 = 172,
  DFT_BULLET_DAMAGE_SCALE27 = 173,
  DFT_BULLET_DAMAGE_SCALE28 = 174,
  DFT_BULLET_DAMAGE_SCALE29 = 175,
  DFT_BULLET_DAMAGE_SCALE30 = 176,
  DFT_BULLET_DAMAGE_SCALE31 = 177,
  DFT_EXPLOSIVE_DAMAGE_SCALE0 = 178,
  DFT_EXPLOSIVE_DAMAGE_SCALE1 = 179,
  DFT_EXPLOSIVE_DAMAGE_SCALE2 = 180,
  DFT_EXPLOSIVE_DAMAGE_SCALE3 = 181,
  DFT_EXPLOSIVE_DAMAGE_SCALE4 = 182,
  DFT_EXPLOSIVE_DAMAGE_SCALE5 = 183,
  DFT_EXPLOSIVE_DAMAGE_SCALE6 = 184,
  DFT_EXPLOSIVE_DAMAGE_SCALE7 = 185,
  DFT_EXPLOSIVE_DAMAGE_SCALE8 = 186,
  DFT_EXPLOSIVE_DAMAGE_SCALE9 = 187,
  DFT_EXPLOSIVE_DAMAGE_SCALE10 = 188,
  DFT_EXPLOSIVE_DAMAGE_SCALE11 = 189,
  DFT_EXPLOSIVE_DAMAGE_SCALE12 = 190,
  DFT_EXPLOSIVE_DAMAGE_SCALE13 = 191,
  DFT_EXPLOSIVE_DAMAGE_SCALE14 = 192,
  DFT_EXPLOSIVE_DAMAGE_SCALE15 = 193,
  DFT_EXPLOSIVE_DAMAGE_SCALE16 = 194,
  DFT_EXPLOSIVE_DAMAGE_SCALE17 = 195,
  DFT_EXPLOSIVE_DAMAGE_SCALE18 = 196,
  DFT_EXPLOSIVE_DAMAGE_SCALE19 = 197,
  DFT_EXPLOSIVE_DAMAGE_SCALE20 = 198,
  DFT_EXPLOSIVE_DAMAGE_SCALE21 = 199,
  DFT_EXPLOSIVE_DAMAGE_SCALE22 = 200,
  DFT_EXPLOSIVE_DAMAGE_SCALE23 = 201,
  DFT_EXPLOSIVE_DAMAGE_SCALE24 = 202,
  DFT_EXPLOSIVE_DAMAGE_SCALE25 = 203,
  DFT_EXPLOSIVE_DAMAGE_SCALE26 = 204,
  DFT_EXPLOSIVE_DAMAGE_SCALE27 = 205,
  DFT_EXPLOSIVE_DAMAGE_SCALE28 = 206,
  DFT_EXPLOSIVE_DAMAGE_SCALE29 = 207,
  DFT_EXPLOSIVE_DAMAGE_SCALE30 = 208,
  DFT_EXPLOSIVE_DAMAGE_SCALE31 = 209,
  DFT_MELEE_DAMAGE_SCALE0 = 210,
  DFT_MELEE_DAMAGE_SCALE1 = 211,
  DFT_MELEE_DAMAGE_SCALE2 = 212,
  DFT_MELEE_DAMAGE_SCALE3 = 213,
  DFT_MELEE_DAMAGE_SCALE4 = 214,
  DFT_MELEE_DAMAGE_SCALE5 = 215,
  DFT_MELEE_DAMAGE_SCALE6 = 216,
  DFT_MELEE_DAMAGE_SCALE7 = 217,
  DFT_MELEE_DAMAGE_SCALE8 = 218,
  DFT_MELEE_DAMAGE_SCALE9 = 219,
  DFT_MELEE_DAMAGE_SCALE10 = 220,
  DFT_MELEE_DAMAGE_SCALE11 = 221,
  DFT_MELEE_DAMAGE_SCALE12 = 222,
  DFT_MELEE_DAMAGE_SCALE13 = 223,
  DFT_MELEE_DAMAGE_SCALE14 = 224,
  DFT_MELEE_DAMAGE_SCALE15 = 225,
  DFT_MELEE_DAMAGE_SCALE16 = 226,
  DFT_MELEE_DAMAGE_SCALE17 = 227,
  DFT_MELEE_DAMAGE_SCALE18 = 228,
  DFT_MELEE_DAMAGE_SCALE19 = 229,
  DFT_MELEE_DAMAGE_SCALE20 = 230,
  DFT_MELEE_DAMAGE_SCALE21 = 231,
  DFT_MELEE_DAMAGE_SCALE22 = 232,
  DFT_MELEE_DAMAGE_SCALE23 = 233,
  DFT_MELEE_DAMAGE_SCALE24 = 234,
  DFT_MELEE_DAMAGE_SCALE25 = 235,
  DFT_MELEE_DAMAGE_SCALE26 = 236,
  DFT_MELEE_DAMAGE_SCALE27 = 237,
  DFT_MELEE_DAMAGE_SCALE28 = 238,
  DFT_MELEE_DAMAGE_SCALE29 = 239,
  DFT_MELEE_DAMAGE_SCALE30 = 240,
  DFT_MELEE_DAMAGE_SCALE31 = 241,
  DFT_IMPACT_DAMAGE_SCALE0 = 242,
  DFT_IMPACT_DAMAGE_SCALE1 = 243,
  DFT_IMPACT_DAMAGE_SCALE2 = 244,
  DFT_IMPACT_DAMAGE_SCALE3 = 245,
  DFT_IMPACT_DAMAGE_SCALE4 = 246,
  DFT_IMPACT_DAMAGE_SCALE5 = 247,
  DFT_IMPACT_DAMAGE_SCALE6 = 248,
  DFT_IMPACT_DAMAGE_SCALE7 = 249,
  DFT_IMPACT_DAMAGE_SCALE8 = 250,
  DFT_IMPACT_DAMAGE_SCALE9 = 251,
  DFT_IMPACT_DAMAGE_SCALE10 = 252,
  DFT_IMPACT_DAMAGE_SCALE11 = 253,
  DFT_IMPACT_DAMAGE_SCALE12 = 254,
  DFT_IMPACT_DAMAGE_SCALE13 = 255,
  DFT_IMPACT_DAMAGE_SCALE14 = 256,
  DFT_IMPACT_DAMAGE_SCALE15 = 257,
  DFT_IMPACT_DAMAGE_SCALE16 = 258,
  DFT_IMPACT_DAMAGE_SCALE17 = 259,
  DFT_IMPACT_DAMAGE_SCALE18 = 260,
  DFT_IMPACT_DAMAGE_SCALE19 = 261,
  DFT_IMPACT_DAMAGE_SCALE20 = 262,
  DFT_IMPACT_DAMAGE_SCALE21 = 263,
  DFT_IMPACT_DAMAGE_SCALE22 = 264,
  DFT_IMPACT_DAMAGE_SCALE23 = 265,
  DFT_IMPACT_DAMAGE_SCALE24 = 266,
  DFT_IMPACT_DAMAGE_SCALE25 = 267,
  DFT_IMPACT_DAMAGE_SCALE26 = 268,
  DFT_IMPACT_DAMAGE_SCALE27 = 269,
  DFT_IMPACT_DAMAGE_SCALE28 = 270,
  DFT_IMPACT_DAMAGE_SCALE29 = 271,
  DFT_IMPACT_DAMAGE_SCALE30 = 272,
  DFT_IMPACT_DAMAGE_SCALE31 = 273,
  DFT_PHYS_CONSTRAINT0 = 274,
  DFT_PHYS_CONSTRAINT1 = 275,
  DFT_PHYS_CONSTRAINT2 = 276,
  DFT_PHYS_CONSTRAINT3 = 277,
  DFT_PHYS_CONSTRAINT4 = 278,
  DFT_PHYS_CONSTRAINT5 = 279,
  DFT_PHYS_CONSTRAINT6 = 280,
  DFT_PHYS_CONSTRAINT7 = 281,
  DFT_PHYS_CONSTRAINT8 = 282,
  DFT_PHYS_CONSTRAINT9 = 283,
  DFT_PHYS_CONSTRAINT10 = 284,
  DFT_PHYS_CONSTRAINT11 = 285,
  DFT_PHYS_CONSTRAINT12 = 286,
  DFT_PHYS_CONSTRAINT13 = 287,
  DFT_PHYS_CONSTRAINT14 = 288,
  DFT_PHYS_CONSTRAINT15 = 289,
  DFT_PHYS_CONSTRAINT16 = 290,
  DFT_PHYS_CONSTRAINT17 = 291,
  DFT_PHYS_CONSTRAINT18 = 292,
  DFT_PHYS_CONSTRAINT19 = 293,
  DFT_PHYS_CONSTRAINT20 = 294,
  DFT_PHYS_CONSTRAINT21 = 295,
  DFT_PHYS_CONSTRAINT22 = 296,
  DFT_PHYS_CONSTRAINT23 = 297,
  DFT_PHYS_CONSTRAINT24 = 298,
  DFT_PHYS_CONSTRAINT25 = 299,
  DFT_PHYS_CONSTRAINT26 = 300,
  DFT_PHYS_CONSTRAINT27 = 301,
  DFT_PHYS_CONSTRAINT28 = 302,
  DFT_PHYS_CONSTRAINT29 = 303,
  DFT_PHYS_CONSTRAINT30 = 304,
  DFT_PHYS_CONSTRAINT31 = 305,
  DFT_DAMAGE_SOUND0 = 306,
  DFT_DAMAGE_SOUND1 = 307,
  DFT_DAMAGE_SOUND2 = 308,
  DFT_DAMAGE_SOUND3 = 309,
  DFT_DAMAGE_SOUND4 = 310,
  DFT_DAMAGE_SOUND5 = 311,
  DFT_DAMAGE_SOUND6 = 312,
  DFT_DAMAGE_SOUND7 = 313,
  DFT_DAMAGE_SOUND8 = 314,
  DFT_DAMAGE_SOUND9 = 315,
  DFT_DAMAGE_SOUND10 = 316,
  DFT_DAMAGE_SOUND11 = 317,
  DFT_DAMAGE_SOUND12 = 318,
  DFT_DAMAGE_SOUND13 = 319,
  DFT_DAMAGE_SOUND14 = 320,
  DFT_DAMAGE_SOUND15 = 321,
  DFT_DAMAGE_SOUND16 = 322,
  DFT_DAMAGE_SOUND17 = 323,
  DFT_DAMAGE_SOUND18 = 324,
  DFT_DAMAGE_SOUND19 = 325,
  DFT_DAMAGE_SOUND20 = 326,
  DFT_DAMAGE_SOUND21 = 327,
  DFT_DAMAGE_SOUND22 = 328,
  DFT_DAMAGE_SOUND23 = 329,
  DFT_DAMAGE_SOUND24 = 330,
  DFT_DAMAGE_SOUND25 = 331,
  DFT_DAMAGE_SOUND26 = 332,
  DFT_DAMAGE_SOUND27 = 333,
  DFT_DAMAGE_SOUND28 = 334,
  DFT_DAMAGE_SOUND29 = 335,
  DFT_DAMAGE_SOUND30 = 336,
  DFT_DAMAGE_SOUND31 = 337,
  DFT_BURN_EFFECT0 = 338,
  DFT_BURN_EFFECT1 = 339,
  DFT_BURN_EFFECT2 = 340,
  DFT_BURN_EFFECT3 = 341,
  DFT_BURN_EFFECT4 = 342,
  DFT_BURN_EFFECT5 = 343,
  DFT_BURN_EFFECT6 = 344,
  DFT_BURN_EFFECT7 = 345,
  DFT_BURN_EFFECT8 = 346,
  DFT_BURN_EFFECT9 = 347,
  DFT_BURN_EFFECT10 = 348,
  DFT_BURN_EFFECT11 = 349,
  DFT_BURN_EFFECT12 = 350,
  DFT_BURN_EFFECT13 = 351,
  DFT_BURN_EFFECT14 = 352,
  DFT_BURN_EFFECT15 = 353,
  DFT_BURN_EFFECT16 = 354,
  DFT_BURN_EFFECT17 = 355,
  DFT_BURN_EFFECT18 = 356,
  DFT_BURN_EFFECT19 = 357,
  DFT_BURN_EFFECT20 = 358,
  DFT_BURN_EFFECT21 = 359,
  DFT_BURN_EFFECT22 = 360,
  DFT_BURN_EFFECT23 = 361,
  DFT_BURN_EFFECT24 = 362,
  DFT_BURN_EFFECT25 = 363,
  DFT_BURN_EFFECT26 = 364,
  DFT_BURN_EFFECT27 = 365,
  DFT_BURN_EFFECT28 = 366,
  DFT_BURN_EFFECT29 = 367,
  DFT_BURN_EFFECT30 = 368,
  DFT_BURN_EFFECT31 = 369,
  DFT_BURN_SOUND0 = 370,
  DFT_BURN_SOUND1 = 371,
  DFT_BURN_SOUND2 = 372,
  DFT_BURN_SOUND3 = 373,
  DFT_BURN_SOUND4 = 374,
  DFT_BURN_SOUND5 = 375,
  DFT_BURN_SOUND6 = 376,
  DFT_BURN_SOUND7 = 377,
  DFT_BURN_SOUND8 = 378,
  DFT_BURN_SOUND9 = 379,
  DFT_BURN_SOUND10 = 380,
  DFT_BURN_SOUND11 = 381,
  DFT_BURN_SOUND12 = 382,
  DFT_BURN_SOUND13 = 383,
  DFT_BURN_SOUND14 = 384,
  DFT_BURN_SOUND15 = 385,
  DFT_BURN_SOUND16 = 386,
  DFT_BURN_SOUND17 = 387,
  DFT_BURN_SOUND18 = 388,
  DFT_BURN_SOUND19 = 389,
  DFT_BURN_SOUND20 = 390,
  DFT_BURN_SOUND21 = 391,
  DFT_BURN_SOUND22 = 392,
  DFT_BURN_SOUND23 = 393,
  DFT_BURN_SOUND24 = 394,
  DFT_BURN_SOUND25 = 395,
  DFT_BURN_SOUND26 = 396,
  DFT_BURN_SOUND27 = 397,
  DFT_BURN_SOUND28 = 398,
  DFT_BURN_SOUND29 = 399,
  DFT_BURN_SOUND30 = 400,
  DFT_BURN_SOUND31 = 401,
  DFT_DAMAGE_ENTITY0 = 402,
  DFT_DAMAGE_ENTITY1 = 403,
  DFT_DAMAGE_ENTITY2 = 404,
  DFT_DAMAGE_ENTITY3 = 405,
  DFT_DAMAGE_ENTITY4 = 406,
  DFT_DAMAGE_ENTITY5 = 407,
  DFT_DAMAGE_ENTITY6 = 408,
  DFT_DAMAGE_ENTITY7 = 409,
  DFT_DAMAGE_ENTITY8 = 410,
  DFT_DAMAGE_ENTITY9 = 411,
  DFT_DAMAGE_ENTITY10 = 412,
  DFT_DAMAGE_ENTITY11 = 413,
  DFT_DAMAGE_ENTITY12 = 414,
  DFT_DAMAGE_ENTITY13 = 415,
  DFT_DAMAGE_ENTITY14 = 416,
  DFT_DAMAGE_ENTITY15 = 417,
  DFT_DAMAGE_ENTITY16 = 418,
  DFT_DAMAGE_ENTITY17 = 419,
  DFT_DAMAGE_ENTITY18 = 420,
  DFT_DAMAGE_ENTITY19 = 421,
  DFT_DAMAGE_ENTITY20 = 422,
  DFT_DAMAGE_ENTITY21 = 423,
  DFT_DAMAGE_ENTITY22 = 424,
  DFT_DAMAGE_ENTITY23 = 425,
  DFT_DAMAGE_ENTITY24 = 426,
  DFT_DAMAGE_ENTITY25 = 427,
  DFT_DAMAGE_ENTITY26 = 428,
  DFT_DAMAGE_ENTITY27 = 429,
  DFT_DAMAGE_ENTITY28 = 430,
  DFT_DAMAGE_ENTITY29 = 431,
  DFT_DAMAGE_ENTITY30 = 432,
  DFT_DAMAGE_ENTITY31 = 433,
  DFT_PIECE_LABEL0 = 434,
  DFT_PIECE_LABEL1 = 435,
  DFT_PIECE_LABEL2 = 436,
  DFT_PIECE_LABEL3 = 437,
  DFT_PIECE_LABEL4 = 438,
  DFT_PIECE_LABEL5 = 439,
  DFT_PIECE_LABEL6 = 440,
  DFT_PIECE_LABEL7 = 441,
  DFT_PIECE_LABEL8 = 442,
  DFT_PIECE_LABEL9 = 443,
  DFT_PIECE_LABEL10 = 444,
  DFT_PIECE_LABEL11 = 445,
  DFT_PIECE_LABEL12 = 446,
  DFT_PIECE_LABEL13 = 447,
  DFT_PIECE_LABEL14 = 448,
  DFT_PIECE_LABEL15 = 449,
  DFT_PIECE_LABEL16 = 450,
  DFT_PIECE_LABEL17 = 451,
  DFT_PIECE_LABEL18 = 452,
  DFT_PIECE_LABEL19 = 453,
  DFT_PIECE_LABEL20 = 454,
  DFT_PIECE_LABEL21 = 455,
  DFT_PIECE_LABEL22 = 456,
  DFT_PIECE_LABEL23 = 457,
  DFT_PIECE_LABEL24 = 458,
  DFT_PIECE_LABEL25 = 459,
  DFT_PIECE_LABEL26 = 460,
  DFT_PIECE_LABEL27 = 461,
  DFT_PIECE_LABEL28 = 462,
  DFT_PIECE_LABEL29 = 463,
  DFT_PIECE_LABEL30 = 464,
  DFT_PIECE_LABEL31 = 465,
  DFT_MAX_FIELDS = 466,
};

enum ffa_team_t
{
  TEAM_FFA_NONE = 0,
  TEAM_FFA_AXIS = 1,
  TEAM_FFA_ALLIES = 2,
  TEAM_FFA_THREE = 3,
};

typedef struct _XMUNIBBLE4
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short x : 4; /* bit position: 0 */
      /* 0x0000 */ unsigned short y : 4; /* bit position: 4 */
      /* 0x0000 */ unsigned short z : 4; /* bit position: 8 */
      /* 0x0000 */ unsigned short w : 4; /* bit position: 12 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short v;
  }; /* size: 0x0002 */
} XMUNIBBLE4, *PXMUNIBBLE4; /* size: 0x0002 */

enum rigid_body_constraint_wheel::wheel_state_e
{
  WHEEL_STATE_ACCELERATING = 0,
  WHEEL_STATE_BRAKING = 1,
};

enum bdUPnP::bdUPnPState
{
  BD_UPNP_UNINITIALISED = 0,
  BD_UPNP_INITIALISED = 1,
  BD_UPNP_DISCOVERING_DEVICES = 2,
  BD_UPNP_DISCOVERED_DEVICE = 3,
  BD_UPNP_CONFIGURING_DEVICE = 4,
  BD_UPNP_SHUTTING_DOWN = 5,
  BD_UPNP_FINISHED = 6,
  BD_UPNP_FAILED = 7,
};

enum bdUPnPDevice::bdUPnPDeviceShutdownType
{
  BD_UPNP_DEVICE_SHUTDOWN_ELEGANT = 0,
  BD_UPNP_DEVICE_SHUTDOWN_IMMEDIATE = 1,
};

enum scriptAnimWeaponPositions_t
{
  ANIM_WP_HIP = 0,
  ANIM_WP_ADS = 1,
  ANIM_WP_RAISED = 2,
  NUM_ANIM_WEAPONPOSITIONS = 3,
};

enum ai_traverse_mode_t
{
  AI_TRAVERSE_INVALID = 0,
  AI_TRAVERSE_GRAVITY = 1,
  AI_TRAVERSE_NOGRAVITY = 2,
  AI_TRAVERSE_NOCLIP = 3,
  AI_TRAVERSE_COUNT = 4,
};

enum NV_HDCP_RET_STATUS
{
  NV_HDCP_STATUS_SUCCESS = 0,
  NV_HDCP_STATUS_UNSUCCESSFUL = -1073741823,
  NV_HDCP_STATUS_PENDING = 259,
  NV_HDCP_STATUS_LINK_FAILED = -1073741506,
  NV_HDCP_STATUS_INVALID_PARAMETER = -1073741811,
  NV_HDCP_STATUS_INVALID_PARAMETER_MIX = -1073741776,
  NV_HDCP_STATUS_NO_MEMORY = -1073741801,
  NV_HDCP_STATUS_BAD_TOKEN_TYPE = -1073741656,
};

enum bdPagingToken::bdStatus
{
  BD_NOT_STARTED = 0,
  BD_IN_PROGRESS = 1,
  BD_FINISHED = 2,
};

typedef enum _TAG_UNNAMED_116
{
  ANIMPROP_LOOPSYNC = 0,
  ANIMPROP_NONLOOPSYNC = 1,
  ANIMPROP_COMPLETE = 2,
  ANIMPROP_ADDITIVE = 3,
  ANIMPROP_CLIENT = 4,
  ANIMPROP_SEPARATE = 5,
  ANIMPROP_FORCELOAD = 6,
  ANIMPROP_COUNT = 7,
} TAG_UNNAMED_116, *PTAG_UNNAMED_116;

enum bdUPnPDevice::bdUPnPPortStatus
{
  BD_UPNP_PORT_STATUS_UNKNOWN = 0,
  BD_UPNP_PORT_COLLISION_FOUND = 1,
  BD_UPNP_PORT_NOT_MAPPED = 2,
  BD_UPNP_PORT_MAPPED = 3,
};

enum D3D10_BIND_FLAG
{
  D3D10_BIND_VERTEX_BUFFER = 1,
  D3D10_BIND_INDEX_BUFFER = 2,
  D3D10_BIND_CONSTANT_BUFFER = 4,
  D3D10_BIND_SHADER_RESOURCE = 8,
  D3D10_BIND_STREAM_OUTPUT = 16,
  D3D10_BIND_RENDER_TARGET = 32,
  D3D10_BIND_DEPTH_STENCIL = 64,
};

typedef enum _NV_DISPLAY_TV_FORMAT
{
  NV_DISPLAY_TV_FORMAT_NONE = 0,
  NV_DISPLAY_TV_FORMAT_SD_NTSCM = 1,
  NV_DISPLAY_TV_FORMAT_SD_NTSCJ = 2,
  NV_DISPLAY_TV_FORMAT_SD_PALM = 4,
  NV_DISPLAY_TV_FORMAT_SD_PALBDGH = 8,
  NV_DISPLAY_TV_FORMAT_SD_PALN = 16,
  NV_DISPLAY_TV_FORMAT_SD_PALNC = 32,
  NV_DISPLAY_TV_FORMAT_SD_576i = 256,
  NV_DISPLAY_TV_FORMAT_SD_480i = 512,
  NV_DISPLAY_TV_FORMAT_ED_480p = 1024,
  NV_DISPLAY_TV_FORMAT_ED_576p = 2048,
  NV_DISPLAY_TV_FORMAT_HD_720p = 4096,
  NV_DISPLAY_TV_FORMAT_HD_1080i = 8192,
  NV_DISPLAY_TV_FORMAT_HD_1080p = 16384,
  NV_DISPLAY_TV_FORMAT_HD_720p50 = 0xffff8000,
  NV_DISPLAY_TV_FORMAT_HD_1080p24 = 0x10000,
  NV_DISPLAY_TV_FORMAT_HD_1080i50 = 0x20000,
  NV_DISPLAY_TV_FORMAT_HD_1080p50 = 0x40000,
  NV_DISPLAY_TV_FORMAT_SD_OTHER = 0x1000000,
  NV_DISPLAY_TV_FORMAT_ED_OTHER = 0x2000000,
  NV_DISPLAY_TV_FORMAT_HD_OTHER = 0x4000000,
  NV_DISPLAY_TV_FORMAT_ANY = -2147483648,
} NV_DISPLAY_TV_FORMAT, *PNV_DISPLAY_TV_FORMAT;

enum connstate_t
{
  CA_DISCONNECTED = 0,
  CA_CINEMATIC = 1,
  CA_UICINEMATIC = 2,
  CA_LOGO = 3,
  CA_CONNECTING = 4,
  CA_CHALLENGING = 5,
  CA_CONNECTED = 6,
  CA_SENDINGSTATS = 7,
  CA_LOADING = 8,
  CA_PRIMED = 9,
  CA_ACTIVE = 10,
};

enum visionSetLerpStyle_t
{
  VISIONSETLERP_UNDEFINED = 0,
  VISIONSETLERP_NONE = 1,
  VISIONSETLERP_TO_LINEAR = 2,
  VISIONSETLERP_TO_SMOOTH = 3,
  VISIONSETLERP_BACKFORTH_LINEAR = 4,
  VISIONSETLERP_BACKFORTH_SMOOTH = 5,
  VISIONSETLERP_CUSTOM_VALUE = 6,
};

typedef enum _TAG_UNNAMED_117
{
  MF_BOOST_ENABLED = 1,
  MF_DETONATION_ENABLED = 2,
  MF_MISSILE_BOOSTING = 4,
  MF_MISSLE_COASTING = 8,
  MF_MISSILE_SCRIPT_DETONATE = 16,
} TAG_UNNAMED_117, *PTAG_UNNAMED_117;

class pulse_sum_contact
{
  /* 0x0000 */ long Padding_60[4];
  /* 0x0010 */ class phys_vec3 m_ud_n;
  /* 0x0020 */ class phys_vec3 m_ud_f1;
  /* 0x0030 */ class phys_vec3 m_ud_f2;
  /* 0x0040 */ float m_fric_coef;
  /* 0x0044 */ class pulse_sum_node* m_b1;
  /* 0x0048 */ class pulse_sum_node* m_b2;
  /* 0x004c */ class pulse_sum_contact_point* m_list_pscp;
  /* 0x0050 */ void* m_pulse_sum_cache_list;
  /* 0x0054 */ int m_list_pscp_count;
}; /* size: 0x0060 */

enum ScriptTokenizer::TokenType
{
  TOK_IDENTIFIER = 0,
  TOK_SYMBOL = 1,
  TOK_NUMBER = 2,
  TOK_UNKNOWN = 3,
};

enum bdRemoteTask::bdStatus
{
  BD_EMPTY = 0,
  BD_PENDING = 1,
  BD_DONE = 2,
  BD_FAILED = 3,
  BD_TIMED_OUT = 4,
  BD_CANCELLED = 5,
  BD_MAX_STATUS = 6,
};

enum VehicleEntryPoints
{
  VEH_ENTRY_LEFT = 0,
  VEH_ENTRY_RIGHT = 1,
  VEH_ENTRY_REAR = 2,
  VEH_ENTRY_GUNNER3 = 3,
  VEH_ENTRY_GUNNER4 = 4,
  NUM_VEHICLE_ENTRY_POINTS = 5,
};

enum shoutcaster_showperks
{
  SHOUTCASTER_SHOW_PERKS_OFF = 0,
  SHOUTCASTER_SHOW_PERKS_ON = 1,
  SHOUTCASTER_SHOW_PERKS_ALWAYS = 2,
  SHOUTCASTER_SHOW_PERKS_COUNT = 3,
};

enum bdNetImpl::bdNetStatus
{
  BD_NET_PARAMS_CONFIG_ERROR = -4,
  BD_NET_BIND_FAILED = -3,
  BD_NET_ONLINE_FAILED = -2,
  BD_NET_INIT_FAILED = -1,
  BD_NET_STOPPED = 0,
  BD_NET_PENDING = 1,
  BD_NET_DONE = 2,
};

class char4
{
  /* 0x0000 */ char x;
  /* 0x0001 */ char y;
  /* 0x0002 */ char z;
  /* 0x0003 */ char w;
}; /* size: 0x0004 */

enum bdAddrHandle::bdAddrHandleStatus
{
  BD_ADDR_NOT_CONSTRUCTED = 0,
  BD_ADDR_NOT_RESOLVED = 1,
  BD_ADDR_ERROR = 2,
  BD_ADDR_RESOLVED = 3,
  BD_ADDR_UNRESOLVED = 4,
};

struct VehicleEngineSound
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int alias;
  /* 0x0008 */ float params[5];
}; /* size: 0x001c */

typedef enum _NV_GPU_FB_LOCATION
{
  NV_GPU_FB_RAM_LOCATION_UNKNOWN = 0,
  NV_GPU_FB_RAM_LOCATION_GPU_DEDICATED = 1,
  NV_GPU_FB_RAM_LOCATION_SYS_SHARED = 2,
  NV_GPU_FB_RAM_LOCATION_SYS_DEDICATED = 3,
} NV_GPU_FB_LOCATION, *PNV_GPU_FB_LOCATION;

enum IKBoneNames
{
  IKBONE_NONE = -1,
  IKBONE_FIRST = 0,
  IKBONE_ORIGIN = 0,
  IKBONE_PELVIS = 1,
  IKBONE_SPINE = 2,
  IKBONE_SPINE1 = 3,
  IKBONE_SPINE2 = 4,
  IKBONE_NECK = 5,
  IKBONE_HEAD = 6,
  IKBONE_LCLAVICLE = 7,
  IKBONE_LUPPERARM = 8,
  IKBONE_LFOREARM = 9,
  IKBONE_LHAND = 10,
  IKBONE_LWRIST_TWIST = 11,
  IKBONE_RCLAVICLE = 12,
  IKBONE_RUPPERARM = 13,
  IKBONE_RFOREARM = 14,
  IKBONE_RHAND = 15,
  IKBONE_RWRIST_TWIST = 16,
  IKBONE_LTHIGH = 17,
  IKBONE_LCALF = 18,
  IKBONE_LFOOT = 19,
  IKBONE_RTHIGH = 20,
  IKBONE_RCALF = 21,
  IKBONE_RFOOT = 22,
  IKBONE_RWEAPON = 23,
  IKBONE_COUNT = 24,
};

typedef enum _TAG_UNNAMED_118
{
  CellWidth = 64,
} TAG_UNNAMED_118, *PTAG_UNNAMED_118;

struct mover_positions_t
{
  /* 0x0000 */ float decelTime;
  /* 0x0004 */ float speed;
  /* 0x0008 */ float midTime;
  /* 0x000c */ union vec3_t pos1;
  /* 0x0018 */ union vec3_t pos2;
  /* 0x0024 */ union vec3_t pos3;
}; /* size: 0x0030 */

struct mover_slidedata_t
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ union vec3_t velocity;
}; /* size: 0x0024 */

struct mover_ent_t
{
  union
  {
    /* 0x0000 */ struct mover_positions_t pos;
    /* 0x0000 */ struct mover_slidedata_t slide;
  }; /* size: 0x0030 */
  /* 0x0030 */ struct mover_positions_t angle;
}; /* size: 0x0060 */

enum rigid_body_constraint_upright::ps_cache_e
{
  PSC_FORWARD_AXIS = 0,
  NUM_PSC = 1,
};

typedef enum _TAG_UNNAMED_119
{
  MaxBlocks = 1024,
} TAG_UNNAMED_119, *PTAG_UNNAMED_119;

typedef enum _NVAPI_VIDEO_FEATURE_GET_FLAG
{
  NVAPI_VF_GET_COUNT = 0,
  NVAPI_VF_GET_DETAILS = 1,
} NVAPI_VIDEO_FEATURE_GET_FLAG, *PNVAPI_VIDEO_FEATURE_GET_FLAG;

enum WeapStickinessType
{
  WEAPSTICKINESS_NONE = 0,
  WEAPSTICKINESS_ALL = 1,
  WEAPSTICKINESS_ALL_NO_SENTIENTS = 2,
  WEAPSTICKINESS_GROUND = 3,
  WEAPSTICKINESS_GROUND_WITH_YAW = 4,
  WEAPSTICKINESS_FLESH = 5,
  WEAPSTICKINESS_COUNT = 6,
};

typedef enum _TAG_UNNAMED_120
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_120, *PTAG_UNNAMED_120;

enum ComDevhostCommandAI
{
  COM_DEVHOST_AI_TIMESTAMP = 0,
  COM_DEVHOST_AI_ENT_NUM = 1,
  COM_DEVHOST_AI_SCRIPT_KEYS = 2,
  COM_DEVHOST_AI_SCRIPT_DATA = 3,
  COM_DEVHOST_AI_INFO_REQ = 4,
};

struct CD3D11_DEPTH_STENCIL_VIEW_DESC
{
}; /* size: 0x0018 */

enum weapClass_t
{
  WEAPCLASS_RIFLE = 0,
  WEAPCLASS_MG = 1,
  WEAPCLASS_SMG = 2,
  WEAPCLASS_SPREAD = 3,
  WEAPCLASS_PISTOL = 4,
  WEAPCLASS_GRENADE = 5,
  WEAPCLASS_ROCKETLAUNCHER = 6,
  WEAPCLASS_TURRET = 7,
  WEAPCLASS_NON_PLAYER = 8,
  WEAPCLASS_GAS = 9,
  WEAPCLASS_ITEM = 10,
  WEAPCLASS_MELEE = 11,
  WEAPCLASS_KILLSTREAK_ALT_STORED_WEAPON = 12,
  WEAPCLASS_PISTOL_SPREAD = 13,
  WEAPCLASS_NUM = 14,
};

enum IKDebug
{
  IK_DEBUG_OFF = 0,
  IK_DEBUG_FOOT_TRACE = 1,
  IK_DEBUG_SHOW_SKELETON = 2,
  IK_DEBUG_COUNT = 3,
};

enum EVehicleRotors
{
  VEHROT_MAIN = 0,
  VEHROT_TAIL = 1,
  VEHROT_QUAD_FL = 0,
  VEHROT_QUAD_FR = 1,
  VEHROT_QUAD_RL = 2,
  VEHROT_QUAD_RR = 3,
  VEHROT_MAX = 4,
};

enum contact_point_info::ps_cache_e
{
  PSC_N = 0,
  PSC_F1 = 1,
  PSC_F2 = 2,
  NUM_PSC = 3,
};

enum eInfluencerShape
{
  INFLUENCER_SHAPE_SPHERE = 0,
  INFLUENCER_SHAPE_CYLINDER = 1,
  INFLUENCER_SHAPE_BOX = 2,
  MAX_INFLUENCER_SHAPE = 3,
};

class bdFacebookFriend
{
  /* 0x0000 */ long Padding_61[2];
  /* 0x0008 */ unsigned __int64 m_accountID;
  /* 0x0010 */ char m_accountName[128];
  /* 0x0090 */ unsigned __int64 m_userID;
  /* 0x0098 */ char m_userName[64];
  /* 0x00d8 */ unsigned char m_platformState[64];
  /* 0x0118 */ unsigned int m_platformStateLength;
}; /* size: 0x0120 */

enum PartyLeagueState
{
  LEAGUE_WAITING_FOR_STATS = 0,
  LEAGUE_FORMING_TEAMS = 1,
  LEAGUE_CANNOT_FORM_TEAMS = 2,
  LEAGUE_SENDING_OUTCOMES = 3,
  LEAGUE_READY_TO_GO = 4,
};

enum D3D10_MESSAGE_SEVERITY
{
  D3D10_MESSAGE_SEVERITY_CORRUPTION = 0,
  D3D10_MESSAGE_SEVERITY_ERROR = 1,
  D3D10_MESSAGE_SEVERITY_WARNING = 2,
  D3D10_MESSAGE_SEVERITY_INFO = 3,
};

struct IDXGIFactory
{
}; /* size: 0x0004 */

enum CombatMode
{
  AI_COMBAT_COVER = 0,
  AI_COMBAT_NO_COVER = 1,
  AI_COMBAT_COVER_ONLY = 2,
  AI_COMBAT_AMBUSH = 3,
  AI_COMBAT_AMBUSH_NODES_ONLY = 4,
  AI_COMBAT_EXPOSED_NODES_ONLY = 5,
  AI_COMBAT_ANY_EXPOSED_NODES_ONLY = 6,
  NUM_COMBAT_MODES = 7,
};

enum TraceHitType
{
  TRACE_HITTYPE_NONE = 0,
  TRACE_HITTYPE_ENTITY = 1,
  TRACE_HITTYPE_DYNENT_MODEL = 2,
  TRACE_HITTYPE_DYNENT_BRUSH = 3,
  TRACE_HITTYPE_GLASS = 4,
};

enum NV_DP_BPC
{
  NV_DP_BPC_DEFAULT = 0,
  NV_DP_BPC_6 = 1,
  NV_DP_BPC_8 = 2,
  NV_DP_BPC_10 = 3,
  NV_DP_BPC_12 = 4,
  NV_DP_BPC_16 = 5,
};

typedef enum _TAG_UNNAMED_121
{
  SCR_SYS_GAME = 1,
} TAG_UNNAMED_121, *PTAG_UNNAMED_121;

enum bdFileMetaData::bdVisibility
{
  BD_VISIBLE_PUBLIC = 0,
  BD_VISIBLE_PRIVATE = 1,
  BD_MAX_VISIBILITY_TYPE = 2,
};

enum TurretRotateState
{
  TURRET_ROTATE_STOPPED = 0,
  TURRET_ROTATE_STOPPING = 1,
  TURRET_ROTATE_MOVING = 2,
};

enum bdUPnPConfig::bdUPnPRunMode
{
  BD_UPNP_DO_PORT_MAPPING = 0,
  BD_UPNP_EXTERNAL_IP_ONLY = 1,
};

typedef enum _NVAPI_STEREO_INIT_ACTIVATION_FLAGS
{
  NVAPI_STEREO_INIT_ACTIVATION_IMMEDIATE = 0,
  NVAPI_STEREO_INIT_ACTIVATION_DELAYED = 1,
} NVAPI_STEREO_INIT_ACTIVATION_FLAGS, *PNVAPI_STEREO_INIT_ACTIVATION_FLAGS;

enum weapOverlayReticle_t
{
  WEAPOVERLAYRETICLE_NONE = 0,
  WEAPOVERLAYRETICLE_CROSSHAIR = 1,
  WEAPOVERLAYRETICLE_NUM = 2,
};

enum rigid_body_constraint_custom_orientation::ps_cache_e
{
  PSC_RESISTANCE_PITCH = 0,
  PSC_RESISTANCE_ROLL = 1,
  PSC_RESISTANCE_YAW = 2,
  PSC_UPRIGHT_PITCH = 3,
  PSC_UPRIGHT_ROLL = 4,
  NUM_PSC = 5,
};

enum OffhandSlot
{
  OFFHAND_SLOT_NONE = 0,
  OFFHAND_SLOT_LETHAL_GRENADE = 1,
  OFFHAND_SLOT_TACTICAL_GRENADE = 2,
  OFFHAND_SLOT_EQUIPMENT = 3,
  OFFHAND_SLOT_SPECIFIC_USE = 4,
  OFFHAND_SLOT_COUNT = 5,
};

typedef enum _TAG_UNNAMED_122
{
  FL_GODMODE = 1,
  FL_DEMI_GODMODE = 2,
  FL_NOTARGET = 4,
  FL_NO_KNOCKBACK = 8,
  FL_DROPPED_ITEM = 16,
  FL_NO_BOTS = 32,
  FL_NO_HUMANS = 64,
  FL_TOGGLE = 128,
  FL_SOFTACTIVATE = 256,
  FL_LOW_PRIORITY_USEABLE = 512,
  FL_NO_TACTICAL_INSERTION = 1024,
  FL_DYNAMICPATH = 2048,
  FL_SUPPORTS_LINKTO = 4096,
  FL_NO_AUTO_ANIM_UPDATE = 8192,
  FL_GRENADE_TOUCH_DAMAGE = 16384,
  FL_GRENADE_MARTYRDOM = 0xffff8000,
  FL_MISSILE_DESTABILIZED = 0x10000,
  FL_STABLE_MISSILES = 0x20000,
  FL_REPEAT_ANIM_UPDATE = 0x40000,
  FL_VEHICLE_TARGET = 0x80000,
  FL_GROUND_ENT = 0x100000,
  FL_CURSOR_HINT = 0x200000,
  FL_USE_TURRET = 0x400000,
  FL_MISSILE_ATTRACTOR = 0x800000,
  FL_TARGET = 0x1000000,
  FL_WEAPON_BEING_GRABBED = 0x2000000,
  FL_OBSTACLE = 0x4000000,
  FL_DODGE_LEFT = 0x8000000,
  FL_DODGE_RIGHT = 0x10000000,
  FL_BADPLACE_VOLUME = 0x20000000,
  FL_AUTO_BLOCKPATHS = 0x40000000,
  FL_MOVER_SLIDE = -2147483648,
} TAG_UNNAMED_122, *PTAG_UNNAMED_122;

enum bdLobbyConnection::Status
{
  BD_NOT_CONNECTED = 0,
  BD_CONNECTING = 1,
  BD_CONNECTED = 2,
  BD_DISCONNECTING = 3,
  BD_DISCONNECTED = 4,
};

enum rigid_body_constraint_distance::ps_cache_e
{
  PSC_MAX_DIST = 0,
  PSC_MIN_DIST = 1,
  PSC_DAMP = 2,
  NUM_PSC = 3,
};

typedef enum _TAG_UNNAMED_123
{
  CF_INT = 0,
  CF_FLOAT = 1,
} TAG_UNNAMED_123, *PTAG_UNNAMED_123;

enum bdNATTravClient::bdNATTravClientStatus
{
  BD_NAT_TRAV_UNINITIALIZED = 0,
  BD_NAT_TRAV_INITIALIZED = 1,
  BD_NAT_TRAV_RUNNING = 2,
};

class bdTwitterAccount
{
  /* 0x0000 */ long Padding_62[2];
  /* 0x0008 */ unsigned __int64 m_accountID;
  /* 0x0010 */ char m_accountName[128];
}; /* size: 0x0090 */

enum Dtp_SurfaceType
{
  DTP_SURF_TYPE_DEFAULT = 0,
  DTP_SURF_TYPE_METAL = 1,
  DTP_SURF_TYPE_CONCRETE = 2,
  DTP_SURF_TYPE_WOOD = 3,
  DTP_SURF_TYPE_SNOW = 4,
  DTP_SURF_TYPE_DIRT = 5,
  DTP_SURF_TYPE_GRAVEL = 6,
  DTP_SURF_TYPE_GRASS = 7,
  DTP_SURF_TYPE_MUD = 8,
  DTP_SURF_TYPE_COUNT = 9,
};

struct item_ent_t
{
  /* 0x0000 */ int ammoCount;
  /* 0x0004 */ int clipAmmoCount;
  /* 0x0008 */ union Weapon weapon;
}; /* size: 0x000c */

typedef enum _TAG_UNNAMED_124
{
  FLAG_TEMP_ALLOCATION = 1,
  FLAG_AABB_LOC_VALID = 2,
  FLAG_GEOM_ID_VALID = 4,
  FLAG_XFORM_VALID = 8,
  FLAG_CONTENTS_VALID = 16,
} TAG_UNNAMED_124, *PTAG_UNNAMED_124;

enum weaponIconRatioType_t
{
  WEAPON_ICON_RATIO_1TO1 = 0,
  WEAPON_ICON_RATIO_2TO1 = 1,
  WEAPON_ICON_RATIO_4TO1 = 2,
  WEAPON_ICON_RATIO_COUNT = 3,
};

typedef enum _NV_StereoRegistryID
{
  NVAPI_CONVERGENCE_ID = 0,
  NVAPI_FRUSTUM_ADJUST_MODE_ID = 1,
} NV_StereoRegistryID, *PNV_StereoRegistryID;

enum AI_MOVE_MODE
{
  AI_MOVE_DEFAULT = -1,
  AI_MOVE_STOP = 0,
  AI_MOVE_STOP_SOON = 1,
  AI_MOVE_WALK = 2,
  AI_MOVE_RUN = 3,
  NUM_AI_MOVE_MODES = 4,
};

typedef enum _TAG_UNNAMED_125
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_125, *PTAG_UNNAMED_125;

enum VehicleDriveBySoundType
{
  VEH_DRIVE_BY_PRIMARY = 0,
  VEH_DRIVE_BY_SECONDARY = 1,
  NUM_VEH_DRIVE_BY_TYPES = 2,
};

enum AI_STAIRS_STATE
{
  AI_STAIRS_NONE = 0,
  AI_STAIRS_UP = 1,
  AI_STAIRS_DOWN = 2,
  NUM_STAIRS_STATES = 3,
};

typedef enum _TAG_UNNAMED_126
{
  WEAP_ANIM_CAMERA_START = 73,
  WEAP_ANIM_CAMERA_END = 77,
} TAG_UNNAMED_126, *PTAG_UNNAMED_126;

struct cStaticModelWritable
{
  /* 0x0000 */ unsigned short nextModelInWorldSector;
}; /* size: 0x0002 */

enum hitLocation_t
{
  HITLOC_NONE = 0,
  HITLOC_HELMET = 1,
  HITLOC_HEAD = 2,
  HITLOC_NECK = 3,
  HITLOC_TORSO_UPR = 4,
  HITLOC_TORSO_MID = 5,
  HITLOC_TORSO_LWR = 6,
  HITLOC_R_ARM_UPR = 7,
  HITLOC_L_ARM_UPR = 8,
  HITLOC_R_ARM_LWR = 9,
  HITLOC_L_ARM_LWR = 10,
  HITLOC_R_HAND = 11,
  HITLOC_L_HAND = 12,
  HITLOC_R_LEG_UPR = 13,
  HITLOC_L_LEG_UPR = 14,
  HITLOC_R_LEG_LWR = 15,
  HITLOC_L_LEG_LWR = 16,
  HITLOC_R_FOOT = 17,
  HITLOC_L_FOOT = 18,
  HITLOC_GUN = 19,
  HITLOC_SHIELD = 20,
  HITLOC_NUM = 21,
};

enum weapClipType_t
{
  WEAPON_CLIPTYPE_BOTTOM = 0,
  WEAPON_CLIPTYPE_TOP = 1,
  WEAPON_CLIPTYPE_LEFT = 2,
  WEAPON_CLIPTYPE_DP28 = 3,
  WEAPON_CLIPTYPE_PTRS = 4,
  WEAPON_CLIPTYPE_LMG = 5,
  WEAPON_CLIPTYPECOUNT = 6,
};

typedef enum _TAG_UNNAMED_127
{
  ALLOCATOR_MEMORY_SIZE = 16384,
} TAG_UNNAMED_127, *PTAG_UNNAMED_127;

enum rankTierTableColumns_t
{
  ZM_RANKTABLE_TIER_ID = 0,
  ZM_RANKTABLE_TIER_TIMEPLAYEDLIMIT = 1,
  ZM_RANKTABLE_TIER_SKILLLIMIT0 = 2,
  ZM_RANKTABLE_COUNT = 3,
};

struct PartyStatePacket_s
{
  /* 0x0000 */ int sequenceNumber;
  /* 0x0004 */ int totalSize;
  /* 0x0008 */ int size;
  /* 0x000c */ int offset;
}; /* size: 0x0010 */

enum HELICOPTER_STAGES
{
  HELICOPTER_ONFIRE = 0,
  HELICOPTER_HEAVYSMOKE = 1,
  HELICOPTER_SMOKING = 2,
  HELICOPTER_FULLHEALTH = 3,
  NUM_HELICOPTERSTAGES = 4,
};

enum VehicleSound
{
  VEH_TURRET_SPIN_SND = 0,
  VEH_TURRET_STOP_SND = 1,
  NUM_VEHICLE_SNDS = 2,
};

enum ai_state_transition_t
{
  AIS_TRANSITION_CANONICAL = -1,
  AIS_TRANSITION_NONE = 0,
  AIS_TRANSITION_SET = 1,
  AIS_TRANSITION_PUSH = 2,
  AIS_TRANSITION_POP = 3,
};

struct BoneOrientation
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ int boneFlags;
  /* 0x0010 */ union vec4_t orientation;
}; /* size: 0x0020 */

enum ComDevhostSystem
{
  COM_DEVHOST_SYSTEM_DEVHOST = 0,
  COM_DEVHOST_SYSTEM_CONSOLE = 1,
  COM_DEVHOST_SYSTEM_DVAR = 2,
  COM_DEVHOST_SYSTEM_SOUND = 3,
  COM_DEVHOST_SYSTEM_SOUND_COMMAND = 4,
  COM_DEVHOST_SYSTEM_FX = 5,
  COM_DEVHOST_SYSTEM_XANIM_SERVER = 6,
  COM_DEVHOST_SYSTEM_XANIM_NETWORK = 7,
  COM_DEVHOST_SYSTEM_XANIM_CLIENT = 8,
  COM_DEVHOST_SYSTEM_AI_GENERAL = 9,
  COM_DEVHOST_SYSTEM_AI_ENT_INFO = 10,
  COM_DEVHOST_SYSTEM_AI_ANIM_SCRIPT = 11,
  COM_DEVHOST_SYSTEM_AI_CODE_STATE = 12,
  COM_DEVHOST_SYSTEM_COUNT = 13,
  COM_DEVHOST_SYSTEM_INVALID = -1,
};

typedef enum _NVAPI_VENTURA_DEVICE
{
  NVAPI_VENTURA_DEVICE_SYSTEM = 0,
  NVAPI_VENTURA_DEVICE_CPU_0 = 1,
  NVAPI_VENTURA_DEVICE_GPU_0 = 2,
} NVAPI_VENTURA_DEVICE, *PNVAPI_VENTURA_DEVICE;

typedef enum _TAG_UNNAMED_128
{
  k_iSteamMatchmakingCallbacks = 500,
} TAG_UNNAMED_128, *PTAG_UNNAMED_128;

enum bdNATTypeDiscoveryClient::bdNATTypeDiscoveryClientState
{
  BD_NTDCS_UNINITIALIZED = 0,
  BD_NTDCS_RUN_TEST_1 = 1,
  BD_NTDCS_RUN_TEST_2 = 2,
  BD_NTDCS_RUN_TEST_3 = 3,
  BD_NTDCS_FINI = 4,
  BD_NTDCS_ERROR = 5,
};

typedef enum _TAG_UNNAMED_129
{
  _Multi = 0,
} TAG_UNNAMED_129, *PTAG_UNNAMED_129;

typedef enum _TAG_UNNAMED_130
{
  k_iSteamNetworkingCallbacks = 1200,
} TAG_UNNAMED_130, *PTAG_UNNAMED_130;

enum WeapRotateType
{
  WEAPROTATE_GRENADE_ROTATE = 0,
  WEAPROTATE_BLADE_ROTATE = 1,
  WEAPROTATE_CYLINDER_ROTATE = 2,
  WEAPROTATE_COUNT = 3,
};

struct D3D11_VIEWPORT
{
  /* 0x0000 */ float TopLeftX;
  /* 0x0004 */ float TopLeftY;
  /* 0x0008 */ float Width;
  /* 0x000c */ float Height;
  /* 0x0010 */ float MinDepth;
  /* 0x0014 */ float MaxDepth;
}; /* size: 0x0018 */

enum bdSocketStatusCode
{
  BD_NET_SUCCESS = 1,
  BD_NET_CONNECTION_CLOSED = 0,
  BD_NET_ERROR = -1,
  BD_NET_WOULD_BLOCK = -2,
  BD_NET_SUBSYTEM_ERROR = -3,
  BD_NET_ADDRESS_IN_USE = -4,
  BD_NET_CONNECTION_RESET = -5,
  BD_NET_MSG_SIZE = -6,
  BD_NET_ADDRESS_INVALID = -7,
  BD_NET_BLOCKING_CALL_CANCELED = -8,
  BD_NET_NOT_BOUND = -9,
  BD_NET_INVALID_HANDLE = -10,
  BD_NET_NOT_CONNECTED = -11,
  BD_NET_CONNECTION_REFUSED = -12,
  BD_NET_HOST_UNREACH = -13,
};

typedef enum _TAG_UNNAMED_131
{
  k_iSteamScreenshotsCallbacks = 2300,
} TAG_UNNAMED_131, *PTAG_UNNAMED_131;

enum weapStance_t
{
  WEAPSTANCE_STAND = 0,
  WEAPSTANCE_DUCK = 1,
  WEAPSTANCE_PRONE = 2,
  WEAPSTANCE_NUM = 3,
};

enum PenetrateType
{
  PENETRATE_TYPE_NONE = 0,
  PENETRATE_TYPE_SMALL = 1,
  PENETRATE_TYPE_MEDIUM = 2,
  PENETRATE_TYPE_LARGE = 3,
  PENETRATE_TYPE_COUNT = 4,
};

typedef enum _TAG_UNNAMED_132
{
  k_cchMaxRichPresenceValueLength = 256,
} TAG_UNNAMED_132, *PTAG_UNNAMED_132;

enum bdKeyArchive::bdReservedCategory
{
  USERS = 0,
  TEAMS = 1,
};

typedef enum _TAG_UNNAMED_133
{
  MIN_OUTLINE_VERTS = 3,
  MAX_OUTLINE_VERTS = 16,
} TAG_UNNAMED_133, *PTAG_UNNAMED_133;

enum bdDTLSPacketTypes
{
  BD_DTLS_INIT = 1,
  BD_DTLS_INIT_ACK = 2,
  BD_DTLS_COOKIE_ECHO = 3,
  BD_DTLS_COOKIE_ACK = 4,
  BD_DTLS_ERROR = 5,
  BD_DTLS_DATA = 6,
};

typedef enum _TAG_UNNAMED_134
{
  R_CLIP_SIZE_360 = 0,
  R_CLIP_SIZE_480 = 1,
  R_CLIP_SIZE_720 = 2,
  R_CLIP_SIZE_1080 = 3,
  R_CLIP_SIZE_COUNT = 4,
} TAG_UNNAMED_134, *PTAG_UNNAMED_134;

typedef enum _TAG_UNNAMED_135
{
  MAX_GLASSES = 1000,
} TAG_UNNAMED_135, *PTAG_UNNAMED_135;

enum bdRSAKey::bdRSAKeyStatus
{
  BD_RSA_KEY_UNINITIALIZED = 0,
  BD_RSA_KEY_INITIALIZED = 1,
};

class bdDTLSError
{
  /* 0x0000 */ long Padding_63[3];
  /* 0x000c */ enum bdDTLSError::bdDTLSErrorType m_etype;
  /* 0x0010 */ class bdSecurityID m_secID;
}; /* size: 0x0018 */

enum bdSocketRouter::bdSocketRouterStatus
{
  BD_SOCKET_ROUTER_UNINITIALIZED = 0,
  BD_SOCKET_ROUTER_INITIALIZED = 1,
  BD_SOCKET_ROUTER_ERROR = 2,
};

enum GFX_SURFACE_FLAGS
{
  GFX_SURFACE_CASTS_SUN_SHADOW = 1,
  GFX_SURFACE_HAS_PRIMARY_LIGHT_CONFLICT = 2,
  GFX_SURFACE_IS_SKY = 4,
  GFX_SURFACE_NO_DRAW = 8,
  GFX_SURFACE_CASTS_SHADOW = 16,
  GFX_SURFACE_QUANTIZED = 32,
  GFX_SURFACE_NO_COLOR = 64,
};

enum MissileStage
{
  MISSILESTAGE_SOFTLAUNCH = 0,
  MISSILESTAGE_ASCENT = 1,
  MISSILESTAGE_DESCENT = 2,
};

enum file_image_flags_t
{
  IMG_FLAG_NOPICMIP = 1,
  IMG_FLAG_NOMIPMAPS = 2,
  IMG_FLAG_CUBEMAP = 4,
  IMG_FLAG_VOLMAP = 8,
  IMG_FLAG_STREAMING = 16,
  IMG_FLAG_CLAMP_U = 64,
  IMG_FLAG_CLAMP_V = 128,
  IMG_FLAG_FORCE_SYSTEM = 256,
  IMG_FLAG_DYNAMIC = 0x10000,
  IMG_FLAG_RENDER_TARGET = 0x20000,
  IMG_FLAG_MULTISAMPLE = 0x40000,
};

enum bdBandwidthTestType
{
  BD_UPLOAD_TEST = 0,
  BD_UPLOAD_DOWNLOAD_TEST = 1,
};

enum bdHTTPWrapperBase::bdStatus
{
  BD_EMPTY = 0,
  BD_PENDING = 1,
  BD_DONE = 2,
  BD_FAILED = 3,
  BD_TIMED_OUT = 4,
  BD_FAILED_TO_START = 5,
  BD_MAX_STATUS = 6,
};

struct QueueElement
{
  /* 0x0000 */ unsigned int beginIndex;
  /* 0x0004 */ unsigned int count;
}; /* size: 0x0008 */

enum demoInformationScreenTypes
{
  DEMO_INFORMATION_SCREEN_NONE = 0,
  DEMO_INFORMATION_SCREEN_FILM_START_SCREEN_FADE_IN = 1,
  DEMO_INFORMATION_SCREEN_FILM_START_SCREEN_FADE_OUT = 2,
  DEMO_INFORMATION_SCREEN_TRANSITION = 3,
  DEMO_INFORMATION_SCREEN_WAITING_FOR_DOWNLOAD = 4,
  DEMO_INFORMATION_SCREEN_COUNT = 5,
};

enum bdSequenceNumberStore::bdSequenuceStatus
{
  BD_SN_INVALID_SMALLER = -2,
  BD_SN_VALID_SMALLER = -1,
  BD_SN_INVALID_DUPLICATE = 0,
  BD_SN_VALID_LARGER = 1,
  BD_SN_VALID_MUCH_LARGER = 2,
};

enum bdStats::bdWriteType
{
  STAT_WRITE_REPLACE = 0,
  STAT_WRITE_ADD = 1,
  STAT_WRITE_MAX = 2,
  STAT_WRITE_MIN = 3,
  STAT_WRITE_REPLACE_WHEN_RATING_INCREASE = 4,
  STAT_WRITE_ADD_WHEN_RATING_INCREASE = 5,
  STAT_WRITE_MAX_WHEN_RATING_INCREASE = 6,
  STAT_WRITE_MIN_WHEN_RATING_INCREASE = 7,
};

enum netFieldTypes_t
{
  NET_FIELD_TYPE_ARCHIVED_ENTITY = 0,
  NET_FIELD_TYPE_ARCHIVED_ENTITY_STATE = 1,
  NET_FIELD_TYPE_CLIENT_STATE = 2,
  NET_FIELD_TYPE_ACTORSTATE = 3,
  NET_FIELD_TYPE_PLAYERSTATE = 4,
  NET_FIELD_TYPE_OBJECTIVE = 5,
  NET_FIELD_TYPE_HUDELEMS = 6,
  NET_FIELD_TYPE_MATCHSTATE = 7,
  NET_FIELD_TYPE_COUNT = 8,
};

enum bdUPnPDevice::bdUPnPDeviceState
{
  BD_UPNP_DEVICE_UNINITIALISED = 0,
  BD_UPNP_DEVICE_INITIALISED = 1,
  BD_UPNP_DEVICE_SENDING_DESCRIPTION_REQ = 2,
  BD_UPNP_DEVICE_GETTING_DESCRIPTION = 3,
  BD_UPNP_DEVICE_GOT_DESCRIPTION = 4,
  BD_UPNP_DEVICE_SENDING_IP_REQ = 5,
  BD_UPNP_DEVICE_DISCOVERING_IP = 6,
  BD_UPNP_DEVICE_DISCOVERED_IP = 7,
  BD_UPNP_DEVICE_SENDING_PORT_QUERY_REQ = 8,
  BD_UPNP_DEVICE_DISCOVERING_PORT_MAPPING = 9,
  BD_UPNP_DEVICE_DISCOVERED_PORT_MAPPING = 10,
  BD_UPNP_DEVICE_SENDING_MAPPING_REQ = 11,
  BD_UPNP_DEVICE_MAPPING_PORT = 12,
  BD_UPNP_DEVICE_MAPPED_PORT = 13,
  BD_UPNP_DEVICE_SENDING_UNMAPPING_REQ = 14,
  BD_UPNP_DEVICE_UNMAPPING_PORT = 15,
  BD_UPNP_DEVICE_UNMAPPED_PORT = 16,
  BD_UPNP_DEVICE_SHUTTING_DOWN = 17,
  BD_UPNP_DEVICE_FINISHED = 18,
  BD_UPNP_DEVICE_FAILED = 19,
};

union GfxColor
{
  union
  {
    /* 0x0000 */ unsigned int packed;
    /* 0x0000 */ unsigned char array[4];
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

enum bdIPDiscoveryClient::bdIPDiscoveryClientStatus
{
  BD_IP_DISC_UNINITIALIZED = 0,
  BD_IP_DISC_RUNNING = 1,
  BD_IP_DISC_SUCCESS = 2,
  BD_IP_DISC_FAIL = 3,
  BD_IP_DISC_ERROR = 4,
};

enum eDemoSpawnLogDataType
{
  DEMOSPAWNLOG_FIRST = 0,
  DEMOSPAWNLOG_BAD_SPAWN = 1,
  DEMOSPAWNLOG_INFLUENCER_PRESET = 2,
  DEMOSPAWNLOG_INFLUENCER_INSTANCE = 3,
  DEMOSPAWNLOG_SPAWN_POINT = 4,
  DEMOSPAWNLOG_REJECTED_POINT = 5,
  DEMOSPAWNLOG_COUNT = 6,
};

enum PerLocalClientAllocFlags
{
  CLIENT_ALLOC_FLAG_CLIENT = 0,
  CLIENT_ALLOC_FLAG_SERVER = 1,
  CLIENT_ALLOC_FLAG_WORST_CASE = 2,
  CLIENT_ALLOC_FLAG_DRY_RUN = 4,
  CLIENT_ALLOC_FLAG_FULL = 3,
};

enum QueryId
{
  ENUM_SEARCH_SESSIONS_INVALID = 0,
  ENUM_SEARCH_SESSIONS_BY_PLAYLIST_VERSION = 1,
  ENUM_SEARCH_SESSIONS = 2,
  ENUM_SEARCH_SESSION_BY_GAME_SECURITY_ID = 3,
};

enum std::_Iosb<int>::_Seekdir
{
  _Seekmask = 3,
};

enum DeltaFlags
{
  DELTA_FLAGS_NONE = 1,
  DELTA_FLAGS_FORCE = 0,
};

enum ai_stance_e
{
  STANCE_BAD = 0,
  STANCE_STAND = 1,
  STANCE_CROUCH = 2,
  STANCE_PRONE = 4,
  STANCE_ANY = 7,
};

class bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass>
{
  /* 0x0000 */ unsigned int m_size;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ float m_loadFactor;
  /* 0x000c */ unsigned int m_threshold;
  /* 0x0010 */ class bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass>::Node** m_map;
  /* 0x0014 */ class bdHashingClass m_hashClass;
}; /* size: 0x0018 */

enum hudelem_update_t
{
  HUDELEM_UPDATE_ARCHIVAL = 1,
  HUDELEM_UPDATE_CURRENT = 2,
  HUDELEM_UPDATE_ARCHIVAL_AND_CURRENT = 3,
};

enum trackerFileCol_e
{
  TRACKER_CSV_COLNUM = 0,
  TRACKER_CSV_COLNAME = 1,
  TRACKER_CSV_COLTYPE = 2,
};

enum hintType_t
{
  HINT_NONE = 0,
  HINT_NOICON = 1,
  HINT_SEAT = 2,
  HINT_ACTIVATE = 3,
  HINT_HEALTH = 4,
  HINT_SPECTATOR = 5,
  HINT_TEAMPOT = 6,
  HINT_WEAPON = 7,
  HINT_NUM_HINTS = 8,
};

struct FxSpawnDefLooping
{
  /* 0x0000 */ int intervalMsec;
  /* 0x0004 */ int count;
}; /* size: 0x0008 */

struct FxIntRange
{
  /* 0x0000 */ int base;
  /* 0x0004 */ int amplitude;
}; /* size: 0x0008 */

struct FxSpawnDefOneShot
{
  /* 0x0000 */ struct FxIntRange count;
}; /* size: 0x0008 */

union FxSpawnDef
{
  union
  {
    /* 0x0000 */ struct FxSpawnDefLooping looping;
    /* 0x0000 */ struct FxSpawnDefOneShot oneShot;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct FxFloatRange
{
  /* 0x0000 */ float base;
  /* 0x0004 */ float amplitude;
}; /* size: 0x0008 */

struct FxElemAtlas
{
  /* 0x0000 */ unsigned char behavior;
  /* 0x0001 */ unsigned char index;
  /* 0x0002 */ unsigned char fps;
  /* 0x0003 */ unsigned char loopCount;
  /* 0x0004 */ unsigned char colIndexBits;
  /* 0x0005 */ unsigned char rowIndexBits;
  /* 0x0006 */ unsigned short entryCountAndIndexRange;
}; /* size: 0x0008 */

union FxEffectDefRef
{
  union
  {
    /* 0x0000 */ const struct FxEffectDef* handle;
    /* 0x0000 */ const char* name;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

union FxElemVisuals
{
  union
  {
    /* 0x0000 */ const void* anonymous;
    /* 0x0000 */ struct Material* material;
    /* 0x0000 */ struct XModel* model;
    /* 0x0000 */ union FxEffectDefRef effectDef;
    /* 0x0000 */ const char* soundName;
    /* 0x0000 */ struct GfxLightDef* lightDef;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

union FxElemDefVisuals
{
  union
  {
    /* 0x0000 */ struct FxElemMarkVisuals* markArray;
    /* 0x0000 */ union FxElemVisuals* array;
    /* 0x0000 */ union FxElemVisuals instance;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

union FxElemExtendedDefPtr
{
  union
  {
    /* 0x0000 */ struct FxTrailDef* localTrailDef;
    /* 0x0000 */ struct FxTrailDef* trailDef;
    /* 0x0000 */ struct FxSpotLightDef* localSpotLightDef;
    /* 0x0000 */ struct FxSpotLightDef* spotLightDef;
    /* 0x0000 */ void* unknownDef;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct FxBillboardTrim
{
  /* 0x0000 */ float topWidth;
  /* 0x0004 */ float bottomWidth;
}; /* size: 0x0008 */

union FxElemDefUnion
{
  union
  {
    /* 0x0000 */ struct FxBillboardTrim billboard;
    /* 0x0000 */ struct FxIntRange cloudDensityRange;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct FxElemSpawnSound
{
  /* 0x0000 */ const char* spawnSound;
}; /* size: 0x0004 */

struct FxElemDef
{
  /* 0x0000 */ int flags;
  /* 0x0004 */ union FxSpawnDef spawn;
  /* 0x000c */ struct FxFloatRange spawnRange;
  /* 0x0014 */ struct FxFloatRange fadeInRange;
  /* 0x001c */ struct FxFloatRange fadeOutRange;
  /* 0x0024 */ float spawnFrustumCullRadius;
  /* 0x0028 */ struct FxIntRange spawnDelayMsec;
  /* 0x0030 */ struct FxIntRange lifeSpanMsec;
  /* 0x0038 */ struct FxFloatRange spawnOrigin[3];
  /* 0x0050 */ struct FxFloatRange spawnOffsetRadius;
  /* 0x0058 */ struct FxFloatRange spawnOffsetHeight;
  /* 0x0060 */ struct FxFloatRange spawnAngles[3];
  /* 0x0078 */ struct FxFloatRange angularVelocity[3];
  /* 0x0090 */ struct FxFloatRange initialRotation;
  /* 0x0098 */ unsigned int rotationAxis;
  /* 0x009c */ struct FxFloatRange gravity;
  /* 0x00a4 */ struct FxFloatRange reflectionFactor;
  /* 0x00ac */ struct FxElemAtlas atlas;
  /* 0x00b4 */ float windInfluence;
  /* 0x00b8 */ unsigned char elemType;
  /* 0x00b9 */ unsigned char visualCount;
  /* 0x00ba */ unsigned char velIntervalCount;
  /* 0x00bb */ unsigned char visStateIntervalCount;
  /* 0x00bc */ const struct FxElemVelStateSample* velSamples;
  /* 0x00c0 */ const struct FxElemVisStateSample* visSamples;
  /* 0x00c4 */ union FxElemDefVisuals visuals;
  /* 0x00c8 */ union vec3_t collMins;
  /* 0x00d4 */ union vec3_t collMaxs;
  /* 0x00e0 */ union FxEffectDefRef effectOnImpact;
  /* 0x00e4 */ union FxEffectDefRef effectOnDeath;
  /* 0x00e8 */ union FxEffectDefRef effectEmitted;
  /* 0x00ec */ struct FxFloatRange emitDist;
  /* 0x00f4 */ struct FxFloatRange emitDistVariance;
  /* 0x00fc */ union FxEffectDefRef effectAttached;
  /* 0x0100 */ union FxElemExtendedDefPtr extended;
  /* 0x0104 */ unsigned char sortOrder;
  /* 0x0105 */ unsigned char lightingFrac;
  /* 0x0106 */ unsigned char unused[2];
  /* 0x0108 */ unsigned short alphaFadeTimeMsec;
  /* 0x010a */ unsigned short maxWindStrength;
  /* 0x010c */ unsigned short spawnIntervalAtMaxWind;
  /* 0x010e */ unsigned short lifespanAtMaxWind;
  /* 0x0110 */ union FxElemDefUnion u;
  /* 0x0118 */ struct FxElemSpawnSound spawnSound;
  /* 0x011c */ union vec2_t billboardPivot;
}; /* size: 0x0124 */

enum cgDrawTalkEnum
{
  CG_TALKER_NONE = 0,
  CG_TALKER_ALL = 1,
  CG_TALKER_FRIENDLY = 2,
  CG_TALKER_ENEMY = 3,
  CG_TALKER_COUNT = 4,
};

typedef enum _TAG_UNNAMED_136
{
  BLEND_WEIGHTS_PER_VERTEX = 5,
} TAG_UNNAMED_136, *PTAG_UNNAMED_136;

typedef enum _TAG_UNNAMED_137
{
  DB_ZONE_PRE_GFX = 1,
  DB_ZONE_PATCH = 2,
  DB_ZONE_PATCH_LOC = 4,
  DB_ZONE_CODE = 8,
  DB_ZONE_CODE_LOC = 16,
  DB_ZONE_CODE_RES = 32,
  DB_ZONE_DEV = 64,
  DB_ZONE_COMMON = 128,
  DB_ZONE_COMMON_PATCH = 256,
  DB_ZONE_COMMON_LOC = 512,
  DB_ZONE_LOAD = 1024,
  DB_ZONE_SHARED_PATCH = 2048,
  DB_ZONE_SHARED = 4096,
  DB_ZONE_SHARED_LOC = 8192,
  DB_ZONE_LEVEL_PATCH = 16384,
  DB_ZONE_LEVEL = 0xffff8000,
  DB_ZONE_LEVEL_LOC = 0x10000,
  DB_ZONE_LEVELOVERLAY_PATCH = 0x20000,
  DB_ZONE_LEVELOVERLAY = 0x40000,
  DB_ZONE_LEVELOVERLAY_LOC = 0x80000,
  DB_ZONE_WEAPONS = 0x100000,
  DB_ZONE_GUMP = 0x200000,
  DB_ZONE_LOW_MARKER = 0x400000,
  DB_ZONE_MYCHANGES = 0x1000000,
  DB_ZONE_FRONTEND = 0x2000000,
  DB_ZONE_FRONTEND_LOC = 0x4000000,
  DB_ZONE_PATCH_UI = 0x8000000,
  DB_ZONE_PATCH_UI_LOC = 0x10000000,
  DB_ZONE_FFOTD = 0x20000000,
  DB_ZONE_HIGH_MARKER = 0x40000000,
  DB_FLAG_STRICTFREE = -2147483648,
} TAG_UNNAMED_137, *PTAG_UNNAMED_137;

typedef enum _TAG_UNNAMED_138
{
  HUD_OBJ_SAME = 0,
  HUD_OBJ_NUM = 1,
} TAG_UNNAMED_138, *PTAG_UNNAMED_138;

struct Bounds
{
  /* 0x0000 */ union vec3_t midPoint;
  /* 0x000c */ union vec3_t halfSize;
}; /* size: 0x0018 */

enum profile_setting
{
  PROFILE_SETTING_INVALID = -1,
  PROFILE_QUICK_LAUNCH_MODE = 0,
  PROFILE_GPAD_RUMBLE = 1,
  PROFILE_SESSION_REJOIN = 2,
  PROFILE_INVERT_PITCH = 3,
  PROFILE_VIEW_SENSITIVITY = 4,
  PROFILE_AUTO_AIM = 5,
  PROFILE_TEAM_INDICATOR = 6,
  PROFILE_UI_CAMO_UNLOCKS = 7,
  PROFILE_UI_ATTACH_UNLOCKS = 8,
  PROFILE_MATURE_CONTENT = 9,
  PROFILE_SHOW_BLOOD = 10,
  PROFILE_GPAD_BUTTONS_CONFIG = 11,
  PROFILE_GPAD_STICKS_CONFIG = 12,
  PROFILE_GPAD_BUTTON_L_STICK_DEFLECT = 13,
  PROFILE_GPAD_BUTTON_R_STICK_DEFLECT = 14,
  PROFILE_GAMMA = 15,
  PROFILE_SND_MENU_VOICE = 16,
  PROFILE_SND_MENU_MUSIC = 17,
  PROFILE_SND_MENU_SFX = 18,
  PROFILE_SND_MENU_MASTER = 19,
  PROFILE_SND_MENU_CINEMATIC = 20,
  PROFILE_SND_MENU_HEARING_IMPAIRED = 21,
  PROFILE_SND_MENU_PRESETS = 22,
  PROFILE_SND_MENU_SPEAKER_SETUP = 23,
  PROFILE_SPEAKER_LEFT_FRONT = 24,
  PROFILE_SPEAKER_LEFT = 25,
  PROFILE_SPEAKER_CENTER = 26,
  PROFILE_SPEAKER_RIGHT_FRONT = 27,
  PROFILE_SPEAKER_RIGHT = 28,
  PROFILE_SPEAKER_LEFT_SURROUND = 29,
  PROFILE_SPEAKER_LEFT_SURROUND_BACK = 30,
  PROFILE_SPEAKER_RIGHT_SURROUND = 31,
  PROFILE_SPEAKER_RIGHT_SURROUND_BACK = 32,
  PROFILE_SPEAKER_LFE = 33,
  PROFILE_PARTY_PRIVACY_STATUS = 34,
  PROFILE_GEOGRAPHICAL_MATCHMAKING = 35,
  PROFILE_SAFE_AREA_HORIZONTAL = 36,
  PROFILE_SAFE_AREA_VERTICAL = 37,
  PROFILE_DEMO_CONTROLLER_CONFIG = 38,
  PROFILE_DRAW_CROSSHAIR_3D = 39,
  PROFILE_START_IN_3D = 40,
  PROFILE_MOUSE_SENSITIVITY = 41,
  PROFILE_ANISO_MIN = 42,
  PROFILE_FLIPPED_CONTROL_CONFIG = 43,
  PROFILE_COMMON_INITIALIZED = 44,
  PROFILE_SND_SHOUTCAST_VOIP = 45,
  PROFILE_SND_SHOUTCAST_GAME = 46,
  PROFILE_COLOR_BLIND_ASSIST = 47,
  PROFILE_INVITE_XUID_DECIMAL = 48,
  PROFILE_SND_VOICECHAT_VOLUME = 49,
  PROFILE_SND_VOICECHAT_RECORD_LEVEL = 50,
  PROFILE_VER43_DEFAULTS = 51,
  PROFILE_EXE_SETTINGS_START = 52,
  PROFILE_FIRST_TIME = 52,
  PROFILE_CHEAT_COUNT = 53,
  PROFILE_EMAIL_ADDRESS = 54,
  PROFILE_SHOW_SUBTITLES = 55,
  PROFILE_LAST_SAVE_GAME = 56,
  PROFILE_GAMESKILL = 57,
  PROFILE_MISSION_HIGHEST_DIFFICULTY = 58,
  PROFILE_MISSION = 59,
  PROFILE_TAKE_COVER_WARNINGS = 60,
  PROFILE_COLLECTIBLES = 61,
  PROFILE_SKILL_SET = 62,
  PROFILE_MISSION_GLOBALS = 63,
  PROFILE_TARGET_ASSIST = 64,
  PROFILE_SPECTATE_THIRD_PERSON = 65,
  PROFILE_MOTD = 66,
  PROFILE_PLAYLIST_LEAGUEMATCH = 67,
  PROFILE_PLAYLIST_WAGERMATCH = 68,
  PROFILE_PLAYLIST_PLAYERMATCH = 69,
  PROFILE_PLAYLIST_SOLOMATCH = 70,
  PROFILE_CLASS_LOADOUTS = 71,
  PROFILE_SELECTED_CLASS_LOADOUT_SYSTEMLINK = 72,
  PROFILE_SELECTED_CLASS_LOADOUT_ONLINE = 73,
  PROFILE_SELECTED_CLASS_LOADOUT_LEAGUE = 74,
  PROFILE_EXE_INITIALIZED = 75,
  PROFILE_LOADOUT_INITIALIZED = 76,
  PROFILE_PARTY_MAX_PLAYERS = 77,
  PROFILE_MAP = 78,
  PROFILE_GAMETYPE = 79,
  PROFILE_MAP_ZM = 80,
  PROFILE_GAMETYPE_ZM = 81,
  PROFILE_UNLOCK_CRUMBS_ZM = 82,
  PROFILE_EMBLEM = 83,
  PROFILE_FIRST_TIME_MISSION_SELECT = 84,
  PROFILE_SHOUTCASTER_SCORE_PANEL = 85,
  PROFILE_SHOUTCASTER_NAME_PLATE = 86,
  PROFILE_SHOUTCASTER_PERKS = 87,
  PROFILE_SHOUTCASTER_INVENTORY = 88,
  PROFILE_SHOUTCASTER_SCORESTREAKS = 89,
  PROFILE_SHOUTCASTER_SCORESTREAKS_NOTIFICATION = 90,
  PROFILE_SHOUTCASTER_MINIMAP = 91,
  PROFILE_SHOUTCASTER_KILLFEED = 92,
  PROFILE_SHOUTCASTER_CALLOUTCARDS = 93,
  PROFILE_SHOUTCASTER_TEAM_SCORE = 94,
  PROFILE_SHOUTCASTER_PLAYER_NOTIFICATIONS = 95,
  PROFILE_SHOUTCASTER_VOIP_DOCK = 96,
  PROFILE_SHOUTCASTER_MAP_ICON_COLORS = 97,
  PROFILE_FIRST_TIME_PRIVATEGAME_HOST_ZM = 98,
  PROFILE_ELITE_EMBLEM_UPLOAD_REQUESTED = 99,
  PROFILE_ELITE_WELCOME_POPUP_SHOWN = 100,
  PROFILE_DEMO_SHOUTCASTER_NAME_PLATE = 101,
  PROFILE_ELITE_POSTMATCHRECORD_LAST_UPLOAD_TIME = 102,
  PROFILE_ELITE_REGISTRATION_POPUP_LAST_SHOWN_TIME = 103,
  PROFILE_ELITE_REGISTRATION_POPUP_TIMES_SHOWN = 104,
  PROFILE_ELITE_REGISTRATION_SIGNIN_COUNTER = 105,
  PROFILE_SHOUTCASTER_MAP_IN_PLAYER_COLUMN = 106,
  PROFILE_PREFERRED_PING = 107,
  PROFILE_SETTINGS_COUNT = 108,
};

typedef enum _TAG_UNNAMED_139
{
  STATSBACKUP_NOREADWRITE = -1,
  STATSBACKUP_READ_NOWRITE = 0,
} TAG_UNNAMED_139, *PTAG_UNNAMED_139;

typedef enum _TAG_UNNAMED_140
{
  PMOVE_HANDLER_CLIENT = 0,
  PMOVE_HANDLER_SERVER = 1,
  PMOVE_HANDLER_COUNT = 2,
} TAG_UNNAMED_140, *PTAG_UNNAMED_140;

enum rope_constraint_e
{
  ROPE_PAIR_CONSTRAINT = 0,
  ROPE_WORLD_CONSTRAINT = 1,
  ROPE_DENTITY_CONSTRAINT = 2,
  ROPE_CENTITY_CONSTRAINT = 3,
};

enum TexAllocFlags
{
  TEXALLOC_STREAM = 1,
  TEXALLOC_HIGHMEM = 2,
};

typedef enum _TAG_UNNAMED_141
{
  k_cchStatNameMax = 128,
} TAG_UNNAMED_141, *PTAG_UNNAMED_141;

enum ai_state_t
{
  AIS_INVALID = 0,
  AIS_KEEPCURRENT = 0,
  AIS_EXPOSED = 1,
  AIS_TURRET = 2,
  AIS_GRENADE_RESPONSE = 3,
  AIS_BADPLACE_FLEE = 4,
  AIS_COVERARRIVAL = 5,
  AIS_DEATH = 6,
  AIS_DEFAULT = 1,
  AIS_SETABLE_FIRST = 1,
  AIS_SETABLE_LAST = 6,
  AIS_PAIN = 7,
  AIS_REACT = 8,
  AIS_SCRIPTEDANIM = 9,
  AIS_CUSTOMANIM = 10,
  AIS_NEGOTIATION = 11,
  AIS_PUSHABLE_FIRST = 7,
  AIS_PUSHABLE_LAST = 11,
  AIS_COUNT = 12,
};

class bdQoSReplyPacket
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char m_type;
      /* 0x0001 */ char Padding_64[3];
      /* 0x0004 */ unsigned int m_id;
      /* 0x0008 */ unsigned __int64 m_timestamp;
      /* 0x0010 */ BOOL m_enabledMode;
      /* 0x0011 */ char Padding_65[3];
      /* 0x0014 */ unsigned char* m_data;
      /* 0x0018 */ unsigned int m_dataSize;
    }; /* size: 0x0016 */
    /* 0x0000 */ unsigned int headerSize;
  }; /* size: 0x0016 */
  /* 0x0016 */ char Padding_66[6];
  /* 0x001c */ unsigned int m_serializedSize;
}; /* size: 0x0020 */

enum cgScoreboardSort_e
{
  SCOREBOARD_SORT_DEFAULT = 0,
  SCOREBOARD_SORT_SCORE = 0,
  SCOREBOARD_SORT_ALPHABETICAL = 1,
  SCOREBOARD_SORT_CLIENTNUM = 2,
};

enum ELobbyComparison
{
  k_ELobbyComparisonEqualToOrLessThan = -2,
  k_ELobbyComparisonLessThan = -1,
  k_ELobbyComparisonEqual = 0,
  k_ELobbyComparisonGreaterThan = 1,
  k_ELobbyComparisonEqualToOrGreaterThan = 2,
  k_ELobbyComparisonNotEqual = 3,
};

typedef enum _TAG_UNNAMED_142
{
  FX_ELEM_TYPE_SPRITE_BILLBOARD = 0,
  FX_ELEM_TYPE_SPRITE_ORIENTED = 1,
  FX_ELEM_TYPE_SPRITE_ROTATED = 2,
  FX_ELEM_TYPE_TAIL = 3,
  FX_ELEM_TYPE_LINE = 4,
  FX_ELEM_TYPE_TRAIL = 5,
  FX_ELEM_TYPE_CLOUD = 6,
  FX_ELEM_TYPE_MODEL = 7,
  FX_ELEM_TYPE_OMNI_LIGHT = 8,
  FX_ELEM_TYPE_SPOT_LIGHT = 9,
  FX_ELEM_TYPE_SOUND = 10,
  FX_ELEM_TYPE_DECAL = 11,
  FX_ELEM_TYPE_RUNNER = 12,
  FX_ELEM_TYPE_COUNT = 13,
  FX_ELEM_TYPE_LAST_SPRITE = 5,
  FX_ELEM_TYPE_LAST_DRAWN = 9,
} TAG_UNNAMED_142, *PTAG_UNNAMED_142;

enum PacketEntityType
{
  ANALYZE_DATATYPE_ENTITYTYPE_GENERALENTITY = 0,
  ANALYZE_DATATYPE_ENTITYTYPE_PLAYERENTITY = 1,
  ANALYZE_DATATYPE_ENTITYTYPE_PLAYERCORPSEENTITY = 2,
  ANALYZE_DATATYPE_ENTITYTYPE_ITEMENTITY = 3,
  ANALYZE_DATATYPE_ENTITYTYPE_MISSILEENTITY = 4,
  ANALYZE_DATATYPE_ENTITYTYPE_INVISIBLEENTITY = 5,
  ANALYZE_DATATYPE_ENTITYTYPE_SCRIPTMOVERENTITY = 6,
  ANALYZE_DATATYPE_ENTITYTYPE_SOUNDBLENDENTITY = 7,
  ANALYZE_DATATYPE_ENTITYTYPE_FXENTITY = 8,
  ANALYZE_DATATYPE_ENTITYTYPE_LOOPFXENTITY = 9,
  ANALYZE_DATATYPE_ENTITYTYPE_PRIMARYLIGHTENTITY = 10,
  ANALYZE_DATATYPE_ENTITYTYPE_TURRETENTITY = 11,
  ANALYZE_DATATYPE_ENTITYTYPE_HELICOPTER = 12,
  ANALYZE_DATATYPE_ENTITYTYPE_PLANE = 13,
  ANALYZE_DATATYPE_ENTITYTYPE_VEHICLE = 14,
  ANALYZE_DATATYPE_ENTITYTYPE_VEHICLE_CORPSE = 15,
  ANALYZE_DATATYPE_ENTITYTYPE_ACTOR = 16,
  ANALYZE_DATATYPE_ENTITYTYPE_ACTOR_SPAWNER = 17,
  ANALYZE_DATATYPE_ENTITYTYPE_ACTOR_CORPSE = 18,
  ANALYZE_DATATYPE_ENTITYTYPE_STREAMER_HINT = 19,
  ANALYZE_DATATYPE_ENTITYTYPE_ZBARRIER = 20,
  ANALYZE_DATATYPE_ENTITYTYPE_TEMPENTITY = 21,
  ANALYZE_DATATYPE_ENTITYTYPE_ARCHIVEDENTITY = 22,
  ANALYZE_DATATYPE_ENTITYTYPE_MATCHSTATE = 23,
  ANALYZE_DATATYPE_ENTITYTYPE_CLIENTSTATE = 24,
  ANALYZE_DATATYPE_ENTITYTYPE_PLAYERSTATE = 25,
  ANALYZE_DATATYPE_ENTITYTYPE_ACTORSTATE = 26,
  ANALYZE_DATATYPE_ENTITYTYPE_HUDELEM = 27,
  ANALYZE_DATATYPE_ENTITYTYPE_BASELINE = 28,
  ANALYZE_DATATYPE_ENTITYTYPE_GLASS = 29,
  ANALYZE_DATATYPE_ENTITYTYPE_PERF = 30,
  ANALYZE_DATATYPE_ENTITYTYPE_SERVERCMD = 31,
  ANALYZE_DATATYPE_ENTITYTYPE_VOIP_UPLOAD = 32,
  ANALYZE_DATATYPE_ENTITYTYPE_VOIP_DOWNLOAD = 33,
  ANALYZE_DATATYPE_ENTITYTYPE_DEMO_UPLOAD = 34,
  ANALYZE_DATATYPE_ENTITYTYPE_CLIENT_UPLOAD = 35,
  ANALYZE_DATATYPE_ENTITYTYPE_CLIENT_PING = 36,
  ANALYZE_DATATYPE_ENTITYTYPE_CLIENT_PACKETS = 37,
  ANALYZE_DATATYPE_ENTITYTYPE_COUNT = 38,
};

enum ddlPrimitiveTypes_e
{
  DDL_INVALID_TYPE = -1,
  DDL_BYTE_TYPE = 0,
  DDL_SHORT_TYPE = 1,
  DDL_UINT_TYPE = 2,
  DDL_INT_TYPE = 3,
  DDL_INT64_TYPE = 4,
  DDL_FLOAT_TYPE = 5,
  DDL_FIXEDPOINT_TYPE = 6,
  DDL_STRING_TYPE = 7,
  DDL_STRUCT_TYPE = 8,
  DDL_ENUM_TYPE = 9,
};

enum nodeType
{
  NODE_BADNODE = 0,
  NODE_PATHNODE = 1,
  NODE_COVER_STAND = 2,
  NODE_COVER_CROUCH = 3,
  NODE_COVER_CROUCH_WINDOW = 4,
  NODE_COVER_PRONE = 5,
  NODE_COVER_RIGHT = 6,
  NODE_COVER_LEFT = 7,
  NODE_COVER_PILLAR = 8,
  NODE_AMBUSH = 9,
  NODE_EXPOSED = 10,
  NODE_CONCEALMENT_STAND = 11,
  NODE_CONCEALMENT_CROUCH = 12,
  NODE_CONCEALMENT_PRONE = 13,
  NODE_REACQUIRE = 14,
  NODE_BALCONY = 15,
  NODE_SCRIPTED = 16,
  NODE_NEGOTIATION_BEGIN = 17,
  NODE_NEGOTIATION_END = 18,
  NODE_TURRET = 19,
  NODE_GUARD = 20,
  NODE_NUMTYPES = 21,
  NODE_DONTLINK = 21,
};

class bdGroupCount
{
  /* 0x0000 */ long Padding_67;
  /* 0x0004 */ unsigned int m_groupID;
  /* 0x0008 */ unsigned int m_groupCount;
}; /* size: 0x000c */

enum entityType_t
{
  ET_GENERAL = 0,
  ET_PLAYER = 1,
  ET_PLAYER_CORPSE = 2,
  ET_ITEM = 3,
  ET_MISSILE = 4,
  ET_INVISIBLE = 5,
  ET_SCRIPTMOVER = 6,
  ET_SOUND_BLEND = 7,
  ET_FX = 8,
  ET_LOOP_FX = 9,
  ET_PRIMARY_LIGHT = 10,
  ET_TURRET = 11,
  ET_HELICOPTER = 12,
  ET_PLANE = 13,
  ET_VEHICLE = 14,
  ET_VEHICLE_CORPSE = 15,
  ET_ACTOR = 16,
  ET_ACTOR_SPAWNER = 17,
  ET_ACTOR_CORPSE = 18,
  ET_STREAMER_HINT = 19,
  ET_ZBARRIER = 20,
  ET_EVENTS = 21,
};

enum SndFluxType
{
  SND_FLUX_TYPE_NONE = 0,
  SND_FLUX_TYPE_LEFT_OF_PLAYER = 1,
  SND_FLUX_TYPE_CENTER_OF_PLAYER = 2,
  SND_FLUX_TYPE_RIGHT_OF_PLAYER = 3,
  SND_FLUX_TYPE_RANDOM_PLAYER = 4,
  SND_FLUX_TYPE_LEFT_OF_SHOT = 5,
  SND_FLUX_TYPE_CENTER_OF_SHOT = 6,
  SND_FLUX_TYPE_RIGHT_OF_SHOT = 7,
  SND_FLUX_TYPE_COUNT = 8,
};

typedef enum _TAG_UNNAMED_143
{
  PNF_DONTLINK = 1,
  PNF_PLACEHOLDER_FLAG = 2,
  PNF_DONTSTAND = 4,
  PNF_DONTCROUCH = 8,
  PNF_DONTPRONE = 16,
  PNF_NORAILING = 32,
  PNF_PRIORITY = 64,
  PNF_IDLE = 128,
  PNF_CAN_PARENT = 256,
  PNF_DISABLED = 512,
  PNF_DONTLEFT = 1024,
  PNF_DONTRIGHT = 2048,
  PNF_STRICT_CONNECT = 2048,
  PNF_CHOKEPOINT = 4096,
  PNF_LINKSTOCHOKE = 8192,
  PNF_TEMP_LINKS = 16384,
  PNF_ANGLEVALID = 0xffff8000,
  PNF_SUSPENDED = 0x10000,
  PNF_COVER_PEEKOVER = 0x20000,
  PNF_COVER_PEEKLEFT = 0x40000,
  PNF_COVER_PEEKRIGHT = 0x80000,
  PNF_DOUBLE_WIDE = 0x100000,
  PNF_QUADROTOR = 0x200000,
  PNF_HINT_LADDER = 0x400000,
  PNF_HINT_MANTLE = 0x800000,
  PNF_HINT_JUMP = 0x1000000,
  PNF_HINT_FALL = 0x2000000,
  PNF_NO_DOUBLEWIDE = 0x4000000,
  PNF_NO_QUADROTOR = 0x8000000,
} TAG_UNNAMED_143, *PTAG_UNNAMED_143;

enum GfxSaveScreenParam::SAVESCREEN_MODE
{
  SAVESCREEN_OFF = 0,
  SAVESCREEN = 1,
  SAVESCREEN_SECTION = 2,
};

enum zmGameModeGroup_t
{
  ZM_GAMEMODEGROUP_ZCLASSIC = 0,
  ZM_GAMEMODEGROUP_ZSURVIVAL = 1,
  ZM_GAMEMODEGROUP_ZENCOUNTER = 2,
  ZM_GAMEMODEGROUP_COUNT = 3,
};

enum ObjectIconType
{
  OBJECTIVEICON_MAP = 0,
  OBJECTIVEICON_SHOUTCASTER_MAP = 1,
  OBJECTIVEICON_COUNT = 2,
};

enum PhysicsOwnerType
{
  PHYS_OWNER_DYNENT = 0,
  PHYS_OWNER_ENTITY = 1,
  PHYS_OWNER_GLASS = 2,
  PHYS_OWNER_PARTICLE = 3,
  PHYS_OWNER_RAGDOLL = 4,
  PHYS_OWNER_XDOLL = 5,
  PHYS_OWNER_COUNT = 6,
};

enum EAccountType
{
  k_EAccountTypeInvalid = 0,
  k_EAccountTypeIndividual = 1,
  k_EAccountTypeMultiseat = 2,
  k_EAccountTypeGameServer = 3,
  k_EAccountTypeAnonGameServer = 4,
  k_EAccountTypePending = 5,
  k_EAccountTypeContentServer = 6,
  k_EAccountTypeClan = 7,
  k_EAccountTypeChat = 8,
  k_EAccountTypeConsoleUser = 9,
  k_EAccountTypeAnonUser = 10,
  k_EAccountTypeMax = 11,
};

enum ai_animmode_t
{
  AI_ANIM_UNKNOWN = 0,
  AI_ANIM_MOVE_CODE = 1,
  AI_ANIM_USE_POS_DELTAS = 2,
  AI_ANIM_USE_ANGLE_DELTAS = 3,
  AI_ANIM_USE_BOTH_DELTAS = 4,
  AI_ANIM_USE_BOTH_DELTAS_NOCLIP = 5,
  AI_ANIM_USE_BOTH_DELTAS_NOGRAVITY = 6,
  AI_ANIM_USE_BOTH_DELTAS_ZONLY_PHYSICS = 7,
  AI_ANIM_NOPHYSICS = 8,
  AI_ANIM_POINT_RELATIVE = 9,
  AI_ANIM_SLIDE = 10,
};

enum std::_Iosb<int>::_Dummy_enum
{
  _Dummy_enum_val = 1,
};

enum rigid_body_constraint_wheel::internal_wheel_flags_e
{
  WHEEL_FLAG_IS_COLLIDING = 1,
  WHEEL_FLAG_HARD_LIMIT_ACTIVE = 2,
  WHEEL_FLAG_IS_SLIDING = 4,
};

typedef enum _TAG_UNNAMED_144
{
  k_iCallback = 102,
} TAG_UNNAMED_144, *PTAG_UNNAMED_144;

enum rigid_body_constraint_wheel::ps_cache_e
{
  PSC_HARD_LIMIT = 0,
  PSC_SUSPENSION = 1,
  PSC_SIDE_FRIC = 2,
  PSC_FWD_FRIC = 3,
  NUM_PSC = 4,
};

struct CD3D10_TEXTURE3D_DESC
{
}; /* size: 0x0024 */

enum eHand
{
  HAND_RIGHT = 0,
  HAND_LEFT = 1,
  MAX_HANDS = 2,
};

enum std::errc::errc
{
  address_family_not_supported = 102,
  address_in_use = 100,
  address_not_available = 101,
  already_connected = 113,
  argument_list_too_long = 7,
  argument_out_of_domain = 33,
  bad_address = 14,
  bad_file_descriptor = 9,
  bad_message = 104,
  broken_pipe = 32,
  connection_aborted = 106,
  connection_already_in_progress = 103,
  connection_refused = 107,
  connection_reset = 108,
  cross_device_link = 18,
  destination_address_required = 109,
  device_or_resource_busy = 16,
  directory_not_empty = 41,
  executable_format_error = 8,
  file_exists = 17,
  file_too_large = 27,
  filename_too_long = 38,
  function_not_supported = 40,
  host_unreachable = 110,
  identifier_removed = 111,
  illegal_byte_sequence = 42,
  inappropriate_io_control_operation = 25,
  interrupted = 4,
  invalid_argument = 22,
  invalid_seek = 29,
  io_error = 5,
  is_a_directory = 21,
  message_size = 115,
  network_down = 116,
  network_reset = 117,
  network_unreachable = 118,
  no_buffer_space = 119,
  no_child_process = 10,
  no_link = 121,
  no_lock_available = 39,
  no_message_available = 120,
  no_message = 122,
  no_protocol_option = 123,
  no_space_on_device = 28,
  no_stream_resources = 124,
  no_such_device_or_address = 6,
  no_such_device = 19,
  no_such_file_or_directory = 2,
  no_such_process = 3,
  not_a_directory = 20,
  not_a_socket = 128,
  not_a_stream = 125,
  not_connected = 126,
  not_enough_memory = 12,
  not_supported = 129,
  operation_canceled = 105,
  operation_in_progress = 112,
  operation_not_permitted = 1,
  operation_not_supported = 130,
  operation_would_block = 140,
  owner_dead = 133,
  permission_denied = 13,
  protocol_error = 134,
  protocol_not_supported = 135,
  read_only_file_system = 30,
  resource_deadlock_would_occur = 36,
  resource_unavailable_try_again = 11,
  result_out_of_range = 34,
  state_not_recoverable = 127,
  stream_timeout = 137,
  text_file_busy = 139,
  timed_out = 138,
  too_many_files_open_in_system = 23,
  too_many_files_open = 24,
  too_many_links = 31,
  too_many_synbolic_link_levels = 114,
  value_too_large = 132,
  wrong_protocol_type = 136,
};

enum scriptAnimVehicleEntryPos_t
{
  ANIM_VEHICLE_ENTRY_SIDE_LEFT = 0,
  ANIM_VEHICLE_ENTRY_SIDE_RIGHT = 1,
  ANIM_VEHICLE_ENTRY_REAR = 2,
  NUM_ANIM_VEHICLE_ENTRY_POSITIONS = 3,
};

enum rigid_body_constraint_ragdoll::flags_e
{
  FLAG_HAS_HINGE = 4,
  FLAG_HAS_SWIVEL = 8,
  FLAG_HAS_DAMP = 64,
  FLAG_FORCE_LIMITS_ACTIVE = 128,
  FLAG_DISABLE_JOINT_LIMITS = 256,
  FLAG_DAMP_TYPE_IMPLICIT = 512,
};

enum EMarketingMessageFlags
{
  k_EMarketingMessageFlagsNone = 0,
  k_EMarketingMessageFlagsHighPriority = 1,
  k_EMarketingMessageFlagsPlatformWindows = 2,
  k_EMarketingMessageFlagsPlatformMac = 4,
  k_EMarketingMessageFlagsPlatformRestrictions = 6,
};

enum rigid_body_constraint_ragdoll::ps_cache_e
{
  PSC_X = 0,
  PSC_Y = 1,
  PSC_Z = 2,
  PSC_DAMP = 3,
  PSC_A1 = 4,
  PSC_A2 = 5,
  PSC_MIN_LIMIT = 6,
  PSC_MAX_LIMIT = 7,
  PSC_J_LIMIT0 = 8,
  PSC_J_LIMIT1 = 9,
  NUM_PSC = 10,
};

typedef enum _TAG_UNNAMED_145
{
  ENTRY_COUNT_BIT_COUNT = 9,
  ENTRY_COUNT_MASK = 511,
  ENTRY_COUNT_MAX = 256,
  INDEX_RANGE_BIT_COUNT = 7,
  INDEX_RANGE_SHIFT = 9,
  INDEX_RANGE_MASK = 127,
  INDEX_RANGE_MAX = 127,
} TAG_UNNAMED_145, *PTAG_UNNAMED_145;

enum bdShutdownCompleteChunk::bdShutdownCompleteFlags
{
  BD_SCC_NO_FLAGS = 0,
};

class rigid_body_constraint_point
{
  /* 0x0000 */ long Padding_68[4];
  /* 0x0010 */ class phys_vec3 m_b1_r_loc;
  /* 0x0020 */ class phys_vec3 m_b2_r_loc;
  /* 0x0030 */ class pulse_sum_cache m_ps_cache_list[3];
  /* 0x003c */ float m_stress;
  /* 0x0040 */ float m_spring_k;
  /* 0x0044 */ float m_damp_k;
  /* 0x0048 */ BOOL m_spring_enabled;
}; /* size: 0x0050 */

typedef enum _TAG_UNNAMED_146
{
  FLAG_DO_INITIAL_TUNNEL_TEST = 512,
  BPG_FIRST_UNUSED_FLAG = 1024,
} TAG_UNNAMED_146, *PTAG_UNNAMED_146;

enum STATE
{
  ST_NORMAL = 0,
  ST_PERCENT = 1,
  ST_FLAG = 2,
  ST_WIDTH = 3,
  ST_DOT = 4,
  ST_PRECIS = 5,
  ST_SIZE = 6,
  ST_TYPE = 7,
};

class rb_inplace_partition_node
{
  /* 0x0000 */ class rigid_body_constraint_point* m_rbc_point_first;
  /* 0x0004 */ class rigid_body_constraint_hinge* m_rbc_hinge_first;
  /* 0x0008 */ class rigid_body_constraint_distance* m_rbc_dist_first;
  /* 0x000c */ class rigid_body_constraint_ragdoll* m_rbc_ragdoll_first;
  /* 0x0010 */ class rigid_body_constraint_wheel* m_rbc_wheel_first;
  /* 0x0014 */ class rigid_body_constraint_angular_actuator* m_rbc_angular_actuator_first;
  /* 0x0018 */ class rigid_body_constraint_upright* m_rbc_upright_first;
  /* 0x001c */ class rigid_body_constraint_custom_orientation* m_rbc_custom_orientation_first;
  /* 0x0020 */ class rigid_body_constraint_custom_path* m_rbc_custom_path_first;
  /* 0x0024 */ class rigid_body_constraint_contact* m_rbc_contact_first;
  /* 0x0028 */ class rigid_body* m_partition_head;
  /* 0x002c */ class rigid_body* m_partition_tail;
  /* 0x0030 */ class rigid_body* m_next_node;
  /* 0x0034 */ int m_partition_size;
}; /* size: 0x0038 */

class rigid_body
{
  /* 0x0000 */ class phys_vec3 m_last_position;
  /* 0x0010 */ class phys_vec3 m_moved_vec;
  /* 0x0020 */ float m_smallest_lambda;
  /* 0x0024 */ long Padding_69[3];
  /* 0x0030 */ class phys_mat44 m_mat;
  /* 0x0070 */ class phys_vec3 m_inv_inertia;
  /* 0x0080 */ class phys_vec3 m_gravity_acc_vec;
  /* 0x0090 */ class phys_vec3 m_t_vel;
  /* 0x00a0 */ class phys_vec3 m_a_vel;
  /* 0x00b0 */ class phys_vec3 m_last_t_vel;
  /* 0x00c0 */ class phys_vec3 m_last_a_vel;
  /* 0x00d0 */ class phys_vec3 m_force_sum;
  /* 0x00e0 */ class phys_vec3 m_torque_sum;
  /* 0x00f0 */ float m_inv_mass;
  /* 0x00f4 */ float m_max_avel;
  /* 0x00f8 */ float m_max_delta_t;
  /* 0x00fc */ unsigned int m_flags;
  /* 0x0100 */ unsigned int m_tick;
  /* 0x0104 */ class pulse_sum_node* m_node;
  /* 0x0108 */ int m_constraint_count;
  /* 0x010c */ int m_contact_count;
  /* 0x0110 */ int m_stable_min_contact_count;
  /* 0x0114 */ float m_stable_energy_time;
  /* 0x0118 */ float m_largest_vel_sq;
  /* 0x011c */ float m_t_drag_coef;
  /* 0x0120 */ float m_a_drag_coef;
  /* 0x0124 */ void* m_userdata;
  /* 0x0128 */ class rb_inplace_partition_node m_partition_node;
}; /* size: 0x0160 */

enum EPersonaState
{
  k_EPersonaStateOffline = 0,
  k_EPersonaStateOnline = 1,
  k_EPersonaStateBusy = 2,
  k_EPersonaStateAway = 3,
  k_EPersonaStateSnooze = 4,
  k_EPersonaStateLookingToTrade = 5,
  k_EPersonaStateLookingToPlay = 6,
  k_EPersonaStateMax = 7,
};

enum rigid_body_constraint_hinge::flags_e
{
  HINGE_MIN_LIMIT_ACTIVE = 1,
  HINGE_MAX_LIMIT_ACTIVE = 2,
  PRIVATE_FLAGS_END = 2,
};

enum rigid_body_constraint_hinge::public_flags_e
{
  NO_HINGE_LIMITS = 4,
  SNIDER_STYLE_HINGE = 8,
  NO_POINT_TO_POINT = 16,
};

typedef enum _TAG_UNNAMED_147
{
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_TYPE = 0,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_BOOKMARK_TYPE = 1,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_ETYPE = 2,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_SECONDS_BEFORE = 3,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_SECONDS_AFTER = 4,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_THUMBNAIL_CAPTURE_TIME_DELTA = 5,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_PRIORITY_WEIGHT_PER_EVENT = 6,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_PRIORITY_STACK_FACTOR = 7,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_BOOST_PRIORITY_ONLY = 8,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_KILLCAM_AVAILABLE = 9,
} TAG_UNNAMED_147, *PTAG_UNNAMED_147;

enum AlertLevel
{
  AI_ALERTNESS_ASLEEP = 0,
  AI_ALERTNESS_NONCOMBAT = 1,
  AI_ALERTNESS_ALERT = 2,
  AI_ALERTNESS_COMBAT = 3,
  NUM_ALERT_LEVELS = 4,
};

enum std::_Iosb<int>::_Openmode
{
  _Openmask = 255,
};

struct HICON__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

enum winConnectionState_e
{
  WIN_STATUS_ERROR = 0,
  WIN_STATUS_NOT_CONNECTED = 1,
  WIN_STATUS_DNS_RESOLVING = 2,
  WIN_STATUS_DNS_RESOLVED = 3,
  WIN_STATUS_STEAM_OFFLINE = 4,
  WIN_STATUS_GETTING_TICKET = 5,
  WIN_STATUS_GOT_TICKET = 6,
  WIN_STATUS_TICKET_ERROR = 7,
  WIN_STATUS_AUTHORIZING = 8,
  WIN_STATUS_CONNECTING = 9,
  WIN_STATUS_CONNECTED = 10,
  WIN_STATUS_IN_BACKOFF = 11,
  WIN_STATUS_DISABLE_CONNECT = 12,
};

enum bb_profilelog_id
{
  PROFILELOG_UNKNOWN = 0,
  PROFILELOG_SV_FRAME_MP = 1,
  PROFILELOG_SV_RUNFRAME_MP = 2,
  PROFILELOG_SV_PREFRAME_MP = 3,
  PROFILELOG_SV_POSTFRAME_MP = 4,
  PROFILELOG_SV_SCRIPTS_ALL = 5,
  PROFILELOG_SV_EVENTLOOP_MP = 6,
  PROFILELOG_SV_PMOVE = 7,
  PROFILELOG_SV_PMOVE_COLLISION = 8,
  PROFILELOG_VEHICLE_THINK = 9,
  PROFILELOG_ACTOR_THINK = 10,
  PROFILELOG_NON_PLAYER_COLLISION = 11,
  PROFILELOG_XXX = 12,
  PROFILELOG_DOBJ_SKEL = 13,
  PROFILELOG_STREAM_SORT_WAIT = 14,
  PROFILELOG_GET_BITFIELD = 15,
  PROFILELOG_SCR_UPDATESCREEN = 16,
  PROFILELOG_BLANK1 = 17,
  PROFILELOG_BLANK2 = 18,
  PROFILELOG_BLANK3 = 19,
  PROFILELOG_BLANK4 = 20,
  PROFILELOG_BLANK5 = 21,
  PROFILELOG_BLANK6 = 22,
  PROFILELOG_BLANK7 = 23,
  PROFILELOG_BLANK8 = 24,
  PROFILELOG_NET_BAND_SERVER_TRANSMITTED = 25,
  PROFILELOG_NET_BAND_SERVER_TOTAL = 26,
  PROFILELOG_NET_BAND_SERVER_ENTITYSTATES = 27,
  PROFILELOG_NET_BAND_SERVER_PLAYERSTATES = 28,
  PROFILELOG_NET_BAND_SERVER_CLIENTSTATES = 29,
  PROFILELOG_NET_BAND_SERVER_ACTORSTATES = 30,
  PROFILELOG_NET_BAND_SERVER_GLASS = 31,
  PROFILELOG_NET_BAND_SERVER_DEMO_UPLOAD = 32,
  PROFILELOG_NET_BAND_SERVER_BLACKBOX = 33,
  PROFILELOG_NET_BAND_SERVER_VOICE = 34,
  PROFILELOG_NET_BAND_SERVER_RELIABLE_CMDS = 35,
  PROFILELOG_NET_BAND_SERVER_GAMESTATE = 36,
  PROFILELOG_MAX = 37,
};

typedef enum _TAG_UNNAMED_148
{
  FLAG_CALC_CG_TO_WORLD_XFORM = 512,
  BPI_FIRST_UNUSED_FLAG = 1024,
} TAG_UNNAMED_148, *PTAG_UNNAMED_148;

typedef enum _NVAPI_DITHER_MODE
{
  NVAPI_DITHER_MODE_DYNAMIC_ERR_ACC = 0,
  NVAPI_DITHER_MODE_STATIC_ERR_ACC = 1,
  NVAPI_DITHER_MODE_DYNAMIC_2X2 = 2,
  NVAPI_DITHER_MODE_STATIC_2X2 = 3,
} NVAPI_DITHER_MODE, *PNVAPI_DITHER_MODE;

enum uiSessionsLines_e
{
  UI_SESSIONS_LINE_FIRST = 0,
  UI_SESSIONS_LINE_1 = 0,
  UI_SESSIONS_LINE_2 = 1,
  UI_SESSIONS_LINE_3 = 2,
  UI_SESSIONS_NUM_LINES = 3,
};

enum sessionState_t
{
  SESS_STATE_PLAYING = 0,
  SESS_STATE_DEAD = 1,
  SESS_STATE_SPECTATOR = 2,
  SESS_STATE_INTERMISSION = 3,
};

enum contact_point_info::flags_e
{
  FLAG_SOLVER_PRIORITY_MASK = 7,
  FLAG_NO_OVERFLOW_ERROR = 8,
  FLAG_HAS_VALID_RB2_ENTITY = 16,
};

typedef enum _XUSER_SIGNIN_STATE
{
  eXUserSigninState_NotSignedIn = 0,
  eXUserSigninState_SignedInLocally = 1,
  eXUserSigninState_SignedInToLive = 2,
} XUSER_SIGNIN_STATE, *PXUSER_SIGNIN_STATE;

enum visionSetMode_t
{
  VISIONSETMODE_NAKED = 0,
  VISIONSETMODE_SERVER = 1,
  VISIONSETMODE_NIGHT = 2,
  VISIONSETMODE_FLARE = 3,
  VISIONSETMODE_INFRARED = 4,
  VISIONSETMODE_TVGUIDED = 5,
  VISIONSETMODE_EXTRACAM = 6,
  VISIONSETMODE_LASTSTAND = 7,
  VISIONSETMODECOUNT = 8,
};

enum DynEntityType
{
  DYNENT_TYPE_INVALID = 0,
  DYNENT_TYPE_CLUTTER = 1,
  DYNENT_TYPE_DESTRUCT = 2,
  DYNENT_TYPE_COUNT = 3,
};

enum MtlTechSetNotFoundBehavior
{
  MTL_TECHSET_NOT_FOUND_RETURN_NULL = 0,
  MTL_TECHSET_NOT_FOUND_RETURN_DEFAULT = 1,
};

enum eVoiceMuteReason
{
  MUTE_REASON_NOT_MUTED = 0,
  MUTE_REASON_MUTED_BY_LIVE = 1,
  MUTE_REASON_TALK_TO_NOBODY = 2,
  MUTE_REASON_TALK_TO_FRIENDS_0NLY = 3,
  MUTE_REASON_MUTED_IN_GAME = 4,
};

enum rigid_body_constraint_distance::flags_e
{
  FLAG_ENABLE = 1,
  FLAG_B2_R_IS_DAMP_POINT = 2,
};

enum aiGoalSources
{
  AI_GOAL_SRC_SCRIPT_GOAL = 0,
  AI_GOAL_SRC_SCRIPT_ENTITY_GOAL = 1,
  AI_GOAL_SRC_ENEMY = 2,
};

enum ELeaderboardSortMethod
{
  k_ELeaderboardSortMethodNone = 0,
  k_ELeaderboardSortMethodAscending = 1,
  k_ELeaderboardSortMethodDescending = 2,
};

enum DelayedWeapDropState
{
  ACTOR_WEAP_DROP_NONE = 0,
  ACTOR_WEAP_DROP_GRAB_INITIAL_VALUE = 1,
  ACTOR_WEAP_DROP_FINISH = 2,
};

enum aiphys_t
{
  AIPHYS_BAD = 0,
  AIPHYS_NORMAL_ABSOLUTE = 1,
  AIPHYS_NORMAL_RELATIVE = 2,
  AIPHYS_NOCLIP = 3,
  AIPHYS_NOGRAVITY = 4,
  AIPHYS_ZONLY_PHYSICS_RELATIVE = 5,
  AIPHYS_ZONLY_PHYSICS_ABSOLUTE = 6,
  AIPHYS_GRAVITY_SLIDE = 7,
};

typedef enum _TAG_UNNAMED_149
{
  k_cchPersonaNameMax = 128,
  k_cwchPersonaNameMax = 32,
} TAG_UNNAMED_149, *PTAG_UNNAMED_149;

enum phys_gjk_cache_info::phys_gjk_cache_info_e
{
  FLAG_WAS_TOUCHED = 1,
  FLAG_IS_SWAPPED = 2,
  FLAG_IS_SUPPORT_DIR_VALID = 4,
  FLAG_IS_SIMPLEX_VALID = 8,
};

struct static_colgeom_visitor_t
{
  /* 0x0000 */ long Padding_70[32];
  /* 0x0080 */ int ntrees;
  /* 0x0084 */ const struct CollisionAabbTree* trees[512];
  /* 0x0884 */ int nbrushes;
  /* 0x0888 */ const struct cbrush_t* brushes[512];
  /* 0x1088 */ long __PADDING__[2];
}; /* size: 0x1090 */

typedef enum _TAG_UNNAMED_150
{
  NUM_QUAD_VERTS = 4,
} TAG_UNNAMED_150, *PTAG_UNNAMED_150;

enum ERemoteStoragePlatform
{
  k_ERemoteStoragePlatformNone = 0,
  k_ERemoteStoragePlatformWindows = 1,
  k_ERemoteStoragePlatformOSX = 2,
  k_ERemoteStoragePlatformPS3 = 4,
  k_ERemoteStoragePlatformReserved1 = 8,
  k_ERemoteStoragePlatformReserved2 = 16,
  k_ERemoteStoragePlatformAll = -1,
};

enum ai_orient_mode_t
{
  AI_ORIENT_INVALID = 0,
  AI_ORIENT_DONT_CHANGE = 1,
  AI_ORIENT_TO_MOTION = 2,
  AI_ORIENT_TO_ENEMY = 3,
  AI_ORIENT_TO_ENEMY_OR_MOTION = 4,
  AI_ORIENT_TO_ENEMY_OR_MOTION_SIDESTEP = 5,
  AI_ORIENT_TO_GOAL = 6,
  AI_ORIENT_COUNT = 7,
};

typedef enum _TAG_UNNAMED_151
{
  BLOCK_SIZE = 16384,
  BLOCK_ALIGNMENT = 4,
} TAG_UNNAMED_151, *PTAG_UNNAMED_151;

enum EWorkshopFileAction
{
  k_EWorkshopFileActionPlayed = 0,
  k_EWorkshopFileActionCompleted = 1,
};

typedef enum _TAG_UNNAMED_152
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_152, *PTAG_UNNAMED_152;

enum thirdPersonType
{
  TP_OFF = 0,
  TP_FOR_MODEL = 1,
  TP_FOR_SHADOW = 2,
};

struct IDirectSound
{
}; /* size: 0x0004 */

enum ActorAnimStates
{
  ACTOR_ANIMATION_IDLE = 0,
  ACTOR_ANIMATION_MOVE_RUN = 1,
  ACTOR_ANIMATION_MOVE_START = 2,
  ACTOR_ANIMATION_MOVE_STOP = 3,
  ACTOR_ANIMATION_MOVE_WALK = 4,
  ACTOR_ANIMATION_MOVE_TURN_LEFT = 5,
  ACTOR_ANIMATION_MOVE_TURN_RIGHT = 6,
  ACTOR_ANIMATION_MOVE_RUN_TURN_LEFT = 7,
  ACTOR_ANIMATION_MOVE_RUN_TURN_RIGHT = 8,
  ACTOR_ANIMATION_MOVE_TURN_AROUND_LEFT = 9,
  ACTOR_ANIMATION_MOVE_TURN_AROUND_RIGHT = 10,
  ACTOR_ANIMATION_MOVE_RUN_TURN_AROUND_LEFT = 11,
  ACTOR_ANIMATION_MOVE_RUN_TURN_AROUND_RIGHT = 12,
  ACTOR_ANIMATION_ATTACK = 13,
  ACTOR_ANIMATION_STOP_IDLE = 14,
  ACTOR_ANIMATION_STOP_ATTACKIDLE = 15,
  ACTOR_ANIMATION_STOP_ATTACKIDLE_BARK = 16,
  ACTOR_ANIMATION_STOP_ATTACKIDLE_GROWL = 17,
  ACTOR_ANIMATION_PAIN_MAIN = 18,
  ACTOR_ANIMATION_PAIN_FRONT = 19,
  ACTOR_ANIMATION_PAIN_BACK = 20,
  ACTOR_ANIMATION_PAIN_LEFT = 21,
  ACTOR_ANIMATION_PAIN_RIGHT = 22,
  ACTOR_ANIMATION_RUN_PAIN_FRONT = 23,
  ACTOR_ANIMATION_RUN_PAIN_BACK = 24,
  ACTOR_ANIMATION_RUN_PAIN_LEFT = 25,
  ACTOR_ANIMATION_RUN_PAIN_RIGHT = 26,
  ACTOR_ANIMATION_DEATH_FRONT = 27,
  ACTOR_ANIMATION_DEATH_BACK = 28,
  ACTOR_ANIMATION_DEATH_LEFT = 29,
  ACTOR_ANIMATION_DEATH_RIGHT = 30,
  ACTOR_ANIMATION_FLASHED = 31,
  ACTOR_ANIMATION_ATTACK_ATTACKIDLE = 32,
  ACTOR_ANIMATION_ATTACK_ATTACKIDLE_BARK = 33,
  ACTOR_ANIMATION_ATTACK_ATTACKIDLE_GROWL = 34,
  ACTOR_ANIMATION_ATTACK_RUN = 35,
  ACTOR_ANIMATION_ATTACK_PLAYER_CLOSE_RANGE = 36,
  ACTOR_ANIMATION_ATTACK_MISS = 37,
  ACTOR_ANIMATION_ATTACK_MISS_LEFT = 38,
  ACTOR_ANIMATION_ATTACK_MISS_RIGHT = 39,
  ACTOR_ANIMATION_TRAVERSE_JUMP_UP_40 = 40,
  ACTOR_ANIMATION_TRAVERSE_JUMP_UP_80 = 41,
  ACTOR_ANIMATION_TRAVERSE_JUMP_DOWN_40 = 42,
  ACTOR_ANIMATION_TRAVERSE_JUMP_DOWN_80 = 43,
  ACTOR_ANIMATION_TRAVERSE_WALLHOP = 44,
  ACTOR_ANIMATION_TRAVERSE_WINDOW = 45,
  ACTOR_ANIMATION_TRAVERSE_THROUGH_HOLE_42 = 46,
  ACTOR_ANIMATION_COUNT = 47,
};

enum rigid_body_constraint_angular_actuator::ps_cache_e
{
  PSC_X = 0,
  PSC_Y = 1,
  PSC_Z = 2,
  NUM_PSC = 3,
};

enum team_indicator
{
  TEAM_INDICATOR_FULL = 0,
  TEAM_INDICATOR_ABBREVIATED = 1,
  TEAM_INDICATOR_ICON = 2,
  TEAM_INDICATOR_COUNT = 3,
};

enum D2D1_COMBINE_MODE
{
};

enum eEmblemLayers
{
  EMBLEMLAYER_TYPE = 0,
  EMBLEMLAYER_COST = 1,
  EMBLEMLAYER_UNLOCK_LVL = 2,
  EMBLEMLAYER_UNLOCK_PLEVEL = 3,
  MAX_EMBLEMLAYER_COUNT = 4,
};

typedef enum _TAG_UNNAMED_153
{
  BITS_PER_WORD = 32,
  WORD_COUNT = 24,
} TAG_UNNAMED_153, *PTAG_UNNAMED_153;

class bdInAddr
{
  union
  {
    union
    {
      struct
      {
        /* 0x0000 */ unsigned char m_b1;
        /* 0x0001 */ unsigned char m_b2;
        /* 0x0002 */ unsigned char m_b3;
        /* 0x0003 */ unsigned char m_b4;
      } /* size: 0x0004 */ m_caddr;
      /* 0x0000 */ unsigned int m_iaddr;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ inUn;
}; /* size: 0x0004 */

class bdInetAddr
{
  /* 0x0000 */ class bdInAddr m_addr;
}; /* size: 0x0004 */

class bdAddr
{
  union
  {
    struct
    {
      /* 0x0000 */ class bdInetAddr m_address;
      /* 0x0004 */ unsigned short m_port;
    }; /* size: 0x0006 */
    /* 0x0000 */ unsigned int serializedSize;
  }; /* size: 0x0006 */
}; /* size: 0x0008 */

class bdNATTypeDiscoveryPacketReply
{
  /* 0x0000 */ unsigned char m_type;
  /* 0x0001 */ char Padding_71;
  /* 0x0002 */ unsigned short m_protocolVersion;
  /* 0x0004 */ class bdAddr m_mappedAddr;
  /* 0x000c */ class bdAddr m_secAddr;
}; /* size: 0x0014 */

enum ShockViewTypes
{
  SHELLSHOCK_VIEWTYPE_BLURRED = 0,
  SHELLSHOCK_VIEWTYPE_FLASHED = 1,
  SHELLSHOCK_VIEWTYPE_NONE = 2,
};

enum emblemOrBacking_e
{
  EMBLEM = 0,
  BACKING = 1,
  EMBLEM_OR_BACKING_COUNT = 2,
};

enum CubemapShot
{
  CUBEMAPSHOT_NONE = 0,
  CUBEMAPSHOT_RIGHT = 1,
  CUBEMAPSHOT_LEFT = 2,
  CUBEMAPSHOT_BACK = 3,
  CUBEMAPSHOT_FRONT = 4,
  CUBEMAPSHOT_UP = 5,
  CUBEMAPSHOT_DOWN = 6,
  CUBEMAPSHOT_COUNT = 7,
};

enum InvalidCmdHintType
{
  INVALID_CMD_NONE = 0,
  INVALID_CMD_NO_AMMO_BULLETS = 1,
  INVALID_CMD_NO_AMMO_FRAG_GRENADE = 2,
  INVALID_CMD_NO_AMMO_SPECIAL_GRENADE = 3,
  INVALID_CMD_NO_AMMO_FLASH_GRENADE = 4,
  INVALID_CMD_NO_AMMO_EQUIPMENT = 5,
  INVALID_CMD_STAND_BLOCKED = 6,
  INVALID_CMD_CROUCH_BLOCKED = 7,
  INVALID_CMD_PRONE_BLOCKED = 8,
  INVALID_CMD_TARGET_TOO_CLOSE = 9,
  INVALID_CMD_LOCKON_REQUIRED = 10,
  INVALID_CMD_NOT_ENOUGH_CLEARANCE = 11,
  INVALID_CMD_CANT_PLACE_TURRET = 12,
  INVALID_CMD_CANT_EQUIP_WHILE_PRONE = 13,
  INVALID_CMD_CANT_PLANT_EQUIPMENT = 14,
};

enum scaleMode_t
{
  EMBLEM_FIXED_SCALE = 0,
  EMBLEM_FREE_SCALE = 1,
};

enum SuccessfulCmdHintType
{
  SUCCESSFUL_CMD_NONE = 0,
  SUCCESSFUL_CMD_GOD_MODE_ON = 1,
  SUCCESSFUL_CMD_GOD_MODE_OFF = 2,
  SUCCESSFUL_CMD_DEMIGOD_MODE_ON = 3,
  SUCCESSFUL_CMD_DEMIGOD_MODE_OFF = 4,
  SUCCESSFUL_CMD_UFO_ON = 5,
  SUCCESSFUL_CMD_UFO_OFF = 6,
  SUCCESSFUL_CMD_WEAPNEXT = 7,
  SUCCESSFUL_CMD_WEAPPREV = 8,
  SUCCESSFUL_CMD_GIVE_ALL = 9,
  SUCCESSFUL_CMD_CAMLOCK_ON = 10,
  SUCCESSFUL_CMD_CAMLOCK_OFF = 11,
  SUCCESSFUL_CMD_LOOKSPRING_ON = 12,
  SUCCESSFUL_CMD_LOOKSPRING_OFF = 13,
};

enum DWRITE_BREAK_CONDITION
{
};

enum scriptAnimDirections_t
{
  ANIM_DIRECTION_NONE = 0,
  ANIM_DIRECTION_FORWARD = 1,
  ANIM_DIRECTION_BACKWARD = 2,
  ANIM_DIRECTION_LEFT = 3,
  ANIM_DIRECTION_RIGHT = 4,
  NUM_ANIM_DIRECTIONS = 5,
};

enum KillCamEntityRestState
{
  KC_ENT_MOVING = 0,
  KC_ENT_AT_REST = 1,
  KC_ENT_STUCK_GROUND = 2,
  KC_ENT_STUCK_WALL = 3,
};

enum rigid_body_constraint_custom_path::ps_cache_e
{
  PSC_X = 0,
  PSC_Y = 1,
  PSC_YAW = 2,
  PSC_UPRIGHT = 3,
  NUM_PSC = 4,
};

class phys_inplace_avl_tree_node<auto_rigid_body>
{
  /* 0x0000 */ struct auto_rigid_body* m_left;
  /* 0x0004 */ struct auto_rigid_body* m_right;
  /* 0x0008 */ int m_balance;
}; /* size: 0x000c */

struct auto_rigid_body
{
  /* 0x0000 */ class user_rigid_body* rb;
  /* 0x0004 */ const struct centity_t* cent;
  /* 0x0008 */ int frame_count;
  /* 0x000c */ struct auto_rigid_body* next;
  /* 0x0010 */ class phys_inplace_avl_tree_node<auto_rigid_body> m_avl_node_info;
}; /* size: 0x001c */

enum phys_gjk_info::gjk_retval_e
{
  GJK_SEPARATED = 0,
  GJK_VALID = 1,
  GJK_PENETRATING = 2,
  GJK_INVALID = 3,
};

typedef enum _TAG_UNNAMED_154
{
  TDEFL_MAX_HUFF_TABLES = 3,
  TDEFL_MAX_HUFF_SYMBOLS_0 = 288,
  TDEFL_MAX_HUFF_SYMBOLS_1 = 32,
  TDEFL_MAX_HUFF_SYMBOLS_2 = 19,
  TDEFL_LZ_DICT_SIZE = 0xffff8000,
  TDEFL_LZ_DICT_SIZE_MASK = 32767,
  TDEFL_MIN_MATCH_LEN = 3,
  TDEFL_MAX_MATCH_LEN = 258,
} TAG_UNNAMED_154, *PTAG_UNNAMED_154;

enum demoControllerConfig
{
  DEMO_CONTROLLER_CONFIG_DEFAULT = 0,
  DEMO_CONTROLLER_CONFIG_DIGITAL = 1,
  DEMO_CONTROLLER_CONFIG_BADBOT = 2,
  DEMO_CONTROLLER_CONFIG_SHOUTCASTER = 3,
  DEMO_CONTROLLER_CONFIG_COUNT = 4,
};

enum phys_gjk_info::gjk_flags_e
{
  FLAG_EXIT_ON_SEP_THRESH = 1,
  INTERSECTION_TEST_ONLY = 2,
  FLAG_TEST_CONVERGENCE = 4,
  CONTINUOUS_COLLISION = 8,
  FLAG_TEST_UD_LT_SP = 16,
  FLAG_IS_SEPARATED = 32,
  FLAG_GI_DANGEROUS = 64,
};

typedef enum _TAG_UNNAMED_155
{
  NUM_CONSTANTS_PER_SET = 7,
} TAG_UNNAMED_155, *PTAG_UNNAMED_155;

typedef enum _TAG_UNNAMED_156
{
  IMAGE_PROG_SHADOWMAP_SUN = 0,
  IMAGE_PROG_SHADOWMAP_SPOT = 1,
  IMAGE_PROG_FLOATZ = 2,
  IMAGE_PROG_POST_EFFECT_SRC = 3,
  IMAGE_PROG_POST_EFFECT_0 = 4,
  IMAGE_PROG_POST_EFFECT_1 = 5,
  IMAGE_PROG_PINGPONG_0 = 6,
  IMAGE_PROG_PINGPONG_1 = 7,
  IMAGE_PROG_RESOLVED_SCENE = 8,
  IMAGE_PROG_SCENE = 9,
  IMAGE_PROG_SAVEDSCREEN = 10,
  IMAGE_PROG_SCENE_DEPTH = 11,
  IMAGE_PROG_RAW = 12,
  IMAGE_PROG_SSAO_CSZ = 13,
  IMAGE_PROG_SSAO_CSZ_0 = 14,
  IMAGE_PROG_SSAO_CSZ_1 = 15,
  IMAGE_PROG_SSAO_CSZ_2 = 16,
  IMAGE_PROG_SSAO_CSZ_3 = 17,
  IMAGE_PROG_SSAO_CSZ_4 = 18,
  IMAGE_PROG_SSAO_CSZ_5 = 19,
  IMAGE_PROG_SSAO_1 = 20,
  IMAGE_PROG_SSAO_2 = 21,
  IMAGE_PROG_TXAA_FEEDBACK = 22,
  IMAGE_PROG_TXAA_SRGB = 23,
  IMAGE_PROG_TXAA_SRGB_SCENE = 24,
  IMAGE_PROG_MODEL_LIGHTING = 25,
  IMAGE_PROG_LUT = 26,
  IMAGE_PROG_UI3D = 27,
  IMAGE_PROG_UI3D_PING_PONG = 28,
  IMAGE_PROG_MISSILE_CAM = 29,
  IMAGE_PROG_FLOATZ_MISSILE_CAM = 30,
  IMAGE_PROG_MISSILE_CAM_MULTI_0 = 31,
  IMAGE_PROG_MISSILE_CAM_MULTI_1 = 32,
  IMAGE_PROG_MISSILE_CAM_MULTI_2 = 33,
  IMAGE_PROG_MISSILE_CAM_MULTI_3 = 34,
  IMAGE_PROG_SONAR = 35,
  IMAGE_PROG_SONAR_BLUR = 36,
  IMAGE_PROG_SONAR_DEPTH = 37,
  IMAGE_PROG_COMPOSITE = 38,
  IMAGE_PROG_DOF_SCENE_MASK_PING = 39,
  IMAGE_PROG_DOF_SCENE_MASK_PONG = 40,
  IMAGE_PROG_DOF_SCENE_FP16 = 41,
  IMAGE_PROG_DOF_SCENE_FP16_0 = 42,
  IMAGE_PROG_DOF_SCENE_FP16_1 = 43,
  IMAGE_PROG_DOF_SCENE_FP16_2 = 44,
  IMAGE_PROG_DOF_SCENE_FP16_3 = 45,
  IMAGE_PROG_DOF_SCENE_FP16_4 = 46,
  IMAGE_PROG_DOF_SCENE_FP16_5 = 47,
  IMAGE_PROG_DOF_SCENE_FINAL = 48,
  IMAGE_PROG_BLOOM_MIP1_PING = 49,
  IMAGE_PROG_BLOOM_MIP1_PONG = 50,
  IMAGE_PROG_BLOOM_MIP2_PING = 51,
  IMAGE_PROG_BLOOM_MIP2_PONG = 52,
  IMAGE_PROG_BLOOM_MIP3_PING = 53,
  IMAGE_PROG_BLOOM_MIP3_PONG = 54,
  IMAGE_PROG_BLOOM_MIP4_PING = 55,
  IMAGE_PROG_BLOOM_MIP4_PONG = 56,
  IMAGE_PROG_BLOOM_STREAK = 57,
  IMAGE_PROG_LUT2D = 58,
  IMAGE_PROG_COUNT = 59,
} TAG_UNNAMED_156, *PTAG_UNNAMED_156;

enum trackerColumn_e
{
  TRACKER_INVALID = -1,
  TRACKER_OFFENSIVE = 0,
  TRACKER_EMBLEM = 1,
  TRACKER_CHEATER = 2,
  TRACKER_BOOSTER = 3,
  TRACKER_FAILED_STATS_XUID_RECEIVER = 4,
  TRACKER_FAILED_STATS_XUID_GIVER = 5,
  TRACKER_FAILED_PRESCRUB = 6,
  TRACKER_NON_SUPER_USER_WADEFPS_USE = 7,
  TRACKER_FAILED_DB_AUTH = 8,
  TRACKER_SUPER_OFFENSIVE = 9,
  TRACKER_SUPER_OFFENSIVE_EMBLEM = 10,
  TRACKER_SUPER_CHEATER = 11,
  TRACKER_SUPER_BOOSTER = 12,
  TRACKER_USER_REPORT_COUNT = 13,
  TRACKER_POST_LB_SCRUBBER = 14,
  TRACKER_ZOMBIE_OFFENSIVE = 15,
  TRACKER_ZOMBIE_CHEATER = 16,
  TRACKER_ZOMBIE_USER_REPORT_COUNT = 17,
  TRACKER_INVALID_DVAR_CHANGED = 18,
  TRACKER_BOOSTING_LOBBY_CLIENT = 19,
  TRACKER_BOOSTING_LOBBY_SERVER = 20,
  TRACKER_SCRIPT_CHECKSUM_ERROR_CLIENT = 21,
  TRACKER_SCRIPT_CHECKSUM_ERROR_SERVER = 22,
  TRACKER_FAILED_PRESCRUB_ZOMBIES = 23,
  TRACKER_SCRIPT_CHECKSUM_ERROR_CLIENT_SP = 24,
  TRACKER_SCRIPT_CHECKSUM_ERROR_SERVER_SP = 25,
  TRACKER_BAD_GAMERTAG = 26,
  TRACKER_STATS_RESET_VERSION_OLD = 27,
  TRACKER_STATS_RESET_BASIC_OLD = 28,
  TRACKER_STATS_RESET_DDL_OLD = 29,
  TRACKER_STATS_RESTORE = 30,
  TRACKER_HACKED_CLIENT = 31,
  TRACKER_HACKED_SERVER = 32,
  TRACKER_HACKED_CLANTAG = 33,
  TRACKER_HACKED_PROFILE = 34,
  TRACKER_VIEW_FILESHARE = 35,
  TRACKER_VIEW_OWN_FILESHARE = 36,
  TRACKER_VIEW_MATCH = 37,
  TRACKER_VIEW_OWN_MATCH = 38,
  TRACKER_VIEW_COMMUNITY = 39,
  TRACKER_VIEW_COMBAT_RECORD = 40,
  TRACKER_CHEATLOG_GOD = 41,
  TRACKER_CHEATLOG_GOD_TS = 42,
  TRACKER_CHEATLOG_DEMIGOD = 43,
  TRACKER_CHEATLOG_DEMIGOD_TS = 44,
  TRACKER_CHEATLOG_PROF_DECRYPT_FAIL = 45,
  TRACKER_CHEATLOG_PROF_DECRYPT_FAIL_TS = 46,
  TRACKER_CHEATLOG_SAVE_DECRYPT_FAIL = 47,
  TRACKER_CHEATLOG_SAVE_DECRYPT_FAIL_TS = 48,
  TRACKER_EXEC_DISC_CFG = 49,
  TRACKER_EXEC_DISC_CFG_TS = 50,
  TRACKER_EXEC_UNKN_CFG = 51,
  TRACKER_EXEC_UNKN_CFG_TS = 52,
  TRACKER_FF_AUTH_FAIL = 53,
  TRACKER_FF_AUTH_FAIL_TS = 54,
  TRACKER_REPORTED_FILM_GAMETYPE = 55,
  TRACKER_LOBBY_MIGRATION_FAIL_CANNOT_CONNECT_NEW_HOST = 56,
  TRACKER_LOBBY_MIGRATION_FAIL_CANNOT_HOST = 57,
  TRACKER_LOBBY_MIGRATION_FAIL_TIMEOUT = 58,
  TRACKER_LOBBY_MIGRATION_FAIL_TOO_FEW_AGREE = 59,
  TRACKER_LOBBY_MIGRATION_FAIL_CANNOT_CHOOSE_HOST = 60,
  TRACKER_LOBBY_MIGRATION_SUCCESS = 61,
  TRACKER_DEMO_UPLOAD_FAILURE = 62,
  TRACKER_THEATRE_PARTY_COUNT = 63,
  TRACKER_IGS_DOWNLOAD_COUNT = 64,
  TRACKER_IGS_DOWNLOAD_MSPOINTS = 65,
  TRACKER_NAT_TRAV_FAILURE_STAGE1 = 66,
  TRACKER_NAT_TRAV_FAILURE_STAGE2 = 67,
  TRACKER_NAT_TRAV_FAILURE_STAGE3 = 68,
  TRACKER_NAT_TRAV_SUCCESS_STAGE1 = 69,
  TRACKER_NAT_TRAV_SUCCESS_STAGE2 = 70,
  TRACKER_NAT_TRAV_SUCCESS_STAGE3 = 71,
  TRACKER_GAME_MIGRATION_FAIL_NO_GOOD_HOST = 72,
  TRACKER_GAME_MIGRATION_FAIL_TOO_MANY_MIGRATIONS = 73,
  TRACKER_GAME_MIGRATION_FAIL_TOO_FEW_PLAYERS = 74,
  TRACKER_GAME_MIGRATION_SUCCESS_ALL_RESPONDED = 75,
  TRACKER_GAME_MIGRATION_SUCCESS_TIMEOUT = 76,
  TRACKER_IGS_DOWNLOAD_USD = 77,
  TRACKER_IGS_DOWNLOAD_POUNDS = 78,
  TRACKER_IGS_DOWNLOAD_EURO = 79,
  TRACKER_EMBLEM_INVALID = 80,
  TRACKER_PIRACY_FAILED_HASHES = 81,
  TRACKER_PIRACY_FAILED_READS = 82,
  TRACKER_LB_CACHE_READ_FAILURE = 83,
  TRACKER_LB_MAX_WRITES = 84,
  TRACKER_USED_UP_ALL_CONSOLE_STAT_SLOTS = 85,
  TRACKER_CANNOT_BECOME_HOST = 86,
  TRACKER_CANNOT_BECOME_HOST_REASON = 87,
  TRACKER_USER_ON_NEW_CONSOLE = 88,
  TRACKER_TIMEOUT_PUBLIC = 89,
  TRACKER_TIMEOUT_LEAGUES = 90,
  TRACKER_STATS_CHECKSUM_OLD = 91,
  TRACKER_STATS_DECOMPRESS_ERROR_OLD = 92,
  TRACKER_STATS_RESET_VERSION = 93,
  TRACKER_STATS_RESET_BASIC = 94,
  TRACKER_STATS_RESET_DDL = 95,
  TRACKER_STATS_CHECKSUM = 96,
  TRACKER_STATS_DECOMPRESS_ERROR = 97,
  TRACKER_FAILED_STATS_XUID_RECEIVER_NEW = 98,
  TRACKER_FAILED_STATS_XUID_GIVER_NEW = 99,
  TRACKER_FAILED_STATS_XUID_ZERO = 100,
  TRACKER_LAGGED_HOST_DAMAGE = 101,
  TRACKER_CLASS_SETS_USED = 102,
  TRACKER_LOWMIP_READ_ERRORS = 103,
  TRACKER_COUNT = 104,
};

enum CameraMode
{
  CAM_NORMAL = 0,
  CAM_LINKED = 1,
  CAM_VEHICLE = 2,
  CAM_VEHICLE_THIRDPERSON = 3,
  CAM_VEHICLE_GUNNER = 4,
  CAM_TURRET = 5,
  CAM_MISSILE = 6,
  CAM_SPIKECAMERA = 7,
  CAM_SCRIPTED_EXTRACAM = 8,
  CAM_RADIANT = 9,
};

enum eSessionModes
{
  SESSIONMODE_OFFLINE = 0,
  SESSIONMODE_SYSTEMLINK = 1,
  SESSIONMODE_ONLINE = 2,
  SESSIONMODE_PRIVATE = 3,
  SESSIONMODE_ZOMBIES = 4,
  SESSIONMODE_MAX = 5,
  INVALID_SESSIONMODE = 6,
};

enum AntiBurnHudMenus
{
  HUD_MENU_HEALTH = 0,
  HUD_MENU_AMMO = 1,
  HUD_MENU_HEAT = 2,
  HUD_MENU_COMPASS = 3,
  HUD_MENU_STANCE = 4,
  HUD_MENU_OFFHAND = 5,
  HUD_MENU_OBJECTIVES = 6,
  HUD_MENU_SPRINT = 7,
  HUD_MENU_VEHICLE = 8,
};

enum LUI::LUISystem
{
  FIRST_LUI_SYSTEM = 0,
  LUI_SYSTEM_PARTY = 0,
  LUI_SYSTEM_LOBBY = 1,
  LUI_SYSTEM_THEATER = 2,
  LUI_SYSTEM_GAME_OPTIONS = 3,
  LUI_SYSTEM_WEBM_STREAMING = 4,
  LUI_SYSTEM_HUD_REFRESH = 5,
  LUI_SYSTEM_MATCHMAKING_PROGRESS = 6,
  NUM_LUI_SYSTEMS = 7,
};

typedef enum _TAG_UNNAMED_157
{
  CONST_SRC_CODE_MAYBE_DIRTY_PS_BEGIN = 0,
  CONST_SRC_CODE_LIGHT_POSITION = 0,
  CONST_SRC_CODE_LIGHT_DIFFUSE = 1,
  CONST_SRC_CODE_LIGHT_SPOTDIR = 2,
  CONST_SRC_CODE_LIGHT_SPOTFACTORS = 3,
  CONST_SRC_CODE_LIGHT_ATTENUATION = 4,
  CONST_SRC_CODE_LIGHT_FALLOFF_A = 5,
  CONST_SRC_CODE_LIGHT_FALLOFF_B = 6,
  CONST_SRC_CODE_LIGHT_SPOT_MATRIX0 = 7,
  CONST_SRC_CODE_LIGHT_SPOT_MATRIX1 = 8,
  CONST_SRC_CODE_LIGHT_SPOT_MATRIX2 = 9,
  CONST_SRC_CODE_LIGHT_SPOT_MATRIX3 = 10,
  CONST_SRC_CODE_LIGHT_SPOT_AABB = 11,
  CONST_SRC_CODE_LIGHT_CONE_CONTROL1 = 12,
  CONST_SRC_CODE_LIGHT_CONE_CONTROL2 = 13,
  CONST_SRC_CODE_LIGHT_SPOT_COOKIE_SLIDE_CONTROL = 14,
  CONST_SRC_CODE_SHADOW_PARMS = 15,
  CONST_SRC_CODE_SHADOWMAP_POLYGON_OFFSET = 16,
  CONST_SRC_CODE_RENDER_TARGET_SIZE = 17,
  CONST_SRC_CODE_UPSCALED_TARGET_SIZE = 18,
  CONST_SRC_CODE_DOF_EQUATION_VIEWMODEL_AND_FAR_BLUR = 19,
  CONST_SRC_CODE_DOF_EQUATION_SCENE = 20,
  CONST_SRC_CODE_DOF_LERP_SCALE = 21,
  CONST_SRC_CODE_DOF_LERP_BIAS = 22,
  CONST_SRC_CODE_DOF_ROW_DELTA = 23,
  CONST_SRC_CODE_PARTICLE_CLOUD_COLOR = 24,
  CONST_SRC_CODE_GAMETIME = 25,
  CONST_SRC_CODE_MAYBE_DIRTY_PS_END = 26,
  CONST_SRC_CODE_ALWAYS_DIRTY_PS_BEGIN = 26,
  CONST_SRC_CODE_FILTER_TAP_0 = 26,
  CONST_SRC_CODE_FILTER_TAP_1 = 27,
  CONST_SRC_CODE_FILTER_TAP_2 = 28,
  CONST_SRC_CODE_FILTER_TAP_3 = 29,
  CONST_SRC_CODE_FILTER_TAP_4 = 30,
  CONST_SRC_CODE_FILTER_TAP_5 = 31,
  CONST_SRC_CODE_FILTER_TAP_6 = 32,
  CONST_SRC_CODE_FILTER_TAP_7 = 33,
  CONST_SRC_CODE_COLOR_MATRIX_R = 34,
  CONST_SRC_CODE_COLOR_MATRIX_G = 35,
  CONST_SRC_CODE_COLOR_MATRIX_B = 36,
  CONST_SRC_CODE_ALWAYS_DIRTY_PS_END = 37,
  CONST_SRC_CODE_NEVER_DIRTY_PS_BEGIN = 37,
  CONST_SRC_CODE_SHADOWMAP_SWITCH_PARTITION = 37,
  CONST_SRC_CODE_SUNSHADOWMAP_PIXEL_SIZE = 38,
  CONST_SRC_CODE_SHADOWMAP_SCALE = 39,
  CONST_SRC_CODE_ZNEAR = 40,
  CONST_SRC_CODE_SUN_POSITION = 41,
  CONST_SRC_CODE_SUN_DIFFUSE = 42,
  CONST_SRC_CODE_LIGHTING_LOOKUP_SCALE = 43,
  CONST_SRC_CODE_DEBUG_BUMPMAP = 44,
  CONST_SRC_CODE_DEBUG_PERFORMANCE = 45,
  CONST_SRC_CODE_MATERIAL_COLOR = 46,
  CONST_SRC_CODE_FOG = 47,
  CONST_SRC_CODE_FOG2 = 48,
  CONST_SRC_CODE_FOG_COLOR = 49,
  CONST_SRC_CODE_SUN_FOG = 50,
  CONST_SRC_CODE_SUN_FOG_DIR = 51,
  CONST_SRC_CODE_SUN_FOG_COLOR = 52,
  CONST_SRC_CODE_GLOW_SETUP = 53,
  CONST_SRC_CODE_GLOW_APPLY = 54,
  CONST_SRC_CODE_COLOR_BIAS = 55,
  CONST_SRC_CODE_COLOR_TINT_BASE = 56,
  CONST_SRC_CODE_COLOR_TINT_DELTA = 57,
  CONST_SRC_CODE_OUTDOOR_FEATHER_PARMS = 58,
  CONST_SRC_CODE_SKY_TRANSITION = 59,
  CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST = 60,
  CONST_SRC_CODE_DLIGHT_SPOT_SHADOWMAP_PIXEL_ADJUST = 61,
  CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE = 62,
  CONST_SRC_CODE_CLIP_SPACE_LOOKUP_OFFSET = 63,
  CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX = 64,
  CONST_SRC_CODE_PARTICLE_CLOUD_VEL_WORLD = 65,
  CONST_SRC_CODE_DEPTH_FROM_CLIP = 66,
  CONST_SRC_CODE_CODE_MESH_ARG_0 = 67,
  CONST_SRC_CODE_CODE_MESH_ARG_1 = 68,
  CONST_SRC_CODE_CODE_MESH_ARG_LAST = 68,
  CONST_SRC_CODE_GRID_LIGHTING_COORDS_AND_VIS = 69,
  CONST_SRC_CODE_GRID_LIGHTING_SH_0 = 70,
  CONST_SRC_CODE_GRID_LIGHTING_SH_1 = 71,
  CONST_SRC_CODE_GRID_LIGHTING_SH_2 = 72,
  CONST_SRC_CODE_REFLECTION_LIGHTING_SH_0 = 73,
  CONST_SRC_CODE_REFLECTION_LIGHTING_SH_1 = 74,
  CONST_SRC_CODE_REFLECTION_LIGHTING_SH_2 = 75,
  CONST_SRC_CODE_WIND_DIRECTION = 76,
  CONST_SRC_CODE_MOTIONBLUR_DIRECTION_AND_MAGNITUDE = 77,
  CONST_SRC_CODE_COMPOSITE_FX_DISTORTION = 78,
  CONST_SRC_CODE_GLOW_BLOOM_SCALE = 79,
  CONST_SRC_CODE_COMPOSITE_FX_OVERLAY_TEXCOORD = 80,
  CONST_SRC_CODE_COLOR_BIAS1 = 81,
  CONST_SRC_CODE_COLOR_TINT_BASE1 = 82,
  CONST_SRC_CODE_COLOR_TINT_DELTA1 = 83,
  CONST_SRC_CODE_POSTFX_FADE_EFFECT = 84,
  CONST_SRC_CODE_VIEWPORT_DIMENSIONS = 85,
  CONST_SRC_CODE_FRAMEBUFFER_READ = 86,
  CONST_SRC_CODE_RESIZE_PARAMS1 = 87,
  CONST_SRC_CODE_RESIZE_PARAMS2 = 88,
  CONST_SRC_CODE_RESIZE_PARAMS3 = 89,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_0 = 90,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_1 = 91,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_2 = 92,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_3 = 93,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_4 = 94,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_5 = 95,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_6 = 96,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_7 = 97,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_8 = 98,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_9 = 99,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_10 = 100,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_11 = 101,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_12 = 102,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_13 = 103,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_14 = 104,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_15 = 105,
  CONST_SRC_CODE_CHARACTER_CHARRED_AMOUNT = 106,
  CONST_SRC_CODE_POSTFX_CONTROL0 = 107,
  CONST_SRC_CODE_POSTFX_CONTROL1 = 108,
  CONST_SRC_CODE_POSTFX_CONTROL2 = 109,
  CONST_SRC_CODE_POSTFX_CONTROL3 = 110,
  CONST_SRC_CODE_POSTFX_CONTROL4 = 111,
  CONST_SRC_CODE_POSTFX_CONTROL5 = 112,
  CONST_SRC_CODE_POSTFX_CONTROL6 = 113,
  CONST_SRC_CODE_POSTFX_CONTROL7 = 114,
  CONST_SRC_CODE_POSTFX_CONTROL8 = 115,
  CONST_SRC_CODE_POSTFX_CONTROL9 = 116,
  CONST_SRC_CODE_POSTFX_CONTROLA = 117,
  CONST_SRC_CODE_POSTFX_CONTROLB = 118,
  CONST_SRC_CODE_POSTFX_CONTROLC = 119,
  CONST_SRC_CODE_POSTFX_CONTROLD = 120,
  CONST_SRC_CODE_POSTFX_CONTROLE = 121,
  CONST_SRC_CODE_POSTFX_CONTROLF = 122,
  CONST_SRC_CODE_HDRCONTROL_0 = 123,
  CONST_SRC_CODE_HDRCONTROL_1 = 124,
  CONST_SRC_CODE_GLIGHT_POSXS = 125,
  CONST_SRC_CODE_GLIGHT_POSYS = 126,
  CONST_SRC_CODE_GLIGHT_POSZS = 127,
  CONST_SRC_CODE_GLIGHT_FALLOFFS = 128,
  CONST_SRC_CODE_GLIGHT_REDS = 129,
  CONST_SRC_CODE_GLIGHT_GREENS = 130,
  CONST_SRC_CODE_GLIGHT_BLUES = 131,
  CONST_SRC_CODE_DLIGHT_POSITION = 132,
  CONST_SRC_CODE_DLIGHT_DIFFUSE = 133,
  CONST_SRC_CODE_DLIGHT_ATTENUATION = 134,
  CONST_SRC_CODE_DLIGHT_FALLOFF = 135,
  CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_0 = 136,
  CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_1 = 137,
  CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_2 = 138,
  CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_3 = 139,
  CONST_SRC_CODE_DLIGHT_SPOT_DIR = 140,
  CONST_SRC_CODE_DLIGHT_SPOT_FACTORS = 141,
  CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_0 = 142,
  CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_1 = 143,
  CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_2 = 144,
  CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_3 = 145,
  CONST_SRC_CODE_CLOUD_LAYER_CONTROL0 = 146,
  CONST_SRC_CODE_CLOUD_LAYER_CONTROL1 = 147,
  CONST_SRC_CODE_CLOUD_LAYER_CONTROL2 = 148,
  CONST_SRC_CODE_CLOUD_LAYER_CONTROL3 = 149,
  CONST_SRC_CODE_CLOUD_LAYER_CONTROL4 = 150,
  CONST_SRC_CODE_HERO_LIGHTING_R = 151,
  CONST_SRC_CODE_HERO_LIGHTING_G = 152,
  CONST_SRC_CODE_HERO_LIGHTING_B = 153,
  CONST_SRC_CODE_LIGHT_HERO_SCALE = 154,
  CONST_SRC_CODE_CINEMATIC_BLUR_BOX = 155,
  CONST_SRC_CODE_CINEMATIC_BLUR_BOX2 = 156,
  CONST_SRC_CODE_ADSZSCALE = 157,
  CONST_SRC_CODE_UI3D_UV_SETUP_0 = 158,
  CONST_SRC_CODE_UI3D_UV_SETUP_1 = 159,
  CONST_SRC_CODE_UI3D_UV_SETUP_2 = 160,
  CONST_SRC_CODE_UI3D_UV_SETUP_3 = 161,
  CONST_SRC_CODE_UI3D_UV_SETUP_4 = 162,
  CONST_SRC_CODE_UI3D_UV_SETUP_5 = 163,
  CONST_SRC_CODE_CHARACTER_DISSOLVE_COLOR = 164,
  CONST_SRC_CODE_CAMERA_LOOK = 165,
  CONST_SRC_CODE_CAMERA_UP = 166,
  CONST_SRC_CODE_CAMERA_SIDE = 167,
  CONST_SRC_CODE_RIMINTENSITY = 168,
  CONST_SRC_CODE_GENERIC_PARAM0 = 169,
  CONST_SRC_CODE_GENERIC_PARAM1 = 170,
  CONST_SRC_CODE_GENERIC_PARAM2 = 171,
  CONST_SRC_CODE_GENERIC_PARAM3 = 172,
  CONST_SRC_CODE_GENERIC_PARAM4 = 173,
  CONST_SRC_CODE_GENERIC_PARAM5 = 174,
  CONST_SRC_CODE_GENERIC_PARAM6 = 175,
  CONST_SRC_CODE_GENERIC_PARAM7 = 176,
  CONST_SRC_CODE_GENERIC_EYEOFFSET = 177,
  CONST_SRC_CODE_GENERIC_QUADINTENSITY = 178,
  CONST_SRC_CODE_WEAPON_PARAM0 = 179,
  CONST_SRC_CODE_WEAPON_PARAM1 = 180,
  CONST_SRC_CODE_WEAPON_PARAM2 = 181,
  CONST_SRC_CODE_WEAPON_PARAM3 = 182,
  CONST_SRC_CODE_WEAPON_PARAM4 = 183,
  CONST_SRC_CODE_WEAPON_PARAM5 = 184,
  CONST_SRC_CODE_WEAPON_PARAM6 = 185,
  CONST_SRC_CODE_WEAPON_PARAM7 = 186,
  CONST_SRC_CODE_WEAPON_PARAM8 = 187,
  CONST_SRC_CODE_WEAPON_PARAM9 = 188,
  CONST_SRC_CODE_QRCODE_0 = 189,
  CONST_SRC_CODE_QRCODE_1 = 190,
  CONST_SRC_CODE_QRCODE_2 = 191,
  CONST_SRC_CODE_QRCODE_3 = 192,
  CONST_SRC_CODE_QRCODE_4 = 193,
  CONST_SRC_CODE_QRCODE_5 = 194,
  CONST_SRC_CODE_QRCODE_6 = 195,
  CONST_SRC_CODE_QRCODE_7 = 196,
  CONST_SRC_CODE_QRCODE_8 = 197,
  CONST_SRC_CODE_QRCODE_9 = 198,
  CONST_SRC_CODE_QRCODE_10 = 199,
  CONST_SRC_CODE_QRCODE_11 = 200,
  CONST_SRC_CODE_EYEOFFSET = 201,
  CONST_SRC_CODE_SKY_COLOR_MULTIPLIER = 202,
  CONST_SRC_CODE_EXTRA_CAM_PARAM = 203,
  CONST_SRC_CODE_EMBLEM_LUT_SELECTOR = 204,
  CONST_SRC_CODE_DEBUG_COLOR_OVERRIDE = 205,
  CONST_SRC_CODE_DEBUG_ALPHA_OVERRIDE = 206,
  CONST_SRC_CODE_DEBUG_NORMAL_OVERRIDE = 207,
  CONST_SRC_CODE_DEBUG_SPECULAR_OVERRIDE = 208,
  CONST_SRC_CODE_DEBUG_GLOSS_OVERRIDE = 209,
  CONST_SRC_CODE_DEBUG_OCCLUSION_OVERRIDE = 210,
  CONST_SRC_CODE_NEVER_DIRTY_PS_END = 211,
  CONST_SRC_CODE_COUNT_FLOAT4 = 211,
  CONST_SRC_FIRST_CODE_MATRIX = 211,
  CONST_SRC_CODE_WORLD_MATRIX = 211,
  CONST_SRC_CODE_INVERSE_WORLD_MATRIX = 212,
  CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX = 213,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX = 214,
  CONST_SRC_CODE_VIEW_MATRIX = 215,
  CONST_SRC_CODE_INVERSE_VIEW_MATRIX = 216,
  CONST_SRC_CODE_TRANSPOSE_VIEW_MATRIX = 217,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_MATRIX = 218,
  CONST_SRC_CODE_PROJECTION_MATRIX = 219,
  CONST_SRC_CODE_INVERSE_PROJECTION_MATRIX = 220,
  CONST_SRC_CODE_TRANSPOSE_PROJECTION_MATRIX = 221,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_PROJECTION_MATRIX = 222,
  CONST_SRC_CODE_WORLD_VIEW_MATRIX = 223,
  CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX = 224,
  CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX = 225,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX = 226,
  CONST_SRC_CODE_VIEW_PROJECTION_MATRIX = 227,
  CONST_SRC_CODE_INVERSE_VIEW_PROJECTION_MATRIX = 228,
  CONST_SRC_CODE_TRANSPOSE_VIEW_PROJECTION_MATRIX = 229,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_PROJECTION_MATRIX = 230,
  CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX = 231,
  CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX = 232,
  CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX = 233,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX = 234,
  CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX = 235,
  CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX = 236,
  CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX = 237,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX = 238,
  CONST_SRC_CODE_WORLD_OUTDOOR_LOOKUP_MATRIX = 239,
  CONST_SRC_CODE_INVERSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 240,
  CONST_SRC_CODE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 241,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 242,
  CONST_SRC_TOTAL_COUNT = 243,
  CONST_SRC_NONE = 244,
} TAG_UNNAMED_157, *PTAG_UNNAMED_157;

enum SuperflareDrawlistModes
{
  R_SUPERFLARE_DRAWLIST_OFF = 0,
  R_SUPERFLARE_DRAWLIST_PRE_VIEWMODEL = 1,
  R_SUPERFLARE_DRAWLIST_POST_VIEWMODEL = 2,
  R_SUPERFLARE_DRAWLIST_POST_BLUR = 3,
  R_SUPERFLARE_DRAWLIST_COUNT = 4,
};

enum fileShareLocation
{
  FILESHARE_LOCATION_INVALID = 0,
  FILESHARE_LOCATION_PUBLISHERSTORAGE = 1,
  FILESHARE_LOCATION_USERSTORAGE = 2,
  FILESHARE_LOCATION_POOLEDSTORAGE = 3,
};

enum GfxPrimStatsStage
{
  GFX_PRIM_STATS_STAGE_FIRST = 0,
  GFX_PRIM_STATS_STAGE_DEFAULT = 0,
  GFX_PRIM_STATS_STAGE_SHADOW_SUN = 1,
  GFX_PRIM_STATS_STAGE_SHADOW_SPOT = 2,
  GFX_PRIM_STATS_STAGE_PREPASS = 3,
  GFX_PRIM_STATS_STAGE_LIT = 4,
  GFX_PRIM_STATS_STAGE_SONAR = 5,
  GFX_PRIM_STATS_STAGE_SONAR_DEPTH = 6,
  GFX_PRIM_STATS_STAGE_DEPTH_HACK = 7,
  GFX_PRIM_STATS_STAGE_LIGHTMAP = 8,
  GFX_PRIM_STATS_STAGE_LIT_QUASI_OPAQUE = 9,
  GFX_PRIM_STATS_STAGE_LIT_TRANS = 10,
  GFX_PRIM_STATS_STAGE_LIT_FX = 11,
  GFX_PRIM_STATS_STAGE_EMISSIVE_OPAQUE = 12,
  GFX_PRIM_STATS_STAGE_EMISSIVE_TRANS = 13,
  GFX_PRIM_STATS_STAGE_EMISSIVE_FX = 14,
  GFX_PRIM_STATS_STAGE_2D = 15,
  GFX_PRIM_STATS_STAGE_COUNT = 16,
  GFX_PRIM_STATS_STAGE_LAST = 15,
};

enum GfxPrimStatsCounters
{
  GFX_PRIM_STATS_COUNTER_PRIMS = 0,
  GFX_PRIM_STATS_COUNTER_TRIS = 1,
  GFX_PRIM_STATS_COUNTER_SURFS = 2,
  GFX_PRIM_STATS_COUNTER_MATS = 3,
  GFX_PRIM_STATS_COUNTER_STATIC_IDXS = 4,
  GFX_PRIM_STATS_COUNTER_STATIC_VERTS = 5,
  GFX_PRIM_STATS_COUNTER_DYNAMIC_IDXS = 6,
  GFX_PRIM_STATS_COUNTER_DYNAMIC_VERTS = 7,
  GFX_PRIM_STATS_COUNTER_COUNT = 8,
};

enum eDogLookUp
{
  DOG_ANIMINDEX_LOOK_UP_ROOT = 0,
  DOG_ANIMINDEX_LOOK_UP = 1,
  DOG_ANIMINDEX_LOOK_UP_ATTACK = 2,
  DOG_ANIMINDEX_LOOK_UP_COUNT = 3,
};

enum GfxDepthRangeType
{
  GFX_DEPTH_RANGE_SCENE = 0,
  GFX_DEPTH_RANGE_VIEWMODEL = 0x40000000,
  GFX_DEPTH_RANGE_FULL = -1,
};

enum CGameID::EGameIDType
{
  k_EGameIDTypeApp = 0,
  k_EGameIDTypeGameMod = 1,
  k_EGameIDTypeShortcut = 2,
  k_EGameIDTypeP2P = 3,
};

typedef enum _TAG_UNNAMED_158
{
  XSURFACE_FLAG_QUANTIZED = 1,
  XSURFACE_FLAG_SKINNED = 2,
  XSURFACE_FLAG_CONSTANT_COLOR = 4,
  XSURFACE_FLAG_DEFORMED = 128,
} TAG_UNNAMED_158, *PTAG_UNNAMED_158;

enum FLAC__StreamDecoderReadStatus
{
  FLAC__STREAM_DECODER_READ_STATUS_CONTINUE = 0,
  FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM = 1,
  FLAC__STREAM_DECODER_READ_STATUS_ABORT = 2,
};

struct IStream
{
}; /* size: 0x0004 */

typedef enum _TAG_UNNAMED_159
{
  BG_EMBLEM_LOCKED = 0,
  BG_EMBLEM_PURCHASED = 1,
  BG_EMBLEM_AFFORDABLE = 2,
  BG_EMBLEM_CATEGORY_CUSTOM_START = 3,
  BG_EMBLEM_CATEGORY_CUSTOM_END = 15,
  BG_EMBLEM_CATEGORY_COUNT = 16,
} TAG_UNNAMED_159, *PTAG_UNNAMED_159;

enum bdContentStatusCode
{
  BD_INVALID_KEY = 0,
  BD_CONTENT_UNLOCKABLE = 1,
  BD_CONTENT_UNLOCKED_TO_OTHER_USER = 2,
  BD_CONTENT_UNLOCKED_TO_THIS_USER = 3,
  BD_MAX_CONTENT_STATUS_CODE = 4,
};

enum ActorAnimCategories
{
  ACTOR_ANIMATION_CATEGORY_INIT = 0,
  ACTOR_ANIMATION_CATEGORY_STOP = 1,
  ACTOR_ANIMATION_CATEGORY_MOVE = 2,
  ACTOR_ANIMATION_CATEGORY_COMBAT = 3,
  ACTOR_ANIMATION_CATEGORY_PAIN = 4,
  ACTOR_ANIMATION_CATEGORY_DEATH = 5,
  ACTOR_ANIMATION_CATEGORY_FLASHED = 6,
  ACTOR_ANIMATION_CATEGORY_TRAVERSE = 7,
};

typedef enum _TAG_UNNAMED_160
{
  BG_EMBLEM_BGCATEGORY_LOCKED = 0,
  BG_EMBLEM_BGCATEGORY_START = 1,
  BG_EMBLEM_BGCATEGORY_END = 15,
  BG_EMBLEM_BGCATEGORY_COUNT = 16,
} TAG_UNNAMED_160, *PTAG_UNNAMED_160;

enum migrateClientState_t
{
  MIGRATE_CLIENT_IDLE = 0,
  MIGRATE_CLIENT_SENDING_PACKETS = 1,
  MIGRATE_WAITING_FOR_RESPONSES = 2,
  MIGRATE_ACTIVE = 3,
  MIGRATE_BECOMING_HOST = 4,
  MIGRATE_CLIENT_NUM_STATES = 5,
};

enum EVoiceResult
{
  k_EVoiceResultOK = 0,
  k_EVoiceResultNotInitialized = 1,
  k_EVoiceResultNotRecording = 2,
  k_EVoiceResultNoData = 3,
  k_EVoiceResultBufferTooSmall = 4,
  k_EVoiceResultDataCorrupted = 5,
  k_EVoiceResultRestricted = 6,
  k_EVoiceResultUnsupportedCodec = 7,
};

typedef enum _TAG_UNNAMED_161
{
  STREAM_SRC_POSITION = 0,
  STREAM_SRC_COLOR = 1,
  STREAM_SRC_TEXCOORD_0 = 2,
  STREAM_SRC_NORMAL = 3,
  STREAM_SRC_TANGENT = 4,
  STREAM_SRC_TEXCOORD_1 = 5,
  STREAM_SRC_OPTIONAL_BEGIN = 6,
  STREAM_SRC_PRE_OPTIONAL_BEGIN = 5,
  STREAM_SRC_TEXCOORD_2 = 6,
  STREAM_SRC_TEXCOORD_3 = 7,
  STREAM_SRC_NORMAL_TRANSFORM_0 = 8,
  STREAM_SRC_NORMAL_TRANSFORM_1 = 9,
  STREAM_SRC_BLEND_WEIGHT = 10,
  STREAM_SRC_COUNT = 11,
} TAG_UNNAMED_161, *PTAG_UNNAMED_161;

struct D3D11_TEX1D_ARRAY_UAV
{
  /* 0x0000 */ unsigned int MipSlice;
  /* 0x0004 */ unsigned int FirstArraySlice;
  /* 0x0008 */ unsigned int ArraySize;
}; /* size: 0x000c */

typedef enum _TAG_UNNAMED_162
{
  STREAM_DST_POSITION = 0,
  STREAM_DST_NORMAL = 1,
  STREAM_DST_COLOR_0 = 2,
  STREAM_DST_COLOR_1 = 3,
  STREAM_DST_DEPTH = 4,
  STREAM_DST_TEXCOORD_0 = 5,
  STREAM_DST_TEXCOORD_1 = 6,
  STREAM_DST_TEXCOORD_2 = 7,
  STREAM_DST_TEXCOORD_3 = 8,
  STREAM_DST_TEXCOORD_4 = 9,
  STREAM_DST_TEXCOORD_5 = 10,
  STREAM_DST_TEXCOORD_6 = 11,
  STREAM_DST_TEXCOORD_7 = 12,
  STREAM_DST_TEXCOORD_8 = 13,
  STREAM_DST_TEXCOORD_9 = 14,
  STREAM_DST_TEXCOORD_10 = 15,
  STREAM_DST_TEXCOORD_11 = 16,
  STREAM_DST_TEXCOORD_12 = 17,
  STREAM_DST_TEXCOORD_13 = 18,
  STREAM_DST_BLENDWEIGHT = 19,
  STREAM_DST_COUNT = 20,
} TAG_UNNAMED_162, *PTAG_UNNAMED_162;

enum bidTypes_e
{
  BID_RELATED = 0,
  BID_NOT_MET = 1,
  BID_RANDOM = 2,
  BID_SAME_MACHINE = 3,
  NUM_BIDS = 4,
};

enum demoBookmarkType
{
  DEMO_BOOKMARK_KILL = 0,
  DEMO_BOOKMARK_GAME_FIRST = 0,
  DEMO_BOOKMARK_EVENT = 1,
  DEMO_BOOKMARK_ZM_ROUND_END = 2,
  DEMO_BOOKMARK_ZM_PLAYER_DOWNED = 3,
  DEMO_BOOKMARK_ZM_PLAYER_REVIVED = 4,
  DEMO_BOOKMARK_ZM_PLAYER_BLEDOUT = 5,
  DEMO_BOOKMARK_ZM_PLAYER_USE_MAGICBOX = 6,
  DEMO_BOOKMARK_SCORE_EVENT = 7,
  DEMO_BOOKMARK_MEDAL = 8,
  DEMO_BOOKMARK_ROUND_RESULT = 9,
  DEMO_BOOKMARK_GAME_RESULT = 10,
  DEMO_BOOKMARK_ZM_POWERUP_DROPPED = 11,
  DEMO_BOOKMARK_ZM_PLAYER_POWERUP_GRABBED = 12,
  DEMO_BOOKMARK_ZM_PLAYER_PERK = 13,
  DEMO_BOOKMARK_ZM_POWER = 14,
  DEMO_BOOKMARK_ZM_PLAYER_DOOR = 15,
  DEMO_BOOKMARK_ZM_PLAYER_BUILDABLE_PLACED = 16,
  DEMO_BOOKMARK_ZM_PLAYER_USE_PACKAPUNCH = 17,
  DEMO_BOOKMARK_ZM_PLAYER_RAMPAGE = 18,
  DEMO_BOOKMARK_ZM_PLAYER_GRENADE_SPECIAL = 19,
  DEMO_BOOKMARK_ZM_PLAYER_GRENADE_MULTIATTACK = 20,
  DEMO_BOOKMARK_ZM_PLAYER_MEAT_STINK = 21,
  DEMO_BOOKMARK_ZM_PLAYER_GRABBED_MAGICBOX = 22,
  DEMO_BOOKMARK_ZM_PLAYER_GRABBED_PACKAPUNCH = 23,
  DEMO_BOOKMARK_ZM_PLAYER_GRENADE_SPECIAL_LONG = 24,
  DEMO_BOOKMARK_GAME_LAST = 24,
  DEMO_BOOKMARK_BADSPAWN = 25,
  DEMO_BOOKMARK_BADSERVERFRAME = 26,
  DEMO_BOOKMARK_BADSERVERBANDWIDTH = 27,
  DEMO_BOOKMARK_LAST = 28,
};

enum EXT_INSERTTYPE
{
  EXT_INSERTTYPE_BEFORE = 0,
  EXT_INSERTTYPE_AFTER = 1,
};

struct tagBLOB
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned char* pBlobData;
}; /* size: 0x0008 */

typedef enum _TAG_UNNAMED_163
{
  IPAK_ADDPACKFILE_ERROR_SPLIT = -9,
  IPAK_ADDPACKFILE_ERROR_NO_FREE_IPAK_SLOT = -8,
  IPAK_ADDPACKFILE_ERROR_EMPTY = -7,
  IPAK_ADDPACKFILE_ERROR_NO_INDEX_SECTION = -6,
  IPAK_ADDPACKFILE_ERROR_NO_DATA_SECTION = -5,
  IPAK_ADDPACKFILE_ERROR_VERSION_MISMATCH = -4,
  IPAK_ADDPACKFILE_ERROR_INVALID_HEADER = -3,
  IPAK_ADDPACKFILE_ERROR_FILE_READ = -2,
  IPAK_ADDPACKFILE_ERROR_FILE_OPEN = -1,
  IPAK_ADDPACKFILE_SUCCESS = 0,
  IPAK_ADDPACKFILE_ALREADY_ADDED = 1,
} TAG_UNNAMED_163, *PTAG_UNNAMED_163;

enum D3D11_CLEAR_FLAG
{
  D3D11_CLEAR_DEPTH = 1,
  D3D11_CLEAR_STENCIL = 2,
};

typedef enum _TAG_UNNAMED_164
{
  FOG_NONE = 0,
  FOG_SERVER = 1,
  FOG_CURRENT = 2,
  FOG_LAST = 3,
  FOG_TARGET = 4,
  FOG_WORLDVOLUME = 5,
  FOG_COUNT = 6,
} TAG_UNNAMED_164, *PTAG_UNNAMED_164;

enum CURLMSG
{
  CURLMSG_NONE = 0,
  CURLMSG_DONE = 1,
  CURLMSG_LAST = 2,
};

typedef enum _TAG_UNNAMED_165
{
  F_none = 0,
  F_sub = 1,
  F_up = 2,
  F_avg = 3,
  F_paeth = 4,
  F_avg_first = 5,
  F_paeth_first = 6,
} TAG_UNNAMED_165, *PTAG_UNNAMED_165;

enum MaterialTextureSource
{
  TEXTURE_SRC_CODE_BLACK = 0,
  TEXTURE_SRC_CODE_WHITE = 1,
  TEXTURE_SRC_CODE_IDENTITY_NORMAL_MAP = 2,
  TEXTURE_SRC_CODE_MODEL_LIGHTING = 3,
  TEXTURE_SRC_CODE_LIGHTMAP_PRIMARY = 4,
  TEXTURE_SRC_CODE_LIGHTMAP_SECONDARY = 5,
  TEXTURE_SRC_CODE_SHADOWMAP_SUN = 6,
  TEXTURE_SRC_CODE_SHADOWMAP_SPOT = 7,
  TEXTURE_SRC_CODE_FEEDBACK = 8,
  TEXTURE_SRC_CODE_RESOLVED_POST_SUN = 9,
  TEXTURE_SRC_CODE_RESOLVED_SCENE = 10,
  TEXTURE_SRC_CODE_POST_EFFECT_SRC = 11,
  TEXTURE_SRC_CODE_POST_EFFECT_GODRAYS = 12,
  TEXTURE_SRC_CODE_POST_EFFECT_0 = 13,
  TEXTURE_SRC_CODE_POST_EFFECT_1 = 14,
  TEXTURE_SRC_CODE_LIGHT_ATTENUATION = 15,
  TEXTURE_SRC_CODE_DLIGHT_ATTENUATION = 16,
  TEXTURE_SRC_CODE_OUTDOOR = 17,
  TEXTURE_SRC_CODE_FLOATZ = 18,
  TEXTURE_SRC_CODE_PROCESSED_FLOATZ = 19,
  TEXTURE_SRC_CODE_RAW_FLOATZ = 20,
  TEXTURE_SRC_CODE_STENCIL = 21,
  TEXTURE_SRC_CODE_CINEMATIC_Y = 22,
  TEXTURE_SRC_CODE_CINEMATIC_CR = 23,
  TEXTURE_SRC_CODE_CINEMATIC_CB = 24,
  TEXTURE_SRC_CODE_CINEMATIC_A = 25,
  TEXTURE_SRC_CODE_REFLECTION_PROBE = 26,
  TEXTURE_SRC_CODE_FEATHER_FLOAT_Z = 27,
  TEXTURE_SRC_CODE_TEXTURE_0 = 28,
  TEXTURE_SRC_CODE_TEXTURE_1 = 29,
  TEXTURE_SRC_CODE_TEXTURE_2 = 30,
  TEXTURE_SRC_CODE_TEXTURE_3 = 31,
  TEXTURE_SRC_CODE_IMPACT_MASK_DEPRECATED = 32,
  TEXTURE_SRC_CODE_UI3D = 33,
  TEXTURE_SRC_CODE_MISSILE_CAM = 34,
  TEXTURE_SRC_CODE_MISSILE_CAM_0 = 35,
  TEXTURE_SRC_CODE_MISSILE_CAM_1 = 36,
  TEXTURE_SRC_CODE_MISSILE_CAM_2 = 37,
  TEXTURE_SRC_CODE_MISSILE_CAM_3 = 38,
  TEXTURE_SRC_CODE_COMPOSITE_RESULT = 39,
  TEXTURE_SRC_CODE_HEATMAP = 40,
  TEXTURE_SRC_CODE_SONAR_COLOR = 41,
  TEXTURE_SRC_CODE_SONAR_DEPTH = 42,
  TEXTURE_SRC_CODE_QRCODE_0 = 43,
  TEXTURE_SRC_CODE_QRCODE_1 = 44,
  TEXTURE_SRC_CODE_QRCODE_2 = 45,
  TEXTURE_SRC_CODE_QRCODE_3 = 46,
  TEXTURE_SRC_CODE_QRCODE_4 = 47,
  TEXTURE_SRC_CODE_QRCODE_5 = 48,
  TEXTURE_SRC_CODE_QRCODE_6 = 49,
  TEXTURE_SRC_CODE_QRCODE_7 = 50,
  TEXTURE_SRC_CODE_QRCODE_8 = 51,
  TEXTURE_SRC_CODE_QRCODE_9 = 52,
  TEXTURE_SRC_CODE_QRCODE_10 = 53,
  TEXTURE_SRC_CODE_QRCODE_11 = 54,
  TEXTURE_SRC_CODE_COUNT = 55,
};

typedef enum _TAG_UNNAMED_166
{
  SCENE_VIEW_CAMERA = 0,
  SCENE_VIEW_SUNSHADOW_0 = 1,
  SCENE_VIEW_SUNSHADOW_1 = 2,
  SCENE_VIEW_COUNT = 3,
  SCENE_VIEW_SPOTSHADOW_0 = 3,
  SCENE_VIEW_SPOTSHADOW_1 = 4,
  SCENE_VIEW_SPOTSHADOW_2 = 5,
  SCENE_VIEW_SPOTSHADOW_3 = 6,
  SCENE_VIEW_COUNT_ENTVIS = 7,
} TAG_UNNAMED_166, *PTAG_UNNAMED_166;

enum votePossible_e
{
  VOTE_UNKNOWN = 0,
  VOTE_POSSIBLE = 1,
  VOTE_NOTPOSSIBLE = 2,
};

struct dynent_hit
{
  /* 0x0000 */ unsigned short absId;
}; /* size: 0x0002 */

typedef enum _TAG_UNNAMED_167
{
  STATE_FLAG_CULL_BACK = 1,
  STATE_FLAG_CULL_FRONT = 2,
  STATE_FLAG_DECAL = 4,
  STATE_FLAG_WRITES_DEPTH = 8,
  STATE_FLAG_USES_DEPTH_BUFFER = 16,
  STATE_FLAG_USES_STENCIL_BUFFER = 32,
  STATE_FLAG_CULL_BACK_SHADOW = 64,
  STATE_FLAG_CULL_FRONT_SHADOW = 128,
} TAG_UNNAMED_167, *PTAG_UNNAMED_167;

enum pointsSpent_t
{
  POINTSSPENT_IGNORE = 0,
  POINTSSPENT_EMBLEM_LAYER = 1,
  POINTSSPENT_EMBLEM_ICON = 2,
  POINTSSPENT_CONTRACT = 3,
  POINTSSPENT_UNLOCKABLE_CLANTAG = 4,
  POINTSSPENT_UNLOCKABLE_ITEM = 5,
  POINTSSPENT_UNLOCKABLE_SELL = 6,
  POINTSSPENT_UNLOCKABLE_ATTACHMENT = 7,
  POINTSSPENT_UNLOCKABLE_ATTACHMENT_POINT = 8,
  POINTSSPENT_UNLOCKABLE_ATTACHMENT_OPTION = 9,
  POINTSSPENT_ESCROW = 10,
  POINTSSPENT_GUEST_SIGNIN = 11,
};

typedef enum _TAG_UNNAMED_168
{
  R_ZEBRASTRIPE_LEVEL_0 = 0,
  R_ZEBRASTRIPE_LEVEL_1 = 1,
  R_ZEBRASTRIPE_LEVEL_2 = 2,
  R_ZEBRASTRIPE_LEVEL_3 = 3,
  R_ZEBRASTRIPE_COUNT = 3,
} TAG_UNNAMED_168, *PTAG_UNNAMED_168;

enum DWRITE_RENDERING_MODE
{
};

enum bdUCDAccountStatus::bdElitePaidStatus
{
  BD_ELITE_PAID_UNKNOWN = -1,
  BD_ELITE_PAID_FALSE = 0,
  BD_ELITE_PAID_TRUE = 1,
};

typedef enum _TAG_UNNAMED_169
{
  IMG_CATEGORY_UNKNOWN = 0,
  IMG_CATEGORY_AUTO_GENERATED = 1,
  IMG_CATEGORY_LIGHTMAP = 2,
  IMG_CATEGORY_LOAD_FROM_FILE = 3,
  IMG_CATEGORY_RAW = 4,
  IMG_CATEGORY_FIRST_UNMANAGED = 5,
  IMG_CATEGORY_RENDERTARGET = 5,
  IMG_CATEGORY_TEMP = 6,
} TAG_UNNAMED_169, *PTAG_UNNAMED_169;

struct IEnumSTATSTG
{
}; /* size: 0x0004 */

typedef enum _TAG_UNNAMED_170
{
  TEXTURE_FILTER_DISABLED = 0,
  TEXTURE_FILTER_NEAREST = 1,
  TEXTURE_FILTER_LINEAR = 2,
  TEXTURE_FILTER_ANISO2X = 3,
  TEXTURE_FILTER_ANISO4X = 4,
  TEXTURE_FILTER_COMPARE = 5,
} TAG_UNNAMED_170, *PTAG_UNNAMED_170;

enum PmMoveSpeeds
{
  PM_MOVE_SPEED_RUN = 0,
  PM_MOVE_SPEED_WALK = 1,
  PM_MOVE_SPEED_SHUFFLE = 2,
  NUM_PM_MOVE_SPEED = 3,
};

enum GfxBlend
{
  GFXS_BLEND_DISABLED = 0,
  GFXS_BLEND_ZERO = 1,
  GFXS_BLEND_ONE = 2,
  GFXS_BLEND_SRCCOLOR = 3,
  GFXS_BLEND_INVSRCCOLOR = 4,
  GFXS_BLEND_SRCALPHA = 5,
  GFXS_BLEND_INVSRCALPHA = 6,
  GFXS_BLEND_DESTALPHA = 7,
  GFXS_BLEND_INVDESTALPHA = 8,
  GFXS_BLEND_DESTCOLOR = 9,
  GFXS_BLEND_INVDESTCOLOR = 10,
  GFXS_BLEND_MASK = 15,
};

typedef enum _TAG_UNNAMED_171
{
  GFXS0_SRCBLEND_RGB_SHIFT = 0,
  GFXS0_SRCBLEND_RGB_MASK = 15,
  GFXS0_DSTBLEND_RGB_SHIFT = 4,
  GFXS0_DSTBLEND_RGB_MASK = 240,
  GFXS0_BLENDOP_RGB_SHIFT = 8,
  GFXS0_BLENDOP_RGB_MASK = 1792,
  GFXS0_BLEND_RGB_MASK = 2047,
  GFXS0_ATEST_SHIFT = 11,
  GFXS0_ATEST_DISABLE = 2048,
  GFXS0_ATEST_GT_0 = 0,
  GFXS0_ATEST_GE_128 = 4096,
  GFXS0_ATEST_MASK = 4096,
  GFXS0_CULL_SHIFT = 14,
  GFXS0_CULL_NONE = 16384,
  GFXS0_CULL_BACK = 0xffff8000,
  GFXS0_CULL_FRONT = 0xffffc000,
  GFXS0_CULL_MASK = 0xffffc000,
  GFXS0_SRCBLEND_ALPHA_SHIFT = 16,
  GFXS0_SRCBLEND_ALPHA_MASK = 0xf0000,
  GFXS0_DSTBLEND_ALPHA_SHIFT = 20,
  GFXS0_DSTBLEND_ALPHA_MASK = 0xf00000,
  GFXS0_BLENDOP_ALPHA_SHIFT = 24,
  GFXS0_BLENDOP_ALPHA_MASK = 0x7000000,
  GFXS0_BLEND_ALPHA_MASK = 0x7ff0000,
  GFXS0_COLORWRITE_RGB = 0x8000000,
  GFXS0_COLORWRITE_ALPHA = 0x10000000,
  GFXS0_COLORWRITE_MASK = 0x18000000,
  GFXS0_POLYMODE_LINE = -2147483648,
  GFXS1_DEPTHWRITE = 1,
  GFXS1_DEPTHTEST_DISABLE = 2,
  GFXS1_DEPTHTEST_SHIFT = 2,
  GFXS1_DEPTHTEST_ALWAYS = 0,
  GFXS1_DEPTHTEST_LESS = 4,
  GFXS1_DEPTHTEST_EQUAL = 8,
  GFXS1_DEPTHTEST_LESSEQUAL = 12,
  GFXS1_DEPTHTEST_MASK = 12,
  GFXS1_DEPTHFUNC_MASK = 15,
  GFXS1_POLYGON_OFFSET_SHIFT = 4,
  GFXS1_POLYGON_OFFSET_0 = 0,
  GFXS1_POLYGON_OFFSET_1 = 16,
  GFXS1_POLYGON_OFFSET_2 = 32,
  GFXS1_POLYGON_OFFSET_SHADOWMAP = 48,
  GFXS1_POLYGON_OFFSET_MASK = 48,
  GFXS1_STENCIL_FRONT_ENABLE = 64,
  GFXS1_STENCIL_BACK_ENABLE = 128,
  GFXS1_STENCIL_MASK = 192,
  GFXS1_STENCIL_FRONT_PASS_SHIFT = 8,
  GFXS1_STENCIL_FRONT_FAIL_SHIFT = 11,
  GFXS1_STENCIL_FRONT_ZFAIL_SHIFT = 14,
  GFXS1_STENCIL_FRONT_FUNC_SHIFT = 17,
  GFXS1_STENCIL_FRONT_MASK = 0xfff00,
  GFXS1_STENCIL_BACK_PASS_SHIFT = 20,
  GFXS1_STENCIL_BACK_FAIL_SHIFT = 23,
  GFXS1_STENCIL_BACK_ZFAIL_SHIFT = 26,
  GFXS1_STENCIL_BACK_FUNC_SHIFT = 29,
  GFXS1_STENCIL_BACK_MASK = -1048576,
  GFXS1_STENCILFUNC_FRONTBACK_MASK = -535953408,
  GFXS1_STENCILOP_FRONTBACK_MASK = 0x1ff1ff00,
} TAG_UNNAMED_171, *PTAG_UNNAMED_171;

enum D2D1_WINDOW_STATE
{
};

enum invalid_cmd_hint_t
{
  INVALID_CMD_NO_HINT = 0,
  INVALID_CMD_STAND_HINT = 1,
  INVALID_CMD_CROUCH_HINT = 2,
  INVALID_CMD_PRONE_HINT = 3,
};

enum GfxTextureArg
{
  GFXS_TEXARG_CONSTANT = 0,
  GFXS_TEXARG_CURRENT = 1,
  GFXS_TEXARG_COLOR_0 = 2,
  GFXS_TEXARG_COLOR_1 = 3,
  GFXS_TEXARG_TEMP = 4,
  GFXS_TEXARG_TEXTURE = 5,
  GFXS_TEXARG_TFACTOR = 6,
  GFXS_TEXARG_COUNT = 7,
  GFXS_TEXARG_BASE_BITS = 3,
  GFXS_TEXARG_BASE_MASK = 7,
  GFXS_TEXARG_COMPLEMENT = 8,
  GFXS_TEXARG_ALPHA_REPLICATE = 16,
  GFXS_TEXARG_BITS = 5,
  GFXS_TEXARG_MASK = 31,
};

enum surfaceType_t
{
  SF_TRIANGLES = 0,
  SF_TRIANGLES_NO_SUN_SHADOW = 1,
  SF_BEGIN_STATICMODEL = 2,
  SF_STATICMODEL_RIGID_NO_SUN_SHADOW = 2,
  SF_STATICMODEL_RIGID = 3,
  SF_STATICMODEL_SKINNED = 4,
  SF_END_STATICMODEL = 5,
  SF_BMODEL = 5,
  SF_BEGIN_XMODEL = 6,
  SF_XMODEL_RIGID = 6,
  SF_XMODEL_RIGID_NO_SUN_SHADOW = 7,
  SF_XMODEL_RIGID_SKINNED = 8,
  SF_XMODEL_SKINNED = 9,
  SF_XMODEL_SKINNED_NO_SUN_SHADOW = 10,
  SF_END_XMODEL = 11,
  SF_BEGIN_FX = 11,
  SF_CODE_MESH = 11,
  SF_MARK_MESH = 12,
  SF_PARTICLE_CLOUD = 13,
  SF_ROPE_MESH = 14,
  SF_GLASS_MESH = 15,
  SF_END_FX = 16,
  SF_NUM_SURFACE_TYPES = 16,
  SF_FORCE_32_BITS = -1,
};

enum demoClipState
{
  DEMO_CLIP_IDLE = 0,
  DEMO_CLIP_RECORD_UNCOMPRESSED_SNAPHOT = 1,
  DEMO_CLIP_RECORD_CONTINUOUS = 2,
  DEMO_CLIP_PAUSED = 3,
  DEMO_CLIP_PREVIEW = 4,
  DEMO_CLIP_STREAMING = 5,
};

enum LocalTaskState
{
  LOCAL_TASK_STATE_INPROGRESS = 0,
  LOCAL_TASK_STATE_COMPLETED = 1,
  LOCAL_TASK_STATE_FAILED = 2,
};

enum VehicleTypes
{
  VEH_WHEELS_4 = 0,
  VEH_MOTORCYCLE = 1,
  VEH_TANK = 2,
  VEH_PLANE = 3,
  VEH_BOAT = 4,
  VEH_ARTILLERY = 5,
  VEH_HELICOPTER = 6,
  NUM_VEHICLE_TYPES = 7,
};

typedef enum _TAG_UNNAMED_172
{
  CUSTOM_SAMPLER_REFLECTION_PROBE = 0,
  CUSTOM_SAMPLER_LIGHTMAP_PRIMARY = 1,
  CUSTOM_SAMPLER_LIGHTMAP_SECONDARY = 2,
  CUSTOM_SAMPLER_COUNT = 3,
} TAG_UNNAMED_172, *PTAG_UNNAMED_172;

enum demoSavePopup
{
  DEMO_SAVE_POPUP_CLIP = 0,
  DEMO_SAVE_POPUP_SCREENSHOT = 1,
};

enum NitrousVehicle::NitrousVehicleFlags
{
  FLAG_PAUSED = 1,
  FLAG_INITIALIZED = 2,
  FLAG_SCRIPT_CONTROL = 4,
  FLAG_DEBUG_RENDER = 8,
  FLAG_PLAYERS_VEHICLE = 64,
  FLAG_ATTACHED_PATH = 128,
  FLAG_DRIVING_PATH = 256,
  FLAG_ACTUATOR_DISABLED = 512,
  FLAG_IN_WATER = 1024,
  FLAG_DISABLE_STABILIZERS = 2048,
  FLAG_STUNNED = 4096,
  FLAG_NEEDS_UNPAUSE = 8192,
  FLAG_NEEDS_ENTITIES_WHEELS_COLLISION = 16384,
  FLAG_NEEDS_WHEEL_SETUP = 0xffff8000,
  FLAG_BOOSTING = 0x10000,
  FLAG_ANIMSCRIPTED = 0x20000,
};

class bdSessionID
{
  /* 0x0000 */ long Padding_72;
  /* 0x0004 */ class bdSecurityID m_sessionID;
}; /* size: 0x000c */

class bdSessionInvite
{
  /* 0x0000 */ long Padding_73[2];
  /* 0x0008 */ unsigned __int64 m_senderID;
  /* 0x0010 */ char m_senderName[64];
  /* 0x0050 */ class bdSessionID m_sessionID;
  /* 0x005c */ unsigned char m_attachment[1024];
  /* 0x045c */ unsigned int m_attachmentSize;
}; /* size: 0x0460 */

enum NitrousVehicle::NitrousVehicleModelFlags
{
  FLAG_IS_POWER_BRAKING = 1,
  FLAG_IS_BRAKING = 2,
  FLAG_IS_FORWARD_ACCELERATION = 4,
  FLAG_IS_REVERSE_ACCELERATION = 8,
  FLAG_IS_COASTING = 16,
};

enum svc_ops_e
{
  svc_nop = 0,
  svc_gamestate = 1,
  svc_configstring = 2,
  svc_gameinformation = 3,
  svc_baseline = 4,
  svc_entitycache = 5,
  svc_dynentstate = 6,
  svc_destructiblestate = 7,
  svc_ropestate = 8,
  svc_glassstate = 9,
  svc_serverCommand = 10,
  svc_download = 11,
  svc_snapshot = 12,
  svc_servercommands = 13,
  svc_EOF = 14,
};

enum TaskGroup
{
  TASK_GROUP_UNKNOWN = 0,
  TASK_GROUP_XSESSION = 1,
};

struct ID3D11ShaderResourceView
{
}; /* size: 0x0004 */

typedef struct _s__RTTIClassHierarchyDescriptor
{
  /* 0x0000 */ unsigned long signature;
  /* 0x0004 */ unsigned long attributes;
  /* 0x0008 */ unsigned long numBaseClasses;
  /* 0x000c */ const struct _s__RTTIBaseClassArray* pBaseClassArray;
} s__RTTIClassHierarchyDescriptor, *Ps__RTTIClassHierarchyDescriptor; /* size: 0x0010 */

enum DXGI_MODE_SCANLINE_ORDER
{
  DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED = 0,
  DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE = 1,
  DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST = 2,
  DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST = 3,
};

typedef enum _TAG_UNNAMED_173
{
  CULL_STATE_OUT = 0,
  CULL_STATE_BOUNDED_PENDING = 1,
  CULL_STATE_BOUNDED = 2,
  CULL_STATE_SKINNED_PENDING = 3,
  CULL_STATE_DONE = 4,
} TAG_UNNAMED_173, *PTAG_UNNAMED_173;

enum demoPacketType
{
  DEMO_PACKET_END_OF_MSG_BLOCK = 0,
  DEMO_PACKET_END_OF_DEMO = 1,
  DEMO_PACKET_CLIP_COMMAND = 2,
  DEMO_PACKET_RAW_SNAPSHOT = 3,
  DEMO_PACKET_TYPE_COUNT = 4,
};

typedef enum _TAG_UNNAMED_174
{
  GFX_TEXTURE_OVERRIDE_IMAGE = 0,
  GFX_TEXTURE_OVERRIDE_MATERIAL = 1,
  GFX_TEXTURE_OVERRIDE_SHADER_CONST = 2,
} TAG_UNNAMED_174, *PTAG_UNNAMED_174;

enum GfxViewMode
{
  VIEW_MODE_NONE = 0,
  VIEW_MODE_3D = 1,
  VIEW_MODE_2D = 2,
  VIEW_MODE_IDENTITY = 3,
};

struct IXAudio2Voice
{
}; /* size: 0x0004 */

struct static_tree_desc_s
{
  /* 0x0000 */ const struct ct_data_s* static_tree;
  /* 0x0004 */ const int* extra_bits;
  /* 0x0008 */ int extra_base;
  /* 0x000c */ int elems;
  /* 0x0010 */ int max_length;
}; /* size: 0x0014 */

enum trackerColType_e
{
  TRACKER_COLTYPE_AUTOTIMESTAMP = 0,
  TRACKER_COLTYPE_REPLACE = 1,
  TRACKER_COLTYPE_ADD = 2,
  TRACKER_COLTYPE_MAX = 3,
  TRACKER_COLTYPE_END = 3,
  TRACKER_COLTYPE_INVALID = -1,
};

enum ShadowType
{
  SHADOW_NONE = 0,
  SHADOW_MAP = 1,
};

enum OcclusionReportsMode
{
  OCCLUSION_REPORTS_DISABLED = 0,
  OCCLUSION_REPORTS_RECORDING = 1,
  OCCLUSION_REPORTS_TESTING = 2,
};

typedef enum _TAG_UNNAMED_175
{
  BLEND_WEIGHTS_PER_VERTEX = 7,
} TAG_UNNAMED_175, *PTAG_UNNAMED_175;

struct XAUDIO2_BUFFER_WMA
{
  /* 0x0000 */ const unsigned int* pDecodedPacketCumulativeBytes;
  /* 0x0004 */ unsigned int PacketCount;
}; /* size: 0x0008 */

typedef enum _TAG_UNNAMED_176
{
  XFILE_BLOCK_TEMP = 0,
  XFILE_BLOCK_RUNTIME_VIRTUAL = 1,
  XFILE_BLOCK_RUNTIME_PHYSICAL = 2,
  XFILE_BLOCK_DELAY_VIRTUAL = 3,
  XFILE_BLOCK_DELAY_PHYSICAL = 4,
  XFILE_BLOCK_VIRTUAL = 5,
  XFILE_BLOCK_PHYSICAL = 6,
  XFILE_BLOCK_STREAMER_RESERVE = 7,
  MAX_XFILE_COUNT = 8,
} TAG_UNNAMED_176, *PTAG_UNNAMED_176;

enum bobType_t
{
  HBOB = 0,
  VBOB = 1,
};

struct cLeaf_s
{
  /* 0x0000 */ unsigned short firstCollAabbIndex;
  /* 0x0002 */ unsigned short collAabbCount;
  /* 0x0004 */ int brushContents;
  /* 0x0008 */ int terrainContents;
  /* 0x000c */ union vec3_t mins;
  /* 0x0018 */ union vec3_t maxs;
  /* 0x0024 */ int leafBrushNode;
  /* 0x0028 */ short cluster;
  /* 0x002a */ char __PADDING__[2];
}; /* size: 0x002c */

enum gamertagsTableColumns_t
{
  MP_GAMERTAGS_NAME = 0,
  MP_GAMERTAGS_TIER = 1,
  MP_GAMERTAGS_PLATFORM = 2,
  MP_GAMERTAGS_ID = 2,
  MP_GAMERTAGS_COUNT = 3,
};

enum eAttachmentOverrideSounds
{
  ATTACHMENT_OVERRIDE_SOUND_FIRE = 0,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_PLAYER = 1,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LOOP = 2,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LOOP_PLAYER = 3,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LOOP_END = 4,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LOOP_END_PLAYER = 5,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_START = 6,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_STOP = 7,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_START_PLAYER = 8,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_STOP_PLAYER = 9,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LAST = 10,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LAST_PLAYER = 11,
  NUM_ATTACHMENT_OVERRIDE_SOUNDS = 12,
};

struct ID3D11BlendState
{
}; /* size: 0x0004 */

enum std::float_denorm_style
{
  denorm_indeterminate = -1,
  denorm_absent = 0,
  denorm_present = 1,
};

typedef enum _NVAPI_STEREO_SURFACECREATEMODE
{
  NVAPI_STEREO_SURFACECREATEMODE_AUTO = 0,
  NVAPI_STEREO_SURFACECREATEMODE_FORCESTEREO = 1,
  NVAPI_STEREO_SURFACECREATEMODE_FORCEMONO = 2,
} NVAPI_STEREO_SURFACECREATEMODE, *PNVAPI_STEREO_SURFACECREATEMODE;

class bdLeagueTeamMemberInfo
{
  /* 0x0000 */ long Padding_74[2];
  /* 0x0008 */ unsigned __int64 m_teamID;
  /* 0x0010 */ unsigned int m_numMembers;
  /* 0x0014 */ long Padding_75;
  /* 0x0018 */ unsigned __int64 m_userIDs[16];
  /* 0x0098 */ char m_userNames[65][16];
}; /* size: 0x04a8 */

typedef enum _TAG_UNNAMED_177
{
  k_iSteamUserCallbacks = 100,
} TAG_UNNAMED_177, *PTAG_UNNAMED_177;

enum fsMode_t
{
  FS_READ = 0,
  FS_WRITE = 1,
  FS_APPEND = 2,
  FS_APPEND_SYNC = 3,
};

enum printParm_t
{
  PRINT_ALL = 0,
  PRINT_DEVELOPER = 1,
  PRINT_WARNING = 2,
  PRINT_ERROR = 3,
};

typedef enum _TAG_UNNAMED_178
{
  MAX_WEAP_NOTETRACK_TO_SOUND_MAPPINGS = 20,
} TAG_UNNAMED_178, *PTAG_UNNAMED_178;

enum weapFieldType_t
{
  WFT_WEAPONTYPE = 18,
  WFT_WEAPONCLASS = 19,
  WFT_OVERLAYRETICLE = 20,
  WFT_PENETRATE_TYPE = 21,
  WFT_IMPACT_TYPE = 22,
  WFT_STANCE = 23,
  WFT_PROJ_EXPLOSION = 24,
  WFT_OFFHAND_CLASS = 25,
  WFT_OFFHAND_SLOT = 26,
  WFT_ANIMTYPE = 27,
  WFT_ACTIVE_RETICLE_TYPE = 28,
  WFT_GUIDED_MISSILE_TYPE = 29,
  WFT_BOUNCE_SOUND = 30,
  WFT_STICKINESS = 31,
  WFT_ROTATETYPE = 32,
  WFT_OVERLAYINTERFACE = 33,
  WFT_INVENTORYTYPE = 34,
  WFT_FIRETYPE = 35,
  WFT_CLIPTYPE = 36,
  WFT_AMMOCOUNTER_CLIPTYPE = 37,
  WFT_ICONRATIO_HUD = 38,
  WFT_ICONRATIO_AMMOCOUNTER = 39,
  WFT_ICONRATIO_KILL = 40,
  WFT_ICONRATIO_DPAD = 41,
  WFT_ICONRATIO_INDICATOR = 42,
  WFT_BARRELTYPE = 43,
  WFT_HIDETAGS = 44,
  WFT_EXPLOSION_TAG = 45,
  WFT_NOTETRACKSOUNDMAP = 46,
  WFT_WEAPON_CAMO = 47,
  WFT_NUM_FIELD_TYPES = 48,
};

typedef enum _TAG_UNNAMED_179
{
  R_SHOW_COLLISION_POLYTYPE_ALL = 0,
  R_SHOW_COLLISION_POLYTYPE_WIREFRAME = 1,
  R_SHOW_COLLISION_POLYTYPE_INTERIOR = 2,
  R_SHOW_COLLISION_POLYTYPE_COUNT = 3,
} TAG_UNNAMED_179, *PTAG_UNNAMED_179;

enum demoDollyCamFX
{
  DEMO_DOLLYCAM_FX_HEAD_NOCOLOR = 0,
  DEMO_DOLLYCAM_FX_HEAD_SELECT = 1,
  DEMO_DOLLYCAM_FX_HEAD_GLOW_GREEN = 2,
  DEMO_DOLLYCAM_FX_HEAD_GLOW_RED = 3,
  DEMO_DOLLYCAM_FX_HEAD_GLOW_WHITE = 4,
  DEMO_DOLLYCAM_FX_HEAD_GLOW_YELLOW = 5,
  DEMO_DOLLYCAM_FX_COUNT = 6,
};

enum PlayerAnimType
{
  PLAYERANIMTYPE_REVIVEE = 0,
  PLAYERANIMTYPE_SNIPER = 1,
  PLAYERANIMTYPE_SNIPER_REARCLIP = 2,
  PLAYERANIMTYPE_BRIEFCASE = 3,
};

struct CD3D11_DEPTH_STENCIL_DESC
{
}; /* size: 0x0034 */

enum pmtype_t
{
  PM_NORMAL = 0,
  PM_NORMAL_LINKED = 1,
  PM_NOCLIP = 2,
  PM_UFO = 3,
  PM_MPVIEWER = 4,
  PM_SPECTATOR = 5,
  PM_INTERMISSION = 6,
  PM_LASTSTAND = 7,
  PM_REVIVEE = 8,
  PM_LASTSTAND_TRANSITION = 9,
  PM_DEAD = 10,
  PM_DEAD_LINKED = 11,
};

typedef enum _TAG_UNNAMED_180
{
  DPVS_BATCH_NONE = 0,
  DPVS_BATCH_STATIC = 1,
  DPVS_BATCH_DYNAMIC = 2,
  DPVS_BATCH_ALL = 3,
} TAG_UNNAMED_180, *PTAG_UNNAMED_180;

enum LastInput_t
{
  LAST_INPUT_GAMEPAD = 0,
  LAST_INPUT_MOUSEMOVE = 1,
  LAST_INPUT_MOUSECLICK = 2,
  LAST_INPUT_KEYBOARD = 3,
};

typedef enum _TAG_UNNAMED_181
{
  WPLF_LOCK_STARTED = 1,
  WPLF_LOCK_SET = 2,
  WPLF_LOCK_ATTACK_TOP = 4,
  WPLF_LOCK_ATTACK_DIRECT = 8,
  WPLF_LOCK_TARGET_TOO_CLOSE = 16,
  WPLF_LOCK_NOT_ENOUGH_CLEARANCE = 32,
  WEAPONLOCKFLAG_BITS = 6,
} TAG_UNNAMED_181, *PTAG_UNNAMED_181;

enum DBLOCK_READY
{
  DBLOCK_EMPTY = 0,
  DBLOCK_READY_FOG = 1,
  DBLOCK_READY_COLOR = 2,
  DBLOCK_READY_BLOOM = 3,
  DBLOCK_READY_WSI = 4,
};

typedef enum _TAG_UNNAMED_182
{
  MAX_SHARDS = 32,
} TAG_UNNAMED_182, *PTAG_UNNAMED_182;

typedef enum _TAG_UNNAMED_183
{
  FILEDATA_AITYPE = 0,
  FILEDATA_ANIMSCRIPTS_TRAVERSE = 1,
  FILEDATA_XANIMLIST = 2,
  FILEDATA_ZBARRIERTYPE = 3,
  FILEDATA_XMODELSURFS = 4,
  FILEDATA_XMODELPARTS = 5,
  FILEDATA_XMODEL = 6,
  FILEDATA_XANIM = 7,
  FILEDATA_PHYSPRESET = 8,
  FILEDATA_PHYSCONSTRAINTS = 9,
  FILEDATA_DESTRUCTIBLEDEF = 10,
  FILEDATA_VEHICLEPHYSPARAMS = 11,
  FILEDATA_XMODELPIECES = 12,
  FILEDATA_STRINGTABLE = 13,
  FILEDATA_VEHICLEDEF = 14,
  FILEDATA_FOOTSTEPFXTABLEDEF = 15,
  FILEDATA_ZBARRIERDEF = 16,
} TAG_UNNAMED_183, *PTAG_UNNAMED_183;

struct XVertexInfo_s
{
  /* 0x0000 */ union vec3_t normal;
  /* 0x000c */ unsigned char color[4];
  /* 0x0010 */ union vec3_t binormal;
  /* 0x001c */ float texCoordX;
  /* 0x0020 */ union vec3_t tangent;
  /* 0x002c */ float texCoordY;
  /* 0x0030 */ union vec3_t offset;
  /* 0x003c */ unsigned char numWeights;
  /* 0x003d */ unsigned char pad;
  /* 0x003e */ short boneOffset;
}; /* size: 0x0040 */

struct XBlendLoadInfo
{
  /* 0x0000 */ unsigned short boneOffset;
  /* 0x0002 */ unsigned short boneWeight;
}; /* size: 0x0004 */

struct XVertexBuffer
{
  /* 0x0000 */ struct XVertexInfo_s v;
  /* 0x0040 */ struct XBlendLoadInfo w[1];
}; /* size: 0x0044 */

enum demoHighlightReelPlayerFilter
{
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_ONLY_ME = 0,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_FIRST = 0,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_FRIENDS = 1,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_ME_AND_FRIENDS = 2,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_ONLY_FRIENDLY_TEAM = 3,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_ONLY_ENEMY_TEAM = 4,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_EVERYONE = 5,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_LAST = 5,
};

typedef enum _TAG_UNNAMED_184
{
  _ALLOC_MASK = 7,
} TAG_UNNAMED_184, *PTAG_UNNAMED_184;

typedef enum _TAG_UNNAMED_185
{
  _ALLOC_MASK = 15,
} TAG_UNNAMED_185, *PTAG_UNNAMED_185;

enum eBspSurfRegionType
{
  BSP_SURF_REGION_LIT = 0,
  BSP_SURF_REGION_LIGHT_MAP = 1,
  BSP_SURF_REGION_TYPE_COUNT = 2,
};

enum demoHighlightReelGameResultFilter
{
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_OFF = 0,
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_FIRST = 0,
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_FINAL_RESULT = 1,
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_WITH_EVENTS = 2,
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_ALL_RESULTS = 3,
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_LAST = 3,
};

enum VehicleTurretState
{
  VEH_TURRET_STOPPED = 0,
  VEH_TURRET_STOPPING = 1,
  VEH_TURRET_MOVING = 2,
};

struct D3D11_BUFFER_UAV
{
  /* 0x0000 */ unsigned int FirstElement;
  /* 0x0004 */ unsigned int NumElements;
  /* 0x0008 */ unsigned int Flags;
}; /* size: 0x000c */

struct D3D11_TEX1D_UAV
{
  /* 0x0000 */ unsigned int MipSlice;
}; /* size: 0x0004 */

struct D3D11_TEX2D_UAV
{
  /* 0x0000 */ unsigned int MipSlice;
}; /* size: 0x0004 */

struct D3D11_TEX2D_ARRAY_UAV
{
  /* 0x0000 */ unsigned int MipSlice;
  /* 0x0004 */ unsigned int FirstArraySlice;
  /* 0x0008 */ unsigned int ArraySize;
}; /* size: 0x000c */

struct D3D11_TEX3D_UAV
{
  /* 0x0000 */ unsigned int MipSlice;
  /* 0x0004 */ unsigned int FirstWSlice;
  /* 0x0008 */ unsigned int WSize;
}; /* size: 0x000c */

struct D3D11_UNORDERED_ACCESS_VIEW_DESC
{
  /* 0x0000 */ enum DXGI_FORMAT Format;
  /* 0x0004 */ enum D3D11_UAV_DIMENSION ViewDimension;
  union
  {
    /* 0x0008 */ struct D3D11_BUFFER_UAV Buffer;
    /* 0x0008 */ struct D3D11_TEX1D_UAV Texture1D;
    /* 0x0008 */ struct D3D11_TEX1D_ARRAY_UAV Texture1DArray;
    /* 0x0008 */ struct D3D11_TEX2D_UAV Texture2D;
    /* 0x0008 */ struct D3D11_TEX2D_ARRAY_UAV Texture2DArray;
    /* 0x0008 */ struct D3D11_TEX3D_UAV Texture3D;
  }; /* size: 0x000c */
}; /* size: 0x0014 */

enum VehicleMoveState
{
  VEH_MOVESTATE_STOP = 0,
  VEH_MOVESTATE_MOVE = 1,
  VEH_MOVESTATE_HOVER = 2,
  VEH_MOVESTATE_PLANE_ONCURVE = 3,
  VEH_MOVESTATE_PLANE_FREE = 4,
};

enum demoLagFlag_e
{
  DEMO_LAGFLAG_NONE = 0,
  DEMO_LAGFLAG_LOW = 100,
  DEMO_LAGFLAG_MED = 200,
  DEMO_LAGFLAG_HIGH = 300,
  DEMO_LAGFLAG_IS_SET = 1000,
};

enum playerStatsKeyIndex_t
{
  MP_PLAYERSTATSKEY_RANKXP = 0,
  MP_PLAYERSTATSKEY_PLEVEL = 1,
  MP_PLAYERSTATSKEY_RANK = 2,
  MP_PLAYERSTATSKEY_SCORE = 3,
  MP_PLAYERSTATSKEY_TIMEPLAYEDTOTAL = 4,
  MP_PLAYERSTATSKEY_GAMETYPEBAN = 5,
  MP_PLAYERSTATSKEY_TIMEWHENNEXTHOST = 6,
  MP_PLAYERSTATSKEY_BADHOSTCOUNT = 7,
  MP_PLAYERSTATSKEY_LEADERBOARDFAILURES = 8,
  MP_PLAYERSTATSKEY_LASTSTATSBACKUP = 9,
  MP_PLAYERSTATSKEY_MAPPACKMASK = 10,
  MP_PLAYERSTATSKEY_STATSBACKUPVERSION = 11,
  MP_PLAYERSTATSKEY_CODPOINTS = 12,
  MP_PLAYERSTATSKEY_CURRENCYSPENT = 13,
  MP_PLAYERSTATSKEY_STATS_VERSION = 14,
  MP_PLAYERSTATSKEY_KILLS = 15,
  MP_PLAYERSTATSKEY_DEATHS = 16,
  MP_PLAYERSTATSKEY_DEATHSDURINGUSE = 17,
  MP_PLAYERSTATSKEY_HEADSHOTS = 18,
  MP_PLAYERSTATSKEY_KDRATIO = 19,
  MP_PLAYERSTATSKEY_HIGHEST_KDRATIO = 20,
  MP_PLAYERSTATSKEY_ACCURACY = 21,
  MP_PLAYERSTATSKEY_HIGHEST_ACCURACY = 22,
  MP_PLAYERSTATSKEY_SHOTS = 23,
  MP_PLAYERSTATSKEY_HITS = 24,
  MP_PLAYERSTATSKEY_TIMEUSED = 25,
  MP_PLAYERSTATSKEY_USED = 26,
  MP_PLAYERSTATSKEY_DESTROYED = 27,
  MP_PLAYERSTATSKEY_GAMETYPE = 28,
  MP_PLAYERSTATSKEY_WINS = 29,
  MP_PLAYERSTATSKEY_LOSSES = 30,
  MP_PLAYERSTATSKEY_TIES = 31,
  MP_PLAYERSTATSKEY_LIFETIME_EARNINGS = 32,
  MP_PLAYERSTATSKEY_LIFETIME_BUYIN = 33,
  MP_PLAYERSTATSKEY_CONTRACTS_PURCHASED = 34,
  MP_PLAYERSTATSKEY_CONTRACTS_COMPLETED = 35,
  MP_PLAYERSTATSKEY_LASTESCROW = 36,
  MP_PLAYERSTATSKEY_STATRESETCOUNT = 37,
  MP_PLAYERSTATSKEY_FILMS_SHOUTCASTED = 38,
  MP_PLAYERSTATSKEY_HIGHLIGHTS_CREATED = 39,
  MP_PLAYERSTATSKEY_COUNT = 40,
};

enum prestigeTokenType_e
{
  PRESTIGE_TOKEN_RESPEC = 0,
  PRESTIGE_TOKEN_RESET_STATS = 1,
  PRESTIGE_TOKEN_EXTRA_CAC = 2,
  PRESTIGE_TOKEN_COUNT = 3,
};

typedef enum _TAG_UNNAMED_186
{
  THREAD_CONTEXT_MAIN = 0,
  THREAD_CONTEXT_BACKEND = 1,
  THREAD_CONTEXT_WORKER0 = 2,
  THREAD_CONTEXT_WORKER1 = 3,
  THREAD_CONTEXT_WORKER2 = 4,
  THREAD_CONTEXT_WORKER3 = 5,
  THREAD_CONTEXT_WORKER4 = 6,
  THREAD_CONTEXT_WORKER5 = 7,
  THREAD_CONTEXT_WORKER6 = 8,
  THREAD_CONTEXT_WORKER7 = 9,
  THREAD_CONTEXT_SERVER = 10,
  THREAD_CONTEXT_DATABASE = 11,
  THREAD_CONTEXT_TRACE_COUNT = 12,
  THREAD_CONTEXT_TRACE_LAST = 11,
  THREAD_CONTEXT_STREAM = 12,
  THREAD_CONTEXT_SOUND_MIX = 13,
  THREAD_CONTEXT_SOUND_DECODE = 14,
  THREAD_CONTEXT_WEBM_DEC_DECODE = 15,
  THREAD_CONTEXT_COUNT = 16,
  THREAD_CONTEXT_INVALID = -1,
} TAG_UNNAMED_186, *PTAG_UNNAMED_186;

enum demoProfileData
{
  DEMO_PROFILE_GAMESTATE = 0,
  DEMO_PROFILE_SNAPSHOT = 1,
  DEMO_PROFILE_MATCHSTATES = 2,
  DEMO_PROFILE_PLAYERSTATES = 3,
  DEMO_PROFILE_ENTITIES = 4,
  DEMO_PROFILE_CLIENTS = 5,
  DEMO_PROFILE_ACTORS = 6,
  DEMO_PROFILE_ANIMCMDS = 7,
  DEMO_PROFILE_DATA_TYPE_COUNT = 8,
};

enum msgLocErrType_t
{
  LOCMSG_SAFE = 0,
  LOCMSG_NOERR = 1,
};

enum gunLevelTableColumns_t
{
  GUNLEVELTABLE_RANKID = 0,
  GUNLEVELTABLE_TARGETXP = 1,
  GUNLEVELTABLE_WEAPON = 2,
  GUNLEVELTABLE_ATTACHMENT = 3,
  GUNLEVELTABLE_REWARDXP = 4,
  GUNLEVELTABLE_COUNT = 5,
};

enum elitePasswordStatus_e
{
  ELITEPASSWORD_Success = 0,
  ELITEPASSWORD_LengthError = 1,
  ELITEPASSWORD_EmailError = 2,
  ELITEPASSWORD_CharError = 3,
  ELITEPASSWORD_LetterNumberError = 4,
  ELITEPASSWORD_RepeatError = 5,
  ELITEPASSWORD_SequentialError = 6,
  ELITEPASSWORD_COUNT = 7,
};

struct animScriptCommand_t
{
  /* 0x0000 */ short bodyPart[2];
  /* 0x0004 */ short animIndex[2];
  /* 0x0008 */ unsigned short animDuration[2];
  /* 0x000c */ struct SndAliasList* soundAlias;
  /* 0x0010 */ unsigned short tagName;
  /* 0x0012 */ unsigned short flags;
}; /* size: 0x0014 */

enum bdUCDAccountStatus::bdMarketingOptInStatus
{
  BD_MARKETING_OPT_IN_FALSE = 0,
  BD_MARKETING_OPT_IN_TRUE = 1,
};

enum RecordEventType
{
  DW_EVENT_UNKNOWN = 0,
  DW_EVENT_AVI = 1,
  DW_EVENT_SCREENSHOT = 2,
  DW_EVENT_MATCH_RECORD_POINTS_SPENT = 3,
  DW_EVENT_EMAIL = 5,
  DW_EVENT_MATCH_RECORD_FINISHED = 6,
  DW_EVENT_INVALID_GAMERTAG = 7,
  DW_EVENT_CRASH_DUMP = 8,
  DW_EVENT_EMPTY_STATS = 9,
  DW_EVENT_UPLOAD_FAILURE = 10,
  DW_EVENT_DB_READ_ERROR = 11,
  DW_EVENT_NO_HELI_MESH = 16,
  DW_EVENT_INVALID_EMBLEM = 17,
  DW_EVENT_UPLOAD_SP_SESSION = 18,
  DW_EVENT_VALID_EMBLEM = 19,
  DW_EVENT_POSTMATCH_EVENTS = 20,
  DW_EVENT_MATCH_RECORD_FINISHED_AND_UPLOADED = 21,
  DW_EVENT_LOG_MATCHMAKING_DATA = 30,
  DW_EVENT_LOG_XSESSION_NON_SERIALIZED_CALLS = 32,
  DW_EVENT_SYS_ERROR = 41,
  DW_EVENT_UI_ERROR = 42,
  DW_EVENT_SEASON_PASS_PURCHASED = 43,
  DW_EVENT_THEATER_CLIP_UPLOADED = 44,
  DW_UCD_ERROR = 45,
  DW_EREG_ENTRY_ERROR = 46,
  DW_EREG_YOUTUBE_ERROR = 47,
  DW_EVENT_UI_SP_ERROR = 48,
  DW_EVENT_UI_MP_ERROR = 49,
  DW_EVENT_UI_ZM_ERROR = 50,
  DW_EVENT_DEDI_NOGEOINFO = 51,
  DW_EVENT_CONNECTION_LOG = 52,
  DW_EVENT_SESSION_MODIFY_FAILURE = 53,
  DW_EVENT_DEDICATED_PING_LOG = 54,
  DW_EVENT_STATS_ACCESS_ERROR = 55,
  DW_EVENT_ZERO_FLAG_ERROR = 56,
  DW_EVENT_SESSION_LOG = 57,
  DW_EVENT_DOUBLE_XP_FLAG_CHANGED = 70,
  DW_EVENT_DLC_FLAG_CHANGED = 71,
  DW_EVENT_DEMO_UPLOAD_FAILURE = 72,
  DW_EVENT_BLACKBOX = 88,
  DW_EVENT_LEAGUE = 100,
  DW_EVENT_REMOTE_CONSOLE = 200,
  DW_EVENT_WATCHDOG = 201,
  DW_EVENT_IGS = 250,
  DW_EVENT_DLC_MENUS_VIEWED = 251,
  DW_EVENT_CUSTOMCLASS_ERRORLOG = 300,
  DW_EVENT_IW6_PROMO_PURCHASED = 325,
  DW_EVENT_IW6_PROMO_ACCESSED = 326,
  DW_EVENT_RATE_MATCH = 400,
  DW_EVENT_VOTE_MTX = 425,
  DW_EVENT_SP_REMINDER_ACTION = 426,
  DW_EVENT_DSP_PROMOTION_ACTION = 427,
  DW_EVENT_GHOST_UPSELL = 428,
  DW_EVENT_CONTENT_AVAILABLE = 430,
  DW_EVENT_REPORT_OFFENSIVE_EMBLEM = 431,
  DW_EVENT_ANTICHEAT_DEBUG = 440,
  DW_EVENT_NUM_EVENTS = 441,
};

enum NV_GPU_WARPING_VERTICE_FORMAT
{
  NV_GPU_WARPING_VERTICE_FORMAT_TRIANGLESTRIP_XYUVRQ = 0,
  NV_GPU_WARPING_VERTICE_FORMAT_TRIANGLES_XYUVRQ = 1,
};

enum bdSubscriptionFilter
{
  BD_SUBSCRIPTION_FILTER_ALL = 0,
  BD_SUBSCRIPTION_FILTER_VALID = 1,
  BD_SUBSCRIPTION_FILTER_EXPIRED = 2,
};

struct PhysConstraint
{
  /* 0x0000 */ unsigned short targetname;
  /* 0x0002 */ char Padding_76[2];
  /* 0x0004 */ enum ConstraintType type;
  /* 0x0008 */ enum AttachPointType attach_point_type1;
  /* 0x000c */ int target_index1;
  /* 0x0010 */ unsigned short target_ent1;
  /* 0x0012 */ char Padding_77[2];
  /* 0x0014 */ const char* target_bone1;
  /* 0x0018 */ enum AttachPointType attach_point_type2;
  /* 0x001c */ int target_index2;
  /* 0x0020 */ unsigned short target_ent2;
  /* 0x0022 */ char Padding_78[2];
  /* 0x0024 */ const char* target_bone2;
  /* 0x0028 */ union vec3_t offset;
  /* 0x0034 */ union vec3_t pos;
  /* 0x0040 */ union vec3_t pos2;
  /* 0x004c */ union vec3_t dir;
  /* 0x0058 */ int flags;
  /* 0x005c */ int timeout;
  /* 0x0060 */ int min_health;
  /* 0x0064 */ int max_health;
  /* 0x0068 */ float distance;
  /* 0x006c */ float damp;
  /* 0x0070 */ float power;
  /* 0x0074 */ union vec3_t scale;
  /* 0x0080 */ float spin_scale;
  /* 0x0084 */ float minAngle;
  /* 0x0088 */ float maxAngle;
  /* 0x008c */ struct Material* material;
  /* 0x0090 */ int constraintHandle;
  /* 0x0094 */ int rope_index;
  /* 0x0098 */ int centity_num[4];
}; /* size: 0x00a8 */

struct PhysConstraints
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int count;
  /* 0x0008 */ struct PhysConstraint data[16];
}; /* size: 0x0a88 */

enum proneCheckType_t
{
  PCT_CLIENT = 0,
  PCT_ACTOR = 1,
};

enum PmStanceFrontBack
{
  PM_STANCE_STAND = 0,
  PM_STANCE_PRONE = 1,
  PM_STANCE_CROUCH = 2,
  PM_STANCE_BACKWARD_FIRST = 3,
  PM_STANCE_BACKWARD_RUN = 3,
  PM_STANCE_BACKWARD_PRONE = 4,
  PM_STANCE_BACKWARD_CROUCH = 5,
  NUM_PM_STANCE_FRONTBACK = 6,
};

enum animBodyPart_t
{
  ANIM_BP_UNUSED = 0,
  ANIM_BP_LEGS = 1,
  ANIM_BP_TORSO = 2,
  ANIM_BP_BOTH = 3,
  NUM_ANIM_BODYPARTS = 4,
};

enum clientplatform_t
{
  CLIENT_PLATFORM_PC = 0,
  CLIENT_PLATFORM_PS3 = 1,
  CLIENT_PLATFORM_XENON = 2,
  CLIENT_PLATFORM_WIIU = 3,
  MAX_CLIENT_PLATFORMS = 4,
};

enum NV_I2C_SPEED
{
  NVAPI_I2C_SPEED_DEFAULT = 0,
  NVAPI_I2C_SPEED_3KHZ = 1,
  NVAPI_I2C_SPEED_10KHZ = 2,
  NVAPI_I2C_SPEED_33KHZ = 3,
  NVAPI_I2C_SPEED_100KHZ = 4,
  NVAPI_I2C_SPEED_200KHZ = 5,
  NVAPI_I2C_SPEED_400KHZ = 6,
};

enum EVehicleCameraMode
{
  VEH_MODE_FIRSTPERSON = 0,
  VEH_MODE_CHASECAM = 1,
  VEH_MODE_HLO = 2,
  VEH_MODE_STRAFE = 3,
  VEH_MODE_HORSE = 4,
  VEH_MODE_OLDTANK = 5,
  VEH_MODE_HOVER = 6,
  VEH_MODE_VTOL = 7,
  VEH_MODE_MAX = 8,
};

enum EVehicleWiiUControlOverride
{
  VEH_WIIU_CONTROL_OVERRIDE_NONE = 0,
  VEH_WIIU_CONTROL_OVERRIDE_PLANE_WINGSUIT = 1,
  VEH_WIIU_CONTROL_OVERRIDE_CLAW = 2,
  VEH_WIIU_CONTROL_OVERRIDE_F35 = 3,
  VEH_WIIU_CONTROL_OVERRIDE_AITANK = 4,
  VEH_WIIU_CONTROL_OVERRIDE_QRDRONE = 5,
  VEH_WIIU_CONTROL_OVERRIDE_RCXD = 6,
  VEH_WIIU_CONTROL_OVERRIDE_CHOPPERGUNNER = 7,
  VEH_WIIU_CONTROL_OVERRIDE_SOCT = 8,
  VEH_WIIU_CONTROL_OVERRIDE_PLANE_JETWING = 9,
  VEH_WIIU_CONTROL_OVERRIDE_MAX = 10,
};

enum TerrainFireSource
{
  TFS_DEFAULT = 0,
  TFS_FLAMETHROWER = 1,
};

class phys_inplace_avl_tree_node<generic_avl_map_node_t>
{
  /* 0x0000 */ struct generic_avl_map_node_t* m_left;
  /* 0x0004 */ struct generic_avl_map_node_t* m_right;
  /* 0x0008 */ int m_balance;
}; /* size: 0x000c */

enum MantleAnims
{
  MANTLE_ROOT = 0,
  MANTLE_UP_57 = 1,
  MANTLE_UP_51 = 2,
  MANTLE_UP_45 = 3,
  MANTLE_UP_39 = 4,
  MANTLE_UP_33 = 5,
  MANTLE_UP_27 = 6,
  MANTLE_UP_21 = 7,
  MANTLE_OVER_HIGH = 8,
  MANTLE_OVER_MID = 9,
  MANTLE_OVER_LOW = 10,
  MANTLE_ANIM_COUNT = 11,
  MANTLE_UP_FIRST = 1,
  MANTLE_UP_LAST = 7,
  MANTLE_UP_COUNT = 7,
  MANTLE_OVER_FIRST = 8,
  MANTLE_OVER_LAST = 10,
  MANTLE_OVER_COUNT = 3,
};

typedef enum _TAG_UNNAMED_187
{
  TS_2D = 0,
  TS_FUNCTION = 1,
  TS_COLOR_MAP = 2,
  TS_UNUSED_1 = 3,
  TS_UNUSED_2 = 4,
  TS_NORMAL_MAP = 5,
  TS_UNUSED_3 = 6,
  TS_UNUSED_4 = 7,
  TS_SPECULAR_MAP = 8,
  TS_UNUSED_5 = 9,
  TS_OCCLUSION_MAP = 10,
  TS_UNUSED_6 = 11,
  TS_COLOR0_MAP = 12,
  TS_COLOR1_MAP = 13,
  TS_COLOR2_MAP = 14,
  TS_COLOR3_MAP = 15,
  TS_COLOR4_MAP = 16,
  TS_COLOR5_MAP = 17,
  TS_COLOR6_MAP = 18,
  TS_COLOR7_MAP = 19,
  TS_COLOR8_MAP = 20,
  TS_COLOR9_MAP = 21,
  TS_COLOR10_MAP = 22,
  TS_COLOR11_MAP = 23,
  TS_COLOR12_MAP = 24,
  TS_COLOR13_MAP = 25,
  TS_COLOR14_MAP = 26,
  TS_COLOR15_MAP = 27,
  TS_THROW_MAP = 28,
} TAG_UNNAMED_187, *PTAG_UNNAMED_187;

enum NV_COOLER_CONTROL
{
  NVAPI_COOLER_CONTROL_NONE = 0,
  NVAPI_COOLER_CONTROL_TOGGLE = 1,
  NVAPI_COOLER_CONTROL_VARIABLE = 2,
};

typedef enum _TAG_UNNAMED_188
{
  IMAGE_TRACK_MISC = 0,
  IMAGE_TRACK_DEBUG = 1,
  IMAGE_TRACK_TEXTURENAME = 2,
  IMAGE_TRACK_UI = 3,
  IMAGE_TRACK_LIGHTMAP = 4,
  IMAGE_TRACK_LIGHT = 5,
  IMAGE_TRACK_FX = 6,
  IMAGE_TRACK_HUD = 7,
  IMAGE_TRACK_MODEL = 8,
  IMAGE_TRACK_WORLD = 9,
  IMAGE_TRACK_COUNT = 10,
} TAG_UNNAMED_188, *PTAG_UNNAMED_188;

enum eEmblemCategoriesOrLayersType
{
  EMBLEMCATEGORIES_TYPE_LAYER = 0,
  EMBLEMCATEGORIES_TYPE_CATEGORY = 1,
  EMBLEMCATEGORIES_TYPE_ICONTYPE = 2,
  EMBLEMCATEGORIES_TYPE_BGCATEGORY = 3,
  EMBLEMCATEGORIES_TYPE_COUNT = 4,
  EMBLEMCATEGORIES_TYPE_INVALID = 4,
};

struct CD3D11_TEXTURE3D_DESC
{
}; /* size: 0x0024 */

enum eEmblemsOrBackings
{
  EMBLEMSORBACKINGS_TYPE = 0,
  EMBLEMSORBACKINGS_ID = 1,
  EMBLEMSORBACKINGS_SORTKEY = 2,
  EMBLEMSORBACKINGS_IMAGE = 3,
  EMBLEMSORBACKINGS_DESC = 4,
  EMBLEMSORBACKINGS_COST = 5,
  EMBLEMSORBACKINGS_UNLOCK_LVL = 6,
  EMBLEMSORBACKINGS_UNLOCK_PLVL = 7,
  EMBLEMSORBACKINGS_UNCLASSIFYAT = 8,
  EMBLEMSORBACKINGS_CATEGORY = 9,
  EMBLEMSORBACKINGS_ICONTYPE = 10,
  EMBLEMSORBACKINGS_MTX_NAME = 10,
  EMBLEMSORBACKINGS_OUTLINESIZE = 11,
  MAX_EMBLEMSORBACKINGS_COUNT = 12,
};

enum eEmblemOrBackingsType
{
  EMBLEMSORBACKINGS_TYPE_BACKGROUND = 0,
  EMBLEMSORBACKINGS_TYPE_EMBLEM = 1,
  EMBLEMSORBACKINGS_TYPE_COUNT = 2,
  EMBLEMSORBACKINGS_TYPE_INVALID = 2,
};

enum emblemTypes_t
{
  EMBLEM_TYPE_DEFAULT = 0,
  EMBLEM_TYPE_MAX_LEVEL = 1,
  EMBLEM_TYPE_EXPERT = 2,
  EMBLEM_TYPE_MASTERY = 3,
  MAX_ITEM_EMBLEM_TYPES = 4,
};

struct timeval
{
  /* 0x0000 */ long tv_sec;
  /* 0x0004 */ long tv_usec;
}; /* size: 0x0008 */

enum eEmblemCategories
{
  EMBLEMCATEGORY_TYPE = 0,
  EMBLEMCATEGORY_NAME = 1,
  EMBLEMCATEGORY_DESC = 2,
  EMBLEMCATEGORYORLAYER_COST = 3,
  EMBLEMCATEGORYORLAYER_UNLOCK_LVL = 4,
  EMBLEMCATEGORYORLAYER_UNLOCK_PLEVEL = 5,
  MAX_EMBLEMCATEGORY_COUNT = 6,
};

typedef enum _NVAPI_D3D9_QUERY_COMMAND
{
  NVAPI_D3D9_QUERY_NULL_CMD = 0,
  NVAPI_D3D9_QUERY_STEREO_INFO_CMD = 1,
  NVAPI_D3D9_QUERY_COLOR_INFO_CMD = 2,
} NVAPI_D3D9_QUERY_COMMAND, *PNVAPI_D3D9_QUERY_COMMAND;

enum scriptAnimMoveStatusStates_t
{
  ANIM_MOVESTATUS_STATIONARY = 0,
  ANIM_MOVESTATUS_WALK = 1,
  ANIM_MOVESTATUS_RUN = 2,
  NUM_ANIM_MOVESTATUSES = 3,
};

enum scriptAnimDmgDirections_t
{
  ANIM_DMGDIRECTION_NONE = 0,
  ANIM_DMGDIRECTION_FRONT = 1,
  ANIM_DMGDIRECTION_BACK = 2,
  ANIM_DMGDIRECTION_LEFT = 3,
  ANIM_DMGDIRECTION_RIGHT = 4,
  NUM_ANIM_DMGDIRECTIONS = 5,
};

enum scriptAnimDmgTypes_t
{
  ANIM_DMGTYPE_NORMAL = 0,
  ANIM_DMGTYPE_NORMAL_SHOTGUN = 1,
  ANIM_DMGTYPE_EXPLOSIVE = 2,
  ANIM_DMGTYPE_MELEE = 3,
  ANIM_DMGTYPE_MELEE_BASH = 4,
  ANIM_DMGTYPE_HEADSHOT = 5,
  ANIM_DMGTYPE_BURNED = 6,
  ANIM_DMGTYPE_SUICIDE = 7,
  ANIM_DMGTYPE_GAS = 8,
  ANIM_DMGTYPE_FALLING = 9,
  NUM_ANIM_DMGTYPES = 10,
};

struct debug_patch_t
{
  /* 0x0000 */ const struct CollisionAabbTree* tree;
  /* 0x0004 */ unsigned int first_vertex_index;
  /* 0x0008 */ unsigned short num_indices;
  /* 0x000a */ char __PADDING__[2];
}; /* size: 0x000c */

class debug_patch_info_t
{
  /* 0x0000 */ struct debug_patch_t patches[5000];
  /* 0xea60 */ unsigned int indices[100000];
  /* 0x704e0 */ unsigned int num_patches;
  /* 0x704e4 */ unsigned int num_indices;
}; /* size: 0x704e8 */

enum scriptAnimStances_t
{
  ANIM_STANCE_STAND = 0,
  ANIM_STANCE_CROUCH = 1,
  ANIM_STANCE_PRONE = 2,
  NUM_ANIM_STANCES = 3,
};

struct des_key
{
  /* 0x0000 */ unsigned long ek[32];
  /* 0x0080 */ unsigned long dk[32];
}; /* size: 0x0100 */

struct des3_key
{
  /* 0x0000 */ unsigned long ek[32][3];
  /* 0x0180 */ unsigned long dk[32][3];
}; /* size: 0x0300 */

struct rijndael_key
{
  /* 0x0000 */ unsigned long eK[60];
  /* 0x00f0 */ unsigned long dK[60];
  /* 0x01e0 */ int Nr;
}; /* size: 0x01e4 */

union Symmetric_key
{
  union
  {
    /* 0x0000 */ struct des_key des;
    /* 0x0000 */ struct des3_key des3;
    /* 0x0000 */ struct blowfish_key blowfish;
    /* 0x0000 */ struct rijndael_key rijndael;
    /* 0x0000 */ void* data;
  }; /* size: 0x1048 */
}; /* size: 0x1048 */

struct symmetric_CBC
{
  /* 0x0000 */ int cipher;
  /* 0x0004 */ int blocklen;
  /* 0x0008 */ unsigned char IV[128];
  /* 0x0088 */ union Symmetric_key key;
}; /* size: 0x10d0 */

class bdCypher3Des
{
  /* 0x0000 */ long Padding_79;
  /* 0x0004 */ struct symmetric_CBC m_cbc;
}; /* size: 0x10d4 */

enum scriptAnimSlopeStates_t
{
  ANIM_SLOPE_NONE = 0,
  ANIM_SLOPE_UP = 1,
  ANIM_SLOPE_DOWN = 2,
  NUM_ANIM_SLOPESTATES = 3,
};

enum scriptAnimPerkStates_t
{
  ANIM_PERK_UNUSED = 0,
  ANIM_PERK_LASTSTAND = 1,
  ANIM_PERK_GRENADEDEATH = 2,
  ANIM_PERK_FASTMANTLE = 3,
  ANIM_PERK_TURNED = 4,
  ANIM_PERK_FEMALE = 5,
  ANIM_PERK_ONEINCHPUNCH = 6,
  NUM_ANIM_PERKSTATES = 7,
};

class bdTrulyRandomImpl
{
}; /* size: 0x0001 */

enum scriptAnimAttachmentStates_t
{
  ANIM_ATTACHMENT_UNUSED = 0,
  ANIM_ATTACHMENT_BAYONET = 1,
  NUM_ANIM_ATTACHMENTSTATES = 2,
};

enum animScriptConditionTypes_t
{
  ANIM_CONDTYPE_BITFLAGS = 0,
  ANIM_CONDTYPE_VALUE = 1,
  ANIM_CONDTYPE_ENABLED = 2,
  ANIM_CONDTYPE_STRINGHASH = 3,
  NUM_ANIM_CONDTYPES = 4,
};

enum SERVER_TYPE
{
  P2P_SERVER_MP = 1000,
  P2P_SERVER_ZM = 1001,
  DEDICATED_SERVER = 2000,
};

class bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>
{
  /* 0x0000 */ struct bdQoSProbe::bdQoSProbeEntryWrapper* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

enum scriptAnimNoteType_t
{
  ANIM_NOTE_RELOAD = 1,
  ANIM_NOTE_FOOTPRINT = 2,
  ANIM_NOTE_MODEL_PREVIEWER = 4,
};

class bdStreamSocket
{
  /* 0x0000 */ int m_handle;
}; /* size: 0x0004 */

class bdUPnPConfig
{
  /* 0x0000 */ float m_discoveryTimeout;
  /* 0x0004 */ float m_responseTimeout;
  /* 0x0008 */ float m_connectTimeout;
  /* 0x000c */ enum bdUPnPConfig::bdUPnPRunMode m_runMode;
  /* 0x0010 */ unsigned int m_discoveryRetries;
  /* 0x0014 */ BOOL m_disabled;
  /* 0x0015 */ char Padding_80[3];
  /* 0x0018 */ class bdInetAddr m_gatewayAddr;
  /* 0x001c */ BOOL m_onlyUseGateway;
}; /* size: 0x0020 */

class bdUPnPDevice
{
  /* 0x0000 */ enum bdUPnPDevice::bdUPnPDeviceState m_state;
  /* 0x0004 */ BOOL m_shutdownRequested;
  /* 0x0005 */ char Padding_81[3];
  /* 0x0008 */ enum bdUPnPDevice::bdUPnPDeviceShutdownType m_shutdownType;
  /* 0x000c */ enum bdUPnPDevice::bdUPnPPortStatus m_portStatus;
  /* 0x0010 */ class bdAddr m_deviceAddr;
  /* 0x0018 */ class bdArray<bdInetAddr>* m_localAddrs;
  /* 0x001c */ class bdInetAddr m_localConnectedAddr;
  /* 0x0020 */ class bdStreamSocket m_streamSocket;
  /* 0x0024 */ BOOL m_isIp;
  /* 0x0025 */ char Padding_82[3];
  /* 0x0028 */ class bdUPnPConfig m_config;
  /* 0x0048 */ unsigned short m_gamePort;
  /* 0x004a */ char Padding_83[2];
  /* 0x004c */ class bdInetAddr m_externalDeviceAddr;
  /* 0x0050 */ char m_requestBuffer[2048];
  /* 0x0850 */ unsigned int m_requestSize;
  /* 0x0854 */ char m_readBuffer[6144];
  /* 0x2054 */ unsigned int m_bytesReceived;
  /* 0x2058 */ char m_fetchLocation[64];
  /* 0x2098 */ char m_controlURL[128];
  /* 0x2118 */ class bdStopwatch m_connectTimer;
  /* 0x2120 */ class bdStopwatch m_responseTimer;
}; /* size: 0x2128 */

enum scriptAnimStrafeStates_t
{
  ANIM_STRAFE_NOT = 0,
  ANIM_STRAFE_LEFT = 1,
  ANIM_STRAFE_RIGHT = 2,
  NUM_ANIM_STRAFESTATES = 3,
};

typedef enum _TAG_UNNAMED_189
{
  SL_USER_GAME = 1,
  SL_USER_TEMP = 2,
  SL_USER_XZONE = 4,
  SL_USER_XZONE_TEMP = 8,
} TAG_UNNAMED_189, *PTAG_UNNAMED_189;

enum animScriptParseMode_t
{
  PARSEMODE_DEFINES = 0,
  PARSEMODE_ANIMATION = 1,
  PARSEMODE_CANNED_ANIMATIONS = 2,
  PARSEMODE_STATECHANGES = 3,
  PARSEMODE_EVENTS = 4,
  PARSEMODE_FORCELOAD = 5,
  NUM_PARSEMODES = 6,
};

enum EUniverse
{
  k_EUniverseInvalid = 0,
  k_EUniversePublic = 1,
  k_EUniverseBeta = 2,
  k_EUniverseInternal = 3,
  k_EUniverseDev = 4,
  k_EUniverseMax = 5,
};

struct CSteamID::SteamID_t::SteamIDComponent_t
{
  /* 0x0000 */ unsigned int m_unAccountID : 32; /* bit position: 0 */
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned int m_unAccountInstance : 20; /* bit position: 0 */
    /* 0x0004 */ unsigned int m_EAccountType : 4; /* bit position: 20 */
    /* 0x0004 */ enum EUniverse m_EUniverse : 8; /* bit position: 24 */
  }; /* bitfield */
}; /* size: 0x0008 */

union CSteamID::SteamID_t
{
  union
  {
    /* 0x0000 */ struct CSteamID::SteamID_t::SteamIDComponent_t m_comp;
    /* 0x0000 */ unsigned __int64 m_unAll64Bits;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

class CSteamID
{
  /* 0x0000 */ union CSteamID::SteamID_t m_steamid;
}; /* size: 0x0008 */

enum EDenyReason
{
  k_EDenyInvalid = 0,
  k_EDenyInvalidVersion = 1,
  k_EDenyGeneric = 2,
  k_EDenyNotLoggedOn = 3,
  k_EDenyNoLicense = 4,
  k_EDenyCheater = 5,
  k_EDenyLoggedInElseWhere = 6,
  k_EDenyUnknownText = 7,
  k_EDenyIncompatibleAnticheat = 8,
  k_EDenyMemoryCorruption = 9,
  k_EDenyIncompatibleSoftware = 10,
  k_EDenySteamConnectionLost = 11,
  k_EDenySteamConnectionError = 12,
  k_EDenySteamResponseTimedOut = 13,
  k_EDenySteamValidationStalled = 14,
  k_EDenySteamOwnerLeftGuestUser = 15,
};

struct GSClientDeny_t
{
  /* 0x0000 */ class CSteamID m_SteamID;
  /* 0x0008 */ enum EDenyReason m_eDenyReason;
  /* 0x000c */ char m_rgchOptionalText[128];
}; /* size: 0x008c */

enum eDogMainAnims
{
  DOG_ANIMINDEX_MAIN_ROOT = 0,
  DOG_ANIMINDEX_IDLE = 1,
  DOG_ANIMINDEX_MOVE_WALK = 2,
  DOG_ANIMINDEX_RUN_STOP = 3,
  DOG_ANIMINDEX_RUN_PAIN = 4,
  DOG_ANIMINDEX_RUN_ATTACK = 5,
  DOG_ANIMINDEX_RUN_TURN_LEFT = 6,
  DOG_ANIMINDEX_RUN_TURN_RIGHT = 7,
  DOG_ANIMINDEX_TURN_LEFT = 8,
  DOG_ANIMINDEX_TURN_RIGHT = 9,
  DOG_ANIMINDEX_RUN_TURN_AROUND_LEFT = 10,
  DOG_ANIMINDEX_RUN_TURN_AROUND_RIGHT = 11,
  DOG_ANIMINDEX_TURN_AROUND_LEFT = 12,
  DOG_ANIMINDEX_TURN_AROUND_RIGHT = 13,
  DOG_ANIMINDEX_PAIN_RUN_FRONT = 14,
  DOG_ANIMINDEX_PAIN_RUN_BACK = 15,
  DOG_ANIMINDEX_PAIN_RUN_LEFT = 16,
  DOG_ANIMINDEX_PAIN_RUN_RIGHT = 17,
  DOG_ANIMINDEX_PAIN_FRONT = 18,
  DOG_ANIMINDEX_PAIN_BACK = 19,
  DOG_ANIMINDEX_PAIN_LEFT = 20,
  DOG_ANIMINDEX_PAIN_RIGHT = 21,
  DOG_ANIMINDEX_DEATH_FRONT = 22,
  DOG_ANIMINDEX_DEATH_BACK = 23,
  DOG_ANIMINDEX_DEATH_LEFT = 24,
  DOG_ANIMINDEX_DEATH_RIGHT = 25,
  DOG_ANIMINDEX_FLASHED_RUN = 26,
  DOG_ANIMINDEX_ATTACK_MISS = 27,
  DOG_ANIMINDEX_ATTACK_MISS_LEFT = 28,
  DOG_ANIMINDEX_ATTACK_MISS_RIGHT = 29,
  DOG_ANIMINDEX_ATTACK_CLOSE_RANGE = 30,
  DOG_ANIMINDEX_TRAVERSE_JUMP_UP_40 = 31,
  DOG_ANIMINDEX_TRAVERSE_JUMP_UP_80 = 32,
  DOG_ANIMINDEX_TRAVERSE_JUMP_DOWN_40 = 33,
  DOG_ANIMINDEX_TRAVERSE_JUMP_DOWN_80 = 34,
  DOG_ANIMINDEX_TRAVERSE_WALLHOP = 35,
  DOG_ANIMINDEX_TRAVERSE_WINDOW = 36,
  DOG_ANIMINDEX_TRAVERSE_THROUGH_HOLE_42 = 37,
  DOG_ANIMINDEX_MAIN_COUNT = 38,
};

class CCallbackBase
{
  /* 0x0000 */ long Padding_84;
  /* 0x0004 */ unsigned char m_nCallbackFlags;
  /* 0x0005 */ char Padding_85[3];
  /* 0x0008 */ int m_iCallback;
}; /* size: 0x000c */

enum eDogRunKnobAnims
{
  DOG_ANIMINDEX_RUN_KNOB_ROOT = 0,
  DOG_ANIMINDEX_RUN = 1,
  DOG_ANIMINDEX_RUN_LEAN_L = 2,
  DOG_ANIMINDEX_RUN_LEAN_R = 3,
  DOG_ANIMINDEX_RUN_WATER = 4,
  DOG_ANIMINDEX_RUN_WATER_LEAN_L = 5,
  DOG_ANIMINDEX_RUN_WATER_LEAN_R = 6,
  DOG_ANIMINDEX_RUN_COUNT = 7,
};

typedef enum _TAG_UNNAMED_190
{
  HIGHLIGHT_REEL_STAR_LEVELS_COL_INDEX = 0,
  HIGHLIGHT_REEL_STAR_LEVELS_COL_MIN_SCORE = 1,
} TAG_UNNAMED_190, *PTAG_UNNAMED_190;

enum eDogAttackIdleKnobAnims
{
  DOG_ANIMINDEX_ATTACKIDLE_KNOB_ROOT = 0,
  DOG_ANIMINDEX_ATTACKIDLE = 1,
  DOG_ANIMINDEX_ATTACKIDLE_BARK = 2,
  DOG_ANIMINDEX_ATTACKIDLE_GROWL = 3,
  DOG_ANIMINDEX_ATTACKIDLE_COUNT = 4,
};

enum eDogLookDown
{
  DOG_ANIMINDEX_LOOK_DOWN_ROOT = 0,
  DOG_ANIMINDEX_LOOK_DOWN = 1,
  DOG_ANIMINDEX_LOOK_DOWN_ATTACK = 2,
  DOG_ANIMINDEX_LOOK_DOWN_COUNT = 3,
};

struct $_TypeDescriptor$_extraBytes_60
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[60];
}; /* size: 0x0044 */

enum MB_PREDICTION_MODE
{
  DC_PRED = 0,
  V_PRED = 1,
  H_PRED = 2,
  TM_PRED = 3,
  B_PRED = 4,
  NEARESTMV = 5,
  NEARMV = 6,
  ZEROMV = 7,
  NEWMV = 8,
  SPLITMV = 9,
  MB_MODE_COUNT = 10,
};

enum MV_REFERENCE_FRAME
{
  INTRA_FRAME = 0,
  LAST_FRAME = 1,
  GOLDEN_FRAME = 2,
  ALTREF_FRAME = 3,
  MAX_REF_FRAMES = 4,
};

struct MV
{
  /* 0x0000 */ short row;
  /* 0x0002 */ short col;
}; /* size: 0x0004 */

union int_mv
{
  union
  {
    /* 0x0000 */ unsigned int as_int;
    /* 0x0000 */ struct MV as_mv;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct MB_MODE_INFO
{
  /* 0x0000 */ enum MB_PREDICTION_MODE mode;
  /* 0x0004 */ enum MB_PREDICTION_MODE uv_mode;
  /* 0x0008 */ enum MV_REFERENCE_FRAME ref_frame;
  /* 0x000c */ union int_mv mv;
  /* 0x0010 */ unsigned char partitioning;
  /* 0x0011 */ unsigned char mb_skip_coeff;
  /* 0x0012 */ unsigned char need_to_clamp_mvs;
  /* 0x0013 */ unsigned char segment_id;
}; /* size: 0x0014 */

enum B_PREDICTION_MODE
{
  B_DC_PRED = 0,
  B_TM_PRED = 1,
  B_VE_PRED = 2,
  B_HE_PRED = 3,
  B_LD_PRED = 4,
  B_RD_PRED = 5,
  B_VR_PRED = 6,
  B_VL_PRED = 7,
  B_HD_PRED = 8,
  B_HU_PRED = 9,
  LEFT4X4 = 10,
  ABOVE4X4 = 11,
  ZERO4X4 = 12,
  NEW4X4 = 13,
  B_MODE_COUNT = 14,
};

union b_mode_info
{
  union
  {
    /* 0x0000 */ enum B_PREDICTION_MODE as_mode;
    /* 0x0000 */ union int_mv mv;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct MODE_INFO
{
  /* 0x0000 */ struct MB_MODE_INFO mbmi;
  /* 0x0014 */ union b_mode_info bmi[16];
}; /* size: 0x0054 */

struct vehicleAntilagFrame_t
{
  /* 0x0000 */ union vec3_t position[16];
  /* 0x00c0 */ union vec3_t angles[16];
  /* 0x0180 */ unsigned char useCount[16];
  /* 0x0190 */ unsigned char inUse[16];
  /* 0x01a0 */ int time;
}; /* size: 0x01a4 */

enum eDogLookRight
{
  DOG_ANIMINDEX_LOOK_RIGHT_ROOT = 0,
  DOG_ANIMINDEX_LOOK_RIGHT = 1,
  DOG_ANIMINDEX_LOOK_RIGHT_ATTACK = 2,
  DOG_ANIMINDEX_LOOK_RIGHT_COUNT = 3,
};

class bdFastArray<bdPacketInterceptor *>
{
  /* 0x0000 */ class bdPacketInterceptor** m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

class bdSocketRouterConfig
{
  /* 0x0000 */ BOOL m_ignoreConnectionReset;
  /* 0x0001 */ char Padding_86[3];
  /* 0x0004 */ float m_DTLSAssociationReceiveTimeout;
  /* 0x0008 */ unsigned int m_maxConnectionResets;
  /* 0x000c */ BOOL m_simulateNAT;
}; /* size: 0x0010 */

class bdReference<bdCommonAddr>
{
  /* 0x0000 */ class bdCommonAddr* m_ptr;
}; /* size: 0x0004 */

class bdArray<bdReference<bdAddrHandle> >
{
  /* 0x0000 */ class bdReference<bdAddrHandle>* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

class bdAddressMap
{
  /* 0x0000 */ class bdArray<bdReference<bdAddrHandle> > m_addrHandles;
}; /* size: 0x000c */

class bdHashMap<bdReference<bdCommonAddr>,bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>,bdHashingClass>
{
  /* 0x0000 */ unsigned int m_size;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ float m_loadFactor;
  /* 0x000c */ unsigned int m_threshold;
  /* 0x0010 */ class bdHashMap<bdReference<bdCommonAddr>,bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>,bdHashingClass>::Node** m_map;
  /* 0x0014 */ class bdHashingClass m_hashClass;
}; /* size: 0x0018 */

class bdHashMap<unsigned int,bdQoSProbe::bdQoSProbeEntryWrapper,bdHashingClass>
{
  /* 0x0000 */ unsigned int m_size;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ float m_loadFactor;
  /* 0x000c */ unsigned int m_threshold;
  /* 0x0010 */ class bdHashMap<unsigned int,bdQoSProbe::bdQoSProbeEntryWrapper,bdHashingClass>::Node** m_map;
  /* 0x0014 */ class bdHashingClass m_hashClass;
}; /* size: 0x0018 */

class bdQoSProbe
{
  /* 0x0000 */ long Padding_87[2];
  /* 0x0008 */ unsigned int m_maxBandwidth;
  /* 0x0000 */ BOOL g_NATTraversalTrottling;
  /* 0x0001 */ char Padding_88[11];
  /* 0x000c */ class bdSocket* m_socket;
  /* 0x0010 */ class bdNATTravClient* m_natTrav;
  /* 0x0014 */ class bdServiceBandwidthArbitrator* m_bandArb;
  /* 0x0018 */ unsigned int m_lastProbeId;
  /* 0x001c */ long Padding_89;
  /* 0x0020 */ class bdStopwatch m_probingTimer;
  /* 0x0028 */ class bdFastArray<unsigned int> m_secids;
  /* 0x0034 */ long Padding_90;
  /* 0x0038 */ class bdQoSReplyPacket m_replyData;
  /* 0x0058 */ enum bdQoSProbe::bdQoSListenerState m_listenState;
  /* 0x005c */ enum bdQoSProbe::bdQoSProbeStatus m_status;
  /* 0x0060 */ class bdHashMap<bdReference<bdCommonAddr>,bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>,bdHashingClass> m_probesResolving;
  /* 0x0078 */ class bdHashMap<unsigned int,bdQoSProbe::bdQoSProbeEntryWrapper,bdHashingClass> m_probesProbing;
}; /* size: 0x0090 */

class bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass>
{
  /* 0x0000 */ unsigned int m_size;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ float m_loadFactor;
  /* 0x000c */ unsigned int m_threshold;
  /* 0x0010 */ class bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass>::Node** m_map;
  /* 0x0014 */ class bdHashingClass m_hashClass;
}; /* size: 0x0018 */

struct bdNATTravClient::CachedTraversal
{
  /* 0x0000 */ unsigned int m_remoteAddressHash;
  /* 0x0004 */ class bdAddr m_realAddress;
}; /* size: 0x000c */

class bdMutex
{
  /* 0x0000 */ void* m_handle;
}; /* size: 0x0004 */

class bdNATTravClient
{
  /* 0x0000 */ long Padding_91;
  /* 0x0004 */ class bdServiceBandwidthArbitrator* m_bandArb;
  /* 0x0008 */ class bdArray<bdAddr> m_introducers;
  /* 0x0014 */ class bdSocket* m_socket;
  /* 0x0018 */ class bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass> m_callbacks;
  /* 0x0030 */ class bdStopwatch m_keepAliveTimer;
  /* 0x0038 */ unsigned char m_secretKey[28];
  /* 0x0054 */ enum bdNATTravClient::bdNATTravClientStatus m_status;
  /* 0x0058 */ class bdReference<bdCommonAddr> m_localCommonAddr;
  /* 0x005c */ BOOL m_simulateNAT;
  union
  {
    /* 0x0000 */ struct bdNATTravClient::CachedTraversal* m_cachedTraversals /* zero-length array */;
    /* 0x0000 */ unsigned int m_nextCachedTraversal;
    /* 0x0000 */ BOOL m_cacheFull;
    /* 0x0000 */ class bdMutex m_cacheLock;
  }; /* size: 0x0004 */
}; /* size: 0x0060 */

struct ecc_point
{
  /* 0x0000 */ void* x;
  /* 0x0004 */ void* y;
  /* 0x0008 */ void* z;
}; /* size: 0x000c */

struct ecc_key
{
  /* 0x0000 */ int type;
  /* 0x0004 */ int idx;
  /* 0x0008 */ const struct ltc_ecc_set_type* dp;
  /* 0x000c */ struct ecc_point pubkey;
  /* 0x0018 */ void* k;
}; /* size: 0x001c */

class bdECCKey
{
  /* 0x0000 */ enum bdECCKey::bdECCKeyStatus m_status;
  /* 0x0004 */ struct ecc_key m_key;
}; /* size: 0x0020 */

class bdServiceBandwidthArbitrator
{
  /* 0x0000 */ int m_allowedSend;
  /* 0x0004 */ BOOL m_sentThisSlice;
}; /* size: 0x0008 */

class bdEndpointHashingClass
{
}; /* size: 0x0001 */

class bdHashMap<bdEndpoint,bdDTLSAssociation *,bdEndpointHashingClass>
{
  /* 0x0000 */ unsigned int m_size;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ float m_loadFactor;
  /* 0x000c */ unsigned int m_threshold;
  /* 0x0010 */ class bdHashMap<bdEndpoint,bdDTLSAssociation *,bdEndpointHashingClass>::Node** m_map;
  /* 0x0014 */ class bdEndpointHashingClass m_hashClass;
}; /* size: 0x0018 */

class bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass>
{
  /* 0x0000 */ unsigned int m_size;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ float m_loadFactor;
  /* 0x000c */ unsigned int m_threshold;
  /* 0x0010 */ class bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass>::Node** m_map;
  /* 0x0014 */ class bdEndpointHashingClass m_hashClass;
}; /* size: 0x0018 */

class bdSocketRouter
{
  /* 0x0000 */ long Padding_92[2];
  /* 0x0008 */ class bdSocket* m_socket;
  /* 0x000c */ class bdFastArray<bdPacketInterceptor *> m_interceptors;
  /* 0x0018 */ enum bdSocketRouter::bdSocketRouterStatus m_status;
  /* 0x001c */ class bdSocketRouterConfig m_config;
  /* 0x002c */ class bdReference<bdCommonAddr> m_localCommonAddr;
  /* 0x0030 */ class bdAddressMap m_addrMap;
  /* 0x003c */ class bdSecurityKeyMap m_keyStore;
  /* 0x0058 */ class bdQoSProbe m_qosProber;
  /* 0x00e8 */ class bdNATTravClient m_natTrav;
  /* 0x0148 */ class bdECCKey m_ECCKey;
  /* 0x0168 */ class bdServiceBandwidthArbitrator m_qosBandwidth;
  /* 0x0170 */ class bdHashMap<bdEndpoint,bdDTLSAssociation *,bdEndpointHashingClass> m_dtls;
  /* 0x0188 */ class bdPacketBuffer* m_sendtoBuffer;
  /* 0x018c */ class bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass> m_endpointToAddrMap;
}; /* size: 0x01a8 */

enum eDogLookLeft
{
  DOG_ANIMINDEX_LOOK_LEFT_ROOT = 0,
  DOG_ANIMINDEX_LOOK_LEFT = 1,
  DOG_ANIMINDEX_LOOK_LEFT_ATTACK = 2,
  DOG_ANIMINDEX_LOOK_LEFT_COUNT = 3,
};

enum NV_3D_PROPERTY
{
  NV_3D_PROPERTY_AS = 1,
  NV_3D_PROPERTY_AA = 2,
  NV_3D_PROPERTY_AF = 3,
  NV_3D_PROPERTY_MAX_FRAMES = 4,
  NV_3D_PROPERTY_TEX_FILTER = 5,
};

class bdArray<bdInetAddr>
{
  /* 0x0000 */ class bdInetAddr* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

enum eDogAnimStateStart
{
  DOG_ANIMSTATE_INDEX_ROOT = 0,
  DOG_ANIMSTATE_LAST_ROOT_ANIM = 38,
  DOG_ANIMSTATE_INDEX_MOVE_START = 38,
  DOG_ANIMSTATE_INDEX_MOVE = 39,
  DOG_ANIMSTATE_INDEX_ATTACKIDLE_KNOB = 40,
  DOG_ANIMSTATE_INDEX_LOOK_DOWN = 41,
  DOG_ANIMSTATE_INDEX_LOOK_UP = 42,
  DOG_ANIMSTATE_INDEX_LOOK_RIGHT = 43,
  DOG_ANIMSTATE_INDEX_LOOK_LEFT = 44,
  DOG_ANIMSTATE_LAST_ROOT_ANIM_GROUP = 45,
  DOG_ANIMSTATE_CHILDINDEX_MOVE_START = 45,
  DOG_ANIMSTATE_CHILDINDEX_MOVE = 46,
  DOG_ANIMSTATE_CHILDINDEX_ATTACKIDLE = 52,
  DOG_ANIMSTATE_CHILDINDEX_LOOK_DOWN = 55,
  DOG_ANIMSTATE_CHILDINDEX_LOOK_UP = 57,
  DOG_ANIMSTATE_CHILDINDEX_LOOK_RIGHT = 59,
  DOG_ANIMSTATE_CHILDINDEX_LOOK_LEFT = 61,
  DOG_ANIMSTATE_INDEX_COUNT = 63,
};

typedef enum _TAG_UNNAMED_191
{
  IPAK_PRIORITY_NORMAL = 0,
  IPAK_PRIORITY_HIGH = 1,
} TAG_UNNAMED_191, *PTAG_UNNAMED_191;

enum eProgressBar
{
  PROGRESSBAR_MAX_FF_COUNT = 3,
  PROGRESSBAR_TEXTURES = 3,
  PROGRESSBAR_COUNT = 4,
};

enum stream_priority
{
  STREAM_PRIO_LOW = 0,
  STREAM_PRIO_NORMAL = 1,
  STREAM_PRIO_HIGH = 2,
};

enum stream_status
{
  STREAM_STATUS_INVALID = 0,
  STREAM_STATUS_QUEUED = 1,
  STREAM_STATUS_INPROGRESS = 2,
  STREAM_STATUS_CANCELLED = 3,
  STREAM_STATUS_DEVICE_REMOVED = 4,
  STREAM_STATUS_READFAILED = 5,
  STREAM_STATUS_EOF = 6,
  STREAM_STATUS_FINISHED = 7,
  STREAM_STATUS_USER1 = 8,
  STREAM_STATUS_COUNT = 9,
};

typedef enum _GET_FILEEX_INFO_LEVELS
{
  GetFileExInfoStandard = 0,
  GetFileExMaxInfoLevel = 1,
} GET_FILEEX_INFO_LEVELS, *PGET_FILEEX_INFO_LEVELS;

typedef enum _TAG_UNNAMED_192
{
  GFX_NOT_STREAMING = 0,
  GFX_STREAMING = 1,
  GFX_MANUAL_STREAMING = 2,
  GFX_TEMP_STREAMING = 3,
} TAG_UNNAMED_192, *PTAG_UNNAMED_192;

enum SA_AttrTarget
{
  SA_All = 0xffffffff,
  SA_Assembly = 1,
  SA_Class = 4,
  SA_Constructor = 32,
  SA_Delegate = 4096,
  SA_Enum = 16,
  SA_Event = 512,
  SA_Field = 256,
  SA_GenericParameter = 16384,
  SA_Interface = 1024,
  SA_Method = 64,
  SA_Module = 2,
  SA_Parameter = 2048,
  SA_Property = 128,
  SA_ReturnValue = 8192,
  SA_Struct = 8,
  SA_This = 0xffff8000,
};

typedef enum _TAG_UNNAMED_193
{
  STBI_default = 0,
  STBI_grey = 1,
  STBI_grey_alpha = 2,
  STBI_rgb = 3,
  STBI_rgb_alpha = 4,
} TAG_UNNAMED_193, *PTAG_UNNAMED_193;

enum voteWinner_e
{
  NOT_VOTED_ANY_MAP = 0,
  VOTED_ROTATIONAL_MAP = 1,
  VOTED_PREVIOUS_MAP = 2,
  VOTED_NEXT_ROTATIONAL_MAP = 3,
};

union expressionRpnDataUnion
{
  union
  {
    /* 0x0000 */ struct Operand constant;
    /* 0x0000 */ void* cmd;
    /* 0x0000 */ int cmdIdx;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

typedef enum _TAG_UNNAMED_194
{
  SCAN_load = 0,
  SCAN_type = 1,
  SCAN_header = 2,
} TAG_UNNAMED_194, *PTAG_UNNAMED_194;

class ISteamFriends
{
}; /* size: 0x0004 */

class phys_static_array<phys_vec3,512>
{
  /* 0x0000 */ char m_buffer[8192];
  /* 0x2000 */ class phys_vec3* const m_slot_array;
  /* 0x2004 */ int m_alloc_count;
}; /* size: 0x2010 */

enum demoHighlightReelInformationType
{
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_PLAYER = 0,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_START = 0,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_EVENT = 1,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_SCORE_EVENT = 2,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_MEDAL = 3,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_ROUND_RESULT = 4,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_GAME_RESULT = 5,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ACTOR = 6,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_HELICOPTER = 7,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_TURRET = 8,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_SCRIPTED = 9,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_MISSILE = 10,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_VEHICLE = 11,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_ROUND_END = 12,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_DOWNED = 13,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_REVIVED = 14,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_BLEDOUT = 15,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_USE_MAGICBOX = 16,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_POWERUP_DROPPED = 17,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_POWERUP_GRABBED = 18,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_PERK = 19,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_POWER = 20,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_DOOR = 21,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_BUILDABLE_PLACED = 22,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_USE_PACKAPUNCH = 23,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_RAMPAGE = 24,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_GRENADE_SPECIAL = 25,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_GRENADE_MULTIATTACK = 26,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_MEAT_STINK = 27,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_GRABBED_MAGICBOX = 28,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_GRABBED_PACKAPUNCH = 29,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_GRENADE_SPECIAL_LONG = 30,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_COUNT = 31,
};

enum demoControlsButton
{
  DEMO_CONTROLS_BUTTON_PLAY = 0,
  DEMO_CONTROLS_BUTTON_RECORD = 1,
  DEMO_CONTROLS_BUTTON_SWITCH_PLAYER = 2,
  DEMO_CONTROLS_BUTTON_SWITCH_CAMERA = 3,
  DEMO_CONTROLS_BUTTON_TOGGLE_GAME_HUD = 4,
  DEMO_CONTROLS_BUTTON_TOGGLE_DEMO_HUD = 5,
  DEMO_CONTROLS_BUTTON_JUMP_BACK = 6,
  DEMO_CONTROLS_BUTTON_JUMP_FORWARD = 7,
  DEMO_CONTROLS_BUTTON_TIMESCALE_DECREASE = 8,
  DEMO_CONTROLS_BUTTON_TIMESCALE_INCREASE = 9,
  DEMO_CONTROLS_BUTTON_COUNT = 10,
};

enum demoHighlightReelTransitionFilter
{
  DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_NONE = 0,
  DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_FIRST = 0,
  DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_FADE = 1,
  DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_RANDOM = 2,
  DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_LAST = 2,
};

enum DWRITE_INFORMATIONAL_STRING_ID
{
};

enum demoHighlightReelStylesFilter
{
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_BEST_MOMENTS = 0,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_FIRST = 0,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_EXPLOSIVE_AND_PROJECTILE_KILLS = 1,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_VEHICLE_KILLS = 2,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_GUN_KILLS_ONLY = 3,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_GUN_KILLS_AND_EVENTS = 4,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_TURRET_KILLS = 5,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_DOG_KILLS = 6,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_RAMPAGER = 7,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_SAVIOR_AND_SINNER = 8,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_TEAM_PLAYER = 9,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_BIG_SPENDER = 10,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_HANDYMAN = 11,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_LAST = 11,
};

enum demoKeyboardModes
{
  DEMO_KEYBOARD_NONE = 0,
  DEMO_KEYBOARD_SEGMENT_NAME = 1,
  DEMO_KEYBOARD_CLIP_NAME_INGAME = 2,
  DEMO_KEYBOARD_CLIP_DESC_INGAME = 3,
  DEMO_KEYBOARD_SCREENSHOT_NAME_INGAME = 4,
  DEMO_KEYBOARD_SCREENSHOT_DESC_INGAME = 5,
  DEMO_KEYBOARD_FILM_NAME = 6,
  DEMO_KEYBOARD_FILM_DESCRIPTION = 7,
  DEMO_KEYBOARD_CUSTOMGAME_NAME = 8,
  DEMO_KEYBOARD_CUSTOMGAME_DESCRIPTION = 9,
  DEMO_KEYBOARD_EMBLEM_NAME = 10,
  DEMO_KEYBOARD_EMBLEM_DESCRIPTION = 11,
  DEMO_KEYBOARD_COUNT = 12,
};

struct ID3D11VertexShader
{
}; /* size: 0x0004 */

enum demoState
{
  DEMO_STATE_IDLE = 0,
  DEMO_STATE_RECORDING = 1,
  DEMO_STATE_PLAYING = 2,
  DEMO_STATE_COUNT = 3,
};

struct scr_animtree_t
{
  /* 0x0000 */ struct XAnim_s* anims;
}; /* size: 0x0004 */

enum demoStreamingThrottleState
{
  DEMO_STREAMING_THROTTLE_OPEN = 0,
  DEMO_STREAMING_THROTTLE_CLOSED_MIN_INTERVAL = 1,
  DEMO_STREAMING_THROTTLE_CLOSED_BANDWIDTH_LIMIT = 2,
};

enum fileshareCategory_e
{
  FILESHARE_CATEGORY_INVALID = -1,
  FILESHARE_CATEGORY_ALL = 0,
  FILESHARE_CATEGORY_MP_START = 1,
  FILESHARE_CATEGORY_FILM_MP = 1,
  FILESHARE_CATEGORY_CLIP_MP = 2,
  FILESHARE_CATEGORY_SCREENSHOT_MP = 3,
  FILESHARE_CATEGORY_HIGHLIGHT = 4,
  FILESHARE_CATEGORY_CUSTOM_GAME_MP = 5,
  FILESHARE_CATEGORY_EMBLEM = 6,
  FILESHARE_CATEGORY_CUSTOM_CLASS = 7,
  FILESHARE_CATEGORY_EMBLEMIMAGE = 8,
  FILESHARE_CATEGORY_MP_END = 8,
  FILESHARE_CATEGORY_ZM_START = 51,
  FILESHARE_CATEGORY_FILM_ZM = 51,
  FILESHARE_CATEGORY_CLIP_ZM = 52,
  FILESHARE_CATEGORY_SCREENSHOT_ZM = 53,
  FILESHARE_CATEGORY_CUSTOM_GAME_ZM = 54,
  FILESHARE_CATEGORY_ZM_END = 54,
  FILESHARE_CATEGORY_INGAMESTORE_START = 100,
  FILESHARE_CATEGORY_INGAMESTORE_MAPPACKS = 100,
  FILESHARE_CATEGORY_INGAMESTORE_THEMES = 101,
  FILESHARE_CATEGORY_INGAMESTORE_AVATARS = 102,
  FILESHARE_CATEGORY_INGAMESTORE_WEAPONPACKS = 103,
  FILESHARE_CATEGORY_INGAMESTORE_CALLINGCARDPACKS = 104,
  FILESHARE_CATEGORY_INGAMESTORE_STORAGEPACKS = 105,
  FILESHARE_CATEGORY_INGAMESTORE_GHOSTS = 106,
  FILESHARE_CATEGORY_INGAMESTORE_END = 106,
  FILESHARE_CATEGORY_MOTD_IMAGES = 120,
  FILESHARE_CATEGORY_VOTE_IMAGES = 130,
  FILESHARE_CATEGORY_AVI_MP = 0xffff8000,
  FILESHARE_CATEGORY_AVI_ZM = 0xffff8001,
  FILESHARE_CATEGORY_EXEMONITOR = 0xffff8002,
};

enum demoFreeCameraMode
{
  DEMO_FREECAM_MODE_FIRST = 0,
  DEMO_FREECAM_MODE_FREEROAM = 0,
  DEMO_FREECAM_MODE_EDIT = 1,
  DEMO_FREECAM_MODE_DOLLY = 2,
  DEMO_FREECAM_MODE_LAST = 2,
  DEMO_FREECAM_MODE_COUNT = 3,
};

typedef enum _D3DRESOURCETYPE
{
  D3DRTYPE_SURFACE = 1,
  D3DRTYPE_VOLUME = 2,
  D3DRTYPE_TEXTURE = 3,
  D3DRTYPE_VOLUMETEXTURE = 4,
  D3DRTYPE_CUBETEXTURE = 5,
  D3DRTYPE_VERTEXBUFFER = 6,
  D3DRTYPE_INDEXBUFFER = 7,
  D3DRTYPE_FORCE_DWORD = 0x7fffffff,
} D3DRESOURCETYPE, *PD3DRESOURCETYPE;

enum demoClipTransition
{
  DEMO_CLIP_TRANSITION_FIRST = 0,
  DEMO_CLIP_TRANSITION_NONE = 0,
  DEMO_CLIP_TRANSITION_FADE = 1,
  DEMO_CLIP_TRANSITION_LAST = 1,
  DEMO_CLIP_TRANSITION_COUNT = 2,
};

struct ID3D11UnorderedAccessView
{
}; /* size: 0x0004 */

enum demoRestorePoint
{
  DEMO_RESTORE_POINT_START = 0,
  DEMO_RESTORE_POINT_END = 1,
  DEMO_RESTORE_POINT_COUNT = 2,
};

struct UnarchivedMatchState
{
  /* 0x0000 */ int teamScores[9];
  /* 0x0024 */ int matchUIVisibilityFlags;
  /* 0x0028 */ enum scoreboardColumnType_t scoreboardColumnTypes[5];
  /* 0x003c */ unsigned char sideHasMeat;
  /* 0x003d */ BOOL initialPlayersConnected;
  /* 0x003e */ char Padding_93[2];
  /* 0x0040 */ unsigned int talkFlags;
}; /* size: 0x0044 */

enum demoHighlightReelPlayerPriority
{
  DEMO_HIGHLIGHT_REEL_PLAYER_PRIORITY_EVERYONE = 0,
  DEMO_HIGHLIGHT_REEL_PLAYER_PRIORITY_FRIEND = 1,
  DEMO_HIGHLIGHT_REEL_PLAYER_PRIORITY_SELF = 2,
  DEMO_HIGHLIGHT_REEL_PLAYER_PRIORITY_COUNT = 3,
};

enum demoDollyCameraTimeScaleMode
{
  DEMO_DOLLYCAM_TIMESCALE_MODE_MANUAL = 0,
  DEMO_DOLLYCAM_TIMESCALE_MODE_LINEAR = 1,
  DEMO_DOLLYCAM_TIMESCALE_MODE_FIXED = 2,
  DEMO_DOLLYCAM_TIMESCALE_MODE_COUNT = 3,
};

enum attachedFieldType_t
{
  AFT_ATTACHMENTTYPE = 18,
  AFT_WEAPONTYPE = 19,
  AFT_WEAPONCLASS = 20,
  AFT_OVERLAYRETICLE = 21,
  AFT_OVERLAYINTERFACE = 22,
  AFT_PENETRATE_TYPE = 23,
  AFT_FIRETYPE = 24,
  AFT_NUM_FIELD_TYPES = 25,
};

enum demoCameraMode
{
  DEMO_CAMERA_MODE_NONE = 0,
  DEMO_CAMERA_MODE_THIRDPERSON = 1,
  DEMO_CAMERA_MODE_FREECAM = 2,
  DEMO_CAMERA_MODE_COUNT = 3,
};

enum D3D10_MAP
{
};

struct SessionStaticData
{
  /* 0x0000 */ char* sessionName;
  /* 0x0004 */ BOOL registerUsersWithVoice;
  /* 0x0005 */ BOOL isDedicated;
  /* 0x0006 */ char __PADDING__[2];
}; /* size: 0x0008 */

enum uiMenuCommand_t
{
  UIMENU_NONE = 0,
  UIMENU_MAIN = 1,
  UIMENU_MAINLOBBY = 2,
  UIMENU_INGAME = 3,
  UIMENU_PREGAME = 4,
  UIMENU_POSTGAME = 5,
  UIMENU_WM_QUICKMESSAGE = 6,
  UIMENU_SCRIPT_POPUP = 7,
  UIMENU_SCOREBOARD = 8,
  UIMENU_GAMERCARD = 9,
  UIMENU_MUTEERROR = 10,
  UIMENU_SPLITSCREENGAMESETUP = 11,
  UIMENU_SYSTEMLINKJOINGAME = 12,
  UIMENU_PARTY = 13,
  UIMENU_WAGER_PARTY = 14,
  UIMENU_LEAGUE_PARTY = 15,
  UIMENU_GAMELOBBY = 16,
  UIMENU_WAGERLOBBY = 17,
  UIMENU_PRIVATELOBBY = 18,
  UIMENU_LEAGUELOBBY = 19,
  UIMENU_THEATERLOBBY = 20,
  UIMENU_MIGRATION = 21,
  UIMENU_CONTROLLERREMOVED = 22,
  UIMENU_ENDOFGAME = 23,
  UIMENU_INGAME_NOUNPAUSE = 24,
};

enum eSpawnSystemDebugMode
{
  SS_DEBUG_OFF = 0,
  SS_DEBUG_LIVE = 1,
  SS_DEBUG_ARCHIVE_LOADING = 2,
  SS_DEBUG_ARCHIVE_VIEW = 3,
  SS_DEBUG_ARCHIVE_SIMULATE = 4,
  SS_DEBUG_ARCHIVE_SIMULATE_LIVE = 5,
  SS_DEBUG_ARCHIVE_MAX = 5,
  SS_DEBUG_COUNT = 6,
};

typedef enum _TAG_UNNAMED_195
{
  CS_FREE = 0,
  CS_ZOMBIE = 1,
  CS_RECONNECTING = 2,
  CS_CONNECTED = 3,
  CS_CLIENTLOADING = 4,
  CS_ACTIVE = 5,
} TAG_UNNAMED_195, *PTAG_UNNAMED_195;

typedef enum _NVAPI_DITHER_TYPE
{
  NVAPI_DITHER_TYPE_DEFAULT = 0,
  NVAPI_DITHER_TYPE_ENABLE = 1,
  NVAPI_DITHER_TYPE_DISABLE = 2,
} NVAPI_DITHER_TYPE, *PNVAPI_DITHER_TYPE;

struct DPCChannel
{
  /* 0x0000 */ unsigned short counter;
  /* 0x0002 */ unsigned char top;
  /* 0x0003 */ unsigned char bottom;
  /* 0x0004 */ unsigned char flag;
  /* 0x0005 */ unsigned char musicMode;
  /* 0x0006 */ unsigned char osc;
  /* 0x0007 */ char __PADDING__[1];
}; /* size: 0x0008 */

typedef enum _TAG_UNNAMED_196
{
  CINEMATIC_ID_INVALID = 0,
  CINEMATIC_ID_MIN_VALID = 1,
  CINEMATIC_ID_MAX_VALID = 32,
  CINEMATIC_ID_RESERVED_BIT = 4096,
} TAG_UNNAMED_196, *PTAG_UNNAMED_196;

enum D3D10_DSV_DIMENSION
{
};

enum profile_category_e
{
  PROFC_NONE = 0,
  PROFC_ADDPACK = 1,
  PROFC_GAMELOGIC = 2,
  PROFC_SCRIPT = 3,
  PROFC_DRAW = 4,
  PROFC_DRAW_ADD_SCENE = 5,
  PROFC_DRAWSKIN = 6,
  PROFC_DPVS = 7,
  PROFC_SOUND = 8,
  PROFC_SOUND_GAME = 9,
  PROFC_SOUND_UPDATE = 10,
  PROFC_SOUND_DRIVER = 11,
  PROFC_SOUND_OCC = 12,
  PROFC_FX = 13,
  PROFC_STREAMER = 14,
  PROFC_PHYSICS = 15,
  PROFC_ANIM = 16,
  PROFC_DRAW2D = 17,
  PROFC_SERVER = 18,
  PROFC_WAIT = 19,
  PROFC_MAX_COUNT = 20,
};

class bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass>::Node
{
  /* 0x0000 */ class bdReference<bdByteBuffer> m_data;
  /* 0x0004 */ long Padding_94;
  /* 0x0008 */ unsigned __int64 m_key;
  /* 0x0010 */ class bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass>::Node* m_next;
}; /* size: 0x0018 */

enum demoDebugInformation
{
  DEMO_DEBUG_INFORMATION_NONE = 0,
  DEMO_DEBUG_INFORMATION_ENTITIES = 1,
  DEMO_DEBUG_INFORMATION_FAKE_ENTITIES = 2,
  DEMO_DEBUG_INFORMATION_HIGHLIGHT_REEL_POINTS = 3,
  DEMO_DEBUG_INFORMATION_COUNT = 4,
};

class phys_static_array<phys_vec3 *,6144>::iterator
{
  /* 0x0000 */ class phys_vec3** m_ptr;
}; /* size: 0x0004 */

enum print_msg_dest_t
{
  CON_DEST_CONSOLE = 0,
  CON_DEST_MINICON = 1,
  CON_DEST_ERROR = 2,
  CON_DEST_GAME_FIRST = 3,
  CON_DEST_GAME1 = 3,
  CON_DEST_GAME2 = 4,
  CON_DEST_GAME3 = 5,
  CON_DEST_GAME4 = 6,
  CON_DEST_GAME_LAST = 6,
  CON_DEST_COUNT = 7,
};

struct trigger_info_t
{
  /* 0x0000 */ unsigned short entnum;
  /* 0x0002 */ unsigned short otherEntnum;
  /* 0x0004 */ int useCount;
  /* 0x0008 */ int otherUseCount;
}; /* size: 0x000c */

typedef enum _TAG_UNNAMED_197
{
  HUDELEMFLAG_FOREGROUND = 1,
  HUDELEMFLAG_HIDEWHENDEAD = 2,
  HUDELEMFLAG_HIDEWHENINMENU = 4,
  HUDELEMFLAG_FONTSTYLE3D_SHADOWED = 8,
  HUDELEMFLAG_FONTSTYLE3D_SHADOWED_MORE = 16,
  HUDELEMFLAG_FONT3D_USE_GLOWCOLOR = 32,
  HUDELEMFLAG_HIDEWHENINKILLCAM = 64,
  HUDELEMFLAG_REDACT = 128,
  HUDELEMFLAG_FADEWHENTARGETED = 256,
  HUDELEMFLAG_HIDEWHENINDEMO = 512,
  HUDELEMFLAG_HIDEWHILEREMOTECONTROLING = 1024,
  HUDELEMFLAG_COD7DECODE = 2048,
  HUDELEMFLAG_NO_OFFSCREEN_WAYPOINT = 4096,
  HUDELEMFLAG_HIDEWHENINSCOPE = 8192,
  HUDELEMFLAG_TYPEWRITER = 16384,
  HUDELEMFLAG_IMMUNE_TO_DEMO_GAMEHUD_SETTINGS = 0xffff8000,
  HUDELEMFLAG_IMMUNE_TO_DEMO_FREECAMERA = 0x10000,
  HUDELEMFLAG_SHOW_PLAYER_TEAM_HUDELEM_TO_SPECTATOR = 0x20000,
  HUDELEMFLAG_DEBUG = 0x40000,
  HUDELEMFLAGBITS = 19,
} TAG_UNNAMED_197, *PTAG_UNNAMED_197;

typedef enum _TAG_UNNAMED_198
{
  CLASS_NUM_ENTITY = 0,
  CLASS_NUM_HUDELEM = 1,
  CLASS_NUM_PATHNODE = 2,
  CLASS_NUM_VEHICLENODE = 3,
  CLASS_NUM_DYNENTITY = 4,
  CLASS_NUM_MENUELEM = 5,
  CLASS_NUM_COUNT = 6,
} TAG_UNNAMED_198, *PTAG_UNNAMED_198;

typedef enum _NV_GPU_ILLUMINATION_ATTRIB
{
  NV_GPU_IA_LOGO_BRIGHTNESS = 0,
  NV_GPU_IA_SLI_BRIGHTNESS = 1,
} NV_GPU_ILLUMINATION_ATTRIB, *PNV_GPU_ILLUMINATION_ATTRIB;

enum SndStopSoundFlags
{
  SND_STOP_ALL = 0,
  SND_STOP_PAUSED = 1,
};

enum demoClipCommand
{
  DEMO_CLIP_CMD_SET_CLIENT = 0,
  DEMO_CLIP_CMD_SET_TIMESCALE = 1,
  DEMO_CLIP_CMD_SET_FOV = 2,
  DEMO_CLIP_CMD_SET_CAMERA_MODE = 3,
  DEMO_CLIP_CMD_SET_CAMERA_ORIGIN = 4,
  DEMO_CLIP_CMD_SET_CAMERA_ANGLES = 5,
  DEMO_CLIP_CMD_SET_CAMERA_TRANSFORM = 6,
  DEMO_CLIP_CMD_SET_CAMERA_OFFSET_ENTITY = 7,
  DEMO_CLIP_CMD_HIDE_GAME_HUD = 8,
  DEMO_CLIP_CMD_RESET_SNAPSHOT_DATA = 9,
  DEMO_CLIP_CMD_SET_PAUSED_STATE = 10,
  DEMO_CLIP_CMD_TRANSITION = 11,
  DEMO_CLIP_CMD_END_OF_FRAME = 12,
  DEMO_CLIP_CMD_SET_HIGHLIGHT_REEL_PRIORITY = 13,
};

typedef enum _TAG_UNNAMED_199
{
  FS_SEEK_CUR = 0,
  FS_SEEK_END = 1,
  FS_SEEK_SET = 2,
} TAG_UNNAMED_199, *PTAG_UNNAMED_199;

enum GamePadButton
{
  GPAD_NONE = 0,
  GPAD_UP = 0x10000001,
  GPAD_DOWN = 0x10000002,
  GPAD_LEFT = 0x10000004,
  GPAD_RIGHT = 0x10000008,
  GPAD_START = 0x10000010,
  GPAD_BACK = 0x10000020,
  GPAD_L3 = 0x10000040,
  GPAD_R3 = 0x10000080,
  GPAD_A = 0x10001000,
  GPAD_B = 0x10002000,
  GPAD_X = 0x10004000,
  GPAD_Y = 0x10008000,
  GPAD_L_SHLDR = 0x10000100,
  GPAD_R_SHLDR = 0x10000200,
  GPAD_L_TRIG = 0x20000000,
  GPAD_R_TRIG = 0x20000001,
};

typedef enum _TAG_UNNAMED_200
{
  PARTYSTATUS_EMPTY = 0,
  PARTYSTATUS_ZOMBIE = 1,
  PARTYSTATUS_ANONYMOUS = 2,
  PARTYSTATUS_PRESENT = 3,
  PARTYSTATUS_TESTCLIENT = 4,
  PARTYSTATUS_COUNT = 5,
} TAG_UNNAMED_200, *PTAG_UNNAMED_200;

enum filesharePrimaryTags_e
{
  FILESHARE_PRITAG_GAMETYPE = 1,
  FILESHARE_PRITAG_MAP = 2,
  FILESHARE_PRITAG_CATEGORY = 3,
  FILESHARE_PRITAG_WINNERS = 4,
  FILESHARE_PRITAG_PLAYLIST_TYPE = 5,
  FILESHARE_PRITAG_PLAYLIST_ID = 6,
  FILESHARE_PRITAG_XUIDS = 7,
  FILESHARE_PRITAG_LOSERS = 8,
  FILESHARE_PRITAG_DROPOUTS = 9,
  FILESHARE_PRITAG_LEAGUE_SUBDIV_ID = 10,
  FILESHARE_PRITAG_LEAGUE_TEAM_ID = 11,
  FILESHARE_PRITAG_FINGERPRINT = 12,
  FILESHARE_PRITAG_MPZM = 13,
  FILESHARE_PRITAG_EMBLEM_FINGERPRINT = 14,
  FILESHARE_PRITAG_AUTHORXUID = 15,
  FILESHARE_PRITAG_ANTICHEAT = 16,
  FILESHARE_PRITAG_UPLOADTRACKER_BEGINTIMESTAMP = 17,
  FILESHARE_PRITAG_UPLOADTRACKER_COUNTER = 18,
  FILESHARE_PRITAG_MATCHID = 19,
  FILESHARE_PRITAG_COUNT = 20,
};

typedef enum _NVVIOANCPARITYCOMPUTATION
{
  NVVIOANCPARITYCOMPUTATION_AUTO = 0,
  NVVIOANCPARITYCOMPUTATION_ON = 1,
  NVVIOANCPARITYCOMPUTATION_OFF = 2,
} NVVIOANCPARITYCOMPUTATION, *PNVVIOANCPARITYCOMPUTATION;

enum fileshareMPZMPTag_e
{
  FILESHARE_MPZM_TAG_MP = 0,
  FILESHARE_MPZM_TAG_ZM = 1,
};

struct tagPARAMDESC
{
  /* 0x0000 */ struct tagPARAMDESCEX* pparamdescex;
  /* 0x0004 */ unsigned short wParamFlags;
  /* 0x0006 */ char __PADDING__[2];
}; /* size: 0x0008 */

struct tagELEMDESC
{
  /* 0x0000 */ struct tagTYPEDESC tdesc;
  union
  {
    /* 0x0008 */ struct tagIDLDESC idldesc;
    /* 0x0008 */ struct tagPARAMDESC paramdesc;
  }; /* size: 0x0008 */
}; /* size: 0x0010 */

enum filesharePlaylistType_e
{
  FILESHARE_PLAYLIST_TYPE_PUBLIC = 0,
  FILESHARE_PLAYLIST_TYPE_CUSTOM = 1,
  FILESHARE_PLAYLIST_TYPE_LEAGUE = 2,
};

class bdFastArray<char [64]>
{
  /* 0x0000 */ char* m_data[64];
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

enum demoStreamingState
{
  STREAMING_STATE_GAMESTATE = 0,
  STREAMING_STATE_SEGMENTS = 1,
  STREAMING_STATE_TRANSITION = 2,
  STREAMING_STATE_ENDOFCLIP = 3,
  STREAMING_STATE_INFO = 4,
  STREAMING_STATE_DONE = 5,
};

enum downloadStreamingState
{
  DOWNLOAD_STREAMING_STATE_NONE = 0,
  DOWNLOAD_STREAMING_STATE_FULL_FILE = 1,
  DOWNLOAD_STREAMING_STATE_HEADER_BLOCK = 2,
  DOWNLOAD_STREAMING_STATE_FOOTER_BLOCK = 3,
  DOWNLOAD_STREAMING_STATE_DATA_BLOCK = 4,
  DOWNLOAD_STREAMING_STATE_FINISHED = 5,
  DOWNLOAD_STREAMING_STATE_FAILED = 6,
};

struct NTPMessage
{
  /* 0x0000 */ unsigned int header;
  /* 0x0004 */ unsigned int root_delay;
  /* 0x0008 */ unsigned int root_dispersion;
  /* 0x000c */ unsigned int reference_indentifier;
  /* 0x0010 */ unsigned __int64 reference_timestamp;
  /* 0x0018 */ unsigned __int64 originate_timestamp;
  /* 0x0020 */ unsigned __int64 receive_timestamp;
  /* 0x0028 */ unsigned __int64 transmit_timestamp;
}; /* size: 0x0030 */

struct animScriptCondition_t
{
  /* 0x0000 */ int index;
  /* 0x0004 */ unsigned int value;
}; /* size: 0x0008 */

struct animScriptItem_t
{
  /* 0x0000 */ int numConditions;
  /* 0x0004 */ struct animScriptCondition_t conditions[4];
  /* 0x0024 */ int numCommands;
  /* 0x0028 */ struct animScriptCommand_t commands[8];
}; /* size: 0x00c8 */

typedef enum _TAG_UNNAMED_201
{
  KEYBOARD_TYPE_NONE = 0,
  KEYBOARD_TYPE_DEMO = 1,
  KEYBOARD_TYPE_EMAIL = 2,
  KEYBOARD_TYPE_CUSTOM_CLASS = 3,
  KEYBOARD_TYPE_LEAGUES = 4,
  KEYBOARD_TYPE_TWITCH_USER = 5,
  KEYBOARD_TYPE_TWITCH_PASS = 6,
  KEYBOARD_TYPE_TEXT_MESSAGE = 7,
  KEYBOARD_TYPE_ADD_FRIEND = 8,
  KEYBOARD_TYPE_REGISTRATION_INPUT_PASSWORD = 9,
  KEYBOARD_TYPE_REGISTRATION_INPUT_ACCENTS = 10,
  KEYBOARD_TYPE_REGISTRATION_INPUT_NUMERIC = 11,
  KEYBOARD_TYPE_REGISTRATION_INPUT_ACCOUNTNAME = 12,
  KEYBOARD_TYPE_NUMERIC_FIELD = 13,
  KEYBOARD_TYPE_CLAN_TAG = 14,
  KEYBOARD_TYPE_TWITTER_USER = 15,
  KEYBOARD_TYPE_TWITTER_PASS = 16,
  KEYBOARD_TYPE_CLASS_SET = 17,
  KEYBOARD_TYPE_COUNT = 18,
} TAG_UNNAMED_201, *PTAG_UNNAMED_201;

enum FxBeamType
{
  BEAMTYPE_TRACER = 0,
  BEAMTYPE_SMOKE_TRACER = 1,
  BEAMTYPE_LASER = 2,
  BEAMTYPE_FLAME = 3,
  BEAMTYPE_DEMOLINE = 4,
  BEAMTYPE_ARC = 5,
  BEAMTYPE_COUNT = 6,
};

enum D2D1_FEATURE_LEVEL
{
  D2D1_FEATURE_LEVEL_DEFAULT = 0,
  D2D1_FEATURE_LEVEL_9 = 0xffff9100,
  D2D1_FEATURE_LEVEL_10 = 0xffffa000,
  D2D1_FEATURE_LEVEL_FORCE_DWORD = -1,
};

enum demoDollyCamInformationType
{
  DEMO_DOLLYCAM_INFORMATION_FX = 0,
  DEMO_DOLLYCAM_INFORMATION_TEXT = 1,
};

typedef enum _TAG_UNNAMED_202
{
  TS_TURRET_SENTRY = 1,
  TS_TURRET_TOW = 2,
  TS_TURRET_FIRING = 4,
  TS_TURRET_IS_CARRIED = 8,
  TS_TURRET_OVERHEATING = 16,
  TS_TURRET_INITIALIZING = 32,
  TS_TURRET_ROTATING = 64,
  TS_TURRET_MICROWAVE = 128,
  TS_TURRET_WALLMOUNT = 128,
} TAG_UNNAMED_202, *PTAG_UNNAMED_202;

struct pendingServer_t
{
  /* 0x0000 */ char adrstr[64];
  /* 0x0040 */ char name[64];
  /* 0x0080 */ int startTime;
  /* 0x0084 */ int serverNum;
  /* 0x0088 */ int valid;
}; /* size: 0x008c */

enum turret_handler
{
  TURRET_HANDLER_CLIENT = 0,
  TURRET_HANDLER_SERVER = 1,
  TURRET_HANDLER_COUNT = 2,
};

struct ExtraCamLodInfo
{
  /* 0x0000 */ union vec3_t pos[4];
  /* 0x0030 */ unsigned int posValidBits;
}; /* size: 0x0034 */

typedef enum _TAG_UNNAMED_203
{
  DPVS_DYNAMIC_BATCH_SIZE = 6,
} TAG_UNNAMED_203, *PTAG_UNNAMED_203;

class RaiiSrvString
{
  /* 0x0000 */ unsigned short m_stringHash;
  /* 0x0002 */ short m_iInst;
}; /* size: 0x0004 */

enum GlassShard::RemoveReason
{
  REMOVE_HIT_BOTTOM = 0,
  REMOVE_OUT_OF_SHARDS = 1,
  REMOVE_OUT_OF_GROUPS = 2,
  REMOVE_OUT_OF_VERTEX_MEMORY = 3,
  REMOVE_OUT_OF_SHARD_MEMORY = 4,
  REMOVE_OUT_OF_PHYSICS = 5,
  REMOVE_ROLLBACK_TIME = 6,
  REMOVE_INIT = 7,
  NUM_REMOVE_REASONS = 8,
  REMOVE_DONT_TRACK = 9,
};

enum DWRITE_FLOW_DIRECTION
{
};

typedef enum _TAG_UNNAMED_204
{
  FRAC_BITS = 7,
} TAG_UNNAMED_204, *PTAG_UNNAMED_204;

typedef enum _TAG_UNNAMED_205
{
  OVERHEAD = 16,
  MIN_SIZE = 32,
} TAG_UNNAMED_205, *PTAG_UNNAMED_205;

struct ExpressionStatement
{
  /* 0x0000 */ char* filename;
  /* 0x0004 */ int line;
  /* 0x0008 */ int numRpn;
  /* 0x000c */ struct expressionRpn* rpn;
}; /* size: 0x0010 */

enum GlassState::State
{
  PRISTINE = 0,
  CRACKED = 1,
  SHATTERED = 2,
  INVALID = 3,
};

class phys_simple_allocator<gjk_aabb_t>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

enum GlassOutline::SplitFailReason
{
  SPLIT_FAIL_START_POS = 0,
  SPLIT_FAIL_START_DIR = 1,
  SPLIT_FAIL_INIT = 2,
  SPLIT_FAIL_VERTS = 3,
  SPLIT_FAIL_AREA = 4,
  SPLIT_FAIL_MEMORY = 5,
  SPLIT_FAIL_ANGLE = 6,
  SPLIT_FAIL_NARROW = 7,
  NUM_SPLIT_FAIL_REASONS = 8,
};

typedef enum _TAG_UNNAMED_206
{
  MAX_GROUPS = 16,
} TAG_UNNAMED_206, *PTAG_UNNAMED_206;

enum eScriptsMismatch
{
  SCRIPTS_MISMATCH_NO_MODIFICATION = 0,
  SCRIPTS_MISMATCH_MODIFIED_NO_ACTION = 1,
  SCRIPTS_MISMATCH_MODIFIED = 2,
};

typedef enum _TAG_UNNAMED_207
{
  SHATTER = 0,
  TRACE_POINT = 1,
  EXPLOSION = 2,
  MELEE = 3,
  MAX_ACTIONS = 200,
} TAG_UNNAMED_207, *PTAG_UNNAMED_207;

class CPing
{
}; /* size: 0x0001 */

class CPingThread
{
  /* 0x0000 */ long Padding_95;
  /* 0x0004 */ unsigned int m_dwID;
  /* 0x0008 */ void* m_hThread;
  /* 0x000c */ void* m_hKillEvent;
  /* 0x0010 */ void* m_hSignalEvent;
  /* 0x0014 */ class CPing m_ping;
  /* 0x0015 */ char m_host[256];
  /* 0x0115 */ char Padding_96[3];
  /* 0x0118 */ struct HWND__* m_hWnd;
  /* 0x011c */ unsigned int m_nRetries;
  /* 0x0120 */ void* m_callback /* function */;
}; /* size: 0x0124 */

typedef enum _TAG_UNNAMED_208
{
  PHYS_OBJ_ID_NULL = 0,
  PHYS_OBJ_ID_DEAD = -1,
} TAG_UNNAMED_208, *PTAG_UNNAMED_208;

class jqMemBaseMarker
{
  /* 0x0000 */ void* MemBaseRestore;
}; /* size: 0x0004 */

enum XModelLodRampType
{
  XMODEL_LOD_RAMP_RIGID = 0,
  XMODEL_LOD_RAMP_SKINNED = 1,
  XMODEL_LOD_RAMP_COUNT = 2,
};

enum LumpType
{
  LUMP_MATERIALS = 0,
  LUMP_LIGHTBYTES_COMPRESSED = 1,
  LUMP_LIGHTGRIDENTRIES = 2,
  LUMP_LIGHTGRIDCOLORS = 3,
  LUMP_PLANES = 4,
  LUMP_BRUSHSIDES = 5,
  LUMP_BRUSHSIDEEDGECOUNTS = 6,
  LUMP_BRUSHEDGES = 7,
  LUMP_BRUSHES = 8,
  LUMP_TRIANGLES = 9,
  LUMP_DRAWVERTS = 10,
  LUMP_DRAWINDICES = 11,
  LUMP_CULLGROUPS = 12,
  LUMP_CULLGROUPINDICES = 13,
  LUMP_LIGHTBYTES_UNCOMPRESSED = 14,
  LUMP_OBSOLETE_2 = 15,
  LUMP_OBSOLETE_3 = 16,
  LUMP_OBSOLETE_4 = 17,
  LUMP_OBSOLETE_5 = 18,
  LUMP_PORTALVERTS = 19,
  LUMP_OBSOLETE_6 = 20,
  LUMP_UINDS = 21,
  LUMP_BRUSHVERTSCOUNTS = 22,
  LUMP_BRUSHVERTS = 23,
  LUMP_AABBTREES = 24,
  LUMP_CELLS = 25,
  LUMP_PORTALS = 26,
  LUMP_NODES = 27,
  LUMP_LEAFS = 28,
  LUMP_LEAFBRUSHES = 29,
  LUMP_LEAFSURFACES = 30,
  LUMP_COLLISIONVERTS = 31,
  LUMP_COLLISIONTRIS = 32,
  LUMP_COLLISIONEDGEWALKABLE = 33,
  LUMP_COLLISIONBORDERS = 34,
  LUMP_COLLISIONPARTITIONS = 35,
  LUMP_COLLISIONAABBS = 36,
  LUMP_MODELS = 37,
  LUMP_VISIBILITY = 38,
  LUMP_ENTITIES = 39,
  LUMP_PATHCONNECTIONS = 40,
  LUMP_REFLECTION_PROBES = 41,
  LUMP_VERTEX_LAYER_DATA = 42,
  LUMP_PRIMARY_LIGHTS = 43,
  LUMP_LIGHTGRIDHEADER = 44,
  LUMP_LIGHTGRIDROWS = 45,
  LUMP_OBSOLETE_10 = 46,
  LUMP_OBSOLETE_11 = 47,
  LUMP_OBSOLETE_12 = 48,
  LUMP_OBSOLETE_13 = 49,
  LUMP_OBSOLETE_14 = 50,
  LUMP_OBSOLETE_15 = 51,
  LUMP_UNUSED1 = 52,
  LUMP_UNUSED2 = 53,
  LUMP_UNUSED3 = 54,
  LUMP_UNUSED4 = 55,
  LUMP_UNUSED5 = 56,
  LUMP_UNUSED6 = 57,
  LUMP_SIMPLELIGHTMAPBYTES = 58,
  LUMP_UNUSED7 = 59,
  LUMP_UNUSED8 = 60,
  LUMP_UNUSED9 = 61,
  LUMP_LIGHTREGIONS = 62,
  LUMP_LIGHTREGION_HULLS = 63,
  LUMP_LIGHTREGION_AXES = 64,
  LUMP_UNUSED10 = 65,
  LUMP_LIGHTGRID2D_LIGHTS = 66,
  LUMP_LIGHTGRID2D_INDICES = 67,
  LUMP_LIGHTGRID2D_POINTS = 68,
  LUMP_LIGHTGRID2D_CELLS = 69,
  LUMP_LIGHT_CORONAS = 70,
  LUMP_SHADOWMAP_VOLUMES = 71,
  LUMP_SHADOWMAP_VOLUME_PLANES = 72,
  LUMP_EXPOSURE_VOLUMES = 73,
  LUMP_EXPOSURE_VOLUME_PLANES = 74,
  LUMP_WORLDFOG_VOLUMES = 75,
  LUMP_WORLDFOG_VOLUME_PLANES = 76,
  LUMP_VISION_VOLUMES = 77,
  LUMP_VISION_VOLUME_PLANES = 78,
  LUMP_OCCLUDERS = 79,
  LUMP_OUTDOORBOUNDS = 80,
  LUMP_HERO_ONLY_LIGHTS = 81,
  LUMP_STATIC_MODEL_DATA = 82,
  LUMP_SKY_GRID_VOLUMES = 83,
  LUMP_LIGHTING_INFO = 84,
  LUMP_SMODEL_LIGHTMAP_VCOLORS = 85,
  LUMP_SMODEL_LIGHTMAP_VC_INSTS = 86,
  LUMP_SIEGE_SKIN_MODEL_INSTS = 87,
  LUMP_LIGHTGRIDCOEFFS = 88,
  LUMP_LUT_VOLUMES = 89,
  LUMP_LUT_VOLUME_PLANES = 90,
  LUMP_WORLDFOG_MODIFIER_VOLUMES = 91,
  LUMP_WORLDFOG_MODIFIER_VOLUME_PLANES = 92,
  LUMP_COUNT = 93,
};

struct GfxVertexShaderLoadDef
{
  /* 0x0000 */ unsigned char* program;
  /* 0x0004 */ unsigned int programSize;
}; /* size: 0x0008 */

struct MaterialVertexShaderProgram
{
  /* 0x0000 */ struct ID3D11VertexShader* vs;
  /* 0x0004 */ struct GfxVertexShaderLoadDef loadDef;
}; /* size: 0x000c */

struct MaterialVertexShader
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ struct MaterialVertexShaderProgram prog;
}; /* size: 0x0010 */

typedef enum _TAG_UNNAMED_209
{
  LOCAL_VAR_STACK_SIZE = 64,
} TAG_UNNAMED_209, *PTAG_UNNAMED_209;

struct ID3D11PixelShader
{
}; /* size: 0x0004 */

typedef enum _TAG_UNNAMED_210
{
  MAX_VM_STACK_DEPTH = 32,
  MAX_VM_OPERAND_STACK = 2048,
} TAG_UNNAMED_210, *PTAG_UNNAMED_210;

typedef enum _TAG_UNNAMED_211
{
  OVERHEAD_DISPLAY_GAMERTAGONLY = 0,
  OVERHEAD_DISPLAY_RANK_AND_CLAN = 1,
  OVERHEAD_DISPLAY_GAMERTAG_CLAN_AND_RANK = 2,
  OVERHEAD_DISPLAY_MARQUEE = 3,
  OVERHEAD_REMOVE_MARQUEE = 4,
  OVERHEAD_RANK_ONLY = 5,
  NUM_OVERHEAD_DISPLAY_MODES = 6,
} TAG_UNNAMED_211, *PTAG_UNNAMED_211;

struct jqAtomicQueuePtr<jqAtomicQueue<jqBatch,32>::NodeType>
{
  union
  {
    struct
    {
      /* 0x0000 */ struct jqAtomicQueue<jqBatch,32>::NodeType* Ptr;
      /* 0x0004 */ unsigned int Count;
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned __int64 Val64;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct jqAtomicQueue<jqBatch,32>
{
  /* 0x0000 */ struct jqAtomicQueuePtr<jqAtomicQueue<jqBatch,32>::NodeType>* FreeListPtr;
  /* 0x0004 */ long Padding_97;
  /* 0x0008 */ struct jqAtomicQueuePtr<jqAtomicQueue<jqBatch,32>::NodeType> _FreeList;
  /* 0x0010 */ struct jqAtomicQueuePtr<jqAtomicQueue<jqBatch,32>::NodeType> Head;
  /* 0x0018 */ struct jqAtomicQueuePtr<jqAtomicQueue<jqBatch,32>::NodeType> Tail;
  /* 0x0020 */ struct jqAtomicQueue<jqBatch,32>* ThisPtr;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

struct jqQueue
{
  /* 0x0000 */ struct jqQueue* ThisPtr;
  /* 0x0004 */ long Padding_98;
  /* 0x0008 */ struct jqAtomicQueue<jqBatch,32> Queue;
  /* 0x0030 */ int QueuedBatchCount;
  /* 0x0034 */ unsigned int ProcessorsMask;
}; /* size: 0x0038 */

class jqAtomicHeap
{
  /* 0x0000 */ class jqAtomicHeap* ThisPtr;
  /* 0x0004 */ long Padding_99;
  /* 0x0008 */ class tlAtomicMutex Mutex;
  /* 0x0018 */ unsigned char* HeapBase;
  /* 0x001c */ unsigned int HeapSize;
  /* 0x0020 */ unsigned int BlockSize;
  /* 0x0024 */ volatile unsigned int TotalUsed;
  /* 0x0028 */ volatile unsigned int TotalBlocks;
  /* 0x002c */ int NLevels;
  /* 0x0030 */ struct jqAtomicHeap::LevelInfo Levels[11];
  /* 0x010c */ unsigned char* LevelData;
}; /* size: 0x0110 */

struct jqBatchPool
{
  /* 0x0000 */ struct jqBatchPool* ThisPtr;
  /* 0x0004 */ long Padding_100;
  /* 0x0008 */ struct jqQueue BaseQueue;
  union
  {
    struct
    {
      /* 0x0040 */ int QueuedBatchCount;
      /* 0x0044 */ int ExecutingBatchCount;
    }; /* size: 0x0008 */
    /* 0x0040 */ unsigned __int64 BatchCount;
  }; /* size: 0x0008 */
  /* 0x0048 */ class jqAtomicHeap BatchDataHeap;
}; /* size: 0x0158 */

enum XONLINE_NAT_TYPE
{
  XONLINE_NAT_OPEN = 1,
  XONLINE_NAT_MODERATE = 2,
  XONLINE_NAT_STRICT = 3,
};

class tlAtomicReadWriteMutex
{
  /* 0x0000 */ volatile unsigned __int64 WriteThreadId;
  /* 0x0008 */ volatile int ReadLockCount;
  /* 0x000c */ volatile int WriteLockCount;
  /* 0x0010 */ class tlAtomicReadWriteMutex* ThisPtr;
}; /* size: 0x0018 */

enum bdBandwidthTestStatus
{
  BD_BANDWIDTH_TEST_IDLE = 0,
  BD_BANDWIDTH_TEST_REQUESTING_TEST = 1,
  BD_BANDWIDTH_TEST_UPLOAD_WAITING = 2,
  BD_BANDWIDTH_TEST_UPLOAD_SENDING = 3,
  BD_BANDWIDTH_TEST_DOWNLOAD_WAITING = 4,
  BD_BANDWIDTH_TEST_DOWNLOAD_RECEIVING = 5,
  BD_BANDWIDTH_TEST_FINALIZING = 6,
  BD_BANDWIDTH_TEST_DONE = 7,
};

union PackedUnitVec
{
  /* 0x0000 */ unsigned int packed;
}; /* size: 0x0004 */

struct GfxVertex
{
  /* 0x0000 */ union vec4_t xyzw;
  /* 0x0010 */ union GfxColor color;
  /* 0x0014 */ union vec2_t texCoord;
  /* 0x001c */ union PackedUnitVec normal;
}; /* size: 0x0020 */

enum bdBandwidthTestInitStatus
{
  BD_BANDWIDTH_TEST_UNINITIALIZED = 0,
  BD_BANDWIDTH_TEST_INITIALIZED = 1,
};

enum DWNetStatus
{
  DW_NET_ERROR_START_FAILED = 0,
  DW_NET_ERROR_NO_LOCAL_IP = 1,
  DW_NET_NOT_STARTED = 2,
  DW_NET_STARTING_LAN = 3,
  DW_NET_STARTED_LAN = 4,
  DW_NET_STARTING_ONLINE = 5,
  DW_NET_STARTED_ONLINE = 6,
  DW_NET_LINK_RESET = 7,
};

struct ID3D11CommandList
{
}; /* size: 0x0004 */

enum e_JoinRejectionReason
{
  REASON_NONE = 0,
  REASON_PARTY_PRIVACY_CLOSED = 1,
  REASON_PARTY_PRIVACY_INVITE_ONLY = 2,
  REASON_PARTY_PRIVACY_FRIEND_ONLY = 3,
  REASON_SYSTEMLINK_LOBBY = 4,
};

typedef enum _NVVIOBITSPERCOMPONENT
{
  NVVIOBITSPERCOMPONENT_UNKNOWN = 0,
  NVVIOBITSPERCOMPONENT_8 = 1,
  NVVIOBITSPERCOMPONENT_10 = 2,
  NVVIOBITSPERCOMPONENT_12 = 3,
} NVVIOBITSPERCOMPONENT, *PNVVIOBITSPERCOMPONENT;

enum IMType
{
  JOIN_REQUEST = 0,
  JOIN_REPLY = 1,
  INVITE = 2,
  UPDATE_INVITE_INFO = 3,
  NUM_INSTANT_MESSAGE_TYPES = 4,
};

typedef enum _TAG_UNNAMED_212
{
  PARTYPRIVACY_OPEN = 0,
  PARTYPRIVACY_FRIENDS_ONLY = 1,
  PARTYPRIVACY_INVITE_ONLY = 2,
  PARTYPRIVACY_CLOSED = 3,
} TAG_UNNAMED_212, *PTAG_UNNAMED_212;

typedef union _LARGE_INTEGER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ long HighPart;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ long HighPart;
    } /* size: 0x0008 */ u;
    /* 0x0000 */ __int64 QuadPart;
  }; /* size: 0x0008 */
} LARGE_INTEGER, *PLARGE_INTEGER; /* size: 0x0008 */

enum EUserTier
{
  USER_TIER_NONE = 0,
  USER_TIER_SUPER = 1,
  USER_TIER_DEVELOPER = 2,
  USER_TIER_FRIEND = 3,
  USER_TIER_DEDICATED = 4,
  USER_TIER_ENEMY = 666,
};

typedef enum _TAG_UNNAMED_213
{
  HOST_SERVER_OK = 0,
  HOST_SERVER_BANDWIDTH_TEST_IN_PROGRESS = 1,
  HOST_SERVER_NOT_HOST_OF_PARTY = 2,
  HOST_SERVER_DEDICATED_ONLY = 3,
  HOST_SERVER_NAT_TYPE_NOT_ALLOWED = 4,
  HOST_SERVER_WE_SHOULD_NOT_HOST = 5,
  HOST_SERVER_IS_NOT_GOOD_CITIZEN = 6,
  HOST_SERVER_HAS_NOT_NECESSARY_BANDWIDTH = 7,
  HOST_SERVER_NET_ENGINE_NOT_STARTED = 8,
  HOST_SERVER_LIVE_STREAMING = 9,
  HOST_SERVER_BANNED_FROM_HOSTING = 10,
} TAG_UNNAMED_213, *PTAG_UNNAMED_213;

enum bdNotificationType
{
  BD_FRIENDSHIP_REJECTED = 1,
  BD_FRIENDSHIP_ACCEPTED = 2,
  BD_FRIENDSHIP_REVOKED = 3,
  BD_TEAMNAME_UPDATED = 4,
  BD_TEAMMEMBER_PROMOTED_TO_ADMIN = 5,
  BD_TEAMMEMBER_PROMOTED_TO_OWNER = 6,
  BD_TEAMMEMBER_DEMOTED_TO_ORDINARY = 7,
  BD_TEAMMEMBER_KICKED = 8,
  BD_TEAM_DISSOLVED = 9,
  BD_TEAMMEMBER_LEFT = 10,
  BD_TEAMMEMBER_INVITE_REJECTED = 11,
  BD_TEAMMEMBER_INVITE_ACCEPTED = 12,
};

typedef enum _NVVIOCOMPSYNCTYPE
{
  NVVIOCOMPSYNCTYPE_AUTO = 0,
  NVVIOCOMPSYNCTYPE_BILEVEL = 1,
  NVVIOCOMPSYNCTYPE_TRILEVEL = 2,
} NVVIOCOMPSYNCTYPE, *PNVVIOCOMPSYNCTYPE;

class bdEventLogID
{
  /* 0x0000 */ long Padding_101[2];
  /* 0x0008 */ unsigned __int64 m_eventLogID;
}; /* size: 0x0010 */

enum bdMessaging::bdBlockLevel
{
  BD_NOT_BLOCKED = 0,
  BD_BLOCKED = 1,
};

class bdAntiCheatChallenges
{
  /* 0x0000 */ long Padding_102[2];
  /* 0x0008 */ class bdArray<bdAntiCheatChallenge>* m_challenges;
}; /* size: 0x000c */

enum bdTwitterFieldCode
{
  BD_TWITTER_NONE = 0,
  BD_TWITTER_SCREENNAME = 2,
  BD_TWITTER_NAME = 4,
  BD_TWITTER_DESCRIPTION = 8,
  BD_TWITTER_URL = 16,
  BD_TWITTER_LOCATION = 32,
  BD_TWITTER_STATUSTEXT = 64,
  BD_TWITTER_MAX_FIELD_CODE = 65,
};

enum twitterStatus_e
{
  TW_ACCOUNT_NOT_CHECKED = 0,
  TW_ACCOUNT_CHECKING = 1,
  TW_ACCOUNT_CHECKED = 2,
  TW_ACCOUNT_CHECK_FAILED = 3,
};

struct multiDef_s
{
  /* 0x0000 */ const char* dvarList[32];
  /* 0x0080 */ const char* dvarStr[32];
  /* 0x0100 */ float dvarValue[32];
  /* 0x0180 */ int count;
  /* 0x0184 */ int actionOnEnterPressOnly;
  /* 0x0188 */ int strDef;
}; /* size: 0x018c */

struct GfxReviveFx
{
  /* 0x0000 */ BOOL enabled;
  /* 0x0001 */ char Padding_103[3];
  /* 0x0004 */ float reviveEdgeColorTemp;
  /* 0x0008 */ float reviveEdgeSaturation;
  /* 0x000c */ union vec3_t reviveEdgeScale;
  /* 0x0018 */ union vec3_t reviveEdgeContrast;
  /* 0x0024 */ union vec3_t reviveEdgeOffset;
  /* 0x0030 */ float reviveEdgeMaskAdjust;
  /* 0x0034 */ float reviveEdgeAmount;
}; /* size: 0x0038 */

enum taskCompleteResults
{
  TASK_NOTCOMPLETE = 0,
  TASK_COMPLETE = 1,
  TASK_ERROR = 2,
};

enum NV_TV_BORDER_COLOR
{
  NV_TV_BORDER_COLOR_BLACK = 0,
  NV_TV_BORDER_COLOR_GREY = 1,
};

typedef enum _TAG_UNNAMED_214
{
  PK_PUBLIC = 0,
  PK_PRIVATE = 1,
} TAG_UNNAMED_214, *PTAG_UNNAMED_214;

enum D2D1_ALPHA_MODE
{
  D2D1_ALPHA_MODE_UNKNOWN = 0,
  D2D1_ALPHA_MODE_PREMULTIPLIED = 1,
  D2D1_ALPHA_MODE_STRAIGHT = 2,
  D2D1_ALPHA_MODE_IGNORE = 3,
  D2D1_ALPHA_MODE_FORCE_DWORD = -1,
};

enum statsResetReason_t
{
  STATSRESET_FILE_NOT_FOUND = 0,
  STATSRESET_CFG_VERSION_MISMATCH = 1,
  STATSRESET_DDL_CONVERSION_FAILED = 2,
  STATSRESET_EXEC_RESET_COMMAND = 3,
  STATSRESET_CHEATER_DETECTED = 4,
  STATSRESET_NEW_OFFLINE_USER = 5,
  STATSRESET_PRESTIGE_RESETALL = 6,
};

struct WeaponDef
{
  /* 0x0000 */ const char* szOverlayName;
  /* 0x0004 */ struct XModel** gunXModel;
  /* 0x0008 */ struct XModel* handXModel;
  /* 0x000c */ const char* szModeName;
  /* 0x0010 */ unsigned short* notetrackSoundMapKeys;
  /* 0x0014 */ unsigned short* notetrackSoundMapValues;
  /* 0x0018 */ int playerAnimType;
  /* 0x001c */ enum weapType_t weapType;
  /* 0x0020 */ enum weapClass_t weapClass;
  /* 0x0024 */ enum PenetrateType penetrateType;
  /* 0x0028 */ enum ImpactType impactType;
  /* 0x002c */ enum weapInventoryType_t inventoryType;
  /* 0x0030 */ enum weapFireType_t fireType;
  /* 0x0034 */ enum weapClipType_t clipType;
  /* 0x0038 */ enum barrelType_t barrelType;
  /* 0x003c */ int itemIndex;
  /* 0x0040 */ const char* parentWeaponName;
  /* 0x0044 */ int iJamFireTime;
  /* 0x0048 */ int overheatWeapon;
  /* 0x004c */ float overheatRate;
  /* 0x0050 */ float cooldownRate;
  /* 0x0054 */ float overheatEndVal;
  /* 0x0058 */ BOOL coolWhileFiring;
  /* 0x0059 */ BOOL fuelTankWeapon;
  /* 0x005a */ char Padding_104[2];
  /* 0x005c */ int iTankLifeTime;
  /* 0x0060 */ enum OffhandClass offhandClass;
  /* 0x0064 */ enum OffhandSlot offhandSlot;
  /* 0x0068 */ enum weapStance_t stance;
  /* 0x006c */ const struct FxEffectDef* viewFlashEffect;
  /* 0x0070 */ const struct FxEffectDef* worldFlashEffect;
  /* 0x0074 */ const struct FxEffectDef* barrelCooldownEffect;
  /* 0x0078 */ int barrelCooldownMinCount;
  /* 0x007c */ union vec3_t vViewFlashOffset;
  /* 0x0088 */ union vec3_t vWorldFlashOffset;
  /* 0x0094 */ const char* pickupSound;
  /* 0x0098 */ const char* pickupSoundPlayer;
  /* 0x009c */ const char* ammoPickupSound;
  /* 0x00a0 */ const char* ammoPickupSoundPlayer;
  /* 0x00a4 */ const char* projectileSound;
  /* 0x00a8 */ const char* pullbackSound;
  /* 0x00ac */ const char* pullbackSoundPlayer;
  /* 0x00b0 */ const char* fireSound;
  /* 0x00b4 */ const char* fireSoundPlayer;
  /* 0x00b8 */ const char* fireLoopSound;
  /* 0x00bc */ const char* fireLoopSoundPlayer;
  /* 0x00c0 */ const char* fireLoopEndSound;
  /* 0x00c4 */ const char* fireLoopEndSoundPlayer;
  /* 0x00c8 */ const char* fireStartSound;
  /* 0x00cc */ const char* fireStopSound;
  /* 0x00d0 */ const char* fireKillcamSound;
  /* 0x00d4 */ const char* fireStartSoundPlayer;
  /* 0x00d8 */ const char* fireStopSoundPlayer;
  /* 0x00dc */ const char* fireKillcamSoundPlayer;
  /* 0x00e0 */ const char* fireLastSound;
  /* 0x00e4 */ const char* fireLastSoundPlayer;
  /* 0x00e8 */ const char* emptyFireSound;
  /* 0x00ec */ const char* emptyFireSoundPlayer;
  /* 0x00f0 */ const char* crackSound;
  /* 0x00f4 */ const char* whizbySound;
  /* 0x00f8 */ const char* meleeSwipeSound;
  /* 0x00fc */ const char* meleeSwipeSoundPlayer;
  /* 0x0100 */ const char* meleeHitSound;
  /* 0x0104 */ const char* meleeMissSound;
  /* 0x0108 */ const char* rechamberSound;
  /* 0x010c */ const char* rechamberSoundPlayer;
  /* 0x0110 */ const char* reloadSound;
  /* 0x0114 */ const char* reloadSoundPlayer;
  /* 0x0118 */ const char* reloadEmptySound;
  /* 0x011c */ const char* reloadEmptySoundPlayer;
  /* 0x0120 */ const char* reloadStartSound;
  /* 0x0124 */ const char* reloadStartSoundPlayer;
  /* 0x0128 */ const char* reloadEndSound;
  /* 0x012c */ const char* reloadEndSoundPlayer;
  /* 0x0130 */ const char* rotateLoopSound;
  /* 0x0134 */ const char* rotateLoopSoundPlayer;
  /* 0x0138 */ const char* rotateStopSound;
  /* 0x013c */ const char* rotateStopSoundPlayer;
  /* 0x0140 */ const char* deploySound;
  /* 0x0144 */ const char* deploySoundPlayer;
  /* 0x0148 */ const char* finishDeploySound;
  /* 0x014c */ const char* finishDeploySoundPlayer;
  /* 0x0150 */ const char* breakdownSound;
  /* 0x0154 */ const char* breakdownSoundPlayer;
  /* 0x0158 */ const char* finishBreakdownSound;
  /* 0x015c */ const char* finishBreakdownSoundPlayer;
  /* 0x0160 */ const char* detonateSound;
  /* 0x0164 */ const char* detonateSoundPlayer;
  /* 0x0168 */ const char* nightVisionWearSound;
  /* 0x016c */ const char* nightVisionWearSoundPlayer;
  /* 0x0170 */ const char* nightVisionRemoveSound;
  /* 0x0174 */ const char* nightVisionRemoveSoundPlayer;
  /* 0x0178 */ const char* altSwitchSound;
  /* 0x017c */ const char* altSwitchSoundPlayer;
  /* 0x0180 */ const char* raiseSound;
  /* 0x0184 */ const char* raiseSoundPlayer;
  /* 0x0188 */ const char* firstRaiseSound;
  /* 0x018c */ const char* firstRaiseSoundPlayer;
  /* 0x0190 */ const char* adsRaiseSoundPlayer;
  /* 0x0194 */ const char* adsLowerSoundPlayer;
  /* 0x0198 */ const char* putawaySound;
  /* 0x019c */ const char* putawaySoundPlayer;
  /* 0x01a0 */ const char* overheatSound;
  /* 0x01a4 */ const char* overheatSoundPlayer;
  /* 0x01a8 */ const char* adsZoomSound;
  /* 0x01ac */ const char* shellCasing;
  /* 0x01b0 */ const char* shellCasingPlayer;
  /* 0x01b4 */ const char** bounceSound;
  /* 0x01b8 */ const char* standMountedWeapdef;
  /* 0x01bc */ const char* crouchMountedWeapdef;
  /* 0x01c0 */ const char* proneMountedWeapdef;
  /* 0x01c4 */ int standMountedIndex;
  /* 0x01c8 */ int crouchMountedIndex;
  /* 0x01cc */ int proneMountedIndex;
  /* 0x01d0 */ const struct FxEffectDef* viewShellEjectEffect;
  /* 0x01d4 */ const struct FxEffectDef* worldShellEjectEffect;
  /* 0x01d8 */ const struct FxEffectDef* viewLastShotEjectEffect;
  /* 0x01dc */ const struct FxEffectDef* worldLastShotEjectEffect;
  /* 0x01e0 */ union vec3_t vViewShellEjectOffset;
  /* 0x01ec */ union vec3_t vWorldShellEjectOffset;
  /* 0x01f8 */ union vec3_t vViewShellEjectRotation;
  /* 0x0204 */ union vec3_t vWorldShellEjectRotation;
  /* 0x0210 */ struct Material* reticleCenter;
  /* 0x0214 */ struct Material* reticleSide;
  /* 0x0218 */ int iReticleCenterSize;
  /* 0x021c */ int iReticleSideSize;
  /* 0x0220 */ int iReticleMinOfs;
  /* 0x0224 */ enum activeReticleType_t activeReticleType;
  /* 0x0228 */ union vec3_t vStandMove;
  /* 0x0234 */ union vec3_t vStandRot;
  /* 0x0240 */ union vec3_t vDuckedOfs;
  /* 0x024c */ union vec3_t vDuckedMove;
  /* 0x0258 */ union vec3_t vDuckedSprintOfs;
  /* 0x0264 */ union vec3_t vDuckedSprintRot;
  /* 0x0270 */ union vec2_t vDuckedSprintBob;
  /* 0x0278 */ float fDuckedSprintCycleScale;
  /* 0x027c */ union vec3_t vSprintOfs;
  /* 0x0288 */ union vec3_t vSprintRot;
  /* 0x0294 */ union vec2_t vSprintBob;
  /* 0x029c */ float fSprintCycleScale;
  /* 0x02a0 */ union vec3_t vLowReadyOfs;
  /* 0x02ac */ union vec3_t vLowReadyRot;
  /* 0x02b8 */ union vec3_t vRideOfs;
  /* 0x02c4 */ union vec3_t vRideRot;
  /* 0x02d0 */ union vec3_t vDtpOfs;
  /* 0x02dc */ union vec3_t vDtpRot;
  /* 0x02e8 */ union vec2_t vDtpBob;
  /* 0x02f0 */ float fDtpCycleScale;
  /* 0x02f4 */ union vec3_t vMantleOfs;
  /* 0x0300 */ union vec3_t vMantleRot;
  /* 0x030c */ union vec3_t vSlideOfs;
  /* 0x0318 */ union vec3_t vSlideRot;
  /* 0x0324 */ union vec3_t vDuckedRot;
  /* 0x0330 */ union vec3_t vProneOfs;
  /* 0x033c */ union vec3_t vProneMove;
  /* 0x0348 */ union vec3_t vProneRot;
  /* 0x0354 */ union vec3_t vStrafeMove;
  /* 0x0360 */ union vec3_t vStrafeRot;
  /* 0x036c */ float fPosMoveRate;
  /* 0x0370 */ float fPosProneMoveRate;
  /* 0x0374 */ float fStandMoveMinSpeed;
  /* 0x0378 */ float fDuckedMoveMinSpeed;
  /* 0x037c */ float fProneMoveMinSpeed;
  /* 0x0380 */ float fPosRotRate;
  /* 0x0384 */ float fPosProneRotRate;
  /* 0x0388 */ float fStandRotMinSpeed;
  /* 0x038c */ float fDuckedRotMinSpeed;
  /* 0x0390 */ float fProneRotMinSpeed;
  /* 0x0394 */ struct XModel** worldModel;
  /* 0x0398 */ struct XModel* worldClipModel;
  /* 0x039c */ struct XModel* rocketModel;
  /* 0x03a0 */ struct XModel* mountedModel;
  /* 0x03a4 */ struct XModel* additionalMeleeModel;
  /* 0x03a8 */ struct Material* fireTypeIcon;
  /* 0x03ac */ struct Material* hudIcon;
  /* 0x03b0 */ enum weaponIconRatioType_t hudIconRatio;
  /* 0x03b4 */ struct Material* indicatorIcon;
  /* 0x03b8 */ enum weaponIconRatioType_t indicatorIconRatio;
  /* 0x03bc */ struct Material* ammoCounterIcon;
  /* 0x03c0 */ enum weaponIconRatioType_t ammoCounterIconRatio;
  /* 0x03c4 */ enum ammoCounterClipType_t ammoCounterClip;
  /* 0x03c8 */ int iStartAmmo;
  /* 0x03cc */ int iMaxAmmo;
  /* 0x03d0 */ int shotCount;
  /* 0x03d4 */ const char* szSharedAmmoCapName;
  /* 0x03d8 */ int iSharedAmmoCapIndex;
  /* 0x03dc */ int iSharedAmmoCap;
  /* 0x03e0 */ BOOL unlimitedAmmo;
  /* 0x03e1 */ BOOL ammoCountClipRelative;
  /* 0x03e2 */ char Padding_105[2];
  /* 0x03e4 */ int damage[6];
  /* 0x03fc */ float damageRange[6];
  /* 0x0414 */ int minPlayerDamage;
  /* 0x0418 */ float damageDuration;
  /* 0x041c */ float damageInterval;
  /* 0x0420 */ int playerDamage;
  /* 0x0424 */ int iMeleeDamage;
  /* 0x0428 */ int iDamageType;
  /* 0x042c */ unsigned short explosionTag;
  /* 0x042e */ char Padding_106[2];
  /* 0x0430 */ int iFireDelay;
  /* 0x0434 */ int iMeleeDelay;
  /* 0x0438 */ int meleeChargeDelay;
  /* 0x043c */ int iDetonateDelay;
  /* 0x0440 */ int iSpinUpTime;
  /* 0x0444 */ int iSpinDownTime;
  /* 0x0448 */ float spinRate;
  /* 0x044c */ const char* spinLoopSound;
  /* 0x0450 */ const char* spinLoopSoundPlayer;
  /* 0x0454 */ const char* startSpinSound;
  /* 0x0458 */ const char* startSpinSoundPlayer;
  /* 0x045c */ const char* stopSpinSound;
  /* 0x0460 */ const char* stopSpinSoundPlayer;
  /* 0x0464 */ BOOL applySpinPitch;
  /* 0x0465 */ char Padding_107[3];
  /* 0x0468 */ int iFireTime;
  /* 0x046c */ int iLastFireTime;
  /* 0x0470 */ int iRechamberTime;
  /* 0x0474 */ int iRechamberBoltTime;
  /* 0x0478 */ int iHoldFireTime;
  /* 0x047c */ int iDetonateTime;
  /* 0x0480 */ int iMeleeTime;
  /* 0x0484 */ int iBurstDelayTime;
  /* 0x0488 */ int meleeChargeTime;
  /* 0x048c */ int iReloadTimeRight;
  /* 0x0490 */ int iReloadTimeLeft;
  /* 0x0494 */ int reloadShowRocketTime;
  /* 0x0498 */ int iReloadEmptyTimeLeft;
  /* 0x049c */ int iReloadAddTime;
  /* 0x04a0 */ int iReloadEmptyAddTime;
  /* 0x04a4 */ int iReloadQuickAddTime;
  /* 0x04a8 */ int iReloadQuickEmptyAddTime;
  /* 0x04ac */ int iReloadStartTime;
  /* 0x04b0 */ int iReloadStartAddTime;
  /* 0x04b4 */ int iReloadEndTime;
  /* 0x04b8 */ int iDropTime;
  /* 0x04bc */ int iRaiseTime;
  /* 0x04c0 */ int iAltDropTime;
  /* 0x04c4 */ int quickDropTime;
  /* 0x04c8 */ int quickRaiseTime;
  /* 0x04cc */ int iFirstRaiseTime;
  /* 0x04d0 */ int iEmptyRaiseTime;
  /* 0x04d4 */ int iEmptyDropTime;
  /* 0x04d8 */ int sprintInTime;
  /* 0x04dc */ int sprintLoopTime;
  /* 0x04e0 */ int sprintOutTime;
  /* 0x04e4 */ int lowReadyInTime;
  /* 0x04e8 */ int lowReadyLoopTime;
  /* 0x04ec */ int lowReadyOutTime;
  /* 0x04f0 */ int contFireInTime;
  /* 0x04f4 */ int contFireLoopTime;
  /* 0x04f8 */ int contFireOutTime;
  /* 0x04fc */ int dtpInTime;
  /* 0x0500 */ int dtpLoopTime;
  /* 0x0504 */ int dtpOutTime;
  /* 0x0508 */ int crawlInTime;
  /* 0x050c */ int crawlForwardTime;
  /* 0x0510 */ int crawlBackTime;
  /* 0x0514 */ int crawlRightTime;
  /* 0x0518 */ int crawlLeftTime;
  /* 0x051c */ int crawlOutFireTime;
  /* 0x0520 */ int crawlOutTime;
  /* 0x0524 */ int slideInTime;
  /* 0x0528 */ int deployTime;
  /* 0x052c */ int breakdownTime;
  /* 0x0530 */ int iFlourishTime;
  /* 0x0534 */ int nightVisionWearTime;
  /* 0x0538 */ int nightVisionWearTimeFadeOutEnd;
  /* 0x053c */ int nightVisionWearTimePowerUp;
  /* 0x0540 */ int nightVisionRemoveTime;
  /* 0x0544 */ int nightVisionRemoveTimePowerDown;
  /* 0x0548 */ int nightVisionRemoveTimeFadeInStart;
  /* 0x054c */ int fuseTime;
  /* 0x0550 */ int aiFuseTime;
  /* 0x0554 */ int lockOnRadius;
  /* 0x0558 */ int lockOnSpeed;
  /* 0x055c */ BOOL requireLockonToFire;
  /* 0x055d */ BOOL noAdsWhenMagEmpty;
  /* 0x055e */ BOOL avoidDropCleanup;
  /* 0x055f */ char Padding_108;
  /* 0x0560 */ unsigned int stackFire;
  /* 0x0564 */ float stackFireSpread;
  /* 0x0568 */ float stackFireAccuracyDecay;
  /* 0x056c */ const char* stackSound;
  /* 0x0570 */ float autoAimRange;
  /* 0x0574 */ float aimAssistRange;
  /* 0x0578 */ BOOL mountableWeapon;
  /* 0x0579 */ char Padding_109[3];
  /* 0x057c */ float aimPadding;
  /* 0x0580 */ float enemyCrosshairRange;
  /* 0x0584 */ BOOL crosshairColorChange;
  /* 0x0585 */ char Padding_110[3];
  /* 0x0588 */ float moveSpeedScale;
  /* 0x058c */ float adsMoveSpeedScale;
  /* 0x0590 */ float sprintDurationScale;
  /* 0x0594 */ enum weapOverlayReticle_t overlayReticle;
  /* 0x0598 */ enum WeapOverlayInteface_t overlayInterface;
  /* 0x059c */ float overlayWidth;
  /* 0x05a0 */ float overlayHeight;
  /* 0x05a4 */ float fAdsBobFactor;
  /* 0x05a8 */ float fAdsViewBobMult;
  /* 0x05ac */ BOOL bHoldBreathToSteady;
  /* 0x05ad */ char Padding_111[3];
  /* 0x05b0 */ float fHipSpreadStandMin;
  /* 0x05b4 */ float fHipSpreadDuckedMin;
  /* 0x05b8 */ float fHipSpreadProneMin;
  /* 0x05bc */ float hipSpreadStandMax;
  /* 0x05c0 */ float hipSpreadDuckedMax;
  /* 0x05c4 */ float hipSpreadProneMax;
  /* 0x05c8 */ float fHipSpreadDecayRate;
  /* 0x05cc */ float fHipSpreadFireAdd;
  /* 0x05d0 */ float fHipSpreadTurnAdd;
  /* 0x05d4 */ float fHipSpreadMoveAdd;
  /* 0x05d8 */ float fHipSpreadDuckedDecay;
  /* 0x05dc */ float fHipSpreadProneDecay;
  /* 0x05e0 */ float fHipReticleSidePos;
  /* 0x05e4 */ float fAdsIdleAmount;
  /* 0x05e8 */ float fHipIdleAmount;
  /* 0x05ec */ float adsIdleSpeed;
  /* 0x05f0 */ float hipIdleSpeed;
  /* 0x05f4 */ float fIdleCrouchFactor;
  /* 0x05f8 */ float fIdleProneFactor;
  /* 0x05fc */ float fGunMaxPitch;
  /* 0x0600 */ float fGunMaxYaw;
  /* 0x0604 */ float swayMaxAngle;
  /* 0x0608 */ float swayLerpSpeed;
  /* 0x060c */ float swayPitchScale;
  /* 0x0610 */ float swayYawScale;
  /* 0x0614 */ float swayHorizScale;
  /* 0x0618 */ float swayVertScale;
  /* 0x061c */ float swayShellShockScale;
  /* 0x0620 */ float adsSwayMaxAngle;
  /* 0x0624 */ float adsSwayLerpSpeed;
  /* 0x0628 */ float adsSwayPitchScale;
  /* 0x062c */ float adsSwayYawScale;
  /* 0x0630 */ BOOL sharedAmmo;
  /* 0x0631 */ BOOL bRifleBullet;
  /* 0x0632 */ BOOL armorPiercing;
  /* 0x0633 */ BOOL bAirburstWeapon;
  /* 0x0634 */ BOOL bBoltAction;
  /* 0x0635 */ BOOL bUseAltTagFlash;
  /* 0x0636 */ BOOL bUseAntiLagRewind;
  /* 0x0637 */ BOOL bIsCarriedKillstreakWeapon;
  /* 0x0638 */ BOOL aimDownSight;
  /* 0x0639 */ BOOL bRechamberWhileAds;
  /* 0x063a */ BOOL bReloadWhileAds;
  /* 0x063b */ char Padding_112;
  /* 0x063c */ float adsViewErrorMin;
  /* 0x0640 */ float adsViewErrorMax;
  /* 0x0644 */ BOOL bCookOffHold;
  /* 0x0645 */ BOOL bClipOnly;
  /* 0x0646 */ BOOL bCanUseInVehicle;
  /* 0x0647 */ BOOL bNoDropsOrRaises;
  /* 0x0648 */ BOOL adsFireOnly;
  /* 0x0649 */ BOOL cancelAutoHolsterWhenEmpty;
  /* 0x064a */ BOOL suppressAmmoReserveDisplay;
  /* 0x064b */ BOOL laserSight;
  /* 0x064c */ BOOL laserSightDuringNightvision;
  /* 0x064d */ BOOL bHideThirdPerson;
  /* 0x064e */ BOOL bHasBayonet;
  /* 0x064f */ BOOL bDualWield;
  /* 0x0650 */ BOOL bExplodeOnGround;
  /* 0x0651 */ BOOL bThrowBack;
  /* 0x0652 */ BOOL bRetrievable;
  /* 0x0653 */ BOOL bDieOnRespawn;
  /* 0x0654 */ BOOL bNoThirdPersonDropsOrRaises;
  /* 0x0655 */ BOOL bContinuousFire;
  /* 0x0656 */ BOOL bNoPing;
  /* 0x0657 */ BOOL bForceBounce;
  /* 0x0658 */ BOOL bUseDroppedModelAsStowed;
  /* 0x0659 */ BOOL bNoQuickDropWhenEmpty;
  /* 0x065a */ BOOL bKeepCrosshairWhenADS;
  /* 0x065b */ BOOL bUseOnlyAltWeaoponHideTagsInAltMode;
  /* 0x065c */ BOOL bAltWeaponAdsOnly;
  /* 0x065d */ BOOL bAltWeaponDisableSwitching;
  /* 0x065e */ char Padding_113[2];
  /* 0x0660 */ struct Material* killIcon;
  /* 0x0664 */ enum weaponIconRatioType_t killIconRatio;
  /* 0x0668 */ BOOL flipKillIcon;
  /* 0x0669 */ BOOL bNoPartialReload;
  /* 0x066a */ BOOL bSegmentedReload;
  /* 0x066b */ BOOL bNoADSAutoReload;
  /* 0x066c */ int iReloadAmmoAdd;
  /* 0x0670 */ int iReloadStartAdd;
  /* 0x0674 */ const char* szSpawnedGrenadeWeaponName;
  /* 0x0678 */ const char* szDualWieldWeaponName;
  /* 0x067c */ unsigned int dualWieldWeaponIndex;
  /* 0x0680 */ int iDropAmmoMin;
  /* 0x0684 */ int iDropAmmoMax;
  /* 0x0688 */ int iDropClipAmmoMin;
  /* 0x068c */ int iDropClipAmmoMax;
  /* 0x0690 */ int iShotsBeforeRechamber;
  /* 0x0694 */ BOOL blocksProne;
  /* 0x0695 */ BOOL bShowIndicator;
  /* 0x0696 */ char Padding_114[2];
  /* 0x0698 */ int isRollingGrenade;
  /* 0x069c */ int useBallisticPrediction;
  /* 0x06a0 */ int isValuable;
  /* 0x06a4 */ int isTacticalInsertion;
  /* 0x06a8 */ BOOL isReviveWeapon;
  /* 0x06a9 */ BOOL bUseRigidBodyOnVehicle;
  /* 0x06aa */ char Padding_115[2];
  /* 0x06ac */ int iExplosionRadius;
  /* 0x06b0 */ int iExplosionRadiusMin;
  /* 0x06b4 */ int iIndicatorRadius;
  /* 0x06b8 */ int iExplosionInnerDamage;
  /* 0x06bc */ int iExplosionOuterDamage;
  /* 0x06c0 */ float damageConeAngle;
  /* 0x06c4 */ int iProjectileSpeed;
  /* 0x06c8 */ int iProjectileSpeedUp;
  /* 0x06cc */ int iProjectileSpeedRelativeUp;
  /* 0x06d0 */ int iProjectileSpeedForward;
  /* 0x06d4 */ float fProjectileTakeParentVelocity;
  /* 0x06d8 */ int iProjectileActivateDist;
  /* 0x06dc */ float projLifetime;
  /* 0x06e0 */ float timeToAccelerate;
  /* 0x06e4 */ float projectileCurvature;
  /* 0x06e8 */ struct XModel* projectileModel;
  /* 0x06ec */ enum weapProjExposion_t projExplosion;
  /* 0x06f0 */ const struct FxEffectDef* projExplosionEffect;
  /* 0x06f4 */ BOOL projExplosionEffectForceNormalUp;
  /* 0x06f5 */ char Padding_116[3];
  /* 0x06f8 */ const struct FxEffectDef* projExplosionEffect2;
  /* 0x06fc */ BOOL projExplosionEffect2ForceNormalUp;
  /* 0x06fd */ char Padding_117[3];
  /* 0x0700 */ const struct FxEffectDef* projExplosionEffect3;
  /* 0x0704 */ BOOL projExplosionEffect3ForceNormalUp;
  /* 0x0705 */ char Padding_118[3];
  /* 0x0708 */ const struct FxEffectDef* projExplosionEffect4;
  /* 0x070c */ BOOL projExplosionEffect4ForceNormalUp;
  /* 0x070d */ char Padding_119[3];
  /* 0x0710 */ const struct FxEffectDef* projExplosionEffect5;
  /* 0x0714 */ BOOL projExplosionEffect5ForceNormalUp;
  /* 0x0715 */ char Padding_120[3];
  /* 0x0718 */ const struct FxEffectDef* projDudEffect;
  /* 0x071c */ const char* projExplosionSound;
  /* 0x0720 */ const char* projDudSound;
  /* 0x0724 */ const char* mortarShellSound;
  /* 0x0728 */ const char* tankShellSound;
  /* 0x072c */ BOOL bProjImpactExplode;
  /* 0x072d */ BOOL bProjSentientImpactExplode;
  /* 0x072e */ BOOL bProjExplodeWhenStationary;
  /* 0x072f */ BOOL bBulletImpactExplode;
  /* 0x0730 */ enum WeapStickinessType stickiness;
  /* 0x0734 */ enum WeapRotateType rotateType;
  /* 0x0738 */ BOOL plantable;
  /* 0x0739 */ BOOL hasDetonator;
  /* 0x073a */ BOOL timedDetonation;
  /* 0x073b */ BOOL bNoCrumpleMissile;
  /* 0x073c */ BOOL rotate;
  /* 0x073d */ BOOL bKeepRolling;
  /* 0x073e */ BOOL holdButtonToThrow;
  /* 0x073f */ BOOL offhandHoldIsCancelable;
  /* 0x0740 */ BOOL freezeMovementWhenFiring;
  /* 0x0741 */ char Padding_121[3];
  /* 0x0744 */ float lowAmmoWarningThreshold;
  /* 0x0748 */ BOOL bDisallowAtMatchStart;
  /* 0x0749 */ char Padding_122[3];
  /* 0x074c */ float meleeChargeRange;
  /* 0x0750 */ BOOL bUseAsMelee;
  /* 0x0751 */ BOOL isCameraSensor;
  /* 0x0752 */ BOOL isAcousticSensor;
  /* 0x0753 */ BOOL isLaserSensor;
  /* 0x0754 */ BOOL isHoldUseGrenade;
  /* 0x0755 */ char Padding_123[3];
  /* 0x0758 */ float* parallelBounce;
  /* 0x075c */ float* perpendicularBounce;
  /* 0x0760 */ const struct FxEffectDef* projTrailEffect;
  /* 0x0764 */ union vec3_t vProjectileColor;
  /* 0x0770 */ enum guidedMissileType_t guidedMissileType;
  /* 0x0774 */ float maxSteeringAccel;
  /* 0x0778 */ int projIgnitionDelay;
  /* 0x077c */ const struct FxEffectDef* projIgnitionEffect;
  /* 0x0780 */ const char* projIgnitionSound;
  /* 0x0784 */ float fAdsAimPitch;
  /* 0x0788 */ float fAdsCrosshairInFrac;
  /* 0x078c */ float fAdsCrosshairOutFrac;
  /* 0x0790 */ int adsGunKickReducedKickBullets;
  /* 0x0794 */ float adsGunKickReducedKickPercent;
  /* 0x0798 */ float fAdsGunKickPitchMin;
  /* 0x079c */ float fAdsGunKickPitchMax;
  /* 0x07a0 */ float fAdsGunKickYawMin;
  /* 0x07a4 */ float fAdsGunKickYawMax;
  /* 0x07a8 */ float fAdsGunKickAccel;
  /* 0x07ac */ float fAdsGunKickSpeedMax;
  /* 0x07b0 */ float fAdsGunKickSpeedDecay;
  /* 0x07b4 */ float fAdsGunKickStaticDecay;
  /* 0x07b8 */ float fAdsViewKickPitchMin;
  /* 0x07bc */ float fAdsViewKickPitchMax;
  /* 0x07c0 */ float fAdsViewKickMinMagnitude;
  /* 0x07c4 */ float fAdsViewKickYawMin;
  /* 0x07c8 */ float fAdsViewKickYawMax;
  /* 0x07cc */ float fAdsRecoilReductionRate;
  /* 0x07d0 */ float fAdsRecoilReductionLimit;
  /* 0x07d4 */ float fAdsRecoilReturnRate;
  /* 0x07d8 */ float fAdsViewScatterMin;
  /* 0x07dc */ float fAdsViewScatterMax;
  /* 0x07e0 */ float fAdsSpread;
  /* 0x07e4 */ int hipGunKickReducedKickBullets;
  /* 0x07e8 */ float hipGunKickReducedKickPercent;
  /* 0x07ec */ float fHipGunKickPitchMin;
  /* 0x07f0 */ float fHipGunKickPitchMax;
  /* 0x07f4 */ float fHipGunKickYawMin;
  /* 0x07f8 */ float fHipGunKickYawMax;
  /* 0x07fc */ float fHipGunKickAccel;
  /* 0x0800 */ float fHipGunKickSpeedMax;
  /* 0x0804 */ float fHipGunKickSpeedDecay;
  /* 0x0808 */ float fHipGunKickStaticDecay;
  /* 0x080c */ float fHipViewKickPitchMin;
  /* 0x0810 */ float fHipViewKickPitchMax;
  /* 0x0814 */ float fHipViewKickMinMagnitude;
  /* 0x0818 */ float fHipViewKickYawMin;
  /* 0x081c */ float fHipViewKickYawMax;
  /* 0x0820 */ float fHipViewScatterMin;
  /* 0x0824 */ float fHipViewScatterMax;
  /* 0x0828 */ float fAdsViewKickCenterDuckedScale;
  /* 0x082c */ float fAdsViewKickCenterProneScale;
  /* 0x0830 */ float fAntiQuickScopeTime;
  /* 0x0834 */ float fAntiQuickScopeScale;
  /* 0x0838 */ float fAntiQuickScopeSpreadMultiplier;
  /* 0x083c */ float fAntiQuickScopeSpreadMax;
  /* 0x0840 */ float fAntiQuickScopeSwayFactor;
  /* 0x0844 */ float fightDist;
  /* 0x0848 */ float maxDist;
  /* 0x084c */ const char* accuracyGraphName[2];
  /* 0x0854 */ union vec2_t* accuracyGraphKnots[2];
  /* 0x085c */ union vec2_t* originalAccuracyGraphKnots[2];
  /* 0x0864 */ int accuracyGraphKnotCount[2];
  /* 0x086c */ int originalAccuracyGraphKnotCount[2];
  /* 0x0874 */ int iPositionReloadTransTime;
  /* 0x0878 */ float leftArc;
  /* 0x087c */ float rightArc;
  /* 0x0880 */ float topArc;
  /* 0x0884 */ float bottomArc;
  /* 0x0888 */ float accuracy;
  /* 0x088c */ float aiSpread;
  /* 0x0890 */ float playerSpread;
  /* 0x0894 */ float minTurnSpeed[2];
  /* 0x089c */ float maxTurnSpeed[2];
  /* 0x08a4 */ float pitchConvergenceTime;
  /* 0x08a8 */ float yawConvergenceTime;
  /* 0x08ac */ float suppressTime;
  /* 0x08b0 */ float maxRange;
  /* 0x08b4 */ float fAnimHorRotateInc;
  /* 0x08b8 */ float fPlayerPositionDist;
  /* 0x08bc */ const char* szUseHintString;
  /* 0x08c0 */ const char* dropHintString;
  /* 0x08c4 */ int iUseHintStringIndex;
  /* 0x08c8 */ int dropHintStringIndex;
  /* 0x08cc */ float horizViewJitter;
  /* 0x08d0 */ float vertViewJitter;
  /* 0x08d4 */ float cameraShakeScale;
  /* 0x08d8 */ int cameraShakeDuration;
  /* 0x08dc */ int cameraShakeRadius;
  /* 0x08e0 */ float explosionCameraShakeScale;
  /* 0x08e4 */ int explosionCameraShakeDuration;
  /* 0x08e8 */ int explosionCameraShakeRadius;
  /* 0x08ec */ const char* szScript;
  /* 0x08f0 */ float destabilizationRateTime;
  /* 0x08f4 */ float destabilizationCurvatureMax;
  /* 0x08f8 */ int destabilizeDistance;
  /* 0x08fc */ float* locationDamageMultipliers;
  /* 0x0900 */ const char* fireRumble;
  /* 0x0904 */ const char* meleeImpactRumble;
  /* 0x0908 */ const char* reloadRumble;
  /* 0x090c */ const char* explosionRumble;
  /* 0x0910 */ struct TracerDef* tracerType;
  /* 0x0914 */ struct TracerDef* enemyTracerType;
  /* 0x0918 */ float adsDofStart;
  /* 0x091c */ float adsDofEnd;
  /* 0x0920 */ float hipDofStart;
  /* 0x0924 */ float hipDofEnd;
  /* 0x0928 */ float scanSpeed;
  /* 0x092c */ float scanAccel;
  /* 0x0930 */ int scanPauseTime;
  /* 0x0934 */ const char* flameTableFirstPerson;
  /* 0x0938 */ const char* flameTableThirdPerson;
  /* 0x093c */ struct flameTable* flameTableFirstPersonPtr;
  /* 0x0940 */ struct flameTable* flameTableThirdPersonPtr;
  /* 0x0944 */ const struct FxEffectDef* tagFx_preparationEffect;
  /* 0x0948 */ const struct FxEffectDef* tagFlash_preparationEffect;
  /* 0x094c */ BOOL doGibbing;
  /* 0x094d */ char Padding_124[3];
  /* 0x0950 */ float maxGibDistance;
  /* 0x0954 */ float altScopeADSTransInTime;
  /* 0x0958 */ float altScopeADSTransOutTime;
  /* 0x095c */ int iIntroFireTime;
  /* 0x0960 */ int iIntroFireLength;
  /* 0x0964 */ const struct FxEffectDef* meleeSwipeEffect;
  /* 0x0968 */ const struct FxEffectDef* meleeImpactEffect;
  /* 0x096c */ const struct FxEffectDef* meleeImpactNoBloodEffect;
  /* 0x0970 */ const char* throwBackType;
  /* 0x0974 */ struct WeaponCamo* weaponCamo;
  /* 0x0978 */ float customFloat0;
  /* 0x097c */ float customFloat1;
  /* 0x0980 */ float customFloat2;
  /* 0x0984 */ int customBool0;
  /* 0x0988 */ int customBool1;
  /* 0x098c */ int customBool2;
}; /* size: 0x0990 */

typedef enum _TAG_UNNAMED_215
{
  GEOGRAPHICAL_REGION_NONE = 0,
  GEOGRAPHICAL_REGION_AUNZ = 1,
  GEOGRAPHICAL_REGION_ASIAN = 2,
  GEOGRAPHICAL_REGION_EUROPEAN = 3,
  GEOGRAPHICAL_REGION_NORTH_AMERICAN = 4,
  GEOGRAPHICAL_REGION_SOUTH_AMERICAN = 5,
} TAG_UNNAMED_215, *PTAG_UNNAMED_215;

enum dwKeyArchiveCategories
{
  KEYARCHIVE_CATEGORY_NORMAL = 0,
  KEYARCHIVE_CATEGORY_TEAM = 1,
  KEYARCHIVE_CATEGORY_USER = 2,
  KEYARCHIVE_CATEGORY_LEAGUE = 3,
};

typedef enum _NV_PATH_TARGETTYPE
{
  MATRIX_PATH_TO_CLIP_NV = 0xffff8f04,
  MATRIX_STROKE_TO_PATH_NV = 0xffff8f05,
  MATRIX_PATH_COORD0_NV = 0xffff8f08,
  MATRIX_PATH_COORD1_NV = 0xffff8f09,
  MATRIX_PATH_COORD2_NV = 0xffff8f0a,
  MATRIX_PATH_COORD3_NV = 0xffff8f0b,
} NV_PATH_TARGETTYPE, *PNV_PATH_TARGETTYPE;

enum uJson::Type
{
  String = 0,
  Nil = 1,
  Array = 2,
  Object = 3,
  End = 4,
};

enum D2D1_CAP_STYLE
{
  D2D1_CAP_STYLE_FLAT = 0,
  D2D1_CAP_STYLE_SQUARE = 1,
  D2D1_CAP_STYLE_ROUND = 2,
  D2D1_CAP_STYLE_TRIANGLE = 3,
  D2D1_CAP_STYLE_FORCE_DWORD = -1,
};

typedef enum _TAG_UNNAMED_216
{
  k_iSteamGameServerCallbacks = 200,
} TAG_UNNAMED_216, *PTAG_UNNAMED_216;

typedef enum _TAG_UNNAMED_217
{
  k_iSteamFriendsCallbacks = 300,
} TAG_UNNAMED_217, *PTAG_UNNAMED_217;

typedef enum _TAG_UNNAMED_218
{
  k_iSteamUtilsCallbacks = 700,
} TAG_UNNAMED_218, *PTAG_UNNAMED_218;

typedef enum _TAG_UNNAMED_219
{
  k_iSteamAppsCallbacks = 1000,
} TAG_UNNAMED_219, *PTAG_UNNAMED_219;

typedef enum _TAG_UNNAMED_220
{
  LL_EF_START_FLICKER = 2,
  LL_EF_FLICKER = 3,
} TAG_UNNAMED_220, *PTAG_UNNAMED_220;

typedef enum _TAG_UNNAMED_221
{
  k_iSteamUserStatsCallbacks = 1100,
} TAG_UNNAMED_221, *PTAG_UNNAMED_221;

typedef enum _TAG_UNNAMED_222
{
  k_iClientRemoteStorageCallbacks = 1300,
} TAG_UNNAMED_222, *PTAG_UNNAMED_222;

typedef struct _LUID
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long HighPart;
} LUID, *PLUID; /* size: 0x0008 */

typedef enum _TAG_UNNAMED_223
{
  k_iSteamGameServerStatsCallbacks = 1800,
} TAG_UNNAMED_223, *PTAG_UNNAMED_223;

typedef enum _TAG_UNNAMED_224
{
  k_iClientHTTPCallbacks = 2100,
} TAG_UNNAMED_224, *PTAG_UNNAMED_224;

enum EServerMode
{
  eServerModeInvalid = 0,
  eServerModeNoAuthentication = 1,
  eServerModeAuthentication = 2,
  eServerModeAuthenticationAndSecure = 3,
};

struct MaterialStreamRouting
{
  /* 0x0000 */ unsigned char source;
  /* 0x0001 */ unsigned char dest;
}; /* size: 0x0002 */

enum LiveAuthFlags_t
{
  AUTH_BLOB_REQUESTED = 1,
  AUTH_BLOB_RECEIVED = 2,
  AUTH_BLOB_SENT_TO_STEAM = 4,
  AUTH_APPROVE = 8,
  AUTH_DENY = 16,
};

enum SteamServerState
{
  STEAM_SERVER_INIT_FAILED = 0,
  STEAM_SERVER_DISCONNECTED = 1,
  STEAM_SERVER_CONNECTING = 2,
  STEAM_SERVER_CONNECTED = 3,
  STEAM_SERVER_SECURED = 4,
};

typedef struct _XMBYTEN4
{
  union
  {
    struct
    {
      /* 0x0000 */ char x;
      /* 0x0001 */ char y;
      /* 0x0002 */ char z;
      /* 0x0003 */ char w;
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMBYTEN4, *PXMBYTEN4; /* size: 0x0004 */

enum EUserHasLicenseForAppResult
{
  k_EUserHasLicenseResultHasLicense = 0,
  k_EUserHasLicenseResultDoesNotHaveLicense = 1,
  k_EUserHasLicenseResultNoAuth = 2,
};

struct MaterialVertexStreamRouting
{
  /* 0x0000 */ struct MaterialStreamRouting data[16];
  /* 0x0020 */ struct ID3D11InputLayout* decl[20];
}; /* size: 0x0070 */

struct MaterialVertexDeclaration
{
  /* 0x0000 */ unsigned char streamCount;
  /* 0x0001 */ BOOL hasOptionalSource;
  /* 0x0002 */ BOOL isLoaded;
  /* 0x0003 */ char Padding_125;
  /* 0x0004 */ struct MaterialVertexStreamRouting routing;
}; /* size: 0x0074 */

enum EChatSteamIDInstanceFlags
{
  k_EChatAccountInstanceMask = 4095,
  k_EChatInstanceFlagClan = 0x80000,
  k_EChatInstanceFlagLobby = 0x40000,
  k_EChatInstanceFlagMMSLobby = 0x20000,
};

enum EBeginAuthSessionResult
{
  k_EBeginAuthSessionResultOK = 0,
  k_EBeginAuthSessionResultInvalidTicket = 1,
  k_EBeginAuthSessionResultDuplicateRequest = 2,
  k_EBeginAuthSessionResultInvalidVersion = 3,
  k_EBeginAuthSessionResultGameMismatch = 4,
  k_EBeginAuthSessionResultExpiredTicket = 5,
};

typedef enum _NV_SCALING
{
  NV_SCALING_DEFAULT = 0,
  NV_SCALING_GPU_SCALING_TO_CLOSEST = 1,
  NV_SCALING_GPU_SCALING_TO_NATIVE = 2,
  NV_SCALING_GPU_SCANOUT_TO_NATIVE = 3,
  NV_SCALING_GPU_SCALING_TO_ASPECT_SCANOUT_TO_NATIVE = 5,
  NV_SCALING_GPU_SCALING_TO_ASPECT_SCANOUT_TO_CLOSEST = 6,
  NV_SCALING_GPU_SCANOUT_TO_CLOSEST = 7,
  NV_SCALING_MONITOR_SCALING = 1,
  NV_SCALING_ADAPTER_SCALING = 2,
  NV_SCALING_CENTERED = 3,
  NV_SCALING_ASPECT_SCALING = 5,
  NV_SCALING_CUSTOMIZED = 255,
} NV_SCALING, *PNV_SCALING;

typedef enum _TAG_UNNAMED_225
{
  k_iCallback = 201,
} TAG_UNNAMED_225, *PTAG_UNNAMED_225;

class DdlBinder
{
  /* 0x0000 */ const char* m_name;
  /* 0x0004 */ const char* m_ddlFile;
  /* 0x0008 */ const char* m_ddlPath[6];
  /* 0x0020 */ int m_depth;
  /* 0x0024 */ int m_value;
  /* 0x0028 */ class DdlBinder* m_next;
}; /* size: 0x002c */

typedef struct _SHITEMID
{
  /* 0x0000 */ unsigned short cb;
  /* 0x0002 */ unsigned char abID[1];
} SHITEMID, *PSHITEMID; /* size: 0x0003 */

enum EResult
{
  k_EResultOK = 1,
  k_EResultFail = 2,
  k_EResultNoConnection = 3,
  k_EResultInvalidPassword = 5,
  k_EResultLoggedInElsewhere = 6,
  k_EResultInvalidProtocolVer = 7,
  k_EResultInvalidParam = 8,
  k_EResultFileNotFound = 9,
  k_EResultBusy = 10,
  k_EResultInvalidState = 11,
  k_EResultInvalidName = 12,
  k_EResultInvalidEmail = 13,
  k_EResultDuplicateName = 14,
  k_EResultAccessDenied = 15,
  k_EResultTimeout = 16,
  k_EResultBanned = 17,
  k_EResultAccountNotFound = 18,
  k_EResultInvalidSteamID = 19,
  k_EResultServiceUnavailable = 20,
  k_EResultNotLoggedOn = 21,
  k_EResultPending = 22,
  k_EResultEncryptionFailure = 23,
  k_EResultInsufficientPrivilege = 24,
  k_EResultLimitExceeded = 25,
  k_EResultRevoked = 26,
  k_EResultExpired = 27,
  k_EResultAlreadyRedeemed = 28,
  k_EResultDuplicateRequest = 29,
  k_EResultAlreadyOwned = 30,
  k_EResultIPNotFound = 31,
  k_EResultPersistFailed = 32,
  k_EResultLockingFailed = 33,
  k_EResultLogonSessionReplaced = 34,
  k_EResultConnectFailed = 35,
  k_EResultHandshakeFailed = 36,
  k_EResultIOFailure = 37,
  k_EResultRemoteDisconnect = 38,
  k_EResultShoppingCartNotFound = 39,
  k_EResultBlocked = 40,
  k_EResultIgnored = 41,
  k_EResultNoMatch = 42,
  k_EResultAccountDisabled = 43,
  k_EResultServiceReadOnly = 44,
  k_EResultAccountNotFeatured = 45,
  k_EResultAdministratorOK = 46,
  k_EResultContentVersion = 47,
  k_EResultTryAnotherCM = 48,
  k_EResultPasswordRequiredToKickSession = 49,
  k_EResultAlreadyLoggedInElsewhere = 50,
  k_EResultSuspended = 51,
  k_EResultCancelled = 52,
  k_EResultDataCorruption = 53,
  k_EResultDiskFull = 54,
  k_EResultRemoteCallFailed = 55,
  k_EResultPasswordUnset = 56,
  k_EResultExternalAccountUnlinked = 57,
  k_EResultPSNTicketInvalid = 58,
  k_EResultExternalAccountAlreadyLinked = 59,
  k_EResultRemoteFileConflict = 60,
  k_EResultIllegalPassword = 61,
  k_EResultSameAsPreviousValue = 62,
  k_EResultAccountLogonDenied = 63,
  k_EResultCannotUseOldPassword = 64,
  k_EResultInvalidLoginAuthCode = 65,
  k_EResultAccountLogonDeniedNoMail = 66,
  k_EResultHardwareNotCapableOfIPT = 67,
  k_EResultIPTInitError = 68,
  k_EResultParentalControlRestricted = 69,
  k_EResultFacebookQueryError = 70,
  k_EResultExpiredLoginAuthCode = 71,
  k_EResultIPLoginRestrictionFailed = 72,
  k_EResultAccountLockedDown = 73,
  k_EResultAccountLogonDeniedVerifiedEmailRequired = 74,
  k_EResultNoMatchingURL = 75,
};

class bdTaskResult
{
}; /* size: 0x0004 */

struct gameMsgDef_s
{
  /* 0x0000 */ int gameMsgWindowIndex;
  /* 0x0004 */ int gameMsgWindowMode;
}; /* size: 0x0008 */

typedef enum _TAG_UNNAMED_226
{
  k_iCallback = 115,
} TAG_UNNAMED_226, *PTAG_UNNAMED_226;

typedef enum _TAG_UNNAMED_227
{
  k_ECallbackFlagsRegistered = 1,
  k_ECallbackFlagsGameServer = 2,
} TAG_UNNAMED_227, *PTAG_UNNAMED_227;

typedef enum _TAG_UNNAMED_228
{
  ok = 0,
  partial = 1,
  error = 2,
  noconv = 3,
} TAG_UNNAMED_228, *PTAG_UNNAMED_228;

typedef enum _TAG_UNNAMED_229
{
  k_iCallback = 103,
} TAG_UNNAMED_229, *PTAG_UNNAMED_229;

struct bdQoSProbe::bdQoSProbeEntryWrapper
{
  /* 0x0000 */ class bdReference<bdCommonAddr> m_addr;
  /* 0x0004 */ class bdSecurityID m_id;
  /* 0x000c */ class bdSecurityKey m_key;
  /* 0x001c */ class bdQoSProbeListener* m_listener;
  /* 0x0020 */ class bdAddr m_realAddr;
  /* 0x0028 */ unsigned int m_retries;
  /* 0x002c */ long Padding_126;
  /* 0x0030 */ class bdStopwatch m_lastTry;
}; /* size: 0x0038 */

class bdHashMap<unsigned int,bdQoSProbe::bdQoSProbeEntryWrapper,bdHashingClass>::Node
{
  /* 0x0000 */ struct bdQoSProbe::bdQoSProbeEntryWrapper m_data;
  /* 0x0038 */ unsigned int m_key;
  /* 0x003c */ class bdHashMap<unsigned int,bdQoSProbe::bdQoSProbeEntryWrapper,bdHashingClass>::Node* m_next;
}; /* size: 0x0040 */

typedef enum _TAG_UNNAMED_230
{
  k_iCallback = 202,
} TAG_UNNAMED_230, *PTAG_UNNAMED_230;

typedef union __m64
{
  union
  {
    /* 0x0000 */ unsigned __int64 m64_u64;
    /* 0x0000 */ float m64_f32[2];
    /* 0x0000 */ char m64_i8[8];
    /* 0x0000 */ short m64_i16[4];
    /* 0x0000 */ int m64_i32[2];
    /* 0x0000 */ __int64 m64_i64;
    /* 0x0000 */ unsigned char m64_u8[8];
    /* 0x0000 */ unsigned short m64_u16[4];
    /* 0x0000 */ unsigned int m64_u32[2];
  }; /* size: 0x0008 */
} _m64, *P_m64; /* size: 0x0008 */

typedef enum _TAG_UNNAMED_231
{
  k_iCallback = 203,
} TAG_UNNAMED_231, *PTAG_UNNAMED_231;

enum EFriendRelationship
{
  k_EFriendRelationshipNone = 0,
  k_EFriendRelationshipBlocked = 1,
  k_EFriendRelationshipRequestRecipient = 2,
  k_EFriendRelationshipFriend = 3,
  k_EFriendRelationshipRequestInitiator = 4,
  k_EFriendRelationshipIgnored = 5,
  k_EFriendRelationshipIgnoredFriend = 6,
  k_EFriendRelationshipSuggested = 7,
  k_EFriendRelationshipMax = 8,
};

enum EOverlayToStoreFlag
{
  k_EOverlayToStoreFlag_None = 0,
  k_EOverlayToStoreFlag_AddToCart = 1,
  k_EOverlayToStoreFlag_AddToCartAndShow = 2,
};

class phys_static_array<phys_vec3 *,6144>
{
  /* 0x0000 */ char m_buffer[24576];
  /* 0x6000 */ class phys_vec3** const m_slot_array;
  /* 0x6004 */ int m_alloc_count;
}; /* size: 0x6010 */

enum EChatEntryType
{
  k_EChatEntryTypeInvalid = 0,
  k_EChatEntryTypeChatMsg = 1,
  k_EChatEntryTypeTyping = 2,
  k_EChatEntryTypeInviteGame = 3,
  k_EChatEntryTypeEmote = 4,
  k_EChatEntryTypeLeftConversation = 6,
};

class bdAntiCheatChallengeParam
{
  /* 0x0000 */ long Padding_127;
  /* 0x0004 */ unsigned char* m_data;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

typedef enum _TAG_UNNAMED_232
{
  k_iCallback = 101,
} TAG_UNNAMED_232, *PTAG_UNNAMED_232;

struct tagVARDESC
{
  /* 0x0000 */ long memid;
  /* 0x0004 */ wchar_t* lpstrSchema;
  union
  {
    /* 0x0008 */ unsigned long oInst;
    /* 0x0008 */ struct tagVARIANT* lpvarValue;
  }; /* size: 0x0004 */
  /* 0x000c */ struct tagELEMDESC elemdescVar;
  /* 0x001c */ unsigned short wVarFlags;
  /* 0x001e */ char Padding_128[2];
  /* 0x0020 */ enum tagVARKIND varkind;
}; /* size: 0x0024 */

enum LiveSteam_PersonaState
{
  LIVE_STEAM_PERSONA_STATE_OFFLINE = 0,
  LIVE_STEAM_PERSONA_STATE_ONLINE = 1,
  LIVE_STEAM_PERSONA_STATE_BUSY = 2,
  LIVE_STEAM_PERSONA_STATE_SNOOZE = 3,
};

typedef enum _NVAPI_D3D9_DMA_TRANSFER_DIR
{
  NVAPI_D3D9_DMA_TRANSFER_DIR_UPLOAD = 0,
  NVAPI_D3D9_DMA_TRANSFER_DIR_DOWNLOAD = 1,
} NVAPI_D3D9_DMA_TRANSFER_DIR, *PNVAPI_D3D9_DMA_TRANSFER_DIR;

enum EFriendFlags
{
  k_EFriendFlagNone = 0,
  k_EFriendFlagBlocked = 1,
  k_EFriendFlagFriendshipRequested = 2,
  k_EFriendFlagImmediate = 4,
  k_EFriendFlagClanMember = 8,
  k_EFriendFlagOnGameServer = 16,
  k_EFriendFlagRequestingFriendship = 128,
  k_EFriendFlagRequestingInfo = 256,
  k_EFriendFlagIgnored = 512,
  k_EFriendFlagIgnoredFriend = 1024,
  k_EFriendFlagSuggested = 2048,
  k_EFriendFlagAll = 0xffffffff,
};

typedef enum _TAG_UNNAMED_233
{
  k_iCallback = 304,
} TAG_UNNAMED_233, *PTAG_UNNAMED_233;

struct dwTwitterGetAccountTask
{
  /* 0x0000 */ class bdTwitterAccount* account;
}; /* size: 0x0004 */

class bdArray<bdAntiCheatChallengeParam>
{
  /* 0x0000 */ class bdAntiCheatChallengeParam* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

typedef enum _TAG_UNNAMED_234
{
  k_iCallback = 154,
} TAG_UNNAMED_234, *PTAG_UNNAMED_234;

typedef enum _TAG_UNNAMED_235
{
  k_iCallback = 337,
} TAG_UNNAMED_235, *PTAG_UNNAMED_235;

enum FLAC__StreamDecoderState
{
  FLAC__STREAM_DECODER_SEARCH_FOR_METADATA = 0,
  FLAC__STREAM_DECODER_READ_METADATA = 1,
  FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC = 2,
  FLAC__STREAM_DECODER_READ_FRAME = 3,
  FLAC__STREAM_DECODER_END_OF_STREAM = 4,
  FLAC__STREAM_DECODER_OGG_ERROR = 5,
  FLAC__STREAM_DECODER_SEEK_ERROR = 6,
  FLAC__STREAM_DECODER_ABORTED = 7,
  FLAC__STREAM_DECODER_MEMORY_ALLOCATION_ERROR = 8,
  FLAC__STREAM_DECODER_UNINITIALIZED = 9,
};

typedef enum _TAG_UNNAMED_236
{
  k_iCallback = 331,
} TAG_UNNAMED_236, *PTAG_UNNAMED_236;

class LeaderboardRow<10>
{
  /* 0x0000 */ long Padding_129[28];
  /* 0x0070 */ int m_columns[10];
  /* 0x0098 */ unsigned int m_columnsCount;
}; /* size: 0x00a0 */

enum EAchievements
{
  ACH_MP_MISC_1 = 0,
  ACH_MP_MISC_2 = 1,
  ACH_MP_MISC_3 = 2,
  ACH_MP_MISC_4 = 3,
  ACH_MP_MISC_5 = 4,
  ACH_ZM_TRANSIT_SIDEQUEST = 5,
  ACH_ZM_DONT_FIRE_UNTIL_YOU_SEE = 6,
  ACH_ZM_THE_LIGHTS_OF_THEIR_EYES = 7,
  ACH_ZM_UNDEAD_MANS_PARTY_BUS = 8,
  ACH_ZM_DANCE_ON_MY_GRAVE = 9,
  ACH_ZM_STANDARD_EQUIPMENT_MAY_VARY = 10,
  ACH_ZM_YOU_HAVE_NO_POWER_OVER_ME = 11,
  ACH_ZM_I_DONT_THINK_THEY_EXIST = 12,
  ACH_ZM_FUEL_EFFICIENT = 13,
  ACH_ZM_HAPPY_HOUR = 14,
  ACH_ZM_DLC1_HIGHRISE_SIDEQUEST = 15,
  ACH_ZM_DLC1_VERTIGONER = 16,
  ACH_ZM_DLC1_MAD_WITHOUT_POWER = 17,
  ACH_ZM_DLC1_SHAFTED = 18,
  ACH_ZM_DLC1_SLIPPERY_WHEN_UNDEAD = 19,
  ACH_ZM_DLC1_FACING_THE_DRAGON = 20,
  ACH_ZM_DLC1_IM_MY_OWN_BEST_FRIEND = 21,
  ACH_ZM_DLC1_POLYARMORY = 22,
  ACH_ZM_DLC1_MONKEY_SEE_MONKEY_DOOM = 23,
  ACH_ZM_DLC1_I_SEE_LIVE_PEOPLE = 24,
  ACH_ZM_DLC2_PRISON_SIDEQUEST = 25,
  ACH_ZM_DLC2_FEED_THE_BEAST = 26,
  ACH_ZM_DLC2_MAKING_THE_ROUNDS = 27,
  ACH_ZM_DLC2_ACID_DRIP = 28,
  ACH_ZM_DLC2_FULL_LOCKDOWN = 29,
  ACH_ZM_DLC2_A_BURST_OF_FLAVOR = 30,
  ACH_ZM_DLC2_PARANORMAL_PROGRESS = 31,
  ACH_ZM_DLC2_GG_BRIDGE = 32,
  ACH_ZM_DLC2_TRAPPED_IN_TIME = 33,
  ACH_ZM_DLC2_POP_GOES_THE_WEASEL = 34,
  ACH_ZM_DLC3_BURIED_SIDEQUEST = 35,
  ACH_ZM_DLC3_ECTOPLASMIC_RESIDUE = 36,
  ACH_ZM_DLC3_IM_YOUR_HUCKLEBERRY = 37,
  ACH_ZM_DLC3_DEATH_FROM_BELOW = 38,
  ACH_ZM_DLC3_CANDYGRAM = 39,
  ACH_ZM_DLC3_AWAKEN_THE_GAZEBO = 40,
  ACH_ZM_DLC3_REVISIONIST_HISTORIAN = 41,
  ACH_ZM_DLC3_MAZED_AND_CONFUSED = 42,
  ACH_ZM_DLC3_FSIRT_AGAINST_THE_WALL = 43,
  ACH_ZM_DLC3_WHEN_THE_REVOLUTION_COMES = 44,
  ACH_ZM_DLC4_TOMB_SIDEQUEST = 45,
  ACH_ZM_DLC4_NOT_A_GOLD_DIGGER = 46,
  ACH_ZM_DLC4_ALL_YOUR_BASE = 47,
  ACH_ZM_DLC4_KUNG_FU_GRIP = 48,
  ACH_ZM_DLC4_PLAYING_WITH_POWER = 49,
  ACH_ZM_DLC4_IM_ON_A_TANK = 50,
  ACH_ZM_DLC4_SAVING_THE_DAY_ALL_DAY = 51,
  ACH_ZM_DLC4_MASTER_OF_DISGUISE = 52,
  ACH_ZM_DLC4_OVERACHIEVER = 53,
  ACH_ZM_DLC4_MASTER_WIZARD = 54,
  ACH_COUNT = 55,
};

typedef enum _NV_GPU_FLATPANEL_SIGNAL_LINK
{
  NV_GPU_FLATPANEL_SIGNAL_SINGLE_LINK = 1,
  NV_GPU_FLATPANEL_SIGNAL_DUAL_LINK = 2,
} NV_GPU_FLATPANEL_SIGNAL_LINK, *PNV_GPU_FLATPANEL_SIGNAL_LINK;

struct flame_timed_damage_t
{
  /* 0x0000 */ struct gentity_t* attacker;
  /* 0x0004 */ int damage;
  /* 0x0008 */ float damageDuration;
  /* 0x000c */ float damageInterval;
  /* 0x0010 */ int start_timestamp;
  /* 0x0014 */ int end_timestamp;
  /* 0x0018 */ int lastupdate_timestamp;
}; /* size: 0x001c */

struct trigger_ent_t
{
  /* 0x0000 */ int threshold;
  /* 0x0004 */ int accumulate;
  /* 0x0008 */ int timestamp;
  /* 0x000c */ int singleUserEntIndex;
  /* 0x0010 */ unsigned char perk;
  /* 0x0011 */ BOOL requireLookAt;
  /* 0x0012 */ BOOL ignoreTeam;
  /* 0x0013 */ BOOL excludeTeam;
  /* 0x0014 */ int exposureIndex;
  /* 0x0018 */ float exposureLerpToLighter;
  /* 0x001c */ float exposureLerpToDarker;
  /* 0x0020 */ union vec3_t exposureFeather;
}; /* size: 0x002c */

struct corpse_ent_t
{
  /* 0x0000 */ int deathAnimStartTime;
}; /* size: 0x0004 */

struct missile_ent_t
{
  /* 0x0000 */ int timestamp;
  /* 0x0004 */ float time;
  /* 0x0008 */ int timeOfBirth;
  /* 0x000c */ float travelDist;
  /* 0x0010 */ union vec3_t surfaceNormal;
  /* 0x001c */ enum team_t team;
  /* 0x0020 */ unsigned char flags;
  /* 0x0021 */ char Padding_130[3];
  /* 0x0024 */ int antilagTimeOffset;
  /* 0x0028 */ int timeAlive;
  /* 0x002c */ float airburstActivationDistance;
  union
  {
    struct
    {
      /* 0x0030 */ union vec3_t curvature;
      /* 0x003c */ union vec3_t targetOffset;
      /* 0x0048 */ enum MissileStage stage;
      /* 0x004c */ enum MissileFlightMode flightMode;
    } /* size: 0x0020 */ missile;
    struct
    {
      /* 0x0030 */ int effectIndex;
    } /* size: 0x0004 */ grenade;
  }; /* size: 0x0020 */
  /* 0x0050 */ int forcedDud;
  /* 0x0054 */ float grenadeWobbleCycle;
  /* 0x0058 */ float grenadeCurve;
  /* 0x005c */ int destructibleBounceCount;
}; /* size: 0x0060 */

struct actor_ent_t
{
  /* 0x0000 */ int spawnTime;
  /* 0x0004 */ struct animscripted_t* scripted;
}; /* size: 0x0008 */

struct spawner_ent_t
{
  /* 0x0000 */ int team;
  /* 0x0004 */ int timestamp;
}; /* size: 0x0008 */

struct zbarrier_ent_t
{
  /* 0x0000 */ struct zbarrier_piece_t pieces[6];
}; /* size: 0x0030 */

struct gentity_t
{
  /* 0x0000 */ struct entityState_s s;
  /* 0x00f8 */ struct entityShared_t r;
  /* 0x0154 */ struct gclient_t* client;
  /* 0x0158 */ struct actor_t* actor;
  /* 0x015c */ struct sentient_t* sentient;
  /* 0x0160 */ struct TurretInfo* pTurretInfo;
  /* 0x0164 */ struct Destructible* destructible;
  /* 0x0168 */ struct vehicle_t* vehicle;
  /* 0x016c */ unsigned short model;
  /* 0x016e */ unsigned char physicsObject;
  /* 0x016f */ unsigned char takedamage;
  /* 0x0170 */ unsigned char active;
  /* 0x0171 */ unsigned char nopickup;
  /* 0x0172 */ unsigned char handler;
  /* 0x0173 */ unsigned char team;
  /* 0x0174 */ unsigned char avoidHandle;
  /* 0x0175 */ char Padding_131;
  /* 0x0176 */ unsigned short classname;
  /* 0x0178 */ unsigned short target;
  /* 0x017a */ unsigned short targetname;
  /* 0x017c */ unsigned short script_noteworthy;
  /* 0x017e */ char Padding_132[2];
  /* 0x0180 */ unsigned int attachIgnoreCollision;
  /* 0x0184 */ int spawnflags;
  /* 0x0188 */ int flags;
  /* 0x018c */ int eventTime;
  /* 0x0190 */ int freeAfterEvent;
  /* 0x0194 */ int unlinkAfterEvent;
  /* 0x0198 */ int clipmask;
  /* 0x019c */ int processedFrame;
  /* 0x01a0 */ class EntHandle parent;
  /* 0x01a4 */ int nextthink;
  /* 0x01a8 */ int health;
  /* 0x01ac */ int maxHealth;
  /* 0x01b0 */ int damage;
  /* 0x01b4 */ struct flame_timed_damage_t flame_timed_damage[4];
  /* 0x0224 */ int last_timed_radius_damage;
  /* 0x0228 */ int count;
  union
  {
    /* 0x022c */ struct item_ent_t item[2];
    /* 0x022c */ struct trigger_ent_t trigger;
    /* 0x022c */ struct mover_ent_t mover;
    /* 0x022c */ struct corpse_ent_t corpse;
    /* 0x022c */ struct missile_ent_t missile;
    /* 0x022c */ struct blend_ent_t blend;
    /* 0x022c */ struct actor_ent_t actorInfo;
    /* 0x022c */ struct spawner_ent_t spawner;
    /* 0x022c */ struct zbarrier_ent_t zbarrier;
  }; /* size: 0x0060 */
  /* 0x028c */ class EntHandle missileTargetEnt;
  struct
  {
    /* 0x0290 */ unsigned short notifyString;
    /* 0x0002 */ char Padding_133[2];
    /* 0x0294 */ unsigned int index;
    /* 0x0298 */ unsigned char stoppable;
    /* 0x0009 */ char Padding_134[3];
    /* 0x029c */ int basetime;
    /* 0x02a0 */ int duration;
  } /* size: 0x0014 */ snd_wait;
  /* 0x02a4 */ struct tagInfo_t* tagInfo;
  /* 0x02a8 */ struct gentity_t* tagChildren;
  /* 0x02ac */ unsigned short attachModelNames[19];
  /* 0x02d2 */ unsigned short attachTagNames[19];
  /* 0x02f8 */ struct XAnimTree_s* pAnimTree;
  /* 0x02fc */ unsigned short disconnectedLinks;
  /* 0x02fe */ char Padding_135[2];
  /* 0x0300 */ int iDisconnectTime;
  /* 0x0304 */ int useCount;
  /* 0x0308 */ int physObjId;
  /* 0x030c */ struct gentity_t* nextFree;
  /* 0x0310 */ int birthTime;
  /* 0x0314 */ int ikPlayerclipTerrainTime;
  /* 0x0318 */ int ikDisableTerrainMappingTime;
}; /* size: 0x031c */

typedef enum _TAG_UNNAMED_237
{
  k_iCallback = 1101,
} TAG_UNNAMED_237, *PTAG_UNNAMED_237;

enum ESteamAPICallFailure
{
  k_ESteamAPICallFailureNone = -1,
  k_ESteamAPICallFailureSteamGone = 0,
  k_ESteamAPICallFailureNetworkFailure = 1,
  k_ESteamAPICallFailureInvalidHandle = 2,
  k_ESteamAPICallFailureMismatchedCallback = 3,
};

typedef enum _TAG_UNNAMED_238
{
  k_iCallback = 1103,
} TAG_UNNAMED_238, *PTAG_UNNAMED_238;

typedef enum _TAG_UNNAMED_239
{
  k_iCallback = 1102,
} TAG_UNNAMED_239, *PTAG_UNNAMED_239;

enum FLAC__StreamDecoderTellStatus
{
  FLAC__STREAM_DECODER_TELL_STATUS_OK = 0,
  FLAC__STREAM_DECODER_TELL_STATUS_ERROR = 1,
  FLAC__STREAM_DECODER_TELL_STATUS_UNSUPPORTED = 2,
};

enum ELeaderboardDisplayType
{
  k_ELeaderboardDisplayTypeNone = 0,
  k_ELeaderboardDisplayTypeNumeric = 1,
  k_ELeaderboardDisplayTypeTimeSeconds = 2,
  k_ELeaderboardDisplayTypeTimeMilliSeconds = 3,
};

enum ELeaderboardDataRequest
{
  k_ELeaderboardDataRequestGlobal = 0,
  k_ELeaderboardDataRequestGlobalAroundUser = 1,
  k_ELeaderboardDataRequestFriends = 2,
  k_ELeaderboardDataRequestUsers = 3,
};

enum NV_EVENT_LEVEL
{
  UNKNOWN_LEVEL = 0,
  NORMAL_LEVEL = 1,
  WARNING_LEVEL = 2,
  CRITICAL_LEVEL = 3,
};

enum ELeaderboardUploadScoreMethod
{
  k_ELeaderboardUploadScoreMethodNone = 0,
  k_ELeaderboardUploadScoreMethodKeepBest = 1,
  k_ELeaderboardUploadScoreMethodForceUpdate = 2,
};

enum Livesteam_TicketState_t
{
  LIVE_STEAM_TICKET_ERROR = -1,
  LIVE_STEAM_TICKET_SUCCESS = 0,
  LIVE_STEAM_TICKET_START = 1,
  LIVE_STEAM_TICKET_MAKE_REQUEST = 2,
  LIVE_STEAM_TICKET_REQUEST_IN_PROGRESS = 3,
  LIVE_STEAM_TICKET_RESPONSE = 4,
  LIVE_STEAM_TICKET_LIMIT_EXCEEDED = 5,
};

struct D3D11_TEX1D_DSV
{
  /* 0x0000 */ unsigned int MipSlice;
}; /* size: 0x0004 */

struct D3D11_TEX1D_ARRAY_DSV
{
  /* 0x0000 */ unsigned int MipSlice;
  /* 0x0004 */ unsigned int FirstArraySlice;
  /* 0x0008 */ unsigned int ArraySize;
}; /* size: 0x000c */

struct D3D11_TEX2D_DSV
{
  /* 0x0000 */ unsigned int MipSlice;
}; /* size: 0x0004 */

struct D3D11_TEX2D_ARRAY_DSV
{
  /* 0x0000 */ unsigned int MipSlice;
  /* 0x0004 */ unsigned int FirstArraySlice;
  /* 0x0008 */ unsigned int ArraySize;
}; /* size: 0x000c */

struct D3D11_TEX2DMS_DSV
{
  /* 0x0000 */ unsigned int UnusedField_NothingToDefine;
}; /* size: 0x0004 */

struct D3D11_TEX2DMS_ARRAY_DSV
{
  /* 0x0000 */ unsigned int FirstArraySlice;
  /* 0x0004 */ unsigned int ArraySize;
}; /* size: 0x0008 */

struct D3D11_DEPTH_STENCIL_VIEW_DESC
{
  /* 0x0000 */ enum DXGI_FORMAT Format;
  /* 0x0004 */ enum D3D11_DSV_DIMENSION ViewDimension;
  /* 0x0008 */ unsigned int Flags;
  union
  {
    /* 0x000c */ struct D3D11_TEX1D_DSV Texture1D;
    /* 0x000c */ struct D3D11_TEX1D_ARRAY_DSV Texture1DArray;
    /* 0x000c */ struct D3D11_TEX2D_DSV Texture2D;
    /* 0x000c */ struct D3D11_TEX2D_ARRAY_DSV Texture2DArray;
    /* 0x000c */ struct D3D11_TEX2DMS_DSV Texture2DMS;
    struct
    {
      /* 0x000c */ struct D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
      /* 0x0014 */ long __PADDING__[1];
    }; /* size: 0x000c */
  }; /* size: 0x000c */
}; /* size: 0x0018 */

enum EP2PSend
{
  k_EP2PSendUnreliable = 0,
  k_EP2PSendUnreliableNoDelay = 1,
  k_EP2PSendReliable = 2,
  k_EP2PSendReliableWithBuffering = 3,
};

enum ESNetSocketConnectionType
{
  k_ESNetSocketConnectionTypeNotConnected = 0,
  k_ESNetSocketConnectionTypeUDP = 1,
  k_ESNetSocketConnectionTypeUDPRelay = 2,
};

union tagCY
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long Lo;
      /* 0x0004 */ long Hi;
    }; /* size: 0x0008 */
    /* 0x0000 */ __int64 int64;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

enum ERemoteStoragePublishedFileVisibility
{
  k_ERemoteStoragePublishedFileVisibilityPublic = 0,
  k_ERemoteStoragePublishedFileVisibilityFriendsOnly = 1,
  k_ERemoteStoragePublishedFileVisibilityPrivate = 2,
};

enum EWorkshopFileType
{
  k_EWorkshopFileTypeCommunity = 0,
  k_EWorkshopFileTypeMicrotransaction = 1,
  k_EWorkshopFileTypeCollection = 2,
  k_EWorkshopFileTypeArt = 3,
  k_EWorkshopFileTypeVideo = 4,
  k_EWorkshopFileTypeScreenshot = 5,
};

typedef enum _NVVIODATAFORMAT
{
  NVVIODATAFORMAT_UNKNOWN = -1,
  NVVIODATAFORMAT_R8G8B8_TO_YCRCB444 = 0,
  NVVIODATAFORMAT_R8G8B8A8_TO_YCRCBA4444 = 1,
  NVVIODATAFORMAT_R8G8B8Z10_TO_YCRCBZ4444 = 2,
  NVVIODATAFORMAT_R8G8B8_TO_YCRCB422 = 3,
  NVVIODATAFORMAT_R8G8B8A8_TO_YCRCBA4224 = 4,
  NVVIODATAFORMAT_R8G8B8Z10_TO_YCRCBZ4224 = 5,
  NVVIODATAFORMAT_X8X8X8_444_PASSTHRU = 6,
  NVVIODATAFORMAT_X8X8X8A8_4444_PASSTHRU = 7,
  NVVIODATAFORMAT_X8X8X8Z10_4444_PASSTHRU = 8,
  NVVIODATAFORMAT_X10X10X10_444_PASSTHRU = 9,
  NVVIODATAFORMAT_X10X8X8_444_PASSTHRU = 10,
  NVVIODATAFORMAT_X10X8X8A10_4444_PASSTHRU = 11,
  NVVIODATAFORMAT_X10X8X8Z10_4444_PASSTHRU = 12,
  NVVIODATAFORMAT_DUAL_R8G8B8_TO_DUAL_YCRCB422 = 13,
  NVVIODATAFORMAT_DUAL_X8X8X8_TO_DUAL_422_PASSTHRU = 14,
  NVVIODATAFORMAT_R10G10B10_TO_YCRCB422 = 15,
  NVVIODATAFORMAT_R10G10B10_TO_YCRCB444 = 16,
  NVVIODATAFORMAT_X12X12X12_444_PASSTHRU = 17,
  NVVIODATAFORMAT_X12X12X12_422_PASSTHRU = 18,
  NVVIODATAFORMAT_Y10CR10CB10_TO_YCRCB422 = 19,
  NVVIODATAFORMAT_Y8CR8CB8_TO_YCRCB422 = 20,
  NVVIODATAFORMAT_Y10CR8CB8A10_TO_YCRCBA4224 = 21,
  NVVIODATAFORMAT_R10G10B10_TO_RGB444 = 22,
  NVVIODATAFORMAT_R12G12B12_TO_YCRCB444 = 23,
  NVVIODATAFORMAT_R12G12B12_TO_YCRCB422 = 24,
} NVVIODATAFORMAT, *PNVVIODATAFORMAT;

enum EWorkshopVideoProvider
{
  k_EWorkshopVideoProviderNone = 0,
  k_EWorkshopVideoProviderYoutube = 1,
};

struct CD3D10_BUFFER_DESC
{
}; /* size: 0x0014 */

enum EWorkshopEnumerationType
{
  k_EWorkshopEnumerationTypeRankedByVote = 0,
  k_EWorkshopEnumerationTypeRecent = 1,
  k_EWorkshopEnumerationTypeTrending = 2,
  k_EWorkshopEnumerationTypeFavoritesOfFriends = 3,
  k_EWorkshopEnumerationTypeVotedByFriends = 4,
  k_EWorkshopEnumerationTypeContentByFriends = 5,
  k_EWorkshopEnumerationTypeRecentFromFollowedUsers = 6,
};

enum EHTTPMethod
{
  k_EHTTPMethodInvalid = 0,
  k_EHTTPMethodGET = 1,
  k_EHTTPMethodHEAD = 2,
  k_EHTTPMethodPOST = 3,
};

class phys_static_array<plane_lt,512>
{
  /* 0x0000 */ char m_buffer[16384];
  /* 0x4000 */ struct plane_lt* const m_slot_array;
  /* 0x4004 */ int m_alloc_count;
}; /* size: 0x4010 */

enum EMatchMakingServerResponse
{
  eServerResponded = 0,
  eServerFailedToRespond = 1,
  eNoServersListedOnMasterServer = 2,
};

struct tagSAFEARRAY
{
  /* 0x0000 */ unsigned short cDims;
  /* 0x0002 */ unsigned short fFeatures;
  /* 0x0004 */ unsigned long cbElements;
  /* 0x0008 */ unsigned long cLocks;
  /* 0x000c */ void* pvData;
  /* 0x0010 */ struct tagSAFEARRAYBOUND rgsabound[1];
}; /* size: 0x0018 */

enum ELobbyDistanceFilter
{
  k_ELobbyDistanceFilterClose = 0,
  k_ELobbyDistanceFilterDefault = 1,
  k_ELobbyDistanceFilterFar = 2,
  k_ELobbyDistanceFilterWorldwide = 3,
};

enum ELobbyType
{
  k_ELobbyTypePrivate = 0,
  k_ELobbyTypeFriendsOnly = 1,
  k_ELobbyTypePublic = 2,
  k_ELobbyTypeInvisible = 3,
};

typedef enum _NV_StereoRegistryProfileType
{
  NVAPI_STEREO_DEFAULT_REGISTRY_PROFILE = 0,
  NVAPI_STEREO_DX9_REGISTRY_PROFILE = 1,
  NVAPI_STEREO_DX10_REGISTRY_PROFILE = 2,
} NV_StereoRegistryProfileType, *PNV_StereoRegistryProfileType;

enum SndBus
{
  SND_BUS_REVERB = 0,
  SND_BUS_FX = 1,
  SND_BUS_VOICE = 2,
  SND_BUS_PFUTZ = 3,
  SND_BUS_HDRFX = 4,
  SND_BUS_UI = 5,
  SND_BUS_MUSIC = 6,
  SND_BUS_MOVIE = 7,
  SND_BUS_REFERENCE = 8,
  SND_BUS_COUNT = 9,
};

enum SndDuckCategoryType
{
  SND_DUCK_CATEGORY_ALIAS = 0,
  SND_DUCK_CATEGORY_AMBIENT = 1,
  SND_DUCK_CATEGORY_SCRIPT = 2,
  SND_DUCK_CATEGORY_SHELLSHOCK = 3,
  SND_DUCK_CATEGORY_BREATH = 4,
  SND_DUCK_CATEGORY_ADS = 5,
  SND_DUCK_CATEGORY_MENU = 6,
  SND_DUCK_CATEGORY_ENEMIES = 7,
  SND_DUCK_CATEGORY_HEALTH = 8,
  SND_DUCK_CATEGORY_DEBUG = 9,
  SND_DUCK_CATEGORY_LEVELFADE = 10,
  SND_DUCK_CATEGORY_MOVIE = 11,
  SND_DUCK_CATEGORY_COUNT = 12,
};

struct IDXGIFactory1
{
}; /* size: 0x0004 */

struct cStaticModel_s
{
  /* 0x0000 */ struct cStaticModelWritable writable;
  /* 0x0002 */ char Padding_136[2];
  /* 0x0004 */ struct XModel* xmodel;
  /* 0x0008 */ int contents;
  /* 0x000c */ union vec3_t origin;
  /* 0x0018 */ union vec3_t invScaledAxis[3];
  /* 0x003c */ union vec3_t absmin;
  /* 0x0048 */ union vec3_t absmax;
}; /* size: 0x0054 */

enum SndCallLocation
{
  SND_CALL_LOCATION_SCRIPT = 0,
  SND_CALL_LOCATION_GDT = 1,
  SND_CALL_LOCATION_COUNT = 2,
};

enum SndAliasType
{
  SAT_UNKNOWN = 0,
  SAT_LOADED = 1,
  SAT_STREAMED = 2,
  SAT_PRIMED = 3,
  SAT_COUNT = 4,
};

enum SndLimitType
{
  SND_LIMIT_NONE = 0,
  SND_LIMIT_OLDEST = 1,
  SND_LIMIT_REJECT = 2,
  SND_LIMIT_PRIORITY = 3,
  SND_LIMIT_COUNT = 4,
};

enum rankTableColumns_t
{
  MP_RANKTABLE_RANKID = 0,
  MP_RANKTABLE_RANK = 1,
  MP_RANKTABLE_MINXP = 2,
  MP_RANKTABLE_XPTONEXT = 3,
  MP_RANKTABLE_SHORTRANK = 4,
  MP_RANKTABLE_FULLRANK = 5,
  MP_RANKTABLE_ICON = 6,
  MP_RANKTABLE_MAXXP = 7,
  MP_RANKTABLE_WEAPUNLOCK = 8,
  MP_RANKTABLE_PERKUNLOCK = 9,
  MP_RANKTABLE_CHALLENGE = 10,
  MP_RANKTABLE_CAMO = 11,
  MP_RANKTABLE_ATTACHMENT = 12,
  MP_RANKTABLE_LEVEL = 13,
  MP_RANKTABLE_DISPLAYLEVEL = 14,
  MP_RANKTABLE_FEATURE = 15,
  MP_RANKTABLE_INGAMERANK = 16,
  MP_RANKTABLE_UNLOCKS = 17,
  MP_RANKTABLE_COUNT = 18,
};

typedef enum _NVAPI_VENTURA_STATE
{
  NVAPI_VENTURA_STATE_UNSUPPORTED = 0,
  NVAPI_VENTURA_STATE_DISABLED = 1,
  NVAPI_VENTURA_STATE_ENABLED = 2,
} NVAPI_VENTURA_STATE, *PNVAPI_VENTURA_STATE;

struct D3D10_TEXTURE1D_DESC
{
  /* 0x0000 */ unsigned int Width;
  /* 0x0004 */ unsigned int MipLevels;
  /* 0x0008 */ unsigned int ArraySize;
  /* 0x000c */ enum DXGI_FORMAT Format;
  /* 0x0010 */ enum D3D10_USAGE Usage;
  /* 0x0014 */ unsigned int BindFlags;
  /* 0x0018 */ unsigned int CPUAccessFlags;
  /* 0x001c */ unsigned int MiscFlags;
}; /* size: 0x0020 */

enum demonwareFlags_e
{
  DEMONWARE_FLAGS_INVALID = -1,
  DEMONWARE_FLAGS_SEASONPASS_SENT = 0,
  DEMONWARE_FLAGS_MISSING_PRESTIGE_FILE = 1,
  DEMONWARE_FLAGS_PRESTIGE_TOO_FAST = 2,
  DEMONWARE_FLAGS_UNLOCK_TOKEN_MISMATCH = 3,
  DEMONWARE_FLAGS_BAD_GAMERTAG = 4,
  DEMONWARE_FLAGS_IW6_PROMO_PURCHASED = 5,
  DEMONWARE_FLAGS_IW6_PROMO_ACCESSED = 6,
  DEMONWARE_FLAGS_VOTING_VERSION = 7,
  DEMONWARE_FLAGS_VOTING_DATA = 8,
  DEMONWARE_FLAGS_VOTING_TIME_0 = 9,
  DEMONWARE_FLAGS_VOTING_TIME_1 = 10,
  DEMONWARE_FLAGS_VOTING_TIME_2 = 11,
  DEMONWARE_FLAGS_VOTING_TIME_3 = 12,
  DEMONWARE_FLAGS_CONNECTION_TYPE = 13,
  DEMONWARE_FLAGS_SPREMINDER_TIME_0 = 14,
  DEMONWARE_FLAGS_SPREMINDER_TIME_1 = 15,
  DEMONWARE_FLAGS_SPREMINDER_TIME_2 = 16,
  DEMONWARE_FLAGS_SPREMINDER_TIME_3 = 17,
  DEMONWARE_FLAGS_DSPPROMOTION_TIME_0 = 18,
  DEMONWARE_FLAGS_DSPPROMOTION_TIME_1 = 19,
  DEMONWARE_FLAGS_DSPPROMOTION_TIME_2 = 20,
  DEMONWARE_FLAGS_DSPPROMOTION_TIME_3 = 21,
  DEMONWARE_FLAGS_DSPPROMOTION_OPT_OUT = 22,
  DEMONWARE_FLAGS_GHOSTUPSELL_TIME_0 = 23,
  DEMONWARE_FLAGS_GHOSTUPSELL_TIME_1 = 24,
  DEMONWARE_FLAGS_GHOSTUPSELL_TIME_2 = 25,
  DEMONWARE_FLAGS_GHOSTUPSELL_TIME_3 = 26,
  DEMONWARE_FLAGS_GHOSTUPSELL_OPT_OUT = 27,
  DEMONWARE_FLAGS_COUNT = 28,
};

enum matchHistoryKeyIndex_t
{
  MP_MATCHHISTORYKEY_STARTINGTIME = 0,
  MP_MATCHHISTORYKEY_ENDINGTIME = 1,
  MP_MATCHHISTORYKEY_GAMETYPE = 2,
  MP_MATCHHISTORYKEY_SCORE = 3,
  MP_MATCHHISTORYKEY_KILLS = 4,
  MP_MATCHHISTORYKEY_DEATHS = 5,
  MP_MATCHHISTORYKEY_SCOREBOARDPOSITION = 6,
  MP_MATCHHISTORYKEY_TEAMSCORERATIO = 7,
  MP_MATCHHISTORYKEY_QUITTYPE = 8,
  MP_MATCHHISTORYKEY_FORGIVEN = 9,
  MP_MATCHHISTORYKEY_COUNT = 10,
};

enum matchHistoryQuitType_t
{
  MP_QUITTYPE_DASHBOARD = 0,
  MP_QUITTYPE_TIMEOUT = 1,
  MP_QUITTYPE_KICKED = 2,
  MP_QUITTYPE_QUIT = 3,
  MP_QUITTYPE_FINISHED = 4,
  MP_QUITTYPE_COUNT = 5,
};

enum zombieStatsKeyIndex_t
{
  ZM_ZOMBIESTATSKEY_TIME_PLAYED_TOTAL = 0,
  ZM_ZOMBIESTATSKEY_WEIGHTED_DOWNS = 1,
  ZM_ZOMBIESTATSKEY_WEIGHTED_ROUNDS_PLAYED = 2,
  ZM_ZOMBIESTATSKEY_TIMESTAMPLASTDAY1 = 3,
  ZM_ZOMBIESTATSKEY_TIMESTAMPLASTDAY2 = 4,
  ZM_ZOMBIESTATSKEY_TIMESTAMPLASTDAY3 = 5,
  ZM_ZOMBIESTATSKEY_TIMESTAMPLASTDAY4 = 6,
  ZM_ZOMBIESTATSKEY_TIMESTAMPLASTDAY5 = 7,
  ZM_ZOMBIESTATSKEY_KILLS = 8,
  ZM_ZOMBIESTATSKEY_ROUNDS = 9,
  ZM_ZOMBIESTATSKEY_COMBINED_RANK = 10,
  ZM_ZOMBIESTATSKEY_WINS = 11,
  ZM_ZOMBIESTATSKEY_LOSSES = 12,
  ZM_ZOMBIESTATSKEY_COUNT = 13,
};

enum eScoreInfoTableColumns
{
  SCOREINFOTABLE_SCRIPTREF = 0,
  SCOREINFOTABLE_SCORESTRING = 1,
  SCOREINFOTABLE_MEDALREF = 2,
  SCOREINFOTABLE_MEDALBACKING = 3,
  SCOREINFOTABLE_INCLUDE_KILLSTREAKS = 4,
  SCOREINFOTABLE_SAVEMEDAL = 5,
  SCOREINFOTABLE_ADDBOOKMARK = 6,
  SCOREINFOTABLE_DOUBLEXP = 7,
  SCOREINFOTABLE_GIVEGUNXP = 8,
  SCOREINFOTABLE_MEDALCATEGORY = 9,
  SCOREINFOTABLE_MEDALSORTKEY = 10,
  MAX_SCOREINFOTABLE_COUNT = 11,
};

struct D3D11_RENDER_TARGET_BLEND_DESC
{
  /* 0x0000 */ int BlendEnable;
  /* 0x0004 */ enum D3D11_BLEND SrcBlend;
  /* 0x0008 */ enum D3D11_BLEND DestBlend;
  /* 0x000c */ enum D3D11_BLEND_OP BlendOp;
  /* 0x0010 */ enum D3D11_BLEND SrcBlendAlpha;
  /* 0x0014 */ enum D3D11_BLEND DestBlendAlpha;
  /* 0x0018 */ enum D3D11_BLEND_OP BlendOpAlpha;
  /* 0x001c */ unsigned char RenderTargetWriteMask;
  /* 0x001d */ char __PADDING__[3];
}; /* size: 0x0020 */

enum statsDeltaColumns_t
{
  STATSDELTA_INDEX = 0,
  STATSDELTA_PATH = 1,
  STATSDELTA_MINREPORT = 2,
  STATSDELTA_MAXREPORT = 3,
  STATSDELTA_MINCLAMP = 4,
  STATSDELTA_MAXCLAMP = 5,
  STATSDELTA_MINDROP = 6,
  STATSDELTA_MAXDROP = 7,
  STATSDELTA_CLIENTLB = 8,
  STATSDELTA_SERVERLB = 9,
  STATSDELTA_COUNT = 10,
};

enum gameTypeTableColumns_t
{
  GAMETYPETABLE_SECTION = 0,
  GAMETYPETABLE_REFERENCE = 1,
  GAMETYPETABLE_NAME = 2,
  GAMETYPETABLE_DESC = 3,
  GAMETYPETABLE_IMAGE = 4,
  GAMETYPETABLE_INDEX = 5,
  GAMETYPETABLE_SPLITSCREEN = 6,
  GAMETYPETABLE_NAMELCASE = 7,
  GAMETYPETABLE_TEAMBASED = 8,
  GAMETYPETABLE_GROUPNAME = 9,
  GAMETYPETABLE_HASHARDCORE = 10,
  GAMETYPETABLE_COUNT = 11,
};

typedef enum _TAG_UNNAMED_240
{
  FX_EFFECT_NEEDS_LIGHTING = 1,
  FX_EFFECT_HAS_SPOT_LIGHT_ELEM = 2,
  FX_EFFECT_USE_BOUNDING_BOX = 4,
  FX_EFFECT_LOCAL_BOUNDING_BOX = 8,
  FX_EFFECT_HAS_OMNI_LIGHT_ELEM = 16,
  FX_EFFECT_HAS_MODEL_ELEM = 32,
  FX_EFFECT_HAS_SOUND_ELEM = 64,
  FX_EFFECT_HAS_RUNNER_ELEM = 128,
  FX_EFFECT_HAS_TRAIL_ELEM = 256,
  FX_EFFECT_BBOX_SPAWNCULL = 512,
  FX_EFFECT_BBOX_PORTALLED = 1024,
  FX_EFFECT_IGNORE_TELEPORTING = 2048,
  FX_EFFECT_FAST_OFFSCREEN_UPDATE = 0xffff8000,
} TAG_UNNAMED_240, *PTAG_UNNAMED_240;

enum challengeSortOrder_e
{
  SORTORDER_FIRST = 0,
  SORTORDER_NEAREST = 0,
  SORTORDER_REWARD = 1,
  SORTORDER_PERCENTAGECOMPLETED = 2,
  SORTORDER_DEFAULT = 3,
  SORTORDER_COUNT = 4,
  SORTORDER_INVALID = -1,
};

enum XSurfaceVertColType
{
  XSURFACE_VERTCOL_NONE = 0,
  XSURFACE_VERTCOL_GREY = 1,
  XSURFACE_VERTCOL_ALL = 2,
};

enum SndBankState
{
  SND_BANK_STATE_NEW = 0,
  SND_BANK_STATE_STREAM_HEADER = 1,
  SND_BANK_STATE_STREAM_TOC = 2,
  SND_BANK_STATE_LOADED_HEADER = 3,
  SND_BANK_STATE_LOADED_TOC = 4,
  SND_BANK_STATE_LOADED_ASSET_WAIT = 5,
  SND_BANK_STATE_LOADED_ASSETS = 6,
  SND_BANK_STATE_READY_TO_USE = 7,
  SND_BANK_STATE_ERROR = 8,
};

typedef enum _TAG_UNNAMED_241
{
  GFX_USE_VIEWPORT_FOR_VIEW = 0,
  GFX_USE_VIEWPORT_FULL = 1,
} TAG_UNNAMED_241, *PTAG_UNNAMED_241;

enum SndLengthType
{
  SND_LENGTH_NOTIFY_NONE = 0,
  SND_LENGTH_NOTIFY_SCRIPT = 1,
  SND_LENGTH_NOTIFY_SUBTITLE = 2,
  SND_LENGTH_NOTIFY_COUNT = 3,
};

struct TraceCheckCount
{
  /* 0x0000 */ unsigned short global;
  /* 0x0002 */ char Padding_137[2];
  /* 0x0004 */ unsigned short* partitions;
  /* 0x0008 */ unsigned short* brushes;
}; /* size: 0x000c */

struct TraceThreadInfo
{
  /* 0x0000 */ struct TraceCheckCount checkcount;
  /* 0x000c */ struct cbrush_t* box_brush;
  /* 0x0010 */ struct cmodel_t* box_model;
  /* 0x0014 */ struct PhysGeomList** geoms;
}; /* size: 0x0018 */

enum SndCommandType
{
  SND_COMMAND_NOP = 0,
  SND_COMMAND_ALIAS_NAME = 1,
  SND_COMMAND_PLAY = 2,
  SND_COMMAND_STOP_ALIAS = 3,
  SND_COMMAND_STOP_ENT = 4,
  SND_COMMAND_CINEMATIC_START = 5,
  SND_COMMAND_CINEMATIC_END = 6,
  SND_COMMAND_DISCONNECT_LISTENER = 7,
  SND_COMMAND_SET_LISTENER = 8,
  SND_COMMAND_STOP_SOUNDS = 9,
  SND_COMMAND_FADE_IN = 10,
  SND_COMMAND_FADE_OUT = 11,
  SND_COMMAND_SET_ENVIRONMENT_EFFECTS = 12,
  SND_COMMAND_DEACTIVATE_ENVIRONMENT_EFFECTS = 13,
  SND_COMMAND_SET_PLAYBACK_ATTENUATION = 14,
  SND_COMMAND_SET_PLAYBACK_ATTENUATION_RATE = 15,
  SND_COMMAND_SET_PLAYBACK_PITCH = 16,
  SND_COMMAND_SET_PLAYBACK_PITCH_RATE = 17,
  SND_COMMAND_STOP_PLAYBACK = 18,
  SND_COMMAND_SET_START_PAUSED = 19,
  SND_COMMAND_DUCK = 20,
  SND_COMMAND_SET_ENT_STATE = 21,
  SND_COMMAND_SET_GAME_STATE = 22,
  SND_COMMAND_PLAY_LOOP_AT = 23,
  SND_COMMAND_STOP_LOOP_AT = 24,
  SND_COMMAND_PLAY_LINE_AT = 25,
  SND_COMMAND_STOP_LINE_AT = 26,
  SND_COMMAND_GAME_RESET = 27,
  SND_COMMAND_SET_CONTEXT = 28,
  SND_COMMAND_SET_ENT_CONTEXT = 29,
  SND_COMMAND_SCRIPT_TIMESCALE = 30,
  SND_COMMAND_UPDATE_CG = 31,
  SND_COMMAND_LOAD_BANK = 32,
  SND_COMMAND_UNLOAD_BANK = 33,
  SND_COMMAND_LOAD_PATCH = 34,
  SND_COMMAND_UNLOAD_PATCH = 35,
  SND_COMMAND_LOAD_GLOBALS = 36,
  SND_COMMAND_UNLOAD_GLOBALS = 37,
  SND_COMMAND_PRIME_ALIAS = 38,
  SND_COMMAND_RESTART_DRIVER = 39,
  SND_COMMAND_SET_SIDE_CHAIN_DUCK = 40,
  SND_COMMAND_SET_MUSIC_STATE = 41,
  SND_COMMAND_PREFETCH_LOADED_ALIAS = 42,
  SND_COMMAND_SET_GLOBAL_FUTZ = 43,
  SND_COMMAND_SET_AMBIENT_DEFAULT_CONTEXT = 44,
  SND_COMMAND_SET_FRONTEND_MUSIC = 45,
  SND_COMMAND_SET_LOOP_STATE = 46,
  SND_COMMAND_PLAY_LOOPS = 47,
  SND_COMMAND_SHUTDOWN = 48,
  SND_COMMAND_COUNT = 49,
};

enum SndMusicActiveSegmentState
{
  SND_MUSIC_STATE_INACTIVE = 0,
  SND_MUSIC_STATE_PLAY_ON_EXIT = 1,
  SND_MUSIC_STATE_START_DELAY = 2,
  SND_MUSIC_STATE_PLAYING = 3,
  SND_MUSIC_STATE_STOP_DELAY = 4,
  SND_MUSIC_STATE_FADE_OUT = 5,
};

enum SndFileLoadingState
{
  SFLS_UNLOADED = 0,
  SFLS_LOADING = 1,
  SFLS_LOADED = 2,
};

typedef enum _TAG_UNNAMED_242
{
  JQ_RETURN_SUCCESS = 0,
  JQ_RETURN_REQUEUE = 1,
} TAG_UNNAMED_242, *PTAG_UNNAMED_242;

enum SndEntityUpdate
{
  SND_ENTITY_UPDATE_ALWAYS = 0,
  SND_ENTITY_UPDATE_NEVER = 1,
};

enum JPEG_MARKER
{
  M_SOF0 = 192,
  M_SOF1 = 193,
  M_SOF2 = 194,
  M_SOF3 = 195,
  M_SOF5 = 197,
  M_SOF6 = 198,
  M_SOF7 = 199,
  M_JPG = 200,
  M_SOF9 = 201,
  M_SOF10 = 202,
  M_SOF11 = 203,
  M_SOF13 = 205,
  M_SOF14 = 206,
  M_SOF15 = 207,
  M_DHT = 196,
  M_DAC = 204,
  M_RST0 = 208,
  M_RST1 = 209,
  M_RST2 = 210,
  M_RST3 = 211,
  M_RST4 = 212,
  M_RST5 = 213,
  M_RST6 = 214,
  M_RST7 = 215,
  M_SOI = 216,
  M_EOI = 217,
  M_SOS = 218,
  M_DQT = 219,
  M_DNL = 220,
  M_DRI = 221,
  M_DHP = 222,
  M_EXP = 223,
  M_APP0 = 224,
  M_APP1 = 225,
  M_APP2 = 226,
  M_APP3 = 227,
  M_APP4 = 228,
  M_APP5 = 229,
  M_APP6 = 230,
  M_APP7 = 231,
  M_APP8 = 232,
  M_APP9 = 233,
  M_APP10 = 234,
  M_APP11 = 235,
  M_APP12 = 236,
  M_APP13 = 237,
  M_APP14 = 238,
  M_APP15 = 239,
  M_JPG0 = 240,
  M_JPG13 = 253,
  M_COM = 254,
  M_TEM = 1,
  M_ERROR = 256,
};

enum SndEnvEffectPriority
{
  SND_ENVEFFECTPRIO_NONE = 0,
  SND_ENVEFFECTPRIO_LEVEL = 1,
  SND_ENVEFFECTPRIO_SHELLSHOCK = 2,
  SND_ENVEFFECTPRIO_COUNT = 3,
};

enum filterFlags
{
  FILTER_BIT0 = 1,
  FILTER_BIT1 = 2,
  FILTER_USEQUAD = 4,
};

enum searchSessionMode_t
{
  SEARCH_SESSION_MODE_INVALID = 0,
  SEARCH_SESSION_MODE_PUBLIC = 1,
  SEARCH_SESSION_MODE_LEAGUE = 2,
  SEARCH_SESSION_MODE_LOBBY_MERGE = 3,
  SEARCH_SESSION_MODE_DEDICATED_SERVER = 4,
  SEARCH_SESSION_MODE_COUNT = 5,
};

typedef enum _TAG_UNNAMED_243
{
  GEOGRAPHICAL_MATCHMAKING_NONE = 0,
  GEOGRAPHICAL_MATCHMAKING_PREFERRED = 1,
  GEOGRAPHICAL_MATCHMAKING_ONLY = 2,
} TAG_UNNAMED_243, *PTAG_UNNAMED_243;

struct XModelPartsLoad
{
  /* 0x0000 */ unsigned char numBones;
  /* 0x0001 */ unsigned char numRootBones;
  /* 0x0002 */ char Padding_138[2];
  /* 0x0004 */ unsigned short* boneNames;
  /* 0x0008 */ unsigned char* parentList;
  /* 0x000c */ short* quats;
  /* 0x0010 */ float* trans;
  /* 0x0014 */ unsigned char* partClassification;
  /* 0x0018 */ struct DObjAnimMat* baseMat;
}; /* size: 0x001c */

struct XBoneInfo
{
  /* 0x0000 */ union vec3_t bounds[2];
  /* 0x0018 */ union vec3_t offset;
  /* 0x0024 */ float radiusSquared;
  /* 0x0028 */ unsigned char collmap;
  /* 0x0029 */ char __PADDING__[3];
}; /* size: 0x002c */

struct XModelDefault
{
  /* 0x0000 */ unsigned short boneNames[1];
  /* 0x0002 */ unsigned char parentList[1];
  /* 0x0003 */ char Padding_139;
  /* 0x0004 */ struct XModelPartsLoad modelParts;
  /* 0x0020 */ struct XBoneInfo boneInfo;
  /* 0x004c */ unsigned char partClassification[1];
  /* 0x004d */ char Padding_140;
  /* 0x004e */ unsigned short surfNames[1];
}; /* size: 0x0050 */

struct XMVECTORU32
{
  union
  {
    /* 0x0000 */ unsigned int u[4];
    /* 0x0000 */ union __m128 v;
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

enum friendsMode_e
{
  FRIENDS_SHOW_PLATFORM = 0,
  FRIENDS_SHOW_OFFLINE = 1,
  FRIENDS_NUM_MODES = 2,
};

enum filesharePlayerFilter_e
{
  FSH_PLAYERFILTER_INVALID = -1,
  FSH_PLAYERFILTER_ALL = 0,
  FSH_PLAYERFILTER_SELF = 1,
  FSH_PLAYERFILTER_OTHER = 2,
  FSH_PLAYERFILTER_FRIENDS = 3,
  FSH_PLAYERFILTER_STAFF = 4,
  FSH_PLAYERFILTER_CLAN = 5,
  FSH_PLAYERFILTER_LEAGUE = 6,
};

typedef enum _TAG_UNNAMED_244
{
  PLAY_MODE_FAST = 0,
  PLAY_MODE_SLOW = 1,
  PLAY_MODE_NORMAL = 2,
} TAG_UNNAMED_244, *PTAG_UNNAMED_244;

typedef enum _TAG_UNNAMED_245
{
  GAMETYPES_SECTION_GAME = 0,
  GAMETYPES_SECTION_BT = 1,
  GAMETYPES_SECTION_LB = 2,
  GAMETYPES_SECTION_LBRESET = 3,
  GAMETYPES_SECTION_LBFILTER = 4,
  GAMETYPES_SECTION_ZM_STARTLOC = 5,
  GAMETYPES_SECTION_ZM_STARTLOCGAME = 6,
} TAG_UNNAMED_245, *PTAG_UNNAMED_245;

enum GPUTimerId
{
  GPU_TIMER_UI3D = 0,
  GPU_TIMER_LIT_SONAR = 1,
  GPU_TIMER_SHADOW_TOTAL = 2,
  GPU_TIMER_SUN_SHADOW_TOTAL = 3,
  GPU_TIMER_SPOT_SHADOW_TOTAL = 4,
  GPU_TIMER_SUN_SHADOW_0 = 5,
  GPU_TIMER_SUN_SHADOW_1 = 6,
  GPU_TIMER_SPOT_SHADOW_0 = 7,
  GPU_TIMER_SPOT_SHADOW_1 = 8,
  GPU_TIMER_SPOT_SHADOW_2 = 9,
  GPU_TIMER_SPOT_SHADOW_3 = 10,
  GPU_TIMER_MAINPASS_TOTAL = 11,
  GPU_TIMER_CLEAR_SCREEN = 12,
  GPU_TIMER_DEPTH_HACK = 13,
  GPU_TIMER_DEPTH_PREPASS = 14,
  GPU_TIMER_ZCULL_RELOAD = 15,
  GPU_TIMER_LIT_BSP = 16,
  GPU_TIMER_LIT_SMODEL = 17,
  GPU_TIMER_LIT = 18,
  GPU_TIMER_LIGHTMAP = 19,
  GPU_TIMER_EMISSIVE_OPAQUE = 20,
  GPU_TIMER_LIT_QUASI_OPAQUE = 21,
  GPU_TIMER_RESOLVE_SCENE = 22,
  GPU_TIMER_LIT_POST_RESOLVE = 23,
  GPU_TIMER_LIGHTMAP_POST_RESOLVE = 24,
  GPU_TIMER_TRANS = 25,
  GPU_TIMER_SUN = 26,
  GPU_TIMER_EMISSIVE_TOTAL = 27,
  GPU_TIMER_EMISSIVE_FX = 28,
  GPU_TIMER_TRANS_POST_FX = 29,
  GPU_TIMER_VIEWMODEL_FX = 30,
  GPU_TIMER_VIEWMODEL_TRANS = 31,
  GPU_TIMER_SUPERFLARE = 32,
  GPU_TIMER_EXTRACAM = 33,
  GPU_TIMER_FXAA = 34,
  GPU_TIMER_BLOOM = 35,
  GPU_TIMER_DOF = 36,
  GPU_TIMER_UPSCALE = 37,
  GPU_TIMER_2D = 38,
  GPU_TIMER_2D_TOTAL = 39,
  GPU_TIMER_COUNT = 40,
};

typedef enum _TAG_UNNAMED_246
{
  GAMETYPES_COL_ZM_STARTLOC_INDEX = 1,
  GAMETYPES_COL_ZM_STARTLOC_MAPREF = 2,
  GAMETYPES_COL_ZM_STARTLOC_REF = 3,
  GAMETYPES_COL_ZM_STARTLOC_NAMECAPS = 4,
  GAMETYPES_COL_ZM_STARTLOC_DESCRIPTION = 5,
  GAMETYPES_COL_ZM_STARTLOC_IMAGE = 6,
  GAMETYPES_COL_ZM_STARTLOC_GAMEMODENUM = 7,
  GAMETYPES_COL_ZM_STARTLOC_ICON_SCREEN_COORD_X = 8,
  GAMETYPES_COL_ZM_STARTLOC_ICON_SCREEN_COORD_Y = 9,
  GAMETYPES_COL_ZM_STARTLOC_MENU_SCREEN_COORD_X = 10,
  GAMETYPES_COL_ZM_STARTLOC_MENU_SCREEN_COORD_Y = 11,
  GAMETYPES_COL_ZM_STARTLOC_MOVE_LEFT = 12,
  GAMETYPES_COL_ZM_STARTLOC_MOVE_RIGHT = 13,
  GAMETYPES_COL_ZM_STARTLOC_MOVE_UP = 14,
  GAMETYPES_COL_ZM_STARTLOC_MOVE_DOWN = 15,
  GAMETYPES_COL_ZM_STARTLOC_NAMELOWER = 16,
  GAMETYPES_COL_ZM_STARTLOC_NEW_SCREEN_COORD_X = 17,
  GAMETYPES_COL_ZM_STARTLOC_NEW_SCREEN_COORD_Y = 18,
} TAG_UNNAMED_246, *PTAG_UNNAMED_246;

typedef enum _TAG_UNNAMED_247
{
  R_CODEC_MJPEG = 0,
  R_CODEC_VPX = 1,
  R_CODEC_COUNT = 2,
} TAG_UNNAMED_247, *PTAG_UNNAMED_247;

struct VehicleParameter
{
  /* 0x0000 */ float m_speed_max;
  /* 0x0004 */ float m_accel_max;
  /* 0x0008 */ float m_reverse_scale;
  /* 0x000c */ float m_steer_angle_max;
  /* 0x0010 */ float m_steer_angle_speed_scale;
  /* 0x0014 */ float m_steer_speed;
  /* 0x0018 */ float m_wheel_radius;
  /* 0x001c */ float m_susp_spring_k;
  /* 0x0020 */ float m_susp_damp_k;
  /* 0x0024 */ float m_susp_adj;
  /* 0x0028 */ float m_susp_hard_limit;
  /* 0x002c */ float m_susp_min_height;
  /* 0x0030 */ float m_tire_fric_fwd;
  /* 0x0034 */ float m_tire_fric_side;
  /* 0x0038 */ float m_tire_fric_brake;
  /* 0x003c */ float m_tire_fric_hand_brake;
  /* 0x0040 */ float m_body_mass;
  /* 0x0044 */ float m_roll_stability;
  /* 0x0048 */ float m_pitch_stability;
  /* 0x004c */ float m_pitch_roll_resistance;
  /* 0x0050 */ float m_yaw_resistance;
  /* 0x0054 */ float m_upright_strength;
  /* 0x0058 */ float m_tilt_fakey;
  /* 0x005c */ float m_peel_out_max_speed;
  /* 0x0060 */ float m_tire_damp_coast;
  /* 0x0064 */ float m_tire_damp_brake;
  /* 0x0068 */ float m_tire_damp_hand;
  /* 0x006c */ float m_auto_hand_brake_min_speed;
  /* 0x0070 */ enum TractionType m_traction_type;
  /* 0x0074 */ const char* m_name;
  /* 0x0078 */ union vec3_t m_bbox_min;
  /* 0x0084 */ union vec3_t m_bbox_max;
  /* 0x0090 */ union vec3_t m_mass_center_offset;
  /* 0x009c */ union vec3_t m_buoyancybox_min;
  /* 0x00a8 */ union vec3_t m_buoyancybox_max;
  /* 0x00b4 */ float m_water_speed_max;
  /* 0x00b8 */ float m_water_accel_max;
  /* 0x00bc */ float m_water_turn_accel;
  /* 0x00c0 */ float m_water_turn_speed_max;
  /* 0x00c4 */ float m_water_ebrake_power;
  /* 0x00c8 */ union vec3_t m_boat_motor_offset;
  /* 0x00d4 */ float m_boat_speed_rise;
  /* 0x00d8 */ float m_boat_speed_tilt;
  /* 0x00dc */ float m_boat_side_fric_scale;
  /* 0x00e0 */ float m_boat_forward_fric_scale;
  /* 0x00e4 */ float m_boat_vertical_fric_scale;
  /* 0x00e8 */ float m_jump_force;
  /* 0x00ec */ float m_tire_fric_side_max;
  /* 0x00f0 */ BOOL m_drive_on_walls;
  /* 0x00f1 */ char Padding_141[3];
  /* 0x00f4 */ float m_linear_drag_scale;
  /* 0x00f8 */ float m_angular_drag_scale;
}; /* size: 0x00fc */

typedef enum _TAG_UNNAMED_248
{
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_INDEX = 1,
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_MAP_REF = 2,
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_STARTLOC_REF = 3,
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_GAMEMODE_REF = 4,
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_DLC_GAMEMODE = 5,
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_NEW_ICON_PLACEMENT = 6,
} TAG_UNNAMED_248, *PTAG_UNNAMED_248;

class bdAddrHash
{
}; /* size: 0x0001 */

enum fileshareStatType_e
{
  FSH_STATS_VIEWS = 0,
  FSH_STATS_VOTES = 1,
  FSH_NUM_STATS = 2,
};

typedef enum _TAG_UNNAMED_249
{
  PHYS_ALLOC_LOW = 0,
  PHYS_ALLOC_HIGH = 1,
  PHYS_ALLOC_COUNT = 2,
} TAG_UNNAMED_249, *PTAG_UNNAMED_249;

union XAnimPartQuatFrames
{
  union
  {
    /* 0x0000 */ short* frames[4];
    /* 0x0000 */ short* frames2[2];
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct XAnimPartQuatDataFrames
{
  /* 0x0000 */ union XAnimPartQuatFrames u;
  /* 0x0004 */ union XAnimDynamicIndices indices;
  /* 0x0006 */ char __PADDING__[2];
}; /* size: 0x0008 */

union XAnimPartQuatData
{
  union
  {
    /* 0x0000 */ struct XAnimPartQuatDataFrames frames;
    /* 0x0000 */ short frame0[4];
    /* 0x0000 */ short frame02[2];
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

typedef enum _TAG_UNNAMED_250
{
  FSHTABLE_CATEGORIES_COL_CATEGORYNAME = 0,
  FSHTABLE_CATEGORIES_COL_GROUPNAME = 1,
  FSHTABLE_CATEGORIES_COL_DWID = 2,
  FSHTABLE_CATEGORIES_COL_LOCNAME = 3,
} TAG_UNNAMED_250, *PTAG_UNNAMED_250;

enum start_game
{
  START_GAME_CAMPAIGN = 0,
  START_GAME_MULTIPLAYER = 1,
  START_GAME_ZOMBIES = 2,
  START_GAME_TYPE_COUNT = 3,
};

typedef enum _TAG_UNNAMED_251
{
  FSHTABLE_GROUPS_COL_GROUPNAME = 0,
  FSHTABLE_GROUPS_COL_FIRSTSLOT = 1,
  FSHTABLE_GROUPS_COL_REGULARQUOTA = 2,
  FSHTABLE_GROUPS_COL_PREMIUMQUOTA = 3,
  FSHTABLE_GROUPS_COL_ISMANAGED = 4,
  FSHTABLE_GROUPS_COL_LOCNAME = 5,
  FSHTABLE_GROUPS_COL_ICON = 6,
  FSHTABLE_GROUPS_COL_R = 7,
  FSHTABLE_GROUPS_COL_G = 8,
  FSHTABLE_GROUPS_COL_B = 9,
} TAG_UNNAMED_251, *PTAG_UNNAMED_251;

enum NVAPI_DEVICE_FEATURE_LEVEL
{
  NVAPI_DEVICE_FEATURE_LEVEL_NULL = -1,
  NVAPI_DEVICE_FEATURE_LEVEL_10_0 = 0,
  NVAPI_DEVICE_FEATURE_LEVEL_10_0_PLUS = 1,
  NVAPI_DEVICE_FEATURE_LEVEL_10_1 = 2,
  NVAPI_DEVICE_FEATURE_LEVEL_11_0 = 3,
};

enum eliteStatus_e
{
  ELITE_NOT_CHECKED = 0,
  ELITESUBSCRIBER_START = 1,
  ELITESUBSCRIBER_GET_INFO_FROM_FP = 2,
  ELITESUBSCRIBER_GET_INFO_FROM_FP_SUCCEEDED = 3,
  ELITESUBSCRIBER_GET_INFO_FROM_DW = 4,
  ELITESUBSCRIBER_GETTING_INFO_FROM_DW = 5,
  ELITESUBSCRIBER_COMPARE_RETRIEVED_DW_INFO = 6,
  ELITESUBSCRIBER_REFRESH_DW_INFO = 7,
  ELITESUBSCRIBER_REFRESHING_DW_INFO = 8,
  ELITESUBSCRIBER_FAILED = 9,
  ELITESUBSCRIBER_SUCCEEDED = 10,
  ELITECLAN_START = 11,
  ELITECLAN_GET_CLAN = 12,
  ELITECLAN_GETTING_CLAN = 13,
  ELITECLAN_GET_PUBLIC_PROFILE = 14,
  ELITECLAN_GETTING_PUBLIC_PROFILE = 15,
  ELITECLAN_GET_PRIVATE_PROFILE = 16,
  ELITECLAN_GETTING_PRIVATE_PROFILE = 17,
  ELITECLAN_GET_CLAN_MEMBERS = 18,
  ELITECLAN_GETTING_CLAN_MEMBERS = 19,
  ELITECLAN_GET_CLAN_LEVELANDXP = 20,
  ELITECLAN_GETTING_CLAN_LEVELANDXP = 21,
  ELITECLAN_FAILED = 22,
  ELITECLAN_SUCCEEDED = 23,
  ELITE_CHECKED = 24,
  ELITE_MAX_STATES = 25,
};

enum D3D11_RESOURCE_MISC_FLAG
{
  D3D11_RESOURCE_MISC_GENERATE_MIPS = 1,
  D3D11_RESOURCE_MISC_SHARED = 2,
  D3D11_RESOURCE_MISC_TEXTURECUBE = 4,
  D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = 16,
  D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 32,
  D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = 64,
  D3D11_RESOURCE_MISC_RESOURCE_CLAMP = 128,
  D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = 256,
  D3D11_RESOURCE_MISC_GDI_COMPATIBLE = 512,
};

enum eSubLevel_e
{
  ELITE_SUBSCRIPTION_LEVEL_UNKNOWN = -1,
  ELITE_SUBSCRIPTION_LEVEL_NONE = 0,
  ELITE_SUBSCRIPTION_LEVEL_REGISTERED = 1,
  ELITE_SUBSCRIPTION_LEVEL_PAYING = 2,
  ELITE_SUBSCRIPTION_LEVEL_FOUNDER = 3,
};

enum EliteStats_e
{
  ELITE_STATS_MEMBER = 0,
  ELITE_STATS_FIRST = 0,
  ELITE_STATS_FOUNDER = 1,
  ELITE_STATS_PAIDMEMBER = 2,
  ELITE_STATS_COUNT = 3,
};

class bdFileID
{
  /* 0x0000 */ long Padding_142[2];
  /* 0x0008 */ unsigned __int64 m_fileID;
}; /* size: 0x0010 */

class bdChannelMember
{
  /* 0x0000 */ long Padding_143[2];
  /* 0x0008 */ unsigned __int64 m_userID;
  /* 0x0010 */ char m_userName[64];
  /* 0x0050 */ unsigned int m_subscribedTimestamp;
}; /* size: 0x0058 */

enum jsmntype_t
{
  JSMN_PRIMITIVE = 0,
  JSMN_OBJECT = 1,
  JSMN_ARRAY = 2,
  JSMN_KEY = 3,
  JSMN_STRING = 4,
};

class bdTitleUtilities
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
  /* 0x0004 */ class bdEventLog* m_eventLog;
}; /* size: 0x0008 */

enum jsmnerr_t
{
  JSMN_ERROR_NOMEM = -1,
  JSMN_ERROR_INVAL = -2,
  JSMN_ERROR_PART = -3,
  JSMN_SUCCESS = 0,
};

enum EntityFieldInfoFlags
{
  ENTITY_FIELD_INFO_NONE = 0,
  ENTITY_FIELD_INFO_IS_LINKED = 1,
  ENTITY_FIELD_INFO_POS_USES_TR_DELTA = 2,
  ENTITY_FIELD_INFO_POS_USES_TR_DURATION = 4,
  ENTITY_FIELD_INFO_APOS_USES_TR_DELTA = 8,
  ENTITY_FIELD_INFO_APOS_USES_TR_DURATION = 16,
};

class bdFastArray<bdSecurityID>
{
  /* 0x0000 */ class bdSecurityID* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

enum combatRecordInfoTypes_t
{
  INFO_TYPE_INVALID = -1,
  GAMEMODES = 0,
  WEAPONS = 1,
  EQUIPMENT = 2,
  SCORESTREAKS = 3,
  MEDALS = 4,
  INFO_TYPE_COUNT = 5,
};

enum std::_Iosb<int>::_Fmtflags
{
  _Fmtmask = 0xffffffff,
  _Fmtzero = 0,
};

enum thresholdExceeded_e
{
  THRESHOLD_EXCEEDED_SCORE = 0,
  THRESHOLD_EXCEEDED_SCORE_PER_MIN = 1,
  THRESHOLD_EXCEEDED_KILLS = 2,
  THRESHOLD_EXCEEDED_DEATHS = 3,
  THRESHOLD_EXCEEDED_KD_RATIO = 4,
  THRESHOLD_EXCEEDED_KILLS_PER_MIN = 5,
  THRESHOLD_EXCEEDED_PLANTS = 6,
  THRESHOLD_EXCEEDED_DEFUSES = 7,
  THRESHOLD_EXCEEDED_CAPTURES = 8,
  THRESHOLD_EXCEEDED_DEFENDS = 9,
  THRESHOLD_EXCEEDED_TOTAL_TIME_PLAYED = 10,
  THRESHOLD_EXCEEDED_TACTICAL_INSERTION_USE = 11,
  THRESHOLD_EXCEEDED_JOIN_ATTEMPTS = 12,
  THRESHOLD_EXCEEDED_XP = 13,
  THRESHOLD_EXCEEDED_SPLITSCREEN = 14,
  THRESHOLD_EXCEEDED_COUNT = 15,
};

typedef enum _NV_GPU_FLATPANEL_SIGNAL_TYPE
{
  NV_GPU_FLATPANEL_SIGNAL_TYPE_TMDS = 0,
  NV_GPU_FLATPANEL_SIGNAL_TYPE_LVDS = 1,
  NV_GPU_FLATPANEL_SIGNAL_TYPE_SDI = 2,
  NV_GPU_FLATPANEL_SIGNAL_TYPE_DISPLAYPORT = 3,
} NV_GPU_FLATPANEL_SIGNAL_TYPE, *PNV_GPU_FLATPANEL_SIGNAL_TYPE;

struct cached_simplex_info
{
  /* 0x0000 */ class phys_vec3 m_indices[3];
}; /* size: 0x0030 */

class phys_gjk_geom_id_pair_key
{
  /* 0x0000 */ unsigned int m_id1;
  /* 0x0004 */ unsigned int m_id2;
}; /* size: 0x0008 */

class phys_gjk_cache_info
{
  /* 0x0000 */ class phys_vec3 m_support_dir;
  /* 0x0010 */ struct cached_simplex_info m_support_a;
  /* 0x0040 */ struct cached_simplex_info m_support_b;
  /* 0x0070 */ int m_support_count;
  /* 0x0074 */ class phys_gjk_geom_id_pair_key m_key;
  /* 0x007c */ unsigned int m_flags;
}; /* size: 0x0080 */

class bdEndpoint
{
  /* 0x0000 */ class bdReference<bdCommonAddr> m_ca;
  /* 0x0004 */ class bdSecurityID m_secID;
}; /* size: 0x000c */

enum challengeTest_t
{
  CT_TYPE_INVALID = 0,
  CT_TYPE_CRC32 = 1,
  CT_TYPE_SHA = 2,
  CT_TYPE_CRC32_SPLIT = 3,
};

struct CD3D11_VIEWPORT
{
}; /* size: 0x0018 */

class bdRichPresence
{
  /* 0x0000 */ long Padding_144;
  /* 0x0004 */ unsigned int m_dataSize;
  /* 0x0008 */ void* m_data;
}; /* size: 0x000c */

enum challengeResponseFunctionIDs_t
{
  FUNC_ID_CHECKSUM_CRC32 = 1,
  FUNC_ID_CHECKSUM_SHA = 2,
  FUNC_ID_CHECKSUM_CRC32_SPLIT = 3,
  FUNC_ID_DVAR = 4,
  FUNC_ID_DVAR_FLOAT = 5,
  FUNC_ID_EXPRESSION = 6,
  FUNC_ID_MIPSTER = 8,
};

enum SndSpeakerFlag
{
  SND_SPEAKER_FLAG_LEFT = 1,
  SND_SPEAKER_FLAG_RIGHT = 2,
  SND_SPEAKER_FLAG_CENTER = 4,
  SND_SPEAKER_FLAG_LFE = 8,
  SND_SPEAKER_FLAG_LEFT_SURROUND = 16,
  SND_SPEAKER_FLAG_RIGHT_SURROUND = 32,
  SND_SPEAKER_FLAG_LEFT_REAR_SURROUND = 64,
  SND_SPEAKER_FLAG_RIGHT_REAR_SURROUND = 128,
};

enum snd_occlusion_query_type
{
  SND_OCCLUSION_QUERY_TYPE_SINGLE = 0,
  SND_OCCLUSION_QUERY_TYPE_MULTIPLE = 1,
};

enum mtxItemsCategory_e
{
  MTX_CATEGORY_STORAGEPACK = 0,
  MTX_CATEGORY_WEAPONPACK = 1,
  MTX_CATEGORY_CALLINGCARDPACK = 2,
  MTX_CATEGORY_INVALID = 3,
};

enum snd_occlusion_single_state
{
  SND_OCCLUSION_SINGLE_STATE_FREE = 0,
  SND_OCCLUSION_SINGLE_STATE_PENDING = 1,
  SND_OCCLUSION_SINGLE_STATE_DONE = 2,
};

enum GfxDrawSceneMethod
{
  GFX_DRAW_SCENE_NONE = 0,
  GFX_DRAW_SCENE_FULLBRIGHT = 1,
  GFX_DRAW_SCENE_DEBUGSHADER = 2,
  GFX_DRAW_SCENE_STANDARD = 3,
};

struct SndCurve
{
  /* 0x0000 */ char name[32];
  /* 0x0020 */ unsigned int id;
  /* 0x0024 */ union vec2_t points[8];
}; /* size: 0x0064 */

enum XAUDIO2_DEVICE_ROLE
{
  NotDefaultDevice = 0,
  DefaultConsoleDevice = 1,
  DefaultMultimediaDevice = 2,
  DefaultCommunicationsDevice = 4,
  DefaultGameDevice = 8,
  GlobalDefaultDevice = 15,
  InvalidDeviceRole = -16,
};

enum D3D10_INPUT_CLASSIFICATION
{
};

enum tagCOINIT
{
  COINIT_APARTMENTTHREADED = 2,
  COINIT_MULTITHREADED = 0,
  COINIT_DISABLE_OLE1DDE = 4,
  COINIT_SPEED_OVER_MEMORY = 8,
};

enum tagCLSCTX
{
  CLSCTX_INPROC_SERVER = 1,
  CLSCTX_INPROC_HANDLER = 2,
  CLSCTX_LOCAL_SERVER = 4,
  CLSCTX_INPROC_SERVER16 = 8,
  CLSCTX_REMOTE_SERVER = 16,
  CLSCTX_INPROC_HANDLER16 = 32,
  CLSCTX_RESERVED1 = 64,
  CLSCTX_RESERVED2 = 128,
  CLSCTX_RESERVED3 = 256,
  CLSCTX_RESERVED4 = 512,
  CLSCTX_NO_CODE_DOWNLOAD = 1024,
  CLSCTX_RESERVED5 = 2048,
  CLSCTX_NO_CUSTOM_MARSHAL = 4096,
  CLSCTX_ENABLE_CODE_DOWNLOAD = 8192,
  CLSCTX_NO_FAILURE_LOG = 16384,
  CLSCTX_DISABLE_AAA = 0xffff8000,
  CLSCTX_ENABLE_AAA = 0x10000,
  CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
  CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000,
  CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
  CLSCTX_ENABLE_CLOAKING = 0x100000,
  CLSCTX_PS_DLL = -2147483648,
};

struct XAnimFrameData
{
  /* 0x0000 */ void* frames[160];
  /* 0x0280 */ union __m128 fromVecs[160];
  /* 0x0c80 */ union __m128 toVecs[160];
  /* 0x1680 */ float keyFrameLerpFracs[160];
  /* 0x1900 */ BOOL calcParts[160];
}; /* size: 0x19a0 */

struct clientsPositionArchive_t
{
  /* 0x0000 */ int time;
  /* 0x0004 */ BOOL valid[18];
  /* 0x0016 */ unsigned char flags[18];
  /* 0x0028 */ union vec3_t positions[18];
  /* 0x0100 */ union vec3_t angles[18];
}; /* size: 0x01d8 */

struct WeaponCamo
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ struct GfxImage* solidBaseImage;
  /* 0x0008 */ struct GfxImage* patternBaseImage;
  /* 0x000c */ struct WeaponCamoSet* camoSets;
  /* 0x0010 */ unsigned int numCamoSets;
  /* 0x0014 */ struct WeaponCamoMaterialSet* camoMaterials;
  /* 0x0018 */ unsigned int numCamoMaterials;
}; /* size: 0x001c */

enum sd_decoder_state
{
  SD_DECODER_FREE = 0,
  SD_DECODER_ALLOCATED = 1,
  SD_DECODER_RUNNING = 2,
  SD_DECODER_FREED = 3,
};

struct ID3D11DeviceContext
{
}; /* size: 0x0004 */

enum sd_voice_param_state
{
  SD_VOICE_PARAM_FREE = 0,
  SD_VOICE_PARAM_ALLOCATED = 1,
};

enum entinfoType_t
{
  ENTINFO_NO_INFO = 0,
  ENTINFO_ALL_AI_ALL_LINES_ALL_INFO = 1,
  ENTINFO_SELECTED_AI_ALL_LINES_ALL_INFO = 2,
  ENTINFO_SELECTED_AI_ALL_INFO = 3,
  ENTINFO_ALL_AI_ONLY_GOAL_LINE_AND_RADIUS = 4,
  ENTINFO_SELECTED_AI_ONLY_GOAL_LINE_AND_RADIUS = 5,
  ENTINFO_LEVEL_6 = 6,
  ENTINFO_LEVEL_7 = 7,
  ENTINFO_LEVEL_8 = 8,
  ENTINFO_COUNT = 9,
};

class bdReferencable
{
  /* 0x0000 */ long Padding_145;
  /* 0x0004 */ volatile int m_refCount;
}; /* size: 0x0008 */

enum sd_mix_param_state
{
  SD_MIX_PARAM_FREE = 0,
  SD_MIX_PARAM_ALLOCATED = 1,
};

enum GfxProjectionTypes
{
  GFX_PROJECTION_2D = 0,
  GFX_PROJECTION_3D = 1,
};

enum sd_voice_state
{
  SD_VOICE_FREE = 0,
  SD_VOICE_ALLOCATED = 1,
  SD_VOICE_ACTIVE = 2,
  SD_VOICE_FREED = 3,
};

enum D3DX11_IMAGE_FILE_FORMAT
{
};

typedef enum _TAG_UNNAMED_252
{
  BLEND_WEIGHTS_PER_VERTEX = 3,
} TAG_UNNAMED_252, *PTAG_UNNAMED_252;

enum sd_mix_channel
{
  SD_MIX_CHANNEL_LF = 0,
  SD_MIX_CHANNEL_RF = 1,
  SD_MIX_CHANNEL_CF = 2,
  SD_MIX_CHANNEL_LFE = 3,
  SD_MIX_CHANNEL_LS = 4,
  SD_MIX_CHANNEL_RS = 5,
  SD_MIX_CHANNEL_LR = 6,
  SD_MIX_CHANNEL_RR = 7,
};

struct recentFrame
{
  /* 0x0000 */ BOOL lagged;
}; /* size: 0x0001 */

struct tagRECT
{
  /* 0x0000 */ long left;
  /* 0x0004 */ long top;
  /* 0x0008 */ long right;
  /* 0x000c */ long bottom;
}; /* size: 0x0010 */

enum SndOverlayType
{
  SND_OVERLAY_NONE = 0,
  SND_OVERLAY_3D = 1,
  SND_OVERLAY_STREAM = 2,
  SND_OVERLAY_2D = 3,
};

enum SndDataTableType
{
  SND_TABLE_ALIAS = 0,
  SND_TABLE_GROUP = 1,
  SND_TABLE_CURVE = 2,
  SND_TABLE_PAN = 3,
  SND_TABLE_DUCK_GROUP = 4,
  SND_TABLE_DUCK = 5,
  SND_TABLE_CONTEXT = 6,
  SND_TABLE_RADVERB = 7,
  SND_TABLE_MASTER = 8,
  SND_TABLE_VOICE_DUCK = 9,
  SND_TABLE_DUCK_PATCH_ATTEN = 10,
  SND_TABLE_DUCK_PATCH_LPF = 11,
  SND_TABLE_COUNT = 12,
};

enum SndLoadState
{
  SND_LOAD_UNUSED = 0,
  SND_LOAD_FINISHED = 1,
  SND_LOAD_PENDING = 2,
  SND_LOAD_READY = 3,
};

typedef enum _TAG_UNNAMED_253
{
  FX_ELEM_CLASS_SPRITE = 0,
  FX_ELEM_CLASS_NONSPRITE = 1,
  FX_ELEM_CLASS_CLOUD = 2,
  FX_ELEM_CLASS_COUNT = 3,
} TAG_UNNAMED_253, *PTAG_UNNAMED_253;

enum SndRandomizeType
{
  SND_RANDOMIZE_INSTANCE = 0,
  SND_RANDOMIZE_ENTITY_VOLUME = 1,
  SND_RANDOMIZE_ENTITY_PITCH = 2,
  SND_RANDOMIZE_ENTITY_VARIANT = 4,
};

enum fieldtype_t
{
  F_INT = 0,
  F_SHORT = 1,
  F_BYTE = 2,
  F_FLOAT = 3,
  F_LSTRING = 4,
  F_STRING = 5,
  F_VECTOR = 6,
  F_ENTITY = 7,
  F_ENTHANDLE = 8,
  F_ACTOR = 9,
  F_SENTIENT = 10,
  F_SENTIENTHANDLE = 11,
  F_CLIENT = 12,
  F_PATHNODE = 13,
  F_ACTORGROUP = 14,
  F_VECTORHACK = 15,
  F_OBJECT = 16,
  F_XMODEL_INDEX = 17,
  F_XMODEL = 18,
  F_BITFLAG = 19,
  F_FX = 20,
};

enum WICNamedWhitePoint
{
  WICWhitePointDefault = 1,
  WICWhitePointDaylight = 2,
  WICWhitePointCloudy = 4,
  WICWhitePointShade = 8,
  WICWhitePointTungsten = 16,
  WICWhitePointFluorescent = 32,
  WICWhitePointFlash = 64,
  WICWhitePointUnderwater = 128,
  WICWhitePointCustom = 256,
  WICWhitePointAutoWhiteBalance = 512,
  WICWhitePointAsShot = 1,
  WICNAMEDWHITEPOINT_FORCE_DWORD = 0x7fffffff,
};

enum FullscreenType
{
  FULLSCREEN_DISPLAY = 0,
  FULLSCREEN_MIXED = 1,
  FULLSCREEN_SCENE = 2,
};

typedef enum _TAG_UNNAMED_254
{
  ENTFIELD_ENTITY = 0,
  ENTFIELD_SENTIENT = 8192,
  ENTFIELD_ACTOR = 16384,
  ENTFIELD_CLIENT = 24576,
  ENTFIELD_VEHICLE = 0xffff8000,
  ENTFIELD_MASK = 0xffffe000,
} TAG_UNNAMED_254, *PTAG_UNNAMED_254;

struct SndLineEmitter
{
  /* 0x0000 */ unsigned int id;
  /* 0x0004 */ union vec3_t origin[2];
  /* 0x001c */ const struct SndAliasList* alias;
  /* 0x0020 */ float aliasDistanceSq;
}; /* size: 0x0024 */

struct cCurve::nodeData
{
  /* 0x0000 */ union vec3_t pos;
  /* 0x000c */ union vec3_t vel;
  /* 0x0018 */ float dist;
  /* 0x001c */ float totalDist;
  /* 0x0020 */ BOOL bReached;
  /* 0x0021 */ char __PADDING__[3];
}; /* size: 0x0024 */

enum cCurve::eCurveType
{
  CURVE_RNS = 0,
  CURVE_SNS = 1,
  CURVE_TNS = 2,
  CURVE_BSPLINE = 3,
};

class cCurve
{
  /* 0x0000 */ struct cCurve::nodeData mNodes[300];
  /* 0x2a30 */ int mNotifyEntNum;
  /* 0x2a34 */ int mCameraEntNum;
  /* 0x2a38 */ BOOL mNotifyLevel;
  /* 0x2a39 */ char Padding_146[3];
  /* 0x2a3c */ float mSpeed;
  /* 0x2a40 */ int mNumNodes;
  /* 0x2a44 */ BOOL mActive;
  /* 0x2a45 */ char Padding_147[3];
  /* 0x2a48 */ enum cCurve::eCurveType mCurveType;
  /* 0x2a4c */ float mDistance;
  /* 0x2a50 */ BOOL mDraw;
  /* 0x2a51 */ char Padding_148[3];
  /* 0x2a54 */ union vec4_t mDrawColor;
  /* 0x2a64 */ BOOL mUseColor;
  /* 0x2a65 */ BOOL mPaused;
  /* 0x2a66 */ char Padding_149[2];
  /* 0x2a68 */ float mCurPos;
  /* 0x2a6c */ float mCurServerPos;
  /* 0x2a70 */ int mLastNode;
  /* 0x2a74 */ int mIndex;
}; /* size: 0x2a78 */

enum ai_event_t
{
  AI_EV_BAD = 0,
  AI_EV_FIRST_POINT_EVENT = 1,
  AI_EV_FOOTSTEP = 2,
  AI_EV_FOOTSTEP_LITE = 3,
  AI_EV_NEW_ENEMY = 4,
  AI_EV_PAIN = 5,
  AI_EV_REACT = 6,
  AI_EV_DEATH = 7,
  AI_EV_EXPLOSION = 8,
  AI_EV_GRENADE_PING = 9,
  AI_EV_PROJECTILE_PING = 10,
  AI_EV_GUNSHOT = 11,
  AI_EV_SILENCED_SHOT = 12,
  AI_EV_LAST_POINT_EVENT = 13,
  AI_EV_FIRST_LINE_EVENT = 14,
  AI_EV_BULLET = 15,
  AI_EV_BLOCK_FRIENDLIES = 16,
  AI_EV_BULLET_REACT = 17,
  AI_EV_PROJECTILE_IMPACT = 18,
  AI_EV_LAST_LINE_EVENT = 19,
  AI_EV_FIRST_ARC_EVENT = 20,
  AI_EV_BADPLACE_ARC = 21,
  AI_EV_BADPLACE_LIMITED_ARC = 22,
  AI_EV_REALLY_BADPLACE_ARC = 23,
  AI_EV_LAST_ARC_EVENT = 24,
  AI_EV_FIRST_VOLUME_EVENT = 25,
  AI_EV_BADPLACE_VOLUME = 26,
  AI_EV_LAST_VOLUME_EVENT = 27,
  AI_EV_NUM_EVENTS = 28,
};

struct ReliableCommands
{
  /* 0x0000 */ int sequence;
  /* 0x0004 */ int acknowledge;
  /* 0x0008 */ char* commands[128];
  /* 0x0208 */ int commandBufferNext;
  /* 0x020c */ char commandBuffer[16384];
}; /* size: 0x420c */

struct netProfilePacket_t
{
  /* 0x0000 */ int iTime;
  /* 0x0004 */ int iSize;
  /* 0x0008 */ int bFragment;
}; /* size: 0x000c */

struct netProfileStream_t
{
  /* 0x0000 */ struct netProfilePacket_t packets[60];
  /* 0x02d0 */ int iCurrPacket;
  /* 0x02d4 */ int iBytesPerSecond;
  /* 0x02d8 */ int iLastBPSCalcTime;
  /* 0x02dc */ int iCountedPackets;
  /* 0x02e0 */ int iCountedFragments;
  /* 0x02e4 */ int iFragmentPercentage;
  /* 0x02e8 */ int iLargestPacket;
  /* 0x02ec */ int iSmallestPacket;
}; /* size: 0x02f0 */

struct netProfileInfo_t
{
  /* 0x0000 */ struct netProfileStream_t send;
  /* 0x02f0 */ struct netProfileStream_t recieve;
}; /* size: 0x05e0 */

struct netchan_t
{
  /* 0x0000 */ int outgoingSequence;
  /* 0x0004 */ enum netsrc_t sock;
  /* 0x0008 */ int dropped;
  /* 0x000c */ int incomingSequence;
  /* 0x0010 */ struct netadr_t remoteAddress;
  /* 0x0024 */ int qport;
  /* 0x0028 */ int fragmentSequence;
  /* 0x002c */ int fragmentLength;
  /* 0x0030 */ unsigned char* fragmentBuffer;
  /* 0x0034 */ int fragmentBufferSize;
  /* 0x0038 */ int unsentFragments;
  /* 0x003c */ int unsentOnLoan;
  /* 0x0040 */ int unsentFragmentStart;
  /* 0x0044 */ int unsentLength;
  /* 0x0048 */ unsigned char* unsentBuffer;
  /* 0x004c */ int unsentBufferSize;
  /* 0x0050 */ int reliable_fragments;
  /* 0x0054 */ unsigned char fragment_send_count[128];
  /* 0x00d4 */ unsigned int fragment_ack[4];
  /* 0x00e4 */ int lowest_send_count;
  /* 0x00e8 */ struct netProfileInfo_t prof;
}; /* size: 0x06c8 */

struct clientConnection_t
{
  /* 0x0000 */ int qport;
  /* 0x0004 */ enum ClientNum_t clientNum;
  /* 0x0008 */ int lastPacketSentTime;
  /* 0x000c */ int lastPacketTime;
  /* 0x0010 */ struct netadr_t serverAddress;
  /* 0x0024 */ int connectTime;
  /* 0x0028 */ int connectPacketCount;
  /* 0x002c */ char serverMessage[256];
  /* 0x012c */ int challenge;
  /* 0x0130 */ int checksumFeed;
  /* 0x0134 */ struct ReliableCommands reliableCommands;
  /* 0x4340 */ int serverMessageSequence;
  /* 0x4344 */ int serverCommandSequence;
  /* 0x4348 */ int lastExecutedServerCommand;
  /* 0x434c */ char serverCommands[1024][128];
  /* 0x2434c */ BOOL isServerRestarting;
  /* 0x2434d */ BOOL areTexturesLoaded;
  /* 0x2434e */ BOOL waitForMovie;
  /* 0x2434f */ BOOL hostCompromised;
  /* 0x24350 */ struct netchan_t netchan;
  /* 0x24a18 */ char netchanOutgoingBuffer[2048];
  /* 0x25218 */ char netchanIncomingBuffer[65536];
  /* 0x35218 */ struct netProfileInfo_t OOBProf;
  /* 0x357f8 */ __int64 statPacketsToSend;
  /* 0x35800 */ int statPacketSendTime[41];
  /* 0x358a4 */ long __PADDING__[1];
}; /* size: 0x358a8 */

typedef enum _TAG_UNNAMED_255
{
  PLF_SAFE_SHUFFLE_LINK = 1,
  PLF_DOOR_SHUFFLE_LINK = 2,
  PLF_SCRIPT_LINK = 4,
  PLF_DOUBLE_WIDE = 8,
  PLF_REDUNDANT = 16,
  PLF_QUADROTOR = 32,
} TAG_UNNAMED_255, *PTAG_UNNAMED_255;

enum RadiantCommandType
{
  RADIANT_COMMAND_SELECT = 0,
  RADIANT_COMMAND_DESELECT = 1,
  RADIANT_COMMAND_UPDATE_SELECTED = 2,
  RADIANT_COMMAND_UPDATE = 3,
  RADIANT_COMMAND_CREATE = 4,
  RADIANT_COMMAND_DELETE = 5,
  RADIANT_COMMAND_CAMERA = 6,
  RADIANT_COMMAND_CAMERA_POLL = 7,
};

enum ActionSlotIndex
{
  ACTIONSLOTINDEX_0 = 0,
  ACTIONSLOTINDEX_1 = 1,
  ACTIONSLOTINDEX_2 = 2,
  ACTIONSLOTINDEX_3 = 3,
};

enum GUIDType
{
  GT_UNKNOWN = 0,
  GT_ENTITY = 1,
  GT_PATHNODE = 2,
  GT_VEHICLENODE = 3,
  GT_NUM = 4,
};

class bdCounter
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

enum actor_think_result_t
{
  ACTOR_THINK_DONE = 0,
  ACTOR_THINK_REPEAT = 1,
  ACTOR_THINK_MOVE_TO_BODY_QUEUE = 2,
};

enum ThreatDebugStringCategory
{
  TDS_TOTAL_THREAT = 0,
  TDS_FLASHED = 1,
  TDS_SUPPRESSED = 2,
  TDS_THREATBIAS = 3,
  TDS_THREATBIAS_GROUP = 4,
  TDS_ATTACKER_COUNT = 5,
  TDS_CUR_ENEMY_BONUS = 6,
  TDS_AWARENESS = 7,
  TDS_DIST_THREAT = 8,
  TDS_SCARINESS_THREAT = 9,
  TDS_NO_COVER = 10,
  NUM_TDS = 11,
};

enum ai_teammove_t
{
  AI_TEAMMOVE_TRAVEL = 0,
  AI_TEAMMOVE_WAIT = 1,
  AI_TEAMMOVE_SLOW_DOWN = 2,
};

enum EVehicleRotorOrientation
{
  VEHROT_ORIENT_HORIZONTAL = 0,
  VEHROT_ORIENT_VERTICAL = 1,
};

struct GfxDrawSurfFields
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 objectId : 16; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 customIndex : 9; /* bit position: 16 */
    /* 0x0000 */ unsigned __int64 reflectionProbeIndex : 5; /* bit position: 25 */
    /* 0x0000 */ unsigned __int64 dlightMask : 2; /* bit position: 30 */
    /* 0x0000 */ unsigned __int64 materialSortedIndex : 12; /* bit position: 32 */
    /* 0x0000 */ unsigned __int64 primaryLightIndex : 8; /* bit position: 44 */
    /* 0x0000 */ unsigned __int64 surfType : 4; /* bit position: 52 */
    /* 0x0000 */ unsigned __int64 prepass : 2; /* bit position: 56 */
    /* 0x0000 */ unsigned __int64 primarySortKey : 6; /* bit position: 58 */
  }; /* bitfield */
}; /* size: 0x0008 */

union GfxDrawSurf
{
  union
  {
    /* 0x0000 */ struct GfxDrawSurfFields fields;
    /* 0x0000 */ unsigned __int64 packed;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct MaterialInfo
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int gameFlags;
  /* 0x0008 */ unsigned char pad;
  /* 0x0009 */ unsigned char sortKey;
  /* 0x000a */ unsigned char textureAtlasRowCount;
  /* 0x000b */ unsigned char textureAtlasColumnCount;
  /* 0x000c */ long Padding_150;
  /* 0x0010 */ union GfxDrawSurf drawSurf;
  /* 0x0018 */ unsigned int surfaceTypeBits;
  /* 0x001c */ unsigned int layeredSurfaceTypes;
  /* 0x0020 */ unsigned short hashIndex;
  /* 0x0022 */ char Padding_151[2];
  /* 0x0024 */ int surfaceFlags;
  /* 0x0028 */ int contents;
  /* 0x002c */ long __PADDING__[1];
}; /* size: 0x0030 */

struct Material
{
  /* 0x0000 */ struct MaterialInfo info;
  /* 0x0030 */ unsigned char stateBitsEntry[36];
  /* 0x0054 */ unsigned char textureCount;
  /* 0x0055 */ unsigned char constantCount;
  /* 0x0056 */ unsigned char stateBitsCount;
  /* 0x0057 */ unsigned char stateFlags;
  /* 0x0058 */ unsigned char cameraRegion;
  /* 0x0059 */ unsigned char probeMipBits;
  /* 0x005a */ char Padding_152[2];
  union
  {
    /* 0x005c */ struct MaterialTechniqueSet* localTechniqueSet;
    /* 0x005c */ struct MaterialTechniqueSet* techniqueSet;
  }; /* size: 0x0004 */
  /* 0x0060 */ struct MaterialTextureDef* textureTable;
  union
  {
    /* 0x0064 */ struct MaterialConstantDef* localConstantTable;
    /* 0x0064 */ struct MaterialConstantDef* constantTable;
  }; /* size: 0x0004 */
  /* 0x0068 */ struct GfxStateBits* stateBitsTable;
  /* 0x006c */ struct Material* thermalMaterial;
}; /* size: 0x0070 */

typedef enum _TAG_UNNAMED_256
{
  AISF_SPAWNER = 1,
  AISF_FORCESPAWN = 2,
  AISF_UNDELETABLE = 4,
  AISF_ENEMYINFO = 8,
  AIS_SCRIPT_FORCESPAWN = 16,
} TAG_UNNAMED_256, *PTAG_UNNAMED_256;

enum enumForceSpawn
{
  CHECK_SPAWN = 0,
  FORCE_SPAWN = 1,
};

typedef struct _FILETIME
{
  /* 0x0000 */ unsigned long dwLowDateTime;
  /* 0x0004 */ unsigned long dwHighDateTime;
} FILETIME, *PFILETIME; /* size: 0x0008 */

enum SlideMoveResult
{
  SLIDEMOVE_COMPLETE = 0,
  SLIDEMOVE_CLIPPED = 1,
  SLIDEMOVE_FAIL = 2,
};

enum std::io_errc::io_errc
{
  stream = 1,
};

typedef enum _TAG_UNNAMED_257
{
  RELATIVE_DIR_NONE = 0,
  RELATIVE_DIR_FRONT = 1,
  RELATIVE_DIR_LEFT = 2,
  RELATIVE_DIR_RIGHT = 3,
  RELATIVE_DIR_BACK = 4,
  NUM_RELATIVE_DIR = 5,
} TAG_UNNAMED_257, *PTAG_UNNAMED_257;

enum bdConnection::Status
{
  BD_NOT_CONNECTED = 0,
  BD_CONNECTING = 1,
  BD_CONNECTED = 2,
  BD_DISCONNECTING = 3,
  BD_DISCONNECTED = 4,
};

enum BotGoalPriority
{
  GOAL_PRIORITY_UNUSED = 0,
  GOAL_PRIORITY_LOW = 1,
  GOAL_PRIORITY_NORMAL = 2,
  GOAL_PRIORITY_HIGH = 3,
  GOAL_PRIORITY_URGENT = 4,
  GOAL_PRIORITY_MAX = 5,
};

typedef enum _EXCEPTION_DISPOSITION
{
  ExceptionContinueExecution = 0,
  ExceptionContinueSearch = 1,
  ExceptionNestedException = 2,
  ExceptionCollidedUnwind = 3,
} EXCEPTION_DISPOSITION, *PEXCEPTION_DISPOSITION;

enum BotStance
{
  BOT_STANCE_STAND = 0,
  BOT_STANCE_CROUCH = 1,
  BOT_STANCE_PRONE = 2,
};

typedef enum _TAG_UNNAMED_258
{
  ENT_HANDLER_NULL = 0,
  ENT_HANDLER_ACTOR_INIT = 1,
  ENT_HANDLER_ACTOR = 2,
  ENT_HANDLER_ACTOR_CORPSE = 3,
  ENT_HANDLER_TRIGGER_MULTIPLE = 4,
  ENT_HANDLER_TRIGGER_HURT = 5,
  ENT_HANDLER_TRIGGER_HURT_TOUCH = 6,
  ENT_HANDLER_TRIGGER_DAMAGE = 7,
  ENT_HANDLER_SCRIPT_MOVER = 8,
  ENT_HANDLER_SCRIPT_MODEL = 9,
  ENT_HANDLER_GRENADE = 10,
  ENT_HANDLER_TIMED_OBJECT = 11,
  ENT_HANDLER_ROCKET = 12,
  ENT_HANDLER_CLIENT = 13,
  ENT_HANDLER_CLIENT_SPECTATOR = 14,
  ENT_HANDLER_CLIENT_DEAD = 15,
  ENT_HANDLER_PLAYER_CLONE = 16,
  ENT_HANDLER_TURRET_INIT = 17,
  ENT_HANDLER_TURRET = 18,
  ENT_HANDLER_DROPPED_ITEM = 19,
  ENT_HANDLER_ITEM_INIT = 20,
  ENT_HANDLER_ITEM = 21,
  ENT_HANDLER_TRIGGER_USE = 22,
  ENT_HANDLER_PRIMARY_LIGHT = 23,
  ENT_HANDLER_PLAYER_BLOCK = 24,
  ENT_HANDLER_VEHICLE_INIT = 25,
  ENT_HANDLER_VEHICLE = 26,
  ENT_HANDLER_VEHICLE_FREE = 27,
  ENT_HANDLER_HELICOPTER = 28,
  ENT_HANDLER_IK_PLAYERCLIP_TERRAIN = 29,
  ENT_HANDLER_IK_DISABLE_TERRAIN_MAPPING = 30,
  ENT_HANDLER_SPAWNER = 31,
  ENT_HANDLER_ZBARRIER = 32,
  ENT_HANDLER_COUNT = 33,
} TAG_UNNAMED_258, *PTAG_UNNAMED_258;

typedef enum _TAG_UNNAMED_259
{
  BADPLACE_INVALID = 0,
  BADPLACE_ARC = 1,
  BADPLACE_BRUSH = 2,
  BADPLACE_REALLY_BAD = 3,
  BADPLACE_LIMITED_DEPTH = 4,
} TAG_UNNAMED_259, *PTAG_UNNAMED_259;

enum DBCloneMethod
{
  DB_CLONE_NORMAL = 0,
  DB_CLONE_FROM_DEFAULT = 1,
  DB_CLONE_SWAP = 2,
};

enum EntInfo_AITextMode
{
  AI_TEXT_ALL = 0,
  AI_TEXT_BRIEF = 1,
  AI_TEXT_COMBAT = 2,
  AI_TEXT_MOVEMENT = 3,
  AI_TEXT_STATE = 4,
  NUM_AI_TEXT_TYPE = 5,
};

enum INTRNCVT_STATUS
{
  INTRNCVT_OK = 0,
  INTRNCVT_OVERFLOW = 1,
  INTRNCVT_UNDERFLOW = 2,
};

enum ddlIntValueChanged_e
{
  DDL_INTVALUE_SAME = 0,
  DDL_INTVALUE_CHANGED = 1,
  DDL_INTVALUE_ERROR = -1,
};

enum bdSAckChunk::bdSAckFlags
{
  BD_SC_NO_FLAGS = 0,
};

typedef enum _TAG_UNNAMED_260
{
  OP_End = 0,
  OP_Return = 1,
  OP_GetUndefined = 2,
  OP_GetZero = 3,
  OP_GetByte = 4,
  OP_GetNegByte = 5,
  OP_GetUnsignedShort = 6,
  OP_GetNegUnsignedShort = 7,
  OP_GetInteger = 8,
  OP_GetFloat = 9,
  OP_GetString = 10,
  OP_GetIString = 11,
  OP_GetVector = 12,
  OP_GetLevelObject = 13,
  OP_GetAnimObject = 14,
  OP_GetSelf = 15,
  OP_GetLevel = 16,
  OP_GetGame = 17,
  OP_GetAnim = 18,
  OP_GetAnimation = 19,
  OP_GetGameRef = 20,
  OP_GetFunction = 21,
  OP_CreateLocalVariable = 22,
  OP_SafeCreateLocalVariables = 23,
  OP_RemoveLocalVariables = 24,
  OP_EvalLocalVariableCached = 25,
  OP_EvalArray = 26,
  OP_EvalLocalArrayRefCached = 27,
  OP_EvalArrayRef = 28,
  OP_ClearArray = 29,
  OP_EmptyArray = 30,
  OP_GetSelfObject = 31,
  OP_EvalFieldVariable = 32,
  OP_EvalFieldVariableRef = 33,
  OP_ClearFieldVariable = 34,
  OP_SafeSetVariableFieldCached = 35,
  OP_SafeSetWaittillVariableFieldCached = 36,
  OP_ClearParams = 37,
  OP_CheckClearParams = 38,
  OP_EvalLocalVariableRefCached = 39,
  OP_SetVariableField = 40,
  OP_CallBuiltin = 41,
  OP_CallBuiltinMethod = 42,
  OP_Wait = 43,
  OP_WaitTillFrameEnd = 44,
  OP_PreScriptCall = 45,
  OP_ScriptFunctionCall = 46,
  OP_ScriptFunctionCallPointer = 47,
  OP_ScriptMethodCall = 48,
  OP_ScriptMethodCallPointer = 49,
  OP_ScriptThreadCall = 50,
  OP_ScriptThreadCallPointer = 51,
  OP_ScriptMethodThreadCall = 52,
  OP_ScriptMethodThreadCallPointer = 53,
  OP_DecTop = 54,
  OP_CastFieldObject = 55,
  OP_CastBool = 56,
  OP_BoolNot = 57,
  OP_BoolComplement = 58,
  OP_JumpOnFalse = 59,
  OP_JumpOnTrue = 60,
  OP_JumpOnFalseExpr = 61,
  OP_JumpOnTrueExpr = 62,
  OP_Jump = 63,
  OP_JumpBack = 64,
  OP_Inc = 65,
  OP_Dec = 66,
  OP_Bit_Or = 67,
  OP_Bit_Xor = 68,
  OP_Bit_And = 69,
  OP_Equal = 70,
  OP_NotEqual = 71,
  OP_LessThan = 72,
  OP_GreaterThan = 73,
  OP_LessThanOrEqualTo = 74,
  OP_GreaterThanOrEqualTo = 75,
  OP_ShiftLeft = 76,
  OP_ShiftRight = 77,
  OP_Plus = 78,
  OP_Minus = 79,
  OP_Multiply = 80,
  OP_Divide = 81,
  OP_Modulus = 82,
  OP_SizeOf = 83,
  OP_WaitTillMatch = 84,
  OP_WaitTill = 85,
  OP_Notify = 86,
  OP_EndOn = 87,
  OP_VoidCodePos = 88,
  OP_Switch = 89,
  OP_EndSwitch = 90,
  OP_Vector = 91,
  OP_GetHash = 92,
  OP_RealWait = 93,
  OP_VectorConstant = 94,
  OP_IsDefined = 95,
  OP_VectorScale = 96,
  OP_AnglesToUp = 97,
  OP_AnglesToRight = 98,
  OP_AnglesToForward = 99,
  OP_AngleClamp180 = 100,
  OP_VectorToAngles = 101,
  OP_Abs = 102,
  OP_GetTime = 103,
  OP_GetDvar = 104,
  OP_GetDvarInt = 105,
  OP_GetDvarFloat = 106,
  OP_GetDvarVector = 107,
  OP_GetDvarColorRed = 108,
  OP_GetDvarColorGreen = 109,
  OP_GetDvarColorBlue = 110,
  OP_GetDvarColorAlpha = 111,
  OP_FirstArrayKey = 112,
  OP_NextArrayKey = 113,
  OP_ProfileStart = 114,
  OP_ProfileStop = 115,
  OP_SafeDecTop = 116,
  OP_Nop = 117,
  OP_Abort = 118,
  OP_Object = 119,
  OP_ThreadObject = 120,
  OP_EvalLocalVariable = 121,
  OP_EvalLocalVariableRef = 122,
  OP_DevblockBegin = 123,
  OP_DevblockEnd = 124,
  OP_Breakpoint = 125,
  OP_AutoBreakpoint = 126,
  OP_ErrorBreakpoint = 127,
  OP_WatchBreakpoint = 128,
  OP_NotifyBreakpoint = 129,
  OP_Count = 130,
} TAG_UNNAMED_260, *PTAG_UNNAMED_260;

enum dvarType_t
{
  DVAR_TYPE_INVALID = 0,
  DVAR_TYPE_BOOL = 1,
  DVAR_TYPE_FLOAT = 2,
  DVAR_TYPE_FLOAT_2 = 3,
  DVAR_TYPE_FLOAT_3 = 4,
  DVAR_TYPE_FLOAT_4 = 5,
  DVAR_TYPE_INT = 6,
  DVAR_TYPE_ENUM = 7,
  DVAR_TYPE_STRING = 8,
  DVAR_TYPE_COLOR = 9,
  DVAR_TYPE_INT64 = 10,
  DVAR_TYPE_LINEAR_COLOR_RGB = 11,
  DVAR_TYPE_COLOR_XYZ = 12,
  DVAR_TYPE_COUNT = 13,
};

typedef enum _TAG_UNNAMED_261
{
  STEP_CONTINUE = 0,
  STEP_OVER = 1,
  STEP_INTO = 2,
  STEP_OUT = 3,
  STEP_AUTO = 4,
} TAG_UNNAMED_261, *PTAG_UNNAMED_261;

enum eInfluencerScoreCurve
{
  INFLUENCER_SC_CONSTANT = 0,
  INFLUENCER_SC_LINEAR = 1,
  INFLUENCER_SC_STEEP = 2,
  INFLUENCER_SC_INVERSE_LINEAR = 3,
  INFLUENCER_SC_NEGATIVE_TO_POSITIVE = 4,
  MAX_INFLUENCER_SCORE_CURVE = 5,
};

enum FsListBehavior_e
{
  FS_LIST_PURE_ONLY = 0,
  FS_LIST_ALL = 1,
};

enum J_DCT_METHOD
{
  JDCT_ISLOW = 0,
  JDCT_IFAST = 1,
  JDCT_FLOAT = 2,
};

typedef enum _TAG_UNNAMED_262
{
  HASH_STAT_FREE = 0,
  HASH_STAT_MOVABLE = 0x10000,
  HASH_STAT_HEAD = 0x20000,
  HASH_STAT_MASK = 0x30000,
} TAG_UNNAMED_262, *PTAG_UNNAMED_262;

typedef enum _TAG_UNNAMED_263
{
  HASH_NEXT_MASK = 0xffffffff,
} TAG_UNNAMED_263, *PTAG_UNNAMED_263;

typedef enum _TAG_UNNAMED_264
{
  SAVE_OBJECT_DEFAULT = 0,
  SAVE_OBJECT_THREAD = 1,
  SAVE_OBJECT_NOTIFY_THREAD = 2,
  SAVE_OBJECT_TIME_THREAD = 3,
  SAVE_OBJECT_CHILD_THREAD = 4,
  SAVE_OBJECT_DEAD_ENTITY = 5,
} TAG_UNNAMED_264, *PTAG_UNNAMED_264;

typedef enum _TAG_UNNAMED_265
{
  DEBUG_MSG_VOID = 0,
  DEBUG_MSGIN_VERSION = 1,
  DEBUG_MSGIN_FILE_INFO_LIST = 2,
  DEBUG_MSGIN_FILE_INFO_DONE = 3,
  DEBUG_MSGIN_DEBUGGER_DISCONNECT = 4,
  DEBUG_MSGIN_STEP = 5,
  DEBUG_MSGIN_FORCE_BREAK = 6,
  DEBUG_MSGIN_SET_BREAKPOINT = 7,
  DEBUG_MSGIN_SET_WATCH_BREAKPOINT = 8,
  DEBUG_MSGIN_SET_NOTIFY_BREAKPOINT = 9,
  DEBUG_MSGIN_CLEAR_BREAKPOINT = 10,
  DEBUG_MSGIN_CLEAR_WATCH_BREAKPOINT = 11,
  DEBUG_MSGIN_CLEAR_NOTIFY_BREAKPOINT = 12,
  DEBUG_MSGIN_CLEAR_ALL_BREAKPOINT = 13,
  DEBUG_MSGIN_SET_BREAKPOINT_CONDITION = 14,
  DEBUG_MSGIN_RUN_TO_LINE = 15,
  DEBUG_MSGIN_ASM_STEP_INTO = 16,
  DEBUG_MSGIN_ASM_STEP_OVER = 17,
  DEBUG_MSGIN_SET_LINE = 18,
  DEBUG_MSGIN_WATCH_UPDATE = 19,
  DEBUG_MSGIN_WATCH_EXPAND = 20,
  DEBUG_MSGIN_WATCH_SETDATA = 21,
  DEBUG_MSGIN_PROFILE_START = 22,
  DEBUG_MSGIN_PROFILE_STOP = 23,
  DEBUG_MSGIN_DEADCODE = 24,
  DEBUG_MSGIN_THREADUSAGE = 25,
  DEBUG_MSGIN_SHELL_COMMAND = 26,
  DEBUG_MSGIN_EXEC = 27,
  DEBUG_MSGIN_UPDATECODE = 28,
  DEBUG_MSGIN_CHANGESCOPE = 29,
  DEBUG_MSGOUT_VERSION = 30,
  DEBUG_MSGOUT_FILE_INFO_LIST = 31,
  DEBUG_MSGOUT_FILE_INFO = 32,
  DEBUG_MSGOUT_CALLSTACK = 33,
  DEBUG_MSGOUT_UNABLETOSET_BREAKPOINT = 34,
  DEBUG_MSGOUT_HIT_BREAKPOINT = 35,
  DEBUG_MSGOUT_HIT_WATCH_BREAKPOINT = 36,
  DEBUG_MSGOUT_HIT_NOTIFY_BREAKPOINT = 37,
  DEBUG_MSGOUT_WATCH_REQUEST_UPDATES = 38,
  DEBUG_MSGOUT_WATCH_DATA = 39,
  DEBUG_MSGOUT_WATCH_CHILD_DATA = 40,
  DEBUG_MSGOUT_PROFILE_DATA = 41,
  DEBUG_MSGOUT_DEADCODE_DATA = 42,
  DEBUG_MSGOUT_PRINT_MESSAGE = 43,
  DEBUG_MSGOUT_ERROR_MESSAGE = 44,
  DEBUG_MSGOUT_SHELL_MESSAGE = 45,
  DEBUG_MSGOUT_PAUSEGAME = 46,
  DEBUG_MSGOUT_UNPAUSEGAME = 47,
  DEBUG_MSGOUT_SELF = 48,
  DEBUG_MSGOUT_LOCALS = 49,
  DEBUG_MSGOUT_HEARTBEAT = 50,
  DEBUG_MSGOUT_ABORT = 51,
  DEBUG_MSGOUT_THREADUSAGE = 52,
  DEBUG_MSGOUT_ENT_DATA = 53,
  DEBUG_MSG_COUNT = 54,
} TAG_UNNAMED_265, *PTAG_UNNAMED_265;

typedef enum _TAG_UNNAMED_266
{
  SCR_DEV_NO = 0,
  SCR_DEV_YES = 1,
  SCR_DEV_IGNORE = 2,
  SCR_DEV_EVALUATE = 3,
} TAG_UNNAMED_266, *PTAG_UNNAMED_266;

typedef enum _TAG_UNNAMED_267
{
  TALKFLAG_EVERYONE_HEARS_EVERYONE = 1,
  TALKFLAG_DEAD_CHAT_WITH_DEAD = 2,
  TALKFLAG_DEAD_CHAT_WITH_TEAM = 4,
  TALKFLAG_DEAD_HEAR_TEAM_LIVING = 8,
  TALKFLAG_DEAD_HEAR_ALL_LIVING = 16,
  TALKFLAG_DEAD_HEAR_KILLER = 32,
  TALKFLAG_KILLERS_HEAR_VICTIM = 64,
} TAG_UNNAMED_267, *PTAG_UNNAMED_267;

typedef enum _TAG_UNNAMED_268
{
  SCR_BREAKPOINT_NONE = 0,
  SCR_BREAKPOINT_DISABLED = 1,
  SCR_BREAKPOINT_WATCH = 2,
  SCR_BREAKPOINT_NOTIFY = 3,
  SCR_BREAKPOINT_NORMAL = 4,
  SCR_BREAKPOINT_AUTO = 5,
  SCR_BREAKPOINT_AUTO_IN = 6,
  SCR_BREAKPOINT_AUTO_OVER = 7,
} TAG_UNNAMED_268, *PTAG_UNNAMED_268;

enum GfxModelLightExtrapolation
{
  GFX_MODELLIGHT_EXTRAPOLATE = 0,
  GFX_MODELLIGHT_SHOW_MISSING = 1,
};

typedef enum _TAG_UNNAMED_269
{
  FUNC_SCOPE_LOCAL = 0,
  FUNC_SCOPE_FAR = 1,
} TAG_UNNAMED_269, *PTAG_UNNAMED_269;

enum J_DITHER_MODE
{
  JDITHER_NONE = 0,
  JDITHER_ORDERED = 1,
  JDITHER_FS = 2,
};

typedef enum _TAG_UNNAMED_270
{
  SCR_ABORT_NONE = 0,
  SCR_ABORT_CONTINUE = 1,
  SCR_ABORT_BREAK = 2,
  SCR_ABORT_RETURN = 3,
  SCR_ABORT_MAX = 3,
} TAG_UNNAMED_270, *PTAG_UNNAMED_270;

typedef enum _TAG_UNNAMED_271
{
  CALL_NONE = 0,
  CALL_BUILTIN = 1,
  CALL_THREAD = 2,
  CALL_FUNCTION = 3,
} TAG_UNNAMED_271, *PTAG_UNNAMED_271;

struct IDirectSoundCapture
{
}; /* size: 0x0004 */

struct FastCriticalSection
{
  /* 0x0000 */ volatile long readCount;
  /* 0x0004 */ volatile long writeCount;
}; /* size: 0x0008 */

enum ValueType
{
  VALT_NUMBER = 0,
  VALT_IDENTIFIER = 1,
  VALT_BAD = 2,
};

typedef enum _TAG_UNNAMED_272
{
  ANIMTREE_NAMES = 0,
  ANIMTREE_XANIM = 1,
} TAG_UNNAMED_272, *PTAG_UNNAMED_272;

enum milestoneTableColumns_t
{
  MILESTONE_COLUMN_INDEX = 0,
  MILESTONE_COLUMN_TIERID = 1,
  MILESTONE_COLUMN_TARGETVALUE = 2,
  MILESTONE_COLUMN_STATTYPE = 3,
  MILESTONE_COLUMN_STATNAME = 4,
  MILESTONE_COLUMN_STRING = 5,
  MILESTONE_COLUMN_XPEARNED = 6,
  MILESTONE_COLUMN_PREREQUISITE = 7,
  MILESTONE_COLUMN_EXCLUDE = 8,
  MILESTONE_COLUMN_UNLOCKITEM = 9,
  MILESTONE_COLUMN_CHALLENGESTATNAME = 10,
  MILESTONE_COLUMN_UNLOCKLVL = 11,
  MILESTONE_COLUMN_UNLOCKIMAGE = 12,
  MILESTONE_COLUMN_INCLUDE = 13,
  MILESTONE_COLUMN_UNLOCKPLVL = 14,
  MILESTONE_COLUMN_RESETONPRESTIGE = 15,
  MILESTONE_COLUMN_CATEGORY = 16,
  MILESTONE_COLUMN_ISMAXLEVEL = 17,
  MILESTONE_COLUMN_ISMASTERY = 18,
  MILESTONE_COLUMN_ISITEMUNLOCKED = 19,
  MILESTONE_COLUMN_ISEXPERT = 20,
  MILESTONE_COLUMN_SETGLOBALSTAT = 21,
  MILESTONE_COLUMN_XPGROUPMASK = 22,
};

typedef enum _TAG_UNNAMED_273
{
  ANIMTREE_PROPERTIES = 0,
  ANIMTREE_HAS_CHILDREN = 1,
  NUM_NON_COMPONENT_ANIMTREE_VALUES = 2,
  ANIMTREE_COMPONENT_TIME = 2,
  ANIMTREE_COMPONENT_BLEND = 3,
  NUM_ANIMTREE_VALUES = 4,
} TAG_UNNAMED_273, *PTAG_UNNAMED_273;

enum snd_flame_source_flags
{
  SND_FLAME_SOURCE_NONE = 0,
  SND_FLAME_SOURCE_TURN_ON = 1,
  SND_FLAME_SOURCE_TURN_OFF = 2,
  SND_FLAME_SOURCE_IS_FIRING = 4,
};

enum FLAME_TYPE
{
  FLAME_TYPE_STREAM = 0,
  FLAME_TYPE_CHUNK = 1,
  FLAME_TYPE_FIRE = 2,
  FLAME_TYPE_SMOKE = 3,
  FLAME_TYPE_DRIP = 4,
};

class bdCounterValue
{
  /* 0x0000 */ long Padding_153;
  /* 0x0004 */ unsigned int m_counterID;
  /* 0x0008 */ __int64 m_counterValue;
}; /* size: 0x0010 */

enum IKEntityStatusFunctions
{
  IKSTATUS_SPECTATING = 0,
  IKSTATUS_PRONE = 1,
  IKSTATUS_CROUCHING = 2,
  IKSTATUS_FIRING = 3,
  IKSTATUS_MOUNTED_TURRET = 4,
  IKSTATUS_APPLY_TERRAIN_MAPPING = 5,
  IKSTATUS_BYPASS_TERRAIN_MAPPING = 6,
  IKSTATUS_APPLY_LEFT_HAND_IK = 7,
  IKSTATUS_APPLY_RIGHT_HAND_IK = 8,
  IKSTATUS_MOVING = 9,
  IKSTATUS_ONGROUND = 10,
  IKSTATUS_COUNT = 11,
};

enum IKLayerNames
{
  IKLAYER_CROUCH_ACTIVE = 0,
  IKLAYER_PRONE_ACTIVE = 1,
  IKLAYER_PRONE_SLOW_FADE_ACTIVE = 2,
  IKLAYER_NOT_MOVING = 3,
  IKLAYER_NOT_MOVING_MED = 4,
  IKLAYER_NOT_MOVING_FAST = 5,
  IKLAYER_MINIGUN_ACTIVE = 6,
  IKLAYER_SHOTGUN_ACTIVE = 7,
  IKLAYER_AI_AIMING_ACTIVE = 8,
  IKLAYER_FIRST_REAL_LAYER = 9,
  IKLAYER_PELVIS_TEST = 9,
  IKLAYER_TERRAIN_MAPPING = 10,
  IKLAYER_HAND_TEST = 11,
  IKLAYER_LEFT_HAND_ON_GUN = 12,
  IKLAYER_RIGHT_HAND_ON_GUN = 13,
  IKLAYER_PLAYER_PITCH = 14,
  IKLAYER_VEHICLE_GUNNER_OFFSET = 15,
  IKLAYER_TURRET_FIRING = 16,
  IKLAYER_TURRET_OFFSET = 17,
  IKLAYER_PLAYER_CONTROLLERS = 18,
  IKLAYER_LOOK_AT_ENTITY = 19,
  IKLAYER_LOOK_AT_ENTITY_BODY_FADE = 20,
  IKLAYER_PREVENT_HEAD_CLIP = 21,
  IKLAYER_PONYTAIL = 22,
  IKLAYER_AI_LEAN = 23,
  IKLAYER_AI_LEFT_HAND_ON_GUN = 24,
  IKLAYER_COUNT = 25,
};

enum CompositeType
{
  COMPOSITE_NONE = 0,
  COMPOSITE_EMBLEM = 1,
};

enum IKDvarNames
{
  IK_DVAR_ENABLE = 0,
  IK_DVAR_DEBUG = 1,
  IK_DVAR_PELVIS_TEST = 2,
  IK_DVAR_FOOT_TEST = 3,
  IK_DVAR_HAND_TEST = 4,
  IK_DVAR_LEFT_HAND_LERP_TEST = 5,
  IK_DVAR_RIGHT_HAND_LERP_TEST = 6,
  IK_DVAR_ENABLE_PLAYER_HAND = 7,
  IK_DVAR_ENABLE_PLAYER_TERRAIN = 8,
  IK_DVAR_ENABLE_AI_HAND = 9,
  IK_DVAR_ENABLE_AI_TERRAIN = 10,
  IK_DVAR_HAND_TUNING = 11,
  IK_DVAR_HAND_OFFSET_VEC = 12,
  IK_DVAR_HAND_ROTATION_VEC = 13,
  IK_DVAR_HAND_GET_DATA = 14,
  IK_DVAR_PARANOID_MATRIX_CHECKS = 15,
  IK_DVAR_PITCH_LIMIT_THRESH = 16,
  IK_DVAR_PITCH_LIMIT_MAX = 17,
  IK_DVAR_ROLL_LIMIT_THRESH = 18,
  IK_DVAR_ROLL_LIMIT_MAX = 19,
  IK_DVAR_YAW_LIMIT_THRESH = 20,
  IK_DVAR_YAW_LIMIT_MAX = 21,
  IK_DVAR_LOOKATENTITY_HEAD_SCALE = 22,
  IK_DVAR_LOOKATENTITY_NOTORSO = 23,
  IK_DVAR_LOOKATENTITY_TRACKING_RATE = 24,
  IK_DVAR_LOOKATENTITY_EYES_SCALE = 25,
  IK_DVAR_LOOKATPOS_HEAD_SCALE = 26,
  IK_DVAR_LOOKATPOS_NOTORSO = 27,
  IK_DVAR_LOOKATPOS_TRACKING_RATE = 28,
  IK_DVAR_LOOKATPOS_EYES_SCALE = 29,
  IK_DVAR_AI_AIM_TRACKING_RATE = 30,
  IK_DVAR_AI_POOL_SIZE = 31,
  IK_DVAR_AI_RANGE_MAX = 32,
  IK_DVAR_COUNT = 33,
};

enum IKFootNames
{
  IKFOOT_LEFT = 0,
  IKFOOT_RIGHT = 1,
  IKFOOT_COUNT = 2,
};

enum IKJoints
{
  IKJOINT_LEFT_ARM = 0,
  IKJOINT_RIGHT_ARM = 1,
  IKJOINT_LEFT_LEG = 2,
  IKJOINT_RIGHT_LEG = 3,
  IKJOINT_COUNT = 4,
};

struct std::pair<RagdollSortStruct *,RagdollSortStruct *>
{
}; /* size: 0x0008 */

enum IKWeaponOffsetType
{
  IKWEAPOFS_DEFAULT = 0,
  IKWEAPOFS_PISTOL = 1,
  IKWEAPOFS_SHOULDER = 2,
  IKWEAPOFS_MINIGUN = 3,
  IKWEAPOFS_GRENADE = 4,
  IKWEAPOFS_COUNT = 5,
};

enum D2D1_OPACITY_MASK_CONTENT
{
};

enum IKWeaponSpecialNames
{
  IKWEAPSPECIAL_RIOTSHIELD = 0,
  IKWEAPSPECIAL_NONE = 1,
};

enum LbColType
{
  LBCOL_TYPE_NUMBER = 0,
  LBCOL_TYPE_TIME = 1,
  LBCOL_TYPE_LEVELXP = 2,
  LBCOL_TYPE_PRESTIGE = 3,
  LBCOL_TYPE_BIGNUMBER = 4,
  LBCOL_TYPE_PERCENT = 5,
  LBCOL_TYPE_TIME_FULL = 6,
  LBCOL_TYPE_COUNT = 7,
};

enum IKWeaponClass
{
  IKWEAPCLASS_DEFAULT = 0,
  IKWEAPCLASS_SHOTGUN = 1,
  IKWEAPCLASS_COUNT = 2,
};

class phys_free_list<PhysObjUserData>::iterator
{
  /* 0x0000 */ class phys_free_list<PhysObjUserData>::T_internal_base* m_ptr;
}; /* size: 0x0004 */

struct VehicleTags
{
  /* 0x0000 */ int player;
  /* 0x0004 */ int popout;
  /* 0x0008 */ int body;
  /* 0x000c */ int turret;
  /* 0x0010 */ int turret_base;
  /* 0x0014 */ int barrel;
  /* 0x0018 */ int flash[4];
  /* 0x0028 */ struct VehicleGunnerTags gunnerTags[4];
  /* 0x0068 */ int wheel[6];
  /* 0x0080 */ int seats[11];
  /* 0x00ac */ int entryPoints[5];
}; /* size: 0x00c0 */

typedef enum _TAG_UNNAMED_274
{
  DOBJ_IS_SERVER = 1,
  DOBJ_IS_LOCAL_PLAYER = 2,
  DOBJ_IS_RECORDED = 4,
  DOBJ_IS_IK_ACTIVE = 8,
  DOBJ_IS_IK_LEFT_HAND_GRIP_ACTIVE = 16,
  DOBJ_IS_PLAYER_SHADOW = 32,
  DOBJ_IS_IK_BYPASS = 64,
  DOBJ_MAX_FLAGS = 128,
} TAG_UNNAMED_274, *PTAG_UNNAMED_274;

enum IKMiscBoneNames
{
  IKMISC_WEAPON_LEFT_HAND_IK = 0,
  IKMISC_WEAPON_RIGHT_HAND_IK = 1,
  IKMISC_TAG_HEAD = 2,
  IKMISC_COUNT = 3,
};

typedef enum _D3DTEXTUREFILTERTYPE
{
  D3DTEXF_NONE = 0,
  D3DTEXF_POINT = 1,
  D3DTEXF_LINEAR = 2,
  D3DTEXF_ANISOTROPIC = 3,
  D3DTEXF_PYRAMIDALQUAD = 6,
  D3DTEXF_GAUSSIANQUAD = 7,
  D3DTEXF_CONVOLUTIONMONO = 8,
  D3DTEXF_FORCE_DWORD = 0x7fffffff,
} D3DTEXTUREFILTERTYPE, *PD3DTEXTUREFILTERTYPE;

enum TracerDrawFlags
{
  TRACER_DRAW_FLAG_NONE = 0,
  TRACER_DRAW_FLAG_THERMAL = 1,
};

typedef enum _TP_CALLBACK_PRIORITY
{
  TP_CALLBACK_PRIORITY_HIGH = 0,
  TP_CALLBACK_PRIORITY_NORMAL = 1,
  TP_CALLBACK_PRIORITY_LOW = 2,
  TP_CALLBACK_PRIORITY_INVALID = 3,
} TP_CALLBACK_PRIORITY, *PTP_CALLBACK_PRIORITY;

enum leType_t
{
  LE_MOVING_TRACER_RED = 0,
  LE_MOVING_TRACER_GREEN = 1,
  LE_MOVING_TRACER = 2,
};

typedef enum _TAG_UNNAMED_275
{
  TINFL_MAX_HUFF_TABLES = 3,
  TINFL_MAX_HUFF_SYMBOLS_0 = 288,
  TINFL_MAX_HUFF_SYMBOLS_1 = 32,
  TINFL_MAX_HUFF_SYMBOLS_2 = 19,
  TINFL_FAST_LOOKUP_BITS = 10,
  TINFL_FAST_LOOKUP_SIZE = 1024,
} TAG_UNNAMED_275, *PTAG_UNNAMED_275;

struct ID3D11GeometryShader
{
}; /* size: 0x0004 */

enum JointType
{
  RAGDOLL_JOINT_NONE = 0,
  RAGDOLL_JOINT_HINGE = 1,
  RAGDOLL_JOINT_SWIVEL = 2,
};

class bdNATTypeDiscoveryPacket
{
  /* 0x0000 */ unsigned char m_type;
  /* 0x0001 */ char Padding_154;
  /* 0x0002 */ unsigned short m_protocolVersion;
  /* 0x0004 */ enum bdNATTypeDiscoveryPacket::bdNATTypeDiscoveryPacketRequest m_request;
}; /* size: 0x0008 */

typedef enum _TAG_UNNAMED_276
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_276, *PTAG_UNNAMED_276;

enum Phys_ObjFlags
{
  PHYS_OBJ_FLAG_ENABLE_EFFECTS = 1,
  PHYS_OBJ_FLAG_BUOYANT_IN_MITTON_WATER = 2,
  PHYS_OBJ_FLAG_FLOAT_LONGER = 4,
  PHYS_OBJ_DISABLE_DEPTH_BUOYANCY_ADJUSTMENTS = 8,
  PHYS_OBJ_FLAG_FORCE_BUOYANCY = 16,
  PHYS_OBJ_FLAG_RAGDOLL_BONE = 32,
};

struct ddlBufferHeader_t
{
  /* 0x0000 */ unsigned int checksum;
  /* 0x0004 */ int version;
  /* 0x0008 */ unsigned char flags;
  /* 0x0009 */ char Padding_155;
  /* 0x000a */ unsigned short codeVersion;
  /* 0x000c */ unsigned short magicMarker;
  /* 0x000e */ char reservedBuffer[31];
  /* 0x002d */ char __PADDING__[3];
}; /* size: 0x0030 */

enum PhysicsGeomType
{
  PHYS_GEOM_NONE = 0,
  PHYS_GEOM_BOX = 1,
  PHYS_GEOM_BRUSH = 2,
  PHYS_GEOM_CYLINDER = 3,
  PHYS_GEOM_CYLINDER_LARGE = 4,
  PHYS_GEOM_CAPSULE = 5,
  PHYS_GEOM_POINT = 6,
  PHYS_GEOM_COUNT = 7,
};

typedef enum _TAG_UNNAMED_277
{
  TL_MEMALLOC_NGL = 0x1000000,
  TL_MEMALLOC_NAL = 0x2000000,
  TL_MEMALLOC_AEPS = 0x3000000,
  TL_MEMALLOC_NVL = 0x4000000,
  TL_MEMALLOC_PHYSICS = 0x5000000,
  TL_MEMALLOC_LIBMASK = -16777216,
  TL_MEMALLOC_TEMP = 1,
  TL_MEMALLOC_CANFAIL = 2,
  TL_MEMALLOC_PHYSICAL = 0x10000,
  TL_MEMALLOC_WRITECOMBINE = 0x20000,
  TL_MEMALLOC_FIFO = 0x80000,
  TL_MEMALLOC_RSXMAIN = 0,
  TL_MEMALLOC_RSXLOCAL = 0,
  TL_MEMALLOC_MEM1 = 0,
  TL_MEMALLOC_MEM2 = 0,
} TAG_UNNAMED_277, *PTAG_UNNAMED_277;

typedef enum _TAG_UNNAMED_278
{
  GFX_PRIM_TRIANGLES = 4,
  GFX_PRIM_QUADS = -1,
} TAG_UNNAMED_278, *PTAG_UNNAMED_278;

typedef enum _TAG_UNNAMED_279
{
  MTL_PREPASS_STANDARD = 0,
  MTL_PREPASS_NONSTANDARD = 1,
  MTL_PREPASS_NONE = 2,
  MTL_PREPASS_ALPHA_NO_OCCLUSION = 3,
  MTL_PREPASS_TYPECOUNT = 4,
} TAG_UNNAMED_279, *PTAG_UNNAMED_279;

enum TessPrimType
{
  TESS_TRIANGLES = 4,
  TESS_QUADS = -1,
  TESS_INLINE_TRIANGLES = 4,
  TESS_INLINE_QUADS = -1,
};

enum mz_zip_mode
{
  MZ_ZIP_MODE_INVALID = 0,
  MZ_ZIP_MODE_READING = 1,
  MZ_ZIP_MODE_WRITING = 2,
  MZ_ZIP_MODE_WRITING_HAS_BEEN_FINALIZED = 3,
};

typedef enum _TAG_UNNAMED_280
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_280, *PTAG_UNNAMED_280;

typedef enum _TAG_UNNAMED_281
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_281, *PTAG_UNNAMED_281;

class phys_static_array<phys_vec3 *,128>::iterator
{
  /* 0x0000 */ class phys_vec3** m_ptr;
}; /* size: 0x0004 */

typedef enum _TAG_UNNAMED_282
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_282, *PTAG_UNNAMED_282;

typedef enum _TAG_UNNAMED_283
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_283, *PTAG_UNNAMED_283;

enum GfxDepthHackDrawMode
{
  GFX_DEPTH_HACK_IGNORE_STENCIL = 0,
  GFX_DEPTH_HACK_FILL_STENCIL = 1,
  GFX_DEPTH_HACK_TEST_STENCIL = 2,
};

typedef enum _TAG_UNNAMED_284
{
  MAX_INPUT_VERTICES = 6144,
} TAG_UNNAMED_284, *PTAG_UNNAMED_284;

typedef enum _TAG_UNNAMED_285
{
  R_GLOSS_OVERRIDE_0 = 0,
  R_GLOSS_OVERRIDE_NONE = 1,
  R_GLOSS_OVERRIDE_255 = 2,
  R_GLOSS_OVERRIDE_204 = 3,
  R_GLOSS_OVERRIDE_153 = 4,
  R_GLOSS_OVERRIDE_102 = 5,
  R_GLOSS_OVERRIDE_51 = 6,
  R_GLOSS_OVERRIDE_COUNT = 7,
} TAG_UNNAMED_285, *PTAG_UNNAMED_285;

typedef enum _TAG_UNNAMED_286
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_286, *PTAG_UNNAMED_286;

enum tdefl_flush
{
  TDEFL_NO_FLUSH = 0,
  TDEFL_SYNC_FLUSH = 2,
  TDEFL_FULL_FLUSH = 3,
  TDEFL_FINISH = 4,
};

typedef enum _TAG_UNNAMED_287
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_287, *PTAG_UNNAMED_287;

typedef enum _TAG_UNNAMED_288
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_288, *PTAG_UNNAMED_288;

enum pulse_sum_angular::flags_e
{
  APPLY_MIN_FACTOR = 1,
};

enum physics_system::physics_system_flags_e
{
  FLAG_IN_COLLISION_CALLBACK = 1,
};

typedef enum _TAG_UNNAMED_289
{
  R_ALPHA_OVERRIDE_NONE = 0,
  R_ALPHA_OVERRIDE_255 = 1,
  R_ALPHA_OVERRIDE_192 = 2,
  R_ALPHA_OVERRIDE_128 = 3,
  R_ALPHA_OVERRIDE_COUNT = 4,
} TAG_UNNAMED_289, *PTAG_UNNAMED_289;

typedef enum _TAG_UNNAMED_290
{
  MAX_GEOMS = 50,
} TAG_UNNAMED_290, *PTAG_UNNAMED_290;

enum std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Redbl
{
  _Red = 0,
  _Black = 1,
};

enum pulse_sum_normal::flags_e
{
  PULSE_LIMIT_PARENT_RATIO = 1,
  PULSE_LIMIT_REACHED = 2,
  PULSE_CHAIN_LIMIT_REACHED = 4,
  APPLY_MIN_FACTOR = 8,
};

typedef enum _TAG_UNNAMED_291
{
  LOBBYSTAT_KILLS = 0,
  LOBBYSTAT_DIVIDER = 1,
  LOBBYSTAT_DEATHS = 2,
  LOBBYSTAT_COUNT = 3,
} TAG_UNNAMED_291, *PTAG_UNNAMED_291;

struct BodyState
{
  /* 0x0000 */ union vec3_t position;
  /* 0x000c */ union vec3_t rotation[3];
  /* 0x0030 */ union vec3_t velocity;
  /* 0x003c */ union vec3_t angVelocity;
  /* 0x0048 */ union vec3_t centerOfMassOffset;
  /* 0x0054 */ union vec3_t buoyancyBoxMin;
  /* 0x0060 */ union vec3_t buoyancyBoxMax;
  /* 0x006c */ float mass;
  /* 0x0070 */ float friction;
  /* 0x0074 */ float bounce;
  /* 0x0078 */ int timeLastAsleep;
  /* 0x007c */ int id;
  /* 0x0080 */ int buoyancy;
  /* 0x0084 */ int underwater;
  /* 0x0088 */ int owner;
  /* 0x008c */ enum PhysicsOwnerType owner_type;
}; /* size: 0x0090 */

typedef enum _TAG_UNNAMED_292
{
  PTR_LIST_SIZE = 256,
} TAG_UNNAMED_292, *PTAG_UNNAMED_292;

enum error_types
{
  logl_zero = 0,
  logl_negative = 1,
  log_zero = 2,
  log_negative = 3,
  logf_zero = 4,
  logf_negative = 5,
  log10l_zero = 6,
  log10l_negative = 7,
  log10_zero = 8,
  log10_negative = 9,
  log10f_zero = 10,
  log10f_negative = 11,
  expl_overflow = 12,
  expl_underflow = 13,
  exp_overflow = 14,
  exp_underflow = 15,
  expf_overflow = 16,
  expf_underflow = 17,
  powl_overflow = 18,
  powl_underflow = 19,
  powl_zero_to_zero = 20,
  powl_zero_to_negative = 21,
  powl_neg_to_non_integer = 22,
  powl_nan_to_zero = 23,
  pow_overflow = 24,
  pow_underflow = 25,
  pow_zero_to_zero = 26,
  pow_zero_to_negative = 27,
  pow_neg_to_non_integer = 28,
  pow_nan_to_zero = 29,
  powf_overflow = 30,
  powf_underflow = 31,
  powf_zero_to_zero = 32,
  powf_zero_to_negative = 33,
  powf_neg_to_non_integer = 34,
  powf_nan_to_zero = 35,
  atan2l_zero = 36,
  atan2_zero = 37,
  atan2f_zero = 38,
  expm1l_overflow = 39,
  expm1l_underflow = 40,
  expm1_overflow = 41,
  expm1_underflow = 42,
  expm1f_overflow = 43,
  expm1f_underflow = 44,
  hypotl_overflow = 45,
  hypot_overflow = 46,
  hypotf_overflow = 47,
  sqrtl_negative = 48,
  sqrt_negative = 49,
  sqrtf_negative = 50,
  scalbl_overflow = 51,
  scalbl_underflow = 52,
  scalb_overflow = 53,
  scalb_underflow = 54,
  scalbf_overflow = 55,
  scalbf_underflow = 56,
  acosl_gt_one = 57,
  acos_gt_one = 58,
  acosf_gt_one = 59,
  asinl_gt_one = 60,
  asin_gt_one = 61,
  asinf_gt_one = 62,
  coshl_overflow = 63,
  cosh_overflow = 64,
  coshf_overflow = 65,
  y0l_zero = 66,
  y0l_negative = 67,
  y0l_gt_loss = 68,
  y0_zero = 69,
  y0_negative = 70,
  y0_gt_loss = 71,
  y0f_zero = 72,
  y0f_negative = 73,
  y0f_gt_loss = 74,
  y1l_zero = 75,
  y1l_negative = 76,
  y1l_gt_loss = 77,
  y1_zero = 78,
  y1_negative = 79,
  y1_gt_loss = 80,
  y1f_zero = 81,
  y1f_negative = 82,
  y1f_gt_loss = 83,
  ynl_zero = 84,
  ynl_negative = 85,
  ynl_gt_loss = 86,
  yn_zero = 87,
  yn_negative = 88,
  yn_gt_loss = 89,
  ynf_zero = 90,
  ynf_negative = 91,
  ynf_gt_loss = 92,
  j0l_gt_loss = 93,
  j0_gt_loss = 94,
  j0f_gt_loss = 95,
  j1l_gt_loss = 96,
  j1_gt_loss = 97,
  j1f_gt_loss = 98,
  jnl_gt_loss = 99,
  jn_gt_loss = 100,
  jnf_gt_loss = 101,
  lgammal_overflow = 102,
  lgammal_negative = 103,
  lgammal_reserve = 104,
  lgamma_overflow = 105,
  lgamma_negative = 106,
  lgamma_reserve = 107,
  lgammaf_overflow = 108,
  lgammaf_negative = 109,
  lgammaf_reserve = 110,
  gammal_overflow = 111,
  gammal_negative = 112,
  gammal_reserve = 113,
  gamma_overflow = 114,
  gamma_negative = 115,
  gamma_reserve = 116,
  gammaf_overflow = 117,
  gammaf_negative = 118,
  gammaf_reserve = 119,
  fmodl_by_zero = 120,
  fmod_by_zero = 121,
  fmodf_by_zero = 122,
  remainderl_by_zero = 123,
  remainder_by_zero = 124,
  remainderf_by_zero = 125,
  sinhl_overflow = 126,
  sinh_overflow = 127,
  sinhf_overflow = 128,
  atanhl_gt_one = 129,
  atanhl_eq_one = 130,
  atanh_gt_one = 131,
  atanh_eq_one = 132,
  atanhf_gt_one = 133,
  atanhf_eq_one = 134,
  acoshl_lt_one = 135,
  acosh_lt_one = 136,
  acoshf_lt_one = 137,
  log1pl_zero = 138,
  log1pl_negative = 139,
  log1p_zero = 140,
  log1p_negative = 141,
  log1pf_zero = 142,
  log1pf_negative = 143,
  ldexpl_overflow = 144,
  ldexpl_underflow = 145,
  ldexp_overflow = 146,
  ldexp_underflow = 147,
  ldexpf_overflow = 148,
  ldexpf_underflow = 149,
  logbl_zero = 150,
  logb_zero = 151,
  logbf_zero = 152,
  nextafterl_overflow = 153,
  nextafter_overflow = 154,
  nextafterf_overflow = 155,
  ilogbl_zero = 156,
  ilogb_zero = 157,
  ilogbf_zero = 158,
  exp2l_overflow = 159,
  exp2l_underflow = 160,
  exp2_overflow = 161,
  exp2_underflow = 162,
  exp2f_overflow = 163,
  exp2f_underflow = 164,
  exp10l_overflow = 165,
  exp10_overflow = 166,
  exp10f_overflow = 167,
  log2l_zero = 168,
  log2l_negative = 169,
  log2_zero = 170,
  log2_negative = 171,
  log2f_zero = 172,
  log2f_negative = 173,
  log_nan = 1000,
  log10_nan = 1001,
  exp_nan = 1002,
  atan_nan = 1003,
  ceil_nan = 1004,
  floor_nan = 1005,
  pow_nan = 1006,
  modf_nan = 1007,
  acos_nan = 1008,
  asin_nan = 1009,
  sin_naninf = 1010,
  cos_naninf = 1011,
  tan_naninf = 1012,
};

typedef struct _PMD
{
  /* 0x0000 */ int mdisp;
  /* 0x0004 */ int pdisp;
  /* 0x0008 */ int vdisp;
} PMD, *PPMD; /* size: 0x000c */

typedef struct _s__RTTIBaseClassDescriptor2
{
  /* 0x0000 */ struct _TypeDescriptor* pTypeDescriptor;
  /* 0x0004 */ unsigned long numContainedBases;
  /* 0x0008 */ struct _PMD where;
  /* 0x0014 */ unsigned long attributes;
  /* 0x0018 */ const struct _s__RTTIClassHierarchyDescriptor* pClassDescriptor;
} s__RTTIBaseClassDescriptor2, *Ps__RTTIBaseClassDescriptor2; /* size: 0x001c */

enum surface_types_e
{
  SURFACE_TYPE_PROP = 32,
  SURFACE_TYPE_RAGDOLL = 33,
  SURFACE_TYPE_TERRAIN = 34,
};

enum bdFacebookFieldCode
{
  BD_FACEBOOK_NONE = 0,
  BD_FACEBOOK_USERNAME = 2,
  BD_FACEBOOK_LASTNAME = 4,
  BD_FACEBOOK_FIRSTNAME = 8,
  BD_FACEBOOK_ABOUTME = 16,
  BD_FACEBOOK_WEBSITE = 32,
  BD_FACEBOOK_CITY = 64,
  BD_FACEBOOK_STATE = 128,
  BD_FACEBOOK_COUNTRY = 256,
  BD_FACEBOOK_EMAIL = 512,
  BD_FACEBOOK_LOCATION = 1024,
  BD_FACEBOOK_MAX_FIELD_CODE = 1025,
};

enum Phys_SurfaceType
{
  EFFECT_SURF_TYPE_HARD = 0,
  EFFECT_SURF_TYPE_SOFT = 1,
  EFFECT_SURF_TYPE_METAL = 2,
  EFFECT_SURF_TYPE_GLASS = 3,
  EFFECT_SURF_TYPE_WATER = 4,
  EFFECT_SURF_TYPE_WOOD = 5,
  EFFECT_SURF_TYPE_FOLIAGE = 6,
  EFFECT_SURF_TYPE_FLESH = 7,
  EFFECT_SURF_TYPE_COUNT = 8,
};

enum FLAC__StreamDecoderLengthStatus
{
  FLAC__STREAM_DECODER_LENGTH_STATUS_OK = 0,
  FLAC__STREAM_DECODER_LENGTH_STATUS_ERROR = 1,
  FLAC__STREAM_DECODER_LENGTH_STATUS_UNSUPPORTED = 2,
};

enum Wheel
{
  WHEEL_FL = 0,
  WHEEL_FR = 1,
  WHEEL_BL = 2,
  WHEEL_BR = 3,
  WHEEL_ML = 4,
  WHEEL_MR = 5,
};

enum PartyMemberAddResult
{
  MEMBER_ADD_SUCCESS = 0,
  MEMBER_ADD_FAILED = 1,
  MEMBER_ADD_FAILED_OCCUPIED = 2,
  MEMBER_ADD_FAILED_CHALLENGE = 3,
  MEMBER_ADD_FAILED_INSUFFICIENT_FUNDS = 4,
};

typedef enum _TAG_UNNAMED_293
{
  DE_DAMAGE = 0,
  DE_RADIUS_DAMAGE = 1,
  DE_HITEVENT = 2,
} TAG_UNNAMED_293, *PTAG_UNNAMED_293;

enum serverSignedStatsAction_t
{
  ACTION_NOTHING = 0,
  ACTION_RECORDEVENT = 1,
  ACTION_KICK = 2,
  ACTION_KICKANDRECORDEVENT = 3,
};

struct scrAnimPub_t
{
  /* 0x0000 */ unsigned int animtrees;
  /* 0x0004 */ unsigned int animtree_node;
  /* 0x0008 */ unsigned int animTreeNames;
  /* 0x000c */ struct scr_animtree_t xanim_lookup[128][2];
  /* 0x040c */ unsigned int xanim_num[2];
  /* 0x0414 */ unsigned int animTreeIndex;
  /* 0x0418 */ BOOL animtree_loading;
  /* 0x0419 */ char __PADDING__[3];
}; /* size: 0x041c */

enum codetype
{
  CODES = 0,
  LENS = 1,
  DISTS = 2,
};

enum bdBandwidthRequest
{
  BD_BANDWIDTH_TEST_REQUEST = 0,
  BD_BANDWIDTH_TEST_FINALIZE = 1,
};

enum block_state
{
  need_more = 0,
  block_done = 1,
  finish_started = 2,
  finish_done = 3,
};

enum DWRITE_PARAGRAPH_ALIGNMENT
{
};

typedef enum _TAG_UNNAMED_294
{
  DOBJ_CREATE_SIZE = 124,
  XSURFACE_SIZE = 80,
} TAG_UNNAMED_294, *PTAG_UNNAMED_294;

typedef enum _TAG_UNNAMED_295
{
  PLAYER_FIELD_name = 0,
  PLAYER_FIELD_localname = 1,
  PLAYER_FIELD_teamname = 2,
  PLAYER_FIELD_otherteamname = 3,
  PLAYER_FIELD_rank = 4,
  PLAYER_FIELD_clan = 5,
  PLAYER_FIELD_tag = 6,
  PLAYER_FIELD_rankicon = 7,
  PLAYER_FIELD_currentteamname = 8,
  PLAYER_FIELD_xuid = 9,
  PLAYER_FIELD_dead = 10,
  PLAYER_FIELD_clipAmmo = 11,
  PLAYER_FIELD_nightvision = 12,
  PLAYER_FIELD_number = 13,
  PLAYER_FIELD_score = 14,
  PLAYER_FIELD_deaths = 15,
  PLAYER_FIELD_kills = 16,
  PLAYER_FIELD_place = 17,
  PLAYER_FIELD_ping = 18,
  NUM_PLAYER_FIELDS = 19,
} TAG_UNNAMED_295, *PTAG_UNNAMED_295;

enum SideClassification
{
  SIDE_FRONT = 0,
  SIDE_BACK = 1,
  SIDE_ON = 2,
  SIDE_CROSS = 3,
  SIDE_COUNT = 4,
};

typedef enum _TAG_UNNAMED_296
{
  MTL_TYPE_DEFAULT = 0,
  MTL_TYPE_MODEL = 1,
  MTL_TYPE_MODEL_VERTCOL = 2,
  MTL_TYPE_MODEL_LIGHTMAP_VC = 3,
  MTL_TYPE_WORLD_VERTCOL = 4,
  MTL_TYPE_PACKED_WORLD_VERTCOL = 5,
  MTL_TYPE_QUANT_WORLD = 6,
  MTL_TYPE_QUANT_WORLD_VERTCOL = 7,
  MTL_TYPE_COUNT = 8,
} TAG_UNNAMED_296, *PTAG_UNNAMED_296;

struct destructible_hit
{
  /* 0x0000 */ int entNum;
}; /* size: 0x0004 */

struct vehicle_path_node_t
{
  /* 0x0000 */ short numLinks;
  /* 0x0002 */ short firstLinkIndex;
}; /* size: 0x0004 */

struct vehicle_node_t
{
  /* 0x0000 */ unsigned short name;
  /* 0x0002 */ unsigned short target;
  /* 0x0004 */ unsigned short target2;
  /* 0x0006 */ unsigned short script_linkname;
  /* 0x0008 */ unsigned short script_noteworthy;
  /* 0x000a */ short index;
  /* 0x000c */ int flags;
  /* 0x0010 */ float speed;
  /* 0x0014 */ float lookAhead;
  /* 0x0018 */ union vec3_t origin;
  /* 0x0024 */ union vec3_t angles;
  /* 0x0030 */ float radius;
  /* 0x0034 */ float tension;
  union
  {
    /* 0x0038 */ struct vehicle_spline_node_t splineNode;
    struct
    {
      /* 0x0038 */ struct vehicle_path_node_t pathNode;
      /* 0x003c */ long __PADDING__[5];
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
}; /* size: 0x0050 */

typedef enum _TAG_UNNAMED_297
{
  ANIM_LOOP = 1,
  ANIM_DELTA = 2,
  ANIM_DELTA_3D = 4,
  ANIM_LEFT_HAND_GRIP_IK = 8,
} TAG_UNNAMED_297, *PTAG_UNNAMED_297;

typedef enum _TAG_UNNAMED_298
{
  BITS_PER_WORD = 32,
  WORD_COUNT = 5,
} TAG_UNNAMED_298, *PTAG_UNNAMED_298;

typedef enum _D3DCUBEMAP_FACES
{
  D3DCUBEMAP_FACE_POSITIVE_X = 0,
  D3DCUBEMAP_FACE_NEGATIVE_X = 1,
  D3DCUBEMAP_FACE_POSITIVE_Y = 2,
  D3DCUBEMAP_FACE_NEGATIVE_Y = 3,
  D3DCUBEMAP_FACE_POSITIVE_Z = 4,
  D3DCUBEMAP_FACE_NEGATIVE_Z = 5,
  D3DCUBEMAP_FACE_FORCE_DWORD = 0x7fffffff,
} D3DCUBEMAP_FACES, *PD3DCUBEMAP_FACES;

enum ComDevhostCommandXAnim
{
  COM_DEVHOST_XANIM_TIMESTAMP = 0,
  COM_DEVHOST_XANIM_ENTNUM = 1,
  COM_DEVHOST_XANIM_NODE = 2,
  COM_DEVHOST_XANIM_ANIMCMD = 3,
  COM_DEVHOST_XANIM_PAUSED = 4,
};

typedef enum _D3DSWAPEFFECT
{
  D3DSWAPEFFECT_DISCARD = 1,
  D3DSWAPEFFECT_FLIP = 2,
  D3DSWAPEFFECT_COPY = 3,
  D3DSWAPEFFECT_OVERLAY = 4,
  D3DSWAPEFFECT_FLIPEX = 5,
  D3DSWAPEFFECT_FORCE_DWORD = 0x7fffffff,
} D3DSWAPEFFECT, *PD3DSWAPEFFECT;

enum sysEventType_t
{
  SE_NONE = 0,
  SE_KEY = 1,
  SE_CHAR = 2,
  SE_CONSOLE = 3,
};

typedef enum _TAG_UNNAMED_299
{
  MAX_STACK_SIZE = 2,
} TAG_UNNAMED_299, *PTAG_UNNAMED_299;

typedef struct _XMUHENDN3
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int x : 11; /* bit position: 0 */
      /* 0x0000 */ unsigned int y : 11; /* bit position: 11 */
      /* 0x0000 */ unsigned int z : 10; /* bit position: 22 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMUHENDN3, *PXMUHENDN3; /* size: 0x0004 */

typedef enum _TAG_UNNAMED_300
{
  R_WINDOW = 0,
  R_FULLSCREEN = 1,
  R_FULLSCREEN_WINDOW = 2,
} TAG_UNNAMED_300, *PTAG_UNNAMED_300;

struct ID3D11Texture3D
{
}; /* size: 0x0004 */

enum IPPROTO
{
  IPPROTO_HOPOPTS = 0,
  IPPROTO_ICMP = 1,
  IPPROTO_IGMP = 2,
  IPPROTO_GGP = 3,
  IPPROTO_IPV4 = 4,
  IPPROTO_TCP = 6,
  IPPROTO_PUP = 12,
  IPPROTO_UDP = 17,
  IPPROTO_IDP = 22,
  IPPROTO_IPV6 = 41,
  IPPROTO_ROUTING = 43,
  IPPROTO_FRAGMENT = 44,
  IPPROTO_ESP = 50,
  IPPROTO_AH = 51,
  IPPROTO_ICMPV6 = 58,
  IPPROTO_NONE = 59,
  IPPROTO_DSTOPTS = 60,
  IPPROTO_ND = 77,
  IPPROTO_ICLFXBM = 78,
  IPPROTO_RAW = 255,
  IPPROTO_MAX = 256,
  IPPROTO_RESERVED_RAW = 257,
  IPPROTO_RESERVED_IPSEC = 258,
  IPPROTO_RESERVED_IPSECOFFLOAD = 259,
  IPPROTO_RESERVED_MAX = 260,
};

enum DataNodeType
{
  DataNodeType_String = 0,
  DataNodeType_Binary = 1,
};

enum InternetCookieState
{
  COOKIE_STATE_UNKNOWN = 0,
  COOKIE_STATE_ACCEPT = 1,
  COOKIE_STATE_PROMPT = 2,
  COOKIE_STATE_LEASH = 3,
  COOKIE_STATE_DOWNGRADE = 4,
  COOKIE_STATE_REJECT = 5,
  COOKIE_STATE_MAX = 5,
};

typedef enum _D3DDEVTYPE
{
  D3DDEVTYPE_HAL = 1,
  D3DDEVTYPE_REF = 2,
  D3DDEVTYPE_SW = 3,
  D3DDEVTYPE_NULLREF = 4,
  D3DDEVTYPE_FORCE_DWORD = 0x7fffffff,
} D3DDEVTYPE, *PD3DDEVTYPE;

enum INTERNET_SCHEME
{
  INTERNET_SCHEME_PARTIAL = -2,
  INTERNET_SCHEME_UNKNOWN = -1,
  INTERNET_SCHEME_DEFAULT = 0,
  INTERNET_SCHEME_FTP = 1,
  INTERNET_SCHEME_GOPHER = 2,
  INTERNET_SCHEME_HTTP = 3,
  INTERNET_SCHEME_HTTPS = 4,
  INTERNET_SCHEME_FILE = 5,
  INTERNET_SCHEME_NEWS = 6,
  INTERNET_SCHEME_MAILTO = 7,
  INTERNET_SCHEME_SOCKS = 8,
  INTERNET_SCHEME_JAVASCRIPT = 9,
  INTERNET_SCHEME_VBSCRIPT = 10,
  INTERNET_SCHEME_RES = 11,
  INTERNET_SCHEME_FIRST = 1,
  INTERNET_SCHEME_LAST = 11,
};

enum GfxScreenshotType
{
  R_SCREENSHOT_JPG = 0,
  R_SCREENSHOT_TGA = 1,
};

enum ADDRESS_MODE
{
  AddrMode1616 = 0,
  AddrMode1632 = 1,
  AddrModeReal = 2,
  AddrModeFlat = 3,
};

typedef enum _SPACTION
{
  SPACTION_NONE = 0,
  SPACTION_MOVING = 1,
  SPACTION_COPYING = 2,
  SPACTION_RECYCLING = 3,
  SPACTION_APPLYINGATTRIBS = 4,
  SPACTION_DOWNLOADING = 5,
  SPACTION_SEARCHING_INTERNET = 6,
  SPACTION_CALCULATING = 7,
  SPACTION_UPLOADING = 8,
  SPACTION_SEARCHING_FILES = 9,
  SPACTION_DELETING = 10,
  SPACTION_RENAMING = 11,
  SPACTION_FORMATTING = 12,
  SPACTION_COPY_MOVING = 13,
} SPACTION, *PSPACTION;

class rbcint
{
}; /* size: 0x0001 */

enum MARKUPSIZE
{
  MARKUPSIZE_CALCWIDTH = 0,
  MARKUPSIZE_CALCHEIGHT = 1,
};

class bdUPnP
{
  /* 0x0000 */ enum bdUPnP::bdUPnPState m_state;
  /* 0x0004 */ unsigned short m_gamePort;
  /* 0x0006 */ char Padding_156[2];
  /* 0x0008 */ class bdArray<bdInetAddr>* m_localAddrs;
  /* 0x000c */ class bdUPnPConfig m_config;
  /* 0x002c */ class bdSocket m_discoverySocket;
  /* 0x0034 */ char m_readBuffer[1025];
  /* 0x0435 */ char Padding_157[3];
  /* 0x0438 */ unsigned int m_bytesReceived;
  /* 0x043c */ long Padding_158;
  /* 0x0440 */ class bdUPnPDevice m_device;
  /* 0x2568 */ class bdUPnPDevice m_cachedDevice;
  /* 0x4690 */ class bdStopwatch m_discoveryTimer;
  /* 0x4698 */ unsigned int m_numDiscoveryAttempts;
  /* 0x469c */ BOOL m_shutdownRequested;
}; /* size: 0x46a0 */

enum tagMENUPOPUPSELECT
{
  MPOS_EXECUTE = 0,
  MPOS_FULLCANCEL = 1,
  MPOS_CANCELLEVEL = 2,
  MPOS_SELECTLEFT = 3,
  MPOS_SELECTRIGHT = 4,
  MPOS_CHILDTRACKING = 5,
};

enum WinQuitBehavior
{
  WIN_IGNORE_QUIT = 0,
  WIN_HANDLE_QUIT = 1,
};

typedef enum _NvAPI_Status
{
  NVAPI_OK = 0,
  NVAPI_ERROR = -1,
  NVAPI_LIBRARY_NOT_FOUND = -2,
  NVAPI_NO_IMPLEMENTATION = -3,
  NVAPI_API_NOT_INITIALIZED = -4,
  NVAPI_INVALID_ARGUMENT = -5,
  NVAPI_NVIDIA_DEVICE_NOT_FOUND = -6,
  NVAPI_END_ENUMERATION = -7,
  NVAPI_INVALID_HANDLE = -8,
  NVAPI_INCOMPATIBLE_STRUCT_VERSION = -9,
  NVAPI_HANDLE_INVALIDATED = -10,
  NVAPI_OPENGL_CONTEXT_NOT_CURRENT = -11,
  NVAPI_INVALID_POINTER = -14,
  NVAPI_NO_GL_EXPERT = -12,
  NVAPI_INSTRUMENTATION_DISABLED = -13,
  NVAPI_NO_GL_NSIGHT = -15,
  NVAPI_EXPECTED_LOGICAL_GPU_HANDLE = -100,
  NVAPI_EXPECTED_PHYSICAL_GPU_HANDLE = -101,
  NVAPI_EXPECTED_DISPLAY_HANDLE = -102,
  NVAPI_INVALID_COMBINATION = -103,
  NVAPI_NOT_SUPPORTED = -104,
  NVAPI_PORTID_NOT_FOUND = -105,
  NVAPI_EXPECTED_UNATTACHED_DISPLAY_HANDLE = -106,
  NVAPI_INVALID_PERF_LEVEL = -107,
  NVAPI_DEVICE_BUSY = -108,
  NVAPI_NV_PERSIST_FILE_NOT_FOUND = -109,
  NVAPI_PERSIST_DATA_NOT_FOUND = -110,
  NVAPI_EXPECTED_TV_DISPLAY = -111,
  NVAPI_EXPECTED_TV_DISPLAY_ON_DCONNECTOR = -112,
  NVAPI_NO_ACTIVE_SLI_TOPOLOGY = -113,
  NVAPI_SLI_RENDERING_MODE_NOTALLOWED = -114,
  NVAPI_EXPECTED_DIGITAL_FLAT_PANEL = -115,
  NVAPI_ARGUMENT_EXCEED_MAX_SIZE = -116,
  NVAPI_DEVICE_SWITCHING_NOT_ALLOWED = -117,
  NVAPI_TESTING_CLOCKS_NOT_SUPPORTED = -118,
  NVAPI_UNKNOWN_UNDERSCAN_CONFIG = -119,
  NVAPI_TIMEOUT_RECONFIGURING_GPU_TOPO = -120,
  NVAPI_DATA_NOT_FOUND = -121,
  NVAPI_EXPECTED_ANALOG_DISPLAY = -122,
  NVAPI_NO_VIDLINK = -123,
  NVAPI_REQUIRES_REBOOT = -124,
  NVAPI_INVALID_HYBRID_MODE = -125,
  NVAPI_MIXED_TARGET_TYPES = -126,
  NVAPI_SYSWOW64_NOT_SUPPORTED = -127,
  NVAPI_IMPLICIT_SET_GPU_TOPOLOGY_CHANGE_NOT_ALLOWED = -128,
  NVAPI_REQUEST_USER_TO_CLOSE_NON_MIGRATABLE_APPS = -129,
  NVAPI_OUT_OF_MEMORY = -130,
  NVAPI_WAS_STILL_DRAWING = -131,
  NVAPI_FILE_NOT_FOUND = -132,
  NVAPI_TOO_MANY_UNIQUE_STATE_OBJECTS = -133,
  NVAPI_INVALID_CALL = -134,
  NVAPI_D3D10_1_LIBRARY_NOT_FOUND = -135,
  NVAPI_FUNCTION_NOT_FOUND = -136,
  NVAPI_INVALID_USER_PRIVILEGE = -137,
  NVAPI_EXPECTED_NON_PRIMARY_DISPLAY_HANDLE = -138,
  NVAPI_EXPECTED_COMPUTE_GPU_HANDLE = -139,
  NVAPI_STEREO_NOT_INITIALIZED = -140,
  NVAPI_STEREO_REGISTRY_ACCESS_FAILED = -141,
  NVAPI_STEREO_REGISTRY_PROFILE_TYPE_NOT_SUPPORTED = -142,
  NVAPI_STEREO_REGISTRY_VALUE_NOT_SUPPORTED = -143,
  NVAPI_STEREO_NOT_ENABLED = -144,
  NVAPI_STEREO_NOT_TURNED_ON = -145,
  NVAPI_STEREO_INVALID_DEVICE_INTERFACE = -146,
  NVAPI_STEREO_PARAMETER_OUT_OF_RANGE = -147,
  NVAPI_STEREO_FRUSTUM_ADJUST_MODE_NOT_SUPPORTED = -148,
  NVAPI_TOPO_NOT_POSSIBLE = -149,
  NVAPI_MODE_CHANGE_FAILED = -150,
  NVAPI_D3D11_LIBRARY_NOT_FOUND = -151,
  NVAPI_INVALID_ADDRESS = -152,
  NVAPI_STRING_TOO_SMALL = -153,
  NVAPI_MATCHING_DEVICE_NOT_FOUND = -154,
  NVAPI_DRIVER_RUNNING = -155,
  NVAPI_DRIVER_NOTRUNNING = -156,
  NVAPI_ERROR_DRIVER_RELOAD_REQUIRED = -157,
  NVAPI_SET_NOT_ALLOWED = -158,
  NVAPI_ADVANCED_DISPLAY_TOPOLOGY_REQUIRED = -159,
  NVAPI_SETTING_NOT_FOUND = -160,
  NVAPI_SETTING_SIZE_TOO_LARGE = -161,
  NVAPI_TOO_MANY_SETTINGS_IN_PROFILE = -162,
  NVAPI_PROFILE_NOT_FOUND = -163,
  NVAPI_PROFILE_NAME_IN_USE = -164,
  NVAPI_PROFILE_NAME_EMPTY = -165,
  NVAPI_EXECUTABLE_NOT_FOUND = -166,
  NVAPI_EXECUTABLE_ALREADY_IN_USE = -167,
  NVAPI_DATATYPE_MISMATCH = -168,
  NVAPI_PROFILE_REMOVED = -169,
  NVAPI_UNREGISTERED_RESOURCE = -170,
  NVAPI_ID_OUT_OF_RANGE = -171,
  NVAPI_DISPLAYCONFIG_VALIDATION_FAILED = -172,
  NVAPI_DPMST_CHANGED = -173,
  NVAPI_INSUFFICIENT_BUFFER = -174,
  NVAPI_ACCESS_DENIED = -175,
  NVAPI_MOSAIC_NOT_ACTIVE = -176,
  NVAPI_SHARE_RESOURCE_RELOCATED = -177,
  NVAPI_REQUEST_USER_TO_DISABLE_DWM = -178,
  NVAPI_D3D_DEVICE_LOST = -179,
  NVAPI_INVALID_CONFIGURATION = -180,
  NVAPI_STEREO_HANDSHAKE_NOT_DONE = -181,
  NVAPI_EXECUTABLE_PATH_IS_AMBIGUOUS = -182,
  NVAPI_DEFAULT_STEREO_PROFILE_IS_NOT_DEFINED = -183,
  NVAPI_DEFAULT_STEREO_PROFILE_DOES_NOT_EXIST = -184,
  NVAPI_CLUSTER_ALREADY_EXISTS = -185,
  NVAPI_DPMST_DISPLAY_ID_EXPECTED = -186,
  NVAPI_INVALID_DISPLAY_ID = -187,
  NVAPI_STREAM_IS_OUT_OF_SYNC = -188,
  NVAPI_INCOMPATIBLE_AUDIO_DRIVER = -189,
  NVAPI_VALUE_ALREADY_SET = -190,
  NVAPI_TIMEOUT = -191,
  NVAPI_GPU_WORKSTATION_FEATURE_INCOMPLETE = -192,
  NVAPI_STEREO_INIT_ACTIVATION_NOT_DONE = -193,
} NvAPI_Status, *PNvAPI_Status;

typedef enum _TAG_UNNAMED_301
{
  MAPTYPE_NONE = 0,
  MAPTYPE_INVALID1 = 1,
  MAPTYPE_INVALID2 = 2,
  MAPTYPE_2D = 3,
  MAPTYPE_3D = 4,
  MAPTYPE_CUBE = 5,
  MAPTYPE_COUNT = 6,
} TAG_UNNAMED_301, *PTAG_UNNAMED_301;

enum tagCONDITION_TYPE
{
  CT_AND_CONDITION = 0,
  CT_OR_CONDITION = 1,
  CT_NOT_CONDITION = 2,
  CT_LEAF_CONDITION = 3,
};

enum DpvsClipChildren
{
  DPVS_DONT_CLIP_CHILDREN = 0,
  DPVS_CLIP_CHILDREN = 1,
};

enum tagCONDITION_OPERATION
{
  COP_IMPLICIT = 0,
  COP_EQUAL = 1,
  COP_NOTEQUAL = 2,
  COP_LESSTHAN = 3,
  COP_GREATERTHAN = 4,
  COP_LESSTHANOREQUAL = 5,
  COP_GREATERTHANOREQUAL = 6,
  COP_VALUE_STARTSWITH = 7,
  COP_VALUE_ENDSWITH = 8,
  COP_VALUE_CONTAINS = 9,
  COP_VALUE_NOTCONTAINS = 10,
  COP_DOSWILDCARDS = 11,
  COP_WORD_EQUAL = 12,
  COP_WORD_STARTSWITH = 13,
  COP_APPLICATION_SPECIFIC = 14,
};

typedef enum _TAG_UNNAMED_302
{
  MTX_DISABLED = 0,
  MTX_USEABLE = 1,
  MTX_ENABLED = 2,
} TAG_UNNAMED_302, *PTAG_UNNAMED_302;

struct CACRoot
{
  /* 0x0000 */ unsigned char* buffer;
  /* 0x0004 */ struct ddlState_t* rootState;
}; /* size: 0x0008 */

typedef enum _TAG_UNNAMED_303
{
  TRACK_EXE_PROJ = 0,
  TRACK_CG_PROJ = 1,
  TRACK_G_PROJ = 2,
  TRACK_R_PROJ = 3,
  TRACK_COUNT_PROJ = 4,
} TAG_UNNAMED_303, *PTAG_UNNAMED_303;

enum OfflineFolderStatus
{
  OFS_INACTIVE = -1,
  OFS_ONLINE = 0,
  OFS_OFFLINE = 1,
  OFS_SERVERBACK = 2,
  OFS_DIRTYCACHE = 3,
};

enum MARKUPLINKTEXT
{
  MARKUPLINKTEXT_URL = 0,
  MARKUPLINKTEXT_ID = 1,
  MARKUPLINKTEXT_TEXT = 2,
};

class CCallback<LiveSteamClient,GameRichPresenceJoinRequested_t,0>
{
  /* 0x0000 */ long Padding_159[3];
  /* 0x000c */ class LiveSteamClient* m_pObj;
  /* 0x0010 */ void* m_Func /* function */;
}; /* size: 0x0014 */

struct GSC_ANIMTREE_ITEM
{
  /* 0x0000 */ unsigned short name;
  /* 0x0002 */ unsigned short num_tree_address;
  /* 0x0004 */ unsigned short num_node_address;
  /* 0x0006 */ unsigned char pad[2];
}; /* size: 0x0008 */

enum MARKUPMESSAGE
{
  MARKUPMESSAGE_KEYEXECUTE = 0,
  MARKUPMESSAGE_CLICKEXECUTE = 1,
  MARKUPMESSAGE_WANTFOCUS = 2,
};

typedef enum _TAG_UNNAMED_304
{
  R_SHOWOCCLUDERS_LEVEL_0 = 0,
  R_SHOWOCCLUDERS_LEVEL_1 = 1,
  R_SHOWOCCLUDERS_LEVEL_2 = 2,
  R_SHOWOCCLUDERS_LEVEL_3 = 3,
  R_SHOWOCCLUDERS_LEVEL_4 = 4,
  R_SHOWOCCLUDERS_COUNT = 5,
} TAG_UNNAMED_304, *PTAG_UNNAMED_304;

enum SHELL_LINK_DATA_FLAGS
{
  SLDF_DEFAULT = 0,
  SLDF_HAS_ID_LIST = 1,
  SLDF_HAS_LINK_INFO = 2,
  SLDF_HAS_NAME = 4,
  SLDF_HAS_RELPATH = 8,
  SLDF_HAS_WORKINGDIR = 16,
  SLDF_HAS_ARGS = 32,
  SLDF_HAS_ICONLOCATION = 64,
  SLDF_UNICODE = 128,
  SLDF_FORCE_NO_LINKINFO = 256,
  SLDF_HAS_EXP_SZ = 512,
  SLDF_RUN_IN_SEPARATE = 1024,
  SLDF_HAS_LOGO3ID = 2048,
  SLDF_HAS_DARWINID = 4096,
  SLDF_RUNAS_USER = 8192,
  SLDF_HAS_EXP_ICON_SZ = 16384,
  SLDF_NO_PIDL_ALIAS = 0xffff8000,
  SLDF_FORCE_UNCNAME = 0x10000,
  SLDF_RUN_WITH_SHIMLAYER = 0x20000,
  SLDF_RESERVED = -2147483648,
};

typedef enum _TAG_UNNAMED_305
{
  TEXT_DRAWTEXT_DEPRECATED = 0,
  TEXT_DRAWTEXT_TELETYPE = 1,
} TAG_UNNAMED_305, *PTAG_UNNAMED_305;

typedef enum __MIDL_INamespaceWalk_0001
{
  NSWF_DEFAULT = 0,
  NSWF_NONE_IMPLIES_ALL = 1,
  NSWF_ONE_IMPLIES_ALL = 2,
  NSWF_DONT_TRAVERSE_LINKS = 4,
  NSWF_DONT_ACCUMULATE_RESULT = 8,
  NSWF_TRAVERSE_STREAM_JUNCTIONS = 16,
  NSWF_FILESYSTEM_ONLY = 32,
  NSWF_SHOW_PROGRESS = 64,
  NSWF_FLAG_VIEWORDER = 128,
  NSWF_IGNORE_AUTOPLAY_HIDA = 256,
  NSWF_ASYNC = 512,
  NSWF_DONT_RESOLVE_LINKS = 1024,
  NSWF_ACCUMULATE_FOLDERS = 2048,
  NSWF_DONT_SORT = 4096,
  NSWF_USE_TRANSFER_MEDIUM = 8192,
  NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS = 16384,
} _MIDL_INamespaceWalk_0001, *P_MIDL_INamespaceWalk_0001;

typedef enum _TAG_UNNAMED_306
{
  MEAT_NO_ONE_HAS = 0,
  MEAT_ALLIES_HAVE = 1,
  MEAT_AXIS_HAS = 2,
  MEAT_TEAM_3_HAS = 3,
} TAG_UNNAMED_306, *PTAG_UNNAMED_306;

enum CPVIEW
{
  CPVIEW_CLASSIC = 0,
  CPVIEW_ALLITEMS = 0,
  CPVIEW_CATEGORY = 1,
  CPVIEW_HOME = 1,
};

typedef enum _SPTEXT
{
  SPTEXT_ACTIONDESCRIPTION = 1,
  SPTEXT_ACTIONDETAIL = 2,
} SPTEXT, *PSPTEXT;

struct tm_unz_s
{
  /* 0x0000 */ unsigned int tm_sec;
  /* 0x0004 */ unsigned int tm_min;
  /* 0x0008 */ unsigned int tm_hour;
  /* 0x000c */ unsigned int tm_mday;
  /* 0x0010 */ unsigned int tm_mon;
  /* 0x0014 */ unsigned int tm_year;
}; /* size: 0x0018 */

enum GamePadStickDir
{
  GPAD_STICK_POS = 0,
  GPAD_STICK_NEG = 1,
  GPAD_STICK_DIRCOUNT = 2,
};

enum GamepadPhysicalAxis
{
  GPAD_PHYSAXIS_RSTICK_X = 0,
  GPAD_PHYSAXIS_RSTICK_Y = 1,
  GPAD_PHYSAXIS_LSTICK_X = 2,
  GPAD_PHYSAXIS_LSTICK_Y = 3,
  GPAD_PHYSAXIS_RTRIGGER = 4,
  GPAD_PHYSAXIS_LTRIGGER = 5,
  GPAD_PHYSAXIS_COUNT = 6,
  GPAD_PHYSAXIS_NONE = -1,
};

typedef enum _NV_HYBRID_MODE
{
  NV_HYBRID_MODE_IGPU = 0,
  NV_HYBRID_MODE_DGPU = 1,
  NV_HYBRID_MODE_MULTI_ADAPTER = 2,
  NV_HYBRID_MODE_INVALID = 3,
  NV_HYBRID_MODE_DGPU_WARMUP = 4,
  NV_HYBRID_MODE_DGPU_DEEP_IDLE = 5,
  NV_HYBRID_MODE_INSTALL = 6,
  NV_HYBRID_MODE_ADAPTIVE = 7,
} NV_HYBRID_MODE, *PNV_HYBRID_MODE;

enum DUALPLAY_STATE
{
  DUALPLAY_NOTUSED = 0,
  DUALPLAY_INGAME = 1,
  DUALPLAY_INMENU = 2,
};

typedef enum _TAG_UNNAMED_307
{
  POST_FX_FLAME = 1,
  POST_FX_ELECTRIFIED = 2,
  POST_FX_TRANSPORTED = 4,
  POST_FX_WATER = 8,
  POST_FX_POISON = 16,
  POST_FX_DOUBLE_VISION = 32,
  POST_FX_DEPTH_OF_FIELD = 64,
  POST_FX_REVIVE = 128,
  POST_FX_ANAGLYPH = 256,
  POST_FX_MAIN_GROUP = 511,
  POST_FX_GENERIC = 512,
  POST_FX_BLUR = 0x80000,
  POST_FX_SAVE_SCREEN_BLUR = 0x20000000,
  POST_FX_SAVE_SCREEN_FLASH = 0x40000000,
  POST_FX_SAVE_SCREEN_REQUIRED = -2147483648,
  POST_FX_SAVE_SCREEN_MASK = -536870912,
} TAG_UNNAMED_307, *PTAG_UNNAMED_307;

enum MB_LVL_FEATURES
{
  MB_LVL_ALT_Q = 0,
  MB_LVL_ALT_LF = 1,
  MB_LVL_MAX = 2,
};

typedef enum _TAG_UNNAMED_308
{
  FLAG_MARKVIEWMODEL = 1,
  FLAG_HIDEINEXTRACAM = 2,
  FLAG_SPAWNED_OFFSCREEN = 4,
  FLAG_RETRIGGERED_OFFSCREEN = 8,
} TAG_UNNAMED_308, *PTAG_UNNAMED_308;

struct PartyLeagueTeamData
{
  /* 0x0000 */ unsigned __int64 teamID;
  /* 0x0008 */ BOOL valid;
  /* 0x0009 */ char name[32];
  /* 0x0029 */ char __PADDING__[7];
}; /* size: 0x0030 */

enum FRAME_TYPE
{
  KEY_FRAME = 0,
  INTER_FRAME = 1,
};

typedef enum _TAG_UNNAMED_309
{
  VORBIS_packet_id = 1,
  VORBIS_packet_comment = 3,
  VORBIS_packet_setup = 5,
} TAG_UNNAMED_309, *PTAG_UNNAMED_309;

typedef enum _NV_GAMUT_FORMAT
{
  NV_GAMUT_FORMAT_VERTICES = 0,
  NV_GAMUT_FORMAT_RANGE = 1,
} NV_GAMUT_FORMAT, *PNV_GAMUT_FORMAT;

enum ShadowmapRTTiling
{
  SHADOWMAP_RT_TILE_VERTICAL = 0,
  SHADOWMAP_RT_TILE_GRID = 1,
};

enum GamepadVirtualAxis
{
  GPAD_VIRTAXIS_SIDE = 0,
  GPAD_VIRTAXIS_FORWARD = 1,
  GPAD_VIRTAXIS_UP = 2,
  GPAD_VIRTAXIS_YAW = 3,
  GPAD_VIRTAXIS_PITCH = 4,
  GPAD_VIRTAXIS_ATTACK = 5,
  GPAD_VIRTAXIS_COUNT = 6,
  GPAD_VIRTAXIS_NONE = -1,
};

typedef enum _TAG_UNNAMED_310
{
  GFX_AA_ALPHA_OFF = 0,
  GFX_AA_ALPHA_TO_COVERAGE = 1,
  GFX_AA_ALPHA_SUPERSAMPLE = 2,
  GFX_AA_ALPHA_COUNT = 3,
} TAG_UNNAMED_310, *PTAG_UNNAMED_310;

enum ROMType
{
  ROM_2K_MIRROR = 0,
  ROM_4K = 1,
  ROM_2_4K = 2,
  ROM_2_4K_DPC = 3,
};

enum streamBuffErr_e
{
  LIVE_STREAMBUFF_EOF = -1,
  LIVE_STREAMBUFF_FATAL = -2,
  LIVE_STREAMBUFF_OVERFLOW = -3,
  LIVE_STREAMBUFF_NO_DATA = -4,
};

enum D3D11_CPU_ACCESS_FLAG
{
  D3D11_CPU_ACCESS_WRITE = 0x10000,
  D3D11_CPU_ACCESS_READ = 0x20000,
};

enum TIAPort
{
  VSYNC = 0,
  VBLANK = 1,
  WSYNC = 2,
  RSYNC = 3,
  NUSIZ0 = 4,
  NUSIZ1 = 5,
  COLUP0 = 6,
  COLUP1 = 7,
  COLUPF = 8,
  COLUBK = 9,
  CTRLPF = 10,
  REFP0 = 11,
  REFP1 = 12,
  PF0 = 13,
  PF1 = 14,
  PF2 = 15,
  RESP0 = 16,
  RESP1 = 17,
  RESM0 = 18,
  RESM1 = 19,
  RESBL = 20,
  AUDC0 = 21,
  AUDC1 = 22,
  AUDF0 = 23,
  AUDF1 = 24,
  AUDV0 = 25,
  AUDV1 = 26,
  GRP0 = 27,
  GRP1 = 28,
  ENAM0 = 29,
  ENAM1 = 30,
  ENABL = 31,
  HMP0 = 32,
  HMP1 = 33,
  HMM0 = 34,
  HMM1 = 35,
  HMBL = 36,
  VDELP0 = 37,
  VDELP1 = 38,
  VDELBL = 39,
  RESMP0 = 40,
  RESMP1 = 41,
  HMOVE = 42,
  HMCLR = 43,
  CXCLR = 44,
  CXM0P = 48,
  CXM1P = 49,
  CXP0FB = 50,
  CXP1FB = 51,
  CXM0FB = 52,
  CXM1FB = 53,
  CXBLPF = 54,
  CXPPMM = 55,
  INPT0 = 56,
  INPT1 = 57,
  INPT2 = 58,
  INPT3 = 59,
  INPT4 = 60,
  INPT5 = 61,
};

enum AddressingMode
{
  AM_INVALID = 0,
  AM_IMPLICIT = 1,
  AM_ACCUMULATOR = 2,
  AM_IMMEDIATE = 3,
  AM_RELATIVE = 4,
  AM_ZEROPAGE = 5,
  AM_ZEROPAGE_X = 6,
  AM_ZEROPAGE_Y = 7,
  AM_ABSOLUTE = 8,
  AM_ABSOLUTE_X = 9,
  AM_ABSOLUTE_Y = 10,
  AM_INDEXED_INDIRECT = 11,
  AM_INDIRECT_INDEXED = 12,
};

enum PIAPort
{
  SWCHA = 0,
  SWACNT = 1,
  SWCHB = 2,
  SWBCNT = 3,
  INTIM = 4,
  INSTAT = 5,
  TIM1T = 20,
  TIM8T = 21,
  TIM64T = 22,
  T1024T = 23,
};

typedef enum _TAG_UNNAMED_311
{
  R_DEBUGSHADER_NONE = 0,
  R_DEBUGSHADER_TEXTURE = 1,
  R_DEBUGSHADER_TANGENT = 2,
  R_DEBUGSHADER_BINORMAL = 3,
  R_DEBUGSHADER_NORMAL = 4,
  R_DEBUGSHADER_LMAPDIR = 5,
  R_DEBUGSHADER_COUNT = 6,
} TAG_UNNAMED_311, *PTAG_UNNAMED_311;

typedef enum _TAG_UNNAMED_312
{
  LEFT = 0,
  RIGHT = 1,
} TAG_UNNAMED_312, *PTAG_UNNAMED_312;

enum DVBLOCK_VC_COLOR
{
  COLOR_vc_RS = 0,
  COLOR_vc_RE = 1,
  COLOR_vc_SMR = 2,
  COLOR_vc_SMG = 3,
  COLOR_vc_SMB = 4,
  COLOR_vc_MMR = 5,
  COLOR_vc_MMG = 6,
  COLOR_vc_MMB = 7,
  COLOR_vc_HMR = 8,
  COLOR_vc_HMG = 9,
  COLOR_vc_HMB = 10,
  COLOR_vc_FGM = 11,
  COLOR_vc_FSM = 12,
  COLOR_vc_FBM = 13,
  COLOR_VC_MAX = 14,
};

typedef enum _TAG_UNNAMED_313
{
  RED = 0,
  BLACK = 1,
} TAG_UNNAMED_313, *PTAG_UNNAMED_313;

enum LbFilter
{
  LB_FILTER_NONE = 0,
  LB_FILTER_FRIENDS = 1,
  LB_FILTER_LOBBY_MEMBERS = 2,
  LB_FILTER_ELITE = 3,
  LB_FILTER_COUNT = 4,
};

enum ParseTokenType
{
  PARSE_TOKEN_UNKNOWN = 0,
  PARSE_TOKEN_NUMBER = 1,
  PARSE_TOKEN_STRING = 2,
  PARSE_TOKEN_NAME = 3,
  PARSE_TOKEN_HASH = 4,
  PARSE_TOKEN_PUNCTUATION = 5,
};

struct in_addr
{
  union
  {
    union
    {
      struct
      {
        /* 0x0000 */ unsigned char s_b1;
        /* 0x0001 */ unsigned char s_b2;
        /* 0x0002 */ unsigned char s_b3;
        /* 0x0003 */ unsigned char s_b4;
      } /* size: 0x0004 */ S_un_b;
      struct
      {
        /* 0x0000 */ unsigned short s_w1;
        /* 0x0002 */ unsigned short s_w2;
      } /* size: 0x0004 */ S_un_w;
      /* 0x0000 */ unsigned long S_addr;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ S_un;
}; /* size: 0x0004 */

struct ip_msfilter
{
  /* 0x0000 */ struct in_addr imsf_multiaddr;
  /* 0x0004 */ struct in_addr imsf_interface;
  /* 0x0008 */ enum MULTICAST_MODE_TYPE imsf_fmode;
  /* 0x000c */ unsigned long imsf_numsrc;
  /* 0x0010 */ struct in_addr imsf_slist[1];
}; /* size: 0x0014 */

enum Q_DATA_TYPE
{
  Q_DATA_TYPE_INT = 0,
  Q_DATA_TYPE_FLOAT = 1,
  Q_DATA_TYPE_BLOB = 2,
  Q_DATA_TYPE_STRING = 3,
  Q_DATA_TYPE_ISTRING = 4,
};

enum Q_OPERATOR
{
  Q_OPERATOR_EQUAL = 0,
  Q_OPERATOR_LESSTHAN = 1,
  Q_OPERATOR_GREATERTHAN = 2,
  Q_OPERATOR_LESSTHANOREQUALTO = 3,
  Q_OPERATOR_GREATERTHANOREQUALTO = 4,
};

struct ClientTreeStorage
{
  /* 0x0000 */ char* strName;
  /* 0x0004 */ struct scr_animtree_t animTree;
  /* 0x0008 */ int numIndices;
  /* 0x000c */ struct TreeNameMap* pTreeNameMap;
}; /* size: 0x0010 */

typedef enum _TAG_UNNAMED_314
{
  Size = 32,
} TAG_UNNAMED_314, *PTAG_UNNAMED_314;

enum DVBLOCK_FOG
{
  FOG_BaseDist = 0,
  FOG_HalfDist = 1,
  FOG_BaseHeight = 2,
  FOG_HalfHeight = 3,
  FOG_ColorR = 4,
  FOG_ColorG = 5,
  FOG_ColorB = 6,
  FOG_Opacity = 7,
  FOG_SunColorR = 8,
  FOG_SunColorG = 9,
  FOG_SunColorB = 10,
  FOG_SunOpacity = 11,
  FOG_SunPitch = 12,
  FOG_SunYaw = 13,
  FOG_SunInner = 14,
  FOG_SunOuter = 15,
  FOG_MAX = 16,
};

typedef enum _TAG_UNNAMED_315
{
  Elements = 8,
} TAG_UNNAMED_315, *PTAG_UNNAMED_315;

enum ViewParmsType
{
  VIEW_PARMS_CAMERA = 0,
  VIEW_PARMS_SHADOW = 1,
};

typedef enum _TAG_UNNAMED_316
{
  SAVE_SEGMENT_START = 0,
  SAVE_SEGMENT_MAIN = 1,
  SAVE_SEGMENT_NORMAL = 2,
  SAVE_SEGMENT_LEVEL = 3,
  SAVE_SEGMENT_SCRIPT = 4,
  SAVE_SEGMENT_ANIMTREE = 5,
  SAVE_SEGMENT_END = 6,
  SAVE_SEGMENT_COUNT = 7,
  SAVE_SEGMENT_NONE = -1,
} TAG_UNNAMED_316, *PTAG_UNNAMED_316;

enum serverAction_t
{
  ACTION_NOTHING = 0,
  ACTION_RECORDEVENT = 1,
  ACTION_KICK = 2,
  ACTION_KICKANDRECORDEVENT = 3,
};

enum EvalValueType
{
  EVAL_VALUE_DOUBLE = 0,
  EVAL_VALUE_INT = 1,
  EVAL_VALUE_STRING = 2,
};

enum DvarSetSource
{
  DVAR_SOURCE_INTERNAL = 0,
  DVAR_SOURCE_EXTERNAL = 1,
  DVAR_SOURCE_SCRIPT = 2,
  DVAR_SOURCE_DEVGUI = 3,
};

struct XModelConfigEntry
{
  /* 0x0000 */ char filename[1024];
  /* 0x0400 */ float dist;
  /* 0x0404 */ float distMP;
}; /* size: 0x0408 */

enum showpacketsType_t
{
  SHOWPACKETS_DISABLED = 0,
  SHOWPACKETS_LEVEL_1 = 1,
  SHOWPACKETS_LEVEL_2 = 2,
  SHOWPACKETS_LEVEL_COUNT = 3,
};

enum shownetType_t
{
  SHOWNET_LEVEL_MINUS_2 = -2,
  SHOWNET_LEVEL_MINUS_1 = -1,
  SHOWNET_LEVEL_0 = 0,
  SHOWNET_LEVEL_1 = 1,
  SHOWNET_LEVEL_2 = 2,
  SHOWNET_LEVEL_3 = 3,
  SHOWNET_LEVEL_4 = 4,
  SHOWNET_LEVEL_COUNT = 7,
};

typedef enum _TAG_UNNAMED_317
{
  R_REFLECTIONPROBESELECTION_OFF = 0,
  R_REFLECTIONPROBESELECTION_BSP = 1,
  R_REFLECTIONPROBESELECTION_STATICMODELS = 2,
  R_REFLECTIONPROBESELECTION_ENTS = 3,
  R_REFLECTIONPROBESELECTION_COUNT = 4,
} TAG_UNNAMED_317, *PTAG_UNNAMED_317;

enum compassPartialType_t
{
  COMPASS_PARTIAL_TYPE_2D = 0,
  COMPASS_PARTIAL_TYPE_3D = 1,
};

typedef enum _TAG_UNNAMED_318
{
  DOBJ_MAX_SURFS = 128,
  XMODEL_MAX_SURFS = 80,
} TAG_UNNAMED_318, *PTAG_UNNAMED_318;

enum systemTest_t
{
  LUA_SYSTEM_TEST_OFF = 0,
  LUA_SYSTEM_TEST_ON = 1,
  LUA_SYSTEM_TEST_ON_EXTRA_LOGGING = 2,
};

enum server_hardware_types
{
  SERVERHARDWARE_UNKNOWN = 0,
  SERVERHARDWARE_LINUXDEDICATED = 1,
  SERVERHARDWARE_WINDEDICATED = 2,
  SERVERHARDWARE_MACDEDICATED = 3,
  SERVERHARDWARE_XENONDEDICATED = 4,
  SERVERHARDWARE_PS3DEDICATED = 5,
  SERVERHARDWARE_WIIUDEDICATED = 6,
  SERVERHARDWARE_WINLISTEN = 7,
  SERVERHARDWARE_MACLISTEN = 8,
  SERVERHARDWARE_XENONLISTEN = 9,
  SERVERHARDWARE_PS3LISTEN = 10,
  SERVERHARDWARE_WIIULISTEN = 11,
  MAX_SERVERHARDWARE = 12,
};

struct CD3D11_QUERY_DESC
{
}; /* size: 0x0008 */

struct D3D11_SAMPLER_DESC
{
  /* 0x0000 */ enum D3D11_FILTER Filter;
  /* 0x0004 */ enum D3D11_TEXTURE_ADDRESS_MODE AddressU;
  /* 0x0008 */ enum D3D11_TEXTURE_ADDRESS_MODE AddressV;
  /* 0x000c */ enum D3D11_TEXTURE_ADDRESS_MODE AddressW;
  /* 0x0010 */ float MipLODBias;
  /* 0x0014 */ unsigned int MaxAnisotropy;
  /* 0x0018 */ enum D3D11_COMPARISON_FUNC ComparisonFunc;
  /* 0x001c */ float BorderColor[4];
  /* 0x002c */ float MinLOD;
  /* 0x0030 */ float MaxLOD;
}; /* size: 0x0034 */

enum FsThread
{
  FS_THREAD_MAIN = 0,
  FS_THREAD_STREAM = 1,
  FS_THREAD_DATABASE = 2,
  FS_THREAD_BACKEND = 3,
  FS_THREAD_SERVER = 4,
  FS_THREAD_COUNT = 5,
  FS_THREAD_INVALID = 6,
};

enum SHGFP_TYPE
{
  SHGFP_TYPE_CURRENT = 0,
  SHGFP_TYPE_DEFAULT = 1,
};

enum FS_ErrorCodes
{
  FS_OPEN_FAILURE = -1,
  FS_OPEN_NOT_IN_IWD_OR_LOCALIZED_DIR = -2,
};

enum TestForSunShadowList
{
  SUNSHADOWLIST_TEST_DISABLE = 0,
  SUNSHADOWLIST_TEST_ENABLE = 1,
};

enum expressionRpnEnum
{
  RPN_CONSTANT = 0,
  RPN_CMD_IDX = 1,
  RPN_CMD = 2,
  RPN_END = 3,
};

class bdFastArray<bdDispatchInterceptor *>
{
  /* 0x0000 */ class bdDispatchInterceptor** m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

class bdAntiCheatChallenge
{
  /* 0x0000 */ long Padding_160[2];
  /* 0x0008 */ unsigned short m_functionID;
  /* 0x000a */ char Padding_161[6];
  /* 0x0010 */ unsigned __int64 m_challengeID;
  /* 0x0018 */ class bdArray<bdAntiCheatChallengeParam> m_parameters;
}; /* size: 0x0028 */

enum afterActionReportAwards_t
{
  AAR_AWARDS_PERSONAL_BESTS = 0,
  AAR_AWARDS_STATS_MILESTONES = 1,
  AAR_AWARDS_CONTRACTS = 2,
  AAR_AWARDS_COUNT = 3,
  AAR_MAX_AWARDS = 3,
};

enum e_gametypesBaseColumns
{
  GAMETYPES_BASE_COLUMN_BACKGROUND = 0,
  GAMETYPES_BASE_COLUMN_NAME = 1,
  GAMETYPES_BASE_COLUMN_A_BUTTON = 2,
  GAMETYPES_BASE_COLUMN_ICON = 3,
};

typedef enum _TAG_UNNAMED_319
{
  PARSE_NORMAL = 0,
  PARSE_CONVERSION = 1,
  PARSE_LENGTH = 2,
  PARSE_PRECISION = 3,
  PARSE_PRECISION_MAYBE = 4,
  PARSE_WIDTH = 5,
  PARSE_FLAG = 6,
} TAG_UNNAMED_319, *PTAG_UNNAMED_319;

class bdDTLSInitAck
{
  /* 0x0000 */ long Padding_162[3];
  /* 0x000c */ unsigned int m_timestamp;
  /* 0x0010 */ unsigned int m_signature;
  /* 0x0014 */ unsigned short m_initTag;
  /* 0x0016 */ unsigned short m_localTag;
  /* 0x0018 */ unsigned short m_peerTag;
  /* 0x001a */ unsigned short m_localTieTag;
  /* 0x001c */ unsigned short m_peerTieTag;
  /* 0x001e */ char Padding_163[2];
  /* 0x0020 */ class bdAddr m_peerAddr;
  /* 0x0028 */ class bdSecurityID m_secID;
}; /* size: 0x0030 */

enum AssertOccurance
{
  FIRST_TIME = 0,
  RECURSIVE = 1,
};

typedef enum _TAG_UNNAMED_320
{
  CONDITION_TYPE_NONE = 0,
  CONDITION_TYPE_IF = 1,
  CONDITION_TYPE_ELSEIF = 2,
  CONDITION_TYPE_ELSE = 3,
} TAG_UNNAMED_320, *PTAG_UNNAMED_320;

enum msgwnd_mode_t
{
  MWM_BOTTOMUP_ALIGN_TOP = 0,
  MWM_BOTTOMUP_ALIGN_BOTTOM = 1,
  MWM_TOPDOWN_ALIGN_TOP = 2,
  MWM_TOPDOWN_ALIGN_BOTTOM = 3,
};

enum parseBlockTypes
{
  PARSE_UNKNOWN = 0,
  PARSE_GAMETYPE = 1,
  PARSE_PLAYLIST = 2,
  PARSE_SUPERCATEGORY = 3,
  PARSE_CATEGORY = 4,
  PARSE_IGNORE = 5,
  PARSE_SETTINGS = 6,
  PARSE_MAPLIST = 7,
};

enum motdDescriptorStatus_e
{
  MOTD_DESCRIPTOR_STATUS_INVALID = 0,
  MOTD_DESCRIPTOR_STATUS_WORKING = 1,
  MOTD_DESCRIPTOR_STATUS_DONE = 2,
  MOTD_DESCRIPTOR_STATUS_ERROR = 3,
};

struct SndNotifyPlaybackUpdate
{
  /* 0x0000 */ struct SndPlayback* playback;
  /* 0x0004 */ float attenuation;
  /* 0x0008 */ unsigned int lengthMs;
  /* 0x000c */ unsigned int playedMs;
}; /* size: 0x0010 */

enum LbAggType
{
  LBAGG_TYPE_MIN = 0,
  LBAGG_TYPE_MAX = 1,
  LBAGG_TYPE_ADD = 2,
  LBAGG_TYPE_REPLACE = 3,
  LBAGG_TYPE_COUNT = 4,
};

struct animParamsDef_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ struct rectDef_s rectClient;
  /* 0x001c */ float borderSize;
  /* 0x0020 */ union vec4_t foreColor;
  /* 0x0030 */ union vec4_t backColor;
  /* 0x0040 */ union vec4_t borderColor;
  /* 0x0050 */ union vec4_t outlineColor;
  /* 0x0060 */ float textScale;
  /* 0x0064 */ float rotation;
  /* 0x0068 */ struct GenericEventHandler* onEvent;
}; /* size: 0x006c */

struct UIAnimInfo
{
  /* 0x0000 */ int animStateCount;
  /* 0x0004 */ struct animParamsDef_t** animStates;
  /* 0x0008 */ struct animParamsDef_t currentAnimState;
  /* 0x0074 */ struct animParamsDef_t nextAnimState;
  /* 0x00e0 */ int animating;
  /* 0x00e4 */ int animStartTime;
  /* 0x00e8 */ int animDuration;
}; /* size: 0x00ec */

enum LbUpdateType
{
  LBUPDATE_TYPE_NORMAL = 0,
  LBUPDATE_TYPE_RANK = 1,
  LBUPDATE_TYPE_COMBINE = 2,
  LBUPDATE_TYPE_COUNT = 3,
};

enum e_inGamePlayerListColumns
{
  INGAME_LIST_COLUMN_TALKING = 0,
  INGAME_LIST_COLUMN_BACKGROUND = 1,
  INGAME_LIST_COLUMN_ALT_BG = 2,
  INGAME_LIST_COLUMN_RANK_BG = 3,
  INGAME_LIST_COLUMN_RANK = 4,
  INGAME_LIST_COLUMN_RANK_ICON = 5,
  INGAME_LIST_COLUMN_NAME = 6,
  INGAME_LIST_COLUMN_SCORE = 7,
};

struct ActorSecondaryTarget
{
  /* 0x0000 */ class EntHandle entity;
  /* 0x0004 */ union vec2_t dirToEnt;
  /* 0x000c */ float distToEnt;
  /* 0x0010 */ struct pathnode_t* node;
}; /* size: 0x0014 */

enum e_challengesPerksColumns
{
  PERKS_LIST_COLUMN_NAME = 0,
  PERKS_LIST_COLUMN_LOCK = 1,
  PERKS_LIST_COLUMN_COUNT = 2,
};

struct rectData_s
{
  /* 0x0000 */ struct ExpressionStatement rectXExp;
  /* 0x0010 */ struct ExpressionStatement rectYExp;
  /* 0x0020 */ struct ExpressionStatement rectWExp;
  /* 0x0030 */ struct ExpressionStatement rectHExp;
}; /* size: 0x0040 */

enum e_statsMilestonesListColumns
{
  STATS_MILESTONES_COLUMN_MILESTONE_NAME = 0,
  STATS_MILESTONES_COLUMN_PROGRESS_BAR = 1,
  STATS_MILESTONES_COLUMN_COMPLETED_TEXT = 2,
  STATS_MILESTONES_COLUMN_MILESTONE_LOCKED = 3,
};

enum e_playlistsColumns
{
  FEEDER_NEW_PLAYLISTS_COLUMN_BACKGROUND = 0,
  FEEDER_NEW_PLAYLISTS_COLUMN_NAME = 1,
  FEEDER_NEW_PLAYLISTS_COLUMN_A_BUTTON = 2,
  FEEDER_NEW_PLAYLISTS_COLUMN_BUY = 3,
};

typedef enum _TAG_UNNAMED_321
{
  MZ_ZIP_MAX_IO_BUF_SIZE = 0x10000,
  MZ_ZIP_MAX_ARCHIVE_FILENAME_SIZE = 260,
  MZ_ZIP_MAX_ARCHIVE_FILE_COMMENT_SIZE = 256,
} TAG_UNNAMED_321, *PTAG_UNNAMED_321;

struct SndCommandLoadBank
{
  /* 0x0000 */ struct SndBank* bank;
}; /* size: 0x0004 */

typedef enum _TAG_UNNAMED_322
{
  TDEFL_LZ_CODE_BUF_SIZE = 0x10000,
  TDEFL_OUT_BUF_SIZE = 0x14ccc,
  TDEFL_MAX_HUFF_SYMBOLS = 288,
  TDEFL_LZ_HASH_BITS = 15,
  TDEFL_LEVEL1_HASH_SIZE_MASK = 4095,
  TDEFL_LZ_HASH_SHIFT = 5,
  TDEFL_LZ_HASH_SIZE = 0xffff8000,
} TAG_UNNAMED_322, *PTAG_UNNAMED_322;

enum emblemIdentity_e
{
  EMBLEM_IDENTITY_INVALID = 0,
  EMBLEM_IDENTITY_SELF = 1,
  EMBLEM_IDENTITY_LEAGUE = 2,
  EMBLEM_IDENTITY_CLAN = 3,
  EMBLEM_NUM_IDENTITIES = 4,
};

enum codtvType_e
{
  CODTV_TYPE_INVALID = 1,
  CODTV_TYPE_FOLDER = 2,
  CODTV_TYPE_DWFOLDER = 3,
  CODTV_TYPE_VIDEOFOLDER = 4,
  CODTV_TYPE_CUSTOMBUTTON = 5,
  CODTV_TYPE_COUNT = 6,
};

enum fileshareDataFilter_e
{
  CODTV_DATAFILTER_INVALID = 0,
  CODTV_DATAFILTER_BOOKMARKS = 1,
  CODTV_DATAFILTER_VICTORIES = 2,
  CODTV_DATAFILTER_HIGHEST_RATED = 3,
  CODTV_DATAFILTER_TRENDING = 4,
  CODTV_DATAFILTER_INGAMESTORE = 5,
};

typedef struct _XMU565
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short x : 5; /* bit position: 0 */
      /* 0x0000 */ unsigned short y : 6; /* bit position: 5 */
      /* 0x0000 */ unsigned short z : 5; /* bit position: 11 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short v;
  }; /* size: 0x0002 */
} XMU565, *PXMU565; /* size: 0x0002 */

enum codtvImageCategory_e
{
  CODTV_IMAGE_TYPE_INVALID = -1,
  CODTV_IMAGE_TYPE_MATERIAL = 0,
};

struct MigrationPers
{
  /* 0x0000 */ int time;
  /* 0x0004 */ BOOL stanceHeld;
  /* 0x0005 */ char Padding_164[3];
  /* 0x0008 */ enum StanceState stance;
  /* 0x000c */ enum StanceState stancePosition;
  /* 0x0010 */ int stanceTime;
  /* 0x0014 */ union Weapon cgameUserCmdWeapon;
  /* 0x0018 */ union Weapon cgameUserCmdOffHandWeapon;
  /* 0x001c */ union Weapon weaponSelect;
  /* 0x0020 */ int weaponSelectTime;
  /* 0x0024 */ int weaponForcedSelectTime;
  /* 0x0028 */ union Weapon weaponLatestPrimary;
  /* 0x002c */ union Weapon primaryWeaponForAlt[256];
  /* 0x042c */ int holdBreathTime;
  /* 0x0430 */ int holdBreathInTime;
  /* 0x0434 */ int holdBreathDelay;
  /* 0x0438 */ float holdBreathFrac;
}; /* size: 0x043c */

struct clientUIActive_t
{
  /* 0x0000 */ int flags;
  /* 0x0004 */ int keyCatchers;
  /* 0x0008 */ enum connstate_t connectionState;
  /* 0x000c */ int nextScrollTime;
  /* 0x0010 */ enum clientMigState_t migrationState;
  /* 0x0014 */ struct MigrationPers migrationPers;
  /* 0x0450 */ int numVoicePacketsSent;
  /* 0x0454 */ int numVoicePacketsSentStart;
}; /* size: 0x0458 */

enum std::_Iosb<int>::_Iostate
{
  _Statmask = 23,
};

typedef enum _TAG_UNNAMED_323
{
  _Openprot = 64,
} TAG_UNNAMED_323, *PTAG_UNNAMED_323;

typedef enum _TAG_UNNAMED_324
{
  alnum = 263,
  alpha = 259,
  cntrl = 32,
  digit = 4,
  graph = 279,
  lower = 2,
  print = 471,
  punct = 16,
  space = 72,
  upper = 1,
  xdigit = 128,
} TAG_UNNAMED_324, *PTAG_UNNAMED_324;

struct SndCommandSetGlobalFutz
{
  /* 0x0000 */ unsigned int futzId;
  /* 0x0004 */ enum SndCallLocation callLocation;
}; /* size: 0x0008 */

enum std::ios_base::event
{
  erase_event = 0,
  imbue_event = 1,
  copyfmt_event = 2,
};

typedef enum _TAG_UNNAMED_325
{
  _Multi = 0,
} TAG_UNNAMED_325, *PTAG_UNNAMED_325;

struct tm
{
  /* 0x0000 */ int tm_sec;
  /* 0x0004 */ int tm_min;
  /* 0x0008 */ int tm_hour;
  /* 0x000c */ int tm_mday;
  /* 0x0010 */ int tm_mon;
  /* 0x0014 */ int tm_year;
  /* 0x0018 */ int tm_wday;
  /* 0x001c */ int tm_yday;
  /* 0x0020 */ int tm_isdst;
}; /* size: 0x0024 */

enum FLAC__StreamDecoderWriteStatus
{
  FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE = 0,
  FLAC__STREAM_DECODER_WRITE_STATUS_ABORT = 1,
};

class bdAuthInfo
{
  /* 0x0000 */ unsigned int m_titleID;
  /* 0x0004 */ unsigned int m_IVSeed;
  /* 0x0008 */ char m_data[128];
  /* 0x0088 */ unsigned char m_sessionKey[24];
}; /* size: 0x00a0 */

enum FLAC__StreamMetadata_Picture_Type
{
  FLAC__STREAM_METADATA_PICTURE_TYPE_OTHER = 0,
  FLAC__STREAM_METADATA_PICTURE_TYPE_FILE_ICON_STANDARD = 1,
  FLAC__STREAM_METADATA_PICTURE_TYPE_FILE_ICON = 2,
  FLAC__STREAM_METADATA_PICTURE_TYPE_FRONT_COVER = 3,
  FLAC__STREAM_METADATA_PICTURE_TYPE_BACK_COVER = 4,
  FLAC__STREAM_METADATA_PICTURE_TYPE_LEAFLET_PAGE = 5,
  FLAC__STREAM_METADATA_PICTURE_TYPE_MEDIA = 6,
  FLAC__STREAM_METADATA_PICTURE_TYPE_LEAD_ARTIST = 7,
  FLAC__STREAM_METADATA_PICTURE_TYPE_ARTIST = 8,
  FLAC__STREAM_METADATA_PICTURE_TYPE_CONDUCTOR = 9,
  FLAC__STREAM_METADATA_PICTURE_TYPE_BAND = 10,
  FLAC__STREAM_METADATA_PICTURE_TYPE_COMPOSER = 11,
  FLAC__STREAM_METADATA_PICTURE_TYPE_LYRICIST = 12,
  FLAC__STREAM_METADATA_PICTURE_TYPE_RECORDING_LOCATION = 13,
  FLAC__STREAM_METADATA_PICTURE_TYPE_DURING_RECORDING = 14,
  FLAC__STREAM_METADATA_PICTURE_TYPE_DURING_PERFORMANCE = 15,
  FLAC__STREAM_METADATA_PICTURE_TYPE_VIDEO_SCREEN_CAPTURE = 16,
  FLAC__STREAM_METADATA_PICTURE_TYPE_FISH = 17,
  FLAC__STREAM_METADATA_PICTURE_TYPE_ILLUSTRATION = 18,
  FLAC__STREAM_METADATA_PICTURE_TYPE_BAND_LOGOTYPE = 19,
  FLAC__STREAM_METADATA_PICTURE_TYPE_PUBLISHER_LOGOTYPE = 20,
  FLAC__STREAM_METADATA_PICTURE_TYPE_UNDEFINED = 21,
};

enum FLAC__ChannelAssignment
{
  FLAC__CHANNEL_ASSIGNMENT_INDEPENDENT = 0,
  FLAC__CHANNEL_ASSIGNMENT_LEFT_SIDE = 1,
  FLAC__CHANNEL_ASSIGNMENT_RIGHT_SIDE = 2,
  FLAC__CHANNEL_ASSIGNMENT_MID_SIDE = 3,
};

struct ITypeComp
{
}; /* size: 0x0004 */

enum FLAC__FrameNumberType
{
  FLAC__FRAME_NUMBER_TYPE_FRAME_NUMBER = 0,
  FLAC__FRAME_NUMBER_TYPE_SAMPLE_NUMBER = 1,
};

enum FLAC__MetadataType
{
  FLAC__METADATA_TYPE_STREAMINFO = 0,
  FLAC__METADATA_TYPE_PADDING = 1,
  FLAC__METADATA_TYPE_APPLICATION = 2,
  FLAC__METADATA_TYPE_SEEKTABLE = 3,
  FLAC__METADATA_TYPE_VORBIS_COMMENT = 4,
  FLAC__METADATA_TYPE_CUESHEET = 5,
  FLAC__METADATA_TYPE_PICTURE = 6,
  FLAC__METADATA_TYPE_UNDEFINED = 7,
};

typedef struct _DSBUFFERDESC
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long dwBufferBytes;
  /* 0x000c */ unsigned long dwReserved;
  /* 0x0010 */ struct tWAVEFORMATEX* lpwfxFormat;
  /* 0x0014 */ struct _GUID guid3DAlgorithm;
} DSBUFFERDESC, *PDSBUFFERDESC; /* size: 0x0024 */

enum FLAC__StreamDecoderInitStatus
{
  FLAC__STREAM_DECODER_INIT_STATUS_OK = 0,
  FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER = 1,
  FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS = 2,
  FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR = 3,
  FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE = 4,
  FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED = 5,
};

enum FLAC__StreamDecoderErrorStatus
{
  FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC = 0,
  FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER = 1,
  FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH = 2,
  FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM = 3,
};

struct symmetric_CTR
{
  /* 0x0000 */ int cipher;
  /* 0x0004 */ int blocklen;
  /* 0x0008 */ int padlen;
  /* 0x000c */ int mode;
  /* 0x0010 */ int ctrlen;
  /* 0x0014 */ unsigned char ctr[128];
  /* 0x0094 */ unsigned char pad[128];
  /* 0x0114 */ union Symmetric_key key;
}; /* size: 0x115c */

struct yarrow_prng
{
  /* 0x0000 */ int cipher;
  /* 0x0004 */ int hash;
  /* 0x0008 */ unsigned char pool[128];
  /* 0x0088 */ struct symmetric_CTR ctr;
}; /* size: 0x11e4 */

enum FLAC__StreamDecoderSeekStatus
{
  FLAC__STREAM_DECODER_SEEK_STATUS_OK = 0,
  FLAC__STREAM_DECODER_SEEK_STATUS_ERROR = 1,
  FLAC__STREAM_DECODER_SEEK_STATUS_UNSUPPORTED = 2,
};

enum ePreviousFrame
{
  PREVIOUS_FRAME_DELTA = 0,
  PREVIOUS_FRAME_CLIENT_NOT_ACTIVE = 1,
  PREVIOUS_FRAME_NO_DELTA_MESSAGE = 2,
  PREVIOUS_FRAME_OUT_OF_DATE_PACKET = 3,
  PREVIOUS_FRAME_OUT_OF_ENTITIES = 4,
};

struct pinglist_t
{
  /* 0x0000 */ char adrstr[64];
  /* 0x0040 */ int start;
}; /* size: 0x0044 */

struct serverStatus_s
{
  /* 0x0000 */ struct pinglist_t pingList[16];
  /* 0x0440 */ int numqueriedservers;
  /* 0x0444 */ int currentping;
  /* 0x0448 */ int nextpingtime;
  /* 0x044c */ int maxservers;
  /* 0x0450 */ int refreshtime;
  /* 0x0454 */ int numServers;
  /* 0x0458 */ int sortKey;
  /* 0x045c */ int sortDir;
  /* 0x0460 */ int lastCount;
  /* 0x0464 */ int refreshActive;
  /* 0x0468 */ int currentServer;
  /* 0x046c */ int displayServers[20000];
  /* 0x13cec */ int numDisplayServers;
  /* 0x13cf0 */ int serverCount;
  /* 0x13cf4 */ int numPlayersOnServers;
  /* 0x13cf8 */ int nextDisplayRefresh;
  /* 0x13cfc */ int nextSortTime;
  /* 0x13d00 */ struct Material* currentServerPreview;
  /* 0x13d04 */ int motdLen;
  /* 0x13d08 */ int motdWidth;
  /* 0x13d0c */ int motdPaintX;
  /* 0x13d10 */ int motdPaintX2;
  /* 0x13d14 */ int motdOffset;
  /* 0x13d18 */ int motdTime;
  /* 0x13d1c */ char motd[1024];
  /* 0x1411c */ unsigned char displayServersFriendNameInd[300];
}; /* size: 0x14248 */

enum MigrationClientState
{
  CSTATE_INACTIVE = 0,
  CSTATE_WAITFORRATING = 1,
  CSTATE_MIGRATING = 2,
};

struct tagLC_ID
{
  /* 0x0000 */ unsigned short wLanguage;
  /* 0x0002 */ unsigned short wCountry;
  /* 0x0004 */ unsigned short wCodePage;
}; /* size: 0x0006 */

enum SaveType
{
  SAVE_TYPE_INTERNAL = 0,
  SAVE_TYPE_AUTOSAVE = 1,
  SAVE_TYPE_CONSOLE = 2,
};

enum SaveHandleType
{
  SAVE_MIGRATION_HANDLE = 0,
};

typedef enum _TAG_UNNAMED_326
{
  QUERY_INFO_SYN = 0,
  QUERY_STATUS_SYN = 1,
  QUERY_SCORE_SYN = 2,
  QUERY_PING_SYN = 3,
  QUERY_PERF_SYN = 4,
  QUERY_CLIENTUIDS_SYN = 5,
  MAX_QUERY_CMDS = 6,
  QUERY_INFO_ACK = 100,
  QUERY_STATUS_ACK = 101,
  QUERY_SCORE_ACK = 102,
  QUERY_PING_ACK = 103,
  QUERY_PERF_ACK = 104,
  QUERY_CLIENTUIDS_ACK = 105,
  MAX_QUERY_ACKS = 106,
} TAG_UNNAMED_326, *PTAG_UNNAMED_326;

typedef enum _TAG_UNNAMED_327
{
  PA_UNVALIDATED = 0,
  PA_VALID = 1,
  PA_INVALID = 2,
} TAG_UNNAMED_327, *PTAG_UNNAMED_327;

struct enumDvarDef_s
{
  /* 0x0000 */ const char* enumDvarName;
}; /* size: 0x0004 */

enum eExtraCamResolution
{
  EXTRACAM_RES_OFF = 0,
  EXTRACAM_RES_NORMAL = 1,
  EXTRACAM_RES_HIGH = 2,
  EXTRACAM_RES_DEFAULT = 1,
};

union MaterialArgumentLocation
{
  union
  {
    /* 0x0000 */ unsigned short offset;
    struct
    {
      /* 0x0000 */ unsigned char textureIndex;
      /* 0x0001 */ unsigned char samplerIndex;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
}; /* size: 0x0002 */

struct MaterialShaderArgument
{
  /* 0x0000 */ unsigned short type;
  /* 0x0002 */ union MaterialArgumentLocation location;
  /* 0x0004 */ unsigned short size;
  /* 0x0006 */ unsigned short buffer;
  /* 0x0008 */ union MaterialArgumentDef u;
}; /* size: 0x000c */

enum CommandProcessorType
{
  COMMAND_SERVER = 0,
  COMMAND_CLIENT = 1,
  COMMAND_BOTH = 2,
};

typedef enum _TAG_UNNAMED_328
{
  BITS_PER_WORD = 32,
  WORD_COUNT = 2,
} TAG_UNNAMED_328, *PTAG_UNNAMED_328;

struct bdThreadArgs
{
  /* 0x0000 */ void* m_args;
  /* 0x0004 */ class bdRunnable* m_runnable;
  /* 0x0008 */ class bdThread* m_thread;
}; /* size: 0x000c */

enum war_flag_t
{
  WAR_FLAG_A = 0,
  WAR_FLAG_B = 1,
  WAR_FLAG_C = 2,
  WAR_FLAG_D = 3,
  WAR_FLAG_E = 4,
  WAR_FLAG_COUNT = 5,
};

class bdByteBuffer
{
  /* 0x0000 */ long Padding_165[2];
  /* 0x0008 */ unsigned int m_size;
  /* 0x000c */ unsigned char* m_data;
  /* 0x0010 */ unsigned char* m_readPtr;
  /* 0x0014 */ unsigned char* m_writePtr;
  /* 0x0018 */ BOOL m_typeChecked;
  /* 0x0019 */ BOOL m_typeCheckedCopy;
  /* 0x001a */ BOOL m_allocatedData;
}; /* size: 0x001c */

typedef enum _TAG_UNNAMED_329
{
  MZ_NO_FLUSH = 0,
  MZ_PARTIAL_FLUSH = 1,
  MZ_SYNC_FLUSH = 2,
  MZ_FULL_FLUSH = 3,
  MZ_FINISH = 4,
  MZ_BLOCK = 5,
} TAG_UNNAMED_329, *PTAG_UNNAMED_329;

typedef enum _TAG_UNNAMED_330
{
  MZ_OK = 0,
  MZ_STREAM_END = 1,
  MZ_NEED_DICT = 2,
  MZ_ERRNO = -1,
  MZ_STREAM_ERROR = -2,
  MZ_DATA_ERROR = -3,
  MZ_MEM_ERROR = -4,
  MZ_BUF_ERROR = -5,
  MZ_VERSION_ERROR = -6,
  MZ_PARAM_ERROR = -10000,
} TAG_UNNAMED_330, *PTAG_UNNAMED_330;

typedef enum _TAG_UNNAMED_331
{
  MZ_NO_COMPRESSION = 0,
  MZ_BEST_SPEED = 1,
  MZ_BEST_COMPRESSION = 9,
  MZ_UBER_COMPRESSION = 10,
  MZ_DEFAULT_LEVEL = 6,
  MZ_DEFAULT_COMPRESSION = -1,
} TAG_UNNAMED_331, *PTAG_UNNAMED_331;

typedef enum _TAG_UNNAMED_332
{
  SLOW_MOTION_LINEAR = 0,
} TAG_UNNAMED_332, *PTAG_UNNAMED_332;

enum tinfl_status
{
  TINFL_STATUS_BAD_PARAM = -3,
  TINFL_STATUS_ADLER32_MISMATCH = -2,
  TINFL_STATUS_FAILED = -1,
  TINFL_STATUS_DONE = 0,
  TINFL_STATUS_NEEDS_MORE_INPUT = 1,
  TINFL_STATUS_HAS_MORE_OUTPUT = 2,
};

class PIXProfile
{
}; /* size: 0x0001 */

typedef enum _TAG_UNNAMED_333
{
  TDEFL_HUFFMAN_ONLY = 0,
  TDEFL_DEFAULT_MAX_PROBES = 128,
  TDEFL_MAX_PROBES_MASK = 4095,
} TAG_UNNAMED_333, *PTAG_UNNAMED_333;

typedef enum _TAG_UNNAMED_334
{
  TDEFL_WRITE_ZLIB_HEADER = 4096,
  TDEFL_COMPUTE_ADLER32 = 8192,
  TDEFL_GREEDY_PARSING_FLAG = 16384,
  TDEFL_NONDETERMINISTIC_PARSING_FLAG = 0xffff8000,
  TDEFL_RLE_MATCHES = 0x10000,
  TDEFL_FILTER_MATCHES = 0x20000,
  TDEFL_FORCE_ALL_STATIC_BLOCKS = 0x40000,
  TDEFL_FORCE_ALL_RAW_BLOCKS = 0x80000,
} TAG_UNNAMED_334, *PTAG_UNNAMED_334;

enum tdefl_status
{
  TDEFL_STATUS_BAD_PARAM = -2,
  TDEFL_STATUS_PUT_BUF_FAILED = -1,
  TDEFL_STATUS_OKAY = 0,
  TDEFL_STATUS_DONE = 1,
};

enum MapProfileTrackedValue
{
  MAP_PROFILE_FILE_OPEN = 0,
  MAP_PROFILE_FILE_SEEK = 1,
  MAP_PROFILE_FILE_READ = 2,
  MAP_PROFILE_VALUE_MAX = 3,
};

enum youtubeStatus_e
{
  YT_ACCOUNT_NOT_CHECKED = 0,
  YT_ACCOUNT_CHECKING = 1,
  YT_ACCOUNT_CHECKED = 2,
  YT_ACCOUNT_GETTING_TOKEN = 3,
  YT_ACCOUNT_TOKEN_RECEIVED = 4,
  YT_WAITING_FOR_AUTH = 5,
  YT_ACCOUNT_NOT_READY = 6,
  YT_ACCOUNT_READY = 7,
  YT_ACCOUNT_AUTH_COOLOFF = 8,
};

enum dwVoteCategory_e
{
  DW_VOTE_CATEGORY_INVALID = -1,
  DW_VOTE_CATEGORY_FILM = 0,
  DW_VOTE_CATEGORY_CLIP = 1,
  DW_VOTE_CATEGORY_SCREENSHOT = 2,
  DW_VOTE_CATEGORY_CUSTOM_GAME = 3,
  DW_VOTE_CATEGORY_VIDEO = 4,
  DW_VOTE_CATEGORY_EMBLEM = 5,
  DW_VOTE_NUM_CATEGORIES = 6,
};

enum dwVote_e
{
  DW_VOTE_INVALID = -1,
  DW_VOTE_DISLIKE = 0,
  DW_VOTE_LIKE = 10,
};

struct tagCADBL
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ double* pElems;
}; /* size: 0x0008 */

enum twitchStatus_e
{
  TWITCH_ACCOUNT_NOT_CHECKED = 0,
  TWITCH_ACCOUNT_CHECKING = 1,
  TWITCH_ACCOUNT_CHECKED = 2,
  TWITCH_ACCOUNT_GETTING_INFO = 3,
  TWITCH_ACCOUNT_INFO_RECEIVED = 4,
  TWITCH_ACCOUNT_NOT_READY = 5,
  TWITCH_ACCOUNT_READY = 6,
};

typedef enum _TAG_UNNAMED_335
{
  DELEGATE_CREATE_SESSION = 0,
  DELEGATE_NUM_MSG_TYPES = 1,
} TAG_UNNAMED_335, *PTAG_UNNAMED_335;

struct FxElemVec3Range
{
  /* 0x0000 */ union vec3_t base;
  /* 0x000c */ union vec3_t amplitude;
}; /* size: 0x0018 */

struct FxElemVelStateInFrame
{
  /* 0x0000 */ struct FxElemVec3Range velocity;
  /* 0x0018 */ struct FxElemVec3Range totalDelta;
}; /* size: 0x0030 */

struct FxElemVelStateSample
{
  /* 0x0000 */ struct FxElemVelStateInFrame local;
  /* 0x0030 */ struct FxElemVelStateInFrame world;
}; /* size: 0x0060 */

enum StatsState
{
  STATS_STATE_ERROR = 0,
  STATS_STATE_READY_TO_FETCH = 1,
  STATS_STATE_FETCHING_SUBDIVISION = 2,
  STATS_STATE_FETCHED_SUBDIVISION = 3,
  STATS_STATE_FETCHING_STATS = 4,
  STATS_STATE_FETCHED = 5,
  STATS_STATE_HAVE_OUTCOMES = 6,
  STATS_STATE_DIRTY = 7,
  STATS_STATE_DIRTY_UPLOADING_STATS = 8,
  STATS_STATE_DIRTY_NEED_SUBDIVISION = 9,
  STATS_STATE_DIRTY_REFETCHING_SUBDIVISION = 10,
  NUM_STATS_STATES = 11,
};

typedef struct _XMHENDN3
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ int x : 11; /* bit position: 0 */
      /* 0x0000 */ int y : 11; /* bit position: 11 */
      /* 0x0000 */ int z : 10; /* bit position: 22 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMHENDN3, *PXMHENDN3; /* size: 0x0004 */

enum NameChangeType
{
  NAMECHANGE_SOLO_AUTO = 0,
  NAMECHANGE_TEAM_PARTY = 1,
  NAMECHANGE_TEAM_UI = 2,
};

enum bdLeague::bdWriteType
{
  LEAGUE_STAT_WRITE_REPLACE = 0,
  LEAGUE_STAT_WRITE_ADD = 1,
};

struct GenericEventScript
{
  /* 0x0000 */ struct ScriptCondition* prerequisites;
  /* 0x0004 */ struct ExpressionStatement condition;
  /* 0x0014 */ int type;
  /* 0x0018 */ BOOL fireOnTrue;
  /* 0x0019 */ char Padding_166[3];
  /* 0x001c */ const char* action;
  /* 0x0020 */ int blockID;
  /* 0x0024 */ int constructID;
  /* 0x0028 */ struct GenericEventScript* next;
}; /* size: 0x002c */

enum bdLeague::bdOrderType
{
  LEAGUE_ORDER_BY_TEAM_ID = 0,
  LEAGUE_ORDER_BY_RECENT_ACTIVITY = 1,
};

struct cachedStatsMsg_t
{
  /* 0x0000 */ unsigned char msgBuf[64];
  /* 0x0040 */ int bufLen;
}; /* size: 0x0044 */

struct scrVarPub_t
{
  /* 0x0000 */ const char* fieldBuffer;
  /* 0x0004 */ BOOL developer;
  /* 0x0005 */ BOOL developer_script;
  /* 0x0006 */ BOOL evaluate;
  /* 0x0007 */ char Padding_167;
  /* 0x0008 */ const char* error_message;
  /* 0x000c */ int error_index;
  /* 0x0010 */ unsigned int time;
  /* 0x0014 */ unsigned int timeArrayId;
  /* 0x0018 */ unsigned int pauseArrayId;
  /* 0x001c */ unsigned int levelId;
  /* 0x0020 */ unsigned int gameId;
  /* 0x0024 */ unsigned int animId;
  /* 0x0028 */ unsigned int freeEntList;
  /* 0x002c */ unsigned int tempVariable;
  /* 0x0030 */ BOOL bInited;
  /* 0x0031 */ char Padding_168;
  /* 0x0032 */ unsigned short savecount;
  /* 0x0034 */ unsigned int checksum;
  /* 0x0038 */ unsigned int entId;
  /* 0x003c */ unsigned int entFieldName;
  /* 0x0040 */ struct HunkUser* programHunkUser;
  /* 0x0044 */ unsigned char* programBuffer;
  /* 0x0048 */ unsigned char* endScriptBuffer;
  /* 0x004c */ unsigned short* saveIdMap;
  /* 0x0050 */ unsigned short* saveIdMapRev;
  /* 0x0054 */ unsigned int numScriptThreads;
  /* 0x0058 */ unsigned int numScriptValues;
  /* 0x005c */ unsigned int numScriptObjects;
  /* 0x0060 */ unsigned char* varUsagePos;
  /* 0x0064 */ int ext_threadcount;
  /* 0x0068 */ int totalObjectRefCount;
  /* 0x006c */ volatile long totalVectorRefCount;
  /* 0x0070 */ int allocationCount;
}; /* size: 0x0074 */

enum doubleXPColumns_t
{
  GROUPSTABLE_INDEX = 0,
  GROUPSTABLE_NAME = 1,
  GROUPSTABLE_STATPATH = 2,
  GROUPSTABLE_KEYARCHIVE = 3,
  GROUPSTABLE_CONTENTMASK = 4,
  GROUPSTABLE_COUNT = 5,
};

class CustomSearchInfo_FindCloseNode
{
  /* 0x0000 */ union vec3_t goalPos;
  /* 0x000c */ struct pathnode_t* closestNode;
  /* 0x0010 */ float closestDistSq;
}; /* size: 0x0014 */

enum matchmakingHopperState_t
{
  HOPPER_PARKED = 0,
  HOPPER_UNPARKED = 1,
  HOPPER_NUM_STATES = 2,
};

enum bandwidth_enum
{
  BANDWIDTH_NARROW = 0,
  BANDWIDTH_WIDE = 1,
  BANDWIDTH_ULTRAWIDE = 2,
  NUM_BANDWIDTH_MODES = 3,
};

struct PersonaStateChange_t
{
  /* 0x0000 */ unsigned __int64 m_ulSteamID;
  /* 0x0008 */ int m_nChangeFlags;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

typedef enum _TAG_UNNAMED_336
{
  ACTIVE_STATE_INACTIVE = 0,
  ACTIVE_STATE_ACTIVE = 1,
  ACTIVE_STATE_WANTS_TURRET_DISMOUNT = 2,
} TAG_UNNAMED_336, *PTAG_UNNAMED_336;

typedef enum _TAG_UNNAMED_337
{
  TURRET_REQUIRES_AI = 1,
  TURRET_AUTO = 2,
  TURRET_FIRING = 4,
  TURRET_HAS_MISS_TARGET = 8,
  TURRET_TAKEN_PAIN = 16,
  TURRET_ERROR_INITED = 32,
  TURRET_HAS_TARGET = 64,
  TURRET_BAD_TARGET = 128,
  TURRET_FIRST_PITCH_CAP = 256,
  TURRET_PITCH_CAP = 512,
  TURRET_PITCH_MIN = 1024,
  TURRET_INIT_VIEW = 2048,
  TURRET_USABLE = 4096,
  TURRET_IGNOREGOAL = 8192,
  TURRET_FIRING_DISABLED = 16384,
  TURRET_HAS_TARGET_ORIGIN = 0xffff8000,
  TURRET_HAS_TARGET_OFFSET = 0x10000,
  TURRET_TARGET_SENTIENT = 0x20000,
  TURRET_TARGET_KILLSTREAK = 0x40000,
  TURRET_SCANNING = 0x80000,
  TURRET_SCANNING_TOGGLE = 0x100000,
  TURRET_OFFLINE = 0x200000,
  TURRET_TARGET_SENTRY = 0x400000,
} TAG_UNNAMED_337, *PTAG_UNNAMED_337;

typedef struct _XMUHEND3
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int x : 11; /* bit position: 0 */
      /* 0x0000 */ unsigned int y : 11; /* bit position: 11 */
      /* 0x0000 */ unsigned int z : 10; /* bit position: 22 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMUHEND3, *PXMUHEND3; /* size: 0x0004 */

typedef enum _TAG_UNNAMED_338
{
  TARGETFLAG_ATTACKPROFILETOP = 1,
  TARGETFLAG_JAVELINONLY = 2,
  TARGETFLAG_TURRETS_NO_AQUIRE = 4,
} TAG_UNNAMED_338, *PTAG_UNNAMED_338;

enum profileLocation_e
{
  PROFILE_LOCATION_INVALID = -1,
  PROFILE_LOCATION_COMMON = 0,
  PROFILE_LOCATION_EXE = 1,
  PROFILE_LOCATION_COUNT = 2,
};

class bdIPDiscoveryConfig
{
  /* 0x0000 */ unsigned char m_retries;
  /* 0x0001 */ char Padding_169[3];
  /* 0x0004 */ float m_requestTimeout;
}; /* size: 0x0008 */

enum audio_preset
{
  AUDIO_PRESET_TREYARCH_MIX = 0,
  AUDIO_PRESET_BASS_BOOST = 1,
  AUDIO_PRESET_HIGH_BOOST = 2,
  AUDIO_PRESET_SUPERCRUNCH = 3,
  AUDIO_PRESET_HEADPHONES = 4,
  AUDIO_PRESET_COUNT = 5,
};

enum speaker_setup
{
  SPEAKER_SETUP_STEREO = 0,
  SPEAKER_SETUP_5_1 = 1,
  SPEAKER_SETUP_7_1 = 2,
  SPEAKER_SETUP_COUNT = 3,
};

class bdConnectionListener
{
}; /* size: 0x0004 */

enum DAMAGE_FLAGS
{
  DAMAGE_NOFLAG = 0,
  DAMAGE_RADIUS = 1,
  DAMAGE_ARMOR_PIERCING = 2,
  DAMAGE_NO_KNOCKBACK = 4,
  DAMAGE_PENETRATION = 8,
  DAMAGE_DESTRUCTIBLE_ENTITY = 16,
  DAMAGE_SHIELD_EXPLOSIVE_IMPACT = 32,
  DAMAGE_SHIELD_EXPLOSIVE_IMPACT_HUGE = 64,
  DAMAGE_SHIELD_EXPLOSIVE_SPLASH = 128,
};

enum VehicleManualMode
{
  VEH_MANUAL_OFF = 0,
  VEH_MANUAL_ON = 1,
  VEH_MANUAL_TRANS = 2,
};

struct IXAudio2
{
}; /* size: 0x0004 */

enum eInfluencerType
{
  INFLUENCER_TYPE_NORMAL = 0,
  INFLUENCER_TYPE_PLAYER = 1,
  INFLUENCER_TYPE_WEAPON = 2,
  INFLUENCER_TYPE_DOG = 3,
  INFLUENCER_TYPE_VEHICLE = 4,
  INFLUENCER_TYPE_SQUAD = 5,
  INFLUENCER_TYPE_GAME_MODE = 6,
  INFLUENCER_TYPE_ENEMY_SPAWNED = 7,
  INFLUENCER_TYPE_UNUSED = 8,
  MAX_INFLUENCER_TYPE = 9,
};

enum eSpawnSystemDebugLoadingMode
{
  SSDLM_BEGIN = 0,
  SSDLM_PRESETS = 1,
  SSDLM_INFLUENCERS = 2,
  SSDLM_SPAWNPOINTS = 3,
  SSDLM_CLIENTS = 4,
  SSDLM_FINALIZING = 5,
  SSDLM_COUNT = 6,
};

enum XAnimFaceEvents
{
  XANIM_FACE_CASUAL = 0,
  XANIM_FACE_ALERT = 1,
  XANIM_FACE_CQB = 2,
  XANIM_FACE_RUNNING = 3,
  XANIM_FACE_SHOOT = 4,
  XANIM_FACE_SHOOT_BURST = 5,
  XANIM_FACE_MELEE = 6,
  XANIM_FACE_REACT = 7,
  XANIM_FACE_TALK = 8,
  XANIM_FACE_TALK_LONG = 9,
  XANIM_FACE_PAIN = 10,
  XANIM_FACE_DEATH = 11,
  XANIM_FACE_NUM_EVENTS = 12,
};

typedef enum _TAG_UNNAMED_339
{
  LF_NONE = 0,
  LF_MAP_RESTART = 1,
  LF_MAP_CHANGE = 2,
  LF_EXITLEVEL = 3,
} TAG_UNNAMED_339, *PTAG_UNNAMED_339;

struct ai_orient_t
{
  /* 0x0000 */ enum ai_orient_mode_t eMode;
  /* 0x0004 */ float fDesiredLookPitch;
  /* 0x0008 */ float fDesiredLookYaw;
  /* 0x000c */ float fDesiredBodyYaw;
}; /* size: 0x0010 */

enum BloodImpactFxType
{
  BLOOD_IMPACT_NONE = 0,
  BLOOD_IMPACT_NORMAL = 1,
  BLOOD_IMPACT_HERO = 2,
  NUM_BLOOD_IMPACT_TYPES = 3,
};

typedef enum _TAG_UNNAMED_340
{
  ZBPS_CLOSED = 0,
  ZBPS_OPENING = 1,
  ZBPS_OPEN = 2,
  ZBPS_CLOSING = 3,
  ZBPS_TARGETTED_BY_ZOMBIE = 4,
} TAG_UNNAMED_340, *PTAG_UNNAMED_340;

struct BlurStackEntry
{
  /* 0x0000 */ char menuName[64];
}; /* size: 0x0040 */

struct UiMenuMap_t
{
  /* 0x0000 */ unsigned int hash;
  /* 0x0004 */ struct menuDef_t* menu;
}; /* size: 0x0008 */

struct menuClientNum_t
{
  /* 0x0000 */ struct menuDef_t* menu;
  /* 0x0004 */ enum LocalClientNum_t localClientNum;
}; /* size: 0x0008 */

struct UILocalVar
{
  /* 0x0000 */ enum UILocalVarType type;
  /* 0x0004 */ const char* name;
  union
  {
    union
    {
      /* 0x0008 */ int integer;
      /* 0x0008 */ float value;
      /* 0x0008 */ const char* string;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
}; /* size: 0x000c */

struct UILocalVarContext
{
  /* 0x0000 */ struct UILocalVar table[256];
}; /* size: 0x0c00 */

struct UiContext
{
  /* 0x0000 */ enum UIContextIndex_t contextIndex;
  /* 0x0004 */ float bias;
  /* 0x0008 */ int realTime;
  /* 0x000c */ int frameTime;
  struct
  {
    /* 0x0010 */ float x;
    /* 0x0014 */ float y;
  } /* size: 0x0008 */ cursor;
  /* 0x0018 */ int isCursorVisible;
  /* 0x001c */ int screenWidth;
  /* 0x0020 */ int screenHeight;
  /* 0x0024 */ float screenAspect;
  /* 0x0028 */ float FPS;
  /* 0x002c */ float blurRadiusOut;
  /* 0x0030 */ struct BlurStackEntry blurMenuStack[8];
  /* 0x0230 */ int blurMenuStackIndex;
  /* 0x0234 */ struct UiMenuMap_t Menus[600];
  /* 0x14f4 */ int menuCount;
  /* 0x14f8 */ struct menuClientNum_t menuStack[16];
  /* 0x1578 */ int openMenuCount;
  /* 0x157c */ BOOL enableSlideAndFadeEffectForMenu;
  /* 0x157d */ char Padding_170[3];
  /* 0x1580 */ struct UILocalVarContext localVars;
  /* 0x2180 */ struct menuDef_t* uiBlurMenu;
  /* 0x2184 */ struct menuDef_t* menuToastPopupMenu;
  /* 0x2188 */ struct menuDef_t* subtitlesMenu;
  /* 0x218c */ struct menuDef_t* cinematicSubtitlesMenu;
  /* 0x2190 */ struct UiMenuMap_t history[4];
  /* 0x21b0 */ unsigned char historyPos;
  /* 0x21b1 */ unsigned char historyCount;
  /* 0x21b2 */ char __PADDING__[2];
}; /* size: 0x21b4 */

enum animScrMode_t
{
  ASM_NORMAL = 0,
  ASM_DEATHPLANT = 1,
};

enum BlurTime
{
  BLUR_TIME_RELATIVE = 0,
  BLUR_TIME_ABSOLUTE = 1,
};

class bdLeagueSubdivisionResult
{
  /* 0x0000 */ long Padding_171[2];
  /* 0x0008 */ unsigned __int64 m_teamID;
  /* 0x0010 */ unsigned __int64 m_leagueID;
  /* 0x0018 */ unsigned __int64 m_subdivisionID;
  /* 0x0020 */ unsigned char m_metadata[64];
  /* 0x0060 */ unsigned int m_metadataLength;
}; /* size: 0x0068 */

enum BlurPriority
{
  BLUR_PRIORITY_NONE = 0,
  BLUR_PRIORITY_SCRIPT = 1,
  BLUR_PRIORITY_CODE = 2,
};

enum PlayerLinkToType
{
  PLAYERLINKTO_NORMAL = 0,
  PLAYERLINKTO_DELTA = 1,
  PLAYERLINKTO_DELTA_WEAPONVIEWONLY = 2,
  PLAYERLINKTOCNT = 3,
};

enum SaveErrorType
{
  SAVE_ERROR_MISSING_DEVICE = 0,
  SAVE_ERROR_CORRUPT_SAVE = 1,
};

typedef enum _TAG_UNNAMED_341
{
  HE_FONT_DEFAULT = 0,
  HE_FONT_BIGFIXED = 1,
  HE_FONT_SMALLFIXED = 2,
  HE_FONT_OBJECTIVE = 3,
  HE_FONT_BIG = 4,
  HE_FONT_SMALL = 5,
  HE_FONT_EXTRABIG = 6,
  HE_FONT_EXTRASMALL = 7,
  HE_FONT_COUNT = 8,
} TAG_UNNAMED_341, *PTAG_UNNAMED_341;

struct D3D11_BOX
{
  /* 0x0000 */ unsigned int left;
  /* 0x0004 */ unsigned int top;
  /* 0x0008 */ unsigned int front;
  /* 0x000c */ unsigned int right;
  /* 0x0010 */ unsigned int bottom;
  /* 0x0014 */ unsigned int back;
}; /* size: 0x0018 */

enum FxRandKey
{
  FXRAND_VELOCITY_X = 0,
  FXRAND_VELOCITY_Y = 1,
  FXRAND_VELOCITY_Z = 2,
  FXRAND_ANGULAR_VELOCITY_PITCH = 3,
  FXRAND_ANGULAR_VELOCITY_YAW = 4,
  FXRAND_ANGULAR_VELOCITY_ROLL = 5,
  FXRAND_ORIGIN_X = 6,
  FXRAND_ORIGIN_Y = 7,
  FXRAND_ORIGIN_Z = 8,
  FXRAND_OFFSET_YAW = 9,
  FXRAND_OFFSET_HEIGHT = 10,
  FXRAND_OFFSET_RADIUS = 11,
  FXRAND_ANGLES_PITCH = 12,
  FXRAND_ANGLES_YAW = 13,
  FXRAND_ANGLES_ROLL = 14,
  FXRAND_GRAVITY = 15,
  FXRAND_REFLECTION_FACTOR = 16,
  FXRAND_LIFE_SPAN = 17,
  FXRAND_SPAWN_DELAY = 18,
  FXRAND_SPAWN_COUNT = 19,
  FXRAND_EMIT_DIST = 20,
  FXRAND_VISUAL = 21,
  FXRAND_TILE_START = 22,
  FXRAND_COLOR = 23,
  FXRAND_ROTATION = 24,
  FXRAND_ROTATION_DELTA = 25,
  FXRAND_SIZE_0 = 26,
  FXRAND_SIZE_1 = 27,
  FXRAND_SCALE = 28,
  FXRAND_CLOUD_DENSITY = 29,
  FXRAND_COUNT = 30,
};

enum FxBoltType
{
  FX_BOLT_TYPE_NONE = 0,
  FX_BOLT_TYPE_BOLTED = 1,
  FX_BOLT_TYPE_DYNENT = 2,
  FX_BOLT_TYPE_MARKENT = 3,
};

enum FxUpdateResult
{
  FX_UPDATE_REMOVE = 0,
  FX_UPDATE_KEEP = 1,
};

enum GfxWarningType
{
  R_WARN_FRONTEND_ENT_LIMIT = 0,
  R_WARN_KNOWN_MODELS = 1,
  R_WARN_KNOWN_SPECIAL_MODELS = 2,
  R_WARN_TEXTURE_OVERRIDES = 3,
  R_WARN_MODEL_LIGHT_CACHE = 4,
  R_WARN_MODEL_LIGHTING_HANDLE_ALLOC_FAILED = 5,
  R_WARN_SCENE_ENTITIES = 6,
  R_WARN_TEMP_SKIN_BUF_SIZE = 7,
  R_WARN_MAX_SKINNED_CACHE_VERTICES = 8,
  R_WARN_MAX_SCENE_SURFS_SIZE = 9,
  R_WARN_MAX_SCENE_CULLINFOS_SIZE = 10,
  R_WARN_PORTAL_PLANES = 11,
  R_WARN_MAX_CLOUDS = 12,
  R_WARN_MAX_DLIGHTS = 13,
  R_WARN_SMODEL_LIGHTING = 14,
  R_WARN_MAX_DRAWSURFS = 15,
  R_WARN_GFX_CODE_MESH_LIMIT = 16,
  R_WARN_GFX_MARK_MESH_LIMIT = 17,
  R_WARN_MAX_SCENE_DRAWSURFS = 18,
  R_WARN_MAX_FX_DRAWSURFS = 19,
  R_WARN_NONEMISSIVE_FX_MATERIAL = 20,
  R_WARN_NONLIGHTMAP_MARK_MATERIAL = 21,
  R_WARN_PRIM_DRAW_SURF_BUFFER_SIZE = 22,
  R_WARN_CMDBUF_OVERFLOW = 23,
  R_WARN_MISSING_DECL_NONDEBUG = 24,
  R_WARN_MAX_DYNENT_REFS = 25,
  R_WARN_MAX_SCENE_DOBJ_REFS = 26,
  R_WARN_MAX_SCENE_MODEL_REFS = 27,
  R_WARN_MAX_SCENE_BRUSH_REFS = 28,
  R_WARN_MAX_CODE_INDS = 29,
  R_WARN_MAX_CODE_VERTS = 30,
  R_WARN_MAX_CODE_ARGS = 31,
  R_WARN_MAX_MARK_INDS = 32,
  R_WARN_MAX_MARK_VERTS = 33,
  R_WARN_DEBUG_ALLOC = 34,
  R_WARN_SPOT_LIGHT_LIMIT = 35,
  R_WARN_FX_ELEM_LIMIT = 36,
  R_WARN_VTX_DATA_OVERFLOW = 37,
  R_WARN_WORKER_CMD_SIZE = 38,
  R_WARN_UNKNOWN_STATICMODEL_SHADER = 39,
  R_WARN_UNKNOWN_XMODEL_SHADER = 40,
  R_WARN_DYNAMIC_INDEX_BUFFER_SIZE = 41,
  R_WARN_MICROCODE_BUFFER_SIZE = 42,
  R_WARN_TOO_MANY_LIGHT_GRID_POINTS = 43,
  R_WARN_MAX_TRANSFER_REQUESTS = 44,
  R_WARN_MAX_SHADER_CONSTANT_SETS = 45,
  R_WARN_SHADER_CONSTANT_SET_ALLOCATE = 46,
  R_WARN_MISSING_TECHNIQUE = 47,
  R_WARN_DEPTH_HACK_NOT_IN_DRAWLIST = 48,
  R_WARN_WORLD_IN_DEPTH_HACK_DRAWLIST = 49,
  R_WARN_VIEWMODEL_MISSING_STENCIL = 50,
  R_WARN_MARKS_ERR_PROBE_MISMATCH = 51,
  R_WARN_MARKS_ERR_LMAP_MISMATCH = 52,
  R_WARN_OCCLUSION_QUERY = 53,
  R_WARN_MAX_OCCLUSION_QUERIES = 54,
  R_WARN_FX_ACTIONS_LIMIT = 55,
  R_WARN_FX_UNIQUE_HANDLES_LIMIT = 56,
  R_WARN_MAX_QUEUED_FX_SPAWN_WORKERS = 57,
  R_WARN_TENSION_VERT_COUNT = 58,
  R_WARN_TENSION_PATCH_COUNT = 59,
  R_WARN_COUNT = 60,
};

typedef enum _TAG_UNNAMED_342
{
  FX_SPRITE_ALLOCATE = 0,
  FX_SPRITE_GENERATE = 1,
} TAG_UNNAMED_342, *PTAG_UNNAMED_342;

struct MaterialTechniqueSet
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned char worldVertFormat;
  /* 0x0005 */ char Padding_172[3];
  /* 0x0008 */ struct MaterialTechnique* techniques[36];
}; /* size: 0x0098 */

enum MarkFragmentsAgainstEnum
{
  MARK_FRAGMENTS_AGAINST_BRUSHES = 0,
  MARK_FRAGMENTS_AGAINST_MODELS = 1,
};

struct netUInt64
{
  /* 0x0000 */ unsigned int low;
  /* 0x0004 */ unsigned int high;
}; /* size: 0x0008 */

struct score_s
{
  /* 0x0000 */ int ping;
  /* 0x0004 */ int status_icon;
  /* 0x0008 */ int place;
  /* 0x000c */ int score;
  /* 0x0010 */ int kills;
  /* 0x0014 */ int assists;
  /* 0x0018 */ int deaths;
  /* 0x001c */ int wagerWinnings;
  /* 0x0020 */ int scoreboardColumns[5];
  /* 0x0034 */ int downs;
  /* 0x0038 */ int revives;
  /* 0x003c */ int headshots;
  /* 0x0040 */ int scoreMultiplier;
  /* 0x0044 */ int currentStreak;
}; /* size: 0x0048 */

struct clientState_s
{
  /* 0x0000 */ enum ClientNum_t clientIndex;
  /* 0x0004 */ enum team_t team;
  /* 0x0008 */ enum ffa_team_t ffaTeam;
  /* 0x000c */ int modelindex;
  /* 0x0010 */ int riotShieldNext;
  /* 0x0014 */ int attachModelIndex[6];
  /* 0x002c */ int attachTagIndex[6];
  /* 0x0044 */ char name[32];
  /* 0x0064 */ float maxSprintTimeMultiplier;
  /* 0x0068 */ int rank;
  union
  {
    /* 0x006c */ int prestige;
    /* 0x006c */ int lastDaysPlayed;
  }; /* size: 0x0004 */
  /* 0x0070 */ int lastDamageTime;
  /* 0x0074 */ int lastStandStartTime;
  /* 0x0078 */ int turnedHumanTime;
  /* 0x007c */ int beingRevived;
  union
  {
    /* 0x0080 */ unsigned __int64 xuid;
    /* 0x0080 */ struct netUInt64 xuid64;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0088 */ unsigned __int64 leagueTeamID;
    /* 0x0088 */ struct netUInt64 leagueTeamID64;
  }; /* size: 0x0008 */
  /* 0x0090 */ int leagueDivisionID;
  /* 0x0094 */ long Padding_173;
  union
  {
    /* 0x0098 */ unsigned __int64 leagueSubdivisionID;
    /* 0x0098 */ struct netUInt64 leagueSubdivisionID64;
  }; /* size: 0x0008 */
  /* 0x00a0 */ int leagueSubdivisionRank;
  /* 0x00a4 */ unsigned int perks[2];
  /* 0x00ac */ int voiceConnectivityBits;
  /* 0x00b0 */ char clanAbbrev[8];
  /* 0x00b8 */ int attachedVehEntNum;
  /* 0x00bc */ int attachedVehSeat;
  /* 0x00c0 */ int needsRevive;
  /* 0x00c4 */ int clanAbbrevEV;
  /* 0x00c8 */ enum VehicleAnimState vehAnimState;
  /* 0x00cc */ struct score_s score;
  /* 0x0114 */ int clientUIVisibilityFlags;
  /* 0x0118 */ int offhandWeaponVisible;
  /* 0x011c */ long __PADDING__[1];
}; /* size: 0x0120 */

typedef enum _TAG_UNNAMED_343
{
  VISDATA_VISIBLE = 1,
  VISDATA_CULL_OUT = 2,
  VISDATA_VISIBLE_SPOT = 4,
} TAG_UNNAMED_343, *PTAG_UNNAMED_343;

typedef enum _TAG_UNNAMED_344
{
  FX_FLAG_TYPE_EDITOR = 0,
  FX_FLAG_TYPE_NATIVE = 1,
  FX_FLAG_TYPE_ATLAS = 2,
  FX_FLAG_TYPE_EFFECT = 3,
  FX_FLAG_TYPE_COUNT = 4,
} TAG_UNNAMED_344, *PTAG_UNNAMED_344;

struct MaterialPass
{
  /* 0x0000 */ struct MaterialVertexDeclaration* vertexDecl;
  /* 0x0004 */ struct MaterialVertexShader* vertexShader;
  union
  {
    /* 0x0008 */ struct MaterialPixelShader* pixelShader;
    /* 0x0008 */ struct MaterialPixelShader* localPixelShader;
  }; /* size: 0x0004 */
  /* 0x000c */ unsigned char perPrimArgCount;
  /* 0x000d */ unsigned char perObjArgCount;
  /* 0x000e */ unsigned char stableArgCount;
  /* 0x000f */ unsigned char customSamplerFlags;
  /* 0x0010 */ unsigned char precompiledIndex;
  /* 0x0011 */ unsigned char materialType;
  /* 0x0012 */ char Padding_174[2];
  union
  {
    /* 0x0014 */ struct MaterialShaderArgument* localArgs;
    /* 0x0014 */ struct MaterialShaderArgument* args;
  }; /* size: 0x0004 */
}; /* size: 0x0018 */

class bdReference<bdAddrHandle>
{
  /* 0x0000 */ class bdAddrHandle* m_ptr;
}; /* size: 0x0004 */

class bdAddrHandleRefWrapper
{
  /* 0x0000 */ class bdReference<bdAddrHandle> m_handle;
}; /* size: 0x0004 */

class bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>
{
  /* 0x0000 */ unsigned int m_size;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ float m_loadFactor;
  /* 0x000c */ unsigned int m_threshold;
  /* 0x0010 */ class bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>::Node** m_map;
  /* 0x0014 */ class bdAddrHandleRefWrapper m_hashClass;
}; /* size: 0x0018 */

enum FX_DrawElement_Setup_Handle_Overtime_Enum
{
  FX_DRAWELEMENT_SETUP_DO_NOT_HANDLE_OVERTIME = 0,
  FX_DRAWELEMENT_SETUP_CLAMP_OVERTIME = 1,
};

enum FxSampleChannel
{
  FX_CHAN_RGBA = 0,
  FX_CHAN_SIZE_0 = 1,
  FX_CHAN_SIZE_1 = 2,
  FX_CHAN_SCALE = 3,
  FX_CHAN_ROTATION = 4,
  FX_CHAN_COUNT = 5,
  FX_CHAN_NONE = 6,
};

class bdPacketBufferInternal
{
  /* 0x0000 */ char m_buffer[1024];
  /* 0x0400 */ unsigned int m_offset;
  /* 0x0404 */ unsigned int m_key;
}; /* size: 0x0408 */

typedef enum _TAG_UNNAMED_345
{
  eFxActionPlaySound = 0,
} TAG_UNNAMED_345, *PTAG_UNNAMED_345;

enum DevGuiInputButton
{
  INPUT_UP = 0,
  INPUT_DOWN = 1,
  INPUT_LEFT = 2,
  INPUT_RIGHT = 3,
  INPUT_ACCEPT = 4,
  INPUT_REJECT = 5,
  INPUT_BIND = 6,
  INPUT_GRAPH_EDIT = 7,
  INPUT_GRAPH_ADD = 8,
  INPUT_GRAPH_REMOVE = 9,
  INPUT_GRAPH_SAVE = 10,
  INPUT_LINK = 11,
  INPUT_RESET = 12,
  INPUT_COUNT = 13,
};

struct searchBook_t
{
  /* 0x0000 */ class bdFileID fileIDs[10];
  /* 0x00a0 */ unsigned __int64 origFileIDs[10];
  /* 0x00f0 */ unsigned __int64 views[10];
  /* 0x0140 */ unsigned __int64 votes[10];
  /* 0x0190 */ int numFiles;
  /* 0x0194 */ int totalFiles;
  /* 0x0198 */ BOOL isDone;
  /* 0x0199 */ char __PADDING__[7];
}; /* size: 0x01a0 */

enum DevGuiInputAxis
{
  SCROLL_XAXIS = 0,
  SCROLL_YAXIS = 1,
  SCROLL_AXIS_COUNT = 2,
};

enum DevGuiInputState
{
  SCROLL_NONE = 0,
  SCROLL_PRESSED = 1,
  SCROLL_STALLED = 2,
  SCROLL_HELD = 3,
};

class bdYouTubeRegistrationResult
{
  /* 0x0000 */ long Padding_175;
  /* 0x0004 */ enum bdLobbyErrorCode m_result;
}; /* size: 0x0008 */

struct pathnode_constant_t
{
  /* 0x0000 */ enum nodeType type;
  /* 0x0004 */ int spawnflags;
  /* 0x0008 */ unsigned short targetname;
  /* 0x000a */ unsigned short script_linkName;
  /* 0x000c */ unsigned short script_noteworthy;
  /* 0x000e */ unsigned short target;
  /* 0x0010 */ unsigned short animscript;
  /* 0x0012 */ char Padding_176[2];
  /* 0x0014 */ int animscriptfunc;
  /* 0x0018 */ union vec3_t vOrigin;
  /* 0x0024 */ float fAngle;
  /* 0x0028 */ union vec2_t forward;
  /* 0x0030 */ float fRadius;
  /* 0x0034 */ float minUseDistSq;
  /* 0x0038 */ short wOverlapNode[2];
  /* 0x003c */ unsigned short totalLinkCount;
  /* 0x003e */ char Padding_177[2];
  /* 0x0040 */ struct pathlink_s* Links;
}; /* size: 0x0044 */

class SentientHandle
{
  /* 0x0000 */ unsigned short number;
  /* 0x0002 */ unsigned short infoIndex;
}; /* size: 0x0004 */

struct pathnode_dynamic_t
{
  /* 0x0000 */ class SentientHandle pOwner;
  /* 0x0004 */ int iFreeTime;
  /* 0x0008 */ int iValidTime[3];
  /* 0x0014 */ int dangerousNodeTime[3];
  /* 0x0020 */ int inPlayerLOSTime;
  /* 0x0024 */ short wLinkCount;
  /* 0x0026 */ short wOverlapCount;
  /* 0x0028 */ short turretEntNumber;
  /* 0x002a */ short userCount;
  /* 0x002c */ BOOL hasBadPlaceLink;
  /* 0x002d */ char __PADDING__[3];
}; /* size: 0x0030 */

struct pathnode_transient_t
{
  /* 0x0000 */ int iSearchFrame;
  /* 0x0004 */ struct pathnode_t* pNextOpen;
  /* 0x0008 */ struct pathnode_t* pPrevOpen;
  /* 0x000c */ struct pathnode_t* pParent;
  /* 0x0010 */ float fCost;
  /* 0x0014 */ float fHeuristic;
  union
  {
    /* 0x0018 */ float nodeCost;
    /* 0x0018 */ int linkIndex;
  }; /* size: 0x0004 */
}; /* size: 0x001c */

struct pathnode_t
{
  /* 0x0000 */ struct pathnode_constant_t constant;
  /* 0x0044 */ struct pathnode_dynamic_t dynamic;
  /* 0x0074 */ struct pathnode_transient_t transient;
}; /* size: 0x0090 */

enum DevGuiTokenResult
{
  DEVGUI_TOKEN_ERROR = 0,
  DEVGUI_TOKEN_MORE = 1,
  DEVGUI_TOKEN_LAST = 2,
};

enum XZoneState
{
  XZONE_UNLOADING = -1,
  XZONE_EMPTY = 0,
  XZONE_LOADING = 1,
  XZONE_LOADED = 2,
  XZONE_COMPLETE = 3,
};

typedef enum _TAG_UNNAMED_346
{
  DM_MAIN_MEMORY = 0,
  DM_VIDEO_MEMORY = 1,
  DM_STREAMER_RESERVE = 2,
  DM_MEMORY_LOCATION_COUNT = 3,
} TAG_UNNAMED_346, *PTAG_UNNAMED_346;

typedef enum _TAG_UNNAMED_347
{
  ENT_DRAW_DOBJ = 0,
  ENT_DRAW_BRUSH = 1,
  ENT_DRAW_COUNT = 2,
} TAG_UNNAMED_347, *PTAG_UNNAMED_347;

enum MaterialWorldVertexFormat
{
  MTL_WORLDVERT_TEX_1_NRM_1 = 0,
  MTL_WORLDVERT_TEX_2_NRM_1 = 1,
  MTL_WORLDVERT_TEX_2_NRM_2 = 2,
  MTL_WORLDVERT_TEX_3_NRM_1 = 3,
  MTL_WORLDVERT_TEX_3_NRM_2 = 4,
  MTL_WORLDVERT_TEX_3_NRM_3 = 5,
  MTL_WORLDVERT_TEX_4_NRM_1 = 6,
  MTL_WORLDVERT_TEX_4_NRM_2 = 7,
  MTL_WORLDVERT_TEX_4_NRM_3 = 8,
};

struct pathstatic_t
{
  /* 0x0000 */ struct pathlink_s* pathLinks;
  /* 0x0004 */ unsigned short* indirectNodes;
  /* 0x0008 */ unsigned char* pathbuf;
}; /* size: 0x000c */

class rigid_body_constraint_wheel
{
  /* 0x0000 */ long Padding_178[4];
  /* 0x0010 */ class phys_vec3 m_b2_hitp_loc;
  /* 0x0020 */ class phys_vec3 m_b2_hitn_loc;
  /* 0x0030 */ class phys_vec3 m_b1_wheel_center_loc;
  /* 0x0040 */ class phys_vec3 m_b1_suspension_dir_loc;
  /* 0x0050 */ class phys_vec3 m_b1_wheel_axis_loc;
  /* 0x0060 */ float m_wheel_radius;
  /* 0x0064 */ float m_fwd_fric_k;
  /* 0x0068 */ float m_side_fric_k;
  /* 0x006c */ float m_side_fric_max;
  /* 0x0070 */ float m_suspension_stiffness_k;
  /* 0x0074 */ float m_suspension_damp_k;
  /* 0x0078 */ float m_hard_limit_dist;
  /* 0x007c */ float m_roll_stability_factor;
  /* 0x0080 */ float m_pitch_stability_factor;
  /* 0x0084 */ float m_turning_radius_ratio_max_speed;
  /* 0x0088 */ float m_turning_radius_ratio_accel;
  /* 0x008c */ float m_desired_speed_k;
  /* 0x0090 */ float m_acceleration_factor_k;
  /* 0x0094 */ float m_braking_factor_k;
  /* 0x0098 */ float m_wheel_vel;
  /* 0x009c */ float m_wheel_fwd;
  /* 0x00a0 */ float m_wheel_pos;
  /* 0x00a4 */ float m_wheel_displaced_center_dist;
  /* 0x00a8 */ float m_wheel_normal_force;
  /* 0x00ac */ unsigned int m_wheel_state;
  /* 0x00b0 */ unsigned int m_wheel_flags;
  /* 0x00b4 */ class pulse_sum_cache m_ps_cache_list[4];
  /* 0x00c4 */ class pulse_sum_normal* m_ps_suspension;
  /* 0x00c8 */ class pulse_sum_normal* m_ps_side_fric;
  /* 0x00cc */ class pulse_sum_normal* m_ps_fwd_fric;
}; /* size: 0x00d0 */

class phys_free_list<rigid_body_constraint_wheel>::T_internal
{
  /* 0x0000 */ long Padding_179[4];
  /* 0x0010 */ class rigid_body_constraint_wheel m_data;
  /* 0x00e0 */ int m_ptr_list_index;
}; /* size: 0x00f0 */

enum ProberMode
{
  PROBER_UNDEFINED = 0,
  PROBER_SEARCH = 1,
  PROBER_MERGE = 2,
  PROBER_INVITE = 3,
  PROBER_NEWLOBBY = 4,
  PROBER_CLIENT = 5,
};

enum ProberState
{
  STATE_IDLE = 0,
  STATE_WAITING_FOR_HOSTS = 1,
  STATE_QOS_IN_PROGRESS = 2,
  STATE_QOS_COMPLETE = 3,
  STATE_ASSOCIATING = 4,
  STATE_HANDSHAKING = 5,
  STATE_HOST_FAILED = 6,
  STATE_NO_HOSTS = 7,
  STATE_SEARCH_EXHAUSTED = 8,
  STATE_CLIENT_ASSOCIATING = 9,
  STATE_CLIENT_HANDSHAKING = 10,
  STATE_CLIENT_CONNECTED = 11,
  STATE_CLIENT_FAILED = 12,
  STATE_HOST_ACCEPT = 13,
  STATE_CLIENTS_AGREE = 14,
  STATE_ALL_IN = 15,
  STATE_ERROR = 16,
};

enum PartyProberStatus
{
  PARTY_PROBER_NO_STATUS = 0,
  PARTY_PROBER_IDLE = 1,
  PARTY_PROBER_WORKING = 2,
  PARTY_PROBER_READY_TO_JOIN = 3,
  PARTY_PROBER_SEARCH_FAILED = 4,
  PARTY_PROBER_FORCED_ERROR = 5,
};

struct LeaderboardEntry_t
{
  /* 0x0000 */ class CSteamID m_steamIDUser;
  /* 0x0008 */ int m_nGlobalRank;
  /* 0x000c */ int m_nScore;
  /* 0x0010 */ int m_cDetails;
  /* 0x0014 */ long Padding_180;
  /* 0x0018 */ unsigned __int64 m_hUGC;
}; /* size: 0x0020 */

class phys_free_list<rigid_body_constraint_wheel>::iterator
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_wheel>::T_internal_base* m_ptr;
}; /* size: 0x0004 */

struct D3D11_TEXTURE2D_DESC
{
  /* 0x0000 */ unsigned int Width;
  /* 0x0004 */ unsigned int Height;
  /* 0x0008 */ unsigned int MipLevels;
  /* 0x000c */ unsigned int ArraySize;
  /* 0x0010 */ enum DXGI_FORMAT Format;
  /* 0x0014 */ struct DXGI_SAMPLE_DESC SampleDesc;
  /* 0x001c */ enum D3D11_USAGE Usage;
  /* 0x0020 */ unsigned int BindFlags;
  /* 0x0024 */ unsigned int CPUAccessFlags;
  /* 0x0028 */ unsigned int MiscFlags;
}; /* size: 0x002c */

struct gjk_base_t
{
  /* 0x0000 */ long Padding_181[4];
  /* 0x0010 */ class phys_vec3 m_aabb_mn_loc;
  /* 0x0020 */ class phys_vec3 m_aabb_mx_loc;
  /* 0x0030 */ unsigned int m_gjk_geom_id;
  /* 0x0034 */ const class phys_mat44* m_xform_;
  /* 0x0038 */ struct gjk_base_t* m_next_geom;
  /* 0x003c */ unsigned int m_flags;
  /* 0x0040 */ int stype;
  /* 0x0044 */ int m_contents;
  /* 0x0048 */ long __PADDING__[2];
}; /* size: 0x0050 */

enum ConnectStatus
{
  PENDING = 0,
  CONNECTED = 1,
  DISCONNECTED = 2,
};

class bdFastArray<void (__cdecl*)(void)>
{
  /* 0x0000 */ void** m_data /* function */;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

class bdSingletonRegistryImpl
{
  /* 0x0000 */ long Padding_182;
  /* 0x0004 */ class bdFastArray<void (__cdecl*)(void)> m_destroyFunctions;
  /* 0x0010 */ BOOL m_cleaningUp;
}; /* size: 0x0014 */

enum partydebugValue_t
{
  PARTYSTATEDEBUG_BEGIN = 0,
  PARTYSTATEDEBUG_AFTER_WRITEMODES = 1,
  PARTYSTATEDEBUG_AFTER_ID = 2,
  PARTYSTATEDEBUG_AFTER_HOSTADDR = 3,
  PARTYSTATEDEBUG_AFTER_HOSTUISTRING = 4,
  PARTYSTATEDEBUG_AFTER_NONCEANDFLAGS = 5,
  PARTYSTATEDEBUG_AFTER_LOBBYFLAGSANDTIMES = 6,
  PARTYSTATEDEBUG_AFTER_SLOTS = 7,
  PARTYSTATEDEBUG_AFTER_MIGRATEBITS = 8,
  PARTYSTATEDEBUG_AFTER_VETOBITS = 9,
  PARTYSTATEDEBUG_AFTER_SESSIONINFO = 10,
  PARTYSTATEDEBUG_AFTER_PRESENCE = 11,
  PARTYSTATEDEBUG_AFTERMAPFLAGS = 12,
  PARTYSTATEDEBUG_MEMBERMARKER = 13,
  PARTYSTATEDEBUG_AFTERMEMBERS = 14,
  PARTYSTATEDEBUG_BEFORE_MEMBER = 15,
  PARTYSTATEDEBUG_AFTER_MEMBER = 16,
};

typedef enum _TAG_UNNAMED_348
{
  SEARCH_PREFERENCE_NORMAL = 0,
  SEARCH_PREFERENCE_BEST = 1,
  SEARCH_PREFERENCE_ANY = 2,
} TAG_UNNAMED_348, *PTAG_UNNAMED_348;

struct D3D11_SUBRESOURCE_DATA
{
  /* 0x0000 */ const void* pSysMem;
  /* 0x0004 */ unsigned int SysMemPitch;
  /* 0x0008 */ unsigned int SysMemSlicePitch;
}; /* size: 0x000c */

class bdQoSRemoteAddr
{
  /* 0x0000 */ class bdReference<bdCommonAddr> m_addr;
  /* 0x0004 */ class bdSecurityID m_id;
  /* 0x000c */ class bdSecurityKey m_key;
}; /* size: 0x001c */

enum PartyMemberProbation
{
  MEMBER_PROBATION_PUBLIC = 0,
  MEMBER_PROBATION_LEAGUE = 1,
};

enum PeerDataPacketType
{
  PEER_DATA_VOICE_PACKET = 0,
  PEER_DATA_DATA_PACKET = 1,
  PEER_DATA_NUM_PACKET_TYPES = 2,
};

typedef enum _TAG_UNNAMED_349
{
  RENDERCMD_BEGINFRAME = 1,
  RENDERCMD_ENDFRAME = 2,
  RENDERCMD_LEFTEYE = 4,
  RENDERCMD_RIGHTEYE = 8,
  RENDERCMD_ENDEYE = 16,
} TAG_UNNAMED_349, *PTAG_UNNAMED_349;

struct tagDEC
{
  /* 0x0000 */ unsigned short wReserved;
  union
  {
    struct
    {
      /* 0x0002 */ unsigned char scale;
      /* 0x0003 */ unsigned char sign;
    }; /* size: 0x0002 */
    /* 0x0002 */ unsigned short signscale;
  }; /* size: 0x0002 */
  /* 0x0004 */ unsigned long Hi32;
  union
  {
    struct
    {
      /* 0x0008 */ unsigned long Lo32;
      /* 0x000c */ unsigned long Mid32;
    }; /* size: 0x0008 */
    /* 0x0008 */ unsigned __int64 Lo64;
  }; /* size: 0x0008 */
}; /* size: 0x0010 */

struct tagVARIANT
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short vt;
      /* 0x0002 */ unsigned short wReserved1;
      /* 0x0004 */ unsigned short wReserved2;
      /* 0x0006 */ unsigned short wReserved3;
      union
      {
        /* 0x0008 */ __int64 llVal;
        /* 0x0008 */ long lVal;
        /* 0x0008 */ unsigned char bVal;
        /* 0x0008 */ short iVal;
        /* 0x0008 */ float fltVal;
        /* 0x0008 */ double dblVal;
        /* 0x0008 */ short boolVal;
        /* 0x0008 */ long scode;
        /* 0x0008 */ union tagCY cyVal;
        /* 0x0008 */ double date;
        /* 0x0008 */ wchar_t* bstrVal;
        /* 0x0008 */ struct IUnknown* punkVal;
        /* 0x0008 */ struct IDispatch* pdispVal;
        /* 0x0008 */ struct tagSAFEARRAY* parray;
        /* 0x0008 */ unsigned char* pbVal;
        /* 0x0008 */ short* piVal;
        /* 0x0008 */ long* plVal;
        /* 0x0008 */ __int64* pllVal;
        /* 0x0008 */ float* pfltVal;
        /* 0x0008 */ double* pdblVal;
        /* 0x0008 */ short* pboolVal;
        /* 0x0008 */ long* pscode;
        /* 0x0008 */ union tagCY* pcyVal;
        /* 0x0008 */ double* pdate;
        /* 0x0008 */ wchar_t** pbstrVal;
        /* 0x0008 */ struct IUnknown** ppunkVal;
        /* 0x0008 */ struct IDispatch** ppdispVal;
        /* 0x0008 */ struct tagSAFEARRAY** pparray;
        /* 0x0008 */ struct tagVARIANT* pvarVal;
        /* 0x0008 */ void* byref;
        /* 0x0008 */ char cVal;
        /* 0x0008 */ unsigned short uiVal;
        /* 0x0008 */ unsigned long ulVal;
        /* 0x0008 */ unsigned __int64 ullVal;
        /* 0x0008 */ int intVal;
        /* 0x0008 */ unsigned int uintVal;
        /* 0x0008 */ struct tagDEC* pdecVal;
        /* 0x0008 */ char* pcVal;
        /* 0x0008 */ unsigned short* puiVal;
        /* 0x0008 */ unsigned long* pulVal;
        /* 0x0008 */ unsigned __int64* pullVal;
        /* 0x0008 */ int* pintVal;
        /* 0x0008 */ unsigned int* puintVal;
        struct
        {
          /* 0x0008 */ void* pvRecord;
          /* 0x000c */ struct IRecordInfo* pRecInfo;
        }; /* size: 0x0008 */
      }; /* size: 0x0008 */
    }; /* size: 0x0010 */
    /* 0x0000 */ struct tagDEC decVal;
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

struct tagPARAMDESCEX
{
  /* 0x0000 */ unsigned long cBytes;
  /* 0x0004 */ long Padding_183;
  /* 0x0008 */ struct tagVARIANT varDefaultValue;
}; /* size: 0x0018 */

enum wagerMedalTableColumns_t
{
  WAGER_MEDAL_COLUMN_INDEX = 0,
  WAGER_MEDAL_COLUMN_STAT_NAME = 1,
  WAGER_MEDAL_COLUMN_NAME = 2,
  WAGER_MEDAL_COLUMN_DESC = 3,
  WAGER_MEDAL_COLUMN_CP_TEAMBASED = 4,
  WAGER_MEDAL_COLUMN_CP_FFA = 5,
};

class ISteamMatchmaking
{
}; /* size: 0x0004 */

enum medalTableColumns_t
{
  MEDAL_COLUMN_SCRIPT_REFERENCE = 0,
  MEDAL_COLUMN_MEDAL_STRING = 1,
};

typedef enum _TAG_UNNAMED_350
{
  KEYS_ALL = 0,
  KEYS_GAMEPAD_ONLY = 1,
} TAG_UNNAMED_350, *PTAG_UNNAMED_350;

struct ActorString
{
  /* 0x0000 */ unsigned short properName;
  /* 0x0002 */ unsigned short weaponName;
  /* 0x0004 */ unsigned short primaryWeaponName;
  /* 0x0006 */ unsigned short secondaryWeaponName;
  /* 0x0008 */ unsigned short sideArmName;
  /* 0x000a */ unsigned short anim_pose;
  /* 0x000c */ unsigned short scriptState;
  /* 0x000e */ unsigned short lastScriptState;
  /* 0x0010 */ unsigned short stateChangeReason;
  /* 0x0012 */ char Padding_184[2];
  /* 0x0014 */ int iUseHintString;
}; /* size: 0x0018 */

enum LocSelInputState
{
  LOC_SEL_INPUT_NONE = 0,
  LOC_SEL_INPUT_CONFIRM = 1,
  LOC_SEL_INPUT_YAW = 2,
  LOC_SEL_INPUT_CANCEL = 3,
};

enum GamepadMapping
{
  GPAD_MAP_LINEAR = 0,
  GPAD_MAP_SQUARED = 1,
  GPAD_MAP_COUNT = 2,
  GPAD_MAP_NONE = -1,
};

enum CompositeState
{
  COMPOSITE_STATE_IDLE = 0,
  COMPOSITE_STATE_PRE = 1,
  COMPOSITE_STATE_RENDERING = 2,
  COMPOSITE_STATE_COMPLETE = 3,
};

enum ClientViewViewportSize
{
  VIEWPORT_LARGE = 0,
  VIEWPORT_SMALL = 1,
};

typedef enum _TAG_UNNAMED_351
{
  KB_LEFT = 0,
  KB_RIGHT = 1,
  KB_FORWARD = 2,
  KB_BACK = 3,
  KB_LOOKUP = 4,
  KB_LOOKDOWN = 5,
  KB_MOVELEFT = 6,
  KB_MOVERIGHT = 7,
  KB_STRAFE = 8,
  KB_SPEED = 9,
  KB_UP = 10,
  KB_DOWN = 11,
  KB_ANYUP = 12,
  KB_MLOOK = 13,
  KB_SPECTATE = 14,
  KB_SPECNEXT = 15,
  KB_SPECPREV = 16,
  KB_ATTACK = 17,
  KB_BREATH = 18,
  KB_FRAG = 19,
  KB_OFFHANDSECONDARY = 20,
  KB_THROWBACK = 21,
  KB_MELEE = 22,
  KB_ACTIVATE = 23,
  KB_RELOAD = 24,
  KB_USE_RELOAD = 25,
  KB_LEANLEFT = 26,
  KB_LEANRIGHT = 27,
  KB_PRONE = 28,
  KB_CROUCH = 29,
  KB_THROW = 30,
  KB_STANCE = 31,
  KB_SPRINT = 32,
  KB_NIGHTVISION = 33,
  KB_GAS = 34,
  KB_REVERSE = 35,
  KB_HANDBRAKE = 36,
  KB_SWITCHSEAT = 37,
  KB_VEHICLEATTACK = 38,
  KB_VEHICLEATTACKSECOND = 39,
  KB_VEHICLEMOVEUP = 40,
  KB_VEHICLEMOVEDOWN = 41,
  KB_VEHICLEBOOST = 42,
  KB_JAM = 43,
  KB_TALK = 44,
  NUM_BUTTONS = 45,
} TAG_UNNAMED_351, *PTAG_UNNAMED_351;

typedef enum _TAG_UNNAMED_352
{
  WEAP_ANIM_VIEWMODEL_START = 0,
  WEAP_ANIM_VIEWMODEL_END = 85,
} TAG_UNNAMED_352, *PTAG_UNNAMED_352;

struct pathnode_resized_links_t
{
  /* 0x0000 */ struct pathnode_t* m_node;
  /* 0x0004 */ struct pathlink_s* m_original_links;
  /* 0x0008 */ int m_original_link_count;
  /* 0x000c */ struct pathlink_s* m_new_links;
  /* 0x0010 */ int m_new_link_count;
}; /* size: 0x0014 */

enum LaserOwnerEnum
{
  LASER_OWNER_NON_PLAYER = 0,
  LASER_OWNER_PLAYER = 1,
};

enum tagColorIndexs
{
  TAG_WEAPON_LEFT_COLOR = 0,
  TAG_WEAPON_RIGHT_COLOR = 1,
  TAG_INHAND_COLOR = 2,
  TAG_STOWED_BACK_COLOR = 3,
  TAG_WEAPON_CHEST_COLOR = 4,
  TAG_EYE_COLOR = 5,
};

enum WeaponOptions::ReticleType
{
  RETICLE_REFLEX = 0,
  RETICLE_REFLEX_PISTOL = 1,
  RETICLE_ACOG = 2,
  RETICLE_HOLO = 3,
  RETICLE_COMBO_UP = 4,
  RETICLE_COMBO_DOWN = 5,
  RETICLE_LONGBREATH = 6,
  RETICLE_COUNT = 7,
};

typedef enum _TAG_UNNAMED_353
{
  DTYPE_BOOL = 0,
  DTYPE_FLOAT = 1,
  DTYPE_VEC3 = 2,
  DTYPE_VEC4 = 3,
  DTYPE_STEPFLOAT = 4,
  DTYPE_INTEGER = 5,
  DTYPE_MATERIAL = 6,
} TAG_UNNAMED_353, *PTAG_UNNAMED_353;

struct gameTypeRow_t
{
  /* 0x0000 */ int refHash;
  /* 0x0004 */ int hardcoreRefHash;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned int hardcoreAllowed : 1; /* bit position: 0 */
    /* 0x0008 */ unsigned int isValid : 1; /* bit position: 1 */
    /* 0x0008 */ unsigned int isParty : 1; /* bit position: 2 */
    /* 0x0008 */ unsigned int row : 7; /* bit position: 3 */
  }; /* bitfield */
}; /* size: 0x000c */

struct PlayerVehicleState
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ union vec3_t angles;
  /* 0x0018 */ union vec3_t velocity;
  /* 0x0024 */ union vec3_t angVelocity;
  /* 0x0030 */ union vec2_t tilt;
  /* 0x0038 */ union vec2_t tiltVelocity;
  /* 0x0040 */ float targetHeightDelta;
  /* 0x0044 */ float lastGroundHeight;
  /* 0x0048 */ int entity;
  /* 0x004c */ int flags;
  /* 0x0050 */ BOOL fullPhysics;
  /* 0x0051 */ char __PADDING__[3];
}; /* size: 0x0054 */

struct PlayerHeldWeapon
{
  /* 0x0000 */ union Weapon weapon;
  /* 0x0004 */ struct renderOptions_s options;
  /* 0x0008 */ float heatPercent;
  /* 0x000c */ int fuelTankTime;
  /* 0x0010 */ int adsZoomSelect;
  /* 0x0014 */ BOOL overHeating;
  /* 0x0015 */ BOOL needsRechamber;
  /* 0x0016 */ BOOL heldBefore;
  /* 0x0017 */ BOOL quickReload;
  /* 0x0018 */ BOOL blockWeaponPickup;
  /* 0x0019 */ unsigned char model;
  /* 0x001a */ char __PADDING__[2];
}; /* size: 0x001c */

struct AmmoPool
{
  /* 0x0000 */ int count;
}; /* size: 0x0004 */

struct AmmoClip
{
  /* 0x0000 */ int count;
}; /* size: 0x0004 */

struct SprintState
{
  /* 0x0000 */ int sprintButtonUpRequired;
  /* 0x0004 */ int sprintDelay;
  /* 0x0008 */ int lastSprintStart;
  /* 0x000c */ int lastSprintEnd;
  /* 0x0010 */ int sprintStartMaxLength;
  /* 0x0014 */ int sprintDuration;
  /* 0x0018 */ int sprintCooldown;
}; /* size: 0x001c */

struct MantleState
{
  /* 0x0000 */ float yaw;
  /* 0x0004 */ int timer;
  /* 0x0008 */ int transIndex;
  /* 0x000c */ int flags;
}; /* size: 0x0010 */

struct ActionSlotParam_SpecifyWeapon
{
  /* 0x0000 */ union Weapon weapon;
}; /* size: 0x0004 */

struct ActionSlotParam
{
  /* 0x0000 */ struct ActionSlotParam_SpecifyWeapon specifyWeapon;
}; /* size: 0x0004 */

struct objective_t
{
  /* 0x0000 */ enum objectiveState_t state;
  /* 0x0004 */ union vec3_t origin;
  /* 0x0010 */ short entNum;
  /* 0x0012 */ char Padding_185[2];
  /* 0x0014 */ union vec2_t size;
  /* 0x001c */ int icon;
  /* 0x0020 */ short ownerNum;
  /* 0x0022 */ unsigned short name;
  /* 0x0024 */ short teamMask;
  /* 0x0026 */ unsigned char progress;
  /* 0x0027 */ char Padding_186;
  /* 0x0028 */ int clientUseMask[1];
  /* 0x002c */ unsigned char gamemodeFlags;
  /* 0x002d */ unsigned char flags;
  /* 0x002e */ unsigned char teamNum;
  /* 0x002f */ char __PADDING__[1];
}; /* size: 0x0030 */

union hudelem_color_t
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char r;
      /* 0x0001 */ unsigned char g;
      /* 0x0002 */ unsigned char b;
      /* 0x0003 */ unsigned char a;
    }; /* size: 0x0004 */
    /* 0x0000 */ int rgba;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct hudelem_s
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
  /* 0x0008 */ float z;
  /* 0x000c */ float fontScale;
  /* 0x0010 */ float fromFontScale;
  /* 0x0014 */ int fontScaleStartTime;
  /* 0x0018 */ union hudelem_color_t color;
  /* 0x001c */ union hudelem_color_t fromColor;
  /* 0x0020 */ int fadeStartTime;
  /* 0x0024 */ int scaleStartTime;
  /* 0x0028 */ float fromX;
  /* 0x002c */ float fromY;
  /* 0x0030 */ int moveStartTime;
  /* 0x0034 */ int time;
  /* 0x0038 */ int duration;
  /* 0x003c */ float value;
  /* 0x0040 */ float sort;
  /* 0x0044 */ union hudelem_color_t glowColor;
  /* 0x0048 */ int fxBirthTime;
  /* 0x004c */ unsigned int flags;
  /* 0x0050 */ short targetEntNum;
  /* 0x0052 */ short fontScaleTime;
  /* 0x0054 */ short fadeTime;
  /* 0x0056 */ short label;
  /* 0x0058 */ short width;
  /* 0x005a */ short height;
  /* 0x005c */ short fromWidth;
  /* 0x005e */ short fromHeight;
  /* 0x0060 */ short scaleTime;
  /* 0x0062 */ short moveTime;
  /* 0x0064 */ short text;
  /* 0x0066 */ unsigned short fxLetterTime;
  /* 0x0068 */ unsigned short fxDecayStartTime;
  /* 0x006a */ unsigned short fxDecayDuration;
  /* 0x006c */ unsigned short fxRedactDecayStartTime;
  /* 0x006e */ unsigned short fxRedactDecayDuration;
  /* 0x0070 */ unsigned char type;
  /* 0x0071 */ unsigned char font;
  /* 0x0072 */ unsigned char alignOrg;
  /* 0x0073 */ unsigned char alignScreen;
  /* 0x0074 */ unsigned char materialIndex;
  /* 0x0075 */ unsigned char offscreenMaterialIdx;
  /* 0x0076 */ unsigned char fromAlignOrg;
  /* 0x0077 */ unsigned char fromAlignScreen;
  /* 0x0078 */ unsigned char soundID;
  /* 0x0079 */ char ui3dWindow;
  /* 0x007a */ char __PADDING__[2];
}; /* size: 0x007c */

struct playerState_s
{
  /* 0x0000 */ int commandTime;
  /* 0x0004 */ int pm_type;
  /* 0x0008 */ int bobCycle;
  /* 0x000c */ int pm_flags;
  /* 0x0010 */ __int64 weapFlags;
  /* 0x0018 */ int otherFlags;
  /* 0x001c */ int pm_time;
  /* 0x0020 */ unsigned int loopSoundId;
  /* 0x0024 */ int loopSoundFade;
  /* 0x0028 */ union vec3_t origin;
  /* 0x0034 */ union vec3_t velocity;
  /* 0x0040 */ int remoteEyesEnt;
  /* 0x0044 */ int remoteEyesTagname;
  /* 0x0048 */ int remoteControlEnt;
  /* 0x004c */ int weaponTime;
  /* 0x0050 */ int weaponDelay;
  /* 0x0054 */ int weaponTimeLeft;
  /* 0x0058 */ int weaponDelayLeft;
  /* 0x005c */ int weaponIdleTime;
  /* 0x0060 */ int grenadeTimeLeft;
  /* 0x0064 */ int throwBackGrenadeOwner;
  /* 0x0068 */ int throwBackGrenadeTimeLeft;
  /* 0x006c */ int weaponRestrictKickTime;
  /* 0x0070 */ BOOL mountAvailable;
  /* 0x0071 */ BOOL bRunLeftGun;
  /* 0x0072 */ BOOL bCarryingTurret;
  /* 0x0073 */ char Padding_187;
  /* 0x0074 */ union vec3_t mountPos;
  /* 0x0080 */ float mountDir;
  /* 0x0084 */ BOOL bThirdPerson;
  /* 0x0085 */ char Padding_188[3];
  /* 0x0088 */ int foliageSoundTime;
  /* 0x008c */ int gravity;
  /* 0x0090 */ float leanf;
  /* 0x0094 */ int speed;
  /* 0x0098 */ union vec3_t delta_angles;
  /* 0x00a4 */ int groundEntityNum;
  /* 0x00a8 */ int moverEntityNum;
  /* 0x00ac */ int moverTimestamp;
  /* 0x00b0 */ int groundType;
  /* 0x00b4 */ union vec3_t vLadderVec;
  /* 0x00c0 */ int jumpTime;
  /* 0x00c4 */ float jumpOriginZ;
  /* 0x00c8 */ int slideTime;
  /* 0x00cc */ int moveType;
  /* 0x00d0 */ int legsTimer;
  /* 0x00d4 */ int torsoTimer;
  /* 0x00d8 */ short legsAnim;
  /* 0x00da */ short torsoAnim;
  /* 0x00dc */ int legsAnimDuration;
  /* 0x00e0 */ int torsoAnimDuration;
  /* 0x00e4 */ int damageTimer;
  /* 0x00e8 */ int damageDuration;
  /* 0x00ec */ int dmgDirection;
  /* 0x00f0 */ int dmgType;
  /* 0x00f4 */ int corpseIndex;
  /* 0x00f8 */ int movementDir;
  /* 0x00fc */ int eFlags;
  /* 0x0100 */ int eFlags2;
  /* 0x0104 */ struct PlayerVehicleState vehicleState;
  /* 0x0158 */ short predictableEventSequence;
  /* 0x015a */ short predictableEventSequenceOld;
  /* 0x015c */ int predictableEvents[4];
  /* 0x016c */ unsigned int predictableEventParms[4];
  /* 0x017c */ short unpredictableEventSequence;
  /* 0x017e */ short unpredictableEventSequenceOld;
  /* 0x0180 */ int unpredictableEvents[4];
  /* 0x0190 */ unsigned int unpredictableEventParms[4];
  /* 0x01a0 */ enum ClientNum_t clientNum;
  /* 0x01a4 */ union Weapon offHandWeapon;
  /* 0x01a8 */ enum OffhandSecondaryClass offhandSecondary;
  /* 0x01ac */ enum OffhandPrimaryClass offhandPrimary;
  /* 0x01b0 */ struct renderOptions_s renderOptions;
  /* 0x01b4 */ int momentum;
  /* 0x01b8 */ union Weapon weapon;
  /* 0x01bc */ union Weapon lastStandPrevWeapon;
  /* 0x01c0 */ union Weapon lastWeaponAltModeSwitch;
  /* 0x01c4 */ union Weapon stowedWeapon;
  /* 0x01c8 */ unsigned char unusedCompatibilityPadding;
  /* 0x01c9 */ char Padding_189[3];
  /* 0x01cc */ union Weapon meleeWeapon;
  /* 0x01d0 */ int weaponstate;
  /* 0x01d4 */ int weaponstateLeft;
  /* 0x01d8 */ unsigned int weaponShotCount;
  /* 0x01dc */ unsigned int weaponShotCountLeft;
  /* 0x01e0 */ float fWeaponPosFrac;
  /* 0x01e4 */ int adsDelayTime;
  /* 0x01e8 */ int spreadOverride;
  /* 0x01ec */ int spreadOverrideState;
  /* 0x01f0 */ float weaponSpinLerp;
  /* 0x01f4 */ int viewmodelIndex;
  /* 0x01f8 */ union vec3_t viewangles;
  /* 0x0204 */ int viewHeightTarget;
  /* 0x0208 */ float viewHeightCurrent;
  /* 0x020c */ int viewHeightLerpTime;
  /* 0x0210 */ int viewHeightLerpTarget;
  /* 0x0214 */ int viewHeightLerpDown;
  /* 0x0218 */ union vec2_t viewAngleClampBase;
  /* 0x0220 */ union vec2_t viewAngleClampRange;
  /* 0x0228 */ int damageEvent;
  /* 0x022c */ int damageYaw;
  /* 0x0230 */ int damagePitch;
  /* 0x0234 */ int damageCount;
  /* 0x0238 */ int stats[4];
  /* 0x0248 */ struct PlayerHeldWeapon heldWeapons[15];
  /* 0x03ec */ struct AmmoPool ammoNotInClip[15];
  /* 0x0428 */ struct AmmoClip ammoInClip[15];
  /* 0x0464 */ float proneDirection;
  /* 0x0468 */ float proneDirectionPitch;
  /* 0x046c */ float proneTorsoPitch;
  /* 0x0470 */ enum ViewLockTypes viewlocked;
  /* 0x0474 */ short viewlocked_entNum;
  /* 0x0476 */ char Padding_190[2];
  /* 0x0478 */ int vehiclePos;
  /* 0x047c */ int vehicleType;
  /* 0x0480 */ int vehicleAnimBoneIndex;
  /* 0x0484 */ int linkFlags;
  /* 0x0488 */ union vec3_t linkAngles;
  /* 0x0494 */ int cursorHint;
  /* 0x0498 */ int cursorHintString;
  /* 0x049c */ int cursorHintEntIndex;
  /* 0x04a0 */ int cursorHintWeapon;
  /* 0x04a4 */ int iCompassPlayerInfo;
  /* 0x04a8 */ unsigned int spyplaneTypeEnabled;
  /* 0x04ac */ unsigned int satelliteTypeEnabled;
  /* 0x04b0 */ int locationSelectionInfo;
  /* 0x04b4 */ enum locSel_t locationSelectionType;
  /* 0x04b8 */ struct SprintState sprintState;
  /* 0x04d4 */ int lastDtpEnd;
  /* 0x04d8 */ float fTorsoPitch;
  /* 0x04dc */ float fWaistPitch;
  /* 0x04e0 */ float holdBreathScale;
  /* 0x04e4 */ int holdBreathTimer;
  /* 0x04e8 */ int chargeShotTimer;
  /* 0x04ec */ unsigned int chargeShotLevel;
  /* 0x04f0 */ unsigned int shotsFiredFromChamber;
  /* 0x04f4 */ float quickScopeScale;
  /* 0x04f8 */ int quickScopeTimer;
  /* 0x04fc */ unsigned int clientFields;
  /* 0x0500 */ unsigned int clientFields2;
  /* 0x0504 */ unsigned int clientFields3;
  /* 0x0508 */ unsigned int entityStateClientFields;
  /* 0x050c */ float moveSpeedScaleMultiplier;
  /* 0x0510 */ struct MantleState mantleState;
  /* 0x0520 */ int vehicleAnimStage;
  /* 0x0524 */ int vehicleEntryPoint;
  /* 0x0528 */ unsigned int scriptedAnim;
  /* 0x052c */ int scriptedAnimTime;
  /* 0x0530 */ int meleeChargeEnt;
  /* 0x0534 */ int meleeChargeDist;
  /* 0x0538 */ int meleeChargeTime;
  /* 0x053c */ int weapLockFlags;
  /* 0x0540 */ int weapLockedEntnum;
  /* 0x0544 */ unsigned int airburstMarkDistance;
  /* 0x0548 */ unsigned int perks[2];
  /* 0x0550 */ enum ActionSlotType actionSlotType[4];
  /* 0x0560 */ struct ActionSlotParam actionSlotParam[4];
  /* 0x0570 */ union Weapon inventoryWeapon;
  /* 0x0574 */ short wiiumoteAimX;
  /* 0x0576 */ short wiiumoteAimY;
  /* 0x0578 */ char wiiuControllerType;
  /* 0x0579 */ char vehicleDefIndex;
  /* 0x057a */ char Padding_191[2];
  /* 0x057c */ int entityEventSequence;
  /* 0x0580 */ int weapAnim;
  /* 0x0584 */ int weapAnimLeft;
  /* 0x0588 */ float aimSpreadScale;
  /* 0x058c */ int shellshockIndex;
  /* 0x0590 */ int shellshockTime;
  /* 0x0594 */ int shellshockDuration;
  /* 0x0598 */ float dofNearStart;
  /* 0x059c */ float dofNearEnd;
  /* 0x05a0 */ float dofFarStart;
  /* 0x05a4 */ float dofFarEnd;
  /* 0x05a8 */ float dofNearBlur;
  /* 0x05ac */ float dofFarBlur;
  /* 0x05b0 */ float dofViewmodelStart;
  /* 0x05b4 */ float dofViewmodelEnd;
  /* 0x05b8 */ int waterlevel;
  /* 0x05bc */ int smokeColorIndex;
  /* 0x05c0 */ int hudElemLastAssignedSoundID;
  /* 0x05c4 */ int adsZoomSelect;
  /* 0x05c8 */ int adsZoomLatchTime;
  /* 0x05cc */ BOOL adsZoomLatchState;
  /* 0x05cd */ char Padding_192[3];
  /* 0x05d0 */ int adsPrevZoomSelect;
  /* 0x05d4 */ int adsPrevZoomSelectTime;
  /* 0x05d8 */ long artilleryInboundIconLocation;
  /* 0x05dc */ float visionSetLerpRatio;
  /* 0x05e0 */ int poisoned;
  /* 0x05e4 */ int binoculars;
  /* 0x05e8 */ int scriptCursorHintString;
  /* 0x05ec */ struct objective_t objective[32];
  /* 0x0bec */ int deltaTime;
  /* 0x0bf0 */ int killCamEntity;
  /* 0x0bf4 */ int killCamTargetEntity;
  /* 0x0bf8 */ int introShotsFired;
  struct
  {
    /* 0x0bfc */ struct hudelem_s current[31];
    /* 0x1b00 */ struct hudelem_s archival[31];
  } /* size: 0x1e08 */ hud;
  /* 0x2a04 */ long __PADDING__[1];
}; /* size: 0x2a08 */

class bitarray<64>
{
  /* 0x0000 */ int array[2];
}; /* size: 0x0008 */

struct usercmd_s
{
  /* 0x0000 */ int serverTime;
  /* 0x0004 */ class bitarray<64> button_bits;
  /* 0x000c */ int angles[3];
  /* 0x0018 */ union Weapon weapon;
  /* 0x001c */ union Weapon offHandWeapon;
  /* 0x0020 */ union Weapon lastWeaponAltModeSwitch;
  /* 0x0024 */ char forwardmove;
  /* 0x0025 */ char rightmove;
  /* 0x0026 */ char upmove;
  /* 0x0027 */ char pitchmove;
  /* 0x0028 */ char yawmove;
  /* 0x0029 */ char Padding_193;
  /* 0x002a */ short gunPitch;
  /* 0x002c */ short gunYaw;
  /* 0x002e */ short wiiumoteAimX;
  /* 0x0030 */ short wiiumoteAimY;
  /* 0x0032 */ char wiiuControllerType;
  /* 0x0033 */ char Padding_194;
  /* 0x0034 */ unsigned short meleeChargeEnt;
  /* 0x0036 */ unsigned char meleeChargeDist;
  /* 0x0037 */ char Padding_195;
  union
  {
    /* 0x0038 */ float rollmove;
    /* 0x0038 */ short damageKick[2];
  }; /* size: 0x0004 */
  /* 0x003c */ char selectedLocation[2];
  /* 0x003e */ unsigned char selectedYaw;
  /* 0x003f */ char Padding_196;
  /* 0x0040 */ unsigned short airburstMarkDistance;
  /* 0x0042 */ unsigned short lastInput;
}; /* size: 0x0044 */

struct playerTeamState_t
{
  /* 0x0000 */ int location;
}; /* size: 0x0004 */

struct clientSession_t
{
  /* 0x0000 */ enum sessionState_t sessionState;
  /* 0x0004 */ enum ClientNum_t forceSpectatorClient;
  /* 0x0008 */ int killCamEntity;
  /* 0x000c */ int killCamTargetEntity;
  /* 0x0010 */ int archiveTime;
  /* 0x0014 */ unsigned short scriptPersId;
  /* 0x0016 */ char Padding_197[2];
  /* 0x0018 */ enum clientConnected_t connected;
  /* 0x001c */ struct usercmd_s cmd;
  /* 0x0060 */ struct usercmd_s oldcmd;
  /* 0x00a4 */ int localClient;
  /* 0x00a8 */ int predictItemPickup;
  /* 0x00ac */ char newnetname[32];
  /* 0x00cc */ int maxHealth;
  /* 0x00d0 */ int enterTime;
  /* 0x00d4 */ struct playerTeamState_t teamState;
  /* 0x00d8 */ int voteCount;
  /* 0x00dc */ int teamVoteCount;
  /* 0x00e0 */ float moveSpeedScaleMultiplier;
  /* 0x00e4 */ int viewmodelIndex;
  /* 0x00e8 */ int noSpectate;
  /* 0x00ec */ int teamInfo;
  /* 0x00f0 */ struct clientState_s cs;
  /* 0x0210 */ int psOffsetTime;
  /* 0x0214 */ int scoreboardColumnCache[26];
  /* 0x027c */ long __PADDING__[1];
}; /* size: 0x0280 */

struct viewClamp
{
  /* 0x0000 */ union vec2_t start;
  /* 0x0008 */ union vec2_t current;
  /* 0x0010 */ union vec2_t goal;
}; /* size: 0x0018 */

struct viewClampState
{
  /* 0x0000 */ struct viewClamp min;
  /* 0x0018 */ struct viewClamp max;
  /* 0x0030 */ float accelTime;
  /* 0x0034 */ float decelTime;
  /* 0x0038 */ float totalTime;
  /* 0x003c */ float startTime;
}; /* size: 0x0040 */

struct gclient_t
{
  /* 0x0000 */ struct playerState_s ps;
  /* 0x2a08 */ struct playerState_s lastPlayerPS;
  /* 0x5410 */ struct clientSession_t sess;
  /* 0x5690 */ enum ClientNum_t spectatorClient;
  /* 0x5694 */ int flags;
  /* 0x5698 */ int lastCmdTime;
  /* 0x569c */ class bitarray<64> button_bits;
  /* 0x56a4 */ class bitarray<64> oldbutton_bits;
  /* 0x56ac */ class bitarray<64> latched_button_bits;
  /* 0x56b4 */ class bitarray<64> button_bitsSinceLastFrame;
  /* 0x56bc */ float fGunPitch;
  /* 0x56c0 */ float fGunYaw;
  /* 0x56c4 */ int damage_blood;
  /* 0x56c8 */ union vec3_t damage_from;
  /* 0x56d4 */ int damage_fromWorld;
  /* 0x56d8 */ int inactivityTime;
  /* 0x56dc */ int inactivityWarning;
  /* 0x56e0 */ int lastVoiceTime;
  /* 0x56e4 */ int outWaterTime;
  /* 0x56e8 */ int switchSeatTime;
  /* 0x56ec */ float currentAimSpreadScale;
  /* 0x56f0 */ int dropWeaponTime;
  /* 0x56f4 */ class EntHandle pLookatEnt;
  /* 0x56f8 */ union vec4_t prevLinkedInvQuat;
  /* 0x5708 */ BOOL prevLinkAnglesSet;
  /* 0x5709 */ BOOL link_doCollision;
  /* 0x570a */ BOOL link_useTagAnglesForViewAngles;
  /* 0x570b */ BOOL link_useBaseAnglesForViewClamp;
  /* 0x570c */ float linkAnglesFrac;
  /* 0x5710 */ struct viewClampState link_viewClamp;
  /* 0x5750 */ class EntHandle useHoldEntity;
  /* 0x5754 */ int useHoldTime;
  /* 0x5758 */ int useButtonDone;
  /* 0x575c */ int iLastCompassPlayerInfoEnt;
  /* 0x5760 */ int compassPingTime;
  /* 0x5764 */ int damageTime;
  /* 0x5768 */ float v_dmg_roll;
  /* 0x576c */ float v_dmg_pitch;
  /* 0x5770 */ union vec3_t swayViewAngles;
  /* 0x577c */ union vec3_t swayOffset;
  /* 0x5788 */ union vec3_t swayAngles;
  /* 0x5794 */ union vec3_t baseAngles;
  /* 0x57a0 */ union vec3_t baseOrigin;
  /* 0x57ac */ union vec3_t recoilAngles;
  /* 0x57b8 */ float fLastIdleFactor;
  /* 0x57bc */ int weaponIdleTime;
  /* 0x57c0 */ union vec3_t recoilSpeed;
  /* 0x57cc */ int previousRecoilTime;
  /* 0x57d0 */ float previousRecoilRatio;
  /* 0x57d4 */ int lastServerTime;
  /* 0x57d8 */ int lastSpawnTime;
  /* 0x57dc */ union Weapon lastWeapon;
  /* 0x57e0 */ BOOL previouslyFiring;
  /* 0x57e1 */ BOOL previouslyUsingNightVision;
  /* 0x57e2 */ BOOL previouslyDTP;
  /* 0x57e3 */ BOOL previouslyBeganWeaponRaise;
  /* 0x57e4 */ BOOL previouslySprinting;
  /* 0x57e5 */ char Padding_198[3];
  /* 0x57e8 */ unsigned int hasSpyplane;
  /* 0x57ec */ unsigned int hasSatellite;
  /* 0x57f0 */ int revive;
  /* 0x57f4 */ int reviveTime;
  /* 0x57f8 */ int disallowVehicleUsage;
  /* 0x57fc */ unsigned short attachShieldTagName;
  /* 0x57fe */ char Padding_199[2];
  /* 0x5800 */ int lastStand;
  /* 0x5804 */ int lastStandTime;
}; /* size: 0x5808 */

enum FxDrawScene
{
  FX_SCENE_MAIN = 0,
  FX_SCENE_EXTRACAM = 1,
  NUM_FX_SCENES = 2,
};

typedef enum _TAG_UNNAMED_354
{
  CULL_OUT = 0,
  CULL_CALC_POSE = 1,
  CULL_CALC_SKIN = 2,
} TAG_UNNAMED_354, *PTAG_UNNAMED_354;

enum eFoot
{
  FOOTSTEP_FRONTRIGHT = 0,
  FOOTSTEP_FRONTLEFT = 1,
  FOOTSTEP_REARRIGHT = 2,
  FOOTSTEP_REARLEFT = 3,
  FOOTSTEP_COUNT = 4,
};

enum dynEntFieldType_t
{
  F_DYNENT_CLIENT = 0,
  F_DYNENT_POSE = 1,
  F_DYNENT_DEF = 2,
};

enum gumpFadeState
{
  GUMP_FADE_OFF = 0,
  GUMP_FADE_WATCH_FOR_LOAD = 1,
  GUMP_FADE_LOADING = 2,
  GUMP_FADE_FADING = 3,
};

typedef enum _TAG_UNNAMED_355
{
  LL_INIT = 0,
  LL_INITIAL_DELAY = 1,
  LL_MAX = 2,
} TAG_UNNAMED_355, *PTAG_UNNAMED_355;

typedef enum _TAG_UNNAMED_356
{
  LL_FF_START_FLICKER = 2,
  LL_FF_FLICKER = 3,
} TAG_UNNAMED_356, *PTAG_UNNAMED_356;

typedef enum _TAG_UNNAMED_357
{
  LL_ETF_START_FLICKER = 2,
  LL_ETF_WAIT_FOR_ACTIVATION = 3,
  LL_ETF_BURST_WAIT = 4,
  LL_ETF_FADE_DOWN_INIT = 5,
  LL_ETF_FADE_DOWN = 6,
  LL_ETF_BECOME_FIRE_FLICKER = 7,
} TAG_UNNAMED_357, *PTAG_UNNAMED_357;

enum GFX_SPOT_SHADOW_FLAGS
{
  SPOT_LIGHT_USING_FULL_SPOT_SHADOW_BUFFER = 1,
};

class bdHashMap<bdReference<bdCommonAddr>,bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>,bdHashingClass>::Node
{
  /* 0x0000 */ class bdArray<bdQoSProbe::bdQoSProbeEntryWrapper> m_data;
  /* 0x000c */ class bdReference<bdCommonAddr> m_key;
  /* 0x0010 */ class bdHashMap<bdReference<bdCommonAddr>,bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>,bdHashingClass>::Node* m_next;
}; /* size: 0x0014 */

typedef enum _TAG_UNNAMED_358
{
  CENTFIELD_ENTITY = 0,
  CENTFIELD_SENTIENT = 8192,
  CENTFIELD_ACTOR = 16384,
  CENTFIELD_CLIENT = 24576,
  CENTFIELD_VEHICLE = 0xffff8000,
  CENTFIELD_MASK = 0xffffe000,
} TAG_UNNAMED_358, *PTAG_UNNAMED_358;

typedef enum _TAG_UNNAMED_359
{
  LL_DS_WAIT_OFF_INIT = 2,
  LL_DS_WAIT = 3,
  LL_DS_WAIT_ON_INIT = 4,
} TAG_UNNAMED_359, *PTAG_UNNAMED_359;

typedef enum _TAG_UNNAMED_360
{
  _Multi = 0,
} TAG_UNNAMED_360, *PTAG_UNNAMED_360;

struct SubpartyMember
{
  /* 0x0000 */ int memberIndex;
  /* 0x0004 */ char* gamertag;
  /* 0x0008 */ int lastTeam;
  /* 0x000c */ unsigned int affinityBits;
}; /* size: 0x0010 */

typedef enum _TAG_UNNAMED_361
{
  LL_TV_INTENSITY_LERP_INIT = 2,
  LL_TV_INTENSITY_LERP = 3,
  LL_TV_COLOR_LERP_INIT = 4,
  LL_TV_COLOR_LERP = 5,
} TAG_UNNAMED_361, *PTAG_UNNAMED_361;

typedef enum _TAG_UNNAMED_362
{
  LL_GF_FLICKER_BURST_INIT = 2,
  LL_GF_FLICKER_WAIT_INIT = 3,
  LL_GF_FLICKER_WAIT = 4,
  LL_GF_BETWEEN_BURSTS_WAIT_INIT = 5,
} TAG_UNNAMED_362, *PTAG_UNNAMED_362;

typedef enum _TAG_UNNAMED_363
{
  RM_DO_WAIT = 2,
} TAG_UNNAMED_363, *PTAG_UNNAMED_363;

typedef enum _NVAPI_D3D_RESOURCERENDERING_FLAG
{
  NVAPI_D3D_RR_FLAG_DEFAULTS = 0,
  NVAPI_D3D_RR_FLAG_FORCE_DISCARD_CONTENT = 1,
  NVAPI_D3D_RR_FLAG_FORCE_KEEP_CONTENT = 2,
  NVAPI_D3D_RR_FLAG_MULTI_FRAME = 4,
} NVAPI_D3D_RESOURCERENDERING_FLAG, *PNVAPI_D3D_RESOURCERENDERING_FLAG;

typedef enum _TAG_UNNAMED_364
{
  SL_INIT = 0,
  SL_TURNING_ON = 1,
  SL_ON = 2,
  SL_TURNING_OFF = 3,
  SL_OFF = 4,
} TAG_UNNAMED_364, *PTAG_UNNAMED_364;

enum RumbleSourceType
{
  RUMBLESOURCE_INVALID = 0,
  RUMBLESOURCE_ENTITY = 1,
  RUMBLESOURCE_POS = 2,
};

typedef enum _TAG_UNNAMED_365
{
  SPHERE_MAX_SIDES = 32,
} TAG_UNNAMED_365, *PTAG_UNNAMED_365;

enum CompassType
{
  COMPASS_TYPE_PARTIAL = 0,
  COMPASS_TYPE_FULL = 1,
};

enum eGuidedMissileInfo
{
  GUIDED_MISSILE_VIEWPOS = 0,
  GUIDED_MISSILE_DIST_TO_TARG = 1,
  GUIDED_MISSILE_DIST_FROM_OWNER = 2,
};

enum e_tank_hud_component
{
  _tank_component_core = 0,
  _tank_component_left_tread = 1,
  _tank_component_right_tread = 2,
  _tank_component_turret = 3,
  _tank_component_driver_seat = 4,
  _tank_component_gunner_seat = 5,
  k_tank_hud_component_count = 6,
};

enum GfxAspectRatio
{
  GFX_ASPECT_RATIO_AUTO = 0,
  GFX_ASPECT_RATIO_STANDARD = 1,
  GFX_ASPECT_RATIO_WIDE_16_10 = 2,
  GFX_ASPECT_RATIO_WIDE_16_9 = 3,
  GFX_ASPECT_RATIO_COUNT = 4,
};

enum cursorHintType_t
{
  CURSORHINTS_NO_HINTS = 0,
  CURSORHINTS_SIN_SIZE_PULSE = 1,
  CURSORHINTS_ONE_WAY_SIZE_PULSE = 2,
  CURSORHINTS_ALPHA_PULSE = 3,
  CURSORHINTS_STATIC_IMAGE = 4,
  CURSORHINTS_COUNT = 5,
};

typedef enum _TAG_UNNAMED_366
{
  AI_STANCE_STANDING = 0,
  AI_STANCE_CROUCH = 1,
  AI_STANCE_PRONE = 2,
} TAG_UNNAMED_366, *PTAG_UNNAMED_366;

typedef enum _TAG_UNNAMED_367
{
  R_COLOR_OVERRIDE_BLACK = 0,
  R_COLOR_OVERRIDE_NONE = 1,
  R_COLOR_OVERRIDE_WHITE = 2,
  R_COLOR_OVERRIDE_GRAY_LINEAR = 3,
  R_COLOR_OVERRIDE_GRAY_SRGB = 4,
  R_COLOR_OVERRIDE_COUNT = 5,
} TAG_UNNAMED_367, *PTAG_UNNAMED_367;

class bdTwitterUserAttribute
{
  /* 0x0000 */ long Padding_200;
  /* 0x0004 */ unsigned int m_name;
  /* 0x0008 */ char m_value[512];
}; /* size: 0x0208 */

enum ADJUST_TYPES
{
  ADJUST_NULL = 0,
  ADJUST_NOTHING = 1,
  ADJUST_DOUBLEX = 2,
  ADJUST_HALFY = 3,
  ADJUST_HALFY_CUSTOM_CENTERY = 4,
  ADJUST_WRT_SCREEN = 5,
};

enum turretAnims_t
{
  TURRETANIM_ROOT = 0,
  TURRETANIM_IDLE = 1,
  TURRETANIM_FIRE = 2,
  TURRETANIM_NUM = 3,
};

typedef enum _TAG_UNNAMED_368
{
  DRAW_INFO_STATE_NONE = 0,
  DRAW_INFO_STATE_PENDING = 1,
  DRAW_INFO_STATE_READY = 2,
} TAG_UNNAMED_368, *PTAG_UNNAMED_368;

enum GPUTimerDisplayMode
{
  GPU_TIMER_DISPLAY_MODE_DISABLED = 0,
  GPU_TIMER_DISPLAY_MODE_ACTIVE_IN_PLACE_SIMPLE = 1,
  GPU_TIMER_DISPLAY_MODE_ACTIVE_IN_PLACE = 2,
  GPU_TIMER_DISPLAY_MODE_ALL_IN_PLACE = 3,
  GPU_TIMER_DISPLAY_MODE_TOP = 4,
  GPU_TIMER_DISPLAY_MODE_ALL = 5,
  GPU_TIMER_DISPLAY_MODE_ACTIVE = 6,
  GPU_TIMER_DISPLAY_MODE_MAJOR = 7,
  GPU_TIMER_DISPLAY_MODE_MINOR = 8,
  GPU_TIMER_DISPLAY_MODE_MAJOR_IN_PLACE = 9,
  GPU_TIMER_DISPLAY_MODE_MINOR_IN_PLACE = 10,
  GPU_TIMER_DISPLAY_MODE_ALL_COM_ONLY = 11,
  GPU_TIMER_DISPLAY_MODE_ACTIVE_COM_ONLY = 12,
  GPU_TIMER_DISPLAY_MODE_COLLECT_ONLY = 13,
  GPU_TIMER_DISPLAY_MODE_COUNT = 14,
};

typedef enum _TAG_UNNAMED_369
{
  ZBPSS_INIT = 0,
  ZBPSS_INIT_WAIT = 1,
  ZBPSS_WAIT = 2,
  ZBPSS_STAGE_2 = 3,
  ZBPSS_STAGE_3 = 4,
} TAG_UNNAMED_369, *PTAG_UNNAMED_369;

class bdKeyValuePair
{
  /* 0x0000 */ long Padding_201;
  /* 0x0004 */ unsigned char m_updateType;
  /* 0x0005 */ char Padding_202;
  /* 0x0006 */ unsigned short m_index;
  /* 0x0008 */ __int64 m_value;
}; /* size: 0x0010 */

typedef enum _TAG_UNNAMED_370
{
  R_DRAW_INFO_NONE = 0,
  R_DRAW_INFO_STAGES = 1,
  R_DRAW_INFO_TARGETS = 2,
  R_DRAW_INFO_TRIS = 3,
  R_DRAW_INFO_PRIMS = 4,
  R_DRAW_INFO_COUNT = 5,
} TAG_UNNAMED_370, *PTAG_UNNAMED_370;

enum GfxImageFileFormat
{
  IMG_FORMAT_INVALID = 0,
  IMG_FORMAT_BITMAP_RGBA = 1,
  IMG_FORMAT_BITMAP_RGB = 2,
  IMG_FORMAT_BITMAP_LUMINANCE_ALPHA = 3,
  IMG_FORMAT_BITMAP_LUMINANCE = 4,
  IMG_FORMAT_BITMAP_ALPHA = 5,
  IMG_FORMAT_WAVELET_RGBA = 6,
  IMG_FORMAT_WAVELET_RGB = 7,
  IMG_FORMAT_WAVELET_LUMINANCE_ALPHA = 8,
  IMG_FORMAT_WAVELET_LUMINANCE = 9,
  IMG_FORMAT_WAVELET_ALPHA = 10,
  IMG_FORMAT_DXT1 = 11,
  IMG_FORMAT_DXT3 = 12,
  IMG_FORMAT_DXT5 = 13,
  IMG_FORMAT_DXN = 14,
  IMG_FORMAT_BITMAP_RGB565 = 15,
  IMG_FORMAT_BITMAP_RGB5A3 = 16,
  IMG_FORMAT_BITMAP_C8 = 17,
  IMG_FORMAT_BITMAP_RGBA8 = 18,
  IMG_FORMAT_A16B16G16R16F = 19,
  IMG_FORMAT_COUNT = 20,
};

enum parseSkip_t
{
  SKIP_NO = 0,
  SKIP_YES = 1,
  SKIP_ALL_ELIFS = 2,
};

struct SndDspDynamoParam
{
  /* 0x0000 */ int E;
  /* 0x0004 */ float PG;
  /* 0x0008 */ float MG;
  /* 0x000c */ float TH;
  /* 0x0010 */ float R;
  /* 0x0014 */ float TA;
  /* 0x0018 */ float TR;
}; /* size: 0x001c */

enum unlockMapTableColumns_t
{
  UNLOCKMAPTABLE_INDEX = 0,
  UNLOCKMAPTABLE_GROUPLIST = 1,
  UNLOCKMAPTABLE_NAME = 2,
  UNLOCKMAPTABLE_STRINGREF = 3,
  UNLOCKMAPTABLE_COUNT = 4,
};

enum FactionTableColumn
{
  FACTION_TABLE_COLUMN_NAME = 0,
  FACTION_TABLE_COLUMN_TEAM = 1,
  FACTION_TABLE_COLUMN_RED = 2,
  FACTION_TABLE_COLUMN_GREEN = 3,
  FACTION_TABLE_COLUMN_BLUE = 4,
  NUM_FACTION_TABLE_COLUMNS = 5,
};

struct XSurfaceCollisionAabb
{
  /* 0x0000 */ unsigned short mins[3];
  /* 0x0006 */ unsigned short maxs[3];
}; /* size: 0x000c */

struct clientFieldCodeCallback_s
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long bHasCodeCallback : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long bCodeCallbackIsFloatVal : 1; /* bit position: 1 */
  }; /* bitfield */
  union
  {
    /* 0x0004 */ void* floatCallbackFunc /* function */;
    /* 0x0004 */ void* uintCallbackFunc /* function */;
  }; /* size: 0x0004 */
}; /* size: 0x0008 */

class std::bad_array_new_length
{
}; /* size: 0x000c */

typedef enum _NV_TARGET_VIEW_MODE
{
  NV_VIEW_MODE_STANDARD = 0,
  NV_VIEW_MODE_CLONE = 1,
  NV_VIEW_MODE_HSPAN = 2,
  NV_VIEW_MODE_VSPAN = 3,
  NV_VIEW_MODE_DUALVIEW = 4,
  NV_VIEW_MODE_MULTIVIEW = 5,
} NV_TARGET_VIEW_MODE, *PNV_TARGET_VIEW_MODE;

struct editFieldDef_s
{
  /* 0x0000 */ int cursorPos[1];
  /* 0x0004 */ float minVal;
  /* 0x0008 */ float maxVal;
  /* 0x000c */ float defVal;
  /* 0x0010 */ float range;
  /* 0x0014 */ int maxChars;
  /* 0x0018 */ int maxCharsGotoNext;
  /* 0x001c */ int maxPaintChars;
  /* 0x0020 */ int paintOffset;
}; /* size: 0x0024 */

enum NV_COOLER_POLICY
{
  NVAPI_COOLER_POLICY_NONE = 0,
  NVAPI_COOLER_POLICY_MANUAL = 1,
  NVAPI_COOLER_POLICY_PERF = 2,
  NVAPI_COOLER_POLICY_TEMPERATURE_DISCRETE = 4,
  NVAPI_COOLER_POLICY_TEMPERATURE_CONTINUOUS = 8,
  NVAPI_COOLER_POLICY_TEMPERATURE_CONTINUOUS_SW = 16,
  NVAPI_COOLER_POLICY_DEFAULT = 32,
};

struct XSurfaceCollisionNode
{
  /* 0x0000 */ struct XSurfaceCollisionAabb aabb;
  /* 0x000c */ unsigned short childBeginIndex;
  /* 0x000e */ unsigned short childCount;
}; /* size: 0x0010 */

typedef enum _NV_PERF_PSTATE_CLIENT_LIMIT_ID
{
  NVAPI_PERF_PSTATE_CLIENT_LIMIT_HARD = 1,
  NVAPI_PERF_PSTATE_CLIENT_LIMIT_SOFT = 2,
  NVAPI_PERF_PSTATE_CLIENT_LIMIT_BOTH = 3,
} NV_PERF_PSTATE_CLIENT_LIMIT_ID, *PNV_PERF_PSTATE_CLIENT_LIMIT_ID;

typedef enum _NV_GPU_PERF_PSTATE_ID
{
  NVAPI_GPU_PERF_PSTATE_P0 = 0,
  NVAPI_GPU_PERF_PSTATE_P1 = 1,
  NVAPI_GPU_PERF_PSTATE_P2 = 2,
  NVAPI_GPU_PERF_PSTATE_P3 = 3,
  NVAPI_GPU_PERF_PSTATE_P4 = 4,
  NVAPI_GPU_PERF_PSTATE_P5 = 5,
  NVAPI_GPU_PERF_PSTATE_P6 = 6,
  NVAPI_GPU_PERF_PSTATE_P7 = 7,
  NVAPI_GPU_PERF_PSTATE_P8 = 8,
  NVAPI_GPU_PERF_PSTATE_P9 = 9,
  NVAPI_GPU_PERF_PSTATE_P10 = 10,
  NVAPI_GPU_PERF_PSTATE_P11 = 11,
  NVAPI_GPU_PERF_PSTATE_P12 = 12,
  NVAPI_GPU_PERF_PSTATE_P13 = 13,
  NVAPI_GPU_PERF_PSTATE_P14 = 14,
  NVAPI_GPU_PERF_PSTATE_P15 = 15,
  NVAPI_GPU_PERF_PSTATE_UNDEFINED = 16,
  NVAPI_GPU_PERF_PSTATE_ALL = 17,
} NV_GPU_PERF_PSTATE_ID, *PNV_GPU_PERF_PSTATE_ID;

typedef enum _NV_PWR_SOURCE_INFO
{
  NVAPI_PWR_SOURCE_AC = 1,
  NVAPI_PWR_SOURCE_BATT = 2,
} NV_PWR_SOURCE_INFO, *PNV_PWR_SOURCE_INFO;

typedef enum _NV_SELECT_INFO
{
  NVAPI_INDEX_PWR_MZR_HARD = 1,
  NVAPI_INDEX_PWR_MZR_SOFT = 2,
  NVAPI_INDEX_ADC = 3,
} NV_SELECT_INFO, *PNV_SELECT_INFO;

struct dwFileShareWriteFileTask
{
  /* 0x0000 */ enum fileShareLocation location;
  /* 0x0004 */ unsigned short fileSlot;
  /* 0x0006 */ char Padding_203[2];
  /* 0x0008 */ const char* menuDef;
  /* 0x000c */ void* fileData;
  /* 0x0010 */ class bdUploadInterceptor* uploadHandler;
  /* 0x0014 */ unsigned int fileSize;
  /* 0x0018 */ const char* fileName;
  /* 0x001c */ unsigned short category;
  /* 0x001e */ char Padding_204[2];
  /* 0x0020 */ const void* thumbData;
  /* 0x0024 */ unsigned int thumbDataSize;
  /* 0x0028 */ unsigned int numTags;
  /* 0x002c */ class bdTag* tags;
  /* 0x0030 */ class bdFileID outFileID;
  /* 0x0040 */ void* progressCallback /* function */;
  /* 0x0044 */ void* dataCallback /* function */;
  /* 0x0048 */ void* successCallback /* function */;
  /* 0x004c */ void* failureCallback /* function */;
}; /* size: 0x0050 */

struct ROMInfo
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ enum ROMType type;
  /* 0x0008 */ void* data;
  /* 0x000c */ unsigned int size;
  /* 0x0010 */ BOOL usesPaddles;
  /* 0x0011 */ char __PADDING__[3];
}; /* size: 0x0014 */

typedef enum _NV_LEVEL_INFO
{
  NVAPI_PWR_MZR_HARD_LIMIT_MAX = 1,
  NVAPI_PWR_MZR_HARD_LIMIT_BAL = 2,
  NVAPI_PWR_MZR_MAX_BATT = 3,
  NVAPI_PWR_MZR_SOFT_LIMIT_MAX = 4,
  NVAPI_PWR_MZR_SOFT_LIMIT_BAL = 5,
  NVAPI_ADC_OFF = 6,
  NVAPI_ADC_ON = 7,
} NV_LEVEL_INFO, *PNV_LEVEL_INFO;

typedef enum _TAG_UNNAMED_371
{
  BLEND_WEIGHTS_PER_VERTEX = 1,
} TAG_UNNAMED_371, *PTAG_UNNAMED_371;

typedef union _ULARGE_INTEGER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    } /* size: 0x0008 */ u;
    /* 0x0000 */ unsigned __int64 QuadPart;
  }; /* size: 0x0008 */
} ULARGE_INTEGER, *PULARGE_INTEGER; /* size: 0x0008 */

struct tagSTATSTG
{
  /* 0x0000 */ wchar_t* pwcsName;
  /* 0x0004 */ unsigned long type;
  /* 0x0008 */ union _ULARGE_INTEGER cbSize;
  /* 0x0010 */ struct _FILETIME mtime;
  /* 0x0018 */ struct _FILETIME ctime;
  /* 0x0020 */ struct _FILETIME atime;
  /* 0x0028 */ unsigned long grfMode;
  /* 0x002c */ unsigned long grfLocksSupported;
  /* 0x0030 */ struct _GUID clsid;
  /* 0x0040 */ unsigned long grfStateBits;
  /* 0x0044 */ unsigned long reserved;
}; /* size: 0x0048 */

typedef enum _NV_INFOFRAME_TYPE
{
  NV_INFOFRAME_TYPE_AVI = 2,
  NV_INFOFRAME_TYPE_SPD = 3,
  NV_INFOFRAME_TYPE_AUDIO = 4,
  NV_INFOFRAME_TYPE_MS = 5,
} NV_INFOFRAME_TYPE, *PNV_INFOFRAME_TYPE;

typedef enum _NVAPI_D3D_SETRESOURCEHINT_CATEGORY
{
  NVAPI_D3D_SRH_CATEGORY_SLI = 1,
} NVAPI_D3D_SETRESOURCEHINT_CATEGORY, *PNVAPI_D3D_SETRESOURCEHINT_CATEGORY;

class bdReference<bdLobbyConnection>
{
  /* 0x0000 */ class bdLobbyConnection* m_ptr;
}; /* size: 0x0004 */

typedef enum _NVAPI_D3D_QUERY_TYPE
{
  NVAPI_D3D_QUERY_TYPE_RESERVED0 = 0,
  NVAPI_D3D_QUERY_TYPE_RESERVED1 = 1,
  NVAPI_D3D_QUERY_TYPE_RESERVED2 = 2,
  NVAPI_D3D_QUERY_TYPE_RESERVED3 = 3,
  NVAPI_D3D_QUERY_TYPE_ROP_TIMESTAMP = 4,
} NVAPI_D3D_QUERY_TYPE, *PNVAPI_D3D_QUERY_TYPE;

struct FxEffectDef
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned short flags;
  /* 0x0006 */ unsigned char efPriority;
  /* 0x0007 */ char Padding_205;
  /* 0x0008 */ short elemDefCountLooping;
  /* 0x000a */ short elemDefCountOneShot;
  /* 0x000c */ short elemDefCountEmission;
  /* 0x000e */ char Padding_206[2];
  /* 0x0010 */ int totalSize;
  /* 0x0014 */ int msecLoopingLife;
  /* 0x0018 */ int msecNonLoopingLife;
  union
  {
    /* 0x001c */ const struct FxElemDef* elemDefs;
    /* 0x001c */ const struct FxElemDef* localElemDefs;
  }; /* size: 0x0004 */
  /* 0x0020 */ union vec3_t boundingBoxDim;
  /* 0x002c */ union vec3_t boundingBoxCentre;
  /* 0x0038 */ float occlusionQueryDepthBias;
  /* 0x003c */ int occlusionQueryFadeIn;
  /* 0x0040 */ int occlusionQueryFadeOut;
  /* 0x0044 */ struct FxFloatRange occlusionQueryScaleRange;
}; /* size: 0x004c */

typedef enum _NV_PATH_DATATYPE
{
  NV_BYTE = 0,
  NV_UNSIGNED_BYTE = 1,
  NV_SHORT = 2,
  NV_UNSIGNED_SHORT = 3,
  NV_INT = 4,
  NV_UNSIGNED_INT = 5,
  NV_FLOAT = 6,
  NV_FIXED = 7,
} NV_PATH_DATATYPE, *PNV_PATH_DATATYPE;

enum RenderTargetUsage
{
  RENDERTARGET_USAGE_DEPTH = 0,
  RENDERTARGET_USAGE_RENDER = 1,
  RENDERTARGET_USAGE_RENDER_SHARE_SCENE = 2,
  RENDERTARGET_USAGE_TEXTURE = 3,
};

typedef enum _NV_PATH_PARAMTYPE
{
  PATH_QUALITY_NV = 0xffff8ed8,
  FILL_RULE_NV = 0xffff8ed9,
  STROKE_CAP0_STYLE_NV = 0xffff8ee0,
  STROKE_CAP1_STYLE_NV = 0xffff8ee1,
  STROKE_CAP2_STYLE_NV = 0xffff8ee2,
  STROKE_CAP3_STYLE_NV = 0xffff8ee3,
  STROKE_JOIN_STYLE_NV = 0xffff8ee8,
  STROKE_MITER_LIMIT_NV = 0xffff8ee9,
} NV_PATH_PARAMTYPE, *PNV_PATH_PARAMTYPE;

typedef enum _NV_SLI_MODE
{
  NV_SLI_RENDERING_MODE_AUTOSELECT = 0,
  NV_SLI_RENDERING_MODE_AFR = 1,
  NV_SLI_RENDERING_MODE_SFR = 2,
  NV_SLI_RENDERING_MODE_SINGLE = 3,
  NV_SLI_RENDERING_MODE_AFR_OF_SFR = 4,
} NV_SLI_MODE, *PNV_SLI_MODE;

struct FLAC__StreamDecoder
{
  /* 0x0000 */ struct FLAC__StreamDecoderProtected* protected_;
  /* 0x0004 */ struct FLAC__StreamDecoderPrivate* private_;
}; /* size: 0x0008 */

enum NVFBC_BUFFER_FORMAT
{
  NVFBC_FORMAT_ARGB = 0,
  NVFBC_FORMAT_RGB = 1,
  NVFBC_FORMAT_YUV_420 = 2,
  NVFBC_FORMAT_RGB_PLANAR = 3,
  NVFBC_FORMAT_RGB_XOR = 4,
  NVFBC_FORMAT_YUV_444 = 5,
  NVFBC_FORMAT_NOT_SUPPORTED = 6,
};

enum NVAPI_VSYNC_MODE
{
  NVAPI_VSYNC_DEFAULT = 0,
  NVAPI_VSYNC_OFF = 1,
  NVAPI_VSYNC_ON = 2,
  NVAPI_VSYNC_ADAPTIVE = 3,
  NVAPI_VSYNC_ADAPTIVE_HALF_REFRESH_RATE = 4,
};

typedef enum _NVVIOOWNERTYPE
{
  NVVIOOWNERTYPE_NONE = 0,
  NVVIOOWNERTYPE_APPLICATION = 1,
  NVVIOOWNERTYPE_DESKTOP = 2,
} NVVIOOWNERTYPE, *PNVVIOOWNERTYPE;

typedef enum _NV_FrustumAdjustMode
{
  NVAPI_NO_FRUSTUM_ADJUST = 0,
  NVAPI_FRUSTUM_STRETCH = 1,
  NVAPI_FRUSTUM_CLEAR_EDGES = 2,
} NV_FrustumAdjustMode, *PNV_FrustumAdjustMode;

class bdHash
{
}; /* size: 0x0004 */

typedef enum _NV_StereoActiveEye
{
  NVAPI_STEREO_EYE_RIGHT = 1,
  NVAPI_STEREO_EYE_LEFT = 2,
  NVAPI_STEREO_EYE_MONO = 3,
} NV_StereoActiveEye, *PNV_StereoActiveEye;

class bdSequenceNumber
{
  /* 0x0000 */ int m_seqNum;
}; /* size: 0x0004 */

typedef enum _NV_StereoDriverMode
{
  NVAPI_STEREO_DRIVER_MODE_AUTOMATIC = 0,
  NVAPI_STEREO_DRIVER_MODE_DIRECT = 2,
} NV_StereoDriverMode, *PNV_StereoDriverMode;

struct cplane_s
{
  /* 0x0000 */ union vec3_t normal;
  /* 0x000c */ float dist;
  /* 0x0010 */ unsigned char type;
  /* 0x0011 */ unsigned char signbits;
  /* 0x0012 */ unsigned char pad[2];
}; /* size: 0x0014 */

typedef enum _NV_StereoSwapChainMode
{
  NVAPI_STEREO_SWAPCHAIN_DEFAULT = 0,
  NVAPI_STEREO_SWAPCHAIN_STEREO = 1,
  NVAPI_STEREO_SWAPCHAIN_MONO = 2,
} NV_StereoSwapChainMode, *PNV_StereoSwapChainMode;

enum bdChunkTypes
{
  BD_CT_INVALID = 0,
  BD_CT_PADDING = 1,
  BD_CT_DATA = 2,
  BD_CT_INIT = 3,
  BD_CT_INIT_ACK = 4,
  BD_CT_SACK = 5,
  BD_CT_HEARTBEAT = 6,
  BD_CT_HEARTBEAT_ACK = 7,
  BD_CT_ABORT = 8,
  BD_CT_SHUTDOWN = 9,
  BD_CT_SHUTDOWN_ACK = 10,
  BD_CT_SHUTDOWN_COMPLETE = 11,
  BD_CT_ERROR = 12,
  BD_CT_COOKIE_ECHO = 13,
  BD_CT_COOKIE_ACK = 14,
};

struct CGameID::GameID_t
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned int m_nAppID : 24; /* bit position: 0 */
    /* 0x0000 */ unsigned int m_nType : 8; /* bit position: 24 */
  }; /* bitfield */
  /* 0x0004 */ unsigned int m_nModID : 32; /* bit position: 0 */
}; /* size: 0x0008 */

class CGameID
{
  union
  {
    /* 0x0000 */ unsigned __int64 m_ulGameID;
    /* 0x0000 */ struct CGameID::GameID_t m_gameID;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct FriendGameInfo_t
{
  /* 0x0000 */ class CGameID m_gameID;
  /* 0x0008 */ unsigned int m_unGameIP;
  /* 0x000c */ unsigned short m_usGamePort;
  /* 0x000e */ unsigned short m_usQueryPort;
  /* 0x0010 */ class CSteamID m_steamIDLobby;
}; /* size: 0x0018 */

typedef enum _NT_PRODUCT_TYPE
{
  NtProductWinNt = 1,
  NtProductLanManNt = 2,
  NtProductServer = 3,
} NT_PRODUCT_TYPE, *PNT_PRODUCT_TYPE;

enum bdInitAckChunk::bdInitAckChunkFlags
{
  BD_IC_NO_FLAGS = 0,
};

class bdReference<bdTaskByteBuffer>
{
  /* 0x0000 */ class bdTaskByteBuffer* m_ptr;
}; /* size: 0x0004 */

class bdReference<bdPendingBufferTransfer>
{
  /* 0x0000 */ class bdPendingBufferTransfer* m_ptr;
}; /* size: 0x0004 */

class bdLobbyConnection
{
  /* 0x0000 */ long Padding_207[2];
  /* 0x0008 */ class bdReference<bdCommonAddr> m_addr;
  /* 0x000c */ unsigned int m_maxSendMessageSize;
  /* 0x0010 */ unsigned int m_maxRecvMessageSize;
  /* 0x0014 */ enum bdLobbyConnection::RecvState m_recvState;
  /* 0x0018 */ unsigned char m_msgSizeBuffer[4];
  /* 0x001c */ unsigned int m_recvCount;
  /* 0x0020 */ unsigned char m_recvEncryptType;
  /* 0x0021 */ char Padding_208[3];
  /* 0x0024 */ unsigned int m_messageSize;
  /* 0x0028 */ class bdReference<bdTaskByteBuffer> m_recvMessage;
  /* 0x002c */ class bdReference<bdPendingBufferTransfer> m_recvTransfer;
  /* 0x0030 */ class bdQueue<bdPendingBufferTransfer> m_outgoingBuffers;
  /* 0x003c */ class bdStreamSocket m_socket;
  /* 0x0040 */ enum bdLobbyConnection::Status m_status;
  /* 0x0044 */ class bdLobbyConnectionListener* m_connectionListener;
  /* 0x0000 */ class bdMutex m_mutex;
  /* 0x0004 */ long Padding_209[17];
  /* 0x0048 */ class bdCypher3Des m_cypher;
  /* 0x111c */ unsigned char m_sessionKey[24];
  /* 0x1134 */ unsigned int m_messageCount;
  /* 0x1138 */ class bdStopwatch m_keepAliveTimer;
  /* 0x1140 */ class bdStopwatch m_lastReceivedTimer;
  /* 0x1148 */ class bdStopwatch m_asyncConnectTimer;
}; /* size: 0x1150 */

enum NV_MOSAIC_TOPO
{
  NV_MOSAIC_TOPO_NONE = 0,
  NV_MOSAIC_TOPO_BEGIN_BASIC = 1,
  NV_MOSAIC_TOPO_1x2_BASIC = 1,
  NV_MOSAIC_TOPO_2x1_BASIC = 2,
  NV_MOSAIC_TOPO_1x3_BASIC = 3,
  NV_MOSAIC_TOPO_3x1_BASIC = 4,
  NV_MOSAIC_TOPO_1x4_BASIC = 5,
  NV_MOSAIC_TOPO_4x1_BASIC = 6,
  NV_MOSAIC_TOPO_2x2_BASIC = 7,
  NV_MOSAIC_TOPO_2x3_BASIC = 8,
  NV_MOSAIC_TOPO_2x4_BASIC = 9,
  NV_MOSAIC_TOPO_3x2_BASIC = 10,
  NV_MOSAIC_TOPO_4x2_BASIC = 11,
  NV_MOSAIC_TOPO_1x5_BASIC = 12,
  NV_MOSAIC_TOPO_1x6_BASIC = 13,
  NV_MOSAIC_TOPO_7x1_BASIC = 14,
  NV_MOSAIC_TOPO_END_BASIC = 23,
  NV_MOSAIC_TOPO_BEGIN_PASSIVE_STEREO = 24,
  NV_MOSAIC_TOPO_1x2_PASSIVE_STEREO = 24,
  NV_MOSAIC_TOPO_2x1_PASSIVE_STEREO = 25,
  NV_MOSAIC_TOPO_1x3_PASSIVE_STEREO = 26,
  NV_MOSAIC_TOPO_3x1_PASSIVE_STEREO = 27,
  NV_MOSAIC_TOPO_1x4_PASSIVE_STEREO = 28,
  NV_MOSAIC_TOPO_4x1_PASSIVE_STEREO = 29,
  NV_MOSAIC_TOPO_2x2_PASSIVE_STEREO = 30,
  NV_MOSAIC_TOPO_END_PASSIVE_STEREO = 34,
  NV_MOSAIC_TOPO_MAX = 35,
};

typedef enum _NVVIOCOMPONENTSAMPLING
{
  NVVIOCOMPONENTSAMPLING_UNKNOWN = 0,
  NVVIOCOMPONENTSAMPLING_4444 = 1,
  NVVIOCOMPONENTSAMPLING_4224 = 2,
  NVVIOCOMPONENTSAMPLING_444 = 3,
  NVVIOCOMPONENTSAMPLING_422 = 4,
} NVVIOCOMPONENTSAMPLING, *PNVVIOCOMPONENTSAMPLING;

enum DXGI_SWAP_CHAIN_FLAG
{
  DXGI_SWAP_CHAIN_FLAG_NONPREROTATED = 1,
  DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH = 2,
  DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE = 4,
};

class bdSequenceNumberStore
{
  /* 0x0000 */ unsigned int m_bitmap;
  /* 0x0004 */ class bdSequenceNumber m_lastSeq;
}; /* size: 0x0008 */

class bdNonce<16>
{
  /* 0x0000 */ unsigned char m_nonce[16];
  /* 0x0010 */ BOOL m_initialised;
}; /* size: 0x0011 */

class bdDTLSAssociation
{
  /* 0x0000 */ long Padding_210[2];
  /* 0x0008 */ class bdSocket* m_socket;
  /* 0x000c */ class bdSecurityKeyMap* m_keyMap;
  /* 0x0010 */ class bdECCKey* m_ECCKey;
  /* 0x0014 */ class bdCypher3Des m_cypher;
  /* 0x10e8 */ unsigned char m_sharedKey[24];
  /* 0x1100 */ class bdAddr m_addr;
  /* 0x1108 */ class bdReference<bdAddrHandle> m_addrHandle;
  /* 0x110c */ enum bdDTLSAssociation::bdDTLSStatus m_state;
  /* 0x1110 */ class bdStopwatch m_lastReceived;
  /* 0x1118 */ class bdStopwatch m_initTimer;
  /* 0x1120 */ unsigned char m_initResends;
  /* 0x1121 */ char Padding_211[7];
  /* 0x1128 */ class bdStopwatch m_cookieTimer;
  /* 0x1130 */ unsigned char m_cookieResends;
  /* 0x1131 */ char Padding_212;
  /* 0x1132 */ unsigned short m_localTag;
  /* 0x1134 */ unsigned short m_peerTag;
  /* 0x1136 */ char Padding_213[2];
  /* 0x1138 */ class bdSequenceNumber m_seqNum;
  /* 0x113c */ class bdSequenceNumberStore m_incomingSeqNums;
  /* 0x1144 */ class bdDTLSInitAck m_initAck;
  /* 0x0000 */ class bdNonce<16> m_cookieKey;
  /* 0x0011 */ char Padding_214[4451];
  /* 0x1174 */ class bdSecurityID m_localId;
  /* 0x117c */ class bdReference<bdCommonAddr> m_localCommonAddr;
  /* 0x1180 */ class bdAddressMap* m_addrMap;
  /* 0x1184 */ float m_receiveTimeout;
}; /* size: 0x1188 */

typedef enum _NVVIOCAPTURESTATUS
{
  NVVIOSTATUS_STOPPED = 0,
  NVVIOSTATUS_RUNNING = 1,
  NVVIOSTATUS_ERROR = 2,
} NVVIOCAPTURESTATUS, *PNVVIOCAPTURESTATUS;

typedef enum _NV_CODEC
{
  NV_CODEC_TYPE_NONE = 0,
  NV_CODEC_TYPE_MPEG2 = 1,
  NV_CODEC_TYPE_H264 = 2,
  NV_CODEC_TYPE_VC1 = 3,
  NV_CODEC_TYPE_MVC = 4,
} NV_CODEC, *PNV_CODEC;

enum J_BUF_MODE
{
  JBUF_PASS_THRU = 0,
  JBUF_SAVE_SOURCE = 1,
  JBUF_CRANK_DEST = 2,
  JBUF_SAVE_AND_PASS = 3,
};

typedef enum _NVVIOSYNCSTATUS
{
  NVVIOSYNCSTATUS_OFF = 0,
  NVVIOSYNCSTATUS_ERROR = 1,
  NVVIOSYNCSTATUS_SYNCLOSS = 2,
  NVVIOSYNCSTATUS_COMPOSITE = 3,
  NVVIOSYNCSTATUS_SDI_SD = 4,
  NVVIOSYNCSTATUS_SDI_HD = 5,
} NVVIOSYNCSTATUS, *PNVVIOSYNCSTATUS;

typedef enum _NVAPI_D3D9_DMA_TRANSFER_TYPE
{
  NVAPI_D3D9_DMA_TRANSFER_TYPE_PROGRESSIVE = 0,
  NVAPI_D3D9_DMA_TRANSFER_TYPE_INTERLACED = 1,
  NVAPI_D3D9_DMA_TRANSFER_TYPE_BOB_TOP_FIELD = 2,
  NVAPI_D3D9_DMA_TRANSFER_TYPE_BOB_BTM_FIELD = 3,
} NVAPI_D3D9_DMA_TRANSFER_TYPE, *PNVAPI_D3D9_DMA_TRANSFER_TYPE;

enum ShaderParamType
{
  SHADER_PARAM_FLOAT4 = 0,
  SHADER_PARAM_SAMPLER_2D = 1,
  SHADER_PARAM_SAMPLER_3D = 2,
  SHADER_PARAM_SAMPLER_CUBE = 3,
  SHADER_PARAM_SAMPLER_1D = 4,
};

enum NV_COOLER_TARGET
{
  NVAPI_COOLER_TARGET_NONE = 0,
  NVAPI_COOLER_TARGET_GPU = 1,
  NVAPI_COOLER_TARGET_MEMORY = 2,
  NVAPI_COOLER_TARGET_POWER_SUPPLY = 4,
  NVAPI_COOLER_TARGET_ALL = 7,
  NVAPI_COOLER_TARGET_VCD_COOLER1 = 8,
  NVAPI_COOLER_TARGET_VCD_COOLER2 = 9,
  NVAPI_COOLER_TARGET_VCD_COOLER3 = 10,
  NVAPI_COOLER_TARGET_VCD_COOLER4 = 11,
  NVAPI_COOLER_TARGET_VCD_COOLER5 = 12,
  NVAPI_COOLER_TARGET_VCD_COOLER6 = 13,
  NVAPI_COOLER_TARGET_VCD_COOLER7 = 14,
  NVAPI_COOLER_TARGET_VCD_COOLER8 = 15,
  NVAPI_COOLER_TARGET_VCD_COOLER9 = 16,
  NVAPI_COOLER_TARGET_VCD_COOLER10 = 17,
  NVAPI_COOLER_TARGET_VCD_COOLER11 = 18,
  NVAPI_COOLER_TARGET_VCD_COOLER12 = 19,
  NVAPI_COOLER_TARGET_VCD_COOLER13 = 20,
  NVAPI_COOLER_TARGET_VCD_COOLER14 = 21,
  NVAPI_COOLER_TARGET_VCD_COOLER15 = 22,
  NVAPI_COOLER_TARGET_VCD_COOLER16 = 23,
  NVAPI_COOLER_TARGET_VCD_COOLER17 = 24,
  NVAPI_COOLER_TARGET_VCD_COOLER18 = 25,
  NVAPI_COOLER_TARGET_VCD_COOLER19 = 26,
  NVAPI_COOLER_TARGET_VCD_COOLER20 = 27,
};

typedef enum _NVAPI_VIDEO_ENGINES
{
  NVAPI_VE_UNKNOWN = 0,
  NVAPI_VE_PixelShader = 1,
  NVAPI_VE_MPEG2Decoder = 2,
  NVAPI_VE_VideoProcessor1 = 3,
  NVAPI_VE_VideoProcessor2 = 4,
  NVAPI_VE_MSDEC = 5,
  NVAPI_VE_VIC = 6,
} NVAPI_VIDEO_ENGINES, *PNVAPI_VIDEO_ENGINES;

enum NV_GPS_SENSOR_INDEX
{
  NV_GPS_SENSOR_INDEX_TGPU_LIMIT = 9,
  NV_GPS_SENSOR_INDEX_PDTS_LIMIT = 10,
  NV_GPS_SENSOR_INDEX_SFAN_LIMIT = 11,
  NV_GPS_SENSOR_INDEX_SKNT_LIMIT = 12,
  NV_GPS_SENSOR_INDEX_CPUE_LIMIT = 13,
  NV_GPS_SENSOR_INDEX_TMP1_LIMIT = 14,
  NV_GPS_SENSOR_INDEX_TMP2_LIMIT = 15,
};

struct tagCAUL
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ unsigned long* pElems;
}; /* size: 0x0008 */

enum NV_COOLER_TYPE
{
  NVAPI_COOLER_TYPE_NONE = 0,
  NVAPI_COOLER_TYPE_FAN = 1,
  NVAPI_COOLER_TYPE_WATER = 2,
  NVAPI_COOLER_TYPE_LIQUID_NO2 = 3,
};

typedef enum _NVVIOINPUTOUTPUTSTATUS
{
  NVINPUTOUTPUTSTATUS_OFF = 0,
  NVINPUTOUTPUTSTATUS_ERROR = 1,
  NVINPUTOUTPUTSTATUS_SDI_SD = 2,
  NVINPUTOUTPUTSTATUS_SDI_HD = 3,
} NVVIOINPUTOUTPUTSTATUS, *PNVVIOINPUTOUTPUTSTATUS;

enum NV_HW_CURSOR_COLOR_FORMAT_FLAGS
{
  NV_HW_CURSOR_COLOR_FORMAT_MONOCHROME = 0,
  NV_HW_CURSOR_COLOR_FORMAT_COLOR = 1,
  NV_HW_CURSOR_COLOR_FORMAT_MASKED_COLOR = 2,
};

class CCallback<LiveSteamServer,GSClientApprove_t,1>
{
  /* 0x0000 */ long Padding_215[3];
  /* 0x000c */ class LiveSteamServer* m_pObj;
  /* 0x0010 */ void* m_Func /* function */;
}; /* size: 0x0014 */

typedef enum _NVVIOSIGNALFORMAT
{
  NVVIOSIGNALFORMAT_NONE = 0,
  NVVIOSIGNALFORMAT_487I_59_94_SMPTE259_NTSC = 1,
  NVVIOSIGNALFORMAT_576I_50_00_SMPTE259_PAL = 2,
  NVVIOSIGNALFORMAT_1035I_60_00_SMPTE260 = 3,
  NVVIOSIGNALFORMAT_1035I_59_94_SMPTE260 = 4,
  NVVIOSIGNALFORMAT_1080I_50_00_SMPTE295 = 5,
  NVVIOSIGNALFORMAT_1080I_60_00_SMPTE274 = 6,
  NVVIOSIGNALFORMAT_1080I_59_94_SMPTE274 = 7,
  NVVIOSIGNALFORMAT_1080I_50_00_SMPTE274 = 8,
  NVVIOSIGNALFORMAT_1080P_30_00_SMPTE274 = 9,
  NVVIOSIGNALFORMAT_1080P_29_97_SMPTE274 = 10,
  NVVIOSIGNALFORMAT_1080P_25_00_SMPTE274 = 11,
  NVVIOSIGNALFORMAT_1080P_24_00_SMPTE274 = 12,
  NVVIOSIGNALFORMAT_1080P_23_976_SMPTE274 = 13,
  NVVIOSIGNALFORMAT_720P_60_00_SMPTE296 = 14,
  NVVIOSIGNALFORMAT_720P_59_94_SMPTE296 = 15,
  NVVIOSIGNALFORMAT_720P_50_00_SMPTE296 = 16,
  NVVIOSIGNALFORMAT_1080I_48_00_SMPTE274 = 17,
  NVVIOSIGNALFORMAT_1080I_47_96_SMPTE274 = 18,
  NVVIOSIGNALFORMAT_720P_30_00_SMPTE296 = 19,
  NVVIOSIGNALFORMAT_720P_29_97_SMPTE296 = 20,
  NVVIOSIGNALFORMAT_720P_25_00_SMPTE296 = 21,
  NVVIOSIGNALFORMAT_720P_24_00_SMPTE296 = 22,
  NVVIOSIGNALFORMAT_720P_23_98_SMPTE296 = 23,
  NVVIOSIGNALFORMAT_2048P_30_00_SMPTE372 = 24,
  NVVIOSIGNALFORMAT_2048P_29_97_SMPTE372 = 25,
  NVVIOSIGNALFORMAT_2048I_60_00_SMPTE372 = 26,
  NVVIOSIGNALFORMAT_2048I_59_94_SMPTE372 = 27,
  NVVIOSIGNALFORMAT_2048P_25_00_SMPTE372 = 28,
  NVVIOSIGNALFORMAT_2048I_50_00_SMPTE372 = 29,
  NVVIOSIGNALFORMAT_2048P_24_00_SMPTE372 = 30,
  NVVIOSIGNALFORMAT_2048P_23_98_SMPTE372 = 31,
  NVVIOSIGNALFORMAT_2048I_48_00_SMPTE372 = 32,
  NVVIOSIGNALFORMAT_2048I_47_96_SMPTE372 = 33,
  NVVIOSIGNALFORMAT_1080PSF_25_00_SMPTE274 = 34,
  NVVIOSIGNALFORMAT_1080PSF_29_97_SMPTE274 = 35,
  NVVIOSIGNALFORMAT_1080PSF_30_00_SMPTE274 = 36,
  NVVIOSIGNALFORMAT_1080PSF_24_00_SMPTE274 = 37,
  NVVIOSIGNALFORMAT_1080PSF_23_98_SMPTE274 = 38,
  NVVIOSIGNALFORMAT_1080P_50_00_SMPTE274_3G_LEVEL_A = 39,
  NVVIOSIGNALFORMAT_1080P_59_94_SMPTE274_3G_LEVEL_A = 40,
  NVVIOSIGNALFORMAT_1080P_60_00_SMPTE274_3G_LEVEL_A = 41,
  NVVIOSIGNALFORMAT_1080P_60_00_SMPTE274_3G_LEVEL_B = 42,
  NVVIOSIGNALFORMAT_1080I_60_00_SMPTE274_3G_LEVEL_B = 43,
  NVVIOSIGNALFORMAT_2048I_60_00_SMPTE372_3G_LEVEL_B = 44,
  NVVIOSIGNALFORMAT_1080P_50_00_SMPTE274_3G_LEVEL_B = 45,
  NVVIOSIGNALFORMAT_1080I_50_00_SMPTE274_3G_LEVEL_B = 46,
  NVVIOSIGNALFORMAT_2048I_50_00_SMPTE372_3G_LEVEL_B = 47,
  NVVIOSIGNALFORMAT_1080P_30_00_SMPTE274_3G_LEVEL_B = 48,
  NVVIOSIGNALFORMAT_2048P_30_00_SMPTE372_3G_LEVEL_B = 49,
  NVVIOSIGNALFORMAT_1080P_25_00_SMPTE274_3G_LEVEL_B = 50,
  NVVIOSIGNALFORMAT_2048P_25_00_SMPTE372_3G_LEVEL_B = 51,
  NVVIOSIGNALFORMAT_1080P_24_00_SMPTE274_3G_LEVEL_B = 52,
  NVVIOSIGNALFORMAT_2048P_24_00_SMPTE372_3G_LEVEL_B = 53,
  NVVIOSIGNALFORMAT_1080I_48_00_SMPTE274_3G_LEVEL_B = 54,
  NVVIOSIGNALFORMAT_2048I_48_00_SMPTE372_3G_LEVEL_B = 55,
  NVVIOSIGNALFORMAT_1080P_59_94_SMPTE274_3G_LEVEL_B = 56,
  NVVIOSIGNALFORMAT_1080I_59_94_SMPTE274_3G_LEVEL_B = 57,
  NVVIOSIGNALFORMAT_2048I_59_94_SMPTE372_3G_LEVEL_B = 58,
  NVVIOSIGNALFORMAT_1080P_29_97_SMPTE274_3G_LEVEL_B = 59,
  NVVIOSIGNALFORMAT_2048P_29_97_SMPTE372_3G_LEVEL_B = 60,
  NVVIOSIGNALFORMAT_1080P_23_98_SMPTE274_3G_LEVEL_B = 61,
  NVVIOSIGNALFORMAT_2048P_23_98_SMPTE372_3G_LEVEL_B = 62,
  NVVIOSIGNALFORMAT_1080I_47_96_SMPTE274_3G_LEVEL_B = 63,
  NVVIOSIGNALFORMAT_2048I_47_96_SMPTE372_3G_LEVEL_B = 64,
  NVVIOSIGNALFORMAT_END = 65,
} NVVIOSIGNALFORMAT, *PNVVIOSIGNALFORMAT;

enum NV_COOLER_ACTIVITY_LEVEL
{
  NVAPI_INACTIVE = 0,
  NVAPI_ACTIVE = 1,
};

enum NV_SYSTEM_TYPE
{
  NV_SYSTEM_TYPE_UNKNOWN = 0,
  NV_SYSTEM_TYPE_LAPTOP = 1,
  NV_SYSTEM_TYPE_DESKTOP = 2,
};

enum D2D1_GEOMETRY_RELATION
{
};

enum NV_DP_COLORIMETRY
{
  NV_DP_COLORIMETRY_RGB = 0,
  NV_DP_COLORIMETRY_YCbCr_ITU601 = 1,
  NV_DP_COLORIMETRY_YCbCr_ITU709 = 2,
};

class bdLinkable
{
  /* 0x0000 */ long Padding_216;
  /* 0x0004 */ class bdLinkable* m_previous;
  /* 0x0008 */ class bdLinkable* m_next;
  /* 0x000c */ class bdLinkable** m_headPtr;
}; /* size: 0x0010 */

typedef enum _NVVIOPCILINKWIDTH
{
  NVVIOPCILINKWIDTH_UNKNOWN = 0,
  NVVIOPCILINKWIDTH_x1 = 1,
  NVVIOPCILINKWIDTH_x2 = 2,
  NVVIOPCILINKWIDTH_x4 = 4,
  NVVIOPCILINKWIDTH_x8 = 8,
  NVVIOPCILINKWIDTH_x16 = 16,
} NVVIOPCILINKWIDTH, *PNVVIOPCILINKWIDTH;

typedef enum _D3DSAMPLERSTATETYPE
{
  D3DSAMP_ADDRESSU = 1,
  D3DSAMP_ADDRESSV = 2,
  D3DSAMP_ADDRESSW = 3,
  D3DSAMP_BORDERCOLOR = 4,
  D3DSAMP_MAGFILTER = 5,
  D3DSAMP_MINFILTER = 6,
  D3DSAMP_MIPFILTER = 7,
  D3DSAMP_MIPMAPLODBIAS = 8,
  D3DSAMP_MAXMIPLEVEL = 9,
  D3DSAMP_MAXANISOTROPY = 10,
  D3DSAMP_SRGBTEXTURE = 11,
  D3DSAMP_ELEMENTINDEX = 12,
  D3DSAMP_DMAPOFFSET = 13,
  D3DSAMP_FORCE_DWORD = 0x7fffffff,
} D3DSAMPLERSTATETYPE, *PD3DSAMPLERSTATETYPE;

typedef enum _NVDRS_SETTING_LOCATION
{
  NVDRS_CURRENT_PROFILE_LOCATION = 0,
  NVDRS_GLOBAL_PROFILE_LOCATION = 1,
  NVDRS_BASE_PROFILE_LOCATION = 2,
} NVDRS_SETTING_LOCATION, *PNVDRS_SETTING_LOCATION;

enum NV_GPU_PERF_PSTATE20_CLOCK_TYPE_ID
{
  NVAPI_GPU_PERF_PSTATE20_CLOCK_TYPE_SINGLE = 0,
  NVAPI_GPU_PERF_PSTATE20_CLOCK_TYPE_RANGE = 1,
};

typedef enum _NVVIOVIDEOTYPE
{
  NVVIOVIDEOTYPE_SD = 0,
  NVVIOVIDEOTYPE_HD = 1,
} NVVIOVIDEOTYPE, *PNVVIOVIDEOTYPE;

enum D2D1_SWEEP_DIRECTION
{
};

typedef enum _NV_GPU_CONNECTOR_TYPE
{
  NVAPI_GPU_CONNECTOR_VGA_15_PIN = 0,
  NVAPI_GPU_CONNECTOR_TV_COMPOSITE = 16,
  NVAPI_GPU_CONNECTOR_TV_SVIDEO = 17,
  NVAPI_GPU_CONNECTOR_TV_HDTV_COMPONENT = 19,
  NVAPI_GPU_CONNECTOR_TV_SCART = 20,
  NVAPI_GPU_CONNECTOR_TV_COMPOSITE_SCART_ON_EIAJ4120 = 22,
  NVAPI_GPU_CONNECTOR_TV_HDTV_EIAJ4120 = 23,
  NVAPI_GPU_CONNECTOR_PC_POD_HDTV_YPRPB = 24,
  NVAPI_GPU_CONNECTOR_PC_POD_SVIDEO = 25,
  NVAPI_GPU_CONNECTOR_PC_POD_COMPOSITE = 26,
  NVAPI_GPU_CONNECTOR_DVI_I_TV_SVIDEO = 32,
  NVAPI_GPU_CONNECTOR_DVI_I_TV_COMPOSITE = 33,
  NVAPI_GPU_CONNECTOR_DVI_I = 48,
  NVAPI_GPU_CONNECTOR_DVI_D = 49,
  NVAPI_GPU_CONNECTOR_ADC = 50,
  NVAPI_GPU_CONNECTOR_LFH_DVI_I_1 = 56,
  NVAPI_GPU_CONNECTOR_LFH_DVI_I_2 = 57,
  NVAPI_GPU_CONNECTOR_SPWG = 64,
  NVAPI_GPU_CONNECTOR_OEM = 65,
  NVAPI_GPU_CONNECTOR_DISPLAYPORT_EXTERNAL = 70,
  NVAPI_GPU_CONNECTOR_DISPLAYPORT_INTERNAL = 71,
  NVAPI_GPU_CONNECTOR_DISPLAYPORT_MINI_EXT = 72,
  NVAPI_GPU_CONNECTOR_HDMI_A = 97,
  NVAPI_GPU_CONNECTOR_HDMI_C_MINI = 99,
  NVAPI_GPU_CONNECTOR_LFH_DISPLAYPORT_1 = 100,
  NVAPI_GPU_CONNECTOR_LFH_DISPLAYPORT_2 = 101,
  NVAPI_GPU_CONNECTOR_UNKNOWN = -1,
} NV_GPU_CONNECTOR_TYPE, *PNV_GPU_CONNECTOR_TYPE;

typedef enum _NVVIOSTATUSTYPE
{
  NVVIOSTATUSTYPE_IN = 0,
  NVVIOSTATUSTYPE_OUT = 1,
} NVVIOSTATUSTYPE, *PNVVIOSTATUSTYPE;

typedef enum _TAG_UNNAMED_372
{
  X_AXIS = 0,
  Y_AXIS = 1,
  Z_AXIS = 2,
  NUM_AXIS = 3,
  AE_MIN_ELEMENT = 0,
  AE_MAX_ELEMENT = 1,
} TAG_UNNAMED_372, *PTAG_UNNAMED_372;

enum NV_VIRTUALMODE_CMD
{
  NV_VIRTUALMODE_CMD_GET_INFO = 1,
};

enum NV_HCLONE_HOTPLUG_BEHAVIOR
{
};

typedef enum _NV_GPU_CONNECTOR_PLATFORM
{
  NVAPI_GPU_CONNECTOR_PLATFORM_DEFAULT_ADD_IN_CARD = 0,
  NVAPI_GPU_CONNECTOR_PLATFORM_TWO_PLATE_ADD_IN_CARD = 1,
  NVAPI_GPU_CONNECTOR_PLATFORM_MOBILE_ADD_IN_CARD = 8,
  NVAPI_GPU_CONNECTOR_PLATFORM_MOBILE_BACK = 16,
  NVAPI_GPU_CONNECTOR_PLATFORM_MOBILE_BACK_LEFT = 17,
  NVAPI_GPU_CONNECTOR_PLATFORM_MOBILE_BACK_DOCK = 24,
  NVAPI_GPU_CONNECTOR_PLATFORM_MAINBOARD_DEFAULT = 32,
  NVAPI_GPU_CONNECTOR_PLATFORM_UNKNOWN = -1,
} NV_GPU_CONNECTOR_PLATFORM, *PNV_GPU_CONNECTOR_PLATFORM;

typedef enum _TAG_UNNAMED_373
{
  CUSTOM_SAMPLER_REFLECTION_PROBE = 0,
  CUSTOM_SAMPLER_LIGHTMAP_SECONDARY = 1,
  CUSTOM_SAMPLER_COUNT = 2,
} TAG_UNNAMED_373, *PTAG_UNNAMED_373;

typedef enum _NV_FORMAT
{
  NV_FORMAT_UNKNOWN = 0,
  NV_FORMAT_P8 = 41,
  NV_FORMAT_R5G6B5 = 23,
  NV_FORMAT_A8R8G8B8 = 21,
  NV_FORMAT_A16B16G16R16F = 113,
} NV_FORMAT, *PNV_FORMAT;

enum NV_COPROC_STATE
{
  NV_COPROC_STATE_DGPU_GOLD = 0,
  NV_COPROC_STATE_DGPU_ON = 1,
};

typedef enum _TAG_UNNAMED_374
{
  DRAWLIST_LIT_BSP = 0,
  DRAWLIST_LIT_STATIC_MODEL = 1,
  DRAWLIST_LIT = 2,
  DRAWLIST_LIT_BSP_POST_RESOLVE = 3,
  DRAWLIST_LIT_STATIC_MODEL_POST_RESOLVE = 4,
  DRAWLIST_LIT_POST_RESOLVE = 5,
  DRAWLIST_LIT_SONAR = 6,
  DRAWLIST_LIGHT_MAP_BSP = 7,
  DRAWLIST_LIGHT_MAP_STATIC_MODEL = 8,
  DRAWLIST_LIGHT_MAP = 9,
  DRAWLIST_LIGHT_MAP_BSP_POST_RESOLVE = 10,
  DRAWLIST_LIGHT_MAP_STATIC_MODEL_POST_RESOLVE = 11,
  DRAWLIST_LIGHT_MAP_POST_RESOLVE = 12,
  DRAWLIST_DEPTH_HACK = 13,
  DRAWLIST_TRANS = 14,
  DRAWLIST_TRANS_POST_FX = 15,
  DRAWLIST_LIT_QUASI_OPAQUE = 16,
  DRAWLIST_EMISSIVE_OPAQUE = 17,
  DRAWLIST_EMISSIVE_FX = 18,
  DRAWLIST_SUPERFLARE = 19,
  DRAWLIST_VIEWMODEL_FX = 20,
  DRAWLIST_VIEWMODEL_TRANS = 21,
  DRAWLIST_POST_BLUR = 22,
  DRAWLIST_SUN_SHADOW_MAP0 = 23,
  DRAWLIST_SUN_SHADOW_MAP1 = 24,
  DRAWLIST_SPOT_SHADOW_MAP0 = 25,
  DRAWLIST_SPOT_SHADOW_MAP1 = 26,
  DRAWLIST_SPOT_SHADOW_MAP2 = 27,
  DRAWLIST_SPOT_SHADOW_MAP3 = 28,
  DRAWLIST_COUNT = 29,
} TAG_UNNAMED_374, *PTAG_UNNAMED_374;

typedef enum _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID
{
  NVAPI_GPU_PERF_VOLTAGE_INFO_DOMAIN_CORE = 0,
  NVAPI_GPU_PERF_VOLTAGE_INFO_DOMAIN_UNDEFINED = 16,
} NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID, *PNV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID;

struct winUserData_t
{
  /* 0x0000 */ enum winConnectionState_e connectionState;
  /* 0x0004 */ BOOL onConnectCalled;
  /* 0x0005 */ char Padding_217[3];
  /* 0x0008 */ int signInState;
  /* 0x000c */ unsigned char ticket[4096];
  /* 0x100c */ unsigned int ticketSize;
  /* 0x1010 */ class bdInetAddr authAddr;
  /* 0x1014 */ class bdInetAddr lsgAddr;
  /* 0x1018 */ int errorCount;
  /* 0x101c */ int backoffRecoverTime;
  /* 0x1020 */ BOOL isContentRestricted;
  /* 0x1021 */ BOOL isChatRestricted;
  /* 0x1022 */ char gamertag[32];
  /* 0x1042 */ char Padding_218[6];
  /* 0x1048 */ unsigned __int64 xuid;
  /* 0x1050 */ char xuidString[21];
  /* 0x1065 */ BOOL isGuest;
  /* 0x1066 */ char Padding_219[2];
  /* 0x1068 */ enum EUserTier tier;
  /* 0x106c */ BOOL isElite;
  /* 0x106d */ char __PADDING__[3];
}; /* size: 0x1070 */

enum NV_HDCP_COMMANDS
{
  NV_HDCP_CMD_NULL = 0,
  NV_HDCP_CMD_QUERY_HEAD_CONFIG = 1,
  NV_HDCP_CMD_READ_LINK_STATUS = 2,
  NV_HDCP_CMD_VALIDATE_LINK = 3,
  NV_HDCP_CMD_RENEGOTIATE = 4,
  NV_HDCP_CMD_ABORTAUTHENTICATION = 5,
  NV_HDCP_CMD_SETLINKPOLICY = 6,
};

typedef enum _NVVIOCONFIGTYPE
{
  NVVIOCONFIGTYPE_IN = 0,
  NVVIOCONFIGTYPE_OUT = 1,
} NVVIOCONFIGTYPE, *PNVVIOCONFIGTYPE;

typedef enum _TAG_UNNAMED_375
{
  VERTEX_SHADER_NONE = 0,
  VERTEX_SHADER_MODEL_LIT = 1,
  VERTEX_SHADER_MODEL_LIT_LIGHTMAP_VC = 2,
  VERTEX_SHADER_MODEL_UNLIT = 3,
} TAG_UNNAMED_375, *PTAG_UNNAMED_375;

enum NV_THERMAL_TARGET
{
  NVAPI_THERMAL_TARGET_NONE = 0,
  NVAPI_THERMAL_TARGET_GPU = 1,
  NVAPI_THERMAL_TARGET_MEMORY = 2,
  NVAPI_THERMAL_TARGET_POWER_SUPPLY = 4,
  NVAPI_THERMAL_TARGET_BOARD = 8,
  NVAPI_THERMAL_TARGET_VCD_BOARD = 9,
  NVAPI_THERMAL_TARGET_VCD_INLET = 10,
  NVAPI_THERMAL_TARGET_VCD_OUTLET = 11,
  NVAPI_THERMAL_TARGET_ALL = 15,
  NVAPI_THERMAL_TARGET_UNKNOWN = -1,
};

typedef enum _NV_GPU_BUS_TYPE
{
  NVAPI_GPU_BUS_TYPE_UNDEFINED = 0,
  NVAPI_GPU_BUS_TYPE_PCI = 1,
  NVAPI_GPU_BUS_TYPE_AGP = 2,
  NVAPI_GPU_BUS_TYPE_PCI_EXPRESS = 3,
  NVAPI_GPU_BUS_TYPE_FPCI = 4,
  NVAPI_GPU_BUS_TYPE_AXI = 5,
} NV_GPU_BUS_TYPE, *PNV_GPU_BUS_TYPE;

typedef enum _TAG_UNNAMED_376
{
  R_SPECULAR_OVERRIDE_NON_METAL = 0,
  R_SPECULAR_OVERRIDE_NONE = 1,
  R_SPECULAR_OVERRIDE_METAL = 2,
  R_SPECULAR_OVERRIDE_COUNT = 3,
} TAG_UNNAMED_376, *PTAG_UNNAMED_376;

typedef enum _NV_GPU_PUBLIC_CLOCK_ID
{
  NVAPI_GPU_PUBLIC_CLOCK_GRAPHICS = 0,
  NVAPI_GPU_PUBLIC_CLOCK_MEMORY = 4,
  NVAPI_GPU_PUBLIC_CLOCK_PROCESSOR = 7,
  NVAPI_GPU_PUBLIC_CLOCK_UNDEFINED = 32,
} NV_GPU_PUBLIC_CLOCK_ID, *PNV_GPU_PUBLIC_CLOCK_ID;

enum NV_HDCP_FLAGS
{
  NV_HDCP_FLAGS_NULL = 0,
  NV_HDCP_FLAGS_APINDEX = 1,
  NV_HDCP_FLAGS_AN = 16,
  NV_HDCP_FLAGS_AKSV = 32,
  NV_HDCP_FLAGS_BKSV = 64,
  NV_HDCP_FLAGS_BSTATUS = 128,
  NV_HDCP_FLAGS_CN = 256,
  NV_HDCP_FLAGS_CKSV = 512,
  NV_HDCP_FLAGS_DKSV = 1024,
  NV_HDCP_FLAGS_KP = 4096,
  NV_HDCP_FLAGS_S = 8192,
  NV_HDCP_FLAGS_CS = 16384,
  NV_HDCP_FLAGS_V = 0x10000,
  NV_HDCP_FLAGS_MP = 0x20000,
  NV_HDCP_FLAGS_BKSVLIST = 0x40000,
  NV_HDCP_FLAGS_DUAL_LINK = 0x100000,
  NV_HDCP_FLAGS_ALWAYS_AUTH = 0x200000,
  NV_HDCP_FLAGS_ON_BY_DEMAND = 0,
  NV_HDCP_FLAGS_ABORT_UNTRUST = 0x400000,
  NV_HDCP_FLAGS_ABORT_UNRELBL = 0x800000,
  NV_HDCP_FLAGS_ABORT_KSV_LEN = 0x1000000,
  NV_HDCP_FLAGS_ABORT_KSV_SIG = 0x2000000,
  NV_HDCP_FLAGS_ABORT_SRM_SIG = 0x4000000,
  NV_HDCP_FLAGS_ABORT_SRM_REV = 0x8000000,
  NV_HDCP_FLAGS_ABORT_NORDY = 0x10000000,
  NV_HDCP_FLAGS_ABORT_KSVTOP = 0x20000000,
  NV_HDCP_FLAGS_ABORT_BADBKSV = 0x40000000,
};

enum NV_GPU_CLIENT_POWER_POLICIES_POLICY_ID
{
  NV_GPU_CLIENT_POWER_POLICIES_POLICY_TOTAL_GPU_POWER = 0,
};

enum bdUnicastConnection::bdUnicastConnectionStatus
{
  BD_UC_CLOSED = 0,
  BD_UC_COOKIE_WAIT = 1,
  BD_UC_COOKIE_ECHOED = 2,
  BD_UC_ESTABLISHED = 3,
  BD_UC_SHUTDOWN_PENDING = 4,
  BD_UC_SHUTDOWN_SENT = 5,
  BD_UC_SHUTDOWN_RECEIVED = 6,
  BD_UC_SHUTDOWN_ACK_SENT = 7,
};

typedef enum _NV_GPU_HDCP_KEY_SOURCE
{
  NV_GPU_HDCP_KEY_SOURCE_UNKNOWN = 0,
  NV_GPU_HDCP_KEY_SOURCE_NONE = 1,
  NV_GPU_HDCP_KEY_SOURCE_CRYPTO_ROM = 2,
  NV_GPU_HDCP_KEY_SOURCE_SBIOS = 3,
  NV_GPU_HDCP_KEY_SOURCE_I2C_ROM = 4,
  NV_GPU_HDCP_KEY_SOURCE_FUSES = 5,
} NV_GPU_HDCP_KEY_SOURCE, *PNV_GPU_HDCP_KEY_SOURCE;

typedef enum _FPIEEE_ROUNDING_MODE
{
  _FpRoundNearest = 0,
  _FpRoundMinusInfinity = 1,
  _FpRoundPlusInfinity = 2,
  _FpRoundChopped = 3,
} FPIEEE_ROUNDING_MODE, *PFPIEEE_ROUNDING_MODE;

class bdDispatcher
{
  /* 0x0000 */ class bdFastArray<bdDispatchInterceptor *> m_interceptors;
}; /* size: 0x000c */

class bdConnectionStoreConfig
{
  /* 0x0000 */ unsigned int m_maxReceiveIterations;
  /* 0x0004 */ float m_maxShutdownDuration;
  /* 0x0008 */ unsigned int m_maxFlushIterations;
}; /* size: 0x000c */

class bdConnectionStore
{
  /* 0x0000 */ class bdSocketRouter* m_socket;
  /* 0x0004 */ class bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper> m_connectionMap;
  /* 0x001c */ enum bdConnectionStore::bdConnectionStoreStatus m_status;
  /* 0x0020 */ class bdDispatcher m_dispatcher;
  /* 0x002c */ long Padding_220;
  /* 0x0030 */ class bdStopwatch m_shutdownTimer;
  /* 0x0038 */ class bdAddressMap* m_addrMap;
  /* 0x003c */ class bdConnectionStoreConfig m_config;
}; /* size: 0x0048 */

typedef enum _NVAPI_VIDEO_DRIVER_ENTRY_POINT
{
  NVAPI_EP_UNKNOWN = 0,
  NVAPI_EP_DecodeEndFrame = 1,
  NVAPI_EP_OverlayTransfer = 2,
  NVAPI_EP_DIBlitEx = 3,
  NVAPI_EP_VideoProcessBlt = 4,
  NVAPI_EP_D3DBlt = 5,
  NVAPI_EP_Blit32 = 6,
  NVAPI_EP_VPBltHD = 7,
} NVAPI_VIDEO_DRIVER_ENTRY_POINT, *PNVAPI_VIDEO_DRIVER_ENTRY_POINT;

enum CURLversion
{
  CURLVERSION_FIRST = 0,
  CURLVERSION_SECOND = 1,
  CURLVERSION_THIRD = 2,
  CURLVERSION_FOURTH = 3,
  CURLVERSION_LAST = 4,
};

struct pendingServerStatus_t
{
  /* 0x0000 */ int num;
  /* 0x0004 */ struct pendingServer_t server[16];
}; /* size: 0x08c4 */

enum NV_EVENT_TYPE
{
  NV_EVENT_TYPE_NONE = 0,
  NV_EVENT_TYPE_FAN_SPEED_CHANGE = 1,
  NV_EVENT_TYPE_THERMAL_CHANGE = 2,
};

enum NV_GPU_RAM_TYPE
{
  NV_GPU_RAM_TYPE_UNKNOWN = 0,
  NV_GPU_RAM_TYPE_SDRAM = 1,
  NV_GPU_RAM_TYPE_DDR1 = 2,
  NV_GPU_RAM_TYPE_DDR2 = 3,
  NV_GPU_RAM_TYPE_GDDR2 = 4,
  NV_GPU_RAM_TYPE_GDDR3 = 5,
  NV_GPU_RAM_TYPE_GDDR4 = 6,
  NV_GPU_RAM_TYPE_DDR3 = 7,
  NV_GPU_RAM_TYPE_GDDR5 = 8,
  NV_GPU_RAM_TYPE_LPDDR2 = 9,
};

typedef enum _D3DTEXTURESTAGESTATETYPE
{
  D3DTSS_COLOROP = 1,
  D3DTSS_COLORARG1 = 2,
  D3DTSS_COLORARG2 = 3,
  D3DTSS_ALPHAOP = 4,
  D3DTSS_ALPHAARG1 = 5,
  D3DTSS_ALPHAARG2 = 6,
  D3DTSS_BUMPENVMAT00 = 7,
  D3DTSS_BUMPENVMAT01 = 8,
  D3DTSS_BUMPENVMAT10 = 9,
  D3DTSS_BUMPENVMAT11 = 10,
  D3DTSS_TEXCOORDINDEX = 11,
  D3DTSS_BUMPENVLSCALE = 22,
  D3DTSS_BUMPENVLOFFSET = 23,
  D3DTSS_TEXTURETRANSFORMFLAGS = 24,
  D3DTSS_COLORARG0 = 26,
  D3DTSS_ALPHAARG0 = 27,
  D3DTSS_RESULTARG = 28,
  D3DTSS_CONSTANT = 32,
  D3DTSS_FORCE_DWORD = 0x7fffffff,
} D3DTEXTURESTAGESTATETYPE, *PD3DTEXTURESTAGESTATETYPE;

typedef enum _NV_ECC_CONFIGURATION
{
  NV_ECC_CONFIGURATION_NOT_SUPPORTED = 0,
  NV_ECC_CONFIGURATION_DEFERRED = 1,
  NV_ECC_CONFIGURATION_IMMEDIATE = 2,
} NV_ECC_CONFIGURATION, *PNV_ECC_CONFIGURATION;

typedef enum _NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_LANES
{
  NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_NONE = 0,
  NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_SINGLE_LANE = 1,
  NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_DUAL_LANE = 2,
  NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_QUAD_LANE = 3,
} NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_LANES, *PNV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_LANES;

enum DWRITE_TEXT_ALIGNMENT
{
};

typedef enum _NV_STEREO_VIDEO_FORMAT
{
  NV_STEREO_VIDEO_FORMAT_NOT_STEREO = 0,
  NV_STEREO_VIDEO_FORMAT_SIDE_BY_SIDE_LR = 1,
  NV_STEREO_VIDEO_FORMAT_SIDE_BY_SIDE_RL = 2,
  NV_STEREO_VIDEO_FORMAT_TOP_BOTTOM_LR = 3,
  NV_STEREO_VIDEO_FORMAT_TOP_BOTTOM_RL = 4,
  NV_STEREO_VIDEO_FORMAT_ROW_INTERLEAVE_LR = 5,
  NV_STEREO_VIDEO_FORMAT_ROW_INTERLEAVE_RL = 6,
  NV_STEREO_VIDEO_FORMAT_TWO_FRAMES_LR = 7,
  NV_STEREO_VIDEO_FORMAT_MONO_PLUS_OFFSET = 8,
  NV_STEREO_VIDEO_FORMAT_LAST = 9,
} NV_STEREO_VIDEO_FORMAT, *PNV_STEREO_VIDEO_FORMAT;

struct twitter_s
{
  /* 0x0000 */ unsigned __int64 xuid;
  /* 0x0008 */ class bdTwitterAccount account;
  /* 0x0098 */ enum twitterStatus_e status;
  /* 0x009c */ int retryCount;
  /* 0x00a0 */ int nextRetryTime;
  /* 0x00a4 */ long __PADDING__[1];
}; /* size: 0x00a8 */

typedef enum _NV_GPU_TYPE
{
  NV_SYSTEM_TYPE_GPU_UNKNOWN = 0,
  NV_SYSTEM_TYPE_IGPU = 1,
  NV_SYSTEM_TYPE_DGPU = 2,
} NV_GPU_TYPE, *PNV_GPU_TYPE;

typedef enum _NV_DPCD_CMD
{
  NV_DP_AUXCH_CMD_REQ_TYPE_WRITE = 0,
  NV_DP_AUXCH_CMD_REQ_TYPE_READ = 1,
  NV_DP_AUXCH_CMD_REQ_TYPE_I2C_WRITE = 2,
  NV_DP_AUXCH_CMD_REQ_TYPE_I2C_READ = 3,
  NV_DP_AUXCH_CMD_REQ_TYPE_I2C_WRITE_STATUS = 4,
  NV_DP_AUXCH_CMD_REQ_TYPE_MOT_I2C_WRITE = 5,
  NV_DP_AUXCH_CMD_REQ_TYPE_MOT_I2C_READ = 6,
} NV_DPCD_CMD, *PNV_DPCD_CMD;

typedef enum _D3DPOOL
{
  D3DPOOL_DEFAULT = 0,
  D3DPOOL_MANAGED = 1,
  D3DPOOL_SYSTEMMEM = 2,
  D3DPOOL_SCRATCH = 3,
  D3DPOOL_FORCE_DWORD = 0x7fffffff,
} D3DPOOL, *PD3DPOOL;

class bdNATTravClientData
{
  /* 0x0000 */ enum bdNATTravClientData::bdNATTravClientDataState m_state;
  /* 0x0004 */ class bdReference<bdCommonAddr> m_local;
  /* 0x0008 */ class bdReference<bdCommonAddr> m_remote;
  /* 0x000c */ class bdNATTravListener* m_listener;
  /* 0x0010 */ class bdNATTravListener* m_secondaryListener;
  /* 0x0014 */ unsigned int m_tries;
  /* 0x0018 */ class bdStopwatch m_lastSent;
  /* 0x0020 */ BOOL m_throttled;
  /* 0x0021 */ char Padding_221[7];
  /* 0x0028 */ class bdStopwatch m_age;
}; /* size: 0x0030 */

class bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass>::Node
{
  /* 0x0000 */ class bdNATTravClientData m_data;
  /* 0x0030 */ unsigned int m_key;
  /* 0x0034 */ class bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass>::Node* m_next;
}; /* size: 0x0038 */

enum NV_THERMAL_CONTROLLER
{
  NVAPI_THERMAL_CONTROLLER_NONE = 0,
  NVAPI_THERMAL_CONTROLLER_GPU_INTERNAL = 1,
  NVAPI_THERMAL_CONTROLLER_ADM1032 = 2,
  NVAPI_THERMAL_CONTROLLER_MAX6649 = 3,
  NVAPI_THERMAL_CONTROLLER_MAX1617 = 4,
  NVAPI_THERMAL_CONTROLLER_LM99 = 5,
  NVAPI_THERMAL_CONTROLLER_LM89 = 6,
  NVAPI_THERMAL_CONTROLLER_LM64 = 7,
  NVAPI_THERMAL_CONTROLLER_ADT7473 = 8,
  NVAPI_THERMAL_CONTROLLER_SBMAX6649 = 9,
  NVAPI_THERMAL_CONTROLLER_VBIOSEVT = 10,
  NVAPI_THERMAL_CONTROLLER_OS = 11,
  NVAPI_THERMAL_CONTROLLER_UNKNOWN = -1,
};

enum NVAPI_GPIO_DIRECTION
{
  NVAPI_GPIO_DIRECTION_INPUT = 0,
  NVAPI_GPIO_DIRECTION_OUTPUT = 1,
};

typedef enum _D3DRENDERSTATETYPE
{
  D3DRS_ZENABLE = 7,
  D3DRS_FILLMODE = 8,
  D3DRS_SHADEMODE = 9,
  D3DRS_ZWRITEENABLE = 14,
  D3DRS_ALPHATESTENABLE = 15,
  D3DRS_LASTPIXEL = 16,
  D3DRS_SRCBLEND = 19,
  D3DRS_DESTBLEND = 20,
  D3DRS_CULLMODE = 22,
  D3DRS_ZFUNC = 23,
  D3DRS_ALPHAREF = 24,
  D3DRS_ALPHAFUNC = 25,
  D3DRS_DITHERENABLE = 26,
  D3DRS_ALPHABLENDENABLE = 27,
  D3DRS_FOGENABLE = 28,
  D3DRS_SPECULARENABLE = 29,
  D3DRS_FOGCOLOR = 34,
  D3DRS_FOGTABLEMODE = 35,
  D3DRS_FOGSTART = 36,
  D3DRS_FOGEND = 37,
  D3DRS_FOGDENSITY = 38,
  D3DRS_RANGEFOGENABLE = 48,
  D3DRS_STENCILENABLE = 52,
  D3DRS_STENCILFAIL = 53,
  D3DRS_STENCILZFAIL = 54,
  D3DRS_STENCILPASS = 55,
  D3DRS_STENCILFUNC = 56,
  D3DRS_STENCILREF = 57,
  D3DRS_STENCILMASK = 58,
  D3DRS_STENCILWRITEMASK = 59,
  D3DRS_TEXTUREFACTOR = 60,
  D3DRS_WRAP0 = 128,
  D3DRS_WRAP1 = 129,
  D3DRS_WRAP2 = 130,
  D3DRS_WRAP3 = 131,
  D3DRS_WRAP4 = 132,
  D3DRS_WRAP5 = 133,
  D3DRS_WRAP6 = 134,
  D3DRS_WRAP7 = 135,
  D3DRS_CLIPPING = 136,
  D3DRS_LIGHTING = 137,
  D3DRS_AMBIENT = 139,
  D3DRS_FOGVERTEXMODE = 140,
  D3DRS_COLORVERTEX = 141,
  D3DRS_LOCALVIEWER = 142,
  D3DRS_NORMALIZENORMALS = 143,
  D3DRS_DIFFUSEMATERIALSOURCE = 145,
  D3DRS_SPECULARMATERIALSOURCE = 146,
  D3DRS_AMBIENTMATERIALSOURCE = 147,
  D3DRS_EMISSIVEMATERIALSOURCE = 148,
  D3DRS_VERTEXBLEND = 151,
  D3DRS_CLIPPLANEENABLE = 152,
  D3DRS_POINTSIZE = 154,
  D3DRS_POINTSIZE_MIN = 155,
  D3DRS_POINTSPRITEENABLE = 156,
  D3DRS_POINTSCALEENABLE = 157,
  D3DRS_POINTSCALE_A = 158,
  D3DRS_POINTSCALE_B = 159,
  D3DRS_POINTSCALE_C = 160,
  D3DRS_MULTISAMPLEANTIALIAS = 161,
  D3DRS_MULTISAMPLEMASK = 162,
  D3DRS_PATCHEDGESTYLE = 163,
  D3DRS_DEBUGMONITORTOKEN = 165,
  D3DRS_POINTSIZE_MAX = 166,
  D3DRS_INDEXEDVERTEXBLENDENABLE = 167,
  D3DRS_COLORWRITEENABLE = 168,
  D3DRS_TWEENFACTOR = 170,
  D3DRS_BLENDOP = 171,
  D3DRS_POSITIONDEGREE = 172,
  D3DRS_NORMALDEGREE = 173,
  D3DRS_SCISSORTESTENABLE = 174,
  D3DRS_SLOPESCALEDEPTHBIAS = 175,
  D3DRS_ANTIALIASEDLINEENABLE = 176,
  D3DRS_MINTESSELLATIONLEVEL = 178,
  D3DRS_MAXTESSELLATIONLEVEL = 179,
  D3DRS_ADAPTIVETESS_X = 180,
  D3DRS_ADAPTIVETESS_Y = 181,
  D3DRS_ADAPTIVETESS_Z = 182,
  D3DRS_ADAPTIVETESS_W = 183,
  D3DRS_ENABLEADAPTIVETESSELLATION = 184,
  D3DRS_TWOSIDEDSTENCILMODE = 185,
  D3DRS_CCW_STENCILFAIL = 186,
  D3DRS_CCW_STENCILZFAIL = 187,
  D3DRS_CCW_STENCILPASS = 188,
  D3DRS_CCW_STENCILFUNC = 189,
  D3DRS_COLORWRITEENABLE1 = 190,
  D3DRS_COLORWRITEENABLE2 = 191,
  D3DRS_COLORWRITEENABLE3 = 192,
  D3DRS_BLENDFACTOR = 193,
  D3DRS_SRGBWRITEENABLE = 194,
  D3DRS_DEPTHBIAS = 195,
  D3DRS_WRAP8 = 198,
  D3DRS_WRAP9 = 199,
  D3DRS_WRAP10 = 200,
  D3DRS_WRAP11 = 201,
  D3DRS_WRAP12 = 202,
  D3DRS_WRAP13 = 203,
  D3DRS_WRAP14 = 204,
  D3DRS_WRAP15 = 205,
  D3DRS_SEPARATEALPHABLENDENABLE = 206,
  D3DRS_SRCBLENDALPHA = 207,
  D3DRS_DESTBLENDALPHA = 208,
  D3DRS_BLENDOPALPHA = 209,
  D3DRS_FORCE_DWORD = 0x7fffffff,
} D3DRENDERSTATETYPE, *PD3DRENDERSTATETYPE;

enum NV_DP_COLOR_FORMAT
{
  NV_DP_COLOR_FORMAT_RGB = 0,
  NV_DP_COLOR_FORMAT_YCbCr422 = 1,
  NV_DP_COLOR_FORMAT_YCbCr444 = 2,
};

typedef enum _NV_DPCD_REPLY_TYPE
{
  NV_DP_AUXCH_REPLYTYPE_ACK = 0,
  NV_DP_AUXCH_REPLYTYPE_NACK = 1,
  NV_DP_AUXCH_REPLYTYPE_DEFER = 2,
  NV_DP_AUXCH_REPLYTYPE_TIMEOUT = 255,
} NV_DPCD_REPLY_TYPE, *PNV_DPCD_REPLY_TYPE;

struct PMD
{
  /* 0x0000 */ int mdisp;
  /* 0x0004 */ int pdisp;
  /* 0x0008 */ int vdisp;
}; /* size: 0x000c */

enum D3D10_FILL_MODE
{
};

struct z_stream_s
{
  /* 0x0000 */ unsigned char* next_in;
  /* 0x0004 */ unsigned int avail_in;
  /* 0x0008 */ unsigned long total_in;
  /* 0x000c */ unsigned char* next_out;
  /* 0x0010 */ unsigned int avail_out;
  /* 0x0014 */ unsigned long total_out;
  /* 0x0018 */ char* msg;
  /* 0x001c */ struct internal_state* state;
  /* 0x0020 */ void* zalloc /* function */;
  /* 0x0024 */ void* zfree /* function */;
  /* 0x0028 */ unsigned char* opaque;
  /* 0x002c */ int data_type;
  /* 0x0030 */ unsigned long adler;
}; /* size: 0x0034 */

struct IXAudio2SubmixVoice
{
}; /* size: 0x0004 */

enum D3D10_CULL_MODE
{
};

typedef enum _TAG_UNNAMED_377
{
  CINEMATIC_IMAGE_MAIN0 = 0,
  CINEMATIC_IMAGE_MAIN1 = 1,
  CINEMATIC_IMAGES_REQUIRED_MAIN = 2,
  CINEMATIC_IMAGES_REQUIRED = 2,
} TAG_UNNAMED_377, *PTAG_UNNAMED_377;

enum D3D10_STENCIL_OP
{
};

class std::exception
{
  /* 0x0000 */ long Padding_222;
  /* 0x0004 */ const char* _Mywhat;
  /* 0x0008 */ BOOL _Mydofree;
}; /* size: 0x000c */

enum D3D10_COMPARISON_FUNC
{
};

struct clSnapshot_t
{
  /* 0x0000 */ int valid;
  /* 0x0004 */ int snapFlags;
  /* 0x0008 */ int serverTime;
  /* 0x000c */ int physicsTime;
  /* 0x0010 */ int messageNum;
  /* 0x0014 */ int deltaNum;
  /* 0x0018 */ int ping;
  /* 0x001c */ int cmdNum;
  /* 0x0020 */ struct playerState_s ps;
  /* 0x2a28 */ int numEntities;
  /* 0x2a2c */ int numClients;
  /* 0x2a30 */ int numActors;
  /* 0x2a34 */ int parseMatchStateIndex;
  /* 0x2a38 */ int parseEntitiesIndex;
  /* 0x2a3c */ int parseClientsIndex;
  /* 0x2a40 */ int parseActorsIndex;
  /* 0x2a44 */ int serverCommandNum;
}; /* size: 0x2a48 */

enum D3D10_FILTER
{
};

enum D3D10_TEXTURE_ADDRESS_MODE
{
};

enum DpvsForceBevels
{
  DPVS_DONT_FORCE_BEVELS = 0,
  DPVS_FORCE_BEVELS = 1,
};

class bdUploadInterceptor
{
}; /* size: 0x0004 */

struct serverStatusInfo_s
{
  /* 0x0000 */ char address[64];
  /* 0x0040 */ const char* lines[8][128];
  /* 0x1040 */ char text[1024];
  /* 0x1440 */ char pings[54];
  /* 0x1476 */ char Padding_223[2];
  /* 0x1478 */ int numLines;
}; /* size: 0x147c */

enum D3D10_BLEND
{
};

enum D3D10_BLEND_OP
{
};

struct jsmntok_t
{
  /* 0x0000 */ enum jsmntype_t type;
  /* 0x0004 */ int start;
  /* 0x0008 */ int end;
  /* 0x000c */ int size;
  /* 0x0010 */ union jsmnVal_u* val;
  /* 0x0014 */ enum jsmnPrimitiveType_e primType;
}; /* size: 0x0018 */

typedef struct _MINIDUMP_INCLUDE_MODULE_CALLBACK
{
  /* 0x0000 */ unsigned __int64 BaseOfImage;
} MINIDUMP_INCLUDE_MODULE_CALLBACK, *PMINIDUMP_INCLUDE_MODULE_CALLBACK; /* size: 0x0008 */

enum D2D1_GAMMA
{
  D2D1_GAMMA_2_2 = 0,
  D2D1_GAMMA_1_0 = 1,
  D2D1_GAMMA_FORCE_DWORD = -1,
};

enum D2D1_EXTEND_MODE
{
  D2D1_EXTEND_MODE_CLAMP = 0,
  D2D1_EXTEND_MODE_WRAP = 1,
  D2D1_EXTEND_MODE_MIRROR = 2,
  D2D1_EXTEND_MODE_FORCE_DWORD = -1,
};

typedef enum _TAG_UNNAMED_378
{
  TEXT_RENDERFLAG_FORCEMONOSPACE = 1,
  TEXT_RENDERFLAG_CURSOR = 2,
  TEXT_RENDERFLAG_DROPSHADOW = 4,
  TEXT_RENDERFLAG_DROPSHADOW_EXTRA = 8,
  TEXT_RENDERFLAG_GLOW = 16,
  TEXT_RENDERFLAG_GLOW_FORCE_COLOR = 32,
  TEXT_RENDERFLAG_FX_DECODE = 64,
  TEXT_RENDERFLAG_PADDING = 128,
  TEXT_RENDERFLAG_SUBTITLETEXT = 256,
  TEXT_RENDERFLAG_CINEMATIC = 512,
  TEXT_RENDERFLAG_TYPEWRITER = 1024,
  TEXT_RENDERFLAG_FADEIN = 2048,
  TEXT_RENDERFLAG_COD7_TYPEWRITER = 4096,
  TEXT_RENDERFLAG_POP_IN_WRITE = 8192,
  TEXT_RENDERFLAG_REDACT = 16384,
  TEXT_RENDERFLAG_JITTERSCALE = 0xffff8000,
  TEXT_RENDERFLAG_COD7_DECODE = 0x10000,
  TEXT_RENDERFLAG_AUTOWRAP = 0x20000,
} TAG_UNNAMED_378, *PTAG_UNNAMED_378;

enum D2D1_ANTIALIAS_MODE
{
  D2D1_ANTIALIAS_MODE_PER_PRIMITIVE = 0,
  D2D1_ANTIALIAS_MODE_ALIASED = 1,
  D2D1_ANTIALIAS_MODE_FORCE_DWORD = -1,
};

struct ct_data_s
{
  union
  {
    union
    {
      /* 0x0000 */ unsigned short freq;
      /* 0x0000 */ unsigned short code;
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ fc;
  union
  {
    union
    {
      /* 0x0002 */ unsigned short dad;
      /* 0x0002 */ unsigned short len;
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ dl;
}; /* size: 0x0004 */

typedef struct _MINIDUMP_INCLUDE_THREAD_CALLBACK
{
  /* 0x0000 */ unsigned long ThreadId;
} MINIDUMP_INCLUDE_THREAD_CALLBACK, *PMINIDUMP_INCLUDE_THREAD_CALLBACK; /* size: 0x0004 */

struct XMFLOAT4A
{
}; /* size: 0x0010 */

enum D2D1_TEXT_ANTIALIAS_MODE
{
  D2D1_TEXT_ANTIALIAS_MODE_DEFAULT = 0,
  D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE = 1,
  D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE = 2,
  D2D1_TEXT_ANTIALIAS_MODE_ALIASED = 3,
  D2D1_TEXT_ANTIALIAS_MODE_FORCE_DWORD = -1,
};

enum D2D1_DASH_STYLE
{
  D2D1_DASH_STYLE_SOLID = 0,
  D2D1_DASH_STYLE_DASH = 1,
  D2D1_DASH_STYLE_DOT = 2,
  D2D1_DASH_STYLE_DASH_DOT = 3,
  D2D1_DASH_STYLE_DASH_DOT_DOT = 4,
  D2D1_DASH_STYLE_CUSTOM = 5,
  D2D1_DASH_STYLE_FORCE_DWORD = -1,
};

struct D3D11_COUNTER_INFO
{
  /* 0x0000 */ enum D3D11_COUNTER LastDeviceDependentCounter;
  /* 0x0004 */ unsigned int NumSimultaneousCounters;
  /* 0x0008 */ unsigned char NumDetectableParallelUnits;
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

enum D2D1_LINE_JOIN
{
  D2D1_LINE_JOIN_MITER = 0,
  D2D1_LINE_JOIN_BEVEL = 1,
  D2D1_LINE_JOIN_ROUND = 2,
  D2D1_LINE_JOIN_MITER_OR_BEVEL = 3,
  D2D1_LINE_JOIN_FORCE_DWORD = -1,
};

typedef enum _TAG_UNNAMED_379
{
  DRAWSURFLISTINFOSETUP_LIT_QUASI_OPAQUE = 0,
  DRAWSURFLISTINFOSETUP_EMISSIVE_OPAQUE = 1,
  DRAWSURFLISTINFOSETUP_EMISSIVE_FX = 2,
  DRAWSURFLISTINFOSETUP_TRANS = 3,
  DRAWSURFLISTINFOSETUP_TRANS_POST_FX = 4,
  DRAWSURFLISTINFOSETUP_VIEWMODEL_FX = 5,
  DRAWSURFLISTINFOSETUP_SUPERFLARE = 6,
  DRAWSURFLISTINFOSETUP_VIEWMODEL_TRANS = 7,
  DRAWSURFLISTINFOSETUP_POST_BLUR = 8,
  DRAWSURFLISTINFOSETUP_LIT_BSP = 9,
  DRAWSURFLISTINFOSETUP_LIT_STATIC_MODEL = 10,
  DRAWSURFLISTINFOSETUP_LIT = 11,
  DRAWSURFLISTINFOSETUP_LIT_BSP_POST_RESOLVE = 12,
  DRAWSURFLISTINFOSETUP_LIT_STATIC_MODEL_POST_RESOLVE = 13,
  DRAWSURFLISTINFOSETUP_LIT_POST_RESOLVE = 14,
  DRAWSURFLISTINFOSETUP_LIGHTMAP_BSP = 15,
  DRAWSURFLISTINFOSETUP_LIGHTMAP_STATIC_MODEL = 16,
  DRAWSURFLISTINFOSETUP_LIGHTMAP = 17,
  DRAWSURFLISTINFOSETUP_LIGHTMAP_BSP_POST_RESOLVE = 18,
  DRAWSURFLISTINFOSETUP_LIGHTMAP_STATIC_MODEL_POST_RESOLVE = 19,
  DRAWSURFLISTINFOSETUP_LIGHTMAP_POST_RESOLVE = 20,
  DRAWSURFLISTINFOSETUP_DEPTH_HACK = 21,
  DRAWSURFLISTINFOSETUP_SONAR = 22,
  DRAWSURFLISTINFOSETUP_COUNT = 23,
} TAG_UNNAMED_379, *PTAG_UNNAMED_379;

typedef enum _D3DXCLEANTYPE
{
  D3DXCLEAN_BACKFACING = 1,
  D3DXCLEAN_BOWTIES = 2,
  D3DXCLEAN_SKINNING = 1,
  D3DXCLEAN_OPTIMIZATION = 1,
  D3DXCLEAN_SIMPLIFICATION = 3,
} D3DXCLEANTYPE, *PD3DXCLEANTYPE;

enum D2D1_LAYER_OPTIONS
{
  D2D1_LAYER_OPTIONS_NONE = 0,
  D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE = 1,
  D2D1_LAYER_OPTIONS_FORCE_DWORD = -1,
};

enum DWRITE_MEASURING_MODE
{
  DWRITE_MEASURING_MODE_NATURAL = 0,
  DWRITE_MEASURING_MODE_GDI_CLASSIC = 1,
  DWRITE_MEASURING_MODE_GDI_NATURAL = 2,
};

typedef enum _TAG_UNNAMED_380
{
  R_SHOW_COLLISION_NONE = 0,
  R_SHOW_COLLISION_ALL = 1,
  R_SHOW_COLLISION_PLAYER = 2,
  R_SHOW_COLLISION_BULLET = 3,
  R_SHOW_COLLISION_MISSILE = 4,
  R_SHOW_COLLISION_VEHICLE = 5,
  R_SHOW_COLLISION_MONSTER = 6,
  R_SHOW_COLLISION_ITEM = 7,
  R_SHOW_COLLISION_CANSHOOT = 8,
  R_SHOW_COLLISION_AINOSIGHT = 9,
  R_SHOW_COLLISION_COUNT = 10,
} TAG_UNNAMED_380, *PTAG_UNNAMED_380;

enum D2D1_RENDER_TARGET_USAGE
{
  D2D1_RENDER_TARGET_USAGE_NONE = 0,
  D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING = 1,
  D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE = 2,
  D2D1_RENDER_TARGET_USAGE_FORCE_DWORD = -1,
};

enum D2D1_PRESENT_OPTIONS
{
  D2D1_PRESENT_OPTIONS_NONE = 0,
  D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS = 1,
  D2D1_PRESENT_OPTIONS_IMMEDIATELY = 2,
  D2D1_PRESENT_OPTIONS_FORCE_DWORD = -1,
};

typedef enum _TAG_UNNAMED_381
{
  GFX_SM_OVERLAY_OFF = 0,
  GFX_SM_OVERLAY_SUN = 1,
  GFX_SM_OVERLAY_SPOT = 2,
  GFX_SM_OVERLAY_COUNT = 3,
} TAG_UNNAMED_381, *PTAG_UNNAMED_381;

enum D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS
{
  D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE = 0,
  D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE = 1,
  D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_FORCE_DWORD = -1,
};

typedef enum _D3DXERR
{
  D3DXERR_CANNOTMODIFYINDEXBUFFER = -2005529772,
  D3DXERR_INVALIDMESH = -2005529771,
  D3DXERR_CANNOTATTRSORT = -2005529770,
  D3DXERR_SKINNINGNOTSUPPORTED = -2005529769,
  D3DXERR_TOOMANYINFLUENCES = -2005529768,
  D3DXERR_INVALIDDATA = -2005529767,
  D3DXERR_LOADEDMESHASNODATA = -2005529766,
  D3DXERR_DUPLICATENAMEDFRAGMENT = -2005529765,
  D3DXERR_CANNOTREMOVELASTITEM = -2005529764,
} D3DXERR, *PD3DXERR;

enum DWRITE_FONT_FEATURE_TAG
{
};

typedef enum _TAG_UNNAMED_382
{
  STEREO_MODE_2D = 0,
  STEREO_MODE_3D = 1,
} TAG_UNNAMED_382, *PTAG_UNNAMED_382;

struct ID3D11ClassInstance
{
}; /* size: 0x0004 */

enum D2D1_FILL_MODE
{
};

enum D2D1_PATH_SEGMENT
{
};

enum DVBLOCK_VC_BLOOM
{
  BLOOM_vc_LIB = 0,
  BLOOM_vc_LIG = 1,
  BLOOM_vc_LIW = 2,
  BLOOM_vc_LOB = 3,
  BLOOM_vc_LOW = 4,
  BLOOM_vc_RGBH = 5,
  BLOOM_vc_RGBL = 6,
  BLOOM_vc_YH = 7,
  BLOOM_vc_YL = 8,
  BLOOM_VC_MAX = 9,
};

enum D2D1_FIGURE_BEGIN
{
};

enum D2D1_FIGURE_END
{
};

struct SndOcclusionStartCache
{
  /* 0x0000 */ union vec3_t position;
  /* 0x000c */ float value;
  /* 0x0010 */ BOOL valid;
  /* 0x0011 */ char __PADDING__[3];
}; /* size: 0x0014 */

enum DWRITE_FONT_STRETCH
{
};

typedef enum _TAG_UNNAMED_383
{
  LTC_ASN1_EOL = 0,
  LTC_ASN1_BOOLEAN = 1,
  LTC_ASN1_INTEGER = 2,
  LTC_ASN1_SHORT_INTEGER = 3,
  LTC_ASN1_BIT_STRING = 4,
  LTC_ASN1_OCTET_STRING = 5,
  LTC_ASN1_NULL = 6,
  LTC_ASN1_OBJECT_IDENTIFIER = 7,
  LTC_ASN1_IA5_STRING = 8,
  LTC_ASN1_PRINTABLE_STRING = 9,
  LTC_ASN1_UTF8_STRING = 10,
  LTC_ASN1_UTCTIME = 11,
  LTC_ASN1_CHOICE = 12,
  LTC_ASN1_SEQUENCE = 13,
  LTC_ASN1_SET = 14,
  LTC_ASN1_SETOF = 15,
} TAG_UNNAMED_383, *PTAG_UNNAMED_383;

enum DWRITE_FONT_SIMULATIONS
{
};

typedef enum _D3DLIGHTTYPE
{
  D3DLIGHT_POINT = 1,
  D3DLIGHT_SPOT = 2,
  D3DLIGHT_DIRECTIONAL = 3,
  D3DLIGHT_FORCE_DWORD = 0x7fffffff,
} D3DLIGHTTYPE, *PD3DLIGHTTYPE;

typedef enum _TAG_UNNAMED_384
{
  ADD_ALL_BSP_SURFACES_LIT = 0,
  ADD_ALL_BSP_SURFACES_LIT_TRANS = 1,
  ADD_ALL_BSP_SURFACES_EMISSIVE_OPAQUE = 2,
  ADD_ALL_BSP_SURFACES_EMISSIVE_TRANS = 3,
} TAG_UNNAMED_384, *PTAG_UNNAMED_384;

typedef enum _D3DMULTISAMPLE_TYPE
{
  D3DMULTISAMPLE_NONE = 0,
  D3DMULTISAMPLE_NONMASKABLE = 1,
  D3DMULTISAMPLE_2_SAMPLES = 2,
  D3DMULTISAMPLE_3_SAMPLES = 3,
  D3DMULTISAMPLE_4_SAMPLES = 4,
  D3DMULTISAMPLE_5_SAMPLES = 5,
  D3DMULTISAMPLE_6_SAMPLES = 6,
  D3DMULTISAMPLE_7_SAMPLES = 7,
  D3DMULTISAMPLE_8_SAMPLES = 8,
  D3DMULTISAMPLE_9_SAMPLES = 9,
  D3DMULTISAMPLE_10_SAMPLES = 10,
  D3DMULTISAMPLE_11_SAMPLES = 11,
  D3DMULTISAMPLE_12_SAMPLES = 12,
  D3DMULTISAMPLE_13_SAMPLES = 13,
  D3DMULTISAMPLE_14_SAMPLES = 14,
  D3DMULTISAMPLE_15_SAMPLES = 15,
  D3DMULTISAMPLE_16_SAMPLES = 16,
  D3DMULTISAMPLE_FORCE_DWORD = 0x7fffffff,
} D3DMULTISAMPLE_TYPE, *PD3DMULTISAMPLE_TYPE;

typedef enum _D3DPRIMITIVETYPE
{
  D3DPT_POINTLIST = 1,
  D3DPT_LINELIST = 2,
  D3DPT_LINESTRIP = 3,
  D3DPT_TRIANGLELIST = 4,
  D3DPT_TRIANGLESTRIP = 5,
  D3DPT_TRIANGLEFAN = 6,
  D3DPT_FORCE_DWORD = 0x7fffffff,
} D3DPRIMITIVETYPE, *PD3DPRIMITIVETYPE;

enum DWRITE_FONT_FILE_TYPE
{
};

typedef enum _MAX_FVF_DECL_SIZE
{
  MAX_FVF_DECL_SIZE = 65,
} MAX_FVF_DECL_SIZE, *PMAX_FVF_DECL_SIZE;

typedef enum _D3DBACKBUFFER_TYPE
{
  D3DBACKBUFFER_TYPE_MONO = 0,
  D3DBACKBUFFER_TYPE_LEFT = 1,
  D3DBACKBUFFER_TYPE_RIGHT = 2,
  D3DBACKBUFFER_TYPE_FORCE_DWORD = 0x7fffffff,
} D3DBACKBUFFER_TYPE, *PD3DBACKBUFFER_TYPE;

typedef enum _TAG_UNNAMED_385
{
  R_PRIMARYLIGHTLINES_OFF = 0,
  R_PRIMARYLIGHTLINES_BSP = 1,
  R_PRIMARYLIGHTLINES_STATICMODELS = 2,
  R_PRIMARYLIGHTLINES_SCENEMODELS = 3,
  R_PRIMARYLIGHTLINES_DOBJS = 4,
  R_PRIMARYLIGHTLINES_DYNENT_MODELS = 5,
  R_PRIMARYLIGHTLINES_COUNT = 6,
} TAG_UNNAMED_385, *PTAG_UNNAMED_385;

enum D2D1::ColorF::Enum
{
  AliceBlue = 0xf0f8ff,
  AntiqueWhite = 0xfaebd7,
  Aqua = 0xffffffff,
  Aquamarine = 0x7fffd4,
  Azure = 0xf0ffff,
  Beige = 0xf5f5dc,
  Bisque = 0xffe4c4,
  Black = 0,
  BlanchedAlmond = 0xffebcd,
  Blue = 255,
  BlueViolet = 0x8a2be2,
  Brown = 0xa52a2a,
  BurlyWood = 0xdeb887,
  CadetBlue = 0x5f9ea0,
  Chartreuse = 0x7fff00,
  Chocolate = 0xd2691e,
  Coral = 0xff7f50,
  CornflowerBlue = 0x6495ed,
  Cornsilk = 0xfff8dc,
  Crimson = 0xdc143c,
  Cyan = 0xffffffff,
  DarkBlue = 139,
  DarkCyan = 0xffff8b8b,
  DarkGoldenrod = 0xb8860b,
  DarkGray = 0xa9a9a9,
  DarkGreen = 25600,
  DarkKhaki = 0xbdb76b,
  DarkMagenta = 0x8b008b,
  DarkOliveGreen = 0x556b2f,
  DarkOrange = 0xff8c00,
  DarkOrchid = 0x9932cc,
  DarkRed = 0x8b0000,
  DarkSalmon = 0xe9967a,
  DarkSeaGreen = 0x8fbc8f,
  DarkSlateBlue = 0x483d8b,
  DarkSlateGray = 0x2f4f4f,
  DarkTurquoise = 0xffffced1,
  DarkViolet = 0x9400d3,
  DeepPink = 0xff1493,
  DeepSkyBlue = 0xffffbfff,
  DimGray = 0x696969,
  DodgerBlue = 0x1e90ff,
  Firebrick = 0xb22222,
  FloralWhite = 0xfffaf0,
  ForestGreen = 0x228b22,
  Fuchsia = 0xff00ff,
  Gainsboro = 0xdcdcdc,
  GhostWhite = 0xf8f8ff,
  Gold = 0xffd700,
  Goldenrod = 0xdaa520,
  Gray = 0x808080,
  Green = 0xffff8000,
  GreenYellow = 0xadff2f,
  Honeydew = 0xf0fff0,
  HotPink = 0xff69b4,
  IndianRed = 0xcd5c5c,
  Indigo = 0x4b0082,
  Ivory = 0xfffff0,
  Khaki = 0xf0e68c,
  Lavender = 0xe6e6fa,
  LavenderBlush = 0xfff0f5,
  LawnGreen = 0x7cfc00,
  LemonChiffon = 0xfffacd,
  LightBlue = 0xadd8e6,
  LightCoral = 0xf08080,
  LightCyan = 0xe0ffff,
  LightGoldenrodYellow = 0xfafad2,
  LightGreen = 0x90ee90,
  LightGray = 0xd3d3d3,
  LightPink = 0xffb6c1,
  LightSalmon = 0xffa07a,
  LightSeaGreen = 0x20b2aa,
  LightSkyBlue = 0x87cefa,
  LightSlateGray = 0x778899,
  LightSteelBlue = 0xb0c4de,
  LightYellow = 0xffffe0,
  Lime = 0xffffff00,
  LimeGreen = 0x32cd32,
  Linen = 0xfaf0e6,
  Magenta = 0xff00ff,
  Maroon = 0x800000,
  MediumAquamarine = 0x66cdaa,
  MediumBlue = 205,
  MediumOrchid = 0xba55d3,
  MediumPurple = 0x9370db,
  MediumSeaGreen = 0x3cb371,
  MediumSlateBlue = 0x7b68ee,
  MediumSpringGreen = 0xfffffa9a,
  MediumTurquoise = 0x48d1cc,
  MediumVioletRed = 0xc71585,
  MidnightBlue = 0x191970,
  MintCream = 0xf5fffa,
  MistyRose = 0xffe4e1,
  Moccasin = 0xffe4b5,
  NavajoWhite = 0xffdead,
  Navy = 128,
  OldLace = 0xfdf5e6,
  Olive = 0x808000,
  OliveDrab = 0x6b8e23,
  Orange = 0xffa500,
  OrangeRed = 0xff4500,
  Orchid = 0xda70d6,
  PaleGoldenrod = 0xeee8aa,
  PaleGreen = 0x98fb98,
  PaleTurquoise = 0xafeeee,
  PaleVioletRed = 0xdb7093,
  PapayaWhip = 0xffefd5,
  PeachPuff = 0xffdab9,
  Peru = 0xcd853f,
  Pink = 0xffc0cb,
  Plum = 0xdda0dd,
  PowderBlue = 0xb0e0e6,
  Purple = 0x800080,
  Red = 0xff0000,
  RosyBrown = 0xbc8f8f,
  RoyalBlue = 0x4169e1,
  SaddleBrown = 0x8b4513,
  Salmon = 0xfa8072,
  SandyBrown = 0xf4a460,
  SeaGreen = 0x2e8b57,
  SeaShell = 0xfff5ee,
  Sienna = 0xa0522d,
  Silver = 0xc0c0c0,
  SkyBlue = 0x87ceeb,
  SlateBlue = 0x6a5acd,
  SlateGray = 0x708090,
  Snow = 0xfffafa,
  SpringGreen = 0xffffff7f,
  SteelBlue = 0x4682b4,
  Tan = 0xd2b48c,
  Teal = 0xffff8080,
  Thistle = 0xd8bfd8,
  Tomato = 0xff6347,
  Turquoise = 0x40e0d0,
  Violet = 0xee82ee,
  Wheat = 0xf5deb3,
  White = 0xffffff,
  WhiteSmoke = 0xf5f5f5,
  Yellow = 0xffff00,
  YellowGreen = 0x9acd32,
};

typedef enum _D3DSTATEBLOCKTYPE
{
  D3DSBT_ALL = 1,
  D3DSBT_PIXELSTATE = 2,
  D3DSBT_VERTEXSTATE = 3,
  D3DSBT_FORCE_DWORD = 0x7fffffff,
} D3DSTATEBLOCKTYPE, *PD3DSTATEBLOCKTYPE;

typedef enum _D3DQUERYTYPE
{
  D3DQUERYTYPE_VCACHE = 4,
  D3DQUERYTYPE_RESOURCEMANAGER = 5,
  D3DQUERYTYPE_VERTEXSTATS = 6,
  D3DQUERYTYPE_EVENT = 8,
  D3DQUERYTYPE_OCCLUSION = 9,
  D3DQUERYTYPE_TIMESTAMP = 10,
  D3DQUERYTYPE_TIMESTAMPDISJOINT = 11,
  D3DQUERYTYPE_TIMESTAMPFREQ = 12,
  D3DQUERYTYPE_PIPELINETIMINGS = 13,
  D3DQUERYTYPE_INTERFACETIMINGS = 14,
  D3DQUERYTYPE_VERTEXTIMINGS = 15,
  D3DQUERYTYPE_PIXELTIMINGS = 16,
  D3DQUERYTYPE_BANDWIDTHTIMINGS = 17,
  D3DQUERYTYPE_CACHEUTILIZATION = 18,
  D3DQUERYTYPE_MEMORYPRESSURE = 19,
} D3DQUERYTYPE, *PD3DQUERYTYPE;

struct XSurfaceVertexInfo
{
  /* 0x0000 */ short vertCount[4];
  /* 0x0008 */ unsigned short* vertsBlend;
  /* 0x000c */ float* tensionData;
}; /* size: 0x0010 */

struct XSurface
{
  /* 0x0000 */ unsigned char tileMode;
  /* 0x0001 */ unsigned char vertListCount;
  /* 0x0002 */ unsigned short flags;
  /* 0x0004 */ unsigned short vertCount;
  /* 0x0006 */ unsigned short triCount;
  /* 0x0008 */ unsigned short baseVertIndex;
  /* 0x000a */ char Padding_224[2];
  /* 0x000c */ unsigned short* triIndices;
  /* 0x0010 */ struct XSurfaceVertexInfo vertInfo;
  /* 0x0020 */ struct GfxPackedVertex* verts0;
  /* 0x0024 */ struct ID3D11Buffer* vb0;
  union
  {
    /* 0x0028 */ struct XRigidVertList* vertList;
    /* 0x0028 */ struct XRigidVertList* vertListEA;
  }; /* size: 0x0004 */
  /* 0x002c */ struct ID3D11Buffer* indexBuffer;
  /* 0x0030 */ int partBits[5];
  /* 0x0044 */ long __PADDING__[3];
}; /* size: 0x0050 */

typedef enum _D3DTRANSFORMSTATETYPE
{
  D3DTS_VIEW = 2,
  D3DTS_PROJECTION = 3,
  D3DTS_TEXTURE0 = 16,
  D3DTS_TEXTURE1 = 17,
  D3DTS_TEXTURE2 = 18,
  D3DTS_TEXTURE3 = 19,
  D3DTS_TEXTURE4 = 20,
  D3DTS_TEXTURE5 = 21,
  D3DTS_TEXTURE6 = 22,
  D3DTS_TEXTURE7 = 23,
  D3DTS_FORCE_DWORD = 0x7fffffff,
} D3DTRANSFORMSTATETYPE, *PD3DTRANSFORMSTATETYPE;

typedef struct _XMUDHEN3
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int x : 10; /* bit position: 0 */
      /* 0x0000 */ unsigned int y : 11; /* bit position: 10 */
      /* 0x0000 */ unsigned int z : 11; /* bit position: 21 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMUDHEN3, *PXMUDHEN3; /* size: 0x0004 */

enum DWRITE_WORD_WRAPPING
{
};

struct DObjAnimMat
{
  /* 0x0000 */ union vec4_t quat;
  /* 0x0010 */ union vec3_t trans;
  /* 0x001c */ float transWeight;
}; /* size: 0x0020 */

enum DWRITE_LINE_SPACING_METHOD
{
};

enum WICBitmapPaletteType
{
  WICBitmapPaletteTypeCustom = 0,
  WICBitmapPaletteTypeMedianCut = 1,
  WICBitmapPaletteTypeFixedBW = 2,
  WICBitmapPaletteTypeFixedHalftone8 = 3,
  WICBitmapPaletteTypeFixedHalftone27 = 4,
  WICBitmapPaletteTypeFixedHalftone64 = 5,
  WICBitmapPaletteTypeFixedHalftone125 = 6,
  WICBitmapPaletteTypeFixedHalftone216 = 7,
  WICBitmapPaletteTypeFixedWebPalette = 7,
  WICBitmapPaletteTypeFixedHalftone252 = 8,
  WICBitmapPaletteTypeFixedHalftone256 = 9,
  WICBitmapPaletteTypeFixedGray4 = 10,
  WICBitmapPaletteTypeFixedGray16 = 11,
  WICBitmapPaletteTypeFixedGray256 = 12,
  WICBITMAPPALETTETYPE_FORCE_DWORD = 0x7fffffff,
};

typedef enum _D3DBASISTYPE
{
  D3DBASIS_BEZIER = 0,
  D3DBASIS_BSPLINE = 1,
  D3DBASIS_CATMULL_ROM = 2,
  D3DBASIS_FORCE_DWORD = 0x7fffffff,
} D3DBASISTYPE, *PD3DBASISTYPE;

enum DWRITE_TRIMMING_GRANULARITY
{
};

struct RadiantCommand
{
  /* 0x0000 */ enum RadiantCommandType type;
  /* 0x0004 */ int guid;
  /* 0x0008 */ char strCommand[512];
}; /* size: 0x0208 */

struct ActorDelayedWeaponDrop
{
  /* 0x0000 */ union vec3_t matrix[4];
  /* 0x0030 */ int time;
  /* 0x0034 */ unsigned short tagName;
  /* 0x0036 */ char Padding_225[2];
  /* 0x0038 */ enum DelayedWeapDropState state;
  /* 0x003c */ int weaponIndex;
}; /* size: 0x0040 */

enum D2D1_GEOMETRY_SIMPLIFICATION_OPTION
{
};

enum D2D1_DEBUG_LEVEL
{
};

enum DWRITE_PIXEL_GEOMETRY
{
};

enum D2D1_ARC_SIZE
{
};

enum DISPLAYCONFIG_SCANLINE_ORDERING
{
  DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0,
  DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 2,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3,
  DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = -1,
};

struct SndCommandPrimeAlias
{
  /* 0x0000 */ unsigned int scriptIdHash;
  /* 0x0004 */ int timeTillPlayMs;
}; /* size: 0x0008 */

enum bdCookieAckChunk::bdCookieAckFlags
{
  BD_CA_NO_FLAGS = 0,
};

union XAnimDynamicFrames
{
  union
  {
    /* 0x0000 */ unsigned char* _1[3];
    /* 0x0000 */ unsigned short* _2[3];
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct XAnimPartTransFrames
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t size;
  /* 0x0018 */ union XAnimDynamicFrames frames;
  /* 0x001c */ union XAnimDynamicIndices indices;
  /* 0x001e */ char __PADDING__[2];
}; /* size: 0x0020 */

enum bdHeartbeatChunk::bdHeartbeatFlags
{
  BD_CA_NO_FLAGS = 0,
};

struct XAnimDeltaPartQuatDataFrames2
{
  /* 0x0000 */ short* frames[2];
  /* 0x0004 */ union XAnimDynamicIndices indices;
  /* 0x0006 */ char __PADDING__[2];
}; /* size: 0x0008 */

enum bdInitChunk::bdInitChunkFlags
{
  BD_IC_NO_FLAGS = 0,
};

enum bdShutdownAckChunk::bdShutdownAckFlags
{
  BD_SA_NO_FLAGS = 0,
};

struct MD4_CTX
{
  /* 0x0000 */ unsigned long state[4];
  /* 0x0010 */ unsigned long count[2];
  /* 0x0018 */ unsigned char buffer[64];
}; /* size: 0x0058 */

struct ActorCoverInfluenceInfo
{
  /* 0x0000 */ struct pathnode_t* node;
  /* 0x0004 */ float weightAdjust;
  /* 0x0008 */ int timeAdded;
}; /* size: 0x000c */

enum ltc_pkcs_1_paddings
{
  LTC_LTC_PKCS_1_V1_5 = 1,
  LTC_LTC_PKCS_1_OAEP = 2,
  LTC_LTC_PKCS_1_PSS = 3,
};

struct XAnimParent
{
  /* 0x0000 */ unsigned short flags;
  /* 0x0002 */ unsigned short children;
}; /* size: 0x0004 */

class bdReference<bdBitBuffer>
{
  /* 0x0000 */ class bdBitBuffer* m_ptr;
}; /* size: 0x0004 */

class bdAuthTicket
{
  /* 0x0000 */ unsigned int m_magicNumber;
  /* 0x0004 */ unsigned char m_type;
  /* 0x0005 */ char Padding_226[3];
  /* 0x0008 */ unsigned int m_titleID;
  /* 0x000c */ unsigned int m_timeIssued;
  /* 0x0010 */ unsigned int m_timeExpires;
  /* 0x0014 */ long Padding_227;
  /* 0x0018 */ unsigned __int64 m_licenseID;
  /* 0x0020 */ unsigned __int64 m_userID;
  /* 0x0028 */ char m_username[64];
  /* 0x0068 */ unsigned char m_sessionKey[24];
  /* 0x0080 */ unsigned char m_usingHashMagicNumber[3];
  /* 0x0083 */ unsigned char m_hash[4];
}; /* size: 0x0088 */

class bdGetHostByNameConfig
{
  /* 0x0000 */ float m_timeout;
}; /* size: 0x0004 */

class bdGetHostByName
{
  /* 0x0000 */ long Padding_228[2];
  /* 0x0008 */ class bdStopwatch m_timer;
  /* 0x0010 */ enum bdGetHostByName::bdStatus m_status;
  /* 0x0014 */ class bdThread* m_thread;
  /* 0x0018 */ class bdGetHostByNameConfig m_config;
  /* 0x001c */ class bdInAddr m_adresses[4];
  /* 0x002c */ unsigned int m_numAddresses;
  /* 0x0030 */ int m_handle;
  /* 0x0034 */ unsigned int m_threadStackSize;
}; /* size: 0x0038 */

struct Rsa_key
{
  /* 0x0000 */ int type;
  /* 0x0004 */ void* e;
  /* 0x0008 */ void* d;
  /* 0x000c */ void* N;
  /* 0x0010 */ void* p;
  /* 0x0014 */ void* q;
  /* 0x0018 */ void* qP;
  /* 0x001c */ void* dP;
  /* 0x0020 */ void* dQ;
}; /* size: 0x0024 */

class bdRSAKey
{
  /* 0x0000 */ enum bdRSAKey::bdRSAKeyStatus m_status;
  /* 0x0004 */ struct Rsa_key m_key;
}; /* size: 0x0028 */

class bdAuthService
{
  /* 0x0000 */ long Padding_229;
  /* 0x0004 */ class bdFastArray<char [64]> m_usernamesForLicenseResult;
  /* 0x0010 */ class bdReference<bdLobbyConnection> m_connection;
  /* 0x0014 */ unsigned int m_titleID;
  /* 0x0018 */ class bdReference<bdCommonAddr> m_authServiceAddr;
  /* 0x001c */ enum bdAuthService::bdStatus m_status;
  /* 0x0020 */ class bdReference<bdBitBuffer> m_request;
  /* 0x0024 */ class bdAuthInfo m_authInfo;
  /* 0x00c4 */ long Padding_230;
  /* 0x00c8 */ class bdAuthTicket m_authTicket;
  /* 0x0150 */ char m_steamCookieKey[88];
  /* 0x01a8 */ char m_userKey[24];
  /* 0x01c0 */ char m_licenseKey[24];
  /* 0x01d8 */ enum bdLobbyErrorCode m_errorCode;
  /* 0x01dc */ unsigned int m_sendBufSize;
  /* 0x01e0 */ unsigned int m_recvBufSize;
  /* 0x01e4 */ long Padding_231;
  /* 0x01e8 */ class bdGetHostByName m_authLookup;
  /* 0x0220 */ char* m_authAddress;
  /* 0x0224 */ unsigned short m_authPort;
  /* 0x0226 */ char Padding_232[2];
  /* 0x0228 */ class bdAddr m_resolvedAuthAddress;
  /* 0x0230 */ BOOL m_isResolved;
  /* 0x0231 */ char m_cdKey[86];
  /* 0x0287 */ char Padding_233;
  /* 0x0288 */ int m_cdKeyTimeToLiveSecs;
  /* 0x028c */ class bdRSAKey m_RSAKey;
}; /* size: 0x02b8 */

enum CURLoption
{
  CURLOPT_FILE = 10001,
  CURLOPT_URL = 10002,
  CURLOPT_PORT = 3,
  CURLOPT_PROXY = 10004,
  CURLOPT_USERPWD = 10005,
  CURLOPT_PROXYUSERPWD = 10006,
  CURLOPT_RANGE = 10007,
  CURLOPT_INFILE = 10009,
  CURLOPT_ERRORBUFFER = 10010,
  CURLOPT_WRITEFUNCTION = 20011,
  CURLOPT_READFUNCTION = 20012,
  CURLOPT_TIMEOUT = 13,
  CURLOPT_INFILESIZE = 14,
  CURLOPT_POSTFIELDS = 10015,
  CURLOPT_REFERER = 10016,
  CURLOPT_FTPPORT = 10017,
  CURLOPT_USERAGENT = 10018,
  CURLOPT_LOW_SPEED_LIMIT = 19,
  CURLOPT_LOW_SPEED_TIME = 20,
  CURLOPT_RESUME_FROM = 21,
  CURLOPT_COOKIE = 10022,
  CURLOPT_HTTPHEADER = 10023,
  CURLOPT_HTTPPOST = 10024,
  CURLOPT_SSLCERT = 10025,
  CURLOPT_KEYPASSWD = 10026,
  CURLOPT_CRLF = 27,
  CURLOPT_QUOTE = 10028,
  CURLOPT_WRITEHEADER = 10029,
  CURLOPT_COOKIEFILE = 10031,
  CURLOPT_SSLVERSION = 32,
  CURLOPT_TIMECONDITION = 33,
  CURLOPT_TIMEVALUE = 34,
  CURLOPT_CUSTOMREQUEST = 10036,
  CURLOPT_STDERR = 10037,
  CURLOPT_POSTQUOTE = 10039,
  CURLOPT_WRITEINFO = 10040,
  CURLOPT_VERBOSE = 41,
  CURLOPT_HEADER = 42,
  CURLOPT_NOPROGRESS = 43,
  CURLOPT_NOBODY = 44,
  CURLOPT_FAILONERROR = 45,
  CURLOPT_UPLOAD = 46,
  CURLOPT_POST = 47,
  CURLOPT_DIRLISTONLY = 48,
  CURLOPT_APPEND = 50,
  CURLOPT_NETRC = 51,
  CURLOPT_FOLLOWLOCATION = 52,
  CURLOPT_TRANSFERTEXT = 53,
  CURLOPT_PUT = 54,
  CURLOPT_PROGRESSFUNCTION = 20056,
  CURLOPT_PROGRESSDATA = 10057,
  CURLOPT_AUTOREFERER = 58,
  CURLOPT_PROXYPORT = 59,
  CURLOPT_POSTFIELDSIZE = 60,
  CURLOPT_HTTPPROXYTUNNEL = 61,
  CURLOPT_INTERFACE = 10062,
  CURLOPT_KRBLEVEL = 10063,
  CURLOPT_SSL_VERIFYPEER = 64,
  CURLOPT_CAINFO = 10065,
  CURLOPT_MAXREDIRS = 68,
  CURLOPT_FILETIME = 69,
  CURLOPT_TELNETOPTIONS = 10070,
  CURLOPT_MAXCONNECTS = 71,
  CURLOPT_CLOSEPOLICY = 72,
  CURLOPT_FRESH_CONNECT = 74,
  CURLOPT_FORBID_REUSE = 75,
  CURLOPT_RANDOM_FILE = 10076,
  CURLOPT_EGDSOCKET = 10077,
  CURLOPT_CONNECTTIMEOUT = 78,
  CURLOPT_HEADERFUNCTION = 20079,
  CURLOPT_HTTPGET = 80,
  CURLOPT_SSL_VERIFYHOST = 81,
  CURLOPT_COOKIEJAR = 10082,
  CURLOPT_SSL_CIPHER_LIST = 10083,
  CURLOPT_HTTP_VERSION = 84,
  CURLOPT_FTP_USE_EPSV = 85,
  CURLOPT_SSLCERTTYPE = 10086,
  CURLOPT_SSLKEY = 10087,
  CURLOPT_SSLKEYTYPE = 10088,
  CURLOPT_SSLENGINE = 10089,
  CURLOPT_SSLENGINE_DEFAULT = 90,
  CURLOPT_DNS_USE_GLOBAL_CACHE = 91,
  CURLOPT_DNS_CACHE_TIMEOUT = 92,
  CURLOPT_PREQUOTE = 10093,
  CURLOPT_DEBUGFUNCTION = 20094,
  CURLOPT_DEBUGDATA = 10095,
  CURLOPT_COOKIESESSION = 96,
  CURLOPT_CAPATH = 10097,
  CURLOPT_BUFFERSIZE = 98,
  CURLOPT_NOSIGNAL = 99,
  CURLOPT_SHARE = 10100,
  CURLOPT_PROXYTYPE = 101,
  CURLOPT_ENCODING = 10102,
  CURLOPT_PRIVATE = 10103,
  CURLOPT_HTTP200ALIASES = 10104,
  CURLOPT_UNRESTRICTED_AUTH = 105,
  CURLOPT_FTP_USE_EPRT = 106,
  CURLOPT_HTTPAUTH = 107,
  CURLOPT_SSL_CTX_FUNCTION = 20108,
  CURLOPT_SSL_CTX_DATA = 10109,
  CURLOPT_FTP_CREATE_MISSING_DIRS = 110,
  CURLOPT_PROXYAUTH = 111,
  CURLOPT_FTP_RESPONSE_TIMEOUT = 112,
  CURLOPT_IPRESOLVE = 113,
  CURLOPT_MAXFILESIZE = 114,
  CURLOPT_INFILESIZE_LARGE = 30115,
  CURLOPT_RESUME_FROM_LARGE = 30116,
  CURLOPT_MAXFILESIZE_LARGE = 30117,
  CURLOPT_NETRC_FILE = 10118,
  CURLOPT_USE_SSL = 119,
  CURLOPT_POSTFIELDSIZE_LARGE = 30120,
  CURLOPT_TCP_NODELAY = 121,
  CURLOPT_FTPSSLAUTH = 129,
  CURLOPT_IOCTLFUNCTION = 20130,
  CURLOPT_IOCTLDATA = 10131,
  CURLOPT_FTP_ACCOUNT = 10134,
  CURLOPT_COOKIELIST = 10135,
  CURLOPT_IGNORE_CONTENT_LENGTH = 136,
  CURLOPT_FTP_SKIP_PASV_IP = 137,
  CURLOPT_FTP_FILEMETHOD = 138,
  CURLOPT_LOCALPORT = 139,
  CURLOPT_LOCALPORTRANGE = 140,
  CURLOPT_CONNECT_ONLY = 141,
  CURLOPT_CONV_FROM_NETWORK_FUNCTION = 20142,
  CURLOPT_CONV_TO_NETWORK_FUNCTION = 20143,
  CURLOPT_CONV_FROM_UTF8_FUNCTION = 20144,
  CURLOPT_MAX_SEND_SPEED_LARGE = 30145,
  CURLOPT_MAX_RECV_SPEED_LARGE = 30146,
  CURLOPT_FTP_ALTERNATIVE_TO_USER = 10147,
  CURLOPT_SOCKOPTFUNCTION = 20148,
  CURLOPT_SOCKOPTDATA = 10149,
  CURLOPT_SSL_SESSIONID_CACHE = 150,
  CURLOPT_SSH_AUTH_TYPES = 151,
  CURLOPT_SSH_PUBLIC_KEYFILE = 10152,
  CURLOPT_SSH_PRIVATE_KEYFILE = 10153,
  CURLOPT_FTP_SSL_CCC = 154,
  CURLOPT_TIMEOUT_MS = 155,
  CURLOPT_CONNECTTIMEOUT_MS = 156,
  CURLOPT_HTTP_TRANSFER_DECODING = 157,
  CURLOPT_HTTP_CONTENT_DECODING = 158,
  CURLOPT_NEW_FILE_PERMS = 159,
  CURLOPT_NEW_DIRECTORY_PERMS = 160,
  CURLOPT_POSTREDIR = 161,
  CURLOPT_SSH_HOST_PUBLIC_KEY_MD5 = 10162,
  CURLOPT_OPENSOCKETFUNCTION = 20163,
  CURLOPT_OPENSOCKETDATA = 10164,
  CURLOPT_COPYPOSTFIELDS = 10165,
  CURLOPT_PROXY_TRANSFER_MODE = 166,
  CURLOPT_SEEKFUNCTION = 20167,
  CURLOPT_SEEKDATA = 10168,
  CURLOPT_CRLFILE = 10169,
  CURLOPT_ISSUERCERT = 10170,
  CURLOPT_ADDRESS_SCOPE = 171,
  CURLOPT_CERTINFO = 172,
  CURLOPT_USERNAME = 10173,
  CURLOPT_PASSWORD = 10174,
  CURLOPT_PROXYUSERNAME = 10175,
  CURLOPT_PROXYPASSWORD = 10176,
  CURLOPT_LASTENTRY = 10177,
};

struct tagCLIPDATA
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ long ulClipFmt;
  /* 0x0008 */ unsigned char* pClipData;
}; /* size: 0x000c */

enum CURLINFO
{
  CURLINFO_NONE = 0,
  CURLINFO_EFFECTIVE_URL = 0x100001,
  CURLINFO_RESPONSE_CODE = 0x200002,
  CURLINFO_TOTAL_TIME = 0x300003,
  CURLINFO_NAMELOOKUP_TIME = 0x300004,
  CURLINFO_CONNECT_TIME = 0x300005,
  CURLINFO_PRETRANSFER_TIME = 0x300006,
  CURLINFO_SIZE_UPLOAD = 0x300007,
  CURLINFO_SIZE_DOWNLOAD = 0x300008,
  CURLINFO_SPEED_DOWNLOAD = 0x300009,
  CURLINFO_SPEED_UPLOAD = 0x30000a,
  CURLINFO_HEADER_SIZE = 0x20000b,
  CURLINFO_REQUEST_SIZE = 0x20000c,
  CURLINFO_SSL_VERIFYRESULT = 0x20000d,
  CURLINFO_FILETIME = 0x20000e,
  CURLINFO_CONTENT_LENGTH_DOWNLOAD = 0x30000f,
  CURLINFO_CONTENT_LENGTH_UPLOAD = 0x300010,
  CURLINFO_STARTTRANSFER_TIME = 0x300011,
  CURLINFO_CONTENT_TYPE = 0x100012,
  CURLINFO_REDIRECT_TIME = 0x300013,
  CURLINFO_REDIRECT_COUNT = 0x200014,
  CURLINFO_PRIVATE = 0x100015,
  CURLINFO_HTTP_CONNECTCODE = 0x200016,
  CURLINFO_HTTPAUTH_AVAIL = 0x200017,
  CURLINFO_PROXYAUTH_AVAIL = 0x200018,
  CURLINFO_OS_ERRNO = 0x200019,
  CURLINFO_NUM_CONNECTS = 0x20001a,
  CURLINFO_SSL_ENGINES = 0x40001b,
  CURLINFO_COOKIELIST = 0x40001c,
  CURLINFO_LASTSOCKET = 0x20001d,
  CURLINFO_FTP_ENTRY_PATH = 0x10001e,
  CURLINFO_REDIRECT_URL = 0x10001f,
  CURLINFO_PRIMARY_IP = 0x100020,
  CURLINFO_APPCONNECT_TIME = 0x300021,
  CURLINFO_CERTINFO = 0x400022,
  CURLINFO_LASTONE = 34,
};

enum CURLMcode
{
  CURLM_CALL_MULTI_PERFORM = -1,
  CURLM_OK = 0,
  CURLM_BAD_HANDLE = 1,
  CURLM_BAD_EASY_HANDLE = 2,
  CURLM_OUT_OF_MEMORY = 3,
  CURLM_INTERNAL_ERROR = 4,
  CURLM_BAD_SOCKET = 5,
  CURLM_UNKNOWN_OPTION = 6,
  CURLM_LAST = 7,
};

enum bdEventType
{
  BD_NEW_NOTIFICATION = 1,
  BD_FRIENDSHIP_PROPOSAL = 2,
  BD_TEAM_PROPOSAL = 3,
  BD_FRIEND_CONNECTED = 4,
  BD_FRIEND_DISCONNECTED = 5,
  BD_SESSION_INVITATION = 6,
  BD_CHANNEL_CHAT_BROADCAST_MSG = 7,
  BD_CHANNEL_CHAT_WHISPER_MSG = 8,
  BD_CHANNEL_USER_SUBSCRIBED = 9,
  BD_CHANNEL_USER_UNSUBSCRIBED = 10,
  BD_TEAMMEMBER_CONNECTED = 11,
  BD_TEAMMEMBER_DISCONNECTED = 12,
  BD_FRIEND_RICH_PRESENCE_UPDATED = 13,
  BD_FRIEND_CHAT_MSG = 15,
  BD_TEAM_CHAT_MSG = 16,
  BD_NOTIFY_LEAVE = 17,
  BD_NEW_MAIL = 18,
  BD_CHALLENGES_RECEIVED = 19,
  BD_ASYNCHRONOUS_RESULT = 20,
  BD_GLOBAL_INSTANT_MESSAGE = 21,
  BD_MULTIPLE_LOGONS = 29,
  BD_PLAYER_BANNED = 30,
  BD_CHANNEL_USER_PROMOTED = 31,
  BD_CHANNEL_USER_KICKED = 32,
  BD_FEATURE_BAN = 33,
  BD_GMSG_GROUP_MESSAGE = 34,
  BD_GMSG_BROADCAST = 35,
  BD_TENCENT_AAS_RECORD = 36,
  BD_YOUTUBE_REGISTRATION = 37,
  BD_NOT_WHITE_LISTED = 38,
};

struct SndMusicSegment
{
  /* 0x0000 */ unsigned int stateId;
  /* 0x0004 */ unsigned int segmentId;
  /* 0x0008 */ unsigned int aliasId;
  /* 0x000c */ int playOnExit;
  /* 0x0010 */ int looping;
  /* 0x0014 */ unsigned int bpm;
  /* 0x0018 */ unsigned int transitionBeat;
  /* 0x001c */ float fadeInTime;
  /* 0x0020 */ float fadeInDelay;
  /* 0x0024 */ int doNotFadeOut;
  /* 0x0028 */ float fadeOutTime;
  /* 0x002c */ float fadeOutDelay;
  /* 0x0030 */ unsigned int stateChangeWhenDone;
  /* 0x0034 */ int inhibitStateChange;
}; /* size: 0x0038 */

enum ltc_pkcs_1_v1_5_blocks
{
  LTC_LTC_PKCS_1_EMSA = 1,
  LTC_LTC_PKCS_1_EME = 2,
};

enum CullType
{
  CULL_TYPE_INVALID = 0,
  CULL_TYPE_BSP = 1,
  CULL_TYPE_STATIC_MODEL = 2,
  CULL_TYPE_XMODEL_RIGID = 3,
};

enum StaticModelFlag
{
  STATIC_MODEL_FLAG_NO_SHADOW = 1,
  STATIC_MODEL_FLAG_LIGHTMAP_VC = 2,
};

typedef enum _TAG_UNNAMED_386
{
  TYPE_SINGLE = 0,
  TYPE_BATCH = 1,
} TAG_UNNAMED_386, *PTAG_UNNAMED_386;

union CollisionAabbTreeIndex
{
  union
  {
    /* 0x0000 */ int firstChildIndex;
    /* 0x0000 */ int partitionIndex;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct CollisionAabbTree
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ unsigned short materialIndex;
  /* 0x000e */ unsigned short childCount;
  /* 0x0010 */ union vec3_t halfSize;
  /* 0x001c */ union CollisionAabbTreeIndex u;
}; /* size: 0x0020 */

enum LitPhaseID
{
  LIT_PHASE_LIT_BSP = 0,
  LIT_PHASE_LIT_STATIC_MODEL = 1,
  LIT_PHASE_LIT = 2,
  LIT_PHASE_LIT_BSP_POST_RESOLVE = 3,
  LIT_PHASE_LIT_STATIC_MODEL_POST_RESOLVE = 4,
  LIT_PHASE_LIT_POST_RESOLVE = 5,
  LIT_PHASE_SONAR = 6,
  LIT_PHASE_LIGHT_MAP_BSP = 7,
  LIT_PHASE_LIGHT_MAP_STATIC_MODEL = 8,
  LIT_PHASE_LIGHT_MAP = 9,
  LIT_PHASE_LIGHT_MAP_BSP_POST_RESOLVE = 10,
  LIT_PHASE_LIGHT_MAP_STATIC_MODEL_POST_RESOLVE = 11,
  LIT_PHASE_LIGHT_MAP_POST_RESOLVE = 12,
  LIT_PHASE_DEPTH_HACK = 13,
};

typedef enum _TAG_UNNAMED_387
{
  R_DEBUG_PERFORMANACE_NONE = 0,
  R_DEBUG_PERFORMANACE_CURRENT = 1,
  R_DEBUG_PERFORMANACE_AVERAGE = 2,
  R_DEBUG_PERFORMANACE_COUNT = 3,
} TAG_UNNAMED_387, *PTAG_UNNAMED_387;

enum LightHasShadowMap
{
  LIGHT_HAS_SHADOWMAP = 0,
  LIGHT_HAS_NO_SHADOWMAP = 1,
};

typedef enum _TAG_UNNAMED_388
{
  CUSTOMINDEX_XMODEL_HAS_CULL_INFO = 1,
  CUSTOMINDEX_XMODEL_SHADER_CONSTANT_SET_MASK = 508,
  CUSTOMINDEX_CODEMESH_ENABLE_DEPTHHACK = 1,
} TAG_UNNAMED_388, *PTAG_UNNAMED_388;

typedef enum _TAG_UNNAMED_389
{
  R_OCCLUSION_OVERRIDE_0 = 0,
  R_OCCLUSION_OVERRIDE_NONE = 1,
  R_OCCLUSION_OVERRIDE_255 = 2,
  R_OCCLUSION_OVERRIDE_128 = 3,
  R_OCCLUSION_OVERRIDE_COUNT = 4,
} TAG_UNNAMED_389, *PTAG_UNNAMED_389;

typedef enum _TAG_UNNAMED_390
{
  R_FB_COLOR_DEBUG_NONE = 0,
  R_FB_COLOR_DEBUG_SCREEN = 1,
  R_FB_COLOR_DEBUG_FEEDBACK = 2,
  R_FB_COLOR_DEBUG_COUNT = 3,
} TAG_UNNAMED_390, *PTAG_UNNAMED_390;

typedef enum _TAG_UNNAMED_391
{
  R_SHOW_COLLISION_GROUPS_ALL = 0,
  R_SHOW_COLLISION_GROUPS_BRUSH = 1,
  R_SHOW_COLLISION_GROUPS_TERRAIN = 2,
  R_SHOW_COLLISION_GROUPS_COUNT = 3,
} TAG_UNNAMED_391, *PTAG_UNNAMED_391;

typedef enum _TAG_UNNAMED_392
{
  R_SHOWTESS_OFF = 0,
  R_SHOWTESS_TECH = 1,
  R_SHOWTESS_TECHSET = 2,
  R_SHOWTESS_MATERIAL = 3,
  R_SHOWTESS_VERTEX_SHADER = 4,
  R_SHOWTESS_PIXEL_SHADER = 5,
  R_SHOWTESS_COUNT = 6,
} TAG_UNNAMED_392, *PTAG_UNNAMED_392;

struct FxElemVisualState
{
  /* 0x0000 */ unsigned char color[4];
  /* 0x0004 */ float rotationDelta;
  /* 0x0008 */ float rotationTotal;
  /* 0x000c */ float size[2];
  /* 0x0014 */ float scale;
}; /* size: 0x0018 */

typedef enum _TAG_UNNAMED_393
{
  R_MIP_FILTER_UNCHANGED = 0,
  R_MIP_FILTER_FORCE_LINEAR = 1,
  R_MIP_FILTER_FORCE_NEAREST = 2,
  R_MIP_FILTER_FORCE_NO_MIPS = 3,
  R_MIP_FILTER_COUNT = 4,
} TAG_UNNAMED_393, *PTAG_UNNAMED_393;

enum R_STREAMPAINT_TYPES
{
  R_STREAMPAINT_OFF = 0,
  R_STREAMPAINT_RENDEREDMIP = 1,
  R_STREAMPAINT_RENDERED_AND_LOADED_MIP = 2,
  R_STREAMPAINT_MAX_MATERIAL_MEMORY = 3,
  R_STREAMPAINT_LOADED_MATERIAL_MEMORY = 4,
  R_STREAMPAINT_TYPE_COUNT = 5,
};

enum DVBLOCK_WSI
{
  WSI_enable = 0,
  WSI_ev = 1,
  WSI_pitch = 2,
  WSI_yaw = 3,
  WSI_MAX = 4,
};

struct statsDelta_t
{
  /* 0x0000 */ int minDelta;
  /* 0x0004 */ int maxDelta;
}; /* size: 0x0008 */

typedef enum _TAG_UNNAMED_394
{
  R_LOD_INFO_NONE = 0,
  R_LOD_INFO_ALL = 1,
  R_LOD_INFO_CUR_LOD_ONLY = 2,
  R_LOD_INFO_CUR_DIST_ONLY = 3,
  R_LOD_INFO_AUTO_DIST_ONLY = 4,
  R_LOD_INFO_COUNT = 5,
} TAG_UNNAMED_394, *PTAG_UNNAMED_394;

class SD_XAudio2Callbacks
{
}; /* size: 0x0004 */

enum PerfTimerDisplayMode
{
  PERF_TIMER_MODE_TOP = 0,
  PERF_TIMER_MODE_ALL = 1,
  PERF_TIMER_MODE_ACTIVE = 2,
  PERF_TIMER_MODE_MAJOR = 3,
  PERF_TIMER_MODE_MINOR = 4,
  PERF_TIMER_MODE_UNKNOWN = 5,
};

class bdIPDiscoveryClient
{
  /* 0x0000 */ class bdSocket* m_socket;
  /* 0x0004 */ class bdAddr m_serverAddr;
  /* 0x000c */ class bdAddr m_publicAddr;
  /* 0x0014 */ long Padding_234;
  /* 0x0018 */ class bdStopwatch m_timer;
  /* 0x0020 */ enum bdIPDiscoveryClient::bdIPDiscoveryClientStatus m_status;
  /* 0x0024 */ class bdIPDiscoveryConfig m_config;
  /* 0x002c */ unsigned int m_retries;
}; /* size: 0x0030 */

enum PerfTimerDisplayType
{
  PERF_TIMER_TYPE_STANDARD = 0,
  PERF_TIMER_TYPE_IN_PLACE = 1,
  PERF_TIMER_TYPE_COM_ONLY = 2,
  PERF_TIMER_TYPE_UNKNOWN = 3,
};

struct tagCAUI
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ unsigned short* pElems;
}; /* size: 0x0008 */

enum D3D11_TEXTURECUBE_FACE
{
  D3D11_TEXTURECUBE_FACE_POSITIVE_X = 0,
  D3D11_TEXTURECUBE_FACE_NEGATIVE_X = 1,
  D3D11_TEXTURECUBE_FACE_POSITIVE_Y = 2,
  D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = 3,
  D3D11_TEXTURECUBE_FACE_POSITIVE_Z = 4,
  D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = 5,
};

struct XMFLOAT3A
{
}; /* size: 0x0010 */

enum DXGI_RESIDENCY
{
};

typedef struct _XMBYTE4
{
  union
  {
    struct
    {
      /* 0x0000 */ char x;
      /* 0x0001 */ char y;
      /* 0x0002 */ char z;
      /* 0x0003 */ char w;
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMBYTE4, *PXMBYTE4; /* size: 0x0004 */

enum J_COLOR_SPACE
{
  JCS_UNKNOWN = 0,
  JCS_GRAYSCALE = 1,
  JCS_RGB = 2,
  JCS_YCbCr = 3,
  JCS_CMYK = 4,
  JCS_YCCK = 5,
};

struct ActorPainDeath
{
  /* 0x0000 */ int iPainTime;
  /* 0x0004 */ BOOL allowPain;
  /* 0x0005 */ BOOL blockingPain;
  /* 0x0006 */ BOOL allowDeath;
  /* 0x0007 */ BOOL delayedDeath;
  /* 0x0008 */ int iDamageTaken;
  /* 0x000c */ int iDamageYaw;
  /* 0x0010 */ union vec3_t damageDir;
  /* 0x001c */ unsigned short damageHitLoc;
  /* 0x001e */ unsigned short damageWeapon;
  /* 0x0020 */ unsigned short damageMod;
  /* 0x0022 */ char Padding_235[2];
  /* 0x0024 */ int deathContents;
  /* 0x0028 */ int bDropWeapon;
  /* 0x002c */ BOOL forceRagdollImmediate;
  /* 0x002d */ char Padding_236[3];
  /* 0x0030 */ int minPainDamage;
  /* 0x0034 */ BOOL dieQuietly;
  /* 0x0035 */ char __PADDING__[3];
}; /* size: 0x0038 */

enum MtlParseSuccess
{
  MTL_PARSE_SUCCESS = 0,
  MTL_PARSE_NO_MATCH = 1,
  MTL_PARSE_ERROR = 2,
};

struct ai_transition_cmd_t
{
  /* 0x0000 */ enum ai_state_transition_t eTransition;
  /* 0x0004 */ enum ai_state_t eState;
}; /* size: 0x0008 */

enum MaterialShaderType
{
  MTL_VERTEX_SHADER = 0,
  MTL_PIXEL_SHADER = 1,
};

enum std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Redbl
{
  _Red = 0,
  _Black = 1,
};

enum std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Redbl
{
  _Red = 0,
  _Black = 1,
};

struct sd_stream_buffer
{
  /* 0x0000 */ volatile long refCount;
  /* 0x0004 */ const char* filename;
  /* 0x0008 */ unsigned int filenameHash;
  /* 0x000c */ unsigned int offset;
  /* 0x0010 */ unsigned int readSize;
  /* 0x0014 */ unsigned int requestLatency;
  /* 0x0018 */ unsigned int requestStartTime;
  /* 0x001c */ unsigned int requestEndTime;
  /* 0x0020 */ int requestId;
  /* 0x0024 */ char* data;
  /* 0x0028 */ int valid;
  /* 0x002c */ int error;
  /* 0x0030 */ int primed;
  /* 0x0034 */ int preloadExpires;
}; /* size: 0x0038 */

class bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass>::Node
{
  /* 0x0000 */ class bdReference<bdAddrHandle> m_data;
  /* 0x0004 */ class bdEndpoint m_key;
  /* 0x0010 */ class bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass>::Node* m_next;
}; /* size: 0x0014 */

typedef enum _TAG_UNNAMED_395
{
  TEMP_IMAGE_FREE = 0,
  TEMP_IMAGE_RESERVED = 1,
  TEMP_IMAGE_ALLOCED = 2,
  TEMP_IMAGE_ADDED = 3,
  TEMP_IMAGE_STOMPED = 4,
} TAG_UNNAMED_395, *PTAG_UNNAMED_395;

class bdTwitchUserInfo
{
  /* 0x0000 */ long Padding_237;
  /* 0x0004 */ char m_token[1025];
  /* 0x0405 */ char m_username[257];
}; /* size: 0x0508 */

enum GfxFrameBufferTextures
{
  RT_COLOR0 = 0,
  RT_DEPTH = 1,
  RT_DEPTH_AS_ARGB = 2,
  FRAME_BUFFER_TEXTURE_COUNT = 3,
};

enum J_MESSAGE_CODE
{
  JMSG_NOMESSAGE = 0,
  JERR_ARITH_NOTIMPL = 1,
  JERR_BAD_ALIGN_TYPE = 2,
  JERR_BAD_ALLOC_CHUNK = 3,
  JERR_BAD_BUFFER_MODE = 4,
  JERR_BAD_COMPONENT_ID = 5,
  JERR_BAD_DCT_COEF = 6,
  JERR_BAD_DCTSIZE = 7,
  JERR_BAD_HUFF_TABLE = 8,
  JERR_BAD_IN_COLORSPACE = 9,
  JERR_BAD_J_COLORSPACE = 10,
  JERR_BAD_LENGTH = 11,
  JERR_BAD_LIB_VERSION = 12,
  JERR_BAD_MCU_SIZE = 13,
  JERR_BAD_POOL_ID = 14,
  JERR_BAD_PRECISION = 15,
  JERR_BAD_PROGRESSION = 16,
  JERR_BAD_PROG_SCRIPT = 17,
  JERR_BAD_SAMPLING = 18,
  JERR_BAD_SCAN_SCRIPT = 19,
  JERR_BAD_STATE = 20,
  JERR_BAD_STRUCT_SIZE = 21,
  JERR_BAD_VIRTUAL_ACCESS = 22,
  JERR_BUFFER_SIZE = 23,
  JERR_CANT_SUSPEND = 24,
  JERR_CCIR601_NOTIMPL = 25,
  JERR_COMPONENT_COUNT = 26,
  JERR_CONVERSION_NOTIMPL = 27,
  JERR_DAC_INDEX = 28,
  JERR_DAC_VALUE = 29,
  JERR_DHT_INDEX = 30,
  JERR_DQT_INDEX = 31,
  JERR_EMPTY_IMAGE = 32,
  JERR_EMS_READ = 33,
  JERR_EMS_WRITE = 34,
  JERR_EOI_EXPECTED = 35,
  JERR_FILE_READ = 36,
  JERR_FILE_WRITE = 37,
  JERR_FRACT_SAMPLE_NOTIMPL = 38,
  JERR_HUFF_CLEN_OVERFLOW = 39,
  JERR_HUFF_MISSING_CODE = 40,
  JERR_IMAGE_TOO_BIG = 41,
  JERR_INPUT_EMPTY = 42,
  JERR_INPUT_EOF = 43,
  JERR_MISMATCHED_QUANT_TABLE = 44,
  JERR_MISSING_DATA = 45,
  JERR_MODE_CHANGE = 46,
  JERR_NOTIMPL = 47,
  JERR_NOT_COMPILED = 48,
  JERR_NO_BACKING_STORE = 49,
  JERR_NO_HUFF_TABLE = 50,
  JERR_NO_IMAGE = 51,
  JERR_NO_QUANT_TABLE = 52,
  JERR_NO_SOI = 53,
  JERR_OUT_OF_MEMORY = 54,
  JERR_QUANT_COMPONENTS = 55,
  JERR_QUANT_FEW_COLORS = 56,
  JERR_QUANT_MANY_COLORS = 57,
  JERR_SOF_DUPLICATE = 58,
  JERR_SOF_NO_SOS = 59,
  JERR_SOF_UNSUPPORTED = 60,
  JERR_SOI_DUPLICATE = 61,
  JERR_SOS_NO_SOF = 62,
  JERR_TFILE_CREATE = 63,
  JERR_TFILE_READ = 64,
  JERR_TFILE_SEEK = 65,
  JERR_TFILE_WRITE = 66,
  JERR_TOO_LITTLE_DATA = 67,
  JERR_UNKNOWN_MARKER = 68,
  JERR_VIRTUAL_BUG = 69,
  JERR_WIDTH_OVERFLOW = 70,
  JERR_XMS_READ = 71,
  JERR_XMS_WRITE = 72,
  JMSG_COPYRIGHT = 73,
  JMSG_VERSION = 74,
  JTRC_16BIT_TABLES = 75,
  JTRC_ADOBE = 76,
  JTRC_APP0 = 77,
  JTRC_APP14 = 78,
  JTRC_DAC = 79,
  JTRC_DHT = 80,
  JTRC_DQT = 81,
  JTRC_DRI = 82,
  JTRC_EMS_CLOSE = 83,
  JTRC_EMS_OPEN = 84,
  JTRC_EOI = 85,
  JTRC_HUFFBITS = 86,
  JTRC_JFIF = 87,
  JTRC_JFIF_BADTHUMBNAILSIZE = 88,
  JTRC_JFIF_EXTENSION = 89,
  JTRC_JFIF_THUMBNAIL = 90,
  JTRC_MISC_MARKER = 91,
  JTRC_PARMLESS_MARKER = 92,
  JTRC_QUANTVALS = 93,
  JTRC_QUANT_3_NCOLORS = 94,
  JTRC_QUANT_NCOLORS = 95,
  JTRC_QUANT_SELECTED = 96,
  JTRC_RECOVERY_ACTION = 97,
  JTRC_RST = 98,
  JTRC_SMOOTH_NOTIMPL = 99,
  JTRC_SOF = 100,
  JTRC_SOF_COMPONENT = 101,
  JTRC_SOI = 102,
  JTRC_SOS = 103,
  JTRC_SOS_COMPONENT = 104,
  JTRC_SOS_PARAMS = 105,
  JTRC_TFILE_CLOSE = 106,
  JTRC_TFILE_OPEN = 107,
  JTRC_THUMB_JPEG = 108,
  JTRC_THUMB_PALETTE = 109,
  JTRC_THUMB_RGB = 110,
  JTRC_UNKNOWN_IDS = 111,
  JTRC_XMS_CLOSE = 112,
  JTRC_XMS_OPEN = 113,
  JWRN_ADOBE_XFORM = 114,
  JWRN_BOGUS_PROGRESSION = 115,
  JWRN_EXTRANEOUS_DATA = 116,
  JWRN_HIT_MARKER = 117,
  JWRN_HUFF_BAD_CODE = 118,
  JWRN_JFIF_MAJOR = 119,
  JWRN_JPEG_EOF = 120,
  JWRN_MUST_RESYNC = 121,
  JWRN_NOT_SEQUENTIAL = 122,
  JWRN_TOO_MUCH_DATA = 123,
  JMSG_LASTMSGCODE = 124,
};

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE
{
  StandardDesign = 0,
  NEC98x86 = 1,
  EndAlternatives = 2,
} ALTERNATIVE_ARCHITECTURE_TYPE, *PALTERNATIVE_ARCHITECTURE_TYPE;

struct InviteMessage
{
  /* 0x0000 */ struct XSESSION_INFO sessionInfo;
  /* 0x003d */ char Padding_238[3];
  /* 0x0040 */ int fromMPInvite;
  /* 0x0044 */ BOOL isDedicated;
  /* 0x0045 */ char __PADDING__[3];
}; /* size: 0x0048 */

struct SndAssetBankHeader
{
  /* 0x0000 */ unsigned int magic;
  /* 0x0004 */ unsigned int version;
  /* 0x0008 */ unsigned int entrySize;
  /* 0x000c */ unsigned int checksumSize;
  /* 0x0010 */ unsigned int dependencySize;
  /* 0x0014 */ unsigned int entryCount;
  /* 0x0018 */ unsigned int dependencyCount;
  /* 0x001c */ unsigned int pad32;
  /* 0x0020 */ __int64 fileSize;
  /* 0x0028 */ __int64 entryOffset;
  /* 0x0030 */ __int64 checksumOffset;
  /* 0x0038 */ unsigned char checksumChecksum[16];
  /* 0x0048 */ char dependencies[512];
  /* 0x0248 */ char padding[1464];
}; /* size: 0x0800 */

typedef enum _FINDEX_INFO_LEVELS
{
  FindExInfoStandard = 0,
  FindExInfoBasic = 1,
  FindExInfoMaxInfoLevel = 2,
} FINDEX_INFO_LEVELS, *PFINDEX_INFO_LEVELS;

enum CHARTYPE
{
  CH_OTHER = 0,
  CH_PERCENT = 1,
  CH_DOT = 2,
  CH_STAR = 3,
  CH_ZERO = 4,
  CH_DIGIT = 5,
  CH_FLAG = 6,
  CH_SIZE = 7,
  CH_TYPE = 8,
};

struct ActorFlags
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int inuse : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned int useable : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned int ignoreTriggers : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned int pushable : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned int ikPriority : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned int noPlayerMeleeBlood : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned int talkToSpecies : 5; /* bit position: 6 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int allBits;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

enum ARG_TYPE
{
  eblank = 0,
  e_int_arg = 1,
  e_short_arg = 2,
  e_ptr_arg = 3,
  e_int64_arg = 4,
  e_long_long_arg = 5,
  e_long_arg = 6,
  e_longdouble_arg = 7,
  e_double_arg = 8,
};

class ISteamNetworking
{
}; /* size: 0x0004 */

struct yy_buffer_state
{
  /* 0x0000 */ struct _iobuf* yy_input_file;
  /* 0x0004 */ char* yy_ch_buf;
  /* 0x0008 */ char* yy_buf_pos;
  /* 0x000c */ unsigned int yy_buf_size;
  /* 0x0010 */ int yy_n_chars;
  /* 0x0014 */ int yy_is_our_buffer;
  /* 0x0018 */ int yy_is_interactive;
  /* 0x001c */ int yy_at_bol;
  /* 0x0020 */ int yy_fill_buffer;
  /* 0x0024 */ int yy_buffer_status;
}; /* size: 0x0028 */

typedef enum _FP_OPERATION_CODE
{
  _FpCodeUnspecified = 0,
  _FpCodeAdd = 1,
  _FpCodeSubtract = 2,
  _FpCodeMultiply = 3,
  _FpCodeDivide = 4,
  _FpCodeSquareRoot = 5,
  _FpCodeRemainder = 6,
  _FpCodeCompare = 7,
  _FpCodeConvert = 8,
  _FpCodeRound = 9,
  _FpCodeTruncate = 10,
  _FpCodeFloor = 11,
  _FpCodeCeil = 12,
  _FpCodeAcos = 13,
  _FpCodeAsin = 14,
  _FpCodeAtan = 15,
  _FpCodeAtan2 = 16,
  _FpCodeCabs = 17,
  _FpCodeCos = 18,
  _FpCodeCosh = 19,
  _FpCodeExp = 20,
  _FpCodeFabs = 21,
  _FpCodeFmod = 22,
  _FpCodeFrexp = 23,
  _FpCodeHypot = 24,
  _FpCodeLdexp = 25,
  _FpCodeLog = 26,
  _FpCodeLog10 = 27,
  _FpCodeModf = 28,
  _FpCodePow = 29,
  _FpCodeSin = 30,
  _FpCodeSinh = 31,
  _FpCodeTan = 32,
  _FpCodeTanh = 33,
  _FpCodeY0 = 34,
  _FpCodeY1 = 35,
  _FpCodeYn = 36,
  _FpCodeLogb = 37,
  _FpCodeNextafter = 38,
  _FpCodeNegate = 39,
  _FpCodeFmin = 40,
  _FpCodeFmax = 41,
  _FpCodeConvertTrunc = 42,
  _XMMIAddps = 43,
  _XMMIAddss = 44,
  _XMMISubps = 45,
  _XMMISubss = 46,
  _XMMIMulps = 47,
  _XMMIMulss = 48,
  _XMMIDivps = 49,
  _XMMIDivss = 50,
  _XMMISqrtps = 51,
  _XMMISqrtss = 52,
  _XMMIMaxps = 53,
  _XMMIMaxss = 54,
  _XMMIMinps = 55,
  _XMMIMinss = 56,
  _XMMICmpps = 57,
  _XMMICmpss = 58,
  _XMMIComiss = 59,
  _XMMIUComiss = 60,
  _XMMICvtpi2ps = 61,
  _XMMICvtsi2ss = 62,
  _XMMICvtps2pi = 63,
  _XMMICvtss2si = 64,
  _XMMICvttps2pi = 65,
  _XMMICvttss2si = 66,
  _XMMIAddsubps = 67,
  _XMMIHaddps = 68,
  _XMMIHsubps = 69,
  _XMMIRoundps = 70,
  _XMMIRoundss = 71,
  _XMMIDpps = 72,
  _XMMI2Addpd = 73,
  _XMMI2Addsd = 74,
  _XMMI2Subpd = 75,
  _XMMI2Subsd = 76,
  _XMMI2Mulpd = 77,
  _XMMI2Mulsd = 78,
  _XMMI2Divpd = 79,
  _XMMI2Divsd = 80,
  _XMMI2Sqrtpd = 81,
  _XMMI2Sqrtsd = 82,
  _XMMI2Maxpd = 83,
  _XMMI2Maxsd = 84,
  _XMMI2Minpd = 85,
  _XMMI2Minsd = 86,
  _XMMI2Cmppd = 87,
  _XMMI2Cmpsd = 88,
  _XMMI2Comisd = 89,
  _XMMI2UComisd = 90,
  _XMMI2Cvtpd2pi = 91,
  _XMMI2Cvtsd2si = 92,
  _XMMI2Cvttpd2pi = 93,
  _XMMI2Cvttsd2si = 94,
  _XMMI2Cvtps2pd = 95,
  _XMMI2Cvtss2sd = 96,
  _XMMI2Cvtpd2ps = 97,
  _XMMI2Cvtsd2ss = 98,
  _XMMI2Cvtdq2ps = 99,
  _XMMI2Cvttps2dq = 100,
  _XMMI2Cvtps2dq = 101,
  _XMMI2Cvttpd2dq = 102,
  _XMMI2Cvtpd2dq = 103,
  _XMMI2Addsubpd = 104,
  _XMMI2Haddpd = 105,
  _XMMI2Hsubpd = 106,
  _XMMI2Roundpd = 107,
  _XMMI2Roundsd = 108,
  _XMMI2Dppd = 109,
} FP_OPERATION_CODE, *PFP_OPERATION_CODE;

typedef enum _FPIEEE_PRECISION
{
  _FpPrecisionFull = 0,
  _FpPrecision53 = 1,
  _FpPrecision24 = 2,
} FPIEEE_PRECISION, *PFPIEEE_PRECISION;

struct PathBlockPlanes
{
  /* 0x0000 */ union vec2_t vNormal[5];
  /* 0x0028 */ float fDist[5];
  /* 0x003c */ int iPlaneCount;
}; /* size: 0x0040 */

struct scrCompilePub_t
{
  /* 0x0000 */ int value_count;
  /* 0x0004 */ int far_function_count;
  /* 0x0008 */ unsigned int loadedscripts;
  /* 0x000c */ unsigned int scriptsPos;
  /* 0x0010 */ unsigned int scriptsCount;
  /* 0x0014 */ unsigned int builtinFunc;
  /* 0x0018 */ unsigned int builtinMeth;
  /* 0x001c */ const char* in_ptr;
  /* 0x0020 */ const char* parseBuf;
  /* 0x0024 */ BOOL script_loading;
  /* 0x0025 */ BOOL allowedBreakpoint;
  /* 0x0026 */ char Padding_239[2];
  /* 0x0028 */ int developer_statement;
  /* 0x002c */ unsigned char* opcodePos;
  /* 0x0030 */ unsigned int programLen;
}; /* size: 0x0034 */

class ragdoll_joint_limit_info
{
  /* 0x0000 */ class phys_vec3 m_b1_ud_loc;
  /* 0x0010 */ float m_b1_ud_limit_co_;
  /* 0x0014 */ float m_b1_ud_limit_si_;
  /* 0x0018 */ float m_b1_ud_active_limit_co_;
}; /* size: 0x0020 */

enum Tokens
{
  TOK_basedLp = 0,
  TOK_cdecl = 1,
  TOK_pascal = 2,
  TOK_stdcall = 3,
  TOK_thiscall = 4,
  TOK_fastcall = 5,
  TOK_cocall = 6,
  TOK_eabi = 7,
  TOK_ptr64 = 8,
  TOK_restrict = 9,
  TOK_unaligned = 10,
  TOK__last = 11,
};

class bdCommerce
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

struct CachedAssets_t
{
  /* 0x0000 */ struct Material* scrollBarArrowUp;
  /* 0x0004 */ struct Material* scrollBarArrowDown;
  /* 0x0008 */ struct Material* scrollBarArrowLeft;
  /* 0x000c */ struct Material* scrollBarArrowRight;
  /* 0x0010 */ struct Material* scrollBar;
  /* 0x0014 */ struct Material* scrollBarThumb;
  /* 0x0018 */ struct Material* sliderBar;
  /* 0x001c */ struct Material* sliderThumb;
  /* 0x0020 */ struct Material* whiteMaterial;
  /* 0x0024 */ struct Material* cursor;
  /* 0x0028 */ struct Material* dvarlistArrowLeft;
  /* 0x002c */ struct Material* dvarlistArrowRight;
  /* 0x0030 */ struct Material* line;
  /* 0x0034 */ struct Material* blur;
  /* 0x0038 */ struct Material* lineGraph;
  /* 0x003c */ struct Font_s* bigFont;
  /* 0x0040 */ struct Font_s* smallFont;
  /* 0x0044 */ struct Font_s* consoleFont;
  /* 0x0048 */ struct Font_s* boldFont;
  /* 0x004c */ struct Font_s* textFont;
  /* 0x0050 */ struct Font_s* extraBigFont;
  /* 0x0054 */ struct Font_s* extraSmallFont;
  /* 0x0058 */ struct Font_s* fxFont;
  /* 0x005c */ struct SndAliasList* itemFocusSound;
}; /* size: 0x0060 */

struct customGameTypeInfo
{
  /* 0x0000 */ char gameType[12];
  /* 0x000c */ char gameTypeName[32];
  /* 0x002c */ char gameTypeDesc[128];
  /* 0x00ac */ char fileName[32];
  /* 0x00cc */ char gameTypeNameCaps[32];
  /* 0x00ec */ int splitscreen;
}; /* size: 0x00f0 */

struct mapInfo
{
  /* 0x0000 */ char mapName[32];
  /* 0x0020 */ char mapLoadName[24];
  /* 0x0038 */ char mapNameCaps[32];
  /* 0x0058 */ int splitscreen;
  /* 0x005c */ char mapPackType[16];
  /* 0x006c */ enum dlcIndex_t mapPackTypeIndex;
}; /* size: 0x0070 */

struct contentPackInfo
{
  /* 0x0000 */ char mapPackName[16];
}; /* size: 0x0010 */

struct sharedUiInfo_t
{
  /* 0x0000 */ struct CachedAssets_t assets;
  /* 0x0060 */ int playerCount;
  /* 0x0064 */ char playerNames[32][18];
  /* 0x02a4 */ char teamNames[32][18];
  /* 0x04e4 */ enum ClientNum_t playerClientNums[18];
  /* 0x052c */ int numGameTypes;
  /* 0x0530 */ struct gameTypeInfo gameTypes[32];
  /* 0x1330 */ int numCustomGameTypes;
  /* 0x1334 */ struct customGameTypeInfo customGameTypes[32];
  /* 0x3134 */ int numCustomMatchGameTypes;
  /* 0x3138 */ struct gameTypeInfo customMatchGameTypes[32];
  /* 0x3f38 */ int gameTypeMapCount[32];
  /* 0x3fb8 */ int numMapStartLocsZombie;
  /* 0x3fbc */ struct mapStartLocInfo mapStartLocsZombie[16];
  /* 0xb43c */ int numJoinGameTypes;
  /* 0xb440 */ struct gameTypeInfo joinGameTypes[32];
  /* 0xc240 */ int mapCount;
  /* 0xc244 */ int mapsLoadedCount;
  /* 0xc248 */ struct mapInfo mapList[128];
  /* 0xfa48 */ struct contentPackInfo contentPackList[8];
  /* 0xfac8 */ unsigned __int64 partyMemberXuid;
  /* 0xfad0 */ struct Material* talkingIcons[3];
  /* 0xfadc */ struct serverStatus_s serverStatus;
  /* 0x23d24 */ char serverStatusAddress[64];
  /* 0x23d64 */ struct serverStatusInfo_s serverStatusInfo;
  /* 0x251e0 */ struct serverStatusInfo_s serverStatusInfoScoreBoard;
  /* 0x2665c */ int nextServerStatusRefresh;
  /* 0x26660 */ int nextServerStatusScoreBoardRefresh;
  /* 0x26664 */ struct pendingServerStatus_t pendingServerStatus;
  /* 0x26f28 */ unsigned __int64 visibilityBits[1];
  /* 0x26f30 */ unsigned __int64 localVisibilityBits[1];
  /* 0x26f38 */ struct Material* loadingScreen;
  /* 0x26f3c */ long __PADDING__[1];
}; /* size: 0x26f40 */

union DvarValue
{
  union
  {
    /* 0x0000 */ BOOL enabled;
    /* 0x0000 */ int integer;
    /* 0x0000 */ unsigned int unsignedInt;
    /* 0x0000 */ __int64 integer64;
    /* 0x0000 */ unsigned __int64 unsignedInt64;
    /* 0x0000 */ float value;
    /* 0x0000 */ union vec4_t vector;
    /* 0x0000 */ const char* string;
    /* 0x0000 */ unsigned char color[4];
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

union DvarLimits
{
  union
  {
    struct
    {
      /* 0x0000 */ int stringCount;
      /* 0x0004 */ const char** strings;
    } /* size: 0x0008 */ enumeration;
    struct
    {
      /* 0x0000 */ int min;
      /* 0x0004 */ int max;
    } /* size: 0x0008 */ integer;
    struct
    {
      /* 0x0000 */ __int64 min;
      /* 0x0008 */ __int64 max;
    } /* size: 0x0010 */ integer64;
    struct
    {
      /* 0x0000 */ float min;
      /* 0x0004 */ float max;
    } /* size: 0x0008 */ value;
    struct
    {
      /* 0x0000 */ float min;
      /* 0x0004 */ float max;
    } /* size: 0x0008 */ vector;
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

struct dvar_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ const char* description;
  /* 0x0008 */ long hash;
  /* 0x000c */ unsigned int flags;
  /* 0x0010 */ enum dvarType_t type;
  /* 0x0014 */ BOOL modified;
  /* 0x0015 */ char Padding_240[3];
  /* 0x0018 */ union DvarValue current;
  /* 0x0028 */ union DvarValue latched;
  /* 0x0038 */ union DvarValue reset;
  /* 0x0048 */ union DvarLimits domain;
  /* 0x0058 */ struct dvar_t* hashNext;
  /* 0x005c */ long __PADDING__[1];
}; /* size: 0x0060 */

class phys_simple_allocator<pathnode_resized_links_t>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

union textDefData_t
{
  union
  {
    /* 0x0000 */ struct focusItemDef_s* focusItemDef;
    /* 0x0000 */ struct gameMsgDef_s* gameMsgDef;
    /* 0x0000 */ void* data;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct textDef_s
{
  /* 0x0000 */ struct rectDef_s textRect[1];
  /* 0x0018 */ int alignment;
  /* 0x001c */ int fontEnum;
  /* 0x0020 */ int itemFlags;
  /* 0x0024 */ int textAlignMode;
  /* 0x0028 */ float textalignx;
  /* 0x002c */ float textaligny;
  /* 0x0030 */ float textscale;
  /* 0x0034 */ float textpadding;
  /* 0x0038 */ int textStyle;
  /* 0x003c */ union vec4_t fontColor;
  /* 0x004c */ union vec4_t glowColor;
  /* 0x005c */ union vec4_t shadowColor;
  /* 0x006c */ float fontBlur;
  /* 0x0070 */ float glowSize;
  /* 0x0074 */ float shadowSize;
  /* 0x0078 */ union vec2_t shadowOffset;
  /* 0x0080 */ const char* text;
  /* 0x0084 */ struct textExp_s* textExpData;
  /* 0x0088 */ union textDefData_t textTypeData;
}; /* size: 0x008c */

struct ActorAnimSets
{
  /* 0x0000 */ unsigned short aimLow;
  /* 0x0002 */ unsigned short aimLevel;
  /* 0x0004 */ unsigned short aimHigh;
  /* 0x0006 */ unsigned short shootLow;
  /* 0x0008 */ unsigned short shootLevel;
  /* 0x000a */ unsigned short shootHigh;
}; /* size: 0x000c */

struct cbrushside_t
{
  /* 0x0000 */ struct cplane_s* plane;
  /* 0x0004 */ int cflags;
  /* 0x0008 */ int sflags;
}; /* size: 0x000c */

struct XMFLOAT4X4A
{
}; /* size: 0x0040 */

class bdAddrHandle
{
  /* 0x0000 */ long Padding_241[2];
  /* 0x0008 */ class bdEndpoint m_endpoint;
  /* 0x0014 */ enum bdAddrHandle::bdAddrHandleStatus m_status;
  /* 0x0018 */ class bdAddr m_realAddr;
}; /* size: 0x0020 */

struct MaterialTechnique
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned short flags;
  /* 0x0006 */ unsigned short passCount;
  /* 0x0008 */ struct MaterialPass passArray[1];
}; /* size: 0x0020 */

struct SndSidechainDuck
{
  /* 0x0000 */ char name[32];
  /* 0x0020 */ unsigned int id;
  /* 0x0024 */ float g;
  /* 0x0028 */ float f;
  /* 0x002c */ float q;
  /* 0x0030 */ float ta;
  /* 0x0034 */ float tr;
  /* 0x0038 */ float tf;
}; /* size: 0x003c */

struct Collmap
{
  /* 0x0000 */ struct PhysGeomList* geomList;
}; /* size: 0x0004 */

struct ID3D11InputLayout
{
}; /* size: 0x0004 */

typedef struct _XMUICO4
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 x : 20; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 y : 20; /* bit position: 20 */
      /* 0x0000 */ unsigned __int64 z : 20; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 w : 4; /* bit position: 60 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 v;
  }; /* size: 0x0008 */
} XMUICO4, *PXMUICO4; /* size: 0x0008 */

struct sd_decoder_interface
{
  /* 0x0000 */ void* Init /* function */;
  /* 0x0004 */ void* Shutdown /* function */;
  /* 0x0008 */ void* Lock /* function */;
  /* 0x000c */ void* Unlock /* function */;
  /* 0x0010 */ void* QueryAvailableData /* function */;
  /* 0x0014 */ void* BufferComplete /* function */;
  /* 0x0018 */ void* BufferReady /* function */;
  /* 0x001c */ void* BufferSubmit /* function */;
  /* 0x0020 */ void* Consume /* function */;
  /* 0x0024 */ void* Free /* function */;
  /* 0x0028 */ void* Create /* function */;
}; /* size: 0x002c */

struct dwFileList
{
  /* 0x0000 */ unsigned __int64 ownerID;
  /* 0x0008 */ unsigned int startDate;
  /* 0x000c */ long Padding_242;
  /* 0x0010 */ class bdFileInfo fileListInfo[50];
  /* 0x2270 */ unsigned int maxNumResults;
  /* 0x2274 */ unsigned int offset;
  /* 0x2278 */ const char* fileName;
  /* 0x227c */ long __PADDING__[1];
}; /* size: 0x2280 */

struct tagCACY
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ union tagCY* pElems;
}; /* size: 0x0008 */

struct MaterialInfoRaw
{
  /* 0x0000 */ unsigned int nameOffset;
  /* 0x0004 */ unsigned int refImageNameOffset;
  /* 0x0008 */ unsigned int gameFlags;
  /* 0x000c */ unsigned char _unused;
  /* 0x000d */ unsigned char sortKey;
  /* 0x000e */ unsigned char textureAtlasRowCount;
  /* 0x000f */ unsigned char textureAtlasColumnCount;
  /* 0x0010 */ float maxDeformMove;
  /* 0x0014 */ unsigned char deformFlags;
  /* 0x0015 */ unsigned char usage;
  /* 0x0016 */ unsigned short toolFlags;
  /* 0x0018 */ unsigned int locale;
  /* 0x001c */ unsigned short autoTexScaleWidth;
  /* 0x001e */ unsigned short autoTexScaleHeight;
  /* 0x0020 */ float tessSize;
  /* 0x0024 */ int surfaceFlags;
  /* 0x0028 */ int contents;
}; /* size: 0x002c */

class std::bad_alloc
{
}; /* size: 0x000c */

struct MaterialTextureDef
{
  /* 0x0000 */ unsigned int nameHash;
  /* 0x0004 */ char nameStart;
  /* 0x0005 */ char nameEnd;
  /* 0x0006 */ unsigned char samplerState;
  /* 0x0007 */ unsigned char semantic;
  /* 0x0008 */ unsigned char isMatureContent;
  /* 0x0009 */ unsigned char pad[3];
  /* 0x000c */ struct GfxImage* image;
}; /* size: 0x0010 */

struct GfxImageLoadDef
{
  /* 0x0000 */ unsigned char levelCount;
  /* 0x0001 */ unsigned char flags;
  /* 0x0002 */ char Padding_243[2];
  /* 0x0004 */ int format;
  /* 0x0008 */ int resourceSize;
  /* 0x000c */ unsigned char data[1];
  /* 0x000d */ char __PADDING__[3];
}; /* size: 0x0010 */

class phys_static_array<phys_convex_hull::ch_edge,128>::iterator
{
  /* 0x0000 */ struct phys_convex_hull::ch_edge* m_ptr;
}; /* size: 0x0004 */

typedef struct _XMUBYTE4
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char x;
      /* 0x0001 */ unsigned char y;
      /* 0x0002 */ unsigned char z;
      /* 0x0003 */ unsigned char w;
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMUBYTE4, *PXMUBYTE4; /* size: 0x0004 */

struct MaterialConstantDef
{
  /* 0x0000 */ unsigned int nameHash;
  /* 0x0004 */ char name[12];
  /* 0x0010 */ union vec4_t literal;
}; /* size: 0x0020 */

struct sd_loaded
{
  /* 0x0000 */ BOOL looping;
  /* 0x0001 */ char Padding_244[3];
  /* 0x0004 */ unsigned int channelCount;
  /* 0x0008 */ unsigned int frameRate;
  /* 0x000c */ unsigned int frameCount;
  /* 0x0010 */ unsigned int dataSize;
  /* 0x0014 */ const char* data;
}; /* size: 0x0018 */

class bdFileData
{
  /* 0x0000 */ long Padding_245;
  /* 0x0004 */ void* m_fileData;
  /* 0x0008 */ unsigned int m_fileSize;
}; /* size: 0x000c */

struct dwFileTask
{
  /* 0x0000 */ char* m_filename;
  /* 0x0004 */ class bdFileData m_fileData;
  /* 0x0010 */ enum bdLobbyErrorCode m_error;
  /* 0x0014 */ long Padding_246;
  /* 0x0018 */ unsigned __int64 m_fileID;
  /* 0x0020 */ unsigned int m_fileSize;
  /* 0x0024 */ unsigned int m_bufferSize;
  /* 0x0028 */ class bdFileInfo m_fileInfo;
  /* 0x00d8 */ void* m_buffer;
  /* 0x00dc */ BOOL m_optional;
  /* 0x00dd */ char __PADDING__[3];
}; /* size: 0x00e0 */

struct fileRetryInfo
{
  /* 0x0000 */ int lastAttemptTime;
  /* 0x0004 */ int lastAttemptInterval;
  /* 0x0008 */ int retryCount;
}; /* size: 0x000c */

struct dwFileOperationInfo
{
  /* 0x0000 */ struct dwFileTask fileTask;
  /* 0x00e0 */ struct fileRetryInfo retryInfo;
  /* 0x00ec */ int taskType;
  /* 0x00f0 */ BOOL fetchCompleted;
  /* 0x00f1 */ BOOL writeCompleted;
  /* 0x00f2 */ BOOL isUserFile;
  /* 0x00f3 */ BOOL isCompressedFile;
  /* 0x00f4 */ const char* menuDef;
  /* 0x00f8 */ unsigned char* fileBuffer;
  /* 0x00fc */ int bufferSize;
  /* 0x0100 */ int decompressedSize;
  /* 0x0104 */ void* fileOperationSucessFunction /* function */;
  /* 0x0108 */ void* fileNotFoundFunction /* function */;
  /* 0x010c */ BOOL* alreadyUploaded;
  /* 0x0110 */ unsigned char* parityBits;
  /* 0x0114 */ void* userData;
}; /* size: 0x0118 */

struct dwKeyArchiveReadTask
{
  /* 0x0000 */ unsigned __int64 entityID;
  /* 0x0008 */ BOOL isDedicated;
  /* 0x0009 */ char Padding_247[3];
  /* 0x000c */ enum fileShareLocation location;
  /* 0x0010 */ class bdKeyValuePair values[20];
  /* 0x0150 */ int* outRatings;
  /* 0x0154 */ int count;
  /* 0x0158 */ unsigned short category;
  /* 0x015a */ char Padding_248[2];
  /* 0x015c */ void* successCallback /* function */;
  /* 0x0160 */ void* failureCallback /* function */;
  /* 0x0164 */ long __PADDING__[1];
}; /* size: 0x0168 */

struct dwKeyArchiveWriteTask
{
  /* 0x0000 */ unsigned __int64 entityID;
  /* 0x0008 */ unsigned short category;
  /* 0x000a */ char Padding_249[2];
  /* 0x000c */ class bdKeyValuePair* values;
  /* 0x0010 */ int count;
  /* 0x0014 */ void* successCallback /* function */;
  /* 0x0018 */ void* failureCallback /* function */;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

struct dwFileShareListTask
{
  /* 0x0000 */ unsigned __int64* ownerIDs;
  /* 0x0004 */ unsigned int numOwners;
  /* 0x0008 */ unsigned short offset;
  /* 0x000a */ unsigned short category;
  /* 0x000c */ unsigned short maxNumResults;
  /* 0x000e */ char Padding_250[2];
  /* 0x0010 */ class bdFileMetaData* descriptors;
  /* 0x0014 */ int* numDescriptors;
  /* 0x0018 */ int* totalDescriptors;
  /* 0x001c */ BOOL isUserFile;
  /* 0x001d */ char Padding_251[3];
  /* 0x0020 */ const char* fileName;
  /* 0x0024 */ void* successCallback /* function */;
  /* 0x0028 */ void* failureCallback /* function */;
}; /* size: 0x002c */

struct dwFileShareSearchTask
{
  /* 0x0000 */ enum fileShareLocation location;
  /* 0x0004 */ unsigned int startIndex;
  /* 0x0008 */ unsigned int maxNumResults;
  /* 0x000c */ unsigned int numTags;
  /* 0x0010 */ unsigned int sortOrder;
  /* 0x0014 */ BOOL orderNewestFirst;
  /* 0x0015 */ char Padding_252[3];
  /* 0x0018 */ class bdTag* tags;
  /* 0x001c */ int* resultFileCount;
  /* 0x0020 */ class bdFileID* resultFileIDs;
  /* 0x0024 */ int* resultRatingCount;
  /* 0x0028 */ class bdVoteRankStatsInfo* resultRatings;
  /* 0x002c */ int* resultTotalFileCount;
  /* 0x0030 */ void* successCallback /* function */;
  /* 0x0034 */ void* failureCallback /* function */;
}; /* size: 0x0038 */

struct dwFileShareDescriptorsTask
{
  /* 0x0000 */ enum fileShareLocation location;
  /* 0x0004 */ unsigned int numFiles;
  /* 0x0008 */ class bdFileID* fileIDs;
  /* 0x000c */ int cacheLoadedFileCount;
  /* 0x0010 */ class bdFileMetaData* descriptors;
  /* 0x0014 */ int* descriptorCount;
  /* 0x0018 */ BOOL shouldSort;
  /* 0x0019 */ char Padding_253[3];
  /* 0x001c */ void* successCallback /* function */;
  /* 0x0020 */ void* failureCallback /* function */;
}; /* size: 0x0024 */

struct dwFileShareReadFileTask
{
  /* 0x0000 */ enum fileShareLocation location;
  /* 0x0004 */ long Padding_254;
  /* 0x0008 */ unsigned __int64 fileID;
  /* 0x0010 */ unsigned int fileSize;
  /* 0x0014 */ long Padding_255;
  /* 0x0018 */ class bdFileMetaData descriptor;
  /* 0x0a40 */ const char* menuDef;
  /* 0x0a44 */ void* buffer;
  /* 0x0a48 */ void* cacheBuffer;
  /* 0x0a4c */ unsigned int bufferSize;
  /* 0x0a50 */ unsigned int bytesDownloaded;
  /* 0x0a54 */ class bdDownloadInterceptor* downloadHandler;
  /* 0x0a58 */ BOOL loadedFromCache;
  /* 0x0a59 */ char Padding_256[3];
  /* 0x0a5c */ unsigned int startByte;
  /* 0x0a60 */ unsigned int endByte;
  /* 0x0a64 */ void* dataCallback /* function */;
  /* 0x0a68 */ void* successCallback /* function */;
  /* 0x0a6c */ void* failureCallback /* function */;
}; /* size: 0x0a70 */

struct dwFileShareTagTask
{
  /* 0x0000 */ enum fileShareLocation location;
  /* 0x0004 */ class bdTag* tags;
  /* 0x0008 */ unsigned int numTags;
  /* 0x000c */ long Padding_257;
  /* 0x0010 */ unsigned __int64 entityID;
}; /* size: 0x0018 */

struct dwFileShareTransferTask
{
  /* 0x0000 */ unsigned __int64 fileID;
  /* 0x0008 */ enum fileShareLocation location;
  /* 0x000c */ unsigned short fileSlot;
  /* 0x000e */ char Padding_258[2];
  /* 0x0010 */ char* fileName;
  /* 0x0014 */ unsigned short category;
  /* 0x0016 */ unsigned char metaData[255];
  /* 0x0115 */ char Padding_259[3];
  /* 0x0118 */ unsigned int metaDataSize;
  /* 0x011c */ unsigned int numTags;
  /* 0x0120 */ class bdTag* tags;
  /* 0x0124 */ long Padding_260;
  /* 0x0128 */ class bdFileID outFileID;
  /* 0x0138 */ void* successCallback /* function */;
  /* 0x013c */ void* failureCallback /* function */;
}; /* size: 0x0140 */

struct dwFileShareRemoveTask
{
  /* 0x0000 */ unsigned int fileSlot;
  /* 0x0004 */ void* successCallback /* function */;
  /* 0x0008 */ void* failureCallback /* function */;
}; /* size: 0x000c */

struct dwFileShareSummaryTask
{
  /* 0x0000 */ unsigned __int64 fileID;
  /* 0x0008 */ unsigned char* summaryData;
  /* 0x000c */ unsigned int summaryDataSize;
  /* 0x0010 */ const void* metaData;
  /* 0x0014 */ unsigned int metaDataSize;
  /* 0x0018 */ unsigned int numTags;
  /* 0x001c */ class bdTag* tags;
  /* 0x0020 */ enum fileShareLocation location;
  /* 0x0024 */ BOOL showSuccess;
  /* 0x0025 */ char Padding_261[3];
  /* 0x0028 */ void* successCallback /* function */;
  /* 0x002c */ void* failureCallback /* function */;
}; /* size: 0x0030 */

class bdVoteRankStatsInfo
{
  /* 0x0000 */ long Padding_262[28];
  /* 0x0070 */ unsigned __int64 m_fileOwnerID;
  /* 0x0078 */ char m_fileOwnerName[65];
  /* 0x00b9 */ char Padding_263[3];
  /* 0x00bc */ unsigned int m_totalVotes;
  /* 0x00c0 */ unsigned int m_avgVoteValue;
  /* 0x00c4 */ unsigned int m_createTime;
}; /* size: 0x00c8 */

struct dwFileShareGetTopRatedTask
{
  /* 0x0000 */ unsigned __int64 startRank;
  /* 0x0008 */ int maxFiles;
  /* 0x000c */ unsigned int leaderboardID;
  /* 0x0010 */ class bdVoteRankStatsInfo statsInfo[10];
  /* 0x07e0 */ int* outNumFiles;
  /* 0x07e4 */ int* outTotalNumFiles;
  /* 0x07e8 */ class bdFileID* outFileIDs;
  /* 0x07ec */ void* successCallback /* function */;
  /* 0x07f0 */ void* failureCallback /* function */;
  /* 0x07f4 */ long __PADDING__[1];
}; /* size: 0x07f8 */

struct playerFileOperations
{
  /* 0x0000 */ struct dwFileOperationInfo statsBackupFileInfo;
  /* 0x0118 */ struct dwFileOperationInfo readDWEmailFileInfo;
  /* 0x0230 */ struct dwFileOperationInfo saveDWEmailFileInfo;
  /* 0x0348 */ struct dwFileOperationInfo codtvMenuFileInfo;
  /* 0x0460 */ struct dwFileOperationInfo clanMOTDInfo;
  /* 0x0578 */ struct dwFileOperationInfo corruptedStatsBackupFileInfo;
  /* 0x0690 */ struct dwFileOperationInfo fetchMetPlayerListFileInfo;
  /* 0x07a8 */ struct dwFileOperationInfo saveMetPlayerListFileInfo;
  /* 0x08c0 */ struct dwFileOperationInfo getOtherPlayerStatsFileInfo;
  /* 0x09d8 */ struct dwFileOperationInfo getPlayerStatsFileInfo;
  /* 0x0af0 */ struct dwFileOperationInfo saveStatsFileInfo;
  /* 0x0c08 */ struct dwFileOperationInfo contractsFileInfo;
  /* 0x0d20 */ struct dwFileOperationInfo demoFileInfo;
  /* 0x0e38 */ struct dwFileOperationInfo whitelistFileInfo;
  /* 0x0f50 */ struct dwKeyArchiveReadTask keyArchiveReadTask;
  /* 0x10b8 */ struct dwKeyArchiveWriteTask keyArchiveWriteTask;
  /* 0x10d8 */ struct dwFileOperationInfo getClassSetsFileInfo;
  /* 0x11f0 */ struct dwFileOperationInfo saveClassSetsFileInfo;
  /* 0x1308 */ struct dwFileShareListTask fileShareListTask;
  /* 0x1334 */ struct dwFileShareSearchTask fileShareSearchTask;
  /* 0x136c */ struct dwFileShareDescriptorsTask fileShareDescriptorsTask;
  /* 0x1390 */ struct dwFileShareReadFileTask fileShareReadFileTask;
  /* 0x1e00 */ struct dwFileShareWriteFileTask fileShareWriteFileTask;
  /* 0x1e50 */ struct dwFileShareTagTask fileShareTagTask;
  /* 0x1e68 */ struct dwFileShareTransferTask fileShareTransferTask;
  /* 0x1fa8 */ struct dwFileShareRemoveTask fileShareRemoveTask;
  /* 0x1fb4 */ long Padding_264;
  /* 0x1fb8 */ struct dwFileShareSummaryTask fileShareSummaryTask;
  /* 0x1fe8 */ struct dwFileShareGetTopRatedTask fileShareGetTopRatedTask;
}; /* size: 0x27e0 */

struct GjkTraceGeom
{
  union
  {
    struct
    {
      /* 0x0000 */ const struct cbrush_t* brush;
      /* 0x0004 */ long Padding_265[3];
      /* 0x0010 */ class phys_mat44 mat;
    }; /* size: 0x0044 */
    /* 0x0000 */ struct GjkTraceGeom geoms[50];
    struct
    {
      /* 0x0000 */ int nGeoms;
      /* 0x0004 */ long __PADDING__[19];
    }; /* size: 0x0050 */
  }; /* size: 0x0fa0 */
}; /* size: 0x0050 */

struct ID3D11DepthStencilState
{
}; /* size: 0x0004 */

struct ID3D11RasterizerState
{
}; /* size: 0x0004 */

class bdHashMap<bdEndpoint,bdDTLSAssociation *,bdEndpointHashingClass>::Node
{
  /* 0x0000 */ class bdDTLSAssociation* m_data;
  /* 0x0004 */ class bdEndpoint m_key;
  /* 0x0010 */ class bdHashMap<bdEndpoint,bdDTLSAssociation *,bdEndpointHashingClass>::Node* m_next;
}; /* size: 0x0014 */

struct D3D11_TEX1D_SRV
{
  /* 0x0000 */ unsigned int MostDetailedMip;
  /* 0x0004 */ unsigned int MipLevels;
}; /* size: 0x0008 */

struct sockaddr_storage_xp
{
  /* 0x0000 */ short ss_family;
  /* 0x0002 */ char __ss_pad1[6];
  /* 0x0008 */ __int64 __ss_align;
  /* 0x0010 */ char __ss_pad2[112];
}; /* size: 0x0080 */

struct BrushWrapper
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ int contents;
  /* 0x0010 */ union vec3_t maxs;
  /* 0x001c */ unsigned int numsides;
  /* 0x0020 */ struct cbrushside_t* sides;
  /* 0x0024 */ int axial_cflags[3][2];
  /* 0x003c */ int axial_sflags[3][2];
  /* 0x0054 */ unsigned int numverts;
  /* 0x0058 */ union vec3_t* verts;
  /* 0x005c */ struct cplane_s* planes;
}; /* size: 0x0060 */

struct sd_decoder_output
{
  /* 0x0000 */ short* data;
  /* 0x0004 */ unsigned int head;
  /* 0x0008 */ unsigned int count;
  /* 0x000c */ unsigned int starving;
  /* 0x0010 */ int priming;
}; /* size: 0x0014 */

struct ID3D11DomainShader
{
}; /* size: 0x0004 */

class bdAntiCheat
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

struct IUnknown
{
}; /* size: 0x0004 */

struct IDispatch
{
}; /* size: 0x0004 */

struct UnifiedFriend
{
  /* 0x0000 */ const struct FriendInfo* console;
}; /* size: 0x0004 */

struct UnifiedFriends
{
  /* 0x0000 */ struct UnifiedFriend friends[300];
  /* 0x04b0 */ int numFriends;
  /* 0x04b4 */ unsigned char mode;
  /* 0x04b5 */ char __PADDING__[3];
}; /* size: 0x04b8 */

typedef struct _XMFLOAT4
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
  /* 0x0008 */ float z;
  /* 0x000c */ float w;
} XMFLOAT4, *PXMFLOAT4; /* size: 0x0010 */

class bdCommonAddr
{
  /* 0x0000 */ long Padding_266[2];
  /* 0x0008 */ class bdArray<bdAddr> m_localAddrs;
  /* 0x0014 */ class bdAddr m_publicAddr;
  /* 0x001c */ enum bdNATType m_natType;
  /* 0x0020 */ unsigned int m_hash;
  /* 0x0024 */ BOOL m_isLoopback;
}; /* size: 0x0028 */

struct FriendInfo
{
  /* 0x0000 */ int status;
  /* 0x0004 */ long Padding_267;
  /* 0x0008 */ unsigned __int64 xuid;
  /* 0x0010 */ char name[16];
  /* 0x0020 */ char presence[128];
  /* 0x00a0 */ struct XSESSION_INFO sessionInfo;
  /* 0x00dd */ char Padding_268[3];
  /* 0x00e0 */ int timeInviteReceived;
  /* 0x00e4 */ BOOL hasInvite;
  /* 0x00e5 */ char __PADDING__[3];
}; /* size: 0x00e8 */

struct D3D11_CLASS_INSTANCE_DESC
{
  /* 0x0000 */ unsigned int InstanceId;
  /* 0x0004 */ unsigned int InstanceIndex;
  /* 0x0008 */ unsigned int TypeId;
  /* 0x000c */ unsigned int ConstantBuffer;
  /* 0x0010 */ unsigned int BaseConstantBufferOffset;
  /* 0x0014 */ unsigned int BaseTexture;
  /* 0x0018 */ unsigned int BaseSampler;
  /* 0x001c */ int Created;
}; /* size: 0x0020 */

struct searchPage_t
{
  /* 0x0000 */ class bdFileMetaData descriptors[10];
  /* 0x6590 */ int numDescriptors;
  /* 0x6594 */ BOOL isDone;
  /* 0x6595 */ BOOL statsDone;
  /* 0x6596 */ BOOL resultsReported;
  /* 0x6597 */ char __PADDING__[1];
}; /* size: 0x6598 */

struct ObjectVariableValue
{
  union
  {
    union
    {
      struct
      {
        /* 0x0000 */ unsigned short prev;
        /* 0x0002 */ unsigned short next;
      } /* size: 0x0004 */ f;
      struct
      {
        /* 0x0000 */ unsigned short refCount;
        union
        {
          union
          {
            /* 0x0002 */ unsigned short size;
            /* 0x0002 */ unsigned short entnum;
            /* 0x0002 */ unsigned short nextEntId;
            /* 0x0002 */ unsigned short self;
          }; /* size: 0x0002 */
        } /* size: 0x0002 */ u;
      } /* size: 0x0004 */ o;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  union
  {
    union
    {
      /* 0x0004 */ unsigned int typeAndData;
      /* 0x0004 */ unsigned int classnum;
      /* 0x0004 */ unsigned int notifyName;
      /* 0x0004 */ unsigned int waitTime;
      /* 0x0004 */ unsigned int parentLocalId;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ w;
}; /* size: 0x0008 */

union tagBINDPTR
{
  union
  {
    /* 0x0000 */ struct tagFUNCDESC* lpfuncdesc;
    /* 0x0000 */ struct tagVARDESC* lpvardesc;
    /* 0x0000 */ struct ITypeComp* lptcomp;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct tagFUNCDESC
{
  /* 0x0000 */ long memid;
  /* 0x0004 */ long* lprgscode;
  /* 0x0008 */ struct tagELEMDESC* lprgelemdescParam;
  /* 0x000c */ enum tagFUNCKIND funckind;
  /* 0x0010 */ enum tagINVOKEKIND invkind;
  /* 0x0014 */ enum tagCALLCONV callconv;
  /* 0x0018 */ short cParams;
  /* 0x001a */ short cParamsOpt;
  /* 0x001c */ short oVft;
  /* 0x001e */ short cScodes;
  /* 0x0020 */ struct tagELEMDESC elemdescFunc;
  /* 0x0030 */ unsigned short wFuncFlags;
  /* 0x0032 */ char __PADDING__[2];
}; /* size: 0x0034 */

class bdDispatchInterceptor
{
}; /* size: 0x0004 */

struct XModelCollTri_s
{
  /* 0x0000 */ union vec4_t plane;
  /* 0x0010 */ union vec4_t svec;
  /* 0x0020 */ union vec4_t tvec;
}; /* size: 0x0030 */

class CCallback<LiveSteamClient,DlcInstalled_t,0>
{
  /* 0x0000 */ long Padding_269[3];
  /* 0x000c */ class LiveSteamClient* m_pObj;
  /* 0x0010 */ void* m_Func /* function */;
}; /* size: 0x0014 */

class bdSubscriptionInfo
{
  /* 0x0000 */ long Padding_270[2];
  /* 0x0008 */ unsigned __int64 m_userID;
  /* 0x0010 */ unsigned int m_subscriptionType;
  /* 0x0014 */ unsigned int m_subscriptionLevel;
  /* 0x0018 */ int m_daysToExpiry;
  /* 0x001c */ BOOL m_canExpire;
}; /* size: 0x0020 */

struct MigrateMemberData
{
  /* 0x0000 */ enum ClientNum_t nominee;
  /* 0x0004 */ int nomineeUpload;
  /* 0x0008 */ int nomineeNAT;
  /* 0x000c */ BOOL nomineeOnLSP;
  /* 0x000d */ BOOL heardFrom;
  /* 0x000e */ char Padding_271[2];
  /* 0x0010 */ int lastHeardFrom;
  /* 0x0014 */ int lastSentTo;
  /* 0x0018 */ BOOL inSameGeographicalRegion;
  /* 0x0019 */ char __PADDING__[3];
}; /* size: 0x001c */

struct MigrateData
{
  /* 0x0000 */ int indexBits;
  /* 0x0004 */ int startTime;
  /* 0x0008 */ struct MigrateMemberData memberData[18];
}; /* size: 0x0200 */

struct PartyMemberTeam
{
  /* 0x0000 */ int team;
  /* 0x0004 */ int switchTeam;
  /* 0x0008 */ int switchTeamTime;
  /* 0x000c */ int lastTeam;
}; /* size: 0x0010 */

struct PartyMember
{
  /* 0x0000 */ unsigned char status;
  /* 0x0001 */ char Padding_272[3];
  /* 0x0004 */ int ackedMembers;
  /* 0x0008 */ int lastPacketTime;
  /* 0x000c */ int lastHeartbeatTime;
  /* 0x0010 */ int lastPartyStateAck;
  /* 0x0014 */ int lastDemoHeartBeatTime;
  /* 0x0018 */ unsigned int challenge;
  /* 0x001c */ int subpartyIndex;
  /* 0x0020 */ enum connstate_t reportedConnState;
  /* 0x0024 */ BOOL invited;
  /* 0x0025 */ BOOL headsetPresent;
  /* 0x0026 */ BOOL inLivePartyVoice;
  /* 0x0027 */ BOOL inLivePartyTalking;
  /* 0x0028 */ BOOL finishedLoadingDemo;
  /* 0x0029 */ BOOL isReady;
  /* 0x002a */ BOOL isGuest;
  /* 0x002b */ BOOL isSplitscreenClient;
  /* 0x002c */ enum connectionType_e connectionType;
  /* 0x0030 */ int natType;
  /* 0x0034 */ long Padding_273;
  /* 0x0038 */ unsigned __int64 player;
  /* 0x0040 */ char gamertag[32];
  /* 0x0060 */ enum ControllerIndex_t localControllerIndex;
  /* 0x0064 */ int playerEmblem;
  /* 0x0068 */ struct PartySceNpId npid;
  /* 0x008c */ char clanAbbrev[5];
  /* 0x0091 */ BOOL clanAbbrev_IsEliteValidated;
  /* 0x0092 */ char Padding_274[2];
  /* 0x0094 */ int codPoints;
  /* 0x0098 */ unsigned int affinityBits;
  /* 0x009c */ struct platformNetAdr platformAddr;
  /* 0x00d8 */ int availableMapPackFlags;
  /* 0x00dc */ class bdSecurityID privatePartyId;
  union
  {
    /* 0x00e4 */ int rank;
    /* 0x00e4 */ int rankPosition;
  }; /* size: 0x0004 */
  union
  {
    /* 0x00e8 */ int prestige;
    /* 0x00e8 */ int divisionID;
    /* 0x00e8 */ int daysLastPlayed;
  }; /* size: 0x0004 */
  /* 0x00ec */ int deaths;
  /* 0x00f0 */ float skillRating;
  /* 0x00f4 */ float skillVariance;
  /* 0x00f8 */ struct PartyMemberTeam teamInfo;
  /* 0x0108 */ int score;
  /* 0x010c */ int vetoedMap;
  /* 0x0110 */ int downloadPercent;
  /* 0x0114 */ BOOL readyForPlayback;
  /* 0x0115 */ char Padding_275[3];
  /* 0x0118 */ int maximumPing;
  /* 0x011c */ int specialFlags;
  /* 0x0120 */ int clanTagFeature;
  /* 0x0124 */ int voiceConnectivityBits;
  /* 0x0128 */ unsigned __int64 leagueTeamID;
  /* 0x0130 */ int leagueMemberCount;
  /* 0x0134 */ int searchStartUTC;
  /* 0x0138 */ int uploadBandwidth;
  /* 0x013c */ unsigned char probation;
  /* 0x013d */ unsigned char recentPlaylistEntries[3];
  /* 0x0140 */ unsigned int serverchallenge;
  /* 0x0144 */ int serverChallengeDeadline;
}; /* size: 0x0148 */

struct PartyMemberProfile
{
  /* 0x0000 */ int updateTime;
  /* 0x0004 */ int sendTime;
  /* 0x0008 */ int ackTime;
  /* 0x000c */ int acked;
  /* 0x0010 */ char DDL[1024];
}; /* size: 0x0410 */

struct SubpartyInfo
{
  /* 0x0000 */ struct SubpartyMember members[18];
  /* 0x0120 */ BOOL links[18];
  /* 0x0132 */ char Padding_276[2];
  /* 0x0134 */ int count;
  /* 0x0138 */ float skill;
  /* 0x013c */ int skillRanking;
  /* 0x0140 */ int searchStartUTC;
  /* 0x0144 */ int score;
  /* 0x0148 */ int team;
}; /* size: 0x014c */

struct lobbyBanSlot_t
{
  /* 0x0000 */ unsigned __int64 bannedXuid;
  /* 0x0008 */ int banTime;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

struct PartyHostDetails
{
  /* 0x0000 */ struct netadr_t addr;
  /* 0x0014 */ struct XSESSION_INFO sessionInfo;
  /* 0x0051 */ char Padding_277[7];
  /* 0x0058 */ unsigned __int64 xuid;
  /* 0x0060 */ int lastPacketTime;
  /* 0x0064 */ int lastPacketSentTime;
  /* 0x0068 */ int numPrivateSlots;
  /* 0x006c */ int numPublicSlots;
  /* 0x0070 */ enum ClientNum_t hostNum;
  /* 0x0074 */ BOOL accepted;
  /* 0x0075 */ char Padding_278[3];
  /* 0x0078 */ unsigned int challenge;
  /* 0x007c */ BOOL isDedicated;
  /* 0x007d */ char __PADDING__[3];
}; /* size: 0x0080 */

struct PartyHostData
{
  /* 0x0000 */ int partyGameStateChangeTime;
  /* 0x0004 */ int partyStateChangeTime;
  /* 0x0008 */ int stateSequenceNumber;
  /* 0x000c */ int expectedPlayers;
  /* 0x0010 */ int vetoPassTime;
  /* 0x0014 */ int uiState;
  /* 0x0018 */ int uiEvent;
  /* 0x001c */ int uiEventTime;
  /* 0x0020 */ int sessionSendTime;
  /* 0x0024 */ int lastValidLeagueTime;
  /* 0x0028 */ unsigned char votePossible;
  /* 0x0029 */ BOOL preloadingMap;
  /* 0x002a */ BOOL firstLobby;
  /* 0x002b */ BOOL migrateAfterRound;
  /* 0x002c */ BOOL stopAfterRound;
  /* 0x002d */ BOOL readyToStart;
  /* 0x002e */ BOOL initialAckComplete;
  /* 0x002f */ char __PADDING__[1];
}; /* size: 0x0030 */

struct partyMergeData_t
{
  /* 0x0000 */ int timeSinceLastJoin;
  /* 0x0004 */ int lastSessionSearch;
  /* 0x0008 */ enum MergeDedicatedState dedicatedState;
}; /* size: 0x000c */

struct PartyData_s
{
  /* 0x0000 */ struct SessionData* session;
  /* 0x0004 */ struct SessionData* presenceSession;
  /* 0x0008 */ struct MigrateData migrateData;
  /* 0x0208 */ struct PartyMember partyMembers[19];
  /* 0x1a60 */ struct PartyMemberProfile partyProfiles[19];
  /* 0x6790 */ enum PartyLeagueState leagueState;
  /* 0x6794 */ long Padding_279;
  /* 0x6798 */ struct PartyMemberLeagueData memberLeagueData[19];
  /* 0x78d0 */ struct PartyLeagueTeamData leagueTeamData[9];
  /* 0x7a80 */ struct SubpartyInfo subparties[19];
  /* 0x9324 */ int subpartyCount;
  /* 0x9328 */ struct lobbyBanSlot_t lobbyBans[16];
  /* 0x9428 */ int partyJoinTime;
  /* 0x942c */ long Padding_280;
  /* 0x9430 */ struct PartyHostDetails currentHost;
  /* 0x94b0 */ struct PartyHostDetails potentialHost;
  /* 0x9530 */ struct PartyHostData hostData;
  /* 0x9560 */ struct partyMergeData_t mergeData;
  /* 0x956c */ float qosPercent;
  /* 0x9570 */ int qosSuccesses;
  /* 0x9574 */ int qosTotal;
  /* 0x9578 */ int localPlayerFlags[1];
  /* 0x957c */ int lastMemberUpdateTime[1];
  /* 0x9580 */ int memberUpdateInterval[1];
  /* 0x9584 */ int areWeHost;
  /* 0x9588 */ int joiningAnotherParty;
  /* 0x958c */ int inParty;
  /* 0x9590 */ int party_systemActive;
  /* 0x9594 */ int veto;
  /* 0x9598 */ BOOL enteringStartReadyState;
  /* 0x9599 */ BOOL ready;
  /* 0x959a */ char Padding_281[2];
  /* 0x959c */ int wagerTime;
  /* 0x95a0 */ int allowedTeams;
  /* 0x95a4 */ BOOL teamBased;
  /* 0x95a5 */ char Padding_282[3];
  /* 0x95a8 */ unsigned __int64 demoFileId;
  /* 0x95b0 */ int demoFileSize;
  /* 0x95b4 */ BOOL demoIsUserFile;
  /* 0x95b5 */ BOOL finishedLoadingDemo;
  /* 0x95b6 */ BOOL retryDemoDownload;
  /* 0x95b7 */ char Padding_283;
  /* 0x95b8 */ unsigned __int64 demoAuthorXUID;
  /* 0x95c0 */ int partyId;
  /* 0x95c4 */ int nextSessionSearchTime;
  /* 0x95c8 */ int mapPackSearchFlags;
  /* 0x95cc */ int mapPackFlags;
  /* 0x95d0 */ unsigned __int64 leagueTeamID;
  /* 0x95d8 */ char leagueTeamName[32];
  /* 0x95f8 */ int lastPartyStateTime;
  /* 0x95fc */ int gameStartTime;
  /* 0x9600 */ int countDownTimeLeft;
  /* 0x9604 */ int interEndTime;
  /* 0x9608 */ int partyTimer;
  /* 0x960c */ int restartMatchmakingTimer;
  /* 0x9610 */ int goResumeTime;
  /* 0x9614 */ int hostTimeouts;
  /* 0x9618 */ unsigned char lobbyFlags;
  /* 0x9619 */ char Padding_284[3];
  /* 0x961c */ struct PartyData_s* partyToNotify;
  /* 0x9620 */ BOOL registeredWithArbitration;
  /* 0x9621 */ BOOL rejoining;
  /* 0x9622 */ unsigned char stateMsgBuf[7200];
  /* 0xb242 */ char Padding_285[2];
  /* 0xb244 */ struct PartyStatePacket_s partyStatePackets[6];
  /* 0xb2a4 */ unsigned char lastEntries[8];
  /* 0xb2ac */ int currentEntry;
  /* 0xb2b0 */ int lastQosEntry;
  /* 0xb2b4 */ BOOL qosDataReady;
  /* 0xb2b5 */ char Padding_286[3];
  /* 0xb2b8 */ int lobbyBeginTime;
  /* 0xb2bc */ BOOL stateParsed;
  /* 0xb2bd */ char Padding_287[3];
  /* 0xb2c0 */ int soundEvents;
  /* 0xb2c4 */ int hostChangelist;
  /* 0xb2c8 */ int partyStartTimeMs;
  /* 0xb2cc */ int nextChallengeSend;
  /* 0xb2d0 */ unsigned int serverChallenge;
  /* 0xb2d4 */ long __PADDING__[1];
}; /* size: 0xb2d8 */

class std::bad_exception
{
}; /* size: 0x000c */

class bdTeamInfo
{
  /* 0x0000 */ long Padding_288[2];
  /* 0x0008 */ unsigned __int64 m_teamID;
  /* 0x0010 */ unsigned __int64 m_ownerUserID;
  /* 0x0018 */ char m_teamName[64];
  /* 0x0058 */ unsigned char m_memberStatus;
}; /* size: 0x0060 */

class bdLinkedList<bdPendingBufferTransfer>::Node
{
  /* 0x0000 */ class bdPendingBufferTransfer m_data;
  /* 0x0014 */ class bdLinkedList<bdPendingBufferTransfer>::Node* m_next;
  /* 0x0018 */ class bdLinkedList<bdPendingBufferTransfer>::Node* m_prev;
}; /* size: 0x001c */

typedef struct _s__RTTIBaseClassArray
{
  union
  {
    /* 0x0000 */ const struct _s__RTTIBaseClassDescriptor2** arrayOfBaseClassDescriptors /* zero-length array */;
    /* 0x0000 */ char __PADDING__[1];
  }; /* size: 0x0001 */
} s__RTTIBaseClassArray, *Ps__RTTIBaseClassArray; /* size: 0x0001 */

struct SndSpeakerPair
{
  /* 0x0000 */ int leftIndex;
  /* 0x0004 */ int rightIndex;
  /* 0x0008 */ float xform[4];
}; /* size: 0x0018 */

struct GenericEventHandler
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ struct GenericEventScript* eventScript;
  /* 0x0008 */ struct GenericEventHandler* next;
}; /* size: 0x000c */

struct expressionRpn
{
  /* 0x0000 */ int type;
  /* 0x0004 */ union expressionRpnDataUnion data;
}; /* size: 0x000c */

struct ddlHash_t
{
  /* 0x0000 */ int hash;
  /* 0x0004 */ int index;
}; /* size: 0x0008 */

struct HunkUser
{
  /* 0x0000 */ enum HU_ALLOCATION_SCHEME scheme;
  /* 0x0004 */ unsigned long flags;
  /* 0x0008 */ const char* name;
  /* 0x000c */ int type;
}; /* size: 0x0010 */

struct snd_occlusion_multiple
{
  /* 0x0000 */ struct SndOcclusionTrace* traces;
  /* 0x0004 */ unsigned int traceCount;
  /* 0x0008 */ unsigned int traceSequence;
  /* 0x000c */ unsigned int* lastTraceSequence;
  /* 0x0010 */ unsigned int* occlusionTraceCount;
  /* 0x0014 */ unsigned int* occlusionVoiceCount;
  /* 0x0018 */ unsigned int* occlusionUsec;
}; /* size: 0x001c */

struct jqBatchGroup
{
  union
  {
    struct
    {
      /* 0x0000 */ int QueuedBatchCount;
      /* 0x0004 */ int ExecutingBatchCount;
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned __int64 BatchCount;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct jqModule
{
  /* 0x0000 */ const char* Name;
  /* 0x0004 */ enum jqWorkerType Type;
  /* 0x0008 */ void* Code /* function */;
  /* 0x000c */ long Padding_289;
  /* 0x0010 */ struct jqBatchGroup Group;
  /* 0x0018 */ unsigned __int64 Ticks;
  /* 0x0020 */ unsigned short Calls;
  /* 0x0022 */ unsigned short Requeues;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

class bdFeatureBanInfo
{
  /* 0x0000 */ long Padding_290[2];
  /* 0x0008 */ unsigned __int64 m_category;
  /* 0x0010 */ unsigned int m_secondsRemaining;
}; /* size: 0x0018 */

struct PhysPreset
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int flags;
  /* 0x0008 */ float mass;
  /* 0x000c */ float bounce;
  /* 0x0010 */ float friction;
  /* 0x0014 */ float bulletForceScale;
  /* 0x0018 */ float explosiveForceScale;
  /* 0x001c */ const char* sndAliasPrefix;
  /* 0x0020 */ float piecesSpreadFraction;
  /* 0x0024 */ float piecesUpwardVelocity;
  /* 0x0028 */ int canFloat;
  /* 0x002c */ float gravityScale;
  /* 0x0030 */ union vec3_t centerOfMassOffset;
  /* 0x003c */ union vec3_t buoyancyBoxMin;
  /* 0x0048 */ union vec3_t buoyancyBoxMax;
}; /* size: 0x0054 */

struct profileMultiDef_s
{
  /* 0x0000 */ const char* profileVarList[32];
  /* 0x0080 */ const char* profileVarStr[32];
  /* 0x0100 */ float profileVarValue[32];
  /* 0x0180 */ int count;
  /* 0x0184 */ int actionOnEnterPressOnly;
  /* 0x0188 */ int strDef;
}; /* size: 0x018c */

struct TurretInfo
{
  /* 0x0000 */ BOOL inuse;
  /* 0x0001 */ char Padding_291[3];
  /* 0x0004 */ int state;
  /* 0x0008 */ int flags;
  /* 0x000c */ int fireTime;
  /* 0x0010 */ class EntHandle manualTarget;
  /* 0x0014 */ class EntHandle target;
  /* 0x0018 */ union vec3_t targetPos;
  /* 0x0024 */ int targetTime;
  /* 0x0028 */ union vec3_t missOffsetNormalized;
  /* 0x0034 */ float arcmin[2];
  /* 0x003c */ float arcmax[2];
  /* 0x0044 */ float initialYawmin;
  /* 0x0048 */ float initialYawmax;
  /* 0x004c */ float forwardAngleDot;
  /* 0x0050 */ float dropPitch;
  /* 0x0054 */ float scanningPitch;
  /* 0x0058 */ int convergenceTime[2];
  /* 0x0060 */ int suppressTime;
  /* 0x0064 */ float maxRangeSquared;
  /* 0x0068 */ class SentientHandle detachSentient;
  /* 0x006c */ int stance;
  /* 0x0070 */ int prevStance;
  /* 0x0074 */ int fireSndDelay;
  /* 0x0078 */ float accuracy;
  /* 0x007c */ union vec3_t userOrigin;
  /* 0x0088 */ int prevSentTarget;
  /* 0x008c */ float aiSpread;
  /* 0x0090 */ float playerSpread;
  /* 0x0094 */ enum team_t eTeam;
  /* 0x0098 */ float heatVal;
  /* 0x009c */ BOOL overheating;
  /* 0x009d */ char Padding_292[3];
  /* 0x00a0 */ int fireBarrel;
  /* 0x00a4 */ float scanSpeed;
  /* 0x00a8 */ float scanDecelYaw;
  /* 0x00ac */ int scanPauseTime;
  /* 0x00b0 */ union vec3_t originError;
  /* 0x00bc */ union vec3_t anglesError;
  /* 0x00c8 */ float pitchCap;
  /* 0x00cc */ int triggerDown;
  /* 0x00d0 */ unsigned int fireSnd;
  /* 0x00d4 */ unsigned int fireSndPlayer;
  /* 0x00d8 */ unsigned int startFireSnd;
  /* 0x00dc */ unsigned int startFireSndPlayer;
  /* 0x00e0 */ unsigned int loopFireEnd;
  /* 0x00e4 */ unsigned int loopFireEndPlayer;
  /* 0x00e8 */ unsigned int rotateLoopSnd;
  /* 0x00ec */ unsigned int rotateLoopSndPlayer;
  /* 0x00f0 */ unsigned int rotateStopSnd;
  /* 0x00f4 */ unsigned int rotateStopSndPlayer;
  /* 0x00f8 */ int sndIsFiring;
  /* 0x00fc */ union vec3_t targetOffset;
  /* 0x0108 */ float onTargetAngle;
  /* 0x010c */ enum TurretRotateState turretRotateState;
  /* 0x0110 */ union vec3_t previousAngles;
}; /* size: 0x011c */

struct ZBarrierPieceAnims
{
  /* 0x0000 */ struct XAnimTree_s* pAnimTree;
}; /* size: 0x0004 */

struct ZBarrierType
{
  /* 0x0000 */ unsigned char serverIndex;
  /* 0x0001 */ unsigned char clientIndex;
  /* 0x0002 */ char Padding_293[2];
  /* 0x0004 */ struct ZBarrierDef* zbarrierDef;
  /* 0x0008 */ struct ZBarrierPieceAnims clientAnims[6];
  /* 0x0020 */ struct ZBarrierPieceAnims serverAnims[6];
  /* 0x0038 */ int boardModelIndex[6];
  /* 0x0050 */ int upgradedBoardModelIndex[6];
  /* 0x0068 */ int alternateBoardModelIndex[6];
}; /* size: 0x0080 */

class bdUserGroups
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

struct DestructibleBurnData
{
  /* 0x0000 */ int burnTime;
  /* 0x0004 */ unsigned int fx;
  /* 0x0008 */ int sndId;
}; /* size: 0x000c */

struct DESTRUCTIBLE_PIECE_INFO
{
  /* 0x0000 */ short health;
  /* 0x0002 */ char Padding_294[2];
  /* 0x0004 */ int xdollHandle;
  /* 0x0008 */ unsigned int fx;
  /* 0x000c */ struct DestructibleBurnData burnData;
}; /* size: 0x0018 */

class bdDML
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

struct EHExceptionRecord::EHParameters
{
  /* 0x0000 */ unsigned long magicNumber;
  /* 0x0004 */ void* pExceptionObject;
  /* 0x0008 */ const struct _s_ThrowInfo* pThrowInfo;
}; /* size: 0x000c */

struct EHExceptionRecord
{
  /* 0x0000 */ unsigned long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ struct _EXCEPTION_RECORD* ExceptionRecord;
  /* 0x000c */ void* ExceptionAddress;
  /* 0x0010 */ unsigned long NumberParameters;
  /* 0x0014 */ struct EHExceptionRecord::EHParameters params;
}; /* size: 0x0020 */

struct float44
{
  union
  {
    /* 0x0000 */ union vec4_t m[4];
    /* 0x0000 */ float member[16];
  }; /* size: 0x0040 */
}; /* size: 0x0040 */

class bdSubscription
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

class bdRichPresenceService
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

struct geom_plane
{
  /* 0x0000 */ class phys_vec3 m_normal;
  /* 0x0010 */ class phys_vec3 m_arm;
  /* 0x0020 */ float m_d;
  /* 0x0024 */ float m_lambda;
  /* 0x0028 */ float m_right_side;
  /* 0x002c */ BOOL m_active;
  /* 0x002d */ BOOL m_walkable;
  /* 0x002e */ BOOL m_no_push_out;
  /* 0x002f */ char __PADDING__[1];
}; /* size: 0x0030 */

struct path_trim_t
{
  /* 0x0000 */ int iIndex;
  /* 0x0004 */ int iDelta;
}; /* size: 0x0008 */

struct potential_threat_t
{
  /* 0x0000 */ BOOL isEnabled;
  /* 0x0001 */ char Padding_295[3];
  /* 0x0004 */ union vec2_t direction;
}; /* size: 0x000c */

class bdNATTravListener
{
}; /* size: 0x0004 */

struct ID3D11HullShader
{
}; /* size: 0x0004 */

struct ActorTurret
{
  /* 0x0000 */ struct gentity_t* pTurret;
  /* 0x0004 */ unsigned short turretAnim;
  /* 0x0006 */ unsigned char turretAnimSet;
  /* 0x0007 */ char __PADDING__[1];
}; /* size: 0x0008 */

struct PhysGeomInfo
{
  /* 0x0000 */ struct BrushWrapper* brush;
  /* 0x0004 */ int type;
  /* 0x0008 */ union vec3_t orientation[3];
  /* 0x002c */ union vec3_t offset;
  /* 0x0038 */ union vec3_t halfLengths;
}; /* size: 0x0044 */

class phys_inplace_avl_tree<unsigned int,generic_avl_map_node_t,generic_avl_map_node_t>
{
  /* 0x0000 */ struct generic_avl_map_node_t* m_tree_root;
}; /* size: 0x0004 */

class bdStats
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

struct ActorSuppression
{
  /* 0x0000 */ int ignoreSuppression;
  /* 0x0004 */ int suppressionWait;
  /* 0x0008 */ int suppressionDuration;
  /* 0x000c */ int suppressionStartTime;
  /* 0x0010 */ float suppressionMeter;
}; /* size: 0x0014 */

struct XModelCollSurf_s
{
  /* 0x0000 */ struct XModelCollTri_s* collTris;
  /* 0x0004 */ int numCollTris;
  /* 0x0008 */ union vec3_t mins;
  /* 0x0014 */ union vec3_t maxs;
  /* 0x0020 */ int boneIdx;
  /* 0x0024 */ int contents;
  /* 0x0028 */ int surfFlags;
}; /* size: 0x002c */

struct tagTLIBATTR
{
  /* 0x0000 */ struct _GUID guid;
  /* 0x0010 */ unsigned long lcid;
  /* 0x0014 */ enum tagSYSKIND syskind;
  /* 0x0018 */ unsigned short wMajorVerNum;
  /* 0x001a */ unsigned short wMinorVerNum;
  /* 0x001c */ unsigned short wLibFlags;
  /* 0x001e */ char __PADDING__[2];
}; /* size: 0x0020 */

class bdSecurityKeyMapListener
{
}; /* size: 0x0004 */

class short4
{
  /* 0x0000 */ short x;
  /* 0x0002 */ short y;
  /* 0x0004 */ short z;
  /* 0x0006 */ short w;
}; /* size: 0x0008 */

class bdMatchMaking
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

class bdDMLHierarchicalInfo
{
  /* 0x0000 */ long Padding_296[69];
  /* 0x0114 */ unsigned int m_tier0;
  /* 0x0118 */ unsigned int m_tier1;
  /* 0x011c */ unsigned int m_tier2;
  /* 0x0120 */ unsigned int m_tier3;
}; /* size: 0x0124 */

struct trDebugLine_t
{
  /* 0x0000 */ union vec3_t start;
  /* 0x000c */ union vec3_t end;
  /* 0x0018 */ union vec4_t color;
  /* 0x0028 */ int depthTest;
}; /* size: 0x002c */

class bdFastArray<unsigned char>
{
  /* 0x0000 */ unsigned char* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

typedef struct _XMUSHORT4
{
  /* 0x0000 */ unsigned short x;
  /* 0x0002 */ unsigned short y;
  /* 0x0004 */ unsigned short z;
  /* 0x0006 */ unsigned short w;
} XMUSHORT4, *PXMUSHORT4; /* size: 0x0008 */

typedef struct _jqBatch
{
} jqBatch, *PjqBatch; /* size: 0x0001 */

struct jqBatch
{
  /* 0x0000 */ void* p3x_info;
  /* 0x0004 */ void* Input;
  /* 0x0008 */ void* Output;
  /* 0x000c */ struct jqModule* Module;
  /* 0x0010 */ struct jqBatchGroup* GroupID;
  /* 0x0014 */ void* ConditionalAddress;
  /* 0x0018 */ unsigned int ConditionalValue;
  /* 0x001c */ unsigned int ParamData[55];
  /* 0x00f8 */ struct _jqBatch _Batch;
  /* 0x00f9 */ char __PADDING__[3];
}; /* size: 0x00fc */

class bdQoSProbeListener
{
}; /* size: 0x0004 */

struct GfxCmdBuf
{
  /* 0x0000 */ struct ID3D11DeviceContext* device;
  /* 0x0004 */ struct ID3D11CommandList** commandList;
  /* 0x0008 */ unsigned short viewIndex;
  /* 0x000a */ unsigned short deviceIndex;
}; /* size: 0x000c */

struct cbrush_t
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ int contents;
  /* 0x0010 */ union vec3_t maxs;
  /* 0x001c */ unsigned int numsides;
  /* 0x0020 */ struct cbrushside_t* sides;
  /* 0x0024 */ int axial_cflags[3][2];
  /* 0x003c */ int axial_sflags[3][2];
  /* 0x0054 */ unsigned int numverts;
  /* 0x0058 */ union vec3_t* verts;
  /* 0x005c */ long __PADDING__[1];
}; /* size: 0x0060 */

class bdPooledStorage
{
  /* 0x0000 */ long Padding_297[2318];
  /* 0x2438 */ unsigned __int64 m_pooledStoragefileID;
  /* 0x2440 */ BOOL m_fileIDReady;
}; /* size: 0x2448 */

struct CompositeEmblemLayer
{
  /* 0x0000 */ short icon;
  /* 0x0002 */ char Padding_298[2];
  /* 0x0004 */ union vec4_t color;
  /* 0x0014 */ union vec2_t pos;
  /* 0x001c */ union vec2_t scale;
  /* 0x0024 */ float angle;
  /* 0x0028 */ BOOL outline;
  /* 0x0029 */ BOOL flip;
  /* 0x002a */ char __PADDING__[2];
}; /* size: 0x002c */

struct BGDefaultEmblem
{
  /* 0x0000 */ int minlevel;
  /* 0x0004 */ int maxlevel;
  /* 0x0008 */ struct CompositeEmblemLayer layers[32];
  /* 0x0588 */ int layerCount;
}; /* size: 0x058c */

struct actorAntilagFrame_t
{
  /* 0x0000 */ union vec3_t position[32];
  /* 0x0180 */ union vec3_t angles[32];
  /* 0x0300 */ unsigned char useCount[32];
  /* 0x0320 */ unsigned char inUse[32];
  /* 0x0340 */ int time;
}; /* size: 0x0344 */

struct Font_s
{
  /* 0x0000 */ const char* fontName;
  /* 0x0004 */ int pixelHeight;
  /* 0x0008 */ int isScalingAllowed;
  /* 0x000c */ int glyphCount;
  /* 0x0010 */ int kerningPairsCount;
  /* 0x0014 */ struct Material* material;
  /* 0x0018 */ struct Material* glowMaterial;
  /* 0x001c */ struct Glyph* glyphs;
  /* 0x0020 */ struct KerningPairs* kerningPairs;
}; /* size: 0x0024 */

struct CD3D10_TEXTURE2D_DESC
{
}; /* size: 0x002c */

struct PhysGeomList
{
  /* 0x0000 */ unsigned int count;
  /* 0x0004 */ struct PhysGeomInfo* geoms;
  /* 0x0008 */ int contents;
}; /* size: 0x000c */

typedef struct _XMICO4
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ __int64 x : 20; /* bit position: 0 */
      /* 0x0000 */ __int64 y : 20; /* bit position: 20 */
      /* 0x0000 */ __int64 z : 20; /* bit position: 40 */
      /* 0x0000 */ __int64 w : 4; /* bit position: 60 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 v;
  }; /* size: 0x0008 */
} XMICO4, *PXMICO4; /* size: 0x0008 */

struct Glyph
{
  /* 0x0000 */ unsigned short letter;
  /* 0x0002 */ char x0;
  /* 0x0003 */ char y0;
  /* 0x0004 */ unsigned char dx;
  /* 0x0005 */ unsigned char pixelWidth;
  /* 0x0006 */ unsigned char pixelHeight;
  /* 0x0007 */ char Padding_299;
  /* 0x0008 */ float s0;
  /* 0x000c */ float t0;
  /* 0x0010 */ float s1;
  /* 0x0014 */ float t1;
}; /* size: 0x0018 */

class LinkedList<FixedSizeAllocator<GlassPhysics>::Block *>
{
  /* 0x0000 */ struct FixedSizeAllocator<GlassPhysics>::Block* head;
}; /* size: 0x0004 */

class FixedSizeAllocator<GlassPhysics>
{
  /* 0x0000 */ void* memory;
  /* 0x0004 */ class LinkedList<FixedSizeAllocator<GlassPhysics>::Block *> freeList;
  /* 0x0008 */ class LinkedList<FixedSizeAllocator<GlassPhysics>::Block *> usedList;
  /* 0x000c */ unsigned int size;
  /* 0x0010 */ unsigned int used;
  /* 0x0014 */ unsigned int maxUsed;
  /* 0x0018 */ unsigned int magic;
}; /* size: 0x001c */

struct KerningPairs
{
  /* 0x0000 */ unsigned short wFirst;
  /* 0x0002 */ unsigned short wSecond;
  /* 0x0004 */ int iKernAmount;
}; /* size: 0x0008 */

struct SndAliasList
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int id;
  /* 0x0008 */ struct SndAlias* head;
  /* 0x000c */ int count;
  /* 0x0010 */ int sequence;
}; /* size: 0x0014 */

struct ddlMemberDef_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int size;
  /* 0x0008 */ int offset;
  /* 0x000c */ int type;
  /* 0x0010 */ int externalIndex;
  /* 0x0014 */ unsigned int rangeLimit;
  /* 0x0018 */ unsigned int serverDelta;
  /* 0x001c */ unsigned int clientDelta;
  /* 0x0020 */ int arraySize;
  /* 0x0024 */ int enumIndex;
  /* 0x0028 */ int permission;
}; /* size: 0x002c */

struct GfxLightImage
{
  /* 0x0000 */ struct GfxImage* image;
  /* 0x0004 */ unsigned char samplerState;
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

struct GfxLightDef
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ struct GfxLightImage attenuation;
  /* 0x000c */ int lmapLookupStart;
}; /* size: 0x0010 */

struct SndAlias
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int id;
  /* 0x0008 */ const char* subtitle;
  /* 0x000c */ const char* secondaryname;
  /* 0x0010 */ unsigned int assetId;
  /* 0x0014 */ const char* assetFileName;
  /* 0x0018 */ unsigned int flags0;
  /* 0x001c */ unsigned int flags1;
  /* 0x0020 */ unsigned int duck;
  /* 0x0024 */ unsigned int contextType;
  /* 0x0028 */ unsigned int contextValue;
  /* 0x002c */ unsigned int stopOnPlay;
  /* 0x0030 */ unsigned int futzPatch;
  /* 0x0034 */ unsigned short fluxTime;
  /* 0x0036 */ unsigned short startDelay;
  /* 0x0038 */ unsigned short reverbSend;
  /* 0x003a */ unsigned short centerSend;
  /* 0x003c */ unsigned short volMin;
  /* 0x003e */ unsigned short volMax;
  /* 0x0040 */ unsigned short pitchMin;
  /* 0x0042 */ unsigned short pitchMax;
  /* 0x0044 */ unsigned short distMin;
  /* 0x0046 */ unsigned short distMax;
  /* 0x0048 */ unsigned short distReverbMax;
  /* 0x004a */ unsigned short envelopMin;
  /* 0x004c */ unsigned short envelopMax;
  /* 0x004e */ unsigned short envelopPercentage;
  /* 0x0050 */ short fadeIn;
  /* 0x0052 */ short fadeOut;
  /* 0x0054 */ short dopplerScale;
  /* 0x0056 */ unsigned char minPriorityThreshold;
  /* 0x0057 */ unsigned char maxPriorityThreshold;
  /* 0x0058 */ unsigned char probability;
  /* 0x0059 */ unsigned char occlusionLevel;
  /* 0x005a */ unsigned char minPriority;
  /* 0x005b */ unsigned char maxPriority;
  /* 0x005c */ unsigned char pan;
  /* 0x005d */ unsigned char limitCount;
  /* 0x005e */ unsigned char entityLimitCount;
  /* 0x005f */ unsigned char duckGroup;
}; /* size: 0x0060 */

class bdArray<bdString>
{
  /* 0x0000 */ class bdString* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

struct FxTrailDef
{
  /* 0x0000 */ int scrollTimeMsec;
  /* 0x0004 */ int repeatDist;
  /* 0x0008 */ int splitDist;
  /* 0x000c */ int vertCount;
  union
  {
    /* 0x0010 */ struct FxTrailVertex* vertsEA;
    /* 0x0010 */ struct FxTrailVertex* verts;
  }; /* size: 0x0004 */
  /* 0x0014 */ int indCount;
  union
  {
    /* 0x0018 */ unsigned short* indsEA;
    /* 0x0018 */ unsigned short* inds;
  }; /* size: 0x0004 */
}; /* size: 0x001c */

class bdSingleton<bdSingletonRegistryImpl>
{
  /* 0x0000 */ class bdSingletonRegistryImpl* m_instance;
}; /* size: 0x0001 */

struct FxSpotLightDef
{
  /* 0x0000 */ float fovInnerFraction;
  /* 0x0004 */ float startRadius;
  /* 0x0008 */ float endRadius;
}; /* size: 0x000c */

struct tagCAFILETIME
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ struct _FILETIME* pElems;
}; /* size: 0x0008 */

struct SessionData
{
  /* 0x0000 */ struct SessionStaticData staticData;
  /* 0x0008 */ struct SessionDynamicData dyn;
}; /* size: 0x0790 */

union PackedTexCoords
{
  /* 0x0000 */ unsigned int packed;
}; /* size: 0x0004 */

struct GfxPackedVertex
{
  /* 0x0000 */ union vec3_t xyz;
  /* 0x000c */ float binormalSign;
  /* 0x0010 */ union GfxColor color;
  /* 0x0014 */ union PackedTexCoords texCoord;
  /* 0x0018 */ union PackedUnitVec normal;
  /* 0x001c */ union PackedUnitVec tangent;
}; /* size: 0x0020 */

class bdLobbyService
{
  /* 0x0000 */ long Padding_300;
  /* 0x0004 */ class bdRemoteTaskManager* m_taskManager;
  /* 0x0008 */ class bdProfiles* m_profiles;
  /* 0x000c */ class bdMessaging* m_messaging;
  /* 0x0010 */ class bdMatchMaking* m_matchMaking;
  /* 0x0014 */ class bdStats* m_statsManager;
  /* 0x0018 */ class bdFriends* m_friendsManager;
  /* 0x001c */ class bdTeams* m_teamsManager;
  /* 0x0020 */ class bdStorage* m_storageManager;
  /* 0x0024 */ class bdContentUnlock* m_contentUnlockManager;
  /* 0x0028 */ class bdTitleUtilities* m_titleUtilitiesManager;
  /* 0x002c */ class bdEventLog* m_eventLogManager;
  /* 0x0030 */ class bdKeyArchive* m_keyArchive;
  /* 0x0034 */ class bdCounter* m_counter;
  /* 0x0038 */ class bdGroup* m_group;
  /* 0x003c */ class bdContentStreaming* m_contentStreamingManager;
  /* 0x0040 */ class bdPooledStorage* m_pooledStorageManager;
  /* 0x0044 */ class bdTags* m_tags;
  /* 0x0048 */ class bdVoteRank* m_voteRankManager;
  /* 0x004c */ class bdTwitch* m_twitch;
  /* 0x0050 */ class bdYouTube* m_youTube;
  /* 0x0054 */ class bdTwitter* m_twitter;
  /* 0x0058 */ class bdFacebook* m_facebook;
  /* 0x005c */ class bdLinkCode* m_linkCode;
  /* 0x0060 */ class bdAntiCheat* m_antiCheat;
  /* 0x0064 */ class bdDML* m_DML;
  /* 0x0068 */ class bdUCD* m_UCD;
  /* 0x006c */ class bdUserGroups* m_userGroups;
  /* 0x0070 */ class bdRichPresenceService* m_richPresence;
  /* 0x0074 */ class bdMarketplace* m_marketplace;
  /* 0x0078 */ class bdCommerce* m_commerce;
  /* 0x007c */ class bdSubscription* m_subscription;
  /* 0x0080 */ class bdFeatureBan* m_featureBan;
  /* 0x0084 */ class bdTencent* m_tencent;
  /* 0x0088 */ class bdLeague* m_league;
  /* 0x008c */ long Padding_301;
  /* 0x0090 */ class bdGetHostByName m_LSGLookup;
  /* 0x00c8 */ char* m_LSGAddress;
  /* 0x00cc */ unsigned short m_LSGPort;
  /* 0x00ce */ char Padding_302[2];
  /* 0x00d0 */ class bdAddr m_resolvedLSGAddress;
  /* 0x00d8 */ BOOL m_isResolved;
  /* 0x00d9 */ char Padding_303[3];
  /* 0x00dc */ unsigned int m_titleID;
  /* 0x00e0 */ class bdLobbyEventHandler* m_eventHandler;
  /* 0x00e4 */ class bdReference<bdLobbyConnection> m_lobbyConnection;
  /* 0x00e8 */ BOOL m_lobbyConnectionEstablished;
  /* 0x00e9 */ char Padding_304[3];
  /* 0x00ec */ class bdAuthInfo m_authInfo;
  /* 0x018c */ BOOL m_encryptedConnection;
  /* 0x018d */ char Padding_305[3];
  /* 0x0190 */ unsigned int m_errorCode;
}; /* size: 0x0198 */

class bdRandom
{
  union
  {
    /* 0x0000 */ unsigned int m_val;
    /* 0x0000 */ const int a;
    /* 0x0000 */ const int m;
    /* 0x0000 */ const int q;
    /* 0x0000 */ const int r;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct ai_animation_funcs_t
{
  /* 0x0000 */ void* pfnStart /* function */;
  /* 0x0004 */ void* pfnThink /* function */;
  /* 0x0008 */ void* pfnLength /* function */;
  /* 0x000c */ void* pfnSetAtEnd /* function */;
}; /* size: 0x0010 */

class SmpScriptString_CriticalSectionBlock
{
  /* 0x0000 */ enum CriticalSection mCS;
}; /* size: 0x0004 */

struct tagDISPPARAMS
{
  /* 0x0000 */ struct tagVARIANT* rgvarg;
  /* 0x0004 */ long* rgdispidNamedArgs;
  /* 0x0008 */ unsigned int cArgs;
  /* 0x000c */ unsigned int cNamedArgs;
}; /* size: 0x0010 */

union Prng_state
{
  union
  {
    /* 0x0000 */ char dummy[1];
    /* 0x0000 */ struct yarrow_prng yarrow;
  }; /* size: 0x11e4 */
}; /* size: 0x11e4 */

class bdFastArray<__int64>
{
  /* 0x0000 */ __int64* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

struct DpvsPlane
{
  /* 0x0000 */ union vec4_t coeffs;
  /* 0x0010 */ unsigned char side[3];
  /* 0x0013 */ unsigned char pad;
}; /* size: 0x0014 */

struct DpvsView
{
  /* 0x0000 */ unsigned int renderFxFlagsCull;
  /* 0x0004 */ struct DpvsPlane frustumPlanes[14];
  /* 0x011c */ int frustumPlaneCount;
}; /* size: 0x0120 */

struct vis_cache_t
{
  /* 0x0000 */ BOOL bVisible;
  /* 0x0001 */ char Padding_306[3];
  /* 0x0004 */ int iLastUpdateTime;
  /* 0x0008 */ int iLastVisTime;
}; /* size: 0x000c */

struct sentient_info_t
{
  /* 0x0000 */ struct vis_cache_t VisCache;
  /* 0x000c */ int iLastAttackMeTime;
  /* 0x0010 */ int lastKnownPosTime;
  /* 0x0014 */ int attackTime;
  /* 0x0018 */ BOOL surprised;
  /* 0x0019 */ char Padding_307[3];
  /* 0x001c */ union vec3_t vLastKnownPos;
  /* 0x0028 */ struct pathnode_t* pLastKnownNode;
  /* 0x002c */ int iPathTestTime;
  /* 0x0030 */ BOOL bPathTestResult;
  /* 0x0031 */ char __PADDING__[3];
}; /* size: 0x0034 */

struct bot_goal_t
{
  /* 0x0000 */ union vec3_t position;
  /* 0x000c */ struct pathnode_t* node;
  /* 0x0010 */ float radius;
  /* 0x0014 */ int time;
  /* 0x0018 */ unsigned short notify;
  /* 0x001a */ char Padding_308[2];
  /* 0x001c */ enum BotGoalPriority priority;
}; /* size: 0x0020 */

struct bot_aim_t
{
  /* 0x0000 */ union Weapon grenadeWeapon;
  /* 0x0004 */ union vec3_t grenadeOrigin;
  /* 0x0010 */ int grenadeTime;
}; /* size: 0x0014 */

struct pathpoint_t
{
  /* 0x0000 */ union vec3_t vOrigPoint;
  /* 0x000c */ union vec2_t fDir2D;
  /* 0x0014 */ float fOrigLength;
  /* 0x0018 */ int iNodeNum;
}; /* size: 0x001c */

struct path_t
{
  /* 0x0000 */ struct pathpoint_t pts[32];
  /* 0x0380 */ short wPathLen;
  /* 0x0382 */ short wOrigPathLen;
  /* 0x0384 */ short wDodgeCount;
  /* 0x0386 */ short wNegotiationStartNode;
  /* 0x0388 */ short lookaheadNextNode;
  /* 0x038a */ short pathChangeNotifyNode;
  /* 0x038c */ short wDodgeEntity;
  /* 0x038e */ char Padding_309[2];
  /* 0x0390 */ union vec3_t vFinalGoal;
  /* 0x039c */ union vec3_t vStartPos;
  /* 0x03a8 */ union vec3_t lookaheadDir;
  /* 0x03b4 */ union vec3_t lookaheadPos;
  /* 0x03c0 */ float fLookaheadDist;
  /* 0x03c4 */ float fLookaheadAmount;
  /* 0x03c8 */ float fLookaheadDistToNextNode;
  /* 0x03cc */ int minLookAheadNodes;
  /* 0x03d0 */ int flags;
  /* 0x03d4 */ int iPathTime;
  /* 0x03d8 */ int iPathClearedTime;
  /* 0x03dc */ enum team_t eTeam;
  /* 0x03e0 */ float fCurrLength;
  /* 0x03e4 */ union vec3_t vCurrPoint;
  /* 0x03f0 */ int iPathEndTime;
  /* 0x03f4 */ float pathEndAnimDistSq;
  /* 0x03f8 */ BOOL pathEndAnimNotified;
  /* 0x03f9 */ BOOL lookaheadHitsStairs;
  /* 0x03fa */ BOOL useChokePoints;
  /* 0x03fb */ char Padding_310;
  /* 0x03fc */ union vec2_t pathChangeTracePos;
  /* 0x0404 */ int randomPercent;
  /* 0x0408 */ int owner;
  /* 0x040c */ float physRadius;
  /* 0x0410 */ float physHeight;
}; /* size: 0x0414 */

struct bot_t
{
  /* 0x0000 */ struct gentity_t* ent;
  /* 0x0004 */ struct bot_goal_t goals[4];
  /* 0x0084 */ struct bot_aim_t aim;
  /* 0x0098 */ struct bot_steering_t steering;
  /* 0x00b8 */ struct path_t path;
  /* 0x04cc */ union vec3_t vLookAt;
  /* 0x04d8 */ struct pathnode_t* failsafe;
  /* 0x04dc */ union Weapon weapon;
  /* 0x04e0 */ enum BotStance stance;
  /* 0x04e4 */ int useButtonEndTime;
  /* 0x04e8 */ int weaponDelayEndTime;
  /* 0x04ec */ int lastMoveTime;
  /* 0x04f0 */ int grenadeTime;
  /* 0x04f4 */ union vec3_t kickAngles;
  /* 0x0500 */ union vec3_t kickAVel;
  /* 0x050c */ short flags;
  /* 0x050e */ char __PADDING__[2];
}; /* size: 0x0510 */

class bdContentUnlock
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

struct ai_suppression_t
{
  /* 0x0000 */ int iTime;
  /* 0x0004 */ struct sentient_t* pSuppressor;
  /* 0x0008 */ union vec3_t clipPlane;
  /* 0x0014 */ int movementOnly;
}; /* size: 0x0018 */

struct scrVarGlob_t
{
  /* 0x0000 */ struct ObjectVariableValue* objectVariableValue;
  /* 0x0004 */ long Padding_311[31];
  /* 0x0080 */ struct ObjectVariableChildren* objectVariableChildren;
  /* 0x0084 */ long Padding_312[31];
  /* 0x0100 */ unsigned short* childVariableBucket;
  /* 0x0104 */ long Padding_313[31];
  /* 0x0180 */ struct ChildVariableValue* childVariableValue;
  /* 0x0184 */ long __PADDING__[31];
}; /* size: 0x0200 */

class bdFriends
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

class bdContentStreaming
{
}; /* size: 0x2438 */

struct ObjectVariableChildren
{
  /* 0x0000 */ unsigned short firstChild;
  /* 0x0002 */ unsigned short lastChild;
}; /* size: 0x0004 */

union VariableUnion
{
  union
  {
    /* 0x0000 */ int intValue;
    /* 0x0000 */ unsigned int uintValue;
    /* 0x0000 */ float floatValue;
    /* 0x0000 */ unsigned int stringValue;
    /* 0x0000 */ const float* vectorValue;
    /* 0x0000 */ unsigned char* codePosValue;
    /* 0x0000 */ unsigned int pointerValue;
    /* 0x0000 */ struct VariableStackBuffer* stackValue;
    /* 0x0000 */ unsigned int entityOffset;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

union ChildBucketMatchKeys
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short name_hi;
      /* 0x0002 */ unsigned short parentId;
    } /* size: 0x0004 */ keys;
    /* 0x0000 */ unsigned int match;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct ChildVariableValue
{
  union
  {
    union
    {
      struct
      {
        /* 0x0000 */ unsigned short prev;
        /* 0x0002 */ unsigned short next;
      } /* size: 0x0004 */ f;
      /* 0x0000 */ union VariableUnion u;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0004 */ unsigned short next;
  /* 0x0006 */ unsigned char type;
  /* 0x0007 */ unsigned char name_lo;
  /* 0x0008 */ union ChildBucketMatchKeys k;
  /* 0x000c */ unsigned short nextSibling;
  /* 0x000e */ unsigned short prevSibling;
}; /* size: 0x0010 */

class colgeom_visitor_inlined_t<300>
{
  /* 0x0000 */ long Padding_314[32];
  /* 0x0080 */ int nprims;
  /* 0x0084 */ BOOL overflow;
  /* 0x0085 */ char Padding_315[3];
  /* 0x0088 */ struct col_prim_t prims[300];
}; /* size: 0x09f0 */

struct vehicle_cache_t
{
  /* 0x0000 */ union vec3_t lastOrigin;
  /* 0x000c */ union vec3_t lastAngles;
  /* 0x0018 */ int hit_indices[6];
  /* 0x0030 */ int hit_sflags[6];
  /* 0x0048 */ union vec3_t hit_normals[6];
  /* 0x0090 */ float hit_fractions[6];
  /* 0x00a8 */ enum TraceHitType hit_type[6];
  /* 0x00c0 */ unsigned short hit_id[6];
  /* 0x00cc */ long Padding_316;
  /* 0x00d0 */ class colgeom_visitor_inlined_t<300> proximity_data;
  /* 0x0ac0 */ int wheel_mask;
  /* 0x0ac4 */ long __PADDING__[3];
}; /* size: 0x0ad0 */

struct WeaponAttachmentUnique
{
  /* 0x0000 */ const char* szInternalName;
  /* 0x0004 */ enum eAttachment attachmentType;
  /* 0x0008 */ int siblingLink;
  /* 0x000c */ int childLink;
  /* 0x0010 */ int combinedAttachmentTypeMask;
  /* 0x0014 */ const char* szAltWeaponName;
  /* 0x0018 */ unsigned int altWeaponIndex;
  /* 0x001c */ const char* szDualWieldWeaponName;
  /* 0x0020 */ unsigned int dualWieldWeaponIndex;
  /* 0x0024 */ unsigned short* hideTags;
  /* 0x0028 */ struct XModel* viewModel;
  /* 0x002c */ struct XModel* viewModelAdditional;
  /* 0x0030 */ struct XModel* viewModelADS;
  /* 0x0034 */ struct XModel* worldModel;
  /* 0x0038 */ struct XModel* worldModelAdditional;
  /* 0x003c */ const char* viewModelTag;
  /* 0x0040 */ const char* worldModelTag;
  /* 0x0044 */ union vec3_t viewModelOffsets;
  /* 0x0050 */ union vec3_t worldModelOffsets;
  /* 0x005c */ union vec3_t viewModelRotations;
  /* 0x0068 */ union vec3_t worldModelRotations;
  /* 0x0074 */ union vec3_t viewModelAddOffsets;
  /* 0x0080 */ union vec3_t worldModelAddOffsets;
  /* 0x008c */ union vec3_t viewModelAddRotations;
  /* 0x0098 */ union vec3_t worldModelAddRotations;
  /* 0x00a4 */ struct WeaponCamo* weaponCamo;
  /* 0x00a8 */ BOOL disableBaseWeaponAttachment;
  /* 0x00a9 */ BOOL disableBaseWeaponClip;
  /* 0x00aa */ BOOL overrideBaseWeaponAttachmentOffsets;
  /* 0x00ab */ char Padding_317;
  /* 0x00ac */ union vec3_t viewModelOffsetBaseAttachment;
  /* 0x00b8 */ union vec3_t worldModelOffsetBaseAttachment;
  /* 0x00c4 */ struct Material* overlayMaterial;
  /* 0x00c8 */ struct Material* overlayMaterialLowRes;
  /* 0x00cc */ enum weapOverlayReticle_t overlayReticle;
  /* 0x00d0 */ int iFirstRaiseTime;
  /* 0x00d4 */ int iAltRaiseTime;
  /* 0x00d8 */ int iAltDropTime;
  /* 0x00dc */ int iReloadAmmoAdd;
  /* 0x00e0 */ int iReloadStartAdd;
  /* 0x00e4 */ BOOL bSegmentedReload;
  /* 0x00e5 */ char Padding_318[3];
  /* 0x00e8 */ const char** szXAnims;
  /* 0x00ec */ int animationOverrides[3];
  /* 0x00f8 */ float* locationDamageMultipliers;
  /* 0x00fc */ int soundOverrides;
  /* 0x0100 */ const char* fireSound;
  /* 0x0104 */ const char* fireSoundPlayer;
  /* 0x0108 */ const char* fireLoopSound;
  /* 0x010c */ const char* fireLoopSoundPlayer;
  /* 0x0110 */ const char* fireLoopEndSound;
  /* 0x0114 */ const char* fireLoopEndSoundPlayer;
  /* 0x0118 */ const char* fireStartSound;
  /* 0x011c */ const char* fireStopSound;
  /* 0x0120 */ const char* fireStartSoundPlayer;
  /* 0x0124 */ const char* fireStopSoundPlayer;
  /* 0x0128 */ const char* fireLastSound;
  /* 0x012c */ const char* fireLastSoundPlayer;
  /* 0x0130 */ const char* fireKillcamSound;
  /* 0x0134 */ const char* fireKillcamSoundPlayer;
  /* 0x0138 */ int effectOverrides;
  /* 0x013c */ const struct FxEffectDef* viewFlashEffect;
  /* 0x0140 */ const struct FxEffectDef* worldFlashEffect;
  /* 0x0144 */ struct TracerDef* tracerType;
  /* 0x0148 */ struct TracerDef* enemyTracerType;
  /* 0x014c */ float adsDofStart;
  /* 0x0150 */ float adsDofEnd;
  /* 0x0154 */ int iAmmoIndex;
  /* 0x0158 */ int iClipIndex;
  /* 0x015c */ BOOL bOverrideLeftHandIK;
  /* 0x015d */ BOOL bOverrideLeftHandProneIK;
  /* 0x015e */ char Padding_319[2];
  /* 0x0160 */ union vec3_t ikLeftHandOffset;
  /* 0x016c */ union vec3_t ikLeftHandRotation;
  /* 0x0178 */ union vec3_t ikLeftHandProneOffset;
  /* 0x0184 */ union vec3_t ikLeftHandProneRotation;
  /* 0x0190 */ float customFloat0;
  /* 0x0194 */ float customFloat1;
  /* 0x0198 */ float customFloat2;
  /* 0x019c */ int customBool0;
  /* 0x01a0 */ int customBool1;
  /* 0x01a4 */ int customBool2;
}; /* size: 0x01a8 */

struct VariableStackBuffer
{
  /* 0x0000 */ unsigned char* pos;
  /* 0x0004 */ unsigned char* creationPos;
  /* 0x0008 */ int waitTime;
  /* 0x000c */ unsigned short size;
  /* 0x000e */ unsigned short bufLen;
  /* 0x0010 */ unsigned short localId;
  /* 0x0012 */ unsigned char buf[1];
  /* 0x0013 */ char __PADDING__[1];
}; /* size: 0x0014 */

struct GfxBloom
{
  /* 0x0000 */ union vec4_t visBloomLevelsRGBYInB;
  /* 0x0010 */ union vec4_t visBloomLevelsRGBYInG;
  /* 0x0020 */ union vec4_t visBloomLevelsRGBYInW;
  /* 0x0030 */ union vec4_t visBloomLevelsRGBYOutB;
  /* 0x0040 */ union vec4_t visBloomLevelsRGBYOutW;
  /* 0x0050 */ union vec4_t visBloomRGBHi;
  /* 0x0060 */ union vec4_t visBloomRGBLo;
  /* 0x0070 */ union vec4_t visBloomYHi;
  /* 0x0080 */ union vec4_t visBloomYLo;
}; /* size: 0x0090 */

struct $_TypeDescriptor$_extraBytes_30
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[30];
}; /* size: 0x0026 */

struct WeaponDobjInfo
{
  /* 0x0000 */ unsigned char numModelMasks;
  /* 0x0001 */ char Padding_320[3];
  /* 0x0004 */ enum WeaponDobjInfo::Slot addingSlot;
  /* 0x0008 */ short lastAddedModel;
  /* 0x000a */ char Padding_321[2];
  /* 0x000c */ struct WeaponDobjInfo::ModelMask modelMasks[8];
}; /* size: 0x008c */

struct WeaponCamoMaterial
{
  /* 0x0000 */ unsigned short replaceFlags;
  /* 0x0002 */ unsigned short numBaseMaterials;
  /* 0x0004 */ struct Material** baseMaterials;
  /* 0x0008 */ struct Material** camoMaterials;
  /* 0x000c */ float shaderConsts[8];
}; /* size: 0x002c */

typedef struct _XMFLOAT3PK
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int xm : 6; /* bit position: 0 */
      /* 0x0000 */ unsigned int xe : 5; /* bit position: 6 */
      /* 0x0000 */ unsigned int ym : 6; /* bit position: 11 */
      /* 0x0000 */ unsigned int ye : 5; /* bit position: 17 */
      /* 0x0000 */ unsigned int zm : 5; /* bit position: 22 */
      /* 0x0000 */ unsigned int ze : 5; /* bit position: 27 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMFLOAT3PK, *PXMFLOAT3PK; /* size: 0x0004 */

struct std::unary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int>
{
}; /* size: 0x0001 */

struct CD3D11_RECT
{
}; /* size: 0x0010 */

typedef struct _is_ctype_compatible
{
  /* 0x0000 */ unsigned long id;
  /* 0x0004 */ int is_clike;
} is_ctype_compatible, *Pis_ctype_compatible; /* size: 0x0008 */

struct setloc_struct
{
  /* 0x0000 */ char* pchLanguage;
  /* 0x0004 */ char* pchCountry;
  /* 0x0008 */ int iLcidState;
  /* 0x000c */ int iPrimaryLen;
  /* 0x0010 */ int bAbbrevLanguage;
  /* 0x0014 */ int bAbbrevCountry;
  /* 0x0018 */ unsigned long lcidLanguage;
  /* 0x001c */ unsigned long lcidCountry;
  /* 0x0020 */ struct tagLC_ID _cacheid;
  /* 0x0026 */ char Padding_322[2];
  /* 0x0028 */ unsigned int _cachecp;
  /* 0x002c */ char _cachein[131];
  /* 0x00af */ char _cacheout[131];
  /* 0x0132 */ char Padding_323[2];
  /* 0x0134 */ struct _is_ctype_compatible _Lcid_c[5];
}; /* size: 0x015c */

struct CD3D11_SHADER_RESOURCE_VIEW_DESC
{
}; /* size: 0x0018 */

struct CD3D11_BOX
{
}; /* size: 0x0018 */

class bdLeagueSubdivisionHistoryResult
{
  /* 0x0000 */ long Padding_324[2];
  /* 0x0008 */ unsigned __int64 m_seasonID;
  /* 0x0010 */ unsigned __int64 m_subdivisionID;
}; /* size: 0x0018 */

typedef struct _XMSHORTN2
{
  /* 0x0000 */ short x;
  /* 0x0002 */ short y;
} XMSHORTN2, *PXMSHORTN2; /* size: 0x0004 */

struct ID3D11Asynchronous
{
}; /* size: 0x0004 */

class bdSemaphore
{
  /* 0x0000 */ void* m_handle;
}; /* size: 0x0004 */

struct ID3D11Query
{
}; /* size: 0x0004 */

struct ID3D11Counter
{
}; /* size: 0x0004 */

struct ActorShoot
{
  /* 0x0000 */ float accuracy;
  /* 0x0004 */ float playerSightAccuracy;
  /* 0x0008 */ unsigned int missCount;
  /* 0x000c */ unsigned int hitCount;
  /* 0x0010 */ float debugLastAccuracy;
  /* 0x0014 */ int lastShotTime;
  /* 0x0018 */ BOOL lastCanShootEnemyResult;
  /* 0x0019 */ char Padding_325[3];
  /* 0x001c */ int lastCanShootEnemyTime;
  /* 0x0020 */ int bPerfectAim;
  /* 0x0024 */ int bIgnoreLocationalDamage;
  /* 0x0028 */ float debugWeaponAccuracy;
}; /* size: 0x002c */

struct tagEXCEPINFO
{
  /* 0x0000 */ unsigned short wCode;
  /* 0x0002 */ unsigned short wReserved;
  /* 0x0004 */ wchar_t* bstrSource;
  /* 0x0008 */ wchar_t* bstrDescription;
  /* 0x000c */ wchar_t* bstrHelpFile;
  /* 0x0010 */ unsigned long dwHelpContext;
  /* 0x0014 */ void* pvReserved;
  /* 0x0018 */ void* pfnDeferredFillIn /* function */;
  /* 0x001c */ long scode;
}; /* size: 0x0020 */

struct $_TypeDescriptor$_extraBytes_26
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[26];
}; /* size: 0x0022 */

struct ActorProne
{
  /* 0x0000 */ unsigned short animProneLow;
  /* 0x0002 */ unsigned short animProneLevel;
  /* 0x0004 */ unsigned short animProneHigh;
  /* 0x0006 */ char Padding_326[2];
  /* 0x0008 */ int bProneOK;
  /* 0x000c */ float fInvProneAnimLowPitch;
  /* 0x0010 */ float fInvProneAnimHighPitch;
  /* 0x0014 */ float fProneLastDiff;
  /* 0x0018 */ unsigned char feetDirection;
  /* 0x0019 */ char __PADDING__[3];
}; /* size: 0x001c */

struct ActorCoverArrivalInfo
{
  /* 0x0000 */ int arrivalNotifyRequested;
  /* 0x0004 */ int animscriptOverrideRunTo;
  /* 0x0008 */ union vec3_t animscriptOverrideRunToPos;
  /* 0x0014 */ union vec2_t offsetIncrement;
  /* 0x001c */ int offsetAdjustCount;
  /* 0x0020 */ float arrivalYaw;
  /* 0x0024 */ class EntHandle scriptedArrivalEnt;
}; /* size: 0x0028 */

class Smp_CriticalSectionBlock
{
  /* 0x0000 */ enum CriticalSection mCS;
}; /* size: 0x0004 */

struct ID3D11Predicate
{
}; /* size: 0x0004 */

class bdTaskByteBuffer
{
  union
  {
    /* 0x0000 */ const unsigned int maxHeaderSize;
    /* 0x0000 */ const unsigned int signatureSize;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_327[6];
  /* 0x001c */ unsigned char* m_taskData;
  /* 0x0020 */ unsigned int m_taskDataSize;
  /* 0x0024 */ unsigned int m_validHeaderSize;
  /* 0x0028 */ unsigned int m_paddingSize;
}; /* size: 0x002c */

class bdLobbyConnectionListener
{
}; /* size: 0x0004 */

struct DestructibleStage
{
  /* 0x0000 */ unsigned short showBone;
  /* 0x0002 */ char Padding_328[2];
  /* 0x0004 */ float breakHealth;
  /* 0x0008 */ float maxTime;
  /* 0x000c */ unsigned int flags;
  /* 0x0010 */ const struct FxEffectDef* breakEffect;
  /* 0x0014 */ const char* breakSound;
  /* 0x0018 */ const char* breakNotify;
  /* 0x001c */ const char* loopSound;
  /* 0x0020 */ struct XModel* spawnModel[3];
  /* 0x002c */ struct PhysPreset* physPreset;
}; /* size: 0x0030 */

class tlThread
{
  /* 0x0000 */ long Padding_329[2];
  /* 0x0008 */ const char* Name;
  /* 0x000c */ int Priority;
  /* 0x0010 */ unsigned int StackSize;
  /* 0x0014 */ unsigned int Flags;
  /* 0x0018 */ unsigned __int64 Handle;
  /* 0x0020 */ int ExitCode;
}; /* size: 0x0028 */

struct scrMemTreePub_t
{
  /* 0x0000 */ char* mt_buffer;
}; /* size: 0x0004 */

class std::reverse_iterator<std::_List_const_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> > > >;

class bdAntiCheatResponses
{
  /* 0x0000 */ long Padding_330;
  /* 0x0004 */ class bdFastArray<unsigned __int64> m_challengeIDs;
  /* 0x0010 */ class bdFastArray<__int64> m_responses;
  /* 0x001c */ unsigned short m_numResponses;
  /* 0x001e */ unsigned char m_logMessage[64];
  /* 0x005e */ char Padding_331[2];
  /* 0x0060 */ unsigned int m_logMessageSize;
}; /* size: 0x0064 */

class bdLeagueSubdivisionInfo
{
  /* 0x0000 */ long Padding_332[2];
  /* 0x0008 */ unsigned __int64 m_subdivisionID;
  /* 0x0010 */ unsigned __int64 m_leagueID;
  /* 0x0018 */ unsigned __int64 m_seasonID;
  /* 0x0020 */ BOOL m_isDefault;
  /* 0x0021 */ char Padding_333[3];
  /* 0x0024 */ unsigned int m_createdTime;
  /* 0x0028 */ unsigned char m_metadata[64];
  /* 0x0068 */ unsigned int m_metadataLength;
}; /* size: 0x0070 */

typedef struct _EXCEPTION_REGISTRATION
{
  /* 0x0000 */ unsigned long prev;
  /* 0x0004 */ unsigned long handler;
} EXCEPTION_REGISTRATION, *PEXCEPTION_REGISTRATION; /* size: 0x0008 */

typedef struct _XMHALF2
{
  /* 0x0000 */ unsigned short x;
  /* 0x0002 */ unsigned short y;
} XMHALF2, *PXMHALF2; /* size: 0x0004 */

class bdChannelInfo
{
  /* 0x0000 */ long Padding_334[2];
  /* 0x0008 */ unsigned __int64 m_channelID;
  /* 0x0010 */ unsigned int m_numSubscribers;
  /* 0x0014 */ unsigned int m_maxSubscribers;
  /* 0x0018 */ unsigned __int64 m_adminID;
  /* 0x0020 */ BOOL m_isPasswordRequired;
  /* 0x0021 */ BOOL m_isPublicChannel;
  /* 0x0022 */ char Padding_335[2];
  /* 0x0024 */ unsigned int m_dataVersion;
}; /* size: 0x0028 */

struct D3D11_TEX2DMS_ARRAY_SRV
{
  /* 0x0000 */ unsigned int FirstArraySlice;
  /* 0x0004 */ unsigned int ArraySize;
}; /* size: 0x0008 */

class bdMACAddr
{
  /* 0x0000 */ unsigned char m_data[6];
}; /* size: 0x0006 */

struct D3D11_TEX2D_SRV
{
  /* 0x0000 */ unsigned int MostDetailedMip;
  /* 0x0004 */ unsigned int MipLevels;
}; /* size: 0x0008 */

struct actorState_s
{
  /* 0x0000 */ int actorIndex;
  /* 0x0004 */ int entityNum;
  /* 0x0008 */ int modelindex;
  /* 0x000c */ int attachModelIndex[6];
  /* 0x0024 */ int attachTagIndex[6];
  /* 0x003c */ unsigned int attachIgnoreCollision;
  /* 0x0040 */ char name[32];
  /* 0x0060 */ int animScriptedAnim;
}; /* size: 0x0064 */

struct ActorState
{
  /* 0x0000 */ enum ai_state_t eState[6];
  /* 0x0018 */ enum ai_substate_t eSubState[6];
  /* 0x0030 */ unsigned int stateLevel;
  /* 0x0034 */ int iStateTime;
  /* 0x0038 */ int preThinkTime;
  /* 0x003c */ struct ai_transition_cmd_t StateTransitions[13];
  /* 0x00a4 */ unsigned int transitionCount;
  /* 0x00a8 */ enum ai_state_t eSimulatedState[6];
  /* 0x00c0 */ unsigned int simulatedStateLevel;
  /* 0x00c4 */ struct actorState_s as;
}; /* size: 0x0128 */

struct ActorOrientation
{
  /* 0x0000 */ float fDesiredBodyYaw;
  /* 0x0004 */ float fLookPitch;
  /* 0x0008 */ float fLookYaw;
  /* 0x000c */ union vec3_t vLookForward;
  /* 0x0018 */ union vec3_t vLookRight;
  /* 0x0024 */ union vec3_t vLookUp;
  /* 0x0030 */ float yawVeloc;
  /* 0x0034 */ int allowPitchAngle;
  /* 0x0038 */ float turnRate;
  /* 0x003c */ int bNotifyTurnDone;
  /* 0x0040 */ float maxFaceEnemyDistSq;
  /* 0x0044 */ unsigned char relativeDir;
  /* 0x0045 */ unsigned char prevRelativeDir;
  /* 0x0046 */ BOOL faceMotion;
  /* 0x0047 */ BOOL gunBlockedByWall;
  /* 0x0048 */ int dontTurnTime;
  /* 0x004c */ BOOL lockScriptOrient;
  /* 0x004d */ BOOL fixedLinkYawOnly;
  /* 0x004e */ char __PADDING__[2];
}; /* size: 0x0050 */

struct actor_prone_info_s
{
  /* 0x0000 */ BOOL bCorpseOrientation;
  /* 0x0001 */ BOOL orientPitch;
  /* 0x0002 */ BOOL prone;
  /* 0x0003 */ char Padding_336;
  /* 0x0004 */ int iProneTime;
  /* 0x0008 */ int iProneTrans;
  /* 0x000c */ float fBodyHeight;
  union
  {
    /* 0x0010 */ float fTorsoPitch;
    /* 0x0010 */ float fBodyPitch;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0014 */ float fWaistPitch;
    /* 0x0014 */ float fBodyRoll;
  }; /* size: 0x0004 */
}; /* size: 0x0018 */

struct ActorCachedInfo
{
  /* 0x0000 */ int time;
  /* 0x0004 */ union vec3_t pos;
  /* 0x0010 */ union vec3_t dir;
}; /* size: 0x001c */

struct ActorLookAtInfo
{
  /* 0x0000 */ union vec3_t vLookAtPos;
  /* 0x000c */ float fLookAtTurnAngle;
  /* 0x0010 */ float fLookAtTurnSpeed;
  /* 0x0014 */ float fLookAtTurnAccel;
  /* 0x0018 */ float fLookAtAnimYawLimit;
  /* 0x001c */ float fLookAtYawLimit;
  /* 0x0020 */ unsigned short animLookAtStraight;
  /* 0x0022 */ unsigned short animLookAtLeft;
  /* 0x0024 */ unsigned short animLookAtRight;
  /* 0x0026 */ BOOL bDoLookAt;
  /* 0x0027 */ BOOL bLookAtSetup;
  /* 0x0028 */ int iLookAtBlendEndTime;
  /* 0x002c */ float fLookAtAnimBlendRate;
  /* 0x0030 */ float fLookAtLimitBlendRate;
}; /* size: 0x0034 */

struct ActorNodeSelect
{
  /* 0x0000 */ int numCoverNodesInGoal;
  /* 0x0004 */ int iPotentialCoverNodeCount;
  /* 0x0008 */ BOOL keepNodeDuringScriptedAnim;
  /* 0x0009 */ char Padding_337;
  /* 0x000a */ unsigned short potentialCoverNode[10];
  /* 0x001e */ unsigned short potentialAmbushNode[32];
  /* 0x005e */ char Padding_338[2];
  /* 0x0060 */ int iPotentialAmbushNodeCount;
  /* 0x0064 */ int nextFindBestCoverTime;
  /* 0x0068 */ int coverSearchInterval;
  /* 0x006c */ BOOL requestDifferentCover;
  /* 0x006d */ BOOL keepClaimedNode;
  /* 0x006e */ BOOL keepClaimedNodeIfValid;
  /* 0x006f */ char Padding_339;
  /* 0x0070 */ struct pathnode_t* pPotentialReacquireNode[10];
  /* 0x0098 */ int iPotentialReacquireNodeCount;
  /* 0x009c */ struct pathnode_t* pPotentialCoverNode[32];
  /* 0x011c */ BOOL doDangerReact;
  /* 0x011d */ char Padding_340[3];
  /* 0x0120 */ int dangerReactGoalTime;
  /* 0x0124 */ int dangerReactDuration;
}; /* size: 0x0128 */

struct ActorSight
{
  /* 0x0000 */ float fovDot;
  /* 0x0004 */ float fMaxSightDistSqrd;
  /* 0x0008 */ int ignoreCloseFoliage;
  /* 0x000c */ BOOL lastEnemySightPosValid;
  /* 0x000d */ char Padding_341[3];
  /* 0x0010 */ union vec3_t lastEnemySightPos;
  /* 0x001c */ union vec3_t anglesToLikelyEnemyPath;
  /* 0x0028 */ int faceLikelyEnemyPathNeedCheckTime;
  /* 0x002c */ int faceLikelyEnemyPathNeedRecalculateTime;
  /* 0x0030 */ const struct pathnode_t* faceLikelyEnemyPathNode;
  /* 0x0034 */ int iTraceCount;
  /* 0x0038 */ unsigned short vis_blockers[72];
  /* 0x00c8 */ float fovDotBusy;
  /* 0x00cc */ int latency;
  /* 0x00d0 */ float upAimLimit;
  /* 0x00d4 */ float downAimLimit;
  /* 0x00d8 */ float rightAimLimit;
  /* 0x00dc */ float leftAimLimit;
}; /* size: 0x00e0 */

struct scr_animscript_t
{
  /* 0x0000 */ int func;
  /* 0x0004 */ int endFunc;
  /* 0x0008 */ unsigned short name;
  /* 0x000a */ char __PADDING__[2];
}; /* size: 0x000c */

struct ActorAnimation
{
  /* 0x0000 */ enum ai_stance_e eAllowedStances;
  /* 0x0004 */ unsigned short AnimScriptHandle;
  /* 0x0006 */ char Padding_342[2];
  /* 0x0008 */ struct scr_animscript_t* pAnimScriptFunc;
  /* 0x000c */ struct scr_animscript_t* pPrevAnimScriptFunc;
  /* 0x0010 */ struct scr_animscript_t AnimScriptSpecific;
  /* 0x001c */ enum ai_traverse_mode_t eTraverseMode;
  /* 0x0020 */ unsigned char moveMode;
  /* 0x0021 */ BOOL useCombatScriptAtCover;
  /* 0x0022 */ BOOL prevAnimScriptTerminated;
  /* 0x0023 */ BOOL safeToChangeScript;
  /* 0x0024 */ BOOL bUseGoalWeight;
  /* 0x0025 */ char Padding_343[3];
  /* 0x0028 */ enum ai_animmode_t eAnimMode;
  /* 0x002c */ enum ai_animmode_t eScriptSetAnimMode;
  /* 0x0030 */ float fAnimTranslationScale;
}; /* size: 0x0034 */

struct ActorNavigation
{
  /* 0x0000 */ float fWalkDist;
  /* 0x0004 */ float fWalkDistFacingMotion;
  /* 0x0008 */ float badPlaceAwareness;
  /* 0x000c */ struct path_t Path;
  /* 0x0420 */ struct path_trim_t TrimInfo;
  /* 0x0428 */ int iFollowMin;
  /* 0x042c */ int iFollowMax;
  /* 0x0430 */ float fInterval;
  /* 0x0434 */ int pathWaitTime;
  /* 0x0438 */ int iTeamMoveWaitTime;
  /* 0x043c */ int iTeamMoveDodgeTime;
  /* 0x0440 */ int stoppedWaitStartTime;
  /* 0x0444 */ class EntHandle stoppedWaitEnt;
  /* 0x0448 */ struct actor_t* pPileUpActor;
  /* 0x044c */ struct gentity_t* pPileUpEnt;
  /* 0x0450 */ int bDontAvoidPlayer;
  /* 0x0454 */ float sideMove;
  /* 0x0458 */ BOOL noDodgeMove;
  /* 0x0459 */ char Padding_344[3];
  /* 0x045c */ int mayMoveTime;
  /* 0x0460 */ float nodeOffsetDist;
  /* 0x0464 */ union vec3_t nodeOffsetPos;
  /* 0x0470 */ union vec2_t prevMoveDir;
  /* 0x0478 */ float leanAmount;
  /* 0x047c */ class EntHandle pCloseEnt;
  /* 0x0480 */ enum ai_badplace_t aiBadPlace;
  /* 0x0484 */ BOOL isInBadPlace;
  /* 0x0485 */ char badplaceRecheckPathLen;
  /* 0x0486 */ char __PADDING__[2];
}; /* size: 0x0488 */

struct ActorCombat
{
  /* 0x0000 */ int exposedStartTime;
  /* 0x0004 */ int exposedDuration;
  /* 0x0008 */ BOOL provideCoveringFire;
  /* 0x0009 */ char Padding_345[3];
  /* 0x000c */ struct scr_animscript_t* pAttackScriptFunc;
  /* 0x0010 */ float pathEnemyLookahead;
  /* 0x0014 */ float pathEnemyFightDist;
  /* 0x0018 */ float meleeAttackDist;
  /* 0x001c */ BOOL useEnemyGoal;
  /* 0x001d */ BOOL useMeleeAttackSpot;
  /* 0x001e */ char Padding_346[2];
  /* 0x0020 */ union vec3_t goodShootPos;
  /* 0x002c */ int goodShootPosValid;
  /* 0x0030 */ float engageMinDist;
  /* 0x0034 */ float engageMinFalloffDist;
  /* 0x0038 */ float engageMaxDist;
  /* 0x003c */ float engageMaxFalloffDist;
  /* 0x0040 */ BOOL noGrenadeReturnThrow;
  /* 0x0041 */ char Padding_347[3];
  /* 0x0044 */ enum AlertLevel alertLevel;
  /* 0x0048 */ enum CombatMode combatMode;
  /* 0x004c */ int exposedResumeTime;
  /* 0x0050 */ int stopPathTime;
  /* 0x0054 */ int ambushStartTime;
  /* 0x0058 */ BOOL doingAmbush;
  /* 0x0059 */ BOOL currentAmbushNodeInvalid;
  /* 0x005a */ BOOL allAmbushNodesFailed;
  /* 0x005b */ BOOL noAttackerAccuracyMod;
  /* 0x005c */ BOOL canFlank;
  /* 0x005d */ BOOL isWounded;
  /* 0x005e */ BOOL damageShield;
  /* 0x005f */ char Padding_348;
  /* 0x0060 */ float frontShieldAngleCos;
}; /* size: 0x0064 */

struct ActorReact
{
  /* 0x0000 */ int iReactTime;
  /* 0x0004 */ int nextAllowedReactTime;
  /* 0x0008 */ BOOL allowReact;
  /* 0x0009 */ char Padding_349[3];
  /* 0x000c */ union vec3_t reactOrigin;
  /* 0x0018 */ int lastHitTime;
  /* 0x001c */ float newEnemyReactionDistSq;
  /* 0x0020 */ union vec3_t newEnemyReactionPos;
  /* 0x002c */ BOOL newEnemyReaction;
  /* 0x002d */ char __PADDING__[3];
}; /* size: 0x0030 */

struct ActorThreat
{
  /* 0x0000 */ int hasThreateningEnemy;
  /* 0x0004 */ int bPacifist;
  /* 0x0008 */ int iPacifistWait;
  /* 0x000c */ struct potential_threat_t potentialThreat;
  /* 0x0018 */ int threatUpdateTime;
  /* 0x001c */ class SentientHandle pFavoriteEnemy;
  /* 0x0020 */ int bDrawOnCompass;
  /* 0x0024 */ int bActivateCrosshair;
  /* 0x0028 */ float highlyAwareRadius;
  /* 0x002c */ BOOL ignoreExplosionEvents;
  /* 0x002d */ char Padding_350[3];
  /* 0x0030 */ int numSecondaryTarget;
  /* 0x0034 */ struct ActorSecondaryTarget secondaryTargets[2];
  /* 0x005c */ BOOL allEnemiesInSimilarDir;
  /* 0x005d */ char Padding_351[3];
  /* 0x0060 */ int goodEnemyOnly;
  /* 0x0064 */ float footstepDetectDistSq;
  /* 0x0068 */ float footstepDetectDistWalkSq;
  /* 0x006c */ float footstepDetectDistSprintSq;
}; /* size: 0x0070 */

struct ActorGrenade
{
  /* 0x0000 */ float grenadeAwareness;
  /* 0x0004 */ class EntHandle pGrenade;
  /* 0x0008 */ unsigned short GrenadeTossMethod;
  /* 0x000a */ char Padding_352[2];
  /* 0x000c */ int bGrenadeTossValid;
  /* 0x0010 */ int bGrenadeTargetValid;
  /* 0x0014 */ int iGrenadeAmmo;
  /* 0x0018 */ union vec3_t vGrenadeTossPos;
  /* 0x0024 */ union vec3_t vGrenadeTargetPos;
  /* 0x0030 */ union vec3_t vGrenadeTossVel;
  /* 0x003c */ class EntHandle throwBackGrenadeKilledOriginalOwner;
  /* 0x0040 */ int bThrowbackGrenades;
  /* 0x0044 */ class EntHandle pGrenadeFlee;
  /* 0x0048 */ int flashBanged;
  /* 0x004c */ float flashBangedStrength;
  /* 0x0050 */ int flashBangImmunity;
  /* 0x0054 */ int grenadeExistTime;
  /* 0x0058 */ union Weapon GrenadeWeapon;
  /* 0x005c */ BOOL grenadeTossWithBounce;
  /* 0x005d */ char Padding_353[3];
  /* 0x0060 */ union vec3_t pickupPos;
}; /* size: 0x006c */

struct actor_goal_s
{
  /* 0x0000 */ union vec3_t pos;
  /* 0x000c */ union vec3_t ang;
  /* 0x0018 */ float radius;
  /* 0x001c */ float height;
  /* 0x0020 */ struct pathnode_t* node;
  /* 0x0024 */ struct gentity_t* volume;
}; /* size: 0x0028 */

struct ActorGoal
{
  /* 0x0000 */ struct actor_goal_s codeGoal;
  /* 0x0028 */ enum aiGoalSources codeGoalSrc;
  /* 0x002c */ struct actor_goal_s scriptGoal;
  /* 0x0054 */ class EntHandle scriptGoalEnt;
  /* 0x0058 */ BOOL goalPosChanged;
  /* 0x0059 */ BOOL commitToFixedNode;
  /* 0x005a */ BOOL ignoreForFixedNodeSafeCheck;
  /* 0x005b */ BOOL fixedNode;
  /* 0x005c */ float fixedNodeSafeRadius;
  /* 0x0060 */ float fixedNodeSafeVolumeRadiusSq;
  /* 0x0064 */ class EntHandle fixedNodeSafeVolume;
  /* 0x0068 */ int moveHistoryIndex;
  /* 0x006c */ BOOL moveHistoryConsistent;
  /* 0x006d */ char Padding_354[3];
  /* 0x0070 */ union vec2_t moveHistory[10];
}; /* size: 0x00c0 */

struct actor_physics_t
{
  /* 0x0000 */ union vec3_t vOrigin;
  /* 0x000c */ union vec3_t vVelocity;
  /* 0x0018 */ unsigned short groundEntNum;
  /* 0x001a */ char Padding_355[2];
  /* 0x001c */ int iFootstepTimer;
  /* 0x0020 */ int bHasGroundPlane;
  /* 0x0024 */ float groundplaneSlope;
  /* 0x0028 */ int iSurfaceType;
  /* 0x002c */ union vec3_t vWishDelta;
  /* 0x0038 */ int bIsAlive;
  /* 0x003c */ int iEntNum;
  /* 0x0040 */ enum aiphys_t ePhysicsType;
  /* 0x0044 */ float fGravity;
  /* 0x0048 */ int iMsec;
  /* 0x004c */ union vec3_t vMins;
  /* 0x0058 */ union vec3_t vMaxs;
  /* 0x0064 */ BOOL prone;
  /* 0x0065 */ char Padding_356[3];
  /* 0x0068 */ int iTraceMask;
  /* 0x006c */ int foliageSoundTime;
  /* 0x0070 */ int iNumTouch;
  /* 0x0074 */ int iTouchEnts[32];
  /* 0x00f4 */ int iHitEntnum;
  /* 0x00f8 */ union vec3_t vHitOrigin;
  /* 0x0104 */ union vec3_t vHitNormal;
  /* 0x0110 */ unsigned char bStuck;
  /* 0x0111 */ unsigned char bDeflected;
  /* 0x0112 */ char Padding_357[2];
  /* 0x0114 */ const struct gjkcc_input_t* m_gjkcc_input;
  /* 0x0118 */ long Padding_358[2];
  /* 0x0120 */ class colgeom_visitor_inlined_t<300> proximity_data;
  /* 0x0b10 */ BOOL pathGoingDown;
  /* 0x0b11 */ char Padding_359[3];
  /* 0x0b14 */ enum AI_STAIRS_STATE stairsState;
  /* 0x0b18 */ int groundEntityTimestamp;
  /* 0x0b1c */ long __PADDING__[1];
}; /* size: 0x0b20 */

struct actor_t
{
  /* 0x0000 */ struct ActorFlags flags;
  /* 0x0004 */ struct gentity_t* ent;
  /* 0x0008 */ struct sentient_t* sentient;
  /* 0x000c */ enum AISpecies species;
  /* 0x0010 */ struct ActorState state;
  /* 0x0138 */ struct ActorShoot shoot;
  /* 0x0164 */ struct ActorOrientation orientation;
  /* 0x01b4 */ struct ai_orient_t CodeOrient;
  /* 0x01c4 */ struct ai_orient_t ScriptOrient;
  /* 0x01d4 */ struct ActorPainDeath painDeath;
  /* 0x020c */ struct ActorProne prone;
  /* 0x0228 */ struct actor_prone_info_s ProneInfo;
  /* 0x0240 */ struct ActorCachedInfo eyeInfo;
  /* 0x025c */ struct ActorCachedInfo muzzleInfo;
  /* 0x0278 */ struct ActorLookAtInfo lookAtInfo;
  /* 0x02ac */ struct ActorCoverArrivalInfo arrivalInfo;
  /* 0x02d4 */ struct ActorNodeSelect nodeSelect;
  /* 0x03fc */ struct ActorSight sight;
  /* 0x04dc */ struct ActorString string;
  /* 0x04f4 */ struct ActorAnimSets animSets;
  /* 0x0500 */ struct ActorAnimation anim;
  /* 0x0534 */ struct ActorNavigation navigation;
  /* 0x09bc */ struct ActorCombat combat;
  /* 0x0a20 */ struct ActorReact react;
  /* 0x0a50 */ struct ActorThreat threat;
  /* 0x0ac0 */ struct ActorGrenade grenade;
  /* 0x0b2c */ struct ActorTurret turret;
  /* 0x0b34 */ struct ActorGoal goal;
  /* 0x0bf4 */ struct ActorSuppression suppression;
  /* 0x0c08 */ struct ActorDelayedWeaponDrop weapDrops[2];
  /* 0x0c88 */ struct sentient_info_t sentientInfo[72];
  /* 0x1b28 */ struct ai_suppression_t Suppressant[4];
  /* 0x1b88 */ long Padding_360[2];
  /* 0x1b90 */ struct actor_physics_t Physics;
  /* 0x26b0 */ const char* pszDebugInfo;
  /* 0x26b4 */ struct ActorCoverInfluenceInfo cover_influencers[8];
  /* 0x2714 */ long __PADDING__[3];
}; /* size: 0x2720 */

struct msg_t
{
  /* 0x0000 */ int overflowed;
  /* 0x0004 */ int readOnly;
  /* 0x0008 */ unsigned char* data;
  /* 0x000c */ unsigned char* splitData;
  /* 0x0010 */ int maxsize;
  /* 0x0014 */ int cursize;
  /* 0x0018 */ int splitSize;
  /* 0x001c */ int readcount;
  /* 0x0020 */ int bit;
  /* 0x0024 */ int lastEntityRef;
  /* 0x0028 */ int flush;
  /* 0x002c */ enum netsrc_t targetLocalNetID;
}; /* size: 0x0030 */

struct demoGameSettings
{
  /* 0x0000 */ BOOL onlinegame;
  /* 0x0001 */ BOOL xblive_privatematch;
  /* 0x0002 */ BOOL xblive_wagermatch;
  /* 0x0003 */ BOOL systemlink;
  /* 0x0004 */ BOOL isClientConsole;
  /* 0x0005 */ BOOL isDedicatedServer;
}; /* size: 0x0006 */

struct demoHeader
{
  /* 0x0000 */ int version;
  /* 0x0004 */ int maxClients;
  /* 0x0008 */ enum ClientNum_t defaultClient;
  /* 0x000c */ BOOL isDemoClip;
  /* 0x000d */ BOOL hasExtraNetworkProfileData;
  /* 0x000e */ BOOL isZombie;
  /* 0x000f */ struct demoGameSettings settings;
  /* 0x0015 */ char __PADDING__[3];
}; /* size: 0x0018 */

struct demoTaggedPlayers
{
  /* 0x0000 */ int count;
  /* 0x0004 */ int playerIndex[30];
}; /* size: 0x007c */

struct demoDefaultMetaInfo
{
  /* 0x0000 */ struct demoTaggedPlayers taggedPlayers;
  /* 0x007c */ char gameType[256];
  /* 0x017c */ char mapName[256];
  /* 0x027c */ char zmGameModeGroup[256];
  /* 0x037c */ char zmMapStartLoc[256];
  /* 0x047c */ char authorName[32];
  /* 0x049c */ char name[22];
  /* 0x04b2 */ BOOL isModifiedName;
  /* 0x04b3 */ char description[64];
  /* 0x04f3 */ BOOL isModifiedDescription;
  /* 0x04f4 */ long Padding_361;
  /* 0x04f8 */ unsigned __int64 originalFileID;
  /* 0x0500 */ unsigned int createTime;
  /* 0x0504 */ long __PADDING__[1];
}; /* size: 0x0508 */

struct demoConnectedPlayers
{
  /* 0x0000 */ unsigned char playerIndex;
  /* 0x0001 */ char Padding_362[3];
  /* 0x0004 */ enum ClientNum_t clientNum;
  /* 0x0008 */ unsigned __int64 xuid;
  /* 0x0010 */ int connectTime;
  /* 0x0014 */ int disconnectTime;
  /* 0x0018 */ enum team_t assignedTeam;
  /* 0x001c */ enum ffa_team_t assignedFFATeam;
  /* 0x0020 */ unsigned __int64 leagueTeamID;
  /* 0x0028 */ unsigned __int64 leagueSubdivisionID;
}; /* size: 0x0030 */

struct demoDefaultBookmark
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long type : 7; /* bit position: 0 */
    /* 0x0000 */ unsigned long entityNumber : 10; /* bit position: 7 */
    /* 0x0000 */ unsigned long clientNum1 : 5; /* bit position: 17 */
    /* 0x0000 */ unsigned long clientNum2 : 5; /* bit position: 22 */
    /* 0x0000 */ unsigned long actorNum : 5; /* bit position: 27 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long eType : 5; /* bit position: 0 */
    /* 0x0004 */ unsigned long roundNumber : 8; /* bit position: 5 */
    /* 0x0004 */ unsigned long overrideEntityCamera : 1; /* bit position: 13 */
    /* 0x0004 */ unsigned long scoreEventPriority : 7; /* bit position: 14 */
  }; /* bitfield */
  /* 0x0008 */ int time;
  /* 0x000c */ int entBirthTime;
}; /* size: 0x0010 */

struct demoHeliPatches
{
  /* 0x0000 */ int brushmodel;
  /* 0x0004 */ union vec3_t origin;
  /* 0x0010 */ unsigned short targetname;
  /* 0x0012 */ BOOL excludeFromDemo;
  /* 0x0013 */ char Padding_363;
  /* 0x0014 */ int enabled;
}; /* size: 0x0018 */

struct demoFooter
{
  /* 0x0000 */ int version;
  /* 0x0004 */ int startTime;
  /* 0x0008 */ int endTime;
  /* 0x000c */ long Padding_364;
  /* 0x0010 */ struct demoDefaultMetaInfo info;
  /* 0x0518 */ int numConnectedPlayers;
  /* 0x051c */ long Padding_365;
  /* 0x0520 */ struct demoConnectedPlayers connectedPlayers[50];
  /* 0x0e80 */ int numDefaultBookmarks;
  /* 0x0e84 */ struct demoDefaultBookmark defaultBookmarks[2500];
  /* 0xaac4 */ int numHeliPatches;
  /* 0xaac8 */ struct demoHeliPatches heliPatches[32];
}; /* size: 0xadc8 */

struct demoKeyboardData
{
  /* 0x0000 */ int mode;
  /* 0x0004 */ const char* title;
  /* 0x0008 */ const char* defaultText;
  /* 0x000c */ int textSize;
  /* 0x0010 */ int currentProcessingSegmentIndex;
  /* 0x0014 */ BOOL ignoreProfanityCheck;
  /* 0x0015 */ char __PADDING__[3];
}; /* size: 0x0018 */

struct ArchivedMatchState
{
  /* 0x0000 */ int matchUIVisibilityFlags;
  /* 0x0004 */ int bombTimer[2];
  /* 0x000c */ int roundsPlayed;
  /* 0x0010 */ int worldFields[8];
}; /* size: 0x0030 */

struct MatchState
{
  /* 0x0000 */ int index;
  /* 0x0004 */ struct ArchivedMatchState archivedState;
  /* 0x0034 */ struct UnarchivedMatchState unarchivedState;
  /* 0x0078 */ unsigned int pad[1];
  /* 0x007c */ long __PADDING__[1];
}; /* size: 0x0080 */

struct demoSnapshotData
{
  /* 0x0000 */ int messageNum;
  /* 0x0004 */ int serverCommandNum;
  /* 0x0008 */ int deltaNum;
  /* 0x000c */ int serverTime;
  /* 0x0010 */ int physicsTime;
  /* 0x0014 */ int snapFlags;
  /* 0x0018 */ long Padding_366[26];
  /* 0x0080 */ struct MatchState matchState;
  /* 0x0100 */ struct playerState_s ps[18];
  /* 0x2f590 */ struct entityState_s ent[1024];
  /* 0x6d590 */ int entClientMask[2][1024];
  /* 0x6f590 */ int prevNumEntities;
  /* 0x6f594 */ long Padding_367;
  /* 0x6f598 */ struct clientState_s client[18];
  /* 0x709d8 */ int prevNumClients;
  /* 0x709dc */ struct actorState_s actor[32];
  /* 0x7165c */ int prevNumActors;
  /* 0x71660 */ long __PADDING__[8];
}; /* size: 0x71680 */

struct demoMemBlock
{
  /* 0x0000 */ int compressedSize;
  /* 0x0004 */ int uncompressedSize;
  /* 0x0008 */ unsigned char compressedMsgBuf[65536];
}; /* size: 0x10008 */

struct demoMain
{
  /* 0x0000 */ char demoName[128];
  /* 0x0080 */ int demoFileHandle;
  /* 0x0084 */ enum demoState state;
  /* 0x0088 */ unsigned char playbackMode;
  /* 0x0089 */ BOOL renderingAllocated;
  /* 0x008a */ BOOL renderingAudioPass;
  /* 0x008b */ BOOL renderingFirstJumpBackDone;
  /* 0x008c */ BOOL renderingCancelled;
  /* 0x008d */ char Padding_368[3];
  /* 0x0090 */ struct msg_t msg;
  /* 0x00c0 */ unsigned char msgBuf0[65536];
  /* 0x100c0 */ unsigned char msgBuf1[65536];
  /* 0x200c0 */ BOOL msgBufFlag;
  /* 0x200c1 */ char Padding_369[3];
  /* 0x200c4 */ volatile long totalSize;
  /* 0x200c8 */ int loadedTime;
  /* 0x200cc */ struct demoHeader header;
  /* 0x200e4 */ long Padding_370;
  /* 0x200e8 */ struct demoFooter footer;
  /* 0x2aeb0 */ struct demoKeyboardData keyboard;
  /* 0x2aec8 */ int demoAttachmentNum;
  /* 0x2aecc */ BOOL shutdownInProgress;
  /* 0x2aecd */ char Padding_371[3];
  /* 0x2aed0 */ int gameStateMessageSequence;
  /* 0x2aed4 */ int lastProcessedTime;
  /* 0x2aed8 */ int lastProcessedMsgNum;
  /* 0x2aedc */ int lastReliableCommandRecorded[18];
  /* 0x2af24 */ BOOL gameStateWritten;
  /* 0x2af25 */ char Padding_372[91];
  /* 0x2af80 */ struct demoSnapshotData snapshot;
  /* 0x9c600 */ int prevNumParsedEntities;
  /* 0x9c604 */ int prevNumParsedClients;
  /* 0x9c608 */ int prevNumParsedActors;
  /* 0x9c60c */ int playerSessionState[18];
  /* 0x9c654 */ union vec3_t intermissionPointOrigin;
  /* 0x9c660 */ union vec3_t intermissionPointAngles;
  /* 0x9c66c */ int svTotalBytesSent;
  /* 0x9c670 */ int svMaxBytesPerFrame;
  /* 0x9c674 */ unsigned char spawnDebugBuffer[16384];
  /* 0xa0674 */ int spawnDebugBufferPos;
  /* 0xa0678 */ struct demoMemBlock memBlock;
  /* 0xb0680 */ struct demoPlayback* playback;
  /* 0xb0684 */ BOOL playbackInited;
  /* 0xb0685 */ char Padding_373[3];
  /* 0xb0688 */ enum demoStreamingThrottleState streamingThrottleState;
  /* 0xb068c */ int streamingThrottleTime;
  /* 0xb0690 */ enum demoLagFlag_e lagFlag;
  /* 0xb0694 */ long Padding_374;
  /* 0xb0698 */ unsigned __int64 renderMatchID;
  /* 0xb06a0 */ int renderSlot;
  /* 0xb06a4 */ long __PADDING__[23];
}; /* size: 0xb0700 */

struct sentient_t
{
  /* 0x0000 */ struct gentity_t* ent;
  /* 0x0004 */ enum team_t eTeam;
  /* 0x0008 */ class EntHandle scriptOwner;
  /* 0x000c */ int iThreatBias;
  /* 0x0010 */ int iThreatBiasGroupIndex;
  /* 0x0014 */ BOOL bIgnoreMe;
  /* 0x0015 */ BOOL bIgnoreAll;
  /* 0x0016 */ BOOL bIgnoreForFriendlyFire;
  /* 0x0017 */ BOOL originChanged;
  /* 0x0018 */ union vec3_t oldOrigin;
  /* 0x0024 */ float maxVisibleDist;
  /* 0x0028 */ float surprisedByMeDistSq;
  /* 0x002c */ int iEnemyNotifyTime;
  /* 0x0030 */ int attackerCount;
  /* 0x0034 */ class EntHandle lastAttacker;
  /* 0x0038 */ class EntHandle syncedMeleeEnt;
  /* 0x003c */ class EntHandle targetEnt;
  /* 0x0040 */ class EntHandle scriptTargetEnt;
  /* 0x0044 */ unsigned short scriptTargetTag;
  /* 0x0046 */ char Padding_375[2];
  /* 0x0048 */ float entityTargetThreat;
  /* 0x004c */ int meleeAttackerSpot[4];
  /* 0x005c */ float attackerAccuracy;
  /* 0x0060 */ BOOL ignoreRandomBulletDamage;
  /* 0x0061 */ BOOL turretInvulnerability;
  /* 0x0062 */ char Padding_376[2];
  /* 0x0064 */ struct pathnode_t* pClaimedNode;
  /* 0x0068 */ struct pathnode_t* pPrevClaimedNode;
  /* 0x006c */ struct pathnode_t* pNearestNode;
  /* 0x0070 */ unsigned char bNearestNodeValid;
  /* 0x0071 */ unsigned char bNearestNodeBad;
  /* 0x0072 */ char Padding_377[2];
  /* 0x0074 */ union vec3_t vNearestNodeCheckPos;
  /* 0x0080 */ BOOL inuse;
  /* 0x0081 */ char Padding_378[3];
  /* 0x0084 */ int banNodeTime;
  /* 0x0088 */ BOOL bInMeleeCharge;
  /* 0x0089 */ char __PADDING__[3];
}; /* size: 0x008c */

class bdSingleton<bdTrulyRandomImpl>
{
  /* 0x0000 */ class bdTrulyRandomImpl* m_instance;
}; /* size: 0x0001 */

typedef struct _ldiv_t
{
  /* 0x0000 */ long quot;
  /* 0x0004 */ long rem;
} ldiv_t, *Pldiv_t; /* size: 0x0008 */

class bdNetStartParams
{
  /* 0x0000 */ BOOL m_onlineGame;
  /* 0x0001 */ char Padding_379;
  /* 0x0002 */ unsigned short m_gamePort;
  /* 0x0004 */ class bdSocket* m_socket;
  /* 0x0008 */ class bdArray<bdString> m_natTravHosts;
  /* 0x0014 */ unsigned short m_natTravPort;
  /* 0x0016 */ char Padding_380[2];
  /* 0x0018 */ class bdArray<bdInetAddr> m_localAddresses;
  /* 0x0024 */ class bdAddr m_overridePublicAddr;
  /* 0x002c */ enum bdNATType m_overrideNATType;
  /* 0x0030 */ class bdGetHostByNameConfig m_hostNameLookupConfig;
  /* 0x0034 */ class bdUPnPConfig m_UPnPConfig;
  /* 0x0054 */ BOOL m_useAnyIP;
  /* 0x0055 */ char Padding_381[3];
  /* 0x0058 */ unsigned int m_threadStackSize;
  /* 0x005c */ class bdSocketRouterConfig m_socketRouterConfig;
}; /* size: 0x006c */

class bdNetImpl
{
  /* 0x0000 */ long Padding_382[2];
  /* 0x0008 */ class bdNetStartParams m_params;
  /* 0x0074 */ long Padding_383;
  /* 0x0078 */ class bdConnectionStore m_connectionStore;
  /* 0x00c0 */ class bdSocketRouter* m_socketRouter;
  /* 0x00c4 */ enum bdNetImpl::bdNetStatus m_status;
  /* 0x00c8 */ class bdIPDiscoveryClient* m_ipDiscClient;
  /* 0x00cc */ class bdNATTypeDiscoveryClient* m_natTypeDiscClient;
  /* 0x00d0 */ class bdGetHostByName* m_getHostByName;
  /* 0x00d4 */ long Padding_384;
  /* 0x00d8 */ class bdUPnP m_UPnP;
  /* 0x4778 */ class bdArray<bdAddr> m_natTravAddrs;
  /* 0x4784 */ unsigned int m_currentNatTravAddrIndex;
  /* 0x4788 */ unsigned int m_currentNatTravHostIndex;
  /* 0x478c */ unsigned int m_upnpCollisionRetryCount;
}; /* size: 0x4790 */

class bdString
{
  /* 0x0000 */ char* m_string;
}; /* size: 0x0004 */

class bdUCDPublicKeyInfo
{
  /* 0x0000 */ long Padding_385;
  /* 0x0004 */ class bdUCD* m_requestingUCDService;
  /* 0x0008 */ unsigned char m_publicKey[140];
}; /* size: 0x0094 */

class bdUCD
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
  /* 0x0004 */ class bdRSAKey m_rsaKey;
  /* 0x002c */ BOOL m_keySet;
  /* 0x002d */ char Padding_386[3];
  /* 0x0030 */ class bdUCDPublicKeyInfo m_initPublicKeyResult;
}; /* size: 0x00c4 */

struct D3D11_INPUT_ELEMENT_DESC
{
  /* 0x0000 */ const char* SemanticName;
  /* 0x0004 */ unsigned int SemanticIndex;
  /* 0x0008 */ enum DXGI_FORMAT Format;
  /* 0x000c */ unsigned int InputSlot;
  /* 0x0010 */ unsigned int AlignedByteOffset;
  /* 0x0014 */ enum D3D11_INPUT_CLASSIFICATION InputSlotClass;
  /* 0x0018 */ unsigned int InstanceDataStepRate;
}; /* size: 0x001c */

struct gjccc_create_t
{
  /* 0x0000 */ enum gjccc_create_type_e type;
  /* 0x0004 */ const union vec3_t* mins;
  /* 0x0008 */ const union vec3_t* maxs;
  /* 0x000c */ const struct PhysGeomList* collmap;
}; /* size: 0x0010 */

class bdLinkCode
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

class bdFacebook
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

struct ISequentialStream
{
}; /* size: 0x0004 */

class bdPacketInterceptor
{
}; /* size: 0x0004 */

struct defaultClassInfo_t
{
  /* 0x0000 */ int defaultAttachmentBits[15];
  /* 0x003c */ char defaultCount[15];
  /* 0x004b */ char __PADDING__[1];
}; /* size: 0x004c */

class bdBackoffTimer
{
  union
  {
    /* 0x0000 */ const unsigned int s_maxTimeouts;
    /* 0x0000 */ unsigned int m_timestamp;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned int m_failures;
  /* 0x0008 */ unsigned int m_sizeTimeouts;
  /* 0x000c */ char m_timeouts[16];
}; /* size: 0x001c */

struct ID3D11ComputeShader
{
}; /* size: 0x0004 */

class bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass>::Node
{
  /* 0x0000 */ class bdSecurityKey m_data;
  /* 0x0010 */ class bdSecurityID m_key;
  /* 0x0018 */ class bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass>::Node* m_next;
}; /* size: 0x001c */

struct CD3D11_UNORDERED_ACCESS_VIEW_DESC
{
}; /* size: 0x0014 */

struct GlassState
{
  union
  {
    union
    {
      /* 0x0000 */ unsigned int i;
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned int state : 4; /* bit position: 0 */
        /* 0x0000 */ unsigned int id : 12; /* bit position: 4 */
      }; /* bitfield */
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ val;
}; /* size: 0x0004 */

struct GlassClient::Outlines
{
  /* 0x0000 */ unsigned int numOutlines;
  /* 0x0004 */ unsigned char* buffer;
}; /* size: 0x0008 */

struct GlassClient
{
  /* 0x0000 */ const struct Glass* glass;
  /* 0x0004 */ struct GlassState state;
  /* 0x0008 */ BOOL shatterDelay;
  /* 0x0009 */ char Padding_387[3];
  /* 0x000c */ struct GlassClient::Outlines outlines;
  /* 0x0014 */ BOOL preShatterDone;
  /* 0x0015 */ char __PADDING__[3];
}; /* size: 0x0018 */

class tlAtomicMutexLocker
{
  /* 0x0000 */ class tlAtomicMutex* Mutex;
}; /* size: 0x0004 */

typedef struct _XMFLOAT3X3
{
  union
  {
    struct
    {
      /* 0x0000 */ float _11;
      /* 0x0004 */ float _12;
      /* 0x0008 */ float _13;
      /* 0x000c */ float _21;
      /* 0x0010 */ float _22;
      /* 0x0014 */ float _23;
      /* 0x0018 */ float _31;
      /* 0x001c */ float _32;
      /* 0x0020 */ float _33;
    }; /* size: 0x0024 */
    /* 0x0000 */ float m[3][3];
  }; /* size: 0x0024 */
} XMFLOAT3X3, *PXMFLOAT3X3; /* size: 0x0024 */

typedef struct _CRT_DOUBLE
{
  /* 0x0000 */ double x;
} CRT_DOUBLE, *PCRT_DOUBLE; /* size: 0x0008 */

struct trace_t
{
  /* 0x0000 */ class hybrid_vector normal;
  /* 0x0010 */ float fraction;
  /* 0x0014 */ int sflags;
  /* 0x0018 */ int cflags;
  /* 0x001c */ enum TraceHitType hitType;
  /* 0x0020 */ unsigned short hitId;
  /* 0x0022 */ unsigned short modelIndex;
  /* 0x0024 */ unsigned short partName;
  /* 0x0026 */ unsigned short boneIndex;
  /* 0x0028 */ unsigned short partGroup;
  /* 0x002a */ BOOL allsolid;
  /* 0x002b */ BOOL startsolid;
  /* 0x002c */ BOOL walkable;
  /* 0x002d */ char Padding_388[3];
  /* 0x0030 */ struct cStaticModel_s* staticModel;
  /* 0x0034 */ int hitPartition;
  /* 0x0038 */ long __PADDING__[2];
}; /* size: 0x0040 */

typedef struct _TEB_ACTIVE_FRAME_CONTEXT
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ const char* FrameName;
} TEB_ACTIVE_FRAME_CONTEXT, *PTEB_ACTIVE_FRAME_CONTEXT; /* size: 0x0008 */

class bdPacketBuffer
{
  /* 0x0000 */ class bdPacketBufferInternal m_buffers[10];
  /* 0x2850 */ unsigned int m_numActiveBuffers;
}; /* size: 0x2854 */

typedef struct _XMSHORT2
{
  /* 0x0000 */ short x;
  /* 0x0002 */ short y;
} XMSHORT2, *PXMSHORT2; /* size: 0x0004 */

union XAnimIndices
{
  union
  {
    /* 0x0000 */ unsigned char* _1;
    /* 0x0000 */ unsigned short* _2;
    /* 0x0000 */ void* data;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct XAnimParts
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned short dataByteCount;
  /* 0x0006 */ unsigned short dataShortCount;
  /* 0x0008 */ unsigned short dataIntCount;
  /* 0x000a */ unsigned short randomDataByteCount;
  /* 0x000c */ unsigned short randomDataIntCount;
  /* 0x000e */ unsigned short numframes;
  /* 0x0010 */ BOOL bLoop;
  /* 0x0011 */ BOOL bDelta;
  /* 0x0012 */ BOOL bDelta3D;
  /* 0x0013 */ BOOL bLeftHandGripIK;
  /* 0x0014 */ unsigned int streamedFileSize;
  /* 0x0018 */ unsigned char boneCount[10];
  /* 0x0022 */ unsigned char notifyCount;
  /* 0x0023 */ unsigned char assetType;
  /* 0x0024 */ BOOL isDefault;
  /* 0x0025 */ char Padding_389[3];
  /* 0x0028 */ unsigned int randomDataShortCount;
  /* 0x002c */ unsigned int indexCount;
  /* 0x0030 */ float framerate;
  /* 0x0034 */ float frequency;
  /* 0x0038 */ float primedLength;
  /* 0x003c */ float loopEntryTime;
  /* 0x0040 */ unsigned short* names;
  /* 0x0044 */ unsigned char* dataByte;
  /* 0x0048 */ short* dataShort;
  /* 0x004c */ int* dataInt;
  /* 0x0050 */ short* randomDataShort;
  /* 0x0054 */ unsigned char* randomDataByte;
  /* 0x0058 */ int* randomDataInt;
  /* 0x005c */ union XAnimIndices indices;
  /* 0x0060 */ struct XAnimNotifyInfo* notify;
  /* 0x0064 */ struct XAnimDeltaPart* deltaPart;
}; /* size: 0x0068 */

struct d_derived_tbl
{
  /* 0x0000 */ long maxcode[18];
  /* 0x0048 */ long valoffset[17];
  /* 0x008c */ struct JHUFF_TBL* pub;
  /* 0x0090 */ int look_nbits[256];
  /* 0x0490 */ unsigned char look_sym[256];
}; /* size: 0x0590 */

class bdPlatformSocket
{
  union
  {
    /* 0x0000 */ unsigned __int64 m_totalBytesSent;
    /* 0x0000 */ unsigned __int64 m_totalPacketsSent;
    /* 0x0000 */ unsigned __int64 m_totalBytesRecvd;
    /* 0x0000 */ unsigned __int64 m_totalPacketsRecvd;
  }; /* size: 0x0008 */
}; /* size: 0x0001 */

class bdReference<bdConnection>
{
  /* 0x0000 */ class bdConnection* m_ptr;
}; /* size: 0x0004 */

class bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>::Node
{
  /* 0x0000 */ class bdReference<bdConnection> m_data;
  /* 0x0004 */ class bdAddrHandleRefWrapper m_key;
  /* 0x0008 */ class bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>::Node* m_next;
}; /* size: 0x000c */

union XAnimPartTransData
{
  union
  {
    /* 0x0000 */ struct XAnimPartTransFrames frames;
    /* 0x0000 */ union vec3_t frame0;
  }; /* size: 0x0020 */
}; /* size: 0x0020 */

struct XAnimPartTrans
{
  /* 0x0000 */ unsigned short size;
  /* 0x0002 */ unsigned char smallTrans;
  /* 0x0003 */ char Padding_390;
  /* 0x0004 */ union XAnimPartTransData u;
}; /* size: 0x0024 */

class bdFastArray<bdConnectionListener *>
{
  /* 0x0000 */ class bdConnectionListener** m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

class bdConnection
{
  /* 0x0000 */ long Padding_391[2];
  /* 0x0008 */ class bdReference<bdCommonAddr> m_addr;
  /* 0x000c */ class bdReference<bdAddrHandle> m_addrHandle;
  /* 0x0010 */ class bdFastArray<bdConnectionListener *> m_listeners;
  /* 0x001c */ unsigned int m_maxTransmissionRate;
  /* 0x0020 */ enum bdConnection::Status m_status;
}; /* size: 0x0024 */

class bdGenericLeagueID
{
  /* 0x0000 */ long Padding_392[2];
  /* 0x0008 */ unsigned __int64 m_ID;
}; /* size: 0x0010 */

struct VehicleDriveBySound
{
  /* 0x0000 */ int apex;
  /* 0x0004 */ const char* name;
  /* 0x0008 */ unsigned int alias;
}; /* size: 0x000c */

typedef struct _XMUBYTEN4
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char x;
      /* 0x0001 */ unsigned char y;
      /* 0x0002 */ unsigned char z;
      /* 0x0003 */ unsigned char w;
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMUBYTEN4, *PXMUBYTEN4; /* size: 0x0004 */

class bdNATTypeDiscoveryConfig
{
  /* 0x0000 */ unsigned int m_NtdcsMaxResends;
  /* 0x0004 */ float m_NtdcsSendTimeout;
}; /* size: 0x0008 */

class bdNATTypeDiscoveryClient
{
  /* 0x0000 */ class bdSocket* m_socket;
  /* 0x0004 */ class bdAddr m_serverAddr1;
  /* 0x000c */ class bdAddr m_serverAddr2;
  /* 0x0014 */ class bdAddr m_mappedAddr;
  /* 0x001c */ enum bdNATType m_NATType;
  /* 0x0020 */ enum bdNATTypeDiscoveryClient::bdNATTypeDiscoveryClientState m_state;
  /* 0x0024 */ unsigned char m_resends;
  /* 0x0025 */ char Padding_393[3];
  /* 0x0028 */ class bdStopwatch m_timer;
  /* 0x0030 */ class bdNATTypeDiscoveryConfig m_config;
}; /* size: 0x0038 */

struct VehicleAntenna
{
  /* 0x0000 */ float springK;
  /* 0x0004 */ float damp;
  /* 0x0008 */ float length;
  /* 0x000c */ float gravity;
}; /* size: 0x0010 */

struct VehicleEngine
{
  /* 0x0000 */ float idleRpms;
  /* 0x0004 */ float maxRpms;
  /* 0x0008 */ float maxTorque;
  /* 0x000c */ float brakingCoeff;
  /* 0x0010 */ union vec4_t loadFadeParams;
  /* 0x0020 */ float loadScale;
  /* 0x0024 */ float loadSmoothing;
  /* 0x0028 */ float throttleLag;
  /* 0x002c */ float pitchScale;
  /* 0x0030 */ struct VehicleEngineSound onload[5];
  /* 0x00bc */ struct VehicleEngineSound offload[5];
  /* 0x0148 */ int numGears;
  /* 0x014c */ int loopLastGear;
  /* 0x0150 */ struct VehicleGearData gears[10];
}; /* size: 0x01c8 */

class bdThread
{
  /* 0x0000 */ class bdRunnable* m_runnable;
  /* 0x0004 */ struct bdThreadArgs m_threadArgs;
  /* 0x0010 */ void* m_handle;
  /* 0x0014 */ BOOL m_isRunning;
  /* 0x0015 */ char Padding_394[3];
  /* 0x0018 */ unsigned int m_stackSize;
  /* 0x001c */ unsigned int m_priority;
}; /* size: 0x0020 */

struct gameState_t
{
  /* 0x0000 */ int stringOffsets[2806];
  /* 0x2bd8 */ unsigned int stringChecksums[2806];
  /* 0x57b0 */ char stringData[65536];
  /* 0x157b0 */ int dataCount;
  /* 0x157b4 */ int stringUpdateFrameNumber;
  /* 0x157b8 */ int matchUIVisibilityFlags;
  /* 0x157bc */ int scr_checksum[3];
  /* 0x157c8 */ unsigned int clientfield_hash;
  /* 0x157cc */ unsigned int server_highest_clientfield_version;
}; /* size: 0x157d0 */

struct GfxMatrix
{
  /* 0x0000 */ union vec4_t m[4];
}; /* size: 0x0040 */

class std::_Exception_ptr
{
  /* 0x0000 */ void* _Data1;
  /* 0x0004 */ void* _Data2;
}; /* size: 0x0008 */

struct clientField_s
{
  /* 0x0000 */ int scriptCallbackFunc;
  /* 0x0004 */ struct clientFieldCodeCallback_s codeCallbackFunc;
  /* 0x000c */ unsigned short nameHash;
  /* 0x000e */ char Padding_395[2];
  /* 0x0010 */ unsigned int fieldOffset;
  /* 0x0014 */ unsigned int fieldType;
  /* 0x0018 */ float floatMin;
  /* 0x001c */ float floatMax;
  /* 0x0020 */ unsigned int accessMask;
  /* 0x0024 */ int bSplitscreenHostOnly;
  /* 0x0028 */ int bCallbacksFor0WhenNew;
  /* 0x002c */ unsigned char bitOffset;
  /* 0x002d */ BOOL obsolete;
  /* 0x002e */ char Padding_396[2];
  /* 0x0030 */ unsigned int numBits;
  /* 0x0034 */ unsigned int version;
}; /* size: 0x0038 */

class bdSingleton<bdNetImpl>
{
  /* 0x0000 */ class bdNetImpl* m_instance;
}; /* size: 0x0001 */

struct D3D11_BUFFER_SRV
{
  union
  {
    /* 0x0000 */ unsigned int FirstElement;
    /* 0x0000 */ unsigned int ElementOffset;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0004 */ unsigned int NumElements;
    /* 0x0004 */ unsigned int ElementWidth;
  }; /* size: 0x0004 */
}; /* size: 0x0008 */

struct D3D11_TEX1D_ARRAY_SRV
{
  /* 0x0000 */ unsigned int MostDetailedMip;
  /* 0x0004 */ unsigned int MipLevels;
  /* 0x0008 */ unsigned int FirstArraySlice;
  /* 0x000c */ unsigned int ArraySize;
}; /* size: 0x0010 */

struct D3D11_TEX2D_ARRAY_SRV
{
  /* 0x0000 */ unsigned int MostDetailedMip;
  /* 0x0004 */ unsigned int MipLevels;
  /* 0x0008 */ unsigned int FirstArraySlice;
  /* 0x000c */ unsigned int ArraySize;
}; /* size: 0x0010 */

struct D3D11_TEX2DMS_SRV
{
  /* 0x0000 */ unsigned int UnusedField_NothingToDefine;
}; /* size: 0x0004 */

struct D3D11_TEX3D_SRV
{
  /* 0x0000 */ unsigned int MostDetailedMip;
  /* 0x0004 */ unsigned int MipLevels;
}; /* size: 0x0008 */

struct D3D11_TEXCUBE_SRV
{
  /* 0x0000 */ unsigned int MostDetailedMip;
  /* 0x0004 */ unsigned int MipLevels;
}; /* size: 0x0008 */

struct D3D11_TEXCUBE_ARRAY_SRV
{
  /* 0x0000 */ unsigned int MostDetailedMip;
  /* 0x0004 */ unsigned int MipLevels;
  /* 0x0008 */ unsigned int First2DArrayFace;
  /* 0x000c */ unsigned int NumCubes;
}; /* size: 0x0010 */

struct D3D11_SHADER_RESOURCE_VIEW_DESC
{
  /* 0x0000 */ enum DXGI_FORMAT Format;
  /* 0x0004 */ enum D3D_SRV_DIMENSION ViewDimension;
  union
  {
    /* 0x0008 */ struct D3D11_BUFFER_SRV Buffer;
    /* 0x0008 */ struct D3D11_TEX1D_SRV Texture1D;
    /* 0x0008 */ struct D3D11_TEX1D_ARRAY_SRV Texture1DArray;
    /* 0x0008 */ struct D3D11_TEX2D_SRV Texture2D;
    /* 0x0008 */ struct D3D11_TEX2D_ARRAY_SRV Texture2DArray;
    /* 0x0008 */ struct D3D11_TEX2DMS_SRV Texture2DMS;
    /* 0x0008 */ struct D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
    /* 0x0008 */ struct D3D11_TEX3D_SRV Texture3D;
    /* 0x0008 */ struct D3D11_TEXCUBE_SRV TextureCube;
    /* 0x0008 */ struct D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
    struct
    {
      /* 0x0008 */ struct D3D11_BUFFEREX_SRV BufferEx;
      /* 0x0014 */ long __PADDING__[1];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
}; /* size: 0x0018 */

struct hitinfo_t
{
  /* 0x0000 */ int hittime;
  /* 0x0004 */ union vec3_t hitp;
  /* 0x0010 */ union vec3_t hitn;
  /* 0x001c */ int stype;
  /* 0x0020 */ int entnum;
  /* 0x0024 */ float intensity;
}; /* size: 0x0028 */

struct MapTriggers
{
  /* 0x0000 */ unsigned int count;
  /* 0x0004 */ struct TriggerModel* models;
  /* 0x0008 */ unsigned int hullCount;
  /* 0x000c */ struct TriggerHull* hulls;
  /* 0x0010 */ unsigned int slabCount;
  /* 0x0014 */ struct TriggerSlab* slabs;
}; /* size: 0x0018 */

typedef struct _TypeDescriptor
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char* name /* zero-length array */;
} TypeDescriptor, *PTypeDescriptor; /* size: 0x0008 */

struct actorLerpFrame_t
{
  /* 0x0000 */ int bAnimating;
  /* 0x0004 */ int animationState;
}; /* size: 0x0008 */

class bdLinkedList<bdReference<bdRemoteTask> >
{
  /* 0x0000 */ class bdLinkedList<bdReference<bdRemoteTask> >::Node* m_head;
  /* 0x0004 */ class bdLinkedList<bdReference<bdRemoteTask> >::Node* m_tail;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

struct EmblemBackground
{
  /* 0x0000 */ struct Material* material;
  /* 0x0004 */ const char* description;
  /* 0x0008 */ int cost;
  /* 0x000c */ int unlockLevel;
  /* 0x0010 */ int unlockPLevel;
  /* 0x0014 */ int unclassifyAt;
  /* 0x0018 */ int sortKey;
  /* 0x001c */ unsigned short bgCategory;
  /* 0x001e */ char __PADDING__[2];
}; /* size: 0x0020 */

class bdLinkedList<bdReference<bdRemoteTask> >::Node
{
  /* 0x0000 */ class bdReference<bdRemoteTask> m_data;
  /* 0x0004 */ class bdLinkedList<bdReference<bdRemoteTask> >::Node* m_next;
  /* 0x0008 */ class bdLinkedList<bdReference<bdRemoteTask> >::Node* m_prev;
}; /* size: 0x000c */

struct clientFieldCallback_s
{
  /* 0x0000 */ struct clientField_s* pField;
  union
  {
    /* 0x0004 */ float oldFloat;
    /* 0x0004 */ unsigned int oldInt;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0008 */ float newFloat;
    /* 0x0008 */ unsigned int newInt;
  }; /* size: 0x0004 */
  /* 0x000c */ unsigned int localClientNum;
  /* 0x0010 */ unsigned int entNum;
  /* 0x0014 */ BOOL bInitialSnap;
  /* 0x0015 */ BOOL bNewEnt;
  /* 0x0016 */ BOOL bWasDemoJump;
  /* 0x0017 */ char __PADDING__[1];
}; /* size: 0x0018 */

struct bgsClientFieldCallbacks_s
{
  /* 0x0000 */ struct clientFieldCallback_s clientFieldCallbacks[256][1];
  /* 0x1800 */ unsigned int numCallbacks[1];
}; /* size: 0x1804 */

struct Engine
{
  /* 0x0000 */ float throttle;
  /* 0x0004 */ float load;
  /* 0x0008 */ int currentGear;
  /* 0x000c */ float rpms;
  /* 0x0010 */ float targetDownShiftRPM;
  /* 0x0014 */ float inAirTime;
  /* 0x0018 */ BOOL onGround;
  /* 0x0019 */ char Padding_397[3];
  /* 0x001c */ enum VehicleEngineState state;
}; /* size: 0x0020 */

class bdRemoteTask
{
  /* 0x0000 */ long Padding_398[2];
  /* 0x0008 */ class bdStopwatch m_timer;
  /* 0x0010 */ float m_timeout;
  /* 0x0014 */ enum bdRemoteTask::bdStatus m_status;
  /* 0x0018 */ class bdReference<bdByteBuffer> m_byteResults;
  /* 0x001c */ class bdTaskResult* m_taskResult;
  /* 0x0020 */ class bdTaskResult** m_taskResultList;
  /* 0x0024 */ unsigned int m_numResults;
  /* 0x0028 */ unsigned int m_maxNumResults;
  /* 0x002c */ unsigned int m_totalNumResults;
  /* 0x0030 */ unsigned __int64 m_transactionID;
  /* 0x0038 */ enum bdLobbyErrorCode m_errorCode;
  /* 0x003c */ class bdTaskResultProcessor* m_taskResultProcessor;
}; /* size: 0x0040 */

struct fileShareReadFileInfo
{
  /* 0x0000 */ unsigned __int64 fileID;
  /* 0x0008 */ unsigned int fileSize;
  /* 0x000c */ enum fileShareLocation location;
  /* 0x0010 */ char* buffer;
  /* 0x0014 */ unsigned int bufferSize;
  /* 0x0018 */ BOOL isStreamed;
  /* 0x0019 */ char Padding_399[3];
  /* 0x001c */ void* cacheBuffer;
  /* 0x0020 */ unsigned int cacheBufferSize;
  /* 0x0024 */ unsigned int startByte;
  /* 0x0028 */ unsigned int endByte;
  /* 0x002c */ void* dataCallback /* function */;
  /* 0x0030 */ void* successCallback /* function */;
  /* 0x0034 */ void* failureCallback /* function */;
}; /* size: 0x0038 */

struct in6_addr
{
  union
  {
    union
    {
      /* 0x0000 */ unsigned char Byte[16];
      /* 0x0000 */ unsigned short Word[8];
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ u;
}; /* size: 0x0010 */

struct sockaddr_in6_w2ksp1
{
  /* 0x0000 */ short sin6_family;
  /* 0x0002 */ unsigned short sin6_port;
  /* 0x0004 */ unsigned long sin6_flowinfo;
  /* 0x0008 */ struct in6_addr sin6_addr;
  /* 0x0018 */ unsigned long sin6_scope_id;
}; /* size: 0x001c */

struct ITypeInfo
{
}; /* size: 0x0004 */

struct $_s__RTTIBaseClassArray$_extraBytes_8
{
  /* 0x0000 */ const struct _s__RTTIBaseClassDescriptor2* arrayOfBaseClassDescriptors[2];
  /* 0x0008 */ char __PADDING__[1];
}; /* size: 0x0009 */

class bdTaskResultProcessor
{
}; /* size: 0x0004 */

struct ID3D11DeviceChild
{
}; /* size: 0x0004 */

struct tagCAPROPVARIANT
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ struct tagPROPVARIANT* pElems;
}; /* size: 0x0008 */

typedef struct _UNICODE_STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ unsigned short* Buffer;
} UNICODE_STRING, *PUNICODE_STRING; /* size: 0x0008 */

class bdCypher
{
}; /* size: 0x0004 */

struct tagTHREADNAME_INFO
{
  /* 0x0000 */ unsigned long dwType;
  /* 0x0004 */ const char* szName;
  /* 0x0008 */ unsigned long dwThreadID;
  /* 0x000c */ unsigned long dwFlags;
}; /* size: 0x0010 */

struct _TP_POOL;

struct _TP_CLEANUP_GROUP;

struct _ACTIVATION_CONTEXT;

struct _TP_CALLBACK_INSTANCE;

struct Qdb
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int len;
  /* 0x0008 */ unsigned char* buffer;
}; /* size: 0x000c */

typedef struct _TP_CALLBACK_ENVIRON_V1
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ struct _TP_POOL* Pool;
  /* 0x0008 */ struct _TP_CLEANUP_GROUP* CleanupGroup;
  /* 0x000c */ void* CleanupGroupCancelCallback /* function */;
  /* 0x0010 */ void* RaceDll;
  /* 0x0014 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0018 */ void* FinalizationCallback /* function */;
  union
  {
    union
    {
      /* 0x001c */ unsigned long Flags;
      struct
      {
        struct /* bitfield */
        {
          /* 0x001c */ unsigned long LongFunction : 1; /* bit position: 0 */
          /* 0x001c */ unsigned long Persistent : 1; /* bit position: 1 */
          /* 0x001c */ unsigned long Private : 30; /* bit position: 2 */
        }; /* bitfield */
      } /* size: 0x0004 */ s;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
} TP_CALLBACK_ENVIRON_V1, *PTP_CALLBACK_ENVIRON_V1; /* size: 0x0020 */

struct VariableValue
{
  union
  {
    /* 0x0000 */ unsigned __int64 v64;
    struct
    {
      /* 0x0000 */ int type;
      /* 0x0004 */ union VariableUnion u;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

typedef struct _XMU555
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short x : 5; /* bit position: 0 */
      /* 0x0000 */ unsigned short y : 5; /* bit position: 5 */
      /* 0x0000 */ unsigned short z : 5; /* bit position: 10 */
      /* 0x0000 */ unsigned short w : 1; /* bit position: 15 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short v;
  }; /* size: 0x0002 */
} XMU555, *PXMU555; /* size: 0x0002 */

struct DObjSkelMat
{
  /* 0x0000 */ union vec4_t axis[3];
  /* 0x0030 */ union vec4_t origin;
}; /* size: 0x0040 */

union XAnimDeltaPartQuatData2
{
  union
  {
    /* 0x0000 */ struct XAnimDeltaPartQuatDataFrames2 frames;
    /* 0x0000 */ short frame0[2];
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

class rigid_body_constraint_hinge
{
  /* 0x0000 */ long Padding_400[4];
  /* 0x0010 */ class phys_vec3 m_b1_r_loc;
  /* 0x0020 */ class phys_vec3 m_b2_r_loc;
  /* 0x0030 */ class phys_vec3 m_b1_axis_loc;
  /* 0x0040 */ class phys_vec3 m_b2_axis_loc;
  /* 0x0050 */ class phys_vec3 m_b1_a1_loc;
  /* 0x0060 */ class phys_vec3 m_b1_a2_loc;
  /* 0x0070 */ class phys_vec3 m_b1_ref_loc;
  /* 0x0080 */ class phys_vec3 m_b2_ref_min_loc;
  /* 0x0090 */ class phys_vec3 m_b2_ref_max_loc;
  /* 0x00a0 */ float m_damp_k;
  /* 0x00a4 */ unsigned int m_flags;
  /* 0x00a8 */ class pulse_sum_cache m_ps_cache[8];
}; /* size: 0x00d0 */

struct XMFLOAT2A
{
}; /* size: 0x0010 */

struct textExp_s
{
  /* 0x0000 */ struct ExpressionStatement textExp;
}; /* size: 0x0010 */

struct D3D11_COUNTER_DESC
{
  /* 0x0000 */ enum D3D11_COUNTER Counter;
  /* 0x0004 */ unsigned int MiscFlags;
}; /* size: 0x0008 */

struct windowDef_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ struct rectDef_s rect;
  /* 0x001c */ struct rectDef_s rectClient;
  /* 0x0034 */ const char* group;
  /* 0x0038 */ unsigned char style;
  /* 0x0039 */ unsigned char border;
  /* 0x003a */ unsigned char modal;
  /* 0x003b */ unsigned char frameSides;
  /* 0x003c */ float frameTexSize;
  /* 0x0040 */ float frameSize;
  /* 0x0044 */ int ownerDraw;
  /* 0x0048 */ int ownerDrawFlags;
  /* 0x004c */ float borderSize;
  /* 0x0050 */ int staticFlags;
  /* 0x0054 */ int dynamicFlags[1];
  /* 0x0058 */ int nextTime;
  /* 0x005c */ union vec4_t foreColor;
  /* 0x006c */ union vec4_t backColor;
  /* 0x007c */ union vec4_t borderColor;
  /* 0x008c */ union vec4_t outlineColor;
  /* 0x009c */ float rotation;
  /* 0x00a0 */ struct Material* background;
}; /* size: 0x00a4 */

struct VehicleStun
{
  /* 0x0000 */ BOOL m_changed_this_frame;
  /* 0x0001 */ char Padding_401[3];
  /* 0x0004 */ float m_stun_time;
  /* 0x0008 */ float m_last_throttle;
  /* 0x000c */ float m_throttle_stun_time;
  /* 0x0010 */ float m_last_brake;
  /* 0x0014 */ float m_brake_stun_time;
}; /* size: 0x0018 */

class bdDTLSCookieEcho
{
  /* 0x0000 */ long Padding_402[3];
  /* 0x000c */ class bdDTLSInitAck m_cookie;
  /* 0x003c */ unsigned char m_ca[37];
  /* 0x0061 */ unsigned char m_secID[8];
  /* 0x0069 */ unsigned char m_ECCKey[100];
}; /* size: 0x00d0 */

struct ClipInfo
{
  /* 0x0000 */ int planeCount;
  /* 0x0004 */ struct cplane_s* planes;
  /* 0x0008 */ unsigned int numMaterials;
  /* 0x000c */ struct ClipMaterial* materials;
  /* 0x0010 */ unsigned int numBrushSides;
  /* 0x0014 */ struct cbrushside_t* brushsides;
  /* 0x0018 */ unsigned int leafbrushNodesCount;
  /* 0x001c */ struct cLeafBrushNode_s* leafbrushNodes;
  /* 0x0020 */ unsigned int numLeafBrushes;
  /* 0x0024 */ unsigned short* leafbrushes;
  /* 0x0028 */ unsigned int numBrushVerts;
  /* 0x002c */ union vec3_t* brushVerts;
  /* 0x0030 */ unsigned int nuinds;
  /* 0x0034 */ unsigned short* uinds;
  /* 0x0038 */ unsigned short numBrushes;
  /* 0x003a */ char Padding_403[2];
  /* 0x003c */ struct cbrush_t* brushes;
  /* 0x0040 */ struct Bounds* brushBounds;
  /* 0x0044 */ int* brushContents;
}; /* size: 0x0048 */

struct menuDef_t
{
  /* 0x0000 */ struct windowDef_t window;
  /* 0x00a4 */ const char* font;
  /* 0x00a8 */ int fullScreen;
  /* 0x00ac */ int ui3dWindowId;
  /* 0x00b0 */ int itemCount;
  /* 0x00b4 */ int fontIndex;
  /* 0x00b8 */ int cursorItem[1];
  /* 0x00bc */ int fadeCycle;
  /* 0x00c0 */ int priority;
  /* 0x00c4 */ float fadeClamp;
  /* 0x00c8 */ float fadeAmount;
  /* 0x00cc */ float fadeInAmount;
  /* 0x00d0 */ float blurRadius;
  /* 0x00d4 */ int openSlideSpeed;
  /* 0x00d8 */ int closeSlideSpeed;
  /* 0x00dc */ int openSlideDirection;
  /* 0x00e0 */ int closeSlideDirection;
  /* 0x00e4 */ struct rectDef_s initialRectInfo;
  /* 0x00fc */ int openFadingTime;
  /* 0x0100 */ int closeFadingTime;
  /* 0x0104 */ int fadeTimeCounter;
  /* 0x0108 */ int slideTimeCounter;
  /* 0x010c */ struct GenericEventHandler* onEvent;
  /* 0x0110 */ struct ItemKeyHandler* onKey;
  /* 0x0114 */ struct ExpressionStatement visibleExp;
  /* 0x0124 */ long Padding_404;
  /* 0x0128 */ unsigned __int64 showBits;
  /* 0x0130 */ unsigned __int64 hideBits;
  /* 0x0138 */ const char* allowedBinding;
  /* 0x013c */ const char* soundName;
  /* 0x0140 */ int imageTrack;
  /* 0x0144 */ int control;
  /* 0x0148 */ union vec4_t focusColor;
  /* 0x0158 */ union vec4_t disableColor;
  /* 0x0168 */ struct ExpressionStatement rectXExp;
  /* 0x0178 */ struct ExpressionStatement rectYExp;
  /* 0x0188 */ struct itemDef_s** items;
  /* 0x018c */ long __PADDING__[1];
}; /* size: 0x0190 */

class std::allocator<wchar_t>
{
}; /* size: 0x0001 */

struct group_filter
{
  /* 0x0000 */ unsigned long gf_interface;
  /* 0x0004 */ long Padding_405;
  /* 0x0008 */ struct sockaddr_storage_xp gf_group;
  /* 0x0088 */ enum MULTICAST_MODE_TYPE gf_fmode;
  /* 0x008c */ unsigned long gf_numsrc;
  /* 0x0090 */ struct sockaddr_storage_xp gf_slist[1];
}; /* size: 0x0110 */

struct ItemKeyHandler
{
  /* 0x0000 */ int key;
  /* 0x0004 */ struct GenericEventScript* keyScript;
  /* 0x0008 */ struct ItemKeyHandler* next;
}; /* size: 0x000c */

struct tagCAFLT
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ float* pElems;
}; /* size: 0x0008 */

union itemDefData_t
{
  union
  {
    /* 0x0000 */ struct textDef_s* textDef;
    /* 0x0000 */ struct imageDef_s* imageDef;
    /* 0x0000 */ struct focusItemDef_s* blankButtonDef;
    /* 0x0000 */ struct ownerDrawDef_s* ownerDrawDef;
    /* 0x0000 */ void* data;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct itemDef_s
{
  /* 0x0000 */ struct windowDef_t window;
  /* 0x00a4 */ int type;
  /* 0x00a8 */ int dataType;
  /* 0x00ac */ int imageTrack;
  /* 0x00b0 */ const char* dvar;
  /* 0x00b4 */ const char* profileVar;
  /* 0x00b8 */ const char* dvarTest;
  /* 0x00bc */ const char* enableDvar;
  /* 0x00c0 */ int dvarFlags;
  /* 0x00c4 */ union itemDefData_t typeData;
  /* 0x00c8 */ struct menuDef_t* parent;
  /* 0x00cc */ struct rectData_s* rectExpData;
  /* 0x00d0 */ struct ExpressionStatement visibleExp;
  /* 0x00e0 */ unsigned __int64 showBits;
  /* 0x00e8 */ unsigned __int64 hideBits;
  /* 0x00f0 */ struct ExpressionStatement forecolorAExp;
  /* 0x0100 */ int ui3dWindowId;
  /* 0x0104 */ struct GenericEventHandler* onEvent;
  /* 0x0108 */ struct UIAnimInfo* animInfo;
  /* 0x010c */ long __PADDING__[1];
}; /* size: 0x0110 */

struct CD3D11_BUFFER_DESC
{
}; /* size: 0x0018 */

struct tagVersionedStream
{
  /* 0x0000 */ struct _GUID guidVersion;
  /* 0x0010 */ struct IStream* pStream;
}; /* size: 0x0014 */

class bdConsoleID
{
  /* 0x0000 */ long Padding_406;
  /* 0x0004 */ unsigned char m_id[16];
}; /* size: 0x0014 */

class std::hash<__int64>
{
}; /* size: 0x0001 */

class bdCommonAddrInfo
{
}; /* size: 0x0001 */

struct tagCASCODE
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long* pElems;
}; /* size: 0x0008 */

union focusDefData_t
{
  union
  {
    /* 0x0000 */ struct listBoxDef_s* listBox;
    /* 0x0000 */ struct multiDef_s* multi;
    /* 0x0000 */ struct profileMultiDef_s* profileMulti;
    /* 0x0000 */ struct editFieldDef_s* editField;
    /* 0x0000 */ struct enumDvarDef_s* enumDvar;
    /* 0x0000 */ void* data;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct focusItemDef_s
{
  /* 0x0000 */ const char* mouseEnterText;
  /* 0x0004 */ const char* mouseExitText;
  /* 0x0008 */ const char* mouseEnter;
  /* 0x000c */ const char* mouseExit;
  /* 0x0010 */ struct ItemKeyHandler* onKey;
  /* 0x0014 */ union focusDefData_t focusTypeData;
}; /* size: 0x0018 */

struct FxBeamTracerData
{
  /* 0x0000 */ float wiggleDist;
  /* 0x0004 */ float textureReps;
  /* 0x0008 */ float segLength;
}; /* size: 0x000c */

struct VehicleTarget
{
  /* 0x0000 */ int valid;
  /* 0x0004 */ int hasTargetYaw;
  /* 0x0008 */ int targetEnt;
  /* 0x000c */ int lookAtEnt;
  /* 0x0010 */ union vec3_t targetOrigin;
  /* 0x001c */ union vec3_t targetOffset;
  /* 0x0028 */ float targetYaw;
}; /* size: 0x002c */

struct ID3D11RenderTargetView
{
}; /* size: 0x0004 */

struct GfxShadowMapVolume
{
  /* 0x0000 */ unsigned int control;
  /* 0x0004 */ unsigned int padding1;
  /* 0x0008 */ unsigned int padding2;
  /* 0x000c */ unsigned int padding3;
}; /* size: 0x0010 */

typedef struct _XMMATRIX
{
  union
  {
    /* 0x0000 */ union __m128 r[4];
    struct
    {
      /* 0x0000 */ float _11;
      /* 0x0004 */ float _12;
      /* 0x0008 */ float _13;
      /* 0x000c */ float _14;
      /* 0x0010 */ float _21;
      /* 0x0014 */ float _22;
      /* 0x0018 */ float _23;
      /* 0x001c */ float _24;
      /* 0x0020 */ float _31;
      /* 0x0024 */ float _32;
      /* 0x0028 */ float _33;
      /* 0x002c */ float _34;
      /* 0x0030 */ float _41;
      /* 0x0034 */ float _42;
      /* 0x0038 */ float _43;
      /* 0x003c */ float _44;
    }; /* size: 0x0040 */
    /* 0x0000 */ float m[4][4];
  }; /* size: 0x0040 */
} XMMATRIX, *PXMMATRIX; /* size: 0x0040 */

struct VehicleJitter
{
  /* 0x0000 */ int jitterPeriodMin;
  /* 0x0004 */ int jitterPeriodMax;
  /* 0x0008 */ int jitterEndTime;
  /* 0x000c */ union vec3_t jitterOffsetRange;
  /* 0x0018 */ union vec3_t jitterDeltaAccel;
  /* 0x0024 */ union vec3_t jitterAccel;
  /* 0x0030 */ union vec3_t jitterPos;
}; /* size: 0x003c */

struct imageDef_s
{
  /* 0x0000 */ struct ExpressionStatement materialExp;
}; /* size: 0x0010 */

struct WheelState
{
  /* 0x0000 */ enum WheelEffectState m_state;
  /* 0x0004 */ enum WheelEffectState m_last_state;
  /* 0x0008 */ float m_state_time;
  /* 0x000c */ float m_rate;
}; /* size: 0x0010 */

class NitrousVehicleController
{
  /* 0x0000 */ class phys_vec3 m_script_goal_position;
  /* 0x0010 */ float m_script_goal_radius;
  /* 0x0014 */ float m_script_goal_speed;
  /* 0x0018 */ float m_drive_path_speed;
  /* 0x001c */ float m_horse_target_speed;
  /* 0x0020 */ enum NitrousVehicleController::VehicleHorseControlState m_horse_control_state;
  /* 0x0024 */ float m_stopped_time;
  /* 0x0028 */ float m_stuck_time;
  /* 0x002c */ long Padding_407;
  /* 0x0030 */ class phys_vec3 m_stuck_position;
  /* 0x0040 */ struct usercmd_s m_cmd;
  /* 0x0084 */ union vec3_t m_cmd_viewangles;
  /* 0x0090 */ BOOL m_cmd_valid;
  /* 0x0091 */ BOOL m_stop_at_goal;
  /* 0x0092 */ char Padding_408[2];
  /* 0x0094 */ float m_jump_held_time;
  /* 0x0098 */ union vec2_t m_jump_input;
  /* 0x00a0 */ struct VehicleStun m_stun;
}; /* size: 0x00c0 */

struct minspec_mutex
{
  /* 0x0000 */ volatile unsigned int m_token;
}; /* size: 0x0004 */

class NitrousVehicle
{
  /* 0x0000 */ struct PhysObjUserData* m_phys_user_data;
  /* 0x0004 */ struct WheelState m_wheel_state[4];
  /* 0x0044 */ long Padding_409[3];
  /* 0x0050 */ class phys_mat44 m_wheel_orig_relpo[6];
  /* 0x01d0 */ int m_wheel_damage[6];
  /* 0x01e8 */ int m_wheel_surf_types[6];
  /* 0x0200 */ float m_wheel_yaw[6];
  /* 0x0218 */ float m_steer_factor;
  /* 0x021c */ float m_steer_scale;
  /* 0x0220 */ const struct VehicleParameter* m_parameter;
  /* 0x0224 */ float m_throttle;
  /* 0x0228 */ float m_brake;
  /* 0x022c */ float m_hand_brake;
  /* 0x0230 */ float m_script_brake;
  /* 0x0234 */ long m_boost_start_time;
  /* 0x0238 */ float m_boost_time_pool;
  /* 0x023c */ float m_forward_vel;
  /* 0x0240 */ class phys_vec3 m_ground_vel;
  /* 0x0250 */ float m_hand_brake_friction_time;
  /* 0x0254 */ struct gentity_t* m_owner;
  /* 0x0258 */ int m_entnum;
  /* 0x025c */ const struct VehicleDef* m_vehicle_def;
  /* 0x0260 */ struct XModel* m_xmodel;
  /* 0x0264 */ class rigid_body_constraint_custom_orientation* m_orientation_constraint;
  /* 0x0268 */ class rigid_body_constraint_custom_path* m_vpc;
  /* 0x026c */ int m_flags;
  /* 0x0270 */ int m_notify_flags;
  /* 0x0274 */ int m_server_notify_flags;
  /* 0x0278 */ union vec3_t m_collision_hitp;
  /* 0x0284 */ union vec3_t m_collision_hitn;
  /* 0x0290 */ float m_collision_intensity;
  /* 0x0294 */ int m_collision_stype;
  /* 0x0298 */ int m_collision_entnum;
  /* 0x029c */ long Padding_410;
  /* 0x02a0 */ class phys_mat44 m_mat;
  /* 0x02e0 */ class NitrousVehicleController mVehicleController;
  /* 0x03a0 */ float m_fake_rpm;
  /* 0x03a4 */ int m_num_colliding_wheels;
  /* 0x03a8 */ float m_current_side_fric_scale;
  /* 0x03ac */ float m_current_fwd_fric_scale;
  /* 0x03b0 */ float m_stuck_time;
  /* 0x03b4 */ int m_lastNetworkTime;
  /* 0x03b8 */ int m_lastErrorReductionTime;
  /* 0x03bc */ union vec3_t m_networkErrorOrigin;
  /* 0x03c8 */ union vec3_t m_networkErrorAngles;
  /* 0x03d4 */ int m_trackDistAccumLeftInches;
  /* 0x03d8 */ int m_trackDistAccumRightInches;
  /* 0x03dc */ int m_sfx_state_flags;
  /* 0x03e0 */ float m_speed_scale;
  /* 0x03e4 */ float m_drivepath_scale;
  /* 0x03e8 */ int m_throttle_held_down;
  /* 0x03ec */ BOOL m_throttle_time_started;
  /* 0x03ed */ char Padding_411[3];
  /* 0x03f0 */ union vec3_t m_last_origin;
  /* 0x03fc */ union vec3_t m_last_angles;
  /* 0x0408 */ struct minspec_mutex m_mutex;
  /* 0x040c */ int id;
  /* 0x0410 */ int refcount;
  /* 0x0414 */ class rigid_body_constraint_wheel* m_wheels[6];
  /* 0x042c */ float m_desired_speed_factor;
  /* 0x0430 */ float m_acceleration_factor;
  /* 0x0434 */ float m_power_braking_factor;
  /* 0x0438 */ float m_braking_factor;
  /* 0x043c */ float m_coasting_factor;
  /* 0x0440 */ float m_reference_wheel_radius;
  /* 0x0444 */ float m_steer_current_angle;
  /* 0x0448 */ float m_steer_max_angle;
  /* 0x044c */ float m_steer_speed;
  /* 0x0450 */ class phys_vec3 m_steer_front_pt_loc;
  /* 0x0460 */ float m_steer_front_back_length;
  /* 0x0464 */ float m_min_turning_radius;
  /* 0x0468 */ unsigned int m_state_flags;
}; /* size: 0x0470 */

struct ownerDrawDef_s
{
  /* 0x0000 */ struct ExpressionStatement dataExp;
}; /* size: 0x0010 */

class bdEventInfo
{
  /* 0x0000 */ long Padding_412;
  /* 0x0004 */ BOOL m_isBinary;
  /* 0x0005 */ char Padding_413[3];
  /* 0x0008 */ unsigned int m_category;
  /* 0x000c */ unsigned int m_length;
  /* 0x0010 */ unsigned char* m_eventDesc;
}; /* size: 0x0014 */

struct BitField
{
  /* 0x0000 */ const unsigned int* array;
  /* 0x0004 */ unsigned int rowSize;
  /* 0x0008 */ unsigned int count;
  /* 0x000c */ unsigned int mbits;
}; /* size: 0x0010 */

struct VehicleSeat
{
  /* 0x0000 */ int _occupantEntNum;
}; /* size: 0x0004 */

struct VehicleDef
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ short type;
  /* 0x0006 */ char Padding_414[2];
  /* 0x0008 */ int remoteControl;
  /* 0x000c */ int bulletDamage;
  /* 0x0010 */ int armorPiercingDamage;
  /* 0x0014 */ int grenadeDamage;
  /* 0x0018 */ int projectileDamage;
  /* 0x001c */ int projectileSplashDamage;
  /* 0x0020 */ int heavyExplosiveDamage;
  /* 0x0024 */ short cameraMode;
  /* 0x0026 */ char Padding_415[2];
  /* 0x0028 */ int autoRecenterOnAccel;
  /* 0x002c */ int thirdPersonDriver;
  /* 0x0030 */ int thirdPersonUseVehicleRoll;
  /* 0x0034 */ int thirdPersonCameraPitchVehicleRelative;
  /* 0x0038 */ int thirdPersonCameraHeightWorldRelative;
  /* 0x003c */ float thirdPersonCameraRange;
  /* 0x0040 */ float thirdPersonCameraMinPitchClamp;
  /* 0x0044 */ float thirdPersonCameraMaxPitchClamp;
  /* 0x0048 */ float thirdPersonCameraHeight[2];
  /* 0x0050 */ float thirdPersonCameraPitch[2];
  /* 0x0058 */ int cameraAlwaysAutoCenter;
  /* 0x005c */ float cameraAutoCenterLerpRate;
  /* 0x0060 */ float cameraAutoCenterMaxLerpRate;
  /* 0x0064 */ float thirdPersonCameraSpringDistance;
  /* 0x0068 */ float thirdPersonCameraSpringTime;
  /* 0x006c */ float thirdPersonCameraHandbrakeTurnRateInc;
  /* 0x0070 */ float cameraFOV;
  /* 0x0074 */ float cameraRollFraction;
  /* 0x0078 */ union vec3_t tagPlayerOffset;
  /* 0x0084 */ int killcamCollision;
  /* 0x0088 */ float killcamDist;
  /* 0x008c */ float killcamZDist;
  /* 0x0090 */ float killcamMinDist;
  /* 0x0094 */ float killcamZTargetOffset;
  /* 0x0098 */ float killcamFOV;
  /* 0x009c */ float killcamNearBlur;
  /* 0x00a0 */ float killcamNearBlurStart;
  /* 0x00a4 */ float killcamNearBlurEnd;
  /* 0x00a8 */ float killcamFarBlur;
  /* 0x00ac */ float killcamFarBlurStart;
  /* 0x00b0 */ float killcamFarBlurEnd;
  /* 0x00b4 */ int isDrivable;
  /* 0x00b8 */ int numberOfSeats;
  /* 0x00bc */ int numberOfGunners;
  /* 0x00c0 */ int seatSwitchOrder[11];
  /* 0x00ec */ int driverControlledGunPos;
  /* 0x00f0 */ float entryPointRadius[5];
  /* 0x0104 */ float texScrollScale;
  /* 0x0108 */ float wheelRotRate;
  /* 0x010c */ float extraWheelRotScale;
  /* 0x0110 */ int wheelChildTakesSteerYaw;
  /* 0x0114 */ float maxSpeed;
  /* 0x0118 */ float maxSpeedVertical;
  /* 0x011c */ float accel;
  /* 0x0120 */ float accelVertical;
  /* 0x0124 */ float rotRate;
  /* 0x0128 */ float rotAccel;
  /* 0x012c */ float maxBodyPitch;
  /* 0x0130 */ float maxBodyRoll;
  /* 0x0134 */ float collisionDamage;
  /* 0x0138 */ float collisionSpeed;
  /* 0x013c */ float suspensionTravel;
  /* 0x0140 */ float heliCollisionScalar;
  /* 0x0144 */ float viewPitchOffset;
  /* 0x0148 */ float viewInfluence;
  /* 0x014c */ float tiltFromAcceleration[2];
  /* 0x0154 */ float tiltFromDeceleration[2];
  /* 0x015c */ float tiltFromVelocity[2];
  /* 0x0164 */ float tiltSpeed[2];
  /* 0x016c */ const char* turretWeapon;
  /* 0x0170 */ struct view_limits_t turretViewLimits;
  /* 0x0190 */ float turretRotRate;
  /* 0x0194 */ int turretClampPlayerView;
  /* 0x0198 */ int turretLockTurretToPlayerView;
  /* 0x019c */ const char* gunnerWeapon[4];
  /* 0x01ac */ unsigned short gunnerWeaponIndex[4];
  /* 0x01b4 */ float gunnerRotRate;
  /* 0x01b8 */ union vec2_t gunnerRestAngles[4];
  /* 0x01d8 */ struct view_limits_t passengerViewLimits[6];
  /* 0x0298 */ const char* sndNames[2];
  /* 0x02a0 */ unsigned int sndIndices[2];
  /* 0x02a8 */ const char* sndMaterialNames[3];
  /* 0x02b4 */ float skidSpeedMin;
  /* 0x02b8 */ float skidSpeedMax;
  /* 0x02bc */ const char* futzName;
  /* 0x02c0 */ float futzBlend;
  /* 0x02c4 */ int animType;
  /* 0x02c8 */ const char* animSet;
  /* 0x02cc */ int scriptedAnimationEntry;
  /* 0x02d0 */ float mantleAngles[4];
  /* 0x02e0 */ unsigned short extraWheelTags[4];
  /* 0x02e8 */ unsigned short driverHideTag;
  /* 0x02ea */ char Padding_416[2];
  /* 0x02ec */ struct XModel* attachmentModels[4];
  /* 0x02fc */ unsigned short attachmentTags[4];
  /* 0x0304 */ struct XModel* deathAttachmentModels[4];
  /* 0x0314 */ unsigned short deathAttachmentTags[4];
  /* 0x031c */ float tracerOffset[2];
  /* 0x0324 */ struct XModel* model;
  /* 0x0328 */ struct XModel* viewModel;
  /* 0x032c */ struct XModel* deathModel;
  /* 0x0330 */ struct XModel* enemyModel;
  /* 0x0334 */ float modelSwapDelay;
  /* 0x0338 */ const struct FxEffectDef* exhaustFx;
  /* 0x033c */ int oneExhaust;
  /* 0x0340 */ const struct FxEffectDef* treadFx[32];
  /* 0x03c0 */ const struct FxEffectDef* deathFx;
  /* 0x03c4 */ unsigned short deathFxTag;
  /* 0x03c6 */ char Padding_417[2];
  /* 0x03c8 */ const char* deathFxSound;
  /* 0x03cc */ const struct FxEffectDef* lightFx[4];
  /* 0x03dc */ unsigned short lightFxTag[4];
  /* 0x03e4 */ const struct FxEffectDef* friendlyLightFx;
  /* 0x03e8 */ unsigned short friendlyLightFxTag;
  /* 0x03ea */ char Padding_418[2];
  /* 0x03ec */ const struct FxEffectDef* enemyLightFx;
  /* 0x03f0 */ unsigned short enemyLightFxTag;
  /* 0x03f2 */ char Padding_419[2];
  /* 0x03f4 */ float radiusDamageMin;
  /* 0x03f8 */ float radiusDamageMax;
  /* 0x03fc */ float radiusDamageRadius;
  /* 0x0400 */ const char* shootShock;
  /* 0x0404 */ const char* shootRumble;
  /* 0x0408 */ float deathQuakeScale;
  /* 0x040c */ float deathQuakeDuration;
  /* 0x0410 */ float deathQuakeRadius;
  /* 0x0414 */ const char* rumbleType;
  /* 0x0418 */ float rumbleScale;
  /* 0x041c */ float rumbleDuration;
  /* 0x0420 */ float rumbleRadius;
  /* 0x0424 */ float rumbleBaseTime;
  /* 0x0428 */ float rumbleAdditionalTime;
  /* 0x042c */ int healthDefault;
  /* 0x0430 */ int healthMin;
  /* 0x0434 */ int healthMax;
  /* 0x0438 */ int eTeam;
  /* 0x043c */ int boostAccelMultiplier;
  /* 0x0440 */ float boostDuration;
  /* 0x0444 */ float boostSpeedIncrease;
  /* 0x0448 */ int addToCompass;
  /* 0x044c */ int addToCompassEnemy;
  /* 0x0450 */ const char* compassIcon;
  /* 0x0454 */ struct Material* compassIconMaterial;
  /* 0x0458 */ const char* gasButtonName;
  /* 0x045c */ int gasButton;
  /* 0x0460 */ const char* reverseBrakeButtonName;
  /* 0x0464 */ int reverseBrakeButton;
  /* 0x0468 */ const char* handBrakeButtonName;
  /* 0x046c */ int handBrakeButton;
  /* 0x0470 */ const char* attackButtonName;
  /* 0x0474 */ int attackButton;
  /* 0x0478 */ const char* attackSecondaryButtonName;
  /* 0x047c */ int attackSecondaryButton;
  /* 0x0480 */ const char* boostButtonName;
  /* 0x0484 */ int boostButton;
  /* 0x0488 */ const char* moveUpButtonName;
  /* 0x048c */ int moveUpButton;
  /* 0x0490 */ const char* moveDownButtonName;
  /* 0x0494 */ int moveDownButton;
  /* 0x0498 */ const char* switchSeatButtonName;
  /* 0x049c */ int switchSeatButton;
  /* 0x04a0 */ const char* steerGraphName;
  /* 0x04a4 */ struct GraphFloat* steerGraph;
  /* 0x04a8 */ const char* accelGraphName;
  /* 0x04ac */ struct GraphFloat* accelGraph;
  /* 0x04b0 */ int isNitrous;
  /* 0x04b4 */ int isFourWheelSteering;
  /* 0x04b8 */ int useCollmap;
  /* 0x04bc */ float radius;
  /* 0x04c0 */ float minHeight;
  /* 0x04c4 */ float maxHeight;
  /* 0x04c8 */ float max_fric_tilt_angle;
  /* 0x04cc */ float max_fric_tilt;
  /* 0x04d0 */ int noDirectionalDamage;
  /* 0x04d4 */ int fakeBodyStabilizer;
  /* 0x04d8 */ float vehHelicopterBoundsRadius;
  /* 0x04dc */ float vehHelicopterDecelerationFwd;
  /* 0x04e0 */ float vehHelicopterDecelerationSide;
  /* 0x04e4 */ float vehHelicopterDecelerationUp;
  /* 0x04e8 */ float vehHelicopterTiltFromControllerAxes;
  /* 0x04ec */ float vehHelicopterTiltFromFwdAndYaw;
  /* 0x04f0 */ float vehHelicopterTiltFromFwdAndYaw_VelAtMaxTilt;
  /* 0x04f4 */ float vehHelicopterTiltMomentum;
  /* 0x04f8 */ int vehHelicopterQuadRotor;
  /* 0x04fc */ int vehHelicopterAccelTwardsView;
  /* 0x0500 */ float maxRotorArmMovementAngle;
  /* 0x0504 */ float maxRotorArmRotationAngle;
  /* 0x0508 */ int vehHelicopterMaintainHeight;
  /* 0x050c */ int vehHelicopterMaintainMaxHeight;
  /* 0x0510 */ float vehHelicopterMaintainHeightLimit;
  /* 0x0514 */ float vehHelicopterMaintainHeightAccel;
  /* 0x0518 */ float vehHelicopterMaintainHeightMinimum;
  /* 0x051c */ float vehHelicopterMaintainHeightMaximum;
  /* 0x0520 */ float vehHelicopterMaintainCeilingMinimum;
  /* 0x0524 */ int joltVehicle;
  /* 0x0528 */ int joltVehicleDriver;
  /* 0x052c */ float joltMaxTime;
  /* 0x0530 */ float joltTime;
  /* 0x0534 */ float joltWaves;
  /* 0x0538 */ float joltIntensity;
  /* 0x053c */ struct VehicleParameter nitrousVehParams;
  /* 0x0638 */ float driveBySoundRadius[2];
  /* 0x0640 */ struct VehicleDriveBySound driveBySounds[40];
  /* 0x0820 */ int doFootSteps;
  /* 0x0824 */ int isSentient;
  /* 0x0828 */ struct VehicleEngine engine;
  /* 0x09f0 */ struct VehicleAntenna antenna[2];
  /* 0x0a10 */ char* csvInclude;
  /* 0x0a14 */ float customFloat0;
  /* 0x0a18 */ float customFloat1;
  /* 0x0a1c */ float customFloat2;
  /* 0x0a20 */ int customBool0;
  /* 0x0a24 */ int customBool1;
  /* 0x0a28 */ int customBool2;
}; /* size: 0x0a2c */

struct GfxLutVolume
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ unsigned int control;
  /* 0x0010 */ union vec3_t maxs;
  /* 0x001c */ float lutTransitionTime;
  /* 0x0020 */ unsigned int lutIndex;
}; /* size: 0x0024 */

class bdLeagueTeamInfo
{
  /* 0x0000 */ long Padding_420[2];
  /* 0x0008 */ unsigned __int64 m_teamID;
  /* 0x0010 */ unsigned int m_createdTime;
  /* 0x0014 */ char m_name[65];
  /* 0x0055 */ unsigned char m_icon[1024];
  /* 0x0455 */ char Padding_421[3];
  /* 0x0458 */ unsigned int m_iconLength;
}; /* size: 0x0460 */

struct CD3D11_BLEND_DESC
{
}; /* size: 0x0108 */

struct D3D11_TEXTURE3D_DESC
{
  /* 0x0000 */ unsigned int Width;
  /* 0x0004 */ unsigned int Height;
  /* 0x0008 */ unsigned int Depth;
  /* 0x000c */ unsigned int MipLevels;
  /* 0x0010 */ enum DXGI_FORMAT Format;
  /* 0x0014 */ enum D3D11_USAGE Usage;
  /* 0x0018 */ unsigned int BindFlags;
  /* 0x001c */ unsigned int CPUAccessFlags;
  /* 0x0020 */ unsigned int MiscFlags;
}; /* size: 0x0024 */

union SndEntHandle
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned int entIndex : 12; /* bit position: 0 */
        /* 0x0000 */ unsigned int useCount : 5; /* bit position: 12 */
        /* 0x0000 */ unsigned int localClientNum : 2; /* bit position: 17 */
        /* 0x0000 */ unsigned int isStationary : 1; /* bit position: 19 */
        /* 0x0000 */ unsigned int isInKillCam : 1; /* bit position: 20 */
        /* 0x0000 */ unsigned int team : 4; /* bit position: 21 */
        /* 0x0000 */ unsigned int tag : 7; /* bit position: 25 */
      }; /* bitfield */
    } /* size: 0x0004 */ field;
    /* 0x0000 */ int handle;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct tagCABSTR
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ wchar_t** pElems;
}; /* size: 0x0008 */

struct WeaponCamoMaterialSet
{
  /* 0x0000 */ unsigned int numMaterials;
  /* 0x0004 */ struct WeaponCamoMaterial* materials;
}; /* size: 0x0008 */

class bdSingletonRegistry
{
}; /* size: 0x0001 */

struct GfxLightGridEntry
{
  /* 0x0000 */ unsigned short colorsIndex;
  /* 0x0002 */ unsigned char primaryLightIndex;
  /* 0x0003 */ unsigned char visibility;
}; /* size: 0x0004 */

struct ID3D11View
{
}; /* size: 0x0004 */

typedef struct _XMFLOAT4X4
{
  union
  {
    struct
    {
      /* 0x0000 */ float _11;
      /* 0x0004 */ float _12;
      /* 0x0008 */ float _13;
      /* 0x000c */ float _14;
      /* 0x0010 */ float _21;
      /* 0x0014 */ float _22;
      /* 0x0018 */ float _23;
      /* 0x001c */ float _24;
      /* 0x0020 */ float _31;
      /* 0x0024 */ float _32;
      /* 0x0028 */ float _33;
      /* 0x002c */ float _34;
      /* 0x0030 */ float _41;
      /* 0x0034 */ float _42;
      /* 0x0038 */ float _43;
      /* 0x003c */ float _44;
    }; /* size: 0x0040 */
    /* 0x0000 */ float m[4][4];
  }; /* size: 0x0040 */
} XMFLOAT4X4, *PXMFLOAT4X4; /* size: 0x0040 */

class rigid_body_constraint_upright
{
  /* 0x0000 */ long Padding_422[4];
  /* 0x0010 */ class phys_vec3 m_b1_forward_axis_loc;
  /* 0x0020 */ class phys_vec3 m_b1_right_axis_loc;
  /* 0x0030 */ class phys_vec3 m_b1_up_axis_loc;
  /* 0x0040 */ class phys_vec3 m_b1_lean_axis_loc;
  /* 0x0050 */ class phys_vec3 m_b2_up_axis_loc;
  /* 0x0060 */ class phys_vec3 m_last_t_vel;
  /* 0x0070 */ class phys_vec3 m_last_a_vel;
  /* 0x0080 */ float m_avg_side_force;
  /* 0x0084 */ float m_avg_normal_force;
  /* 0x0088 */ float m_lean_angle_calc_delta_t;
  /* 0x008c */ float m_lean_angle;
  /* 0x0090 */ float m_lean_angle_multiplier;
  /* 0x0094 */ float m_max_lean_angle;
  /* 0x0098 */ float m_moving_average_total_time;
  /* 0x009c */ BOOL m_enabled;
  /* 0x009d */ char Padding_423[3];
  /* 0x00a0 */ class pulse_sum_cache m_ps_cache_list[1];
}; /* size: 0x00b0 */

class bdBitBuffer
{
  /* 0x0000 */ long Padding_424[2];
  /* 0x0008 */ class bdFastArray<unsigned char> m_data;
  /* 0x0014 */ unsigned int m_writePosition;
  /* 0x0018 */ unsigned int m_maxWritePosition;
  /* 0x001c */ unsigned int m_readPosition;
  /* 0x0020 */ BOOL m_failedRead;
  /* 0x0021 */ BOOL m_typeChecked;
}; /* size: 0x0024 */

struct IStorage
{
}; /* size: 0x0004 */

struct clipSegment
{
  /* 0x0000 */ char name[48];
  /* 0x0030 */ int clipBufferIndex;
  /* 0x0034 */ int size;
  /* 0x0038 */ enum demoClipTransition transition;
  /* 0x003c */ int duration;
  /* 0x0040 */ int thumbnailImageSize;
  /* 0x0044 */ unsigned char thumbnailImageBuf[65536];
  /* 0x10044 */ int highlightReelPriority;
  /* 0x10048 */ unsigned int bookmarks[79];
  /* 0x10184 */ struct demoTaggedPlayers taggedPlayers;
}; /* size: 0x10200 */

class rigid_body_constraint_angular_actuator
{
  /* 0x0000 */ long Padding_425[4];
  /* 0x0010 */ class phys_mat44 m_target_mat;
  /* 0x0050 */ class phys_mat44 m_next_target_mat;
  /* 0x0090 */ class phys_vec3 m_a_vel;
  /* 0x00a0 */ float m_power;
  /* 0x00a4 */ float m_power_scale;
  /* 0x00a8 */ BOOL m_enabled;
  /* 0x00a9 */ char Padding_426[3];
  /* 0x00ac */ class pulse_sum_cache m_ps_cache_list[3];
}; /* size: 0x00c0 */

typedef struct _XMHALF4
{
  /* 0x0000 */ unsigned short x;
  /* 0x0002 */ unsigned short y;
  /* 0x0004 */ unsigned short z;
  /* 0x0006 */ unsigned short w;
} XMHALF4, *PXMHALF4; /* size: 0x0008 */

struct GfxBrushModelWritable
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ float padding1;
  /* 0x0010 */ union vec3_t maxs;
  /* 0x001c */ float padding2;
}; /* size: 0x0020 */

struct GfxBrushModel
{
  /* 0x0000 */ struct GfxBrushModelWritable writable;
  /* 0x0020 */ union vec3_t bounds[2];
  /* 0x0038 */ unsigned int surfaceCount;
  /* 0x003c */ unsigned int startSurfIndex;
}; /* size: 0x0040 */

struct vehicle_pathpos_t
{
  /* 0x0000 */ short nodeIdx;
  /* 0x0002 */ short prevIdx;
  /* 0x0004 */ short endOfPath;
  /* 0x0006 */ char Padding_427[2];
  /* 0x0008 */ float frac;
  /* 0x000c */ float speed;
  /* 0x0010 */ float lookAhead;
  /* 0x0014 */ float slide;
  /* 0x0018 */ float width;
  /* 0x001c */ float manualTime;
  /* 0x0020 */ float widthLookAheadFrac;
  /* 0x0024 */ float distanceTraveled;
  /* 0x0028 */ union vec3_t origin;
  /* 0x0034 */ union vec3_t angles;
  /* 0x0040 */ union vec3_t lookPos;
  /* 0x004c */ union vec3_t origin_on_spline;
  /* 0x0058 */ union vec3_t angles_on_spline;
  /* 0x0064 */ union vec3_t lookPos_on_spline;
  /* 0x0070 */ int use_spline_speed;
  /* 0x0074 */ struct vehicle_node_t switchNode[2];
  /* 0x0114 */ int flags;
  /* 0x0118 */ struct vehicle_custom_path_t* customPath;
  /* 0x011c */ float customGoalLength;
  /* 0x0120 */ union vec3_t customGoalDir;
  /* 0x012c */ struct path_t* aiPath;
  /* 0x0130 */ enum path_type_e path_type;
  /* 0x0134 */ short startNodeIdx;
  /* 0x0136 */ char Padding_428[2];
  /* 0x0138 */ float t;
  /* 0x013c */ float tot_len;
  /* 0x0140 */ float tot_time;
}; /* size: 0x0144 */

struct vehicle_physic_t
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ union vec3_t prevOrigin;
  /* 0x0018 */ union vec3_t angles;
  /* 0x0024 */ union vec3_t prevAngles;
  /* 0x0030 */ union vec3_t maxAngleVel;
  /* 0x003c */ float yawAccel;
  /* 0x0040 */ float yawDecel;
  /* 0x0044 */ union vec3_t mins;
  /* 0x0050 */ union vec3_t maxs;
  /* 0x005c */ union vec3_t vel;
  /* 0x0068 */ union vec3_t bodyVel;
  /* 0x0074 */ union vec3_t rotVel;
  /* 0x0080 */ union vec3_t accel;
  /* 0x008c */ float maxPitchAngle;
  /* 0x0090 */ float maxRollAngle;
  /* 0x0094 */ float wheelZVel[6];
  /* 0x00ac */ float wheelZPos[6];
  /* 0x00c4 */ int wheelSurfType[6];
  /* 0x00dc */ union vec3_t bodyTilt;
  /* 0x00e8 */ union vec3_t worldTilt;
  /* 0x00f4 */ union vec3_t worldTiltVel;
  /* 0x0100 */ float heliLockHeight;
  /* 0x0104 */ float curveLength;
  /* 0x0108 */ int curveID;
  /* 0x010c */ float curveStep;
  /* 0x0110 */ float curveTime;
  /* 0x0114 */ float timeStep;
}; /* size: 0x0118 */

struct VehicleTurret
{
  /* 0x0000 */ int fireTime;
  /* 0x0004 */ int fireBarrel;
  /* 0x0008 */ float barrelOffset;
  /* 0x000c */ int flags;
  /* 0x0010 */ float heatVal;
  /* 0x0014 */ float turretOnTargetRange;
  /* 0x0018 */ int overheating;
  /* 0x001c */ int weaponShotCount;
  /* 0x0020 */ enum VehicleTurretState turretState;
}; /* size: 0x0024 */

struct vehicle_t
{
  /* 0x0000 */ struct vehicle_pathpos_t pathPos;
  /* 0x0144 */ int pathOffsetFlags;
  /* 0x0148 */ union vec3_t pathOffsetTransform[4];
  /* 0x0178 */ union vec3_t pathFixedOffset;
  /* 0x0184 */ union vec3_t pathVariableOffset;
  /* 0x0190 */ union vec3_t pathVariableOffsetTargetPrev;
  /* 0x019c */ union vec3_t pathVariableOffsetTarget;
  /* 0x01a8 */ float pathVariableOffsetRate;
  /* 0x01ac */ float pathVariableOffsetTime;
  /* 0x01b0 */ struct vehicle_physic_t phys;
  /* 0x02c8 */ int entNum;
  /* 0x02cc */ short defIndex;
  /* 0x02ce */ char Padding_429[2];
  /* 0x02d0 */ int flags;
  /* 0x02d4 */ enum team_t team;
  /* 0x02d8 */ enum VehicleMoveState moveState;
  /* 0x02dc */ struct VehicleTurret turret;
  /* 0x0300 */ float turretRotScale;
  /* 0x0304 */ struct VehicleJitter jitter;
  /* 0x0340 */ struct VehicleHover hover;
  /* 0x035c */ struct VehicleTurret gunnerTurrets[4];
  /* 0x03ec */ struct VehicleJitter gunnerJitter[4];
  /* 0x04dc */ float minigunRotationSpeed;
  /* 0x04e0 */ unsigned short lookAtText0;
  /* 0x04e2 */ unsigned short lookAtText1;
  /* 0x04e4 */ int manualMode;
  /* 0x04e8 */ float manualSpeed;
  /* 0x04ec */ float manualAccel;
  /* 0x04f0 */ float manualDecel;
  /* 0x04f4 */ float speed;
  /* 0x04f8 */ float maxSpeedOverride;
  /* 0x04fc */ float maxDragSpeed;
  /* 0x0500 */ float turningAbility;
  /* 0x0504 */ int hasTarget;
  /* 0x0508 */ int hasTargetYaw;
  /* 0x050c */ int hasGoalYaw;
  /* 0x0510 */ int stopAtGoal;
  /* 0x0514 */ int stopping;
  /* 0x0518 */ int targetEnt;
  /* 0x051c */ class EntHandle lookAtEnt;
  /* 0x0520 */ union vec3_t targetOrigin;
  /* 0x052c */ union vec3_t targetOffset;
  /* 0x0538 */ float targetYaw;
  /* 0x053c */ union vec3_t goalPosition;
  /* 0x0548 */ float goalYaw;
  /* 0x054c */ float prevGoalYaw;
  /* 0x0550 */ float yawOverShoot;
  /* 0x0554 */ int yawSlowDown;
  /* 0x0558 */ float pathTransitionTime;
  /* 0x055c */ float maxPathTransitionTime;
  /* 0x0560 */ union vec3_t pathTransitionOffset;
  /* 0x056c */ union vec3_t pathTransitionAngleOffset;
  /* 0x0578 */ int hasDefaultPitch;
  /* 0x057c */ float defaultPitch;
  /* 0x0580 */ float hasGoalRoll;
  /* 0x0584 */ float goalRoll;
  /* 0x0588 */ float goalRollTime;
  /* 0x058c */ float currentRollTime;
  /* 0x0590 */ int numRolls;
  /* 0x0594 */ struct VehicleTarget gunnerTargets[4];
  /* 0x0644 */ float nearGoalNotifyDist;
  /* 0x0648 */ union vec2_t joltDir;
  /* 0x0650 */ float joltTime;
  /* 0x0654 */ float joltWave;
  /* 0x0658 */ float joltSpeed;
  /* 0x065c */ float joltDecel;
  /* 0x0660 */ struct VehicleTags boneIndex;
  /* 0x0720 */ int turretHitNum;
  /* 0x0724 */ struct VehicleSeat seats[11];
  /* 0x0750 */ float modelSwapDelay;
  /* 0x0754 */ int oneExhaust;
  /* 0x0758 */ float deathQuakeScale;
  /* 0x075c */ float deathQuakeDuration;
  /* 0x0760 */ float deathQuakeRadius;
  /* 0x0764 */ int secTurretAiControlled;
  /* 0x0768 */ int addToCompass;
  /* 0x076c */ class NitrousVehicle* nitrousVehicle;
  /* 0x0770 */ struct vehicle_cache_t vehicle_cache;
  /* 0x1240 */ float heliHeightLockOffset;
  /* 0x1244 */ float lastViewOffset;
  /* 0x1248 */ int driveBySoundIndex[2];
  /* 0x1250 */ float driveBySoundDelay[2];
  /* 0x1258 */ float driveBySoundTimeout[2];
  /* 0x1260 */ struct sentient_t* sentient;
  /* 0x1264 */ struct ActorSight sight;
  /* 0x1344 */ struct ActorThreat threat;
  /* 0x13b4 */ struct sentient_info_t sentientInfo[72];
  /* 0x2254 */ long __PADDING__[3];
}; /* size: 0x2260 */

typedef struct _XMDHEN3
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ int x : 10; /* bit position: 0 */
      /* 0x0000 */ int y : 11; /* bit position: 10 */
      /* 0x0000 */ int z : 11; /* bit position: 21 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMDHEN3, *PXMDHEN3; /* size: 0x0004 */

typedef struct _XMUDEC4
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int x : 10; /* bit position: 0 */
      /* 0x0000 */ unsigned int y : 10; /* bit position: 10 */
      /* 0x0000 */ unsigned int z : 10; /* bit position: 20 */
      /* 0x0000 */ unsigned int w : 2; /* bit position: 30 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMUDEC4, *PXMUDEC4; /* size: 0x0004 */

class bdUserInfo
{
  /* 0x0000 */ long Padding_430[2];
  /* 0x0008 */ unsigned __int64 m_userID;
  /* 0x0010 */ char m_userName[64];
}; /* size: 0x0050 */

typedef struct _XMUDHENN3
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int x : 10; /* bit position: 0 */
      /* 0x0000 */ unsigned int y : 11; /* bit position: 10 */
      /* 0x0000 */ unsigned int z : 11; /* bit position: 21 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMUDHENN3, *PXMUDHENN3; /* size: 0x0004 */

class bdFastArray<char>
{
  /* 0x0000 */ char* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

struct half
{
  /* 0x0000 */ unsigned short v;
}; /* size: 0x0002 */

struct half2
{
  union
  {
    struct
    {
      /* 0x0000 */ struct half x;
      /* 0x0002 */ struct half y;
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

class LinkedList<FixedSizeAllocator<GlassShard>::Block *>
{
  /* 0x0000 */ struct FixedSizeAllocator<GlassShard>::Block* head;
}; /* size: 0x0004 */

class bdArray<bdQoSRemoteAddr>
{
  /* 0x0000 */ class bdQoSRemoteAddr* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

struct GfxImageFilterPass
{
  /* 0x0000 */ const struct Material* material;
  /* 0x0004 */ float srcWidth;
  /* 0x0008 */ float srcHeight;
  /* 0x000c */ int dstWidth;
  /* 0x0010 */ int dstHeight;
  /* 0x0014 */ int tapHalfCount;
  /* 0x0018 */ union vec4_t tapOffsetsAndWeights[8];
  /* 0x0098 */ unsigned char src;
  /* 0x0099 */ unsigned char dst;
  /* 0x009a */ char __PADDING__[2];
}; /* size: 0x009c */

class phys_gjk_geom
{
}; /* size: 0x0004 */

class std::_Mutex
{
  /* 0x0000 */ void* _Mtx;
}; /* size: 0x0004 */

class broad_phase_base
{
  /* 0x0000 */ class phys_vec3 m_trace_aabb_min_whace;
  /* 0x0010 */ class phys_vec3 m_trace_aabb_max_whace;
  /* 0x0020 */ class phys_vec3 m_trace_translation;
  /* 0x0030 */ unsigned int m_flags;
  /* 0x0034 */ class broad_phase_base* m_list_bpb_next;
  /* 0x0038 */ class broad_phase_base* m_list_bpb_cluster_next;
  /* 0x003c */ void* m_sap_node;
  /* 0x0040 */ void* m_user_data;
  /* 0x0044 */ unsigned int m_env_collision_flags;
  /* 0x0048 */ unsigned int m_my_collision_type_flags;
}; /* size: 0x0050 */

struct ID3D11Device
{
}; /* size: 0x0004 */

struct svscmd_info_t
{
  /* 0x0000 */ char* cmd;
  /* 0x0004 */ int time;
  /* 0x0008 */ int type;
}; /* size: 0x000c */

struct gjk_geom_list_t
{
  /* 0x0000 */ struct gjk_base_t* m_first_geom;
  /* 0x0004 */ int m_geom_count;
}; /* size: 0x0008 */

class bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>
{
  /* 0x0000 */ unsigned int m_size;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ float m_loadFactor;
  /* 0x000c */ unsigned int m_threshold;
  /* 0x0010 */ class bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>::Node** m_map;
  /* 0x0014 */ class bdHashingClass m_hashClass;
}; /* size: 0x0018 */

class bdRemoteTaskManager
{
  /* 0x0000 */ long Padding_431[2];
  /* 0x0008 */ class bdLinkedList<bdReference<bdRemoteTask> > m_tasks;
  /* 0x0014 */ class bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass> m_asyncTasks;
  /* 0x002c */ class bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass> m_asyncResults;
  /* 0x0044 */ class bdReference<bdLobbyConnection> m_lobbyConnection;
  /* 0x0048 */ BOOL m_encryptedConnection;
  /* 0x0049 */ char Padding_432[7];
  /* 0x0050 */ unsigned __int64 m_connectionID;
}; /* size: 0x0058 */

struct ID3D11Resource
{
}; /* size: 0x0004 */

struct DXGI_RATIONAL
{
  /* 0x0000 */ unsigned int Numerator;
  /* 0x0004 */ unsigned int Denominator;
}; /* size: 0x0008 */

struct DXGI_MODE_DESC
{
  /* 0x0000 */ unsigned int Width;
  /* 0x0004 */ unsigned int Height;
  /* 0x0008 */ struct DXGI_RATIONAL RefreshRate;
  /* 0x0010 */ enum DXGI_FORMAT Format;
  /* 0x0014 */ enum DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
  /* 0x0018 */ enum DXGI_MODE_SCALING Scaling;
}; /* size: 0x001c */

class bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>::Node
{
  /* 0x0000 */ class bdReference<bdRemoteTask> m_data;
  /* 0x0004 */ long Padding_433;
  /* 0x0008 */ unsigned __int64 m_key;
  /* 0x0010 */ class bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>::Node* m_next;
}; /* size: 0x0018 */

class bdEventLog
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

class bdSessionNonce
{
  /* 0x0000 */ long Padding_434[2];
  /* 0x0008 */ unsigned __int64 m_nonce;
}; /* size: 0x0010 */

struct XAnimTree_s
{
  /* 0x0000 */ struct XAnim_s* anims;
  /* 0x0004 */ unsigned short children;
  /* 0x0006 */ short inst;
}; /* size: 0x0008 */

typedef struct _s__RTTICompleteObjectLocator
{
  /* 0x0000 */ unsigned long signature;
  /* 0x0004 */ unsigned long offset;
  /* 0x0008 */ unsigned long cdOffset;
  /* 0x000c */ struct _TypeDescriptor* pTypeDescriptor;
  /* 0x0010 */ const struct _s__RTTIClassHierarchyDescriptor* pClassDescriptor;
} s__RTTICompleteObjectLocator, *Ps__RTTICompleteObjectLocator; /* size: 0x0014 */

struct CD3D11_TEXTURE2D_DESC
{
}; /* size: 0x002c */

typedef struct _XMSHORT4
{
  /* 0x0000 */ short x;
  /* 0x0002 */ short y;
  /* 0x0004 */ short z;
  /* 0x0006 */ short w;
} XMSHORT4, *PXMSHORT4; /* size: 0x0008 */

struct tagCACLSID
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ struct _GUID* pElems;
}; /* size: 0x0008 */

struct XMVECTORU8
{
  union
  {
    /* 0x0000 */ unsigned char u[16];
    /* 0x0000 */ union __m128 v;
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

struct playerInfo_t
{
  /* 0x0000 */ BOOL synchronize;
  /* 0x0001 */ char Padding_435[7];
  /* 0x0008 */ unsigned __int64 xuid;
  /* 0x0010 */ struct PartyMember pm;
  /* 0x0158 */ int natType;
  /* 0x015c */ BOOL unregisterOldClientFromSession;
  /* 0x015d */ char Padding_436[3];
  /* 0x0160 */ struct netadr_t remoteAddress;
  /* 0x0174 */ char name[32];
  /* 0x0194 */ long __PADDING__[1];
}; /* size: 0x0198 */

class bdTrulyRandom
{
}; /* size: 0x0001 */

class user_rigid_body
{
  /* 0x0000 */ long Padding_437[88];
  /* 0x0160 */ const class phys_mat44* m_dictator;
  /* 0x0164 */ long Padding_438[3];
  /* 0x0170 */ class phys_mat44 m_dictator_mat;
}; /* size: 0x01b0 */

struct ID3D11Texture2D
{
}; /* size: 0x0004 */

struct D3D11_QUERY_DESC
{
  /* 0x0000 */ enum D3D11_QUERY Query;
  /* 0x0004 */ unsigned int MiscFlags;
}; /* size: 0x0008 */

struct GfxModelSurfaceInfo
{
  union
  {
    /* 0x0000 */ const struct DObjAnimMat* baseMat;
    /* 0x0000 */ const struct DObjAnimMat* baseMat_local;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned char boneIndex;
  /* 0x0005 */ unsigned char boneCount;
  /* 0x0006 */ unsigned short gfxEntIndex;
  /* 0x0008 */ unsigned short lightingHandle;
  /* 0x000a */ unsigned char dobjModelIndex;
  /* 0x000b */ char __PADDING__[1];
}; /* size: 0x000c */

struct GfxModelSkinnedSurface
{
  /* 0x0000 */ int skinnedCachedOffset;
  /* 0x0004 */ struct XSurface* xsurf;
  /* 0x0008 */ struct GfxModelSurfaceInfo info;
  /* 0x0014 */ struct GfxPackedVertex* skinnedVert;
}; /* size: 0x0018 */

typedef struct _XMXICO4
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ __int64 x : 20; /* bit position: 0 */
      /* 0x0000 */ __int64 y : 20; /* bit position: 20 */
      /* 0x0000 */ __int64 z : 20; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 w : 4; /* bit position: 60 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 v;
  }; /* size: 0x0008 */
} XMXICO4, *PXMXICO4; /* size: 0x0008 */

struct jqAtomicQueue<jqBatch,32>::NodeType
{
  /* 0x0000 */ struct jqAtomicQueuePtr<jqAtomicQueue<jqBatch,32>::NodeType> Next;
  /* 0x0008 */ struct jqBatch Data;
  /* 0x0104 */ long __PADDING__[1];
}; /* size: 0x0108 */

struct FontIconName
{
  /* 0x0000 */ const char* string;
  /* 0x0004 */ int hash;
}; /* size: 0x0008 */

class rigid_body_constraint_custom_path
{
  /* 0x0000 */ long Padding_439[4];
  /* 0x0010 */ class phys_mat44 m_path_mat;
  /* 0x0050 */ class phys_vec3 b1_r_loc;
  /* 0x0060 */ class user_rigid_body* m_urb;
  /* 0x0064 */ int m_timestamp;
  /* 0x0068 */ float m_spring_scale;
  /* 0x006c */ class pulse_sum_cache m_list_psc[4];
}; /* size: 0x0080 */

struct localeinfo_struct
{
  /* 0x0000 */ struct threadlocaleinfostruct* locinfo;
  /* 0x0004 */ struct threadmbcinfostruct* mbcinfo;
}; /* size: 0x0008 */

struct contact_point_info::pulse_sum_cache_info
{
  /* 0x0000 */ class pulse_sum_cache m_ps_cache_list[3];
}; /* size: 0x000c */

struct threadlocaleinfostruct
{
  /* 0x0000 */ int refcount;
  /* 0x0004 */ unsigned int lc_codepage;
  /* 0x0008 */ unsigned int lc_collate_cp;
  /* 0x000c */ unsigned long lc_handle[6];
  /* 0x0024 */ struct tagLC_ID lc_id[6];
  /* 0x0048 */ struct
  {
    /* 0x0048 */ char* locale;
    /* 0x004c */ wchar_t* wlocale;
    /* 0x0050 */ int* refcount;
    /* 0x0054 */ int* wrefcount;
  } /* size: 0x0010 */ lc_category[6];
  /* 0x00a8 */ int lc_clike;
  /* 0x00ac */ int mb_cur_max;
  /* 0x00b0 */ int* lconv_intl_refcount;
  /* 0x00b4 */ int* lconv_num_refcount;
  /* 0x00b8 */ int* lconv_mon_refcount;
  /* 0x00bc */ struct lconv* lconv;
  /* 0x00c0 */ int* ctype1_refcount;
  /* 0x00c4 */ unsigned short* ctype1;
  /* 0x00c8 */ const unsigned short* pctype;
  /* 0x00cc */ const unsigned char* pclmap;
  /* 0x00d0 */ const unsigned char* pcumap;
  /* 0x00d4 */ struct __lc_time_data* lc_time_curr;
}; /* size: 0x00d8 */

class bdOnlineUserInfo
{
  /* 0x0000 */ long Padding_440[2];
  /* 0x0008 */ unsigned __int64 m_userID;
  /* 0x0010 */ BOOL m_isOnline;
}; /* size: 0x0018 */

struct lconv
{
  /* 0x0000 */ char* decimal_point;
  /* 0x0004 */ char* thousands_sep;
  /* 0x0008 */ char* grouping;
  /* 0x000c */ char* int_curr_symbol;
  /* 0x0010 */ char* currency_symbol;
  /* 0x0014 */ char* mon_decimal_point;
  /* 0x0018 */ char* mon_thousands_sep;
  /* 0x001c */ char* mon_grouping;
  /* 0x0020 */ char* positive_sign;
  /* 0x0024 */ char* negative_sign;
  /* 0x0028 */ char int_frac_digits;
  /* 0x0029 */ char frac_digits;
  /* 0x002a */ char p_cs_precedes;
  /* 0x002b */ char p_sep_by_space;
  /* 0x002c */ char n_cs_precedes;
  /* 0x002d */ char n_sep_by_space;
  /* 0x002e */ char p_sign_posn;
  /* 0x002f */ char n_sign_posn;
  /* 0x0030 */ wchar_t* _W_decimal_point;
  /* 0x0034 */ wchar_t* _W_thousands_sep;
  /* 0x0038 */ wchar_t* _W_int_curr_symbol;
  /* 0x003c */ wchar_t* _W_currency_symbol;
  /* 0x0040 */ wchar_t* _W_mon_decimal_point;
  /* 0x0044 */ wchar_t* _W_mon_thousands_sep;
  /* 0x0048 */ wchar_t* _W_positive_sign;
  /* 0x004c */ wchar_t* _W_negative_sign;
}; /* size: 0x0050 */

typedef struct __lc_time_data
{
  /* 0x0000 */ char* wday_abbr[7];
  /* 0x001c */ char* wday[7];
  /* 0x0038 */ char* month_abbr[12];
  /* 0x0068 */ char* month[12];
  /* 0x0098 */ char* ampm[2];
  /* 0x00a0 */ char* ww_sdatefmt;
  /* 0x00a4 */ char* ww_ldatefmt;
  /* 0x00a8 */ char* ww_timefmt;
  /* 0x00ac */ unsigned long ww_lcid;
  /* 0x00b0 */ int ww_caltype;
  /* 0x00b4 */ int refcount;
  /* 0x00b8 */ wchar_t* _W_wday_abbr[7];
  /* 0x00d4 */ wchar_t* _W_wday[7];
  /* 0x00f0 */ wchar_t* _W_month_abbr[12];
  /* 0x0120 */ wchar_t* _W_month[12];
  /* 0x0150 */ wchar_t* _W_ampm[2];
  /* 0x0158 */ wchar_t* _W_ww_sdatefmt;
  /* 0x015c */ wchar_t* _W_ww_ldatefmt;
  /* 0x0160 */ wchar_t* _W_ww_timefmt;
} _lc_time_data, *P_lc_time_data; /* size: 0x0164 */

struct clientFieldNetfield_s
{
  /* 0x0000 */ int bitsUsed;
  /* 0x0004 */ int netFieldOffset;
}; /* size: 0x0008 */

struct threadmbcinfostruct
{
  /* 0x0000 */ int refcount;
  /* 0x0004 */ int mbcodepage;
  /* 0x0008 */ int ismbcodepage;
  /* 0x000c */ int mblcid;
  /* 0x0010 */ unsigned short mbulinfo[6];
  /* 0x001c */ unsigned char mbctype[257];
  /* 0x011d */ unsigned char mbcasemap[256];
  /* 0x021d */ char __PADDING__[3];
}; /* size: 0x0220 */

typedef struct _XMFLOAT3
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
  /* 0x0008 */ float z;
} XMFLOAT3, *PXMFLOAT3; /* size: 0x000c */

struct StringTable
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int columnCount;
  /* 0x0008 */ int rowCount;
  /* 0x000c */ struct StringTableCell* values;
  /* 0x0010 */ short* cellIndex;
}; /* size: 0x0014 */

class jqMiniProfiler
{
  /* 0x0000 */ unsigned int* Var;
  /* 0x0004 */ unsigned int Start;
}; /* size: 0x0008 */

struct GfxFog
{
  /* 0x0000 */ int startTime;
  /* 0x0004 */ int finishTime;
  /* 0x0008 */ union vec4_t color;
  /* 0x0018 */ float fogStart;
  /* 0x001c */ float density;
  /* 0x0020 */ float heightDensity;
  /* 0x0024 */ float baseHeight;
  /* 0x0028 */ union vec4_t sunFogColor;
  /* 0x0038 */ union vec3_t sunFogDir;
  /* 0x0044 */ float sunFogStartAng;
  /* 0x0048 */ float sunFogEndAng;
  /* 0x004c */ float maxDensity;
}; /* size: 0x0050 */

class bdProfiles
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

class phys_simple_allocator<mover_info_t>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

struct player_gjk_slide_move_input_t
{
  /* 0x0000 */ long Padding_441[11];
  /* 0x002c */ struct pmove_t* pm;
}; /* size: 0x0030 */

class bdMemory
{
  union
  {
    /* 0x0000 */ void* m_allocateFunc /* function */;
    /* 0x0000 */ void* m_deallocateFunc /* function */;
    /* 0x0000 */ void* m_reallocateFunc /* function */;
    /* 0x0000 */ void* m_alignedAllocateFunc /* function */;
    /* 0x0000 */ void* m_alignedDeallocateFunc /* function */;
    /* 0x0000 */ void* m_alignedReallocateFunc /* function */;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

class bdMatchMakingInfo
{
  /* 0x0000 */ long Padding_442;
  /* 0x0004 */ class bdSecurityID m_sessionID;
  /* 0x000c */ unsigned char m_hostAddr[255];
  /* 0x010b */ char Padding_443;
  /* 0x010c */ unsigned int m_hostAddrSize;
  /* 0x0110 */ unsigned int m_maxPlayers;
  /* 0x0114 */ unsigned int m_numPlayers;
  /* 0x0118 */ unsigned int m_gameType;
}; /* size: 0x011c */

struct XAnimDeltaPartQuat2
{
  /* 0x0000 */ unsigned short size;
  /* 0x0002 */ char Padding_444[2];
  /* 0x0004 */ union XAnimDeltaPartQuatData2 u;
}; /* size: 0x000c */

class std::_List_unchecked_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> > >;

struct com_parse_mark_t
{
  /* 0x0000 */ int lines;
  /* 0x0004 */ const char* text;
  /* 0x0008 */ int ungetToken;
  /* 0x000c */ int backup_lines;
  /* 0x0010 */ const char* backup_text;
}; /* size: 0x0014 */

struct GlassConfigFile::Values
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ struct
  {
    /* 0x0004 */ unsigned int value;
    /* 0x0008 */ unsigned int glasses;
  } /* size: 0x0008 */ valueRange[4];
  /* 0x0024 */ unsigned int numRanges;
}; /* size: 0x0028 */

struct GlassConfigFile
{
  /* 0x0000 */ struct GlassConfigFile::Values values[100];
  /* 0x0fa0 */ unsigned int numValues;
  /* 0x0fa4 */ BOOL verbose;
  /* 0x0fa5 */ char __PADDING__[3];
}; /* size: 0x0fa8 */

class bdTwitter
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

struct tagBSTRBLOB
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned char* pData;
}; /* size: 0x0008 */

struct tagCAC
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ char* pElems;
}; /* size: 0x0008 */

struct tagCAI
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ short* pElems;
}; /* size: 0x0008 */

struct tagCAL
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long* pElems;
}; /* size: 0x0008 */

struct tagCAH
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ union _LARGE_INTEGER* pElems;
}; /* size: 0x0008 */

struct tagCAUH
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ union _ULARGE_INTEGER* pElems;
}; /* size: 0x0008 */

struct tagCABOOL
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ short* pElems;
}; /* size: 0x0008 */

struct tagCADATE
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ double* pElems;
}; /* size: 0x0008 */

struct tagCABSTRBLOB
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ struct tagBSTRBLOB* pElems;
}; /* size: 0x0008 */

struct tagCALPSTR
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ char** pElems;
}; /* size: 0x0008 */

struct tagCALPWSTR
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ wchar_t** pElems;
}; /* size: 0x0008 */

struct tagPROPVARIANT
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short vt;
      /* 0x0002 */ unsigned short wReserved1;
      /* 0x0004 */ unsigned short wReserved2;
      /* 0x0006 */ unsigned short wReserved3;
      union
      {
        /* 0x0008 */ char cVal;
        /* 0x0008 */ unsigned char bVal;
        /* 0x0008 */ short iVal;
        /* 0x0008 */ unsigned short uiVal;
        /* 0x0008 */ long lVal;
        /* 0x0008 */ unsigned long ulVal;
        /* 0x0008 */ int intVal;
        /* 0x0008 */ unsigned int uintVal;
        /* 0x0008 */ union _LARGE_INTEGER hVal;
        /* 0x0008 */ union _ULARGE_INTEGER uhVal;
        /* 0x0008 */ float fltVal;
        /* 0x0008 */ double dblVal;
        /* 0x0008 */ short boolVal;
        /* 0x0008 */ long scode;
        /* 0x0008 */ union tagCY cyVal;
        /* 0x0008 */ double date;
        /* 0x0008 */ struct _FILETIME filetime;
        /* 0x0008 */ struct _GUID* puuid;
        /* 0x0008 */ struct tagCLIPDATA* pclipdata;
        /* 0x0008 */ wchar_t* bstrVal;
        /* 0x0008 */ struct tagBSTRBLOB bstrblobVal;
        /* 0x0008 */ struct tagBLOB blob;
        /* 0x0008 */ char* pszVal;
        /* 0x0008 */ wchar_t* pwszVal;
        /* 0x0008 */ struct IUnknown* punkVal;
        /* 0x0008 */ struct IDispatch* pdispVal;
        /* 0x0008 */ struct IStream* pStream;
        /* 0x0008 */ struct IStorage* pStorage;
        /* 0x0008 */ struct tagVersionedStream* pVersionedStream;
        /* 0x0008 */ struct tagSAFEARRAY* parray;
        /* 0x0008 */ struct tagCAC cac;
        /* 0x0008 */ struct tagCAUB caub;
        /* 0x0008 */ struct tagCAI cai;
        /* 0x0008 */ struct tagCAUI caui;
        /* 0x0008 */ struct tagCAL cal;
        /* 0x0008 */ struct tagCAUL caul;
        /* 0x0008 */ struct tagCAH cah;
        /* 0x0008 */ struct tagCAUH cauh;
        /* 0x0008 */ struct tagCAFLT caflt;
        /* 0x0008 */ struct tagCADBL cadbl;
        /* 0x0008 */ struct tagCABOOL cabool;
        /* 0x0008 */ struct tagCASCODE cascode;
        /* 0x0008 */ struct tagCACY cacy;
        /* 0x0008 */ struct tagCADATE cadate;
        /* 0x0008 */ struct tagCAFILETIME cafiletime;
        /* 0x0008 */ struct tagCACLSID cauuid;
        /* 0x0008 */ struct tagCACLIPDATA caclipdata;
        /* 0x0008 */ struct tagCABSTR cabstr;
        /* 0x0008 */ struct tagCABSTRBLOB cabstrblob;
        /* 0x0008 */ struct tagCALPSTR calpstr;
        /* 0x0008 */ struct tagCALPWSTR calpwstr;
        /* 0x0008 */ struct tagCAPROPVARIANT capropvar;
        /* 0x0008 */ char* pcVal;
        /* 0x0008 */ unsigned char* pbVal;
        /* 0x0008 */ short* piVal;
        /* 0x0008 */ unsigned short* puiVal;
        /* 0x0008 */ long* plVal;
        /* 0x0008 */ unsigned long* pulVal;
        /* 0x0008 */ int* pintVal;
        /* 0x0008 */ unsigned int* puintVal;
        /* 0x0008 */ float* pfltVal;
        /* 0x0008 */ double* pdblVal;
        /* 0x0008 */ short* pboolVal;
        /* 0x0008 */ struct tagDEC* pdecVal;
        /* 0x0008 */ long* pscode;
        /* 0x0008 */ union tagCY* pcyVal;
        /* 0x0008 */ double* pdate;
        /* 0x0008 */ wchar_t** pbstrVal;
        /* 0x0008 */ struct IUnknown** ppunkVal;
        /* 0x0008 */ struct IDispatch** ppdispVal;
        /* 0x0008 */ struct tagSAFEARRAY** pparray;
        /* 0x0008 */ struct tagPROPVARIANT* pvarVal;
      }; /* size: 0x0008 */
    }; /* size: 0x0010 */
    /* 0x0000 */ struct tagDEC decVal;
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

struct EmblemIcon
{
  /* 0x0000 */ struct GfxImage* image;
  /* 0x0004 */ const char* description;
  /* 0x0008 */ float outlineSize;
  /* 0x000c */ int cost;
  /* 0x0010 */ int unlockLevel;
  /* 0x0014 */ int unlockPLevel;
  /* 0x0018 */ int unclassifyAt;
  /* 0x001c */ int sortKey;
  /* 0x0020 */ unsigned short iconType;
  /* 0x0022 */ unsigned short category;
}; /* size: 0x0024 */

struct ddlDef_t
{
  /* 0x0000 */ int version;
  /* 0x0004 */ int size;
  /* 0x0008 */ struct ddlStructDef_t* structList;
  /* 0x000c */ int structCount;
  /* 0x0010 */ struct ddlEnumDef_t* enumList;
  /* 0x0014 */ int enumCount;
  /* 0x0018 */ struct ddlDef_t* next;
}; /* size: 0x001c */

class bdTencent
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

struct DpvsCachedCell
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned int cellIndex : 10; /* bit position: 0 */
    /* 0x0000 */ unsigned int planeIndex : 12; /* bit position: 10 */
    /* 0x0000 */ unsigned int planeCount : 5; /* bit position: 22 */
    /* 0x0000 */ unsigned int frustumPlaneCount : 5; /* bit position: 27 */
  }; /* bitfield */
}; /* size: 0x0004 */

typedef struct __m128d
{
  /* 0x0000 */ double m128d_f64[2];
} _m128d, *P_m128d; /* size: 0x0010 */

struct D3D11_BLEND_DESC
{
  /* 0x0000 */ int AlphaToCoverageEnable;
  /* 0x0004 */ int IndependentBlendEnable;
  /* 0x0008 */ struct D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[8];
}; /* size: 0x0108 */

class bdKeyArchive
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

typedef struct _XMDEC4
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ int x : 10; /* bit position: 0 */
      /* 0x0000 */ int y : 10; /* bit position: 10 */
      /* 0x0000 */ int z : 10; /* bit position: 20 */
      /* 0x0000 */ int w : 2; /* bit position: 30 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMDEC4, *PXMDEC4; /* size: 0x0004 */

struct SpawnVar
{
  /* 0x0000 */ BOOL spawnVarsValid;
  /* 0x0001 */ char Padding_445[3];
  /* 0x0004 */ int numSpawnVars;
  /* 0x0008 */ char* spawnVars[2][64];
  /* 0x0208 */ int numSpawnVarChars;
  /* 0x020c */ char spawnVarChars[2048];
}; /* size: 0x0a0c */

struct ddlEnumDef_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int memberCount;
  /* 0x0008 */ const char** members;
  /* 0x000c */ struct ddlHash_t* hashTable;
}; /* size: 0x0010 */

struct WeaponAttachment
{
  /* 0x0000 */ const char* szInternalName;
  /* 0x0004 */ const char* szDisplayName;
  /* 0x0008 */ enum eAttachment attachmentType;
  /* 0x000c */ enum eAttachmentPoint attachmentPoint;
  /* 0x0010 */ enum PenetrateType penetrateType;
  /* 0x0014 */ enum weapFireType_t fireType;
  /* 0x0018 */ int firstRaisePriority;
  /* 0x001c */ float fHipIdleAmount;
  /* 0x0020 */ BOOL bAltWeaponAdsOnly;
  /* 0x0021 */ BOOL bAltWeaponDisableSwitching;
  /* 0x0022 */ char Padding_446[2];
  /* 0x0024 */ float altScopeADSTransInTime;
  /* 0x0028 */ float altScopeADSTransOutTime;
  /* 0x002c */ BOOL bSilenced;
  /* 0x002d */ BOOL bDualMag;
  /* 0x002e */ BOOL laserSight;
  /* 0x002f */ BOOL bInfraRed;
  /* 0x0030 */ BOOL bUseAsMelee;
  /* 0x0031 */ BOOL bDualWield;
  /* 0x0032 */ BOOL sharedAmmo;
  /* 0x0033 */ char Padding_447;
  /* 0x0034 */ float fDamageRangeScale;
  /* 0x0038 */ float fAdsZoomFov1;
  /* 0x003c */ float fAdsZoomFov2;
  /* 0x0040 */ float fAdsZoomFov3;
  /* 0x0044 */ float fAdsZoomInFrac;
  /* 0x0048 */ float fAdsZoomOutFrac;
  /* 0x004c */ float fAdsTransInTimeScale;
  /* 0x0050 */ float fAdsTransOutTimeScale;
  /* 0x0054 */ float fAdsRecoilReductionRate;
  /* 0x0058 */ float fAdsRecoilReductionLimit;
  /* 0x005c */ float fAdsViewKickCenterSpeedScale;
  /* 0x0060 */ float fAdsIdleAmountScale;
  /* 0x0064 */ BOOL swayOverride;
  /* 0x0065 */ char Padding_448[3];
  /* 0x0068 */ float swayMaxAngle;
  /* 0x006c */ float swayLerpSpeed;
  /* 0x0070 */ float swayPitchScale;
  /* 0x0074 */ float swayYawScale;
  /* 0x0078 */ float swayHorizScale;
  /* 0x007c */ float swayVertScale;
  /* 0x0080 */ BOOL adsSwayOverride;
  /* 0x0081 */ char Padding_449[3];
  /* 0x0084 */ float adsSwayMaxAngle;
  /* 0x0088 */ float adsSwayLerpSpeed;
  /* 0x008c */ float adsSwayPitchScale;
  /* 0x0090 */ float adsSwayYawScale;
  /* 0x0094 */ float fAdsSwayHorizScale;
  /* 0x0098 */ float fAdsSwayVertScale;
  /* 0x009c */ float adsMoveSpeedScale;
  /* 0x00a0 */ float fHipSpreadMinScale;
  /* 0x00a4 */ float fHipSpreadMaxScale;
  /* 0x00a8 */ float strafeRotR;
  /* 0x00ac */ float standMoveF;
  /* 0x00b0 */ union vec3_t vStandRot;
  /* 0x00bc */ float fFireTimeScale;
  /* 0x00c0 */ float fReloadTimeScale;
  /* 0x00c4 */ float fReloadEmptyTimeScale;
  /* 0x00c8 */ float fReloadAddTimeScale;
  /* 0x00cc */ float fReloadQuickTimeScale;
  /* 0x00d0 */ float fReloadQuickEmptyTimeScale;
  /* 0x00d4 */ float fReloadQuickAddTimeScale;
  /* 0x00d8 */ BOOL mmsWeapon;
  /* 0x00d9 */ BOOL mmsInScope;
  /* 0x00da */ char Padding_450[2];
  /* 0x00dc */ float mmsFOV;
  /* 0x00e0 */ float mmsAspect;
  /* 0x00e4 */ float mmsMaxDist;
  /* 0x00e8 */ float clipSizeScale;
  /* 0x00ec */ int iClipSize;
  /* 0x00f0 */ unsigned int stackFire;
  /* 0x00f4 */ float stackFireSpread;
  /* 0x00f8 */ float stackFireAccuracyDecay;
  /* 0x00fc */ unsigned int perks[2];
  /* 0x0104 */ float customFloat0;
  /* 0x0108 */ float customFloat1;
  /* 0x010c */ float customFloat2;
  /* 0x0110 */ int customBool0;
  /* 0x0114 */ int customBool1;
  /* 0x0118 */ int customBool2;
}; /* size: 0x011c */

typedef struct _XMXDEC4
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ int x : 10; /* bit position: 0 */
      /* 0x0000 */ int y : 10; /* bit position: 10 */
      /* 0x0000 */ int z : 10; /* bit position: 20 */
      /* 0x0000 */ unsigned int w : 2; /* bit position: 30 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMXDEC4, *PXMXDEC4; /* size: 0x0004 */

struct CEntVehicleRotor
{
  /* 0x0000 */ float rotation;
  /* 0x0004 */ float speed;
  /* 0x0008 */ unsigned char tag;
  /* 0x0009 */ unsigned char orientation;
  /* 0x000a */ unsigned char armTag;
  /* 0x000b */ char Padding_451;
  /* 0x000c */ float armRotation;
}; /* size: 0x0010 */

struct overlappedTask
{
  /* 0x0000 */ class bdReference<bdRemoteTask> overlappedIO;
  /* 0x0004 */ enum bdRemoteTask::bdStatus finalStatus;
  /* 0x0008 */ enum bdLobbyErrorCode errorCode;
  /* 0x000c */ int type;
  /* 0x0010 */ BOOL active;
  /* 0x0011 */ char Padding_452[3];
  /* 0x0014 */ enum ControllerIndex_t controllerIndex;
  /* 0x0018 */ void* data;
  /* 0x001c */ void* miscData;
  /* 0x0020 */ float startMS;
}; /* size: 0x0024 */

struct GfxLight
{
  /* 0x0000 */ unsigned char type;
  /* 0x0001 */ unsigned char canUseShadowMap;
  /* 0x0002 */ unsigned char shadowmapVolume;
  /* 0x0003 */ char Padding_453;
  /* 0x0004 */ short cullDist;
  /* 0x0006 */ char Padding_454[2];
  /* 0x0008 */ union vec3_t color;
  /* 0x0014 */ union vec3_t dir;
  /* 0x0020 */ union vec3_t origin;
  /* 0x002c */ float radius;
  /* 0x0030 */ float cosHalfFovOuter;
  /* 0x0034 */ float cosHalfFovInner;
  /* 0x0038 */ int exponent;
  /* 0x003c */ unsigned int spotShadowIndex;
  /* 0x0040 */ float dAttenuation;
  /* 0x0044 */ float roundness;
  /* 0x0048 */ union vec3_t angles;
  /* 0x0054 */ float spotShadowHiDistance;
  /* 0x0058 */ union vec4_t diffuseColor;
  /* 0x0068 */ union vec4_t shadowColor;
  /* 0x0078 */ union vec4_t falloff;
  /* 0x0088 */ union vec4_t aAbB;
  /* 0x0098 */ union vec4_t cookieControl0;
  /* 0x00a8 */ union vec4_t cookieControl1;
  /* 0x00b8 */ union vec4_t cookieControl2;
  /* 0x00c8 */ long Padding_455[2];
  /* 0x00d0 */ struct float44 viewMatrix;
  /* 0x0110 */ struct float44 projMatrix;
  /* 0x0150 */ struct GfxLightDef* def;
  /* 0x0154 */ long __PADDING__[3];
}; /* size: 0x0160 */

struct pic_packet_t
{
  /* 0x0000 */ unsigned char size;
  /* 0x0001 */ unsigned char type;
  /* 0x0002 */ unsigned char channel;
}; /* size: 0x0003 */

struct D3D11_RASTERIZER_DESC
{
  /* 0x0000 */ enum D3D11_FILL_MODE FillMode;
  /* 0x0004 */ enum D3D11_CULL_MODE CullMode;
  /* 0x0008 */ int FrontCounterClockwise;
  /* 0x000c */ int DepthBias;
  /* 0x0010 */ float DepthBiasClamp;
  /* 0x0014 */ float SlopeScaledDepthBias;
  /* 0x0018 */ int DepthClipEnable;
  /* 0x001c */ int ScissorEnable;
  /* 0x0020 */ int MultisampleEnable;
  /* 0x0024 */ int AntialiasedLineEnable;
}; /* size: 0x0028 */

struct $_TypeDescriptor$_extraBytes_21
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[21];
}; /* size: 0x001d */

struct CD3D11_RENDER_TARGET_VIEW_DESC
{
}; /* size: 0x0014 */

class bdDownloadInterceptor
{
}; /* size: 0x0004 */

class bdPerformanceValue
{
  /* 0x0000 */ long Padding_456[2];
  /* 0x0008 */ unsigned __int64 m_entityID;
  /* 0x0010 */ __int64 m_performanceValue;
}; /* size: 0x0018 */

struct ScopedCriticalSection
{
  /* 0x0000 */ enum CriticalSection _s;
}; /* size: 0x0004 */

class bdArray<bdAntiCheatChallenge>
{
  /* 0x0000 */ class bdAntiCheatChallenge* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

class bdDTLSInit
{
  /* 0x0000 */ long Padding_457[3];
  /* 0x000c */ unsigned short m_initTag;
  /* 0x000e */ class bdSecurityID m_secID;
}; /* size: 0x0018 */

struct CD3D11_DEFAULT
{
}; /* size: 0x0001 */

class bdDTLSData
{
  /* 0x0000 */ long Padding_458[3];
  /* 0x000c */ unsigned char m_hmac[8];
}; /* size: 0x0014 */

struct ClientVoicePacket_s
{
  /* 0x0000 */ unsigned char data[256];
  /* 0x0100 */ int dataSize;
}; /* size: 0x0104 */

struct voiceCommunication_t
{
  /* 0x0000 */ struct ClientVoicePacket_s voicePackets[10];
  /* 0x0a28 */ int voicePacketCount;
  /* 0x0a2c */ int voicePacketLastTransmit;
}; /* size: 0x0a30 */

struct ID3D11SamplerState
{
}; /* size: 0x0004 */

struct clientFieldSet_s
{
  /* 0x0000 */ int numFields;
  /* 0x0004 */ struct clientField_s* pFields[160];
  /* 0x0284 */ int numNetFields;
  /* 0x0288 */ struct clientFieldNetfield_s* pNetFields;
}; /* size: 0x028c */

struct gjk_slide_move_output_t
{
  /* 0x0000 */ union vec3_t new_position;
  /* 0x000c */ union vec3_t new_velocity;
  /* 0x0018 */ BOOL expensive_push_out;
  /* 0x0019 */ BOOL expensive_push_out_failed;
  /* 0x001a */ char __PADDING__[2];
}; /* size: 0x001c */

struct TracerDef
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ enum tracerType_t type;
  /* 0x0008 */ struct Material* material;
  /* 0x000c */ unsigned int drawInterval;
  /* 0x0010 */ float speed;
  /* 0x0014 */ float beamLength;
  /* 0x0018 */ float beamWidth;
  /* 0x001c */ float screwRadius;
  /* 0x0020 */ float screwDist;
  /* 0x0024 */ float fadeTime;
  /* 0x0028 */ float fadeScale;
  /* 0x002c */ float texRepeatRate;
  /* 0x0030 */ union vec4_t colors[5];
}; /* size: 0x0080 */

struct vector4
{
  /* 0x0000 */ long Padding_459[12];
  /* 0x0030 */ union __m128 w;
}; /* size: 0x0040 */

typedef struct _stat32
{
  /* 0x0000 */ unsigned int st_dev;
  /* 0x0004 */ unsigned short st_ino;
  /* 0x0006 */ unsigned short st_mode;
  /* 0x0008 */ short st_nlink;
  /* 0x000a */ short st_uid;
  /* 0x000c */ short st_gid;
  /* 0x000e */ char Padding_460[2];
  /* 0x0010 */ unsigned int st_rdev;
  /* 0x0014 */ long st_size;
  /* 0x0018 */ long st_atime;
  /* 0x001c */ long st_mtime;
  /* 0x0020 */ long st_ctime;
} stat32, *Pstat32; /* size: 0x0024 */

class bdDMLInfo
{
  /* 0x0000 */ long Padding_461;
  /* 0x0004 */ char m_countryCode[3];
  /* 0x0007 */ char m_country[65];
  /* 0x0048 */ char m_region[65];
  /* 0x0089 */ char m_city[129];
  /* 0x010a */ char Padding_462[2];
  /* 0x010c */ float m_latitude;
  /* 0x0110 */ float m_longitude;
}; /* size: 0x0114 */

class tlNamedEventMarker
{
}; /* size: 0x0001 */

struct GfxPortalWritable
{
  /* 0x0000 */ BOOL isQueued;
  /* 0x0001 */ BOOL isAncestor;
  /* 0x0002 */ unsigned char recursionDepth;
  /* 0x0003 */ unsigned char hullPointCount;
  /* 0x0004 */ union vec2_t* hullPoints;
  /* 0x0008 */ struct GfxPortal* queuedParent;
}; /* size: 0x000c */

struct GfxPortal
{
  /* 0x0000 */ struct GfxPortalWritable writable;
  /* 0x000c */ struct DpvsPlane plane;
  /* 0x0020 */ struct GfxCell* cell;
  /* 0x0024 */ union vec3_t* vertices;
  /* 0x0028 */ unsigned char vertexCount;
  /* 0x0029 */ char Padding_463[3];
  /* 0x002c */ union vec3_t hullAxis[2];
  /* 0x0044 */ union vec3_t bounds[2];
}; /* size: 0x005c */

struct GlassPackedOutline::PackedVert
{
  /* 0x0000 */ short x;
  /* 0x0002 */ short y;
}; /* size: 0x0004 */

class pulse_sum_node
{
  /* 0x0000 */ long Padding_464[4];
  /* 0x0010 */ class phys_mat44 m_world_inv_inertia;
  /* 0x0050 */ class phys_vec3 t_vel;
  /* 0x0060 */ class phys_vec3 a_vel;
  /* 0x0070 */ float m_inv_mass;
  /* 0x0074 */ class rigid_body* m_rb;
}; /* size: 0x0080 */

struct jsonWriter
{
  /* 0x0000 */ char* buffer;
  /* 0x0004 */ int bufferLength;
  /* 0x0008 */ char* currentPos;
  /* 0x000c */ char* endPos;
  /* 0x0010 */ int objectCounter;
  /* 0x0014 */ int matchObjectLevel;
  /* 0x0018 */ int categoryObjectLevel;
  /* 0x001c */ BOOL emptyObject;
  /* 0x001d */ BOOL writeStatus;
  /* 0x001e */ BOOL terminateStatus;
  /* 0x001f */ char __PADDING__[1];
}; /* size: 0x0020 */

struct segment
{
  /* 0x0000 */ char* startPos;
  /* 0x0004 */ char* endPos;
  /* 0x0008 */ int numItems;
}; /* size: 0x000c */

struct eventAccumulator
{
  /* 0x0000 */ enum ControllerIndex_t controllerIndex;
  /* 0x0004 */ struct jsonWriter writer;
  /* 0x0024 */ struct segment category;
  /* 0x0030 */ struct segment match;
  /* 0x003c */ int numMatches;
  /* 0x0040 */ unsigned __int64 fileID;
  /* 0x0048 */ enum RecordEventType eventType;
  /* 0x004c */ long __PADDING__[1];
}; /* size: 0x0050 */

struct GfxMarkContext
{
  /* 0x0000 */ unsigned char lmapIndex;
  /* 0x0001 */ unsigned char primaryLightIndex;
  /* 0x0002 */ unsigned char reflectionProbeIndex;
  /* 0x0003 */ unsigned char modelTypeAndSurf;
  /* 0x0004 */ unsigned short modelIndex;
}; /* size: 0x0006 */

struct MemoryFile
{
  /* 0x0000 */ unsigned char* buffer;
  /* 0x0004 */ int bufferSize;
  /* 0x0008 */ int bytesUsed;
  /* 0x000c */ unsigned char* careerStatsBuffer;
  /* 0x0010 */ int cacheBufferUsed;
  /* 0x0014 */ int segmentIndex;
  /* 0x0018 */ int segmentStart;
  /* 0x001c */ int nonZeroCount;
  /* 0x0020 */ int zeroCount;
  /* 0x0024 */ BOOL errorOnOverflow;
  /* 0x0025 */ BOOL memoryOverflow;
  /* 0x0026 */ BOOL compress_enabled;
  /* 0x0027 */ BOOL rle_enabled;
  /* 0x0028 */ BOOL is_writing;
  /* 0x0029 */ char Padding_465[3];
  /* 0x002c */ int cacheBufferAvail;
  /* 0x0030 */ unsigned char cacheBuffer[32760];
}; /* size: 0x8028 */

class bdTags
{
  union
  {
    /* 0x0000 */ const unsigned int BD_TAG_CONTENT_SERVER_USER_STORAGE;
    /* 0x0000 */ const unsigned int BD_TAG_CONTENT_SERVER_POOLED_STORAGE;
    /* 0x0000 */ const unsigned int BD_TAG_BINARY_EVENT_LOG;
    /* 0x0000 */ const unsigned int BD_TAG_CONTENT_SERVER_PUBLISHER_STORAGE;
    /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

class bdTwitch
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

struct AimTargetCache
{
  /* 0x0000 */ int lastUpdateTime;
  /* 0x0004 */ float targetHeight;
}; /* size: 0x0008 */

class Allocator::Memory
{
  /* 0x0000 */ class Allocator::Memory* next;
  /* 0x0004 */ class Allocator::Memory* prev;
  /* 0x0008 */ void* userData;
  /* 0x000c */ class Allocator::Memory* nextFree;
  /* 0x0010 */ class Allocator::Memory* prevFree;
}; /* size: 0x0014 */

struct svEntity_s
{
  /* 0x0000 */ unsigned short worldSector;
  /* 0x0002 */ unsigned short nextEntityInWorldSector;
  /* 0x0004 */ int linkcontents;
  /* 0x0008 */ union vec3_t linkmin;
  /* 0x0014 */ union vec3_t linkmax;
}; /* size: 0x0020 */

class bdHTTPWrapperBase
{
  /* 0x0000 */ long Padding_466[2];
  /* 0x0008 */ BOOL m_threadExiting;
  /* 0x0009 */ char Padding_467[3];
  /* 0x000c */ class bdMutex m_threadMutex;
  /* 0x0010 */ class bdSemaphore* m_httpSema;
  /* 0x0014 */ class bdThread* m_thread;
  /* 0x0018 */ enum bdHTTPWrapperBase::bdStatus m_status;
  /* 0x001c */ enum bdHTTPWrapperBase::bdOperation m_operation;
}; /* size: 0x0020 */

struct MaterialConstantDefRaw
{
  /* 0x0000 */ unsigned int nameOffset;
  /* 0x0004 */ union vec4_t literal;
}; /* size: 0x0014 */

struct D3D11_BUFFER_DESC
{
  /* 0x0000 */ unsigned int ByteWidth;
  /* 0x0004 */ enum D3D11_USAGE Usage;
  /* 0x0008 */ unsigned int BindFlags;
  /* 0x000c */ unsigned int CPUAccessFlags;
  /* 0x0010 */ unsigned int MiscFlags;
  /* 0x0014 */ unsigned int StructureByteStride;
}; /* size: 0x0018 */

class LinkedList<FixedSizeAllocator<TempPackedOutline>::Block *>
{
  /* 0x0000 */ struct FixedSizeAllocator<TempPackedOutline>::Block* head;
}; /* size: 0x0004 */

class FixedSizeAllocator<TempPackedOutline>
{
  /* 0x0000 */ void* memory;
  /* 0x0004 */ class LinkedList<FixedSizeAllocator<TempPackedOutline>::Block *> freeList;
  /* 0x0008 */ class LinkedList<FixedSizeAllocator<TempPackedOutline>::Block *> usedList;
  /* 0x000c */ unsigned int size;
  /* 0x0010 */ unsigned int used;
  /* 0x0014 */ unsigned int maxUsed;
  /* 0x0018 */ unsigned int magic;
}; /* size: 0x001c */

struct CD3D11_RASTERIZER_DESC
{
}; /* size: 0x0028 */

struct XMVECTORF32
{
  union
  {
    /* 0x0000 */ float f[4];
    /* 0x0000 */ union __m128 v;
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

struct flameTable
{
  /* 0x0000 */ float flameVar_streamChunkGravityStart;
  /* 0x0004 */ float flameVar_streamChunkGravityEnd;
  /* 0x0008 */ float flameVar_streamChunkMaxSize;
  /* 0x000c */ float flameVar_streamChunkStartSize;
  /* 0x0010 */ float flameVar_streamChunkEndSize;
  /* 0x0014 */ float flameVar_streamChunkStartSizeRand;
  /* 0x0018 */ float flameVar_streamChunkEndSizeRand;
  /* 0x001c */ float flameVar_streamChunkDistScalar;
  /* 0x0020 */ float flameVar_streamChunkDistSwayScale;
  /* 0x0024 */ float flameVar_streamChunkDistSwayVelMax;
  /* 0x0028 */ float flameVar_streamChunkSpeed;
  /* 0x002c */ float flameVar_streamChunkDecel;
  /* 0x0030 */ float flameVar_streamChunkVelocityAddScale;
  /* 0x0034 */ float flameVar_streamChunkDuration;
  /* 0x0038 */ float flameVar_streamChunkDurationScaleMaxVel;
  /* 0x003c */ float flameVar_streamChunkDurationVelScalar;
  /* 0x0040 */ float flameVar_streamChunkSizeSpeedScale;
  /* 0x0044 */ float flameVar_streamChunkSizeAgeScale;
  /* 0x0048 */ float flameVar_streamChunkSpawnFireIntervalStart;
  /* 0x004c */ float flameVar_streamChunkSpawnFireIntervalEnd;
  /* 0x0050 */ float flameVar_streamChunkSpawnFireMinLifeFrac;
  /* 0x0054 */ float flameVar_streamChunkSpawnFireMaxLifeFrac;
  /* 0x0058 */ float flameVar_streamChunkFireMinLifeFrac;
  /* 0x005c */ float flameVar_streamChunkFireMinLifeFracStart;
  /* 0x0060 */ float flameVar_streamChunkFireMinLifeFracEnd;
  /* 0x0064 */ float flameVar_streamChunkDripsMinLifeFrac;
  /* 0x0068 */ float flameVar_streamChunkDripsMinLifeFracStart;
  /* 0x006c */ float flameVar_streamChunkDripsMinLifeFracEnd;
  /* 0x0070 */ float flameVar_streamChunkRotationRange;
  /* 0x0074 */ float flameVar_streamSizeRandSinWave;
  /* 0x0078 */ float flameVar_streamSizeRandCosWave;
  /* 0x007c */ float flameVar_streamDripsChunkInterval;
  /* 0x0080 */ float flameVar_streamDripsChunkMinFrac;
  /* 0x0084 */ float flameVar_streamDripsChunkRandFrac;
  /* 0x0088 */ float flameVar_streamSmokeChunkInterval;
  /* 0x008c */ float flameVar_streamSmokeChunkMinFrac;
  /* 0x0090 */ float flameVar_streamSmokeChunkRandFrac;
  /* 0x0094 */ float flameVar_streamChunkCullDistSizeFrac;
  /* 0x0098 */ float flameVar_streamChunkCullMinLife;
  /* 0x009c */ float flameVar_streamChunkCullMaxLife;
  /* 0x00a0 */ float flameVar_streamFuelSizeStart;
  /* 0x00a4 */ float flameVar_streamFuelSizeEnd;
  /* 0x00a8 */ float flameVar_streamFuelLength;
  /* 0x00ac */ float flameVar_streamFuelNumSegments;
  /* 0x00b0 */ float flameVar_streamFuelAnimLoopTime;
  /* 0x00b4 */ float flameVar_streamFlameSizeStart;
  /* 0x00b8 */ float flameVar_streamFlameSizeEnd;
  /* 0x00bc */ float flameVar_streamFlameLength;
  /* 0x00c0 */ float flameVar_streamFlameNumSegments;
  /* 0x00c4 */ float flameVar_streamFlameAnimLoopTime;
  /* 0x00c8 */ float flameVar_streamPrimaryLightRadius;
  /* 0x00cc */ float flameVar_streamPrimaryLightRadiusFlutter;
  /* 0x00d0 */ float flameVar_streamPrimaryLightR;
  /* 0x00d4 */ float flameVar_streamPrimaryLightG;
  /* 0x00d8 */ float flameVar_streamPrimaryLightB;
  /* 0x00dc */ float flameVar_streamPrimaryLightFlutterR;
  /* 0x00e0 */ float flameVar_streamPrimaryLightFlutterG;
  /* 0x00e4 */ float flameVar_streamPrimaryLightFlutterB;
  /* 0x00e8 */ float flameVar_fireLife;
  /* 0x00ec */ float flameVar_fireLifeRand;
  /* 0x00f0 */ float flameVar_fireSpeedScale;
  /* 0x00f4 */ float flameVar_fireSpeedScaleRand;
  /* 0x00f8 */ float flameVar_fireVelocityAddZ;
  /* 0x00fc */ float flameVar_fireVelocityAddZRand;
  /* 0x0100 */ float flameVar_fireVelocityAddSideways;
  /* 0x0104 */ float flameVar_fireGravity;
  /* 0x0108 */ float flameVar_fireGravityEnd;
  /* 0x010c */ float flameVar_fireMaxRotVel;
  /* 0x0110 */ float flameVar_fireFriction;
  /* 0x0114 */ float flameVar_fireEndSizeAdd;
  /* 0x0118 */ float flameVar_fireStartSizeScale;
  /* 0x011c */ float flameVar_fireEndSizeScale;
  /* 0x0120 */ float flameVar_fireBrightness;
  /* 0x0124 */ float flameVar_dripsLife;
  /* 0x0128 */ float flameVar_dripsLifeRand;
  /* 0x012c */ float flameVar_dripsSpeedScale;
  /* 0x0130 */ float flameVar_dripsSpeedScaleRand;
  /* 0x0134 */ float flameVar_dripsVelocityAddZ;
  /* 0x0138 */ float flameVar_dripsVelocityAddZRand;
  /* 0x013c */ float flameVar_dripsVelocityAddSideways;
  /* 0x0140 */ float flameVar_dripsGravity;
  /* 0x0144 */ float flameVar_dripsGravityEnd;
  /* 0x0148 */ float flameVar_dripsMaxRotVel;
  /* 0x014c */ float flameVar_dripsFriction;
  /* 0x0150 */ float flameVar_dripsEndSizeAdd;
  /* 0x0154 */ float flameVar_dripsStartSizeScale;
  /* 0x0158 */ float flameVar_dripsEndSizeScale;
  /* 0x015c */ float flameVar_dripsBrightness;
  /* 0x0160 */ float flameVar_smokeLife;
  /* 0x0164 */ float flameVar_smokeLifeRand;
  /* 0x0168 */ float flameVar_smokeSpeedScale;
  /* 0x016c */ float flameVar_smokeVelocityAddZ;
  /* 0x0170 */ float flameVar_smokeGravity;
  /* 0x0174 */ float flameVar_smokeGravityEnd;
  /* 0x0178 */ float flameVar_smokeMaxRotation;
  /* 0x017c */ float flameVar_smokeMaxRotVel;
  /* 0x0180 */ float flameVar_smokeFriction;
  /* 0x0184 */ float flameVar_smokeEndSizeAdd;
  /* 0x0188 */ float flameVar_smokeStartSizeAdd;
  /* 0x018c */ float flameVar_smokeOriginSizeOfsZScale;
  /* 0x0190 */ float flameVar_smokeOriginOfsZ;
  /* 0x0194 */ float flameVar_smokeFadein;
  /* 0x0198 */ float flameVar_smokeFadeout;
  /* 0x019c */ float flameVar_smokeMaxAlpha;
  /* 0x01a0 */ float flameVar_smokeBrightness;
  /* 0x01a4 */ float flameVar_smokeOriginOffset;
  /* 0x01a8 */ float flameVar_collisionSpeedScale;
  /* 0x01ac */ float flameVar_collisionVolumeScale;
  /* 0x01b0 */ const char* name;
  /* 0x01b4 */ struct Material* fire;
  /* 0x01b8 */ struct Material* smoke;
  /* 0x01bc */ struct Material* heat;
  /* 0x01c0 */ struct Material* drips;
  /* 0x01c4 */ struct Material* streamFuel;
  /* 0x01c8 */ struct Material* streamFuel2;
  /* 0x01cc */ struct Material* streamFlame;
  /* 0x01d0 */ struct Material* streamFlame2;
  /* 0x01d4 */ const char* flameOffLoopSound;
  /* 0x01d8 */ const char* flameIgniteSound;
  /* 0x01dc */ const char* flameOnLoopSound;
  /* 0x01e0 */ const char* flameCooldownSound;
}; /* size: 0x01e4 */

struct GlassAutoLock
{
  /* 0x0000 */ struct GlassLock& lock;
}; /* size: 0x0004 */

typedef struct _IMAGE_TLS_DIRECTORY32
{
  /* 0x0000 */ unsigned long StartAddressOfRawData;
  /* 0x0004 */ unsigned long EndAddressOfRawData;
  /* 0x0008 */ unsigned long AddressOfIndex;
  /* 0x000c */ unsigned long AddressOfCallBacks;
  /* 0x0010 */ unsigned long SizeOfZeroFill;
  /* 0x0014 */ unsigned long Characteristics;
} IMAGE_TLS_DIRECTORY32, *PIMAGE_TLS_DIRECTORY32; /* size: 0x0018 */

struct CD3D11_TEXTURE1D_DESC
{
}; /* size: 0x0020 */

struct XAnimParam
{
  /* 0x0000 */ char strName[16];
  /* 0x0010 */ float fValue;
}; /* size: 0x0014 */

class bdTwitterSearchResult
{
  /* 0x0000 */ long Padding_468;
  /* 0x0004 */ char m_screenName[1024];
  /* 0x0404 */ char m_profileImageURL[560];
  /* 0x0634 */ char m_text[560];
  /* 0x0864 */ unsigned int m_createdTimestamp;
}; /* size: 0x0868 */

struct $_TypeDescriptor$_extraBytes_15
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[15];
}; /* size: 0x0017 */

struct cmd_function_s
{
  /* 0x0000 */ struct cmd_function_s* next;
  /* 0x0004 */ const char* name;
  /* 0x0008 */ const char* autoCompleteDir;
  /* 0x000c */ const char* autoCompleteExt;
  /* 0x0010 */ void* function /* function */;
}; /* size: 0x0014 */

struct demoProfile
{
  /* 0x0000 */ int memUsed[8];
  /* 0x0020 */ int count[8];
}; /* size: 0x0040 */

class MemTrackInst
{
}; /* size: 0x0001 */

struct Destructible_BonePose
{
  /* 0x0000 */ int boneid;
  /* 0x0004 */ int pieceIndex;
  /* 0x0008 */ union vec3_t angles_original;
  /* 0x0014 */ union vec3_t angles_offset;
  /* 0x0020 */ union vec3_t angles_vel;
}; /* size: 0x002c */

struct DestructiblePose
{
  /* 0x0000 */ struct Destructible_BonePose bones[32];
  /* 0x0580 */ short numBones;
  /* 0x0582 */ short destructibleID;
}; /* size: 0x0584 */

class bdGroupID
{
  /* 0x0000 */ long Padding_469;
  /* 0x0004 */ unsigned int m_groupID;
}; /* size: 0x0008 */

struct SndContext
{
  /* 0x0000 */ unsigned int type;
  /* 0x0004 */ unsigned int values[8];
}; /* size: 0x0024 */

struct CmdArgs
{
  /* 0x0000 */ int nesting;
  /* 0x0004 */ enum LocalClientNum_t localClientNum[8];
  /* 0x0024 */ enum ControllerIndex_t controllerIndex[8];
  /* 0x0044 */ struct itemDef_s* itemDef[8];
  /* 0x0064 */ int argshift[8];
  /* 0x0084 */ int argc[8];
  /* 0x00a4 */ const char** argv[8];
  /* 0x00c4 */ char textPool[8192];
  /* 0x20c4 */ const char* argvPool[512];
  /* 0x28c4 */ int usedTextPool[8];
  /* 0x28e4 */ int totalUsedArgvPool;
  /* 0x28e8 */ int totalUsedTextPool;
}; /* size: 0x28ec */

class bdNet
{
}; /* size: 0x0001 */

class broad_phase_base_list::node
{
  /* 0x0000 */ class broad_phase_base* m_bpb;
  /* 0x0004 */ class broad_phase_base_list::node* m_next;
}; /* size: 0x0008 */

struct $_TypeDescriptor$_extraBytes_24
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[24];
}; /* size: 0x0020 */

struct outPacket_t
{
  /* 0x0000 */ int p_cmdNumber;
  /* 0x0004 */ int p_serverTime;
  /* 0x0008 */ int p_realtime;
}; /* size: 0x000c */

struct ID3D11ClassLinkage
{
}; /* size: 0x0004 */

class broad_phase_base_list
{
  /* 0x0000 */ class broad_phase_base_list::node* m_list;
  /* 0x0004 */ class broad_phase_base_list::node** m_list_cur;
}; /* size: 0x0008 */

class broad_phase_environement_query_results
{
  /* 0x0000 */ class broad_phase_base_list m_list_bpi_env;
  /* 0x0008 */ int m_list_bpi_env_count;
  /* 0x000c */ int m_thread_id;
  /* 0x0010 */ unsigned int m_env_collision_flags;
}; /* size: 0x0014 */

struct uploadSendInfo_t
{
  /* 0x0000 */ int ms;
  /* 0x0004 */ unsigned int size;
}; /* size: 0x0008 */

struct cLeafBrushNodeChildren_t
{
  /* 0x0000 */ float dist;
  /* 0x0004 */ float range;
  /* 0x0008 */ unsigned short childOffset[2];
}; /* size: 0x000c */

typedef struct _XMICON4
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ __int64 x : 20; /* bit position: 0 */
      /* 0x0000 */ __int64 y : 20; /* bit position: 20 */
      /* 0x0000 */ __int64 z : 20; /* bit position: 40 */
      /* 0x0000 */ __int64 w : 4; /* bit position: 60 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 v;
  }; /* size: 0x0008 */
} XMICON4, *PXMICON4; /* size: 0x0008 */

class bpei_database_id
{
  /* 0x0000 */ unsigned int m_id1;
  /* 0x0004 */ unsigned int m_id2;
}; /* size: 0x0008 */

class gjk_physics_collision_visitor
{
  /* 0x0000 */ long Padding_470;
  /* 0x0004 */ class bpei_database_id m_local_database_id;
  /* 0x000c */ class broad_phase_environment_info* m_local_bpei;
  /* 0x0010 */ const void* m_local_entity;
  /* 0x0014 */ long Padding_471[3];
  /* 0x0020 */ class phys_vec3 m_local_query_trace_aabb_min;
  /* 0x0030 */ class phys_vec3 m_local_query_trace_aabb_max;
  /* 0x0040 */ class phys_vec3 m_local_query_trace_translation;
  /* 0x0050 */ const struct centity_t* cent;
  /* 0x0054 */ const struct DynEntityDef* dynEntDef;
  /* 0x0058 */ const struct Glass* glass;
  /* 0x005c */ class rigid_body* rb;
  /* 0x0060 */ const class phys_mat44* rb_to_world_xform;
  /* 0x0064 */ const class phys_mat44* cg_to_world_xform;
  /* 0x0068 */ const class phys_mat44* cg_to_rb_xform;
  /* 0x006c */ unsigned int env_collision_flags;
  /* 0x0070 */ const class broad_phase_environment_query_input* bpeqi;
  /* 0x0074 */ class broad_phase_environement_query_results* bpeqr;
  /* 0x0078 */ class phys_auto_activate_callback* auto_activate_callback;
}; /* size: 0x0080 */

struct UnwindGuardNode
{
  /* 0x0000 */ unsigned long Next;
  /* 0x0004 */ unsigned long Handler;
  /* 0x0008 */ unsigned long SecurityCookie;
  /* 0x000c */ unsigned long OrigTargetLevel;
  /* 0x0010 */ unsigned long OrigEstablisher;
  /* 0x0014 */ unsigned long OrigCookiePointer;
  /* 0x0018 */ unsigned long FramePointer;
}; /* size: 0x001c */

struct pathlink_s
{
  /* 0x0000 */ float fDist;
  /* 0x0004 */ unsigned short nodeNum;
  /* 0x0006 */ unsigned char disconnectCount;
  /* 0x0007 */ unsigned char negotiationLink;
  /* 0x0008 */ unsigned char flags;
  /* 0x0009 */ unsigned char ubBadPlaceCount[5];
  /* 0x000e */ char __PADDING__[2];
}; /* size: 0x0010 */

struct WeaponVariantDefHash
{
  /* 0x0000 */ int hash;
  /* 0x0004 */ int weaponIndex;
}; /* size: 0x0008 */

struct cLeafBrushNodeLeaf_t
{
  /* 0x0000 */ unsigned short* brushes;
}; /* size: 0x0004 */

union cLeafBrushNodeData_t
{
  union
  {
    /* 0x0000 */ struct cLeafBrushNodeLeaf_t leaf;
    /* 0x0000 */ struct cLeafBrushNodeChildren_t children;
  }; /* size: 0x000c */
}; /* size: 0x000c */

struct AnimSubState
{
  /* 0x0000 */ unsigned short animIndex;
  /* 0x0002 */ unsigned short alias;
}; /* size: 0x0004 */

typedef struct _OVERLAPPED
{
  /* 0x0000 */ unsigned long Internal;
  /* 0x0004 */ unsigned long InternalHigh;
  union
  {
    struct
    {
      /* 0x0008 */ unsigned long Offset;
      /* 0x000c */ unsigned long OffsetHigh;
    }; /* size: 0x0008 */
    /* 0x0008 */ void* Pointer;
  }; /* size: 0x0008 */
  /* 0x0010 */ void* hEvent;
} OVERLAPPED, *POVERLAPPED; /* size: 0x0014 */

struct GlassPhysics::StaticLocals
{
  /* 0x0000 */ union vec3_t gravity_dir;
  /* 0x000c */ float gravity;
  /* 0x0010 */ float dragLinear;
  /* 0x0014 */ float dragAngular;
}; /* size: 0x0018 */

class bdTeamMember
{
  /* 0x0000 */ long Padding_472[2];
  /* 0x0008 */ unsigned __int64 m_teamID;
  /* 0x0010 */ unsigned __int64 m_userID;
  /* 0x0018 */ char m_userName[64];
  /* 0x0058 */ BOOL m_isOnline;
  /* 0x0059 */ unsigned char m_status;
}; /* size: 0x0060 */

class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
{
  /* 0x0000 */ const unsigned int npos;
}; /* size: 0x001c */

typedef struct _XMHEND3
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ int x : 11; /* bit position: 0 */
      /* 0x0000 */ int y : 11; /* bit position: 11 */
      /* 0x0000 */ int z : 10; /* bit position: 22 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
} XMHEND3, *PXMHEND3; /* size: 0x0004 */

typedef struct _XMUSHORTN2
{
  /* 0x0000 */ unsigned short x;
  /* 0x0002 */ unsigned short y;
} XMUSHORTN2, *PXMUSHORTN2; /* size: 0x0004 */

struct ClientArchiveData
{
  /* 0x0000 */ int serverTime;
  /* 0x0004 */ union vec3_t origin;
  /* 0x0010 */ union vec3_t velocity;
  /* 0x001c */ int bobCycle;
  /* 0x0020 */ int movementDir;
  /* 0x0024 */ struct PlayerVehicleState playerVehStateClientArchive;
}; /* size: 0x0078 */

struct clientActive_t
{
  /* 0x0000 */ struct MatchState* parseMatchStatesBuf;
  /* 0x0004 */ int numParseMatchStates;
  /* 0x0008 */ int maxParseMatchStates;
  /* 0x000c */ struct entityState_s* parseEntitiesBuf;
  /* 0x0010 */ int numParseEntities;
  /* 0x0014 */ int maxParseEntities;
  /* 0x0018 */ struct clientState_s* parseClientsBuf;
  /* 0x001c */ int numParseClients;
  /* 0x0020 */ int maxParseClients;
  /* 0x0024 */ struct actorState_s* parseActorsBuf;
  /* 0x0028 */ int numParseActors;
  /* 0x002c */ int maxParseActors;
  /* 0x0030 */ struct outPacket_t* outPackets;
  /* 0x0034 */ struct clSnapshot_t* snapshots;
  /* 0x0038 */ int packetBackupCount;
  /* 0x003c */ int packetBackupMask;
  /* 0x0040 */ int gameStateMarker;
  /* 0x0044 */ BOOL usingAds;
  /* 0x0045 */ char Padding_473[3];
  /* 0x0048 */ int timeoutcount;
  /* 0x004c */ long Padding_474;
  /* 0x0050 */ struct clSnapshot_t snap;
  /* 0x2a98 */ int snapServerTime;
  /* 0x2a9c */ int oldSnapServerTime;
  /* 0x2aa0 */ BOOL alwaysFalse;
  /* 0x2aa1 */ char Padding_475[3];
  /* 0x2aa4 */ int serverTime;
  /* 0x2aa8 */ int oldServerTime;
  /* 0x2aac */ int oldFrameServerTime;
  /* 0x2ab0 */ int serverTimeDelta;
  /* 0x2ab4 */ int extrapolatedSnapshot;
  /* 0x2ab8 */ int newSnapshots;
  /* 0x2abc */ int serverId;
  /* 0x2ac0 */ int forceNewSnapshots;
  /* 0x2ac4 */ int unpausedTimeBehind;
  /* 0x2ac8 */ int serverTimeErrorIndex;
  /* 0x2acc */ int serverTimeErrorCount;
  /* 0x2ad0 */ int serverTimeErrorCumul;
  /* 0x2ad4 */ int serverTimeErrorAvg;
  /* 0x2ad8 */ int serverTimeErrorPrev;
  /* 0x2adc */ int serverTimeError[20];
  /* 0x2b2c */ int serverTimeError2[20];
  /* 0x2b7c */ char mapname[64];
  /* 0x2bbc */ int parseMatchStateIndex;
  /* 0x2bc0 */ int parseEntitiesIndex;
  /* 0x2bc4 */ int parseClientsIndex;
  /* 0x2bc8 */ int parseActorsIndex;
  /* 0x2bcc */ BOOL stanceHeld;
  /* 0x2bcd */ char Padding_476[3];
  /* 0x2bd0 */ enum StanceState stance;
  /* 0x2bd4 */ enum StanceState stancePosition;
  /* 0x2bd8 */ int stanceTime;
  /* 0x2bdc */ BOOL weapNextHeld;
  /* 0x2bdd */ char Padding_477[3];
  /* 0x2be0 */ int weapNextTime;
  /* 0x2be4 */ BOOL switchingToInventory;
  /* 0x2be5 */ char Padding_478[3];
  /* 0x2be8 */ union Weapon cgameUserCmdWeapon;
  /* 0x2bec */ union Weapon cgameUserCmdOffHandWeapon;
  /* 0x2bf0 */ union Weapon cgameUserCmdLastWeaponForAlt;
  /* 0x2bf4 */ float cgameFOVSensitivityScale;
  /* 0x2bf8 */ float cgameMaxPitchSpeed;
  /* 0x2bfc */ float cgameMaxYawSpeed;
  /* 0x2c00 */ union vec3_t cgameKickAngles;
  /* 0x2c0c */ union vec3_t cgameOrigin;
  /* 0x2c18 */ union vec3_t cgameVelocity;
  /* 0x2c24 */ struct PlayerVehicleState cgamePlayerVehState;
  /* 0x2c78 */ int cgameBobCycle;
  /* 0x2c7c */ int cgameMovementDir;
  /* 0x2c80 */ class bitarray<64> cgameExtraButton_bits;
  /* 0x2c88 */ int cgamePredictedDataServerTime;
  /* 0x2c8c */ union vec3_t viewangles;
  /* 0x2c98 */ int skelTimeStamp;
  /* 0x2c9c */ volatile long skelMemPos;
  /* 0x2ca0 */ char skelMemory[262144];
  /* 0x42ca0 */ char* skelMemoryStart;
  /* 0x42ca4 */ BOOL allowedAllocSkel;
  /* 0x42ca5 */ char Padding_479[3];
  /* 0x42ca8 */ struct usercmd_s cmds[128];
  /* 0x44ea8 */ int cmdNumber;
  /* 0x44eac */ struct ClientArchiveData clientArchive[256];
  /* 0x4c6ac */ int clientArchiveIndex;
  /* 0x4c6b0 */ struct entityState_s entityBaselines[1024];
  /* 0x8a6b0 */ int corruptedTranslationFile;
  /* 0x8a6b4 */ char translationVersion[256];
  /* 0x8a7b4 */ int lastFireTime;
  /* 0x8a7b8 */ BOOL useHeld;
  /* 0x8a7b9 */ char Padding_480[3];
  /* 0x8a7bc */ int useTime;
  /* 0x8a7c0 */ int useCount;
  /* 0x8a7c4 */ int wasInVehicle;
  /* 0x8a7c8 */ int serverFrameMS;
  /* 0x8a7cc */ int serverKbps;
  /* 0x8a7d0 */ int serverKbpsAvg[2];
  /* 0x8a7d8 */ int serverKbpsCount[2];
}; /* size: 0x8a7e0 */

struct gjkcc_input_t
{
  /* 0x0000 */ unsigned int gjkcc_id;
  /* 0x0004 */ BOOL is_server_thread;
  /* 0x0005 */ char Padding_481[3];
  /* 0x0008 */ class colgeom_visitor_inlined_t<300>* proximity_data;
  /* 0x000c */ int proximity_mask;
  /* 0x0010 */ int m_ent_num;
  /* 0x0014 */ unsigned int m_gjk_query_flags;
  /* 0x0018 */ const struct gjk_base_t* m_gjk_cg;
  /* 0x001c */ const class phys_mat44* m_mat;
  /* 0x0020 */ struct gjccc_create_t* create_info;
}; /* size: 0x0024 */

struct Destructible
{
  /* 0x0000 */ int entNum;
  /* 0x0004 */ struct DESTRUCTIBLE_PIECE_INFO* pieceArray;
  /* 0x0008 */ int oldestBurnTime;
  /* 0x000c */ unsigned char destructiblePoseID;
  /* 0x000d */ char Padding_482[3];
  /* 0x0010 */ int pieceCount;
  /* 0x0014 */ struct DestructibleDef* ddef;
  /* 0x0018 */ unsigned int flags;
  /* 0x001c */ struct DestructibleState states[5];
  /* 0x006c */ unsigned char bHasBeenHit;
  /* 0x006d */ char __PADDING__[3];
}; /* size: 0x0070 */

struct msg_bookmark_t
{
  /* 0x0000 */ int overflowed;
  /* 0x0004 */ int cursize;
  /* 0x0008 */ int bit;
  /* 0x000c */ int lastEntityRef;
  /* 0x0010 */ int readcount;
  /* 0x0014 */ unsigned char bitByte;
  /* 0x0015 */ char __PADDING__[3];
}; /* size: 0x0018 */

typedef struct _XMFLOAT2
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
} XMFLOAT2, *PXMFLOAT2; /* size: 0x0008 */

struct DestructibleDef
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ struct XModel* model;
  /* 0x0008 */ struct XModel* pristineModel;
  /* 0x000c */ int numPieces;
  /* 0x0010 */ struct DestructiblePiece* pieces;
  /* 0x0014 */ int clientOnly;
}; /* size: 0x0018 */

struct XMVECTORI32
{
  union
  {
    /* 0x0000 */ int i[4];
    /* 0x0000 */ union __m128 v;
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

struct XModel
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned char numBones;
  /* 0x0005 */ unsigned char numRootBones;
  /* 0x0006 */ unsigned char numsurfs;
  /* 0x0007 */ unsigned char lodRampType;
  union
  {
    /* 0x0008 */ unsigned short* localBoneNames;
    /* 0x0008 */ unsigned short* boneNames;
  }; /* size: 0x0004 */
  union
  {
    /* 0x000c */ unsigned char* localParentList;
    /* 0x000c */ unsigned char* parentList;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0010 */ short* localQuats;
    /* 0x0010 */ short* quats;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0014 */ float* localTrans;
    /* 0x0014 */ float* trans;
  }; /* size: 0x0004 */
  /* 0x0018 */ unsigned char* partClassification;
  /* 0x001c */ struct DObjAnimMat* baseMat;
  /* 0x0020 */ struct XSurface* surfs;
  /* 0x0024 */ struct Material** materialHandles;
  /* 0x0028 */ struct XModelLodInfo lodInfo[4];
  /* 0x0098 */ struct XModelCollSurf_s* collSurfs;
  /* 0x009c */ int numCollSurfs;
  /* 0x00a0 */ int contents;
  union
  {
    /* 0x00a4 */ struct XBoneInfo* localBoneInfo;
    /* 0x00a4 */ struct XBoneInfo* boneInfo;
  }; /* size: 0x0004 */
  /* 0x00a8 */ float radius;
  /* 0x00ac */ union vec3_t mins;
  /* 0x00b8 */ union vec3_t maxs;
  /* 0x00c4 */ short numLods;
  /* 0x00c6 */ short collLod;
  /* 0x00c8 */ float* himipInvSqRadii;
  /* 0x00cc */ int memUsage;
  /* 0x00d0 */ int flags;
  /* 0x00d4 */ BOOL bad;
  /* 0x00d5 */ char Padding_483[3];
  /* 0x00d8 */ struct PhysPreset* physPreset;
  /* 0x00dc */ unsigned char numCollmaps;
  /* 0x00dd */ char Padding_484[3];
  /* 0x00e0 */ struct Collmap* collmaps;
  /* 0x00e4 */ struct PhysConstraints* physConstraints;
  /* 0x00e8 */ union vec3_t lightingOriginOffset;
  /* 0x00f4 */ float lightingOriginRange;
}; /* size: 0x00f8 */

struct vehicle_custom_path_t
{
  /* 0x0000 */ short pathOrder[128];
  /* 0x0100 */ short pathLinkIdx[128];
  /* 0x0200 */ unsigned char inUse;
  /* 0x0201 */ char __PADDING__[1];
}; /* size: 0x0202 */

struct ITypeLib
{
}; /* size: 0x0004 */

struct NetFieldList
{
  /* 0x0000 */ const struct NetField* array;
  /* 0x0004 */ unsigned int count;
  /* 0x0008 */ unsigned int bbPrintRandMax;
  /* 0x000c */ unsigned int bbPrintCount;
  /* 0x0010 */ unsigned int bbChecksum;
  /* 0x0014 */ struct BitField bitFields;
  /* 0x0024 */ const char* fieldArrayName;
}; /* size: 0x0028 */

struct ID3D11Buffer
{
}; /* size: 0x0004 */

struct XRigidVertList
{
  /* 0x0000 */ unsigned short boneOffset;
  /* 0x0002 */ unsigned short vertCount;
  /* 0x0004 */ unsigned short triOffset;
  /* 0x0006 */ unsigned short triCount;
  /* 0x0008 */ struct XSurfaceCollisionTree* collisionTree;
}; /* size: 0x000c */

struct XSurfaceCollisionTree
{
  /* 0x0000 */ union vec3_t trans;
  /* 0x000c */ union vec3_t scale;
  /* 0x0018 */ unsigned int nodeCount;
  /* 0x001c */ struct XSurfaceCollisionNode* nodes;
  /* 0x0020 */ unsigned int leafCount;
  /* 0x0024 */ struct XSurfaceCollisionLeaf* leafs;
}; /* size: 0x0028 */

struct GfxStaticModelInst
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ union vec3_t lightingOrigin;
}; /* size: 0x0024 */

struct XSurfaceCollisionLeaf
{
  /* 0x0000 */ unsigned short triangleBeginIndex;
}; /* size: 0x0002 */

class rigid_body_constraint_ragdoll
{
  /* 0x0000 */ long Padding_485[4];
  /* 0x0010 */ class phys_vec3 m_b1_r_loc;
  /* 0x0020 */ class phys_vec3 m_b2_r_loc;
  /* 0x0030 */ unsigned int m_flags;
  /* 0x0034 */ class pulse_sum_cache m_ps_cache_list[10];
  /* 0x005c */ long Padding_486;
  /* 0x0060 */ class phys_vec3 m_b1_axis_loc;
  /* 0x0070 */ class phys_vec3 m_b2_axis_loc;
  /* 0x0080 */ class phys_vec3 m_b1_a1_loc;
  /* 0x0090 */ class phys_vec3 m_b1_a2_loc;
  /* 0x00a0 */ class phys_vec3 m_b1_ref_loc;
  /* 0x00b0 */ class phys_vec3 m_b2_ref_min_loc;
  /* 0x00c0 */ class phys_vec3 m_b2_ref_max_loc;
  /* 0x00d0 */ class ragdoll_joint_limit_info m_joint_limits[2];
  /* 0x0110 */ int m_joint_limits_count;
  /* 0x0114 */ float m_damp_k;
}; /* size: 0x0120 */

struct DestructiblePiece
{
  /* 0x0000 */ struct DestructibleStage stages[5];
  /* 0x00f0 */ unsigned char parentPiece;
  /* 0x00f1 */ char Padding_487[3];
  /* 0x00f4 */ float parentDamagePercent;
  /* 0x00f8 */ float bulletDamageScale;
  /* 0x00fc */ float explosiveDamageScale;
  /* 0x0100 */ float meleeDamageScale;
  /* 0x0104 */ float impactDamageScale;
  /* 0x0108 */ float entityDamageTransfer;
  /* 0x010c */ struct PhysConstraints* physConstraints;
  /* 0x0110 */ int health;
  /* 0x0114 */ const char* damageSound;
  /* 0x0118 */ const struct FxEffectDef* burnEffect;
  /* 0x011c */ const char* burnSound;
  /* 0x0120 */ unsigned short enableLabel;
  /* 0x0122 */ char Padding_488[2];
  /* 0x0124 */ int hideBones[5];
}; /* size: 0x0138 */

class Phys_UnitQuaternion
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
  /* 0x0008 */ float z;
  /* 0x000c */ float w;
}; /* size: 0x0010 */

struct $_TypeDescriptor$_extraBytes_31
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[31];
}; /* size: 0x0027 */

struct DevGraph
{
  /* 0x0000 */ union vec2_t* knots;
  /* 0x0004 */ int* knotCount;
  /* 0x0008 */ int knotCountMax;
  /* 0x000c */ int selectedKnot;
  /* 0x0010 */ void* eventCallback /* function */;
  /* 0x0014 */ void* textCallback /* function */;
  /* 0x0018 */ void* data;
  /* 0x001c */ BOOL disableEditingEndPoints;
  /* 0x001d */ char __PADDING__[3];
}; /* size: 0x0020 */

struct GraphFloat
{
  /* 0x0000 */ char name[64];
  /* 0x0040 */ union vec2_t knots[32];
  /* 0x0140 */ int knotCount;
  /* 0x0144 */ float scale;
  /* 0x0148 */ struct DevGraph devguiGraph;
}; /* size: 0x0168 */

struct serverSnapshot_t
{
  /* 0x0000 */ struct playerState_s* ps[18];
  /* 0x0048 */ int entityCount;
  /* 0x004c */ int clientCount;
  /* 0x0050 */ int actorCount;
  /* 0x0054 */ int firstEntityIndex;
  /* 0x0058 */ int firstClientIndex;
  /* 0x005c */ int firstActorIndex;
  /* 0x0060 */ int matchStateIndex;
}; /* size: 0x0064 */

struct challenge_t
{
  /* 0x0000 */ struct netadr_t adr;
  /* 0x0014 */ int challenge;
  /* 0x0018 */ int time;
  /* 0x001c */ int pingTime;
  /* 0x0020 */ int firstTime;
  /* 0x0024 */ int firstPing;
  /* 0x0028 */ int connected;
  /* 0x002c */ int guid;
}; /* size: 0x0030 */

struct tempBanSlot_t
{
  /* 0x0000 */ int guid;
  /* 0x0004 */ int banTime;
}; /* size: 0x0008 */

struct rateBoostingStats_t
{
  /* 0x0000 */ int bytesSent;
  /* 0x0004 */ int serverMS;
  /* 0x0008 */ int clientPings;
  /* 0x000c */ int clientAckFramesBehind;
  /* 0x0010 */ int clientUsercmdTimeDiff;
  /* 0x0014 */ int numClientFrames;
  /* 0x0018 */ int numFrames;
}; /* size: 0x001c */

struct serverStatic_t
{
  /* 0x0000 */ int clientCount;
  /* 0x0004 */ int packetBackupCount;
  /* 0x0008 */ int packetBackupMask;
  /* 0x000c */ struct entityState_s* noDeltaEntities;
  /* 0x0010 */ struct entityState_s* snapshotEntities;
  /* 0x0014 */ int numNoDeltaEntities;
  /* 0x0018 */ int nextNoDeltaEntity;
  /* 0x001c */ struct cachedSnapshot_t* cachedSnapshotFrames;
  /* 0x0020 */ struct archivedEntity_s* cachedSnapshotEntities;
  /* 0x0024 */ struct serverSnapshot_t snapshots[16];
  /* 0x0664 */ int serverSnapshotTimes[16];
  /* 0x06a4 */ int nextServerSnapshotIndex;
  /* 0x06a8 */ int baselineCreated;
  /* 0x06ac */ int initialized;
  /* 0x06b0 */ int time;
  /* 0x06b4 */ int physicsTime;
  /* 0x06b8 */ int oldestArchiveTime;
  /* 0x06bc */ int snapFlagServerBit;
  /* 0x06c0 */ struct client_t* clients;
  /* 0x06c4 */ int numCachedSnapshotMatchStates;
  /* 0x06c8 */ int numCachedSnapshotEntities;
  /* 0x06cc */ int numCachedSnapshotClients;
  /* 0x06d0 */ int numCachedSnapshotActors;
  /* 0x06d4 */ int numSnapshotMatchStates;
  /* 0x06d8 */ int numSnapshotEntities;
  /* 0x06dc */ int numSnapshotClients;
  /* 0x06e0 */ int numSnapshotActors;
  /* 0x06e4 */ int nextSnapshotMatchStates;
  /* 0x06e8 */ int nextSnapshotEntities;
  /* 0x06ec */ int nextSnapshotClients;
  /* 0x06f0 */ int nextSnapshotActors;
  /* 0x06f4 */ struct MatchState* snapshotMatchStates;
  /* 0x06f8 */ struct clientState_s* snapshotClients;
  /* 0x06fc */ struct actorState_s* snapshotActors;
  /* 0x0700 */ int nextArchivedSnapshotFrames;
  /* 0x0704 */ struct archivedSnapshot_s* archivedSnapshotFrames;
  /* 0x0708 */ unsigned char* archivedSnapshotBuffer;
  /* 0x070c */ int nextArchivedSnapshotBuffer;
  /* 0x0710 */ int nextCachedSnapshotMatchStates;
  /* 0x0714 */ int nextCachedSnapshotEntities;
  /* 0x0718 */ int nextCachedSnapshotClients;
  /* 0x071c */ int nextCachedSnapshotActors;
  /* 0x0720 */ int nextCachedSnapshotFrames;
  /* 0x0724 */ struct MatchState* cachedSnapshotMatchStates;
  /* 0x0728 */ struct cachedClient_s* cachedSnapshotClients;
  /* 0x072c */ struct cachedActor_s* cachedSnapshotActors;
  /* 0x0730 */ int nextHeartbeatTime;
  /* 0x0734 */ int nextStatusResponseTime;
  /* 0x0738 */ struct challenge_t challenges[1024];
  /* 0xc738 */ struct netadr_t redirectAddress;
  /* 0xc74c */ struct netProfileInfo_t OOBProf;
  /* 0xcd2c */ struct tempBanSlot_t tempBans[16];
  /* 0xcdac */ long Padding_489;
  /* 0xcdb0 */ unsigned __int64 xuids[18];
  /* 0xce40 */ struct playerInfo_t playerInfos[18];
  /* 0xeaf0 */ union vec3_t mapCenter;
  /* 0xeafc */ union vec3_t mapCenterBoundsMin;
  /* 0xeb08 */ union vec3_t mapCenterBoundsMax;
  /* 0xeb14 */ int dataSentLastSec;
  /* 0xeb18 */ int activeEntities;
  /* 0xeb1c */ int archivedEntityCount;
  /* 0xeb20 */ int snapshotBoostingSuspendTimeout;
  /* 0xeb24 */ int badServerFPSCount;
  /* 0xeb28 */ int badServerFPSLast;
  /* 0xeb2c */ struct rateBoostingStats_t rateBoostingStats;
  /* 0xeb48 */ int rateBoostingEnabled;
  /* 0xeb4c */ long __PADDING__[13];
}; /* size: 0xeb80 */

struct MaterialRaw
{
  /* 0x0000 */ struct MaterialInfoRaw info;
  /* 0x002c */ unsigned int refStateBits[2];
  /* 0x0034 */ unsigned short textureCount;
  /* 0x0036 */ unsigned short constantCount;
  /* 0x0038 */ unsigned int techSetNameOffset;
  /* 0x003c */ unsigned int textureTableOffset;
  /* 0x0040 */ unsigned int constantTableOffset;
  /* 0x0044 */ unsigned int thermalMaterialNameOffset;
}; /* size: 0x0048 */

struct FxElemVisStateSample
{
  /* 0x0000 */ struct FxElemVisualState base;
  /* 0x0018 */ struct FxElemVisualState amplitude;
}; /* size: 0x0030 */

struct FxElemMarkVisuals
{
  /* 0x0000 */ struct Material* materials[2];
}; /* size: 0x0008 */

struct jqConditionalQueue
{
  /* 0x0000 */ struct jqQueue Queue;
  /* 0x0038 */ struct jqQueue* DstQueue;
  /* 0x003c */ unsigned int allow;
  /* 0x0040 */ int lock;
  /* 0x0044 */ long __PADDING__[1];
}; /* size: 0x0048 */

class contact_point_info
{
  /* 0x0000 */ class phys_vec3 m_normal;
  /* 0x0010 */ float m_fric_coef;
  /* 0x0014 */ float m_bounce_coef;
  /* 0x0018 */ float m_max_restitution_vel;
  /* 0x001c */ int m_flags;
  /* 0x0020 */ int m_point_pair_count;
  /* 0x0024 */ class phys_vec3* m_list_b1_r_loc;
  /* 0x0028 */ class phys_vec3* m_list_b2_r_loc;
  /* 0x002c */ struct contact_point_info::pulse_sum_cache_info* m_list_pulse_sum_cache_info;
  /* 0x0030 */ class contact_point_info* m_next_link;
  /* 0x0034 */ const void* m_rb2_entity;
  /* 0x0038 */ float m_translation_lambda;
  /* 0x003c */ class phys_collision_pair* m_pcp;
  /* 0x0040 */ class rigid_body_constraint_contact* m_rbc_contact;
}; /* size: 0x0050 */

struct FxTrailVertex
{
  /* 0x0000 */ union vec2_t pos;
  /* 0x0008 */ union vec2_t normal;
  /* 0x0010 */ float texCoord;
}; /* size: 0x0014 */

typedef struct _XMSHORTN4
{
  /* 0x0000 */ short x;
  /* 0x0002 */ short y;
  /* 0x0004 */ short z;
  /* 0x0006 */ short w;
} XMSHORTN4, *PXMSHORTN4; /* size: 0x0008 */

struct ZBarrierDef
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int generalRepairSound1;
  /* 0x0008 */ unsigned int generalRepairSound2;
  /* 0x000c */ unsigned int upgradedGeneralRepairSound1;
  /* 0x0010 */ unsigned int upgradedGeneralRepairSound2;
  /* 0x0014 */ unsigned int delayBetweenRepSounds;
  /* 0x0018 */ float delayBetweenRepSoundsDuration;
  /* 0x001c */ unsigned int earthquakeOnRepair;
  /* 0x0020 */ float earthquakeMinScale;
  /* 0x0024 */ float earthquakeMaxScale;
  /* 0x0028 */ float earthquakeMinDuration;
  /* 0x002c */ float earthquakeMaxDuration;
  /* 0x0030 */ float earthquakeRadius;
  /* 0x0034 */ int numBoardsInBarrier;
  /* 0x0038 */ unsigned int autoHideOpenPieces;
  /* 0x003c */ unsigned int taunts;
  /* 0x0040 */ unsigned int reachThroughAttacks;
  /* 0x0044 */ unsigned short zombieTauntAnimState;
  /* 0x0046 */ unsigned short zombieReachThroughAnimState;
  /* 0x0048 */ int numAttackSlots;
  /* 0x004c */ float attackSpotHorzOffset;
  /* 0x0050 */ struct ZBarrierBoard boards[6];
}; /* size: 0x0230 */

struct DXGI_SHARED_RESOURCE
{
  /* 0x0000 */ void* Handle;
}; /* size: 0x0004 */

struct std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >::rebind<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >
{
}; /* size: 0x0001 */

class phys_free_list<broad_phase_info>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<broad_phase_info>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<broad_phase_info>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<broad_phase_info>
{
  /* 0x0000 */ class phys_free_list<broad_phase_info>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ class broad_phase_info* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

class MatchMakingQuery
{
  /* 0x0000 */ long Padding_490;
  /* 0x0004 */ enum QueryId m_queryId;
  /* 0x0008 */ unsigned __int64 m_PARAM_GAME_SECURITY_ID;
  /* 0x0010 */ int m_PARAM_SHOW_IN_MATCHMAKING;
  /* 0x0014 */ int m_PARAM_NETCODE_VERSION;
  /* 0x0018 */ int m_PARAM_MAP_PACKS;
  /* 0x001c */ int m_PARAM_PLAYLIST_VERSION;
  /* 0x0020 */ int m_PARAM_PLAYLIST_NUMBER;
  /* 0x0024 */ int m_PARAM_IS_EMPTY;
  /* 0x0028 */ int m_PARAM_TEAM_SIZE;
  /* 0x002c */ float m_PARAM_SKILL;
  /* 0x0030 */ float m_PARAM_SKILL_WEIGHT;
  /* 0x0034 */ int m_PARAM_GEO_1;
  /* 0x0038 */ int m_PARAM_GEO_2;
  /* 0x003c */ int m_PARAM_GEO_3;
  /* 0x0040 */ int m_PARAM_GEO_4;
  /* 0x0044 */ float m_PARAM_GEO_1_WEIGHT;
  /* 0x0048 */ float m_PARAM_GEO_2_WEIGHT;
  /* 0x004c */ float m_PARAM_GEO_3_WEIGHT;
  /* 0x0050 */ float m_PARAM_GEO_4_WEIGHT;
}; /* size: 0x0058 */

struct generic_avl_map_node_t
{
  /* 0x0000 */ void* m_data;
  /* 0x0004 */ unsigned int m_avl_key;
  /* 0x0008 */ class phys_inplace_avl_tree_node<generic_avl_map_node_t> m_avl_node_info;
}; /* size: 0x0014 */

struct std::pair<WeaponComponent *,WeaponComponent *>
{
}; /* size: 0x0008 */

struct PhysObjUserData
{
  /* 0x0000 */ class rigid_body* body;
  /* 0x0004 */ class NitrousVehicle* vehicle;
  /* 0x0008 */ struct gjk_geom_list_t m_gjk_geom_list;
  /* 0x0010 */ struct PhysObjUserData* m_next_link;
  /* 0x0014 */ long Padding_491[3];
  /* 0x0020 */ class phys_mat44 cg2rb;
  /* 0x0060 */ class phys_mat44 m2w;
  /* 0x00a0 */ class broad_phase_base* m_bpb;
  /* 0x00a4 */ union vec3_t tvel;
  /* 0x00b0 */ union vec3_t avel;
  /* 0x00bc */ float friction;
  /* 0x00c0 */ float bounce;
  /* 0x00c4 */ int id;
  /* 0x00c8 */ int underwater;
  /* 0x00cc */ int buoyancy;
  /* 0x00d0 */ int timeBuoyant;
  /* 0x00d4 */ int timeRipple;
  /* 0x00d8 */ unsigned short trDuration;
  /* 0x00da */ unsigned short refcount;
  /* 0x00dc */ float m_time_since_last_event;
  /* 0x00e0 */ float m_time_since_last_reeval;
  /* 0x00e4 */ int m_flags;
  /* 0x00e8 */ float mass;
  /* 0x00ec */ union vec3_t buoyancyBoxMin;
  /* 0x00f8 */ union vec3_t buoyancyBoxMax;
  /* 0x0104 */ union vec3_t centerOfMassOffset;
  /* 0x0110 */ int owner;
  /* 0x0114 */ enum PhysicsOwnerType owner_type;
  /* 0x0118 */ struct hitinfo_t hitinfo;
}; /* size: 0x0140 */

class rigid_body_constraint_distance
{
  /* 0x0000 */ long Padding_492[4];
  /* 0x0010 */ class phys_vec3 m_b1_r_loc;
  /* 0x0020 */ class phys_vec3 m_b2_r_loc;
  /* 0x0030 */ float m_min_distance;
  /* 0x0034 */ float m_max_distance;
  /* 0x0038 */ float m_next_max_distance;
  /* 0x003c */ float m_max_distance_vel;
  /* 0x0040 */ float m_damp_coef;
  /* 0x0044 */ unsigned int m_flags;
  /* 0x0048 */ class pulse_sum_cache m_ps_cache_list[3];
}; /* size: 0x0060 */

class broad_phase_terrain_query_callback
{
}; /* size: 0x0004 */

struct phys_inplace_avl_tree<phys_gjk_geom_id_pair_key,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal::avl_tree_accessor>::stack_item
{
  /* 0x0000 */ struct phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal** m_node;
  /* 0x0004 */ int m_child;
}; /* size: 0x0008 */

struct bdHTTPBuffer
{
  /* 0x0000 */ void* m_contentReceiveBuffer;
  /* 0x0004 */ unsigned int m_contentReceiveBufferSize;
  /* 0x0008 */ const void* m_contentSendBuffer;
  /* 0x000c */ unsigned int m_contentSendBufferSize;
  /* 0x0010 */ char m_httpCommonBuffer[1024];
  /* 0x0410 */ unsigned int m_httpCommonBufferSize;
  /* 0x0414 */ char m_responseStatusBuffer[128];
  /* 0x0494 */ unsigned int m_responseStatusBufferSize;
}; /* size: 0x0498 */

class rigid_body_constraint_custom_orientation
{
  /* 0x0000 */ long Padding_493[3];
  /* 0x000c */ class pulse_sum_cache m_ps_cache_list[5];
  /* 0x0020 */ BOOL m_active;
  /* 0x0021 */ BOOL m_no_orientation_correction;
  /* 0x0022 */ char Padding_494[2];
  /* 0x0024 */ float m_torque_resistance_pitch_roll;
  /* 0x0028 */ float m_torque_resistance_yaw;
  /* 0x002c */ float m_torque_resistance_yaw_max_collision_speed;
  /* 0x0030 */ float m_upright_strength;
}; /* size: 0x0034 */

struct animation_s
{
  /* 0x0000 */ char name[64];
  /* 0x0040 */ int initialLerp;
  /* 0x0044 */ int finalLerp;
  /* 0x0048 */ float forceAnimRate;
  /* 0x004c */ float moveSpeed;
  /* 0x0050 */ float rotSpeed;
  /* 0x0054 */ int duration;
  /* 0x0058 */ int nameHash;
  /* 0x005c */ int flags;
  /* 0x0060 */ __int64 movetype;
  /* 0x0068 */ int stance;
  /* 0x006c */ int movestatus;
  /* 0x0070 */ int noteType;
  /* 0x0074 */ long __PADDING__[1];
}; /* size: 0x0078 */

class phys_collision_pair
{
  /* 0x0000 */ long Padding_495;
  /* 0x0004 */ class broad_phase_info* m_bpi1;
  /* 0x0008 */ class broad_phase_info* m_bpi2;
  /* 0x000c */ float m_hit_time;
  /* 0x0010 */ class phys_gjk_cache_info* m_gjk_ci;
}; /* size: 0x0014 */

class phys_vec2
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
}; /* size: 0x0008 */

struct contact_manifold_mesh_point
{
  /* 0x0000 */ class phys_vec3 m_p;
  /* 0x0010 */ class phys_vec2 m_contact_p;
  /* 0x0018 */ long __PADDING__[2];
}; /* size: 0x0020 */

struct cached_tag_mat_t
{
  /* 0x0000 */ int time;
  /* 0x0004 */ int entnum;
  /* 0x0008 */ unsigned short name;
  /* 0x000a */ char Padding_496[2];
  /* 0x000c */ union vec3_t tagMat[4];
}; /* size: 0x003c */

struct level_locals_t
{
  /* 0x0000 */ struct gclient_t* clients;
  /* 0x0004 */ struct gentity_t* gentities;
  /* 0x0008 */ int gentitySize;
  /* 0x000c */ int num_entities;
  /* 0x0010 */ struct gentity_t* firstFreeEnt;
  /* 0x0014 */ struct gentity_t* lastFreeEnt;
  /* 0x0018 */ struct vehicle_t* vehicles;
  /* 0x001c */ struct gentity_t* firstFreeActor;
  /* 0x0020 */ struct gentity_t* lastFreeActor;
  /* 0x0024 */ int num_actors;
  /* 0x0028 */ struct sentient_t* sentients;
  /* 0x002c */ struct actor_t* actors;
  /* 0x0030 */ int actorCorpseCount;
  /* 0x0034 */ struct bot_t* bots;
  /* 0x0038 */ struct TurretInfo* turrets;
  /* 0x003c */ int logFile;
  /* 0x0040 */ int initializing;
  /* 0x0044 */ int clientIsSpawning;
  /* 0x0048 */ int maxclients;
  /* 0x004c */ int teamSortedClients[18];
  /* 0x0094 */ struct objective_t objectives[32];
  /* 0x0694 */ int objectivesClientMask[2][32];
  /* 0x0794 */ int framenum;
  /* 0x0798 */ int time;
  /* 0x079c */ int previousTime;
  /* 0x07a0 */ int frametime;
  /* 0x07a4 */ int startTime;
  /* 0x07a8 */ struct SpawnVar spawnVar;
  /* 0x11b4 */ class EntHandle droppedWeaponCue[32];
  /* 0x1234 */ int savepersist;
  /* 0x1238 */ float fFogOpaqueDist;
  /* 0x123c */ float fFogOpaqueDistSqrd;
  /* 0x1240 */ int bPlayerIgnoreRadiusDamage;
  /* 0x1244 */ int bPlayerIgnoreRadiusDamageLatched;
  /* 0x1248 */ int currentEntityThink;
  /* 0x124c */ int registerWeapons;
  /* 0x1250 */ int bRegisterItems;
  /* 0x1254 */ int bRegisterLeaderboards;
  /* 0x1258 */ struct cached_tag_mat_t cachedTagMat;
  /* 0x1294 */ struct cached_tag_mat_t cachedEntTargetTagMat;
  /* 0x12d0 */ struct trigger_info_t pendingTriggerList[256];
  /* 0x1ed0 */ struct trigger_info_t currentTriggerList[256];
  /* 0x2ad0 */ int pendingTriggerListSize;
  /* 0x2ad4 */ int currentTriggerListSize;
  /* 0x2ad8 */ int openScriptIOFileHandles[1];
  /* 0x2adc */ char* openScriptIOFileBuffers[1];
  /* 0x2ae0 */ struct com_parse_mark_t currentScriptIOLineMark[1];
  /* 0x2af4 */ int scriptPrintChannel;
  /* 0x2af8 */ union vec2_t compassMapUpperLeft;
  /* 0x2b00 */ union vec2_t compassMapWorldSize;
  /* 0x2b08 */ union vec2_t compassNorth;
  /* 0x2b10 */ int finished;
  /* 0x2b14 */ int manualNameChange;
  /* 0x2b18 */ unsigned short modelMap[512];
  /* 0x2f18 */ int disable_grenade_suicide;
  /* 0x2f1c */ int numConnectedClients;
  /* 0x2f20 */ enum ClientNum_t sortedClients[18];
  /* 0x2f68 */ int bUpdateScoresForIntermission;
  /* 0x2f6c */ int numVotingClients;
  /* 0x2f70 */ long Padding_497[4];
  /* 0x2f80 */ struct MatchState matchState;
  /* 0x3000 */ int teamScores[10];
  /* 0x3028 */ int lastTeammateHealthTime;
  /* 0x302c */ unsigned int teamHasSpyplane[10];
  /* 0x3054 */ unsigned int teamHasSatellite[10];
  /* 0x307c */ unsigned int teamHasMeat[10];
  /* 0x30a4 */ char voteString[1024];
  /* 0x34a4 */ char voteDisplayString[1024];
  /* 0x38a4 */ int voteTime;
  /* 0x38a8 */ int voteExecuteTime;
  /* 0x38ac */ int voteYes;
  /* 0x38b0 */ int voteNo;
  /* 0x38b4 */ int currentActorClone;
  /* 0x38b8 */ int iSearchFrame;
  /* 0x38bc */ struct sv_FxVisBlock_t fxVisibilityEnts[32];
  /* 0x39bc */ int currentPlayerClone;
  /* 0x39c0 */ BOOL hostMigrationActive;
  /* 0x39c1 */ char Padding_498[3];
  /* 0x39c4 */ int hostMigrationStart;
  /* 0x39c8 */ struct actorAntilagFrame_t actorAntilagFrames[20];
  /* 0x7b18 */ int nextActorAntilagFrame;
  /* 0x7b1c */ struct vehicleAntilagFrame_t vehicleAntilagFrames[20];
  /* 0x9bec */ int nextVehicleAntilagFrame;
  /* 0x9bf0 */ struct ZBarrierType* zbarrierTypes[255];
  /* 0x9fec */ long __PADDING__[5];
}; /* size: 0xa000 */

class broad_phase_group
{
  /* 0x0000 */ long Padding_499[20];
  /* 0x0050 */ class broad_phase_info* m_list_bpi_head;
  /* 0x0054 */ int m_bpi_count;
  /* 0x0058 */ class rb_vehicle_model* m_rbvm;
  /* 0x005c */ class phys_wheel_collide_info* m_list_wci;
}; /* size: 0x0060 */

class phys_free_list<broad_phase_group>::T_internal
{
  /* 0x0000 */ long Padding_500[4];
  /* 0x0010 */ class broad_phase_group m_data;
  /* 0x0070 */ int m_ptr_list_index;
}; /* size: 0x0080 */

struct GfxFilm
{
  /* 0x0000 */ BOOL enabled;
  /* 0x0001 */ char Padding_501[3];
  /* 0x0004 */ union vec4_t visColorRangeS;
  /* 0x0014 */ union vec4_t visColorRangeE;
  /* 0x0024 */ union vec4_t visColorShadowMatrixR;
  /* 0x0034 */ union vec4_t visColorShadowMatrixG;
  /* 0x0044 */ union vec4_t visColorShadowMatrixB;
  /* 0x0054 */ union vec4_t visColorMidtoneMatrixR;
  /* 0x0064 */ union vec4_t visColorMidtoneMatrixG;
  /* 0x0074 */ union vec4_t visColorMidtoneMatrixB;
  /* 0x0084 */ union vec4_t visColorHilightMatrixR;
  /* 0x0094 */ union vec4_t visColorHilightMatrixG;
  /* 0x00a4 */ union vec4_t visColorHilightMatrixB;
  /* 0x00b4 */ union vec4_t visColorFinalGamma;
  /* 0x00c4 */ union vec4_t visColorFinalSaturation;
  /* 0x00d4 */ union vec4_t visColorFinalBlend;
  /* 0x00e4 */ short lutA;
  /* 0x00e6 */ short lutB;
  /* 0x00e8 */ short lutC;
  /* 0x00ea */ short lutD;
  /* 0x00ec */ union vec4_t lutBlendWeights;
  /* 0x00fc */ float filmLut;
  /* 0x0100 */ union vec4_t sunFlareTint;
}; /* size: 0x0110 */

struct scr_anim_s
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short index;
      /* 0x0002 */ unsigned short tree;
    }; /* size: 0x0004 */
    /* 0x0000 */ const unsigned char* linkPointer;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct mover_record_t
{
  /* 0x0000 */ union vec3_t m_origin;
  /* 0x000c */ union vec3_t m_angles;
  /* 0x0018 */ int m_time;
}; /* size: 0x001c */

struct mover_info_t
{
  /* 0x0000 */ struct mover_record_t m_records[32];
  /* 0x0380 */ int m_last_record;
}; /* size: 0x0384 */

struct constraint_t
{
  /* 0x0000 */ union vec3_t p;
  /* 0x000c */ enum rope_constraint_e type;
  /* 0x0010 */ int entity_index;
  /* 0x0014 */ int bone_name_hash;
  /* 0x0018 */ unsigned char pi1;
  /* 0x0019 */ unsigned char pi2;
  /* 0x001a */ char __PADDING__[2];
}; /* size: 0x001c */

class bdLeagueUserTeamResult
{
  /* 0x0000 */ long Padding_502[2];
  /* 0x0008 */ unsigned __int64 m_teamID;
  /* 0x0010 */ char m_name[65];
  /* 0x0051 */ unsigned char m_icon[1024];
  /* 0x0451 */ char Padding_503[3];
  /* 0x0454 */ unsigned int m_iconLength;
  /* 0x0458 */ unsigned int m_lastLoginTimestamp;
}; /* size: 0x0460 */

struct gjk_trace_output_t
{
  /* 0x0000 */ class phys_vec3 m_hit_normal;
  /* 0x0010 */ class phys_vec3 m_hit_point;
  /* 0x0020 */ class phys_vec3 m_arm;
  /* 0x0030 */ float m_hit_time;
  /* 0x0034 */ float m_hit_dist;
  /* 0x0038 */ BOOL m_is_foot;
  /* 0x0039 */ char Padding_504[3];
  /* 0x003c */ struct gjk_geom_info_t* m_gi;
  /* 0x0040 */ struct gjk_trace_output_t* m_next_link;
  /* 0x0044 */ long __PADDING__[3];
}; /* size: 0x0050 */

struct animscripted_t
{
  /* 0x0000 */ union vec3_t axis[4];
  /* 0x0030 */ union vec3_t originError;
  /* 0x003c */ union vec3_t originErrorReduction;
  /* 0x0048 */ union vec3_t anglesError;
  /* 0x0054 */ union vec3_t anglesErrorReduction;
  /* 0x0060 */ unsigned short anim;
  /* 0x0062 */ unsigned short root;
  /* 0x0064 */ unsigned char bStarted;
  /* 0x0065 */ unsigned char mode;
  /* 0x0066 */ char Padding_505[2];
  /* 0x0068 */ int startTime;
  /* 0x006c */ int lerpTime;
  /* 0x0070 */ float fHeightOfs;
  /* 0x0074 */ float fEndPitch;
  /* 0x0078 */ float fEndRoll;
  /* 0x007c */ float fOrientLerp;
}; /* size: 0x0080 */

struct XAnimEntry
{
  /* 0x0000 */ unsigned short bCreated;
  /* 0x0002 */ unsigned short numAnims;
  /* 0x0004 */ unsigned short firstParamIxPlusOne;
  /* 0x0006 */ unsigned short paramCount;
  /* 0x0008 */ unsigned short parent;
  /* 0x000a */ char Padding_506[2];
  union
  {
    /* 0x000c */ struct XAnimParts* parts;
    /* 0x000c */ struct XAnimParent animParent;
  }; /* size: 0x0004 */
}; /* size: 0x0010 */

struct XAnim_s
{
  /* 0x0000 */ const char* debugName;
  /* 0x0004 */ unsigned int size;
  /* 0x0008 */ unsigned int paramSize;
  /* 0x000c */ struct XAnimParam* params;
  /* 0x0010 */ const char** debugAnimNames;
  /* 0x0014 */ BOOL* wasLoggedIfMissing;
  /* 0x0018 */ struct XAnimEntry entries[1];
}; /* size: 0x0028 */

struct BINKFRAMETEXTURES
{
  /* 0x0000 */ unsigned int Ysize;
  /* 0x0004 */ unsigned int cRsize;
  /* 0x0008 */ unsigned int cBsize;
  /* 0x000c */ unsigned int Asize;
  /* 0x0010 */ struct ID3D11Texture2D* Ytexture;
  /* 0x0014 */ struct ID3D11Texture2D* cRtexture;
  /* 0x0018 */ struct ID3D11Texture2D* cBtexture;
  /* 0x001c */ struct ID3D11Texture2D* Atexture;
}; /* size: 0x0020 */

struct CgEntCollTree
{
  /* 0x0000 */ float dist;
  /* 0x0004 */ unsigned short axis;
  union
  {
    union
    {
      /* 0x0006 */ unsigned short parent;
      /* 0x0006 */ unsigned short nextFree;
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ u;
  /* 0x0008 */ unsigned short child[2];
}; /* size: 0x000c */

struct viewState_t
{
  /* 0x0000 */ struct playerState_s* ps;
  /* 0x0004 */ int damageTime;
  /* 0x0008 */ int time;
  /* 0x000c */ float v_dmg_pitch;
  /* 0x0010 */ float v_dmg_roll;
  /* 0x0014 */ float xyspeed;
  /* 0x0018 */ float frametime;
  /* 0x001c */ float fLastIdleFactor;
  /* 0x0020 */ int* removeMeUnusedInt;
}; /* size: 0x0024 */

struct D3D10_BUFFER_DESC
{
  /* 0x0000 */ unsigned int ByteWidth;
  /* 0x0004 */ enum D3D10_USAGE Usage;
  /* 0x0008 */ unsigned int BindFlags;
  /* 0x000c */ unsigned int CPUAccessFlags;
  /* 0x0010 */ unsigned int MiscFlags;
}; /* size: 0x0014 */

class broad_phase_collision_pair
{
  /* 0x0000 */ class broad_phase_info* m_bpi1;
  /* 0x0004 */ class broad_phase_info* m_bpi2;
  /* 0x0008 */ class broad_phase_collision_pair* m_next_bpcp;
}; /* size: 0x000c */

struct XMFLOAT4X3A
{
}; /* size: 0x0030 */

struct D3D10_TEXTURE3D_DESC
{
  /* 0x0000 */ unsigned int Width;
  /* 0x0004 */ unsigned int Height;
  /* 0x0008 */ unsigned int Depth;
  /* 0x000c */ unsigned int MipLevels;
  /* 0x0010 */ enum DXGI_FORMAT Format;
  /* 0x0014 */ enum D3D10_USAGE Usage;
  /* 0x0018 */ unsigned int BindFlags;
  /* 0x001c */ unsigned int CPUAccessFlags;
  /* 0x0020 */ unsigned int MiscFlags;
}; /* size: 0x0024 */

struct std::char_traits<unsigned short>
{
}; /* size: 0x0001 */

struct GfxDrawSurfListInfo
{
  /* 0x0000 */ const union GfxDrawSurf* drawSurfs;
  /* 0x0004 */ unsigned int drawSurfCount;
  /* 0x0008 */ unsigned char baseTechType;
  /* 0x0009 */ char Padding_507[3];
  /* 0x000c */ const struct GfxViewInfo* viewInfo;
  /* 0x0010 */ union vec4_t viewOrigin;
  /* 0x0020 */ enum OcclusionReportsMode occlusionReportsMode;
  /* 0x0024 */ int cameraView;
  /* 0x0028 */ int disableAllShadowTech;
  /* 0x002c */ int needResolve;
}; /* size: 0x0030 */

struct ViewModelHand
{
  /* 0x0000 */ int iPrevAnim;
  /* 0x0004 */ int iHandAnimIndex;
}; /* size: 0x0008 */

struct ViewModelInfo
{
  /* 0x0000 */ struct DObj* viewModelDObj;
  /* 0x0004 */ struct WeaponDobjInfo weaponDobjInfo;
  /* 0x0090 */ int hasAnimTree;
  /* 0x0094 */ struct XAnimTree_s* tree;
  /* 0x0098 */ struct XAnim_s* anims;
  /* 0x009c */ unsigned int partBits[5];
  /* 0x00b0 */ struct ViewModelHand hand[2];
}; /* size: 0x00c0 */

struct CD3D10_TEXTURE1D_DESC
{
}; /* size: 0x0020 */

struct GfxCmdHeader
{
  /* 0x0000 */ unsigned short byteCount;
  /* 0x0002 */ unsigned char id;
  /* 0x0003 */ unsigned char ui3d;
}; /* size: 0x0004 */

struct GfxCmdDrawUIQuadsReplaceImage
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ const struct Material* material;
  /* 0x0008 */ const struct Material* replacement;
  /* 0x000c */ short quadCount;
  /* 0x000e */ unsigned char stencilValue;
  struct
  {
    struct /* bitfield */
    {
      /* 0x000f */ unsigned char stencilWrite : 1; /* bit position: 0 */
      /* 0x000f */ unsigned char noclip : 1; /* bit position: 1 */
    }; /* bitfield */
  } /* size: 0x0001 */ bits;
}; /* size: 0x0010 */

struct CD3D11_SAMPLER_DESC
{
}; /* size: 0x0034 */

class bdStringData
{
  /* 0x0000 */ unsigned int m_referenceCount;
  /* 0x0004 */ unsigned int m_length;
  /* 0x0008 */ unsigned int m_capacity;
}; /* size: 0x000c */

struct FxModelMarkPoint
{
  /* 0x0000 */ union vec3_t xyz;
  /* 0x000c */ union vec3_t vertWeights;
}; /* size: 0x0018 */

class tlSharedAtomicMutex
{
  /* 0x0000 */ volatile unsigned __int64 ThreadId;
  /* 0x0008 */ volatile int LockCount;
  /* 0x000c */ class tlSharedAtomicMutex* ThisPtr;
}; /* size: 0x0010 */

class bdDTLSHeader
{
  /* 0x0000 */ long Padding_508;
  /* 0x0004 */ unsigned char m_type;
  /* 0x0005 */ unsigned char m_version;
  /* 0x0006 */ unsigned short m_vtag;
  /* 0x0008 */ unsigned short m_counter;
  /* 0x0000 */ unsigned int serializedSize;
}; /* size: 0x000c */

typedef struct _lldiv_t
{
  /* 0x0000 */ __int64 quot;
  /* 0x0008 */ __int64 rem;
} lldiv_t, *Plldiv_t; /* size: 0x0010 */

struct DSkelPartBits
{
  /* 0x0000 */ int anim[5];
  /* 0x0014 */ int control[5];
  /* 0x0028 */ int skel[5];
}; /* size: 0x003c */

struct WindState
{
  /* 0x0000 */ union vec3_t windDirection;
  /* 0x000c */ float windSpringAngle[16];
  /* 0x004c */ union vec3_t windRustleAngle[16];
  /* 0x010c */ float speed;
}; /* size: 0x0110 */

class StaticFixedSizeAllocator<TempPackedOutline,350>
{
  /* 0x0000 */ long Padding_509[7];
  /* 0x001c */ char buffer[33600];
}; /* size: 0x835c */

struct vector3
{
  /* 0x0000 */ union __m128 x;
  /* 0x0010 */ union __m128 y;
  /* 0x0020 */ union __m128 z;
}; /* size: 0x0030 */

struct ShaderIndexRange
{
  /* 0x0000 */ unsigned int first;
  /* 0x0004 */ unsigned int count;
  /* 0x0008 */ BOOL isImplicit;
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

struct visitor_base_t
{
}; /* size: 0x0004 */

class bdCommonAddrHash
{
}; /* size: 0x0001 */

struct cmodel_t
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ float radius;
  /* 0x001c */ struct ClipInfo* info;
  /* 0x0020 */ struct cLeaf_s leaf;
}; /* size: 0x004c */

class bdFeatureBan
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

struct ClipMaterial
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int surfaceFlags;
  /* 0x0008 */ int contentFlags;
}; /* size: 0x000c */

struct RefString
{
  /* 0x0000 */ volatile long data;
  /* 0x0004 */ char str[1];
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

struct visionSetLerpData_t
{
  /* 0x0000 */ int timeStart;
  /* 0x0004 */ int timeDuration;
  /* 0x0008 */ float lerpFraction;
  /* 0x000c */ enum visionSetLerpStyle_t style;
}; /* size: 0x0010 */

struct $_TypeDescriptor$_extraBytes_20
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[20];
}; /* size: 0x001c */

struct footstepEvent_t
{
  /* 0x0000 */ struct centity_t* cent;
  /* 0x0004 */ unsigned short bone;
  /* 0x0006 */ unsigned short notetrack;
  /* 0x0008 */ unsigned char moveType;
  /* 0x0009 */ unsigned char surface;
  /* 0x000a */ char Padding_510[2];
  struct /* bitfield */
  {
    /* 0x000c */ unsigned long playerView : 1; /* bit position: 0 */
    /* 0x000c */ unsigned long quiet : 1; /* bit position: 1 */
    /* 0x000c */ unsigned long isLouder : 1; /* bit position: 2 */
    /* 0x000c */ unsigned long footprint : 1; /* bit position: 3 */
  }; /* bitfield */
}; /* size: 0x0010 */

class SmpSpServer_CriticalSectionBlock
{
  /* 0x0000 */ enum CriticalSection mCS;
}; /* size: 0x0004 */

struct clientControllers_t
{
  /* 0x0000 */ union vec3_t angles[6];
  /* 0x0048 */ union vec3_t tag_origin_angles;
  /* 0x0054 */ union vec3_t tag_origin_offset;
}; /* size: 0x0060 */

struct SunFlareDynamic
{
  /* 0x0000 */ float flareIntensity;
  /* 0x0004 */ float sunVisibilityAdjust;
  /* 0x0008 */ float currentBlind;
  /* 0x000c */ float currentGlare;
  /* 0x0010 */ int lastTime;
  /* 0x0014 */ float lastVisibility;
  /* 0x0018 */ float lastDot;
  /* 0x001c */ unsigned short occlusionQueryHandle;
  /* 0x001e */ char __PADDING__[2];
}; /* size: 0x0020 */

class bdMessaging
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

struct scrStringDebugGlob_t
{
  /* 0x0000 */ volatile long refCount[65536];
  /* 0x40000 */ volatile long totalRefCount;
  /* 0x40004 */ int ignoreLeaks;
}; /* size: 0x40008 */

class bdTeams
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

class bdStorage
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

struct CEntGeneral
{
  /* 0x0000 */ int contents;
  /* 0x0004 */ BOOL linked;
  /* 0x0005 */ char Padding_511[3];
  /* 0x0008 */ union vec3_t mins;
  /* 0x0014 */ union vec3_t maxs;
}; /* size: 0x0020 */

typedef struct _XMFLOAT4X3
{
  union
  {
    struct
    {
      /* 0x0000 */ float _11;
      /* 0x0004 */ float _12;
      /* 0x0008 */ float _13;
      /* 0x000c */ float _21;
      /* 0x0010 */ float _22;
      /* 0x0014 */ float _23;
      /* 0x0018 */ float _31;
      /* 0x001c */ float _32;
      /* 0x0020 */ float _33;
      /* 0x0024 */ float _41;
      /* 0x0028 */ float _42;
      /* 0x002c */ float _43;
    }; /* size: 0x0030 */
    /* 0x0000 */ float m[3][4];
  }; /* size: 0x0030 */
} XMFLOAT4X3, *PXMFLOAT4X3; /* size: 0x0030 */

typedef struct _XMUICON4
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 x : 20; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 y : 20; /* bit position: 20 */
      /* 0x0000 */ unsigned __int64 z : 20; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 w : 4; /* bit position: 60 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 v;
  }; /* size: 0x0008 */
} XMUICON4, *PXMUICON4; /* size: 0x0008 */

class bdVoteRank
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

struct jpeg_d_coef_controller
{
  /* 0x0000 */ void* start_input_pass /* function */;
  /* 0x0004 */ void* consume_data /* function */;
  /* 0x0008 */ void* start_output_pass /* function */;
  /* 0x000c */ void* decompress_data /* function */;
  /* 0x0010 */ struct jvirt_barray_control** coef_arrays;
}; /* size: 0x0014 */

class bdLeague
{
  /* 0x0000 */ class bdRemoteTaskManager* m_remoteTaskManager;
}; /* size: 0x0004 */

struct WeaponVariantDef
{
  /* 0x0000 */ const char* szInternalName;
  /* 0x0004 */ int iVariantCount;
  /* 0x0008 */ struct WeaponDef* weapDef;
  /* 0x000c */ const char* szDisplayName;
  /* 0x0010 */ const char* szAltWeaponName;
  /* 0x0014 */ const char* szAttachmentUnique;
  /* 0x0018 */ struct WeaponAttachment** attachments;
  /* 0x001c */ struct WeaponAttachmentUnique** attachmentUniques;
  /* 0x0020 */ const char** szXAnims;
  /* 0x0024 */ unsigned short* hideTags;
  /* 0x0028 */ struct XModel** attachViewModel;
  /* 0x002c */ struct XModel** attachWorldModel;
  /* 0x0030 */ const char** attachViewModelTag;
  /* 0x0034 */ const char** attachWorldModelTag;
  /* 0x0038 */ float attachViewModelOffsets[24];
  /* 0x0098 */ float attachWorldModelOffsets[24];
  /* 0x00f8 */ float attachViewModelRotations[24];
  /* 0x0158 */ float attachWorldModelRotations[24];
  /* 0x01b8 */ union vec3_t stowedModelOffsets;
  /* 0x01c4 */ union vec3_t stowedModelRotations;
  /* 0x01d0 */ unsigned int altWeaponIndex;
  /* 0x01d4 */ int iAttachments;
  /* 0x01d8 */ BOOL bIgnoreAttachments;
  /* 0x01d9 */ char Padding_512[3];
  /* 0x01dc */ int iClipSize;
  /* 0x01e0 */ int iReloadTime;
  /* 0x01e4 */ int iReloadEmptyTime;
  /* 0x01e8 */ int iReloadQuickTime;
  /* 0x01ec */ int iReloadQuickEmptyTime;
  /* 0x01f0 */ int iAdsTransInTime;
  /* 0x01f4 */ int iAdsTransOutTime;
  /* 0x01f8 */ int iAltRaiseTime;
  /* 0x01fc */ const char* szAmmoDisplayName;
  /* 0x0200 */ const char* szAmmoName;
  /* 0x0204 */ int iAmmoIndex;
  /* 0x0208 */ const char* szClipName;
  /* 0x020c */ int iClipIndex;
  /* 0x0210 */ float fAimAssistRangeAds;
  /* 0x0214 */ float fAdsSwayHorizScale;
  /* 0x0218 */ float fAdsSwayVertScale;
  /* 0x021c */ float fAdsViewKickCenterSpeed;
  /* 0x0220 */ float fHipViewKickCenterSpeed;
  /* 0x0224 */ float fAdsZoomFov1;
  /* 0x0228 */ float fAdsZoomFov2;
  /* 0x022c */ float fAdsZoomFov3;
  /* 0x0230 */ float fAdsZoomInFrac;
  /* 0x0234 */ float fAdsZoomOutFrac;
  /* 0x0238 */ float fOverlayAlphaScale;
  /* 0x023c */ float fOOPosAnimLength[2];
  /* 0x0244 */ BOOL bSilenced;
  /* 0x0245 */ BOOL bDualMag;
  /* 0x0246 */ BOOL bInfraRed;
  /* 0x0247 */ BOOL bTVGuided;
  /* 0x0248 */ unsigned int perks[2];
  /* 0x0250 */ BOOL bAntiQuickScope;
  /* 0x0251 */ char Padding_513[3];
  /* 0x0254 */ struct Material* overlayMaterial;
  /* 0x0258 */ struct Material* overlayMaterialLowRes;
  /* 0x025c */ struct Material* dpadIcon;
  /* 0x0260 */ enum weaponIconRatioType_t dpadIconRatio;
  /* 0x0264 */ BOOL noAmmoOnDpadIcon;
  /* 0x0265 */ BOOL mmsWeapon;
  /* 0x0266 */ BOOL mmsInScope;
  /* 0x0267 */ char Padding_514;
  /* 0x0268 */ float mmsFOV;
  /* 0x026c */ float mmsAspect;
  /* 0x0270 */ float mmsMaxDist;
  /* 0x0274 */ union vec3_t ikLeftHandIdlePos;
  /* 0x0280 */ union vec3_t ikLeftHandOffset;
  /* 0x028c */ union vec3_t ikLeftHandRotation;
  /* 0x0298 */ BOOL bUsingLeftHandProneIK;
  /* 0x0299 */ char Padding_515[3];
  /* 0x029c */ union vec3_t ikLeftHandProneOffset;
  /* 0x02a8 */ union vec3_t ikLeftHandProneRotation;
  /* 0x02b4 */ union vec3_t ikLeftHandUiViewerOffset;
  /* 0x02c0 */ union vec3_t ikLeftHandUiViewerRotation;
}; /* size: 0x02cc */

class LinkedList<FixedSizeAllocator<GlassShard *>::Block *>
{
  /* 0x0000 */ struct FixedSizeAllocator<GlassShard *>::Block* head;
}; /* size: 0x0004 */

struct WeaponCamoSet
{
  /* 0x0000 */ struct GfxImage* solidCamoImage;
  /* 0x0004 */ struct GfxImage* patternCamoImage;
  /* 0x0008 */ union vec2_t patternOffset;
  /* 0x0010 */ float patternScale;
}; /* size: 0x0014 */

typedef union __m128i
{
  union
  {
    /* 0x0000 */ char m128i_i8[16];
    /* 0x0000 */ short m128i_i16[8];
    /* 0x0000 */ int m128i_i32[4];
    /* 0x0000 */ __int64 m128i_i64[2];
    /* 0x0000 */ unsigned char m128i_u8[16];
    /* 0x0000 */ unsigned short m128i_u16[8];
    /* 0x0000 */ unsigned int m128i_u32[4];
    /* 0x0000 */ unsigned __int64 m128i_u64[2];
  }; /* size: 0x0010 */
} _m128i, *P_m128i; /* size: 0x0010 */

struct DiskSmodelLightmapVCInst
{
  /* 0x0000 */ int modelId;
  /* 0x0004 */ int colIndex;
  /* 0x0008 */ int colCount;
  /* 0x000c */ unsigned int smid;
}; /* size: 0x0010 */

struct ddlStructDef_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int size;
  /* 0x0008 */ int memberCount;
  /* 0x000c */ struct ddlMemberDef_t* members;
  /* 0x0010 */ struct ddlHash_t* hashTable;
}; /* size: 0x0014 */

struct std::_Pair_base<unsigned int const ,ID3D11BlendState *>
{
  /* 0x0000 */ const unsigned int first;
  /* 0x0004 */ struct ID3D11BlendState* second;
}; /* size: 0x0008 */

struct GfxViewParms
{
  /* 0x0000 */ struct GfxMatrix viewMatrix;
  /* 0x0040 */ struct GfxMatrix projectionMatrix;
  /* 0x0080 */ struct GfxMatrix viewProjectionMatrix;
  /* 0x00c0 */ struct GfxMatrix inverseViewProjectionMatrix;
  /* 0x0100 */ union vec4_t origin;
  /* 0x0110 */ union vec3_t axis[3];
  /* 0x0134 */ float depthHackNearClip;
  /* 0x0138 */ float zNear;
  /* 0x013c */ float zFar;
  /* 0x0140 */ int bspCellIndex;
  /* 0x0144 */ long __PADDING__[3];
}; /* size: 0x0150 */

struct GfxCodeImageRenderTargetFields
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 renderTargetId : 8; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 enable : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned __int64 fbufferTexture : 3; /* bit position: 9 */
    /* 0x0000 */ unsigned __int64 filtering : 20; /* bit position: 12 */
  }; /* bitfield */
}; /* size: 0x0008 */

union GfxCodeImageRenderTarget
{
  union
  {
    /* 0x0000 */ struct GfxCodeImageRenderTargetFields fields;
    /* 0x0000 */ unsigned int packed;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct GfxViewport
{
  /* 0x0000 */ int x;
  /* 0x0004 */ int y;
  /* 0x0008 */ int width;
  /* 0x000c */ int height;
}; /* size: 0x0010 */

struct GfxSpotShadow
{
  /* 0x0000 */ struct GfxViewParms shadowViewParms;
  /* 0x0150 */ struct GfxMatrix lookupMatrix;
  /* 0x0190 */ unsigned char shadowableLightIndex;
  /* 0x0191 */ unsigned char flags;
  /* 0x0192 */ unsigned char pad[2];
  /* 0x0194 */ const struct GfxLight* light;
  /* 0x0198 */ float fade;
  /* 0x019c */ long Padding_516;
  /* 0x01a0 */ union GfxCodeImageRenderTarget spotShadowRenderTarget;
  /* 0x01a8 */ unsigned char renderTargetId;
  /* 0x01a9 */ char Padding_517[3];
  /* 0x01ac */ struct GfxViewport viewport;
  /* 0x01bc */ struct GfxImage* image;
  /* 0x01c0 */ union vec4_t pixelAdjust;
  /* 0x01d0 */ int clearScreen;
  /* 0x01d4 */ long __PADDING__[3];
}; /* size: 0x01e0 */

struct D3D11_SO_DECLARATION_ENTRY
{
  /* 0x0000 */ unsigned int Stream;
  /* 0x0004 */ const char* SemanticName;
  /* 0x0008 */ unsigned int SemanticIndex;
  /* 0x000c */ unsigned char StartComponent;
  /* 0x000d */ unsigned char ComponentCount;
  /* 0x000e */ unsigned char OutputSlot;
  /* 0x000f */ char __PADDING__[1];
}; /* size: 0x0010 */

struct std::_Num_float_base
{
  union
  {
    /* 0x0000 */ enum std::float_denorm_style has_denorm;
    /* 0x0000 */ const BOOL has_denorm_loss;
    /* 0x0000 */ const BOOL has_infinity;
    /* 0x0000 */ const BOOL has_quiet_NaN;
    /* 0x0000 */ const BOOL has_signaling_NaN;
    /* 0x0000 */ const BOOL is_bounded;
    /* 0x0000 */ const BOOL is_exact;
    /* 0x0000 */ const BOOL is_iec559;
    /* 0x0000 */ const BOOL is_integer;
    /* 0x0000 */ const BOOL is_modulo;
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const BOOL is_specialized;
    /* 0x0000 */ const BOOL tinyness_before;
    /* 0x0000 */ const BOOL traps;
    /* 0x0000 */ enum std::float_round_style round_style;
    /* 0x0000 */ const int radix;
  }; /* size: 0x0004 */
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

struct curl_slist
{
  /* 0x0000 */ char* data;
  /* 0x0004 */ struct curl_slist* next;
}; /* size: 0x0008 */

struct pml_t
{
  /* 0x0000 */ union vec3_t forward;
  /* 0x000c */ union vec3_t right;
  /* 0x0018 */ union vec3_t up;
  /* 0x0024 */ float frametime;
  /* 0x0028 */ int msec;
  /* 0x002c */ int walking;
  /* 0x0030 */ int groundPlane;
  /* 0x0034 */ int almostGroundPlane;
  /* 0x0038 */ long Padding_518[2];
  /* 0x0040 */ struct trace_t groundTrace;
  /* 0x0080 */ float impactSpeed;
  /* 0x0084 */ union vec3_t previous_origin;
  /* 0x0090 */ union vec3_t previous_velocity;
  /* 0x009c */ unsigned int holdrand;
}; /* size: 0x00a0 */

struct TextureList;

struct std::_Allocator_base<wchar_t>
{
}; /* size: 0x0001 */

struct StreamTempImage
{
  /* 0x0000 */ struct GfxImage* image;
  /* 0x0004 */ int allocID;
  /* 0x0008 */ int state;
}; /* size: 0x000c */

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >
{
}; /* size: 0x0004 */

struct jpeg_marker_struct
{
  /* 0x0000 */ struct jpeg_marker_struct* next;
  /* 0x0004 */ unsigned char marker;
  /* 0x0005 */ char Padding_519[3];
  /* 0x0008 */ unsigned int original_length;
  /* 0x000c */ unsigned int data_length;
  /* 0x0010 */ unsigned char* data;
}; /* size: 0x0014 */

struct GfxQRCodeBackend
{
  /* 0x0000 */ union vec4_t scale[12];
}; /* size: 0x00c0 */

struct ShaderUniformDef
{
  /* 0x0000 */ enum ShaderParamType type;
  /* 0x0004 */ const char* name;
  /* 0x0008 */ unsigned short index;
  union
  {
    union
    {
      /* 0x000a */ unsigned short offset;
      struct
      {
        /* 0x000a */ unsigned char textureIndex;
        /* 0x000b */ unsigned char samplerIndex;
      }; /* size: 0x0002 */
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ resourceLocation;
  /* 0x000c */ unsigned short resourceSize;
  /* 0x000e */ unsigned short resourceBuffer;
  /* 0x0010 */ BOOL isTransposed;
  /* 0x0011 */ BOOL isAssigned;
  /* 0x0012 */ char __PADDING__[2];
}; /* size: 0x0014 */

struct ShaderVaryingDef
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned char streamDest;
  /* 0x0005 */ unsigned char resourceDest;
  /* 0x0006 */ BOOL isAssigned;
  /* 0x0007 */ BOOL isSpecialFragmentRegister;
}; /* size: 0x0008 */

struct ShaderParameterSet
{
  /* 0x0000 */ struct ShaderUniformDef uniformInputs[512];
  /* 0x2800 */ struct ShaderVaryingDef varyingInputs[512];
  /* 0x3800 */ struct ShaderVaryingDef outputs[16];
  /* 0x3880 */ unsigned int uniformInputCount;
  /* 0x3884 */ unsigned int varyingInputCount;
  /* 0x3888 */ unsigned int outputCount;
}; /* size: 0x388c */

class bdBitOperations
{
}; /* size: 0x0001 */

struct server_t
{
  /* 0x0000 */ enum serverState_t state;
  /* 0x0004 */ int physicsTime;
  /* 0x0008 */ int timeResidual;
  /* 0x000c */ int levelTime;
  /* 0x0010 */ BOOL inFrame;
  /* 0x0011 */ BOOL allowNetPackets;
  /* 0x0012 */ char Padding_520[2];
  /* 0x0014 */ int restarting;
  /* 0x0018 */ int start_frameTime;
  /* 0x001c */ int checksumFeed;
  /* 0x0020 */ struct cmodel_t* models[512];
  /* 0x0820 */ BOOL wroteConfigStrings;
  /* 0x0821 */ char Padding_521;
  /* 0x0822 */ unsigned short emptyConfigString;
  /* 0x0824 */ unsigned short configstrings[2806];
  /* 0x1e10 */ struct svEntity_s svEntities[1024];
  /* 0x9e10 */ struct gentity_t* gentities;
  /* 0x9e14 */ int gentitySize;
  /* 0x9e18 */ int num_entities;
  /* 0x9e1c */ struct playerState_s* gameClients;
  /* 0x9e20 */ int gameClientSize;
  /* 0x9e24 */ struct actor_t* gameActors;
  /* 0x9e28 */ int gameActorSize;
  /* 0x9e2c */ int checksum;
  /* 0x9e30 */ int skelTimeStamp;
  /* 0x9e34 */ int skelMemPos;
  /* 0x9e38 */ int bpsWindow[20];
  /* 0x9e88 */ int bpsWindowSteps;
  /* 0x9e8c */ int bpsTotalBytes;
  /* 0x9e90 */ int bpsMaxBytes;
  /* 0x9e94 */ int ubpsWindow[20];
  /* 0x9ee4 */ int ubpsTotalBytes;
  /* 0x9ee8 */ int ubpsMaxBytes;
  /* 0x9eec */ float ucompAve;
  /* 0x9ef0 */ int ucompNum;
  /* 0x9ef4 */ volatile int serverFrameTime;
  /* 0x9ef8 */ volatile int serverFrameTimeMin;
  /* 0x9efc */ volatile int serverFrameTimeMax;
  /* 0x9f00 */ char gametype[64];
  /* 0x9f40 */ BOOL killServer;
  /* 0x9f41 */ char Padding_522[3];
  /* 0x9f44 */ const char* killReason;
  /* 0x9f48 */ struct recentFrame recentFrameInfo[200];
  /* 0xa010 */ int currentFrameNum;
  /* 0xa014 */ unsigned char xpmods;
  /* 0xa015 */ char Padding_523[3];
  /* 0xa018 */ int nextClientsPositionArchive;
  /* 0xa01c */ struct clientsPositionArchive_t clientsPositionArchive[100];
  /* 0x1587c */ int securityChecksum[3];
}; /* size: 0x15888 */

struct cLeafBrushNode_s
{
  /* 0x0000 */ unsigned char axis;
  /* 0x0001 */ char Padding_524;
  /* 0x0002 */ short leafBrushCount;
  /* 0x0004 */ int contents;
  /* 0x0008 */ union cLeafBrushNodeData_t data;
}; /* size: 0x0014 */

struct ID3D11ShaderReflectionConstantBuffer
{
}; /* size: 0x0004 */

struct GfxWindowTarget
{
  /* 0x0000 */ struct HWND__* hwnd;
  /* 0x0004 */ struct IDXGISwapChain* swapChain;
  /* 0x0008 */ struct ID3D11RenderTargetView* view;
  /* 0x000c */ int width;
  /* 0x0010 */ int height;
}; /* size: 0x0014 */

struct std::pair<GfxCachedShaderText *,GfxCachedShaderText *>
{
}; /* size: 0x0008 */

struct cgVehicleWheelEffect
{
  /* 0x0000 */ int surfaceType;
  /* 0x0004 */ int lastSurfaceType;
}; /* size: 0x0008 */

struct cgVehicle_t
{
  /* 0x0000 */ int lastGunnerFire[4];
  /* 0x0010 */ int wheelSurfType[6];
  /* 0x0028 */ int fireTime;
  /* 0x002c */ int flags;
  /* 0x0030 */ float materialTime;
  /* 0x0034 */ float materialTime2;
  /* 0x0038 */ struct vehicle_cache_t* vehicle_cache;
  /* 0x003c */ struct cgVehicleWheelEffect wheelEffects[3];
  /* 0x0054 */ unsigned int notes[2];
  /* 0x005c */ int driveBySoundIndex[2];
  /* 0x0064 */ float driveBySoundDelay[2];
  /* 0x006c */ float driveBySoundTimeout[2];
  /* 0x0074 */ float prevTurretPitch;
  /* 0x0078 */ float prevTurretYaw;
  /* 0x007c */ float prevGunnerPitch[4];
  /* 0x008c */ float prevGunnerYaw[4];
  /* 0x009c */ float prevAngularVelocity[5];
  /* 0x00b0 */ struct Engine engine;
  /* 0x00d0 */ float minigunRotationSpeed;
  /* 0x00d4 */ union vec3_t gunSoundOrigins[5];
  /* 0x0110 */ unsigned char wasFiring;
  /* 0x0111 */ char Padding_525[3];
  /* 0x0114 */ union vec3_t antennaPos[2];
  /* 0x012c */ union vec3_t antennaVel[2];
  /* 0x0144 */ union vec3_t antennaParentBoneWorldAxis[3][2];
  /* 0x018c */ union vec3_t antennaRelativePos[2];
  /* 0x01a4 */ union vec3_t poseAxis[4];
}; /* size: 0x01d4 */

struct GfxPrimStats
{
  /* 0x0000 */ int counters[8];
}; /* size: 0x0020 */

struct GfxStageStats
{
  /* 0x0000 */ BOOL used;
  /* 0x0001 */ char Padding_526[3];
  /* 0x0004 */ struct GfxPrimStats prims[10];
}; /* size: 0x0144 */

struct GfxFrameStats
{
  /* 0x0000 */ struct GfxStageStats stages[16];
  /* 0x1440 */ enum GfxPrimStatsStage currentStage;
  /* 0x1444 */ enum GfxPrimStatsTarget currentTarget;
  struct
  {
    /* 0x1448 */ int gfxEntCount;
    /* 0x144c */ int geoIndexCount;
    /* 0x1450 */ int fxIndexCount;
  } /* size: 0x000c */ counters;
}; /* size: 0x1454 */

struct GfxCmdBufPrimState
{
  union
  {
    /* 0x0000 */ struct ID3D11DeviceContext* device;
    /* 0x0000 */ struct ID3D11DeviceContext* localDevice;
  }; /* size: 0x0004 */
  /* 0x0004 */ struct ID3D11Buffer* indexBuffer;
  /* 0x0008 */ enum MaterialVertexDeclType vertDeclType;
  struct
  {
    /* 0x000c */ unsigned int strides[3];
    /* 0x0018 */ struct ID3D11Buffer* vbs[3];
    /* 0x0024 */ unsigned int offsets[3];
  } /* size: 0x0024 */ streams;
  /* 0x0030 */ struct ID3D11InputLayout* vertexDecl;
  /* 0x0034 */ long Padding_527[3];
  /* 0x0040 */ union __m128 constantsBuffer[262];
  /* 0x10a0 */ char* constants[4];
  /* 0x10b0 */ BOOL constantsDirty[4];
  /* 0x10b4 */ struct GfxFrameStats frameStats;
  /* 0x2508 */ long __PADDING__[2];
}; /* size: 0x2510 */

struct GfxCmdBufState
{
  /* 0x0000 */ unsigned char refSamplerState[16];
  /* 0x0010 */ unsigned int samplerState[16];
  /* 0x0050 */ const union GfxTexture* samplerTexture[16];
  /* 0x0090 */ struct GfxCmdBufPrimState prim;
  /* 0x25a0 */ const struct Material* material;
  /* 0x25a4 */ unsigned char techType;
  /* 0x25a5 */ char Padding_528[3];
  /* 0x25a8 */ const struct MaterialTechnique* technique;
  union
  {
    /* 0x25ac */ const struct MaterialPass* localPass;
    /* 0x25ac */ const struct MaterialPass* pass;
  }; /* size: 0x0004 */
  /* 0x25b0 */ unsigned int passIndex;
  /* 0x25b4 */ enum GfxDepthRangeType depthRangeType;
  /* 0x25b8 */ float depthRangeNear;
  /* 0x25bc */ float depthRangeFar;
  /* 0x25c0 */ unsigned __int64 vertexShaderConstStateBuffer[1048];
  /* 0x4680 */ unsigned __int64* vertexShaderConstState[4];
  /* 0x4690 */ unsigned __int64 pixelShaderConstStateBuffer[1048];
  /* 0x6750 */ unsigned __int64* pixelShaderConstState[4];
  /* 0x6760 */ unsigned char alphaRef;
  /* 0x6761 */ char Padding_529[3];
  /* 0x6764 */ struct ID3D11BlendState* blendState;
  /* 0x6768 */ struct ID3D11DepthStencilState* depthStencilState;
  /* 0x676c */ struct ID3D11RasterizerState* rasterizerState;
  /* 0x6770 */ const struct MaterialPixelShader* pixelShader;
  /* 0x6774 */ const struct MaterialVertexShader* vertexShader;
  /* 0x6778 */ unsigned int pixPrimarySortKey;
  /* 0x677c */ const struct Material* pixMaterial;
  /* 0x6780 */ const struct MaterialTechnique* pixTechnique;
  /* 0x6784 */ int pixCombine;
  /* 0x6788 */ struct GfxViewport viewport;
  /* 0x6798 */ struct GfxViewport scissor;
  /* 0x67a8 */ int scissorEnabled;
  /* 0x67ac */ unsigned char renderTargetId;
  /* 0x67ad */ char Padding_530[3];
  /* 0x67b0 */ int stateOverride;
  /* 0x67b4 */ const struct GfxBackEndData* backEndData;
  /* 0x67b8 */ long __PADDING__[2];
}; /* size: 0x67c0 */

struct gjk_cylinder_t
{
  /* 0x0000 */ long Padding_531[20];
  /* 0x0050 */ int direction;
  /* 0x0054 */ float halfHeight;
  /* 0x0058 */ float radius;
  /* 0x005c */ float m_geom_radius;
  /* 0x0060 */ class phys_mat44 xform;
}; /* size: 0x00a0 */

struct GfxWorldVertexData0
{
  /* 0x0000 */ unsigned char* data;
  /* 0x0004 */ struct ID3D11Buffer* vb;
}; /* size: 0x0008 */

struct GfxLightmapArray
{
  /* 0x0000 */ struct GfxImage* primary;
  /* 0x0004 */ struct GfxImage* secondary;
}; /* size: 0x0008 */

class std::numeric_limits<bool>
{
  union
  {
    /* 0x0000 */ const BOOL is_modulo;
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct MaterialTextureDefRaw
{
  /* 0x0000 */ unsigned int nameOffset;
  /* 0x0004 */ unsigned char samplerState;
  /* 0x0005 */ unsigned char semantic;
  /* 0x0006 */ char Padding_532[2];
  /* 0x0008 */ unsigned int imageNameOffset;
}; /* size: 0x000c */

class std::tr1::bad_weak_ptr
{
}; /* size: 0x000c */

struct GfxPlacement
{
  /* 0x0000 */ union vec4_t quat;
  /* 0x0010 */ union vec3_t origin;
}; /* size: 0x001c */

struct GfxScaledPlacement
{
  /* 0x0000 */ struct GfxPlacement base;
  /* 0x001c */ float scale;
}; /* size: 0x0020 */

struct GfxModelRigidSurfacePiece
{
  /* 0x0000 */ struct GfxScaledPlacement placement;
  /* 0x0020 */ unsigned short baseIndex;
  /* 0x0022 */ unsigned short vertCount;
  /* 0x0024 */ unsigned short triCount;
  /* 0x0026 */ unsigned short firstVertex;
}; /* size: 0x0028 */

struct std::_Pair_base<GfxSurface * *,GfxSurface * *>
{
  /* 0x0000 */ struct GfxSurface** first;
  /* 0x0004 */ struct GfxSurface** second;
}; /* size: 0x0008 */

struct NetField
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int offset;
  /* 0x0008 */ int size;
  /* 0x000c */ int bits;
  /* 0x0010 */ unsigned char changeHints;
  /* 0x0011 */ char Padding_533[3];
  /* 0x0014 */ const char* bitsStr;
  /* 0x0018 */ const char* changeHintsStr;
}; /* size: 0x001c */

struct IDXGIOutput
{
}; /* size: 0x0004 */

struct PolySet
{
  /* 0x0000 */ union vec3_t* verts;
  /* 0x0004 */ int vertCount;
  /* 0x0008 */ int vertLimit;
  /* 0x000c */ struct GfxDebugPoly* polys;
  /* 0x0010 */ int polyCount;
  /* 0x0014 */ int polyLimit;
}; /* size: 0x0018 */

struct IDXGISwapChain
{
}; /* size: 0x0004 */

struct TaskRecord
{
  /* 0x0000 */ struct TaskRecord* next;
  /* 0x0004 */ const struct TaskDefinition* definition;
  /* 0x0008 */ enum TaskState state;
  /* 0x000c */ enum ControllerIndex_t controllerIndex;
  /* 0x0010 */ unsigned int lastPoll;
  /* 0x0014 */ unsigned int lastPollMS;
  /* 0x0018 */ unsigned int id;
  /* 0x001c */ enum TaskGroup group;
  /* 0x0020 */ int startMS;
  /* 0x0024 */ int timeOut;
  /* 0x0028 */ int timeIn;
  /* 0x002c */ class bdReference<bdRemoteTask> remoteTask;
  /* 0x0030 */ struct TaskRecord* nestedTask;
  /* 0x0034 */ void* payload;
  /* 0x0038 */ BOOL isChildTask;
  /* 0x0039 */ BOOL cancelImmediately;
  /* 0x003a */ BOOL skipAllCallbacksAfterComplete;
  /* 0x003b */ char __PADDING__[1];
}; /* size: 0x003c */

struct IPakSection
{
  /* 0x0000 */ unsigned int type;
  /* 0x0004 */ unsigned int offset;
  /* 0x0008 */ unsigned int size;
  /* 0x000c */ unsigned int itemCount;
}; /* size: 0x0010 */

struct std::_Pair_base<Material * *,Material * *>
{
  /* 0x0000 */ struct Material** first;
  /* 0x0004 */ struct Material** second;
}; /* size: 0x0008 */

struct BINKPLANE
{
  /* 0x0000 */ int Allocate;
  /* 0x0004 */ void* Buffer;
  /* 0x0008 */ unsigned int BufferPitch;
}; /* size: 0x000c */

struct BINKFRAMEPLANESET
{
  /* 0x0000 */ struct BINKPLANE YPlane;
  /* 0x000c */ struct BINKPLANE cRPlane;
  /* 0x0018 */ struct BINKPLANE cBPlane;
  /* 0x0024 */ struct BINKPLANE APlane;
}; /* size: 0x0030 */

struct BINKFRAMEBUFFERS
{
  /* 0x0000 */ int TotalFrames;
  /* 0x0004 */ unsigned int YABufferWidth;
  /* 0x0008 */ unsigned int YABufferHeight;
  /* 0x000c */ unsigned int cRcBBufferWidth;
  /* 0x0010 */ unsigned int cRcBBufferHeight;
  /* 0x0014 */ unsigned int FrameNum;
  /* 0x0018 */ struct BINKFRAMEPLANESET Frames[2];
}; /* size: 0x0078 */

struct BINKTEXTURESET
{
  /* 0x0000 */ struct BINKFRAMEBUFFERS bink_buffers;
  /* 0x0078 */ struct BINKFRAMETEXTURES textures[2];
  /* 0x00b8 */ struct BINKFRAMETEXTURES tex_draw;
  /* 0x00d8 */ struct ID3D11Buffer* vert_buf;
  /* 0x00dc */ struct ID3D11Buffer* const_buf;
  /* 0x00e0 */ struct ID3D11ShaderResourceView* Yview;
  /* 0x00e4 */ struct ID3D11ShaderResourceView* cBview;
  /* 0x00e8 */ struct ID3D11ShaderResourceView* cRview;
  /* 0x00ec */ struct ID3D11ShaderResourceView* Aview;
}; /* size: 0x00f0 */

struct CD3D11_COUNTER_DESC
{
}; /* size: 0x0008 */

struct StringTableCell
{
  /* 0x0000 */ const char* string;
  /* 0x0004 */ int hash;
}; /* size: 0x0008 */

class phys_wheel_collide_info
{
  /* 0x0000 */ class phys_vec3 m_ray_pos;
  /* 0x0010 */ class phys_vec3 m_ray_dir;
  /* 0x0020 */ class phys_vec3 m_hitn;
  /* 0x0030 */ float m_hit_t;
  /* 0x0034 */ class broad_phase_info* m_hit_bpi;
}; /* size: 0x0040 */

struct cLinkInfo_s
{
  /* 0x0000 */ union vec3_t axis[4];
  /* 0x0030 */ int linkEnt;
  /* 0x0034 */ int linkTag;
  /* 0x0038 */ union vec3_t relativeAngles;
  union
  {
    /* 0x0044 */ unsigned int packed_bits;
    struct /* bitfield */
    {
      /* 0x0044 */ unsigned int relativeAnglesSet : 1; /* bit position: 0 */
      /* 0x0044 */ unsigned int identityLinkto : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
}; /* size: 0x0048 */

struct r_lightmapMerge_t
{
  /* 0x0000 */ unsigned char index;
  /* 0x0001 */ char Padding_534[3];
  /* 0x0004 */ union vec2_t shift;
  /* 0x000c */ union vec2_t scale;
}; /* size: 0x0014 */

struct GfxBspLoad
{
  /* 0x0000 */ unsigned int bspVersion;
  /* 0x0004 */ const struct dmaterial_t* diskMaterials;
  /* 0x0008 */ unsigned int materialCount;
  /* 0x000c */ union vec3_t outdoorMins;
  /* 0x0018 */ union vec3_t outdoorMaxs;
  /* 0x0024 */ struct r_lightmapMerge_t lmapMergeInfo[32];
}; /* size: 0x02a4 */

struct viewDirectionalHitIndicator_t
{
  /* 0x0000 */ int time;
  /* 0x0004 */ union vec3_t entOrigin;
}; /* size: 0x0010 */

struct snd_context
{
  /* 0x0000 */ unsigned int type;
  /* 0x0004 */ unsigned int value;
}; /* size: 0x0008 */

struct GfxDepthOfField
{
  /* 0x0000 */ float viewModelStart;
  /* 0x0004 */ float viewModelEnd;
  /* 0x0008 */ float nearStart;
  /* 0x000c */ float nearEnd;
  /* 0x0010 */ float farStart;
  /* 0x0014 */ float farEnd;
  /* 0x0018 */ float nearBlur;
  /* 0x001c */ float farBlur;
  /* 0x0020 */ BOOL useAltMaterial;
  /* 0x0021 */ char __PADDING__[3];
}; /* size: 0x0024 */

struct animScriptData_t
{
  /* 0x0000 */ struct animation_s animations[1024];
  /* 0x1e000 */ unsigned int numAnimations;
  /* 0x1e004 */ struct animScript_t scriptAnims[27][1];
  /* 0x21670 */ struct animScript_t scriptCannedAnims[27][1];
  /* 0x24cdc */ struct animScript_t scriptStateChange[1][1];
  /* 0x24ee0 */ struct animScript_t scriptEvents[37];
  /* 0x29974 */ struct animScriptItem_t scriptItems[2158];
  /* 0x92f64 */ int numScriptItems;
  /* 0x92f68 */ struct scr_animtree_t animTree;
  /* 0x92f6c */ unsigned short bodyAnim;
  /* 0x92f6e */ unsigned short mainAnim;
  /* 0x92f70 */ unsigned short torsoAnim;
  /* 0x92f72 */ unsigned short legsAnim;
  /* 0x92f74 */ unsigned short turningAnim;
  /* 0x92f76 */ char Padding_535[2];
  /* 0x92f78 */ void* soundAlias /* function */;
  /* 0x92f7c */ void* playSoundAlias /* function */;
}; /* size: 0x92f80 */

struct DiskTriangleSoup
{
  /* 0x0000 */ unsigned short materialIndex;
  /* 0x0002 */ unsigned char lightmapIndex;
  /* 0x0003 */ unsigned char reflectionProbeIndex;
  /* 0x0004 */ unsigned char primaryLightIndex;
  /* 0x0005 */ BOOL hasPrimaryLightConflict;
  /* 0x0006 */ BOOL castsSunShadow;
  /* 0x0007 */ char Padding_536;
  /* 0x0008 */ short _unused;
  /* 0x000a */ char Padding_537[2];
  /* 0x000c */ int vertexLayerData;
  /* 0x0010 */ unsigned int firstVertex;
  /* 0x0014 */ unsigned short vertexCount;
  /* 0x0016 */ unsigned short indexCount;
  /* 0x0018 */ int firstIndex;
}; /* size: 0x001c */

class phys_free_list<rigid_body_constraint_angular_actuator>::iterator
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base* m_ptr;
}; /* size: 0x0004 */

struct ddlRoot_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ struct ddlDef_t* ddlDef;
}; /* size: 0x0008 */

struct lerpFrame_t
{
  /* 0x0000 */ float yawAngle;
  /* 0x0004 */ int yawing;
  /* 0x0008 */ float pitchAngle;
  /* 0x000c */ int pitching;
  /* 0x0010 */ int animationNumber;
  /* 0x0014 */ struct animation_s* animation;
  /* 0x0018 */ int animationTime;
  /* 0x001c */ union vec3_t oldFramePos;
  /* 0x0028 */ float oldFrameYaw;
  /* 0x002c */ float animSpeedScale;
  /* 0x0030 */ int oldFrameSnapshotTime;
}; /* size: 0x0034 */

struct BackgroundsResultCache
{
  /* 0x0000 */ enum ControllerIndex_t controllerIndex;
  /* 0x0004 */ unsigned int flush;
  /* 0x0008 */ unsigned int use;
  /* 0x000c */ unsigned short include;
  /* 0x000e */ char Padding_538[2];
  /* 0x0010 */ int count;
  /* 0x0014 */ short ids[574];
}; /* size: 0x0490 */

struct GfxWorldFog
{
  /* 0x0000 */ float baseDist;
  /* 0x0004 */ float halfDist;
  /* 0x0008 */ float baseHeight;
  /* 0x000c */ float halfHeight;
  /* 0x0010 */ float sunFogPitch;
  /* 0x0014 */ float sunFogYaw;
  /* 0x0018 */ float sunFogInner;
  /* 0x001c */ float sunFogOuter;
  /* 0x0020 */ union vec3_t fogColor;
  /* 0x002c */ float fogOpacity;
  /* 0x0030 */ union vec3_t sunFogColor;
  /* 0x003c */ float sunFogOpacity;
}; /* size: 0x0040 */

struct emblemChallengeLookup_t
{
  /* 0x0000 */ short challengeIndex;
  /* 0x0002 */ unsigned char itemIndex;
  /* 0x0003 */ char __PADDING__[1];
}; /* size: 0x0004 */

struct EmblemChallengeTable
{
  /* 0x0000 */ struct emblemChallengeLookup_t emblemChallengeLookups[1024];
  /* 0x1000 */ struct emblemChallengeLookup_t backingChallengeLookups[574];
}; /* size: 0x18f8 */

struct GfxVisionSet
{
  /* 0x0000 */ struct GfxFilm film;
  /* 0x0110 */ struct GfxBloom bloom;
  /* 0x01a0 */ struct GfxReviveFx reviveFx;
  /* 0x01d8 */ struct GfxLightScale charPrimaryLightScale;
}; /* size: 0x01e0 */

struct GfxBlendSaveScreenFlashedParam
{
  /* 0x0000 */ float intensityWhiteout;
  /* 0x0004 */ float intensityScreengrab;
  /* 0x0008 */ float s0;
  /* 0x000c */ float t0;
  /* 0x0010 */ float ds;
  /* 0x0014 */ float dt;
  /* 0x0018 */ int screenTimerId;
  /* 0x001c */ unsigned char enabled;
  /* 0x001d */ char __PADDING__[3];
}; /* size: 0x0020 */

typedef struct _cgZBarrierPiece_t
{
  /* 0x0000 */ struct centity_t* pPiece;
  /* 0x0004 */ struct XModel* curXModel;
  /* 0x0008 */ void* pStateLogic /* function */;
  /* 0x000c */ int timeVal;
  /* 0x0010 */ int intVal;
  /* 0x0014 */ unsigned char state;
  /* 0x0015 */ unsigned char prevState;
  /* 0x0016 */ unsigned char subState;
  /* 0x0017 */ unsigned char nextSubState;
  /* 0x0018 */ unsigned char curAnim;
  /* 0x0019 */ BOOL flagsChanged;
  /* 0x001a */ char __PADDING__[2];
} cgZBarrierPiece_t, *PcgZBarrierPiece_t; /* size: 0x001c */

struct SndRuntimeAssetBank
{
  /* 0x0000 */ const char* zone;
  /* 0x0004 */ const char* language;
  /* 0x0008 */ int fileHandle;
  /* 0x000c */ struct SndAssetBankHeader header;
  /* 0x080c */ unsigned int entryOffset;
  /* 0x0810 */ unsigned char linkTimeChecksum[16];
  /* 0x0820 */ char filename[256];
  /* 0x0920 */ BOOL indicesLoaded;
  /* 0x0921 */ BOOL indicesAllocated;
}; /* size: 0x0922 */

struct SndLoadedAssets
{
  /* 0x0000 */ const char* zone;
  /* 0x0004 */ const char* language;
  /* 0x0008 */ unsigned int loadedCount;
  /* 0x000c */ unsigned int entryCount;
  /* 0x0010 */ struct SndAssetBankEntry* entries;
  /* 0x0014 */ unsigned int dataSize;
  /* 0x0018 */ char* data;
}; /* size: 0x001c */

struct SndBank
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int aliasCount;
  /* 0x0008 */ struct SndAliasList* alias;
  /* 0x000c */ struct SndIndexEntry* aliasIndex;
  /* 0x0010 */ unsigned int radverbCount;
  /* 0x0014 */ struct SndRadverb* radverbs;
  /* 0x0018 */ unsigned int duckCount;
  /* 0x001c */ struct SndDuck* ducks;
  /* 0x0020 */ struct SndRuntimeAssetBank streamAssetBank;
  /* 0x0942 */ struct SndRuntimeAssetBank loadAssetBank;
  /* 0x1264 */ struct SndLoadedAssets loadedAssets;
  /* 0x1280 */ unsigned int scriptIdLookupCount;
  /* 0x1284 */ struct SndDialogScriptIdLookup* scriptIdLookups;
  /* 0x1288 */ enum SndBankState state;
  /* 0x128c */ int streamRequestId;
  /* 0x1290 */ BOOL pendingIo;
  /* 0x1291 */ BOOL ioError;
  /* 0x1292 */ BOOL runtimeAssetLoad;
  /* 0x1293 */ char __PADDING__[1];
}; /* size: 0x1294 */

struct ID2D1TransformedGeometry
{
}; /* size: 0x0004 */

struct GfxSkinCacheEntry
{
  /* 0x0000 */ unsigned int frameCount;
  /* 0x0004 */ int skinnedCachedOffset;
  /* 0x0008 */ unsigned short numSkinnedVerts;
  /* 0x000a */ unsigned short ageCount;
}; /* size: 0x000c */

struct CEntPlayerInfo
{
  /* 0x0000 */ struct clientControllers_t* control;
  /* 0x0004 */ unsigned char tag[6];
  /* 0x000a */ char Padding_539[2];
  /* 0x000c */ float waterHeight;
  /* 0x0010 */ int nextWaterHeightCheck;
  /* 0x0014 */ int nextRippleTime;
}; /* size: 0x0018 */

struct CEntTurretAngles
{
  /* 0x0000 */ float pitch;
  /* 0x0004 */ float yaw;
  /* 0x0008 */ float barrelPitch;
}; /* size: 0x000c */

struct CEntTurretInfo
{
  union
  {
    /* 0x0000 */ struct CEntTurretAngles angles;
    /* 0x0000 */ union vec3_t viewAngles;
  }; /* size: 0x000c */
  /* 0x000c */ BOOL playerUsing;
  /* 0x000d */ char Padding_540[3];
  /* 0x0010 */ float minigunRotation;
  /* 0x0014 */ float minigunRotationSpeed;
  /* 0x0018 */ unsigned char tag_aim;
  /* 0x0019 */ unsigned char tag_aim_animated;
  /* 0x001a */ unsigned char tag_flash;
  /* 0x001b */ unsigned char tag_spin;
  /* 0x001c */ unsigned char tag_turret;
  /* 0x001d */ unsigned char tag_barrel;
  /* 0x001e */ char Padding_541[2];
  /* 0x0020 */ float barrelPitch;
  /* 0x0024 */ float pivotOffset;
  /* 0x0028 */ float firingOffset;
  /* 0x002c */ unsigned char tag_aim_pivot;
  /* 0x002d */ unsigned char tag_weapon;
  /* 0x002e */ char __PADDING__[2];
}; /* size: 0x0030 */

struct CEntVehicleDefGround
{
  /* 0x0000 */ float wheelHeight[6];
  /* 0x0018 */ float nitrousWheelRotation[6];
  /* 0x0030 */ short nitrousWheelYaw[6];
  /* 0x003c */ unsigned char tag_extra_tank_wheels[4];
}; /* size: 0x0040 */

struct CEntVehicleDefAir
{
  /* 0x0000 */ struct CEntVehicleRotor rotor[4];
}; /* size: 0x0040 */

struct CEntVehicleDef
{
  /* 0x0000 */ float barrelRecoil;
  /* 0x0004 */ short pitch;
  /* 0x0006 */ short roll;
  /* 0x0008 */ short barrelYaw;
  /* 0x000a */ short barrelPitch;
  /* 0x000c */ short steerYaw;
  /* 0x000e */ short steerPitch;
  /* 0x0010 */ short gunnerPitch[4];
  /* 0x0018 */ short gunnerYaw[4];
  /* 0x0020 */ short minigunRotation;
  /* 0x0022 */ short antennaPitch[2];
  /* 0x0026 */ short antennaRoll[2];
  /* 0x002a */ unsigned char wheelBoneIndex[6];
  /* 0x0030 */ unsigned char tag_body;
  /* 0x0031 */ unsigned char tag_turret;
  /* 0x0032 */ unsigned char tag_barrel;
  /* 0x0033 */ unsigned char tag_barrel_recoil;
  /* 0x0034 */ unsigned char tag_gunner_turret[4];
  /* 0x0038 */ unsigned char tag_gunner_barrel[4];
  /* 0x003c */ unsigned char tag_player;
  /* 0x003d */ unsigned char tag_minigun_spin;
  /* 0x003e */ unsigned char tag_antennas[2];
  union
  {
    /* 0x0040 */ struct CEntVehicleDefGround ground;
    /* 0x0040 */ struct CEntVehicleDefAir air;
  }; /* size: 0x0040 */
}; /* size: 0x0080 */

struct CEntFx
{
  /* 0x0000 */ int triggerTime;
  /* 0x0004 */ unsigned int effect;
}; /* size: 0x0008 */

struct CEntActorInfo
{
  /* 0x0000 */ int proneType;
  /* 0x0004 */ float pitch;
  /* 0x0008 */ float roll;
  /* 0x000c */ unsigned char headBone;
  /* 0x000d */ char Padding_542[3];
  union
  {
    /* 0x0010 */ float height;
    /* 0x0010 */ float yaw;
  }; /* size: 0x0004 */
  /* 0x0014 */ float waterHeight;
  /* 0x0018 */ int nextWaterHeightCheck;
  /* 0x001c */ int nextRippleTime;
  /* 0x0020 */ float lookAtBlend;
  /* 0x0024 */ unsigned char lookAtFlags;
  /* 0x0025 */ char __PADDING__[3];
}; /* size: 0x0028 */

struct ShaderConstantSet
{
  /* 0x0000 */ union vec4_t value[7];
  /* 0x0070 */ unsigned char constantSource[7];
  /* 0x0077 */ unsigned char used;
}; /* size: 0x0078 */

struct cpose_t
{
  /* 0x0000 */ unsigned short lightingHandle;
  /* 0x0002 */ unsigned char eType;
  /* 0x0003 */ unsigned char eTypeUnion;
  /* 0x0004 */ unsigned char localClientNum;
  /* 0x0005 */ unsigned char isRagdoll;
  /* 0x0006 */ char Padding_543[2];
  /* 0x0008 */ int ragdollHandle;
  /* 0x000c */ int physObjId;
  /* 0x0010 */ int physUserBody;
  /* 0x0014 */ int killcamRagdollHandle;
  /* 0x0018 */ int physUserBodyProneFeet;
  /* 0x001c */ unsigned char destructiblePose;
  /* 0x001d */ char Padding_544[3];
  /* 0x0020 */ int startBurnTime;
  /* 0x0024 */ float wetness;
  /* 0x0028 */ int cullIn;
  /* 0x002c */ union vec3_t origin;
  /* 0x0038 */ union vec3_t angles;
  /* 0x0044 */ union vec3_t absmin;
  /* 0x0050 */ union vec3_t absmax;
  /* 0x005c */ struct GfxSkinCacheEntry skinCacheEntry;
  union
  {
    /* 0x0068 */ struct CEntPlayerInfo player;
    /* 0x0068 */ struct CEntTurretInfo turret;
    /* 0x0068 */ struct CEntVehicleDef vehicle;
    /* 0x0068 */ struct CEntFx fx;
    /* 0x0068 */ struct CEntActorInfo actor;
    /* 0x0068 */ struct CEntGeneral general;
  }; /* size: 0x0080 */
  /* 0x00e8 */ struct ShaderConstantSet constantSet;
}; /* size: 0x0160 */

struct centity_t
{
  /* 0x0000 */ struct cpose_t pose;
  /* 0x0160 */ struct LerpEntityState prevState;
  /* 0x01dc */ struct entityState_s nextState;
  /* 0x02d4 */ short previousEventSequence;
  /* 0x02d6 */ char Padding_545[2];
  /* 0x02d8 */ int miscTime;
  /* 0x02dc */ int lastMuzzleFlash;
  /* 0x02e0 */ int numShotsFiredLast;
  /* 0x02e4 */ unsigned short attachModelNames[2];
  /* 0x02e8 */ unsigned short attachTagNames[2];
  /* 0x02ec */ struct XAnimTree_s* tree;
  /* 0x02f0 */ struct Destructible* destructible;
  /* 0x02f4 */ class NitrousVehicle* nitrousVeh;
  /* 0x02f8 */ struct cLinkInfo_s* linkInfo;
  /* 0x02fc */ struct cgVehicle_t* vehicle;
  /* 0x0300 */ struct ClientTagCache* clientTagCache;
  /* 0x0304 */ struct AimTargetCache* aimTargetInfo;
  /* 0x0308 */ struct cgScriptMover_s* cScriptMover;
  /* 0x030c */ struct canimscripted_t* scripted;
  /* 0x0310 */ struct cgZBarrier_s* zbarrier;
  /* 0x0314 */ struct DroppedWeaponDobjInfo* droppedWeaponDobjInfo;
  /* 0x0318 */ int nextSlideFX;
  /* 0x031c */ unsigned short flagIndex;
  /* 0x031e */ unsigned short flagState;
  /* 0x0320 */ struct Material* compassMaterial;
  /* 0x0324 */ int lastTrailTime;
  /* 0x0328 */ unsigned int fxTrailHandle;
  /* 0x032c */ unsigned int fxProjExplosion;
  /* 0x0330 */ unsigned int fxHeartbeat;
  /* 0x0334 */ unsigned int fxLaserSight;
  /* 0x0338 */ union vec3_t oldLinkOrigin;
  /* 0x0344 */ union vec3_t originError;
  /* 0x0350 */ union vec3_t anglesError;
  /* 0x035c */ unsigned char tracerDrawRateCounter;
  /* 0x035d */ char Padding_546[3];
  /* 0x0360 */ struct centity_t* updateDelayedNext;
  /* 0x0364 */ unsigned short classname;
  /* 0x0366 */ char Padding_547[2];
  /* 0x0368 */ unsigned int stepSound;
  /* 0x036c */ unsigned char footstepSurfaceOverride;
  /* 0x036d */ unsigned char deployedRiotshieldHits[8];
  /* 0x0375 */ char Padding_548[3];
  union
  {
    /* 0x0378 */ unsigned long packed_bits[2];
    struct
    {
      struct /* bitfield */
      {
        /* 0x0378 */ unsigned long applyLeftHandIK : 1; /* bit position: 0 */
        /* 0x0378 */ unsigned long nextValid : 1; /* bit position: 1 */
        /* 0x0378 */ unsigned long bMuzzleFlash : 1; /* bit position: 2 */
        /* 0x0378 */ unsigned long bMuzzleFlashLeft : 1; /* bit position: 3 */
        /* 0x0378 */ unsigned long bMuzzleFlashLastShot : 1; /* bit position: 4 */
        /* 0x0378 */ unsigned long bShellEject : 1; /* bit position: 5 */
        /* 0x0378 */ unsigned long bShellEjectLeft : 1; /* bit position: 6 */
        /* 0x0378 */ unsigned long bTrailMade : 1; /* bit position: 7 */
        /* 0x0378 */ unsigned long isBurning : 1; /* bit position: 8 */
        /* 0x0378 */ unsigned long skipBloodImpacts : 1; /* bit position: 9 */
        /* 0x0378 */ unsigned long heroBloodImpact : 1; /* bit position: 10 */
        /* 0x0378 */ unsigned long scriptThreaded : 1; /* bit position: 11 */
        /* 0x0378 */ unsigned long clientRumbleLoop : 1; /* bit position: 12 */
        /* 0x0378 */ unsigned long didOverheatFx : 1; /* bit position: 13 */
        /* 0x0378 */ unsigned long leftFootstep : 1; /* bit position: 14 */
        /* 0x0378 */ unsigned long rightFootstep : 1; /* bit position: 15 */
        /* 0x0378 */ unsigned long leftRearFootstep : 1; /* bit position: 16 */
        /* 0x0378 */ unsigned long rightRearFootstep : 1; /* bit position: 17 */
        /* 0x0378 */ unsigned long bIsTrigger : 1; /* bit position: 18 */
        /* 0x0378 */ unsigned long bIsTriggerRadius : 1; /* bit position: 19 */
        /* 0x0378 */ unsigned long bIsTriggerBox : 1; /* bit position: 20 */
        /* 0x0378 */ unsigned long bIsOneShot : 1; /* bit position: 21 */
        /* 0x0378 */ unsigned long bIsPlaneOnRadar : 1; /* bit position: 22 */
        /* 0x0378 */ unsigned long bFloatLonger : 1; /* bit position: 23 */
        /* 0x0378 */ unsigned long bForceBuoyancy : 1; /* bit position: 24 */
        /* 0x0378 */ unsigned long bIgnoreRagdoll : 1; /* bit position: 25 */
        /* 0x0378 */ unsigned long bClientFlagsNeedProcessing : 1; /* bit position: 26 */
        /* 0x0378 */ unsigned long bUpdatedSinceReset : 1; /* bit position: 27 */
        /* 0x0378 */ unsigned long bUpdateToggle : 1; /* bit position: 28 */
        /* 0x0378 */ unsigned long bZombieEyeGlowHasBeenTurnedOn : 1; /* bit position: 29 */
        /* 0x0378 */ unsigned long bFakeEntityMoving : 1; /* bit position: 30 */
        /* 0x0378 */ unsigned long bFakeEntityTurning : 1; /* bit position: 31 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x037c */ unsigned long bFakeEntityRemoved : 1; /* bit position: 0 */
        /* 0x037c */ unsigned long originAnglesError : 1; /* bit position: 1 */
        /* 0x037c */ unsigned long partOfZBarrier : 1; /* bit position: 2 */
        /* 0x037c */ unsigned long linkRelativeAngles : 1; /* bit position: 3 */
        /* 0x037c */ unsigned long sndTurretWasFiring : 1; /* bit position: 4 */
        /* 0x037c */ unsigned long clientMainThreaded : 1; /* bit position: 5 */
        /* 0x037c */ unsigned long renderInThirdPersonSpectate : 1; /* bit position: 6 */
        /* 0x037c */ unsigned long overrideLightingOrigin : 1; /* bit position: 7 */
        /* 0x037c */ unsigned long forceNotSimple : 1; /* bit position: 8 */
      }; /* bitfield */
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
}; /* size: 0x0380 */

struct DiskGfxVertex
{
  /* 0x0000 */ union vec3_t xyz;
  /* 0x000c */ union vec3_t normal;
  /* 0x0018 */ unsigned char color[4];
  /* 0x001c */ union vec2_t texCoord;
  /* 0x0024 */ union vec2_t lmapCoord;
  /* 0x002c */ union vec3_t tangent;
  /* 0x0038 */ union vec3_t binormal;
}; /* size: 0x0044 */

struct animStringItem_t
{
  /* 0x0000 */ const char* string;
  /* 0x0004 */ int hash;
}; /* size: 0x0008 */

struct SndRadverb
{
  /* 0x0000 */ char name[32];
  /* 0x0020 */ unsigned int id;
  /* 0x0024 */ float smoothing;
  /* 0x0028 */ float earlyTime;
  /* 0x002c */ float lateTime;
  /* 0x0030 */ float earlyGain;
  /* 0x0034 */ float lateGain;
  /* 0x0038 */ float returnGain;
  /* 0x003c */ float earlyLpf;
  /* 0x0040 */ float lateLpf;
  /* 0x0044 */ float inputLpf;
  /* 0x0048 */ float dampLpf;
  /* 0x004c */ float wallReflect;
  /* 0x0050 */ float dryGain;
  /* 0x0054 */ float earlySize;
  /* 0x0058 */ float lateSize;
  /* 0x005c */ float diffusion;
  /* 0x0060 */ float returnHighpass;
}; /* size: 0x0064 */

struct ResultCache
{
  /* 0x0000 */ enum ControllerIndex_t controllerIndex;
  /* 0x0004 */ unsigned int flush;
  /* 0x0008 */ unsigned int use;
  /* 0x000c */ unsigned short include;
  /* 0x000e */ unsigned short exclude;
  /* 0x0010 */ int count;
  /* 0x0014 */ short ids[1024];
}; /* size: 0x0814 */

class bdLinkedList<unsigned int>
{
  /* 0x0000 */ class bdLinkedList<unsigned int>::Node* m_head;
  /* 0x0004 */ class bdLinkedList<unsigned int>::Node* m_tail;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

class std::numeric_limits<char>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct StackAllocator
{
  /* 0x0000 */ unsigned char* memory;
  /* 0x0004 */ unsigned int size;
  /* 0x0008 */ unsigned int pos;
}; /* size: 0x000c */

struct GlassesClient
{
  union
  {
    struct
    {
      /* 0x0000 */ struct GlassClient* glasses;
      /* 0x0004 */ unsigned int numGlasses;
      /* 0x0008 */ struct GlassRenderer* renderer;
      /* 0x000c */ unsigned int lastPreShatter;
    }; /* size: 0x0010 */
    struct
    {
      /* 0x0000 */ struct StackAllocator allocator;
      /* 0x000c */ long __PADDING__[1];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

struct std::_Container_base12
{
  /* 0x0000 */ struct std::_Container_proxy* _Myproxy;
}; /* size: 0x0004 */

class std::numeric_limits<unsigned char>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct GlassServer
{
  /* 0x0000 */ struct GlassState state;
  /* 0x0004 */ struct Glass* glass;
  /* 0x0008 */ int stateChangeTime;
  /* 0x000c */ float health;
  /* 0x0010 */ float crackedDamageRate;
  /* 0x0014 */ union vec3_t hitPos;
  /* 0x0020 */ union vec3_t hitDir;
}; /* size: 0x002c */

struct WeaponComponent
{
  /* 0x0000 */ char name[64];
  /* 0x0040 */ enum eWeaponComponentType type;
  /* 0x0044 */ enum eAttachment attachment;
  /* 0x0048 */ enum eAttachmentPoint attachmentPoint;
}; /* size: 0x004c */

class phys_simple_allocator<phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

class phys_inplace_avl_tree<phys_gjk_geom_id_pair_key,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal::avl_tree_accessor>
{
  /* 0x0000 */ struct phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal* m_tree_root;
}; /* size: 0x0004 */

class phys_heap_gjk_cache_system_avl_tree
{
  /* 0x0000 */ class phys_simple_allocator<phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal> m_list_phys_gjk_cache_info_internal;
  /* 0x0004 */ class phys_inplace_avl_tree<phys_gjk_geom_id_pair_key,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal::avl_tree_accessor> m_search_tree;
  /* 0x0008 */ int m_max_num_gjk_ci;
  /* 0x000c */ struct phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal* m_list_head;
}; /* size: 0x0010 */

class phys_inplace_avl_tree<bpei_database_id,broad_phase_environment_info,broad_phase_environment_info::avl_tree_accessor>
{
  /* 0x0000 */ class broad_phase_environment_info* m_tree_root;
}; /* size: 0x0004 */

class phys_simple_allocator<broad_phase_environment_info>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

class bpei_database_t
{
  /* 0x0000 */ class phys_inplace_avl_tree<bpei_database_id,broad_phase_environment_info,broad_phase_environment_info::avl_tree_accessor> m_bpei_map;
  /* 0x0004 */ class phys_simple_allocator<broad_phase_environment_info> m_bpei_allocator;
  /* 0x0008 */ class broad_phase_environment_info* m_bpei_list;
  /* 0x000c */ struct minspec_read_write_mutex m_mutex;
}; /* size: 0x0010 */

struct phys_transient_allocator::allocator_state
{
  /* 0x0000 */ struct phys_transient_allocator::block_header* m_first_block;
  /* 0x0004 */ char* m_cur;
  /* 0x0008 */ char* m_end;
  /* 0x000c */ unsigned int m_total_memory_allocated;
}; /* size: 0x0010 */

class phys_link_list<gjk_geom_info_t>
{
  /* 0x0000 */ struct gjk_geom_info_t* m_first;
  /* 0x0004 */ struct gjk_geom_info_t** m_last_next_ptr;
  /* 0x0008 */ int m_alloc_count;
}; /* size: 0x000c */

struct cached_query_info_t
{
  /* 0x0000 */ class phys_vec3 m_query_aabb_min;
  /* 0x0010 */ class phys_vec3 m_query_aabb_max;
  /* 0x0020 */ int m_query_contents;
  /* 0x0024 */ unsigned int m_query_flags;
  /* 0x0028 */ long __PADDING__[2];
}; /* size: 0x0030 */

struct gjk_query_output
{
  /* 0x0000 */ long Padding_549[4];
  /* 0x0010 */ class phys_vec3 m_query_aabb_min;
  /* 0x0020 */ class phys_vec3 m_query_aabb_max;
  /* 0x0030 */ class phys_vec3 m_local_query_aabb_min;
  /* 0x0040 */ class phys_vec3 m_local_query_aabb_max;
  /* 0x0050 */ const struct gjk_query_input* m_local_query_input;
  /* 0x0054 */ class bpei_database_id m_local_database_id;
  /* 0x005c */ class broad_phase_environment_info* m_local_bpei;
  /* 0x0060 */ struct gjk_entity_info_t* m_local_ent_info;
  /* 0x0064 */ class bpei_database_t m_bpei_database;
  /* 0x0074 */ class phys_transient_allocator m_allocator;
  /* 0x008c */ struct phys_transient_allocator::allocator_state m_allocator_state;
  /* 0x009c */ int m_ent_count;
  /* 0x00a0 */ int m_geom_count;
  /* 0x00a4 */ struct gjk_geom_info_t* m_total_list_geom_info;
  /* 0x00a8 */ class phys_link_list<gjk_geom_info_t> m_list_geom_info;
  /* 0x00b4 */ int m_query_visitor_count;
  /* 0x00b8 */ int m_gent_query_visitor_count;
  /* 0x00bc */ int m_cent_query_visitor_count;
  /* 0x00c0 */ int m_dent_query_visitor_count;
  /* 0x00c4 */ long Padding_550[3];
  /* 0x00d0 */ struct cached_query_info_t m_cached_query_info;
  /* 0x0100 */ class phys_vec3 m_accum_start_origin;
  /* 0x0110 */ struct cached_query_info_t m_accum_query_info;
  /* 0x0140 */ int m_total_query_count;
  /* 0x0144 */ int m_total_cached_query_count;
  /* 0x0148 */ long __PADDING__[2];
}; /* size: 0x0150 */

struct gjkcc_info
{
  /* 0x0000 */ class phys_mat44 m_cg_to_world_xform;
  /* 0x0040 */ class phys_vec3 m_cg_aabb_min;
  /* 0x0050 */ class phys_vec3 m_cg_aabb_max;
  /* 0x0060 */ union vec3_t m_mins;
  /* 0x006c */ union vec3_t m_maxs;
  /* 0x0078 */ class phys_heap_gjk_cache_system_avl_tree m_gjk_cache;
  /* 0x0088 */ long Padding_551[2];
  /* 0x0090 */ struct gjk_query_output m_gjk_query_output;
  /* 0x01e0 */ int m_active;
  /* 0x01e4 */ BOOL m_is_server_thread;
  /* 0x01e5 */ char Padding_552[3];
  /* 0x01e8 */ struct gjk_base_t* m_cg_;
  /* 0x01ec */ union vec3_t m_last_origin;
  /* 0x01f8 */ long __PADDING__[2];
}; /* size: 0x0200 */

struct tagPOINT
{
  /* 0x0000 */ long x;
  /* 0x0004 */ long y;
}; /* size: 0x0008 */

struct tagMINMAXINFO
{
  /* 0x0000 */ struct tagPOINT ptReserved;
  /* 0x0008 */ struct tagPOINT ptMaxSize;
  /* 0x0010 */ struct tagPOINT ptMaxPosition;
  /* 0x0018 */ struct tagPOINT ptMinTrackSize;
  /* 0x0020 */ struct tagPOINT ptMaxTrackSize;
}; /* size: 0x0028 */

struct ray2_t
{
  /* 0x0000 */ union vec2_t origin;
  /* 0x0008 */ union vec2_t dir;
  /* 0x0010 */ float len;
}; /* size: 0x0014 */

struct GlassOutline::Vertex
{
  /* 0x0000 */ struct ray2_t edge;
  /* 0x0014 */ BOOL isOriginalEdge;
  /* 0x0015 */ char __PADDING__[3];
}; /* size: 0x0018 */

struct specialtyCollection_t
{
  /* 0x0000 */ int index;
  /* 0x0004 */ unsigned int perks[2];
}; /* size: 0x000c */

struct cached_client_tag_t
{
  /* 0x0000 */ int time;
  /* 0x0004 */ union vec3_t lastLocalTagOrigin;
  /* 0x0010 */ BOOL visible;
  /* 0x0011 */ char Padding_553[3];
  /* 0x0014 */ int predictedTime;
  /* 0x0018 */ union vec3_t predictedPosition;
  /* 0x0024 */ union vec3_t predictedAngles;
}; /* size: 0x0030 */

struct ClientTagCache
{
  /* 0x0000 */ struct cached_client_tag_t aim_head_tag;
  /* 0x0030 */ struct cached_client_tag_t aim_highest_tag;
  /* 0x0060 */ struct cached_client_tag_t tag_flash;
}; /* size: 0x0090 */

class phys_static_array<phys_vec3,6144>
{
  /* 0x0000 */ char m_buffer[98304];
  /* 0x18000 */ class phys_vec3* const m_slot_array;
  /* 0x18004 */ int m_alloc_count;
}; /* size: 0x18010 */

class phys_static_array<phys_convex_hull::ch_triangle,256>
{
  /* 0x0000 */ char m_buffer[8192];
  /* 0x2000 */ struct phys_convex_hull::ch_triangle* const m_slot_array;
  /* 0x2004 */ int m_alloc_count;
}; /* size: 0x2010 */

class phys_static_array<phys_convex_hull::ch_edge,128>
{
  /* 0x0000 */ char m_buffer[1024];
  /* 0x0400 */ struct phys_convex_hull::ch_edge* const m_slot_array;
  /* 0x0404 */ int m_alloc_count;
}; /* size: 0x0410 */

class phys_static_array<phys_vec3 *,128>
{
  /* 0x0000 */ char m_buffer[512];
  /* 0x0200 */ class phys_vec3** const m_slot_array;
  /* 0x0204 */ int m_alloc_count;
}; /* size: 0x0210 */

class phys_static_array<phys_convex_hull::ch_triangle,128>
{
  /* 0x0000 */ char m_buffer[4096];
  /* 0x1000 */ struct phys_convex_hull::ch_triangle* const m_slot_array;
  /* 0x1004 */ int m_alloc_count;
}; /* size: 0x1010 */

class phys_convex_hull
{
  /* 0x0000 */ class phys_static_array<phys_vec3,6144> m_vertex_buffer;
  /* 0x18010 */ class phys_static_array<phys_vec3 *,6144> m_intermediate_vertex_list;
  /* 0x1e020 */ class phys_static_array<phys_convex_hull::ch_triangle,256> m_intermediate_triangle_list;
  /* 0x20030 */ class phys_static_array<phys_convex_hull::ch_edge,128> m_intermediate_edge_list;
  /* 0x20440 */ class phys_static_array<phys_vec3 *,128> m_convex_hull_vert_list;
  /* 0x20650 */ class phys_static_array<phys_convex_hull::ch_triangle,128> m_convex_hull_triangle_list;
}; /* size: 0x21660 */

struct HHOOK__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct cgScriptMover_s
{
  /* 0x0000 */ float decelTime;
  /* 0x0004 */ float aDecelTime;
  /* 0x0008 */ float speed;
  /* 0x000c */ float aSpeed;
  /* 0x0010 */ float midTime;
  /* 0x0014 */ float aMidTime;
  /* 0x0018 */ union vec3_t pos1;
  /* 0x0024 */ union vec3_t pos2;
  /* 0x0030 */ union vec3_t pos3;
  /* 0x003c */ union vec3_t apos1;
  /* 0x0048 */ union vec3_t apos2;
  /* 0x0054 */ union vec3_t apos3;
}; /* size: 0x0060 */

struct FX_WindInfo
{
  /* 0x0000 */ union vec3_t windVector;
  /* 0x000c */ float lowWindAltitude;
  /* 0x0010 */ float hiWindAltitude;
  /* 0x0014 */ float lowWindStrengthPercent;
  /* 0x0018 */ float windVectorMagnitude;
}; /* size: 0x001c */

class bdYouTubeUploadStats
{
  /* 0x0000 */ long Padding_554;
  /* 0x0004 */ unsigned int m_windowSize;
  /* 0x0008 */ unsigned int m_uploadCount;
  /* 0x000c */ unsigned int m_minimumDuration;
  /* 0x0010 */ unsigned int m_maximumDuration;
  /* 0x0014 */ unsigned int m_averageDuration;
  /* 0x0018 */ unsigned int m_age;
}; /* size: 0x001c */

struct canimscripted_t
{
  /* 0x0000 */ union vec3_t axis[4];
  /* 0x0030 */ unsigned short anim;
  /* 0x0032 */ unsigned char bStarted;
  /* 0x0033 */ char __PADDING__[1];
}; /* size: 0x0034 */

struct cgZBarrier_s
{
  /* 0x0000 */ BOOL forceUpdateForDemoJump;
  /* 0x0001 */ char Padding_555[3];
  /* 0x0004 */ struct _cgZBarrierPiece_t pieces[6];
}; /* size: 0x00ac */

class phys_static_array<phys_convex_hull::ch_triangle,256>::iterator
{
  /* 0x0000 */ struct phys_convex_hull::ch_triangle* m_ptr;
}; /* size: 0x0004 */

struct IDirectSoundCaptureBuffer
{
}; /* size: 0x0004 */

struct std::_Iterator012<std::bidirectional_iterator_tag,GlassShard *,int,GlassShard * const *,GlassShard * const &,std::_Iterator_base0>
{
}; /* size: 0x0001 */

struct SndDspSquelchParam
{
  /* 0x0000 */ float tg;
  /* 0x0004 */ float th;
}; /* size: 0x0008 */

struct SndDspFutzParam
{
  /* 0x0000 */ float blend;
  /* 0x0004 */ float bpfF;
  /* 0x0008 */ float bpfQ;
  /* 0x000c */ float lsG;
  /* 0x0010 */ float lsF;
  /* 0x0014 */ float lsQ;
  /* 0x0018 */ float distortion;
  /* 0x001c */ float pregain;
  /* 0x0020 */ float postgain;
  /* 0x0024 */ float preclip;
  /* 0x0028 */ float postclip;
  /* 0x002c */ struct SndDspSquelchParam squelch;
  /* 0x0034 */ float padding[3];
}; /* size: 0x0040 */

struct SndDspSourceParams
{
  /* 0x0000 */ float frameRate;
  /* 0x0004 */ float lpfAttenuation;
  /* 0x0008 */ float lpfRatio;
  /* 0x000c */ struct SndDspFutzParam futz;
}; /* size: 0x004c */

struct sd_voice_param
{
  /* 0x0000 */ enum sd_voice_param_state state;
  /* 0x0004 */ struct sd_voice_param* next;
  /* 0x0008 */ enum SndBus bus;
  /* 0x000c */ struct SndDspSourceParams dspParams;
  /* 0x0058 */ float dryPan[12];
  /* 0x0088 */ float wetPan[12];
  /* 0x00b8 */ float pitch;
  /* 0x00bc */ int paused;
  /* 0x00c0 */ int startPaused;
  /* 0x00c4 */ int doPitch;
  /* 0x00c8 */ char align[56];
}; /* size: 0x0100 */

struct DroppedWeaponDobjInfo
{
  /* 0x0000 */ int entnum;
  /* 0x0004 */ struct WeaponDobjInfo weaponDobjInfo;
}; /* size: 0x0090 */

struct MantleAnimTransition
{
  /* 0x0000 */ int upAnimIndex;
  /* 0x0004 */ int overAnimIndex;
  /* 0x0008 */ float height;
}; /* size: 0x000c */

struct Demo_SetTag_EmblemInfoParam_s
{
  /* 0x0000 */ unsigned __int64 fingerPrint;
  /* 0x0008 */ unsigned __int64 beginTimeStamp;
  /* 0x0010 */ unsigned __int64 numUploadsSinceTimeStamp;
}; /* size: 0x0018 */

struct AntilagClientStore
{
  /* 0x0000 */ union vec3_t realClientPositions[18];
  /* 0x00d8 */ union vec3_t realClientAngles[18];
  /* 0x01b0 */ BOOL clientMoved[18];
  /* 0x01c2 */ char __PADDING__[2];
}; /* size: 0x01c4 */

union sd_decoder_instance
{
  union
  {
    /* 0x0000 */ struct XMAPLAYBACK* xma;
    /* 0x0000 */ struct sd_decoder_pc_flac* pc_flac;
    /* 0x0000 */ struct sd_decoder_ps3_mp3* ps3_mp3;
    /* 0x0000 */ struct sd_decoder_pcm16* pcm16;
    /* 0x0000 */ struct sd_decoder_mpc* mpc;
    /* 0x0000 */ struct sd_decoder_flac* flac;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct sd_decoder
{
  /* 0x0000 */ enum sd_decoder_state state;
  /* 0x0004 */ union sd_decoder_instance instance;
  /* 0x0008 */ struct sd_source* source;
  /* 0x000c */ void* lastBuffer;
  /* 0x0010 */ unsigned int framesDecoded;
  /* 0x0014 */ int eos;
  /* 0x0018 */ int error;
  /* 0x001c */ int outputStarving;
  /* 0x0020 */ enum snd_asset_format format;
}; /* size: 0x0024 */

struct snapshot_s
{
  /* 0x0000 */ int snapFlags;
  /* 0x0004 */ int ping;
  /* 0x0008 */ int serverTime;
  /* 0x000c */ int physicsTime;
  /* 0x0010 */ struct playerState_s ps;
  /* 0x2a18 */ int numEntities;
  /* 0x2a1c */ int numClients;
  /* 0x2a20 */ int numActors;
  /* 0x2a24 */ struct entityState_s entities[512];
  /* 0x21a24 */ long Padding_556;
  /* 0x21a28 */ struct clientState_s clients[18];
  /* 0x22e68 */ struct actorState_s actors[32];
  /* 0x23ae8 */ long Padding_557[6];
  /* 0x23b00 */ struct MatchState matchState;
  /* 0x23b80 */ unsigned short entIndices[512];
  /* 0x23f80 */ int serverCommandSequence;
  /* 0x23f84 */ long __PADDING__[31];
}; /* size: 0x24000 */

struct playerEntity_t
{
  /* 0x0000 */ float fLastWeaponPosFrac;
  /* 0x0004 */ int bPositionToADS;
  /* 0x0008 */ union vec3_t vPositionLastOrg;
  /* 0x0014 */ float fLastIdleFactor;
  /* 0x0018 */ union vec3_t baseMoveOrigin;
  /* 0x0024 */ union vec3_t baseMoveAngles;
}; /* size: 0x0030 */

struct GfxDoubleVision
{
  /* 0x0000 */ union vec3_t direction;
  /* 0x000c */ float motionBlurMagnitude;
  /* 0x0010 */ float deltaPerMS;
  /* 0x0014 */ float cur;
  /* 0x0018 */ float targ;
}; /* size: 0x001c */

struct GfxCompositeFx
{
  /* 0x0000 */ union vec2_t distortionScale;
  /* 0x0008 */ float blurRadius;
  /* 0x000c */ float distortionMagnitude;
  /* 0x0010 */ float frameRate;
  /* 0x0014 */ int lastUpdate;
  /* 0x0018 */ int frame;
  /* 0x001c */ int startMSec;
  /* 0x0020 */ int currentTime;
  /* 0x0024 */ int duration;
  /* 0x0028 */ BOOL enabled;
  /* 0x0029 */ BOOL scriptEnabled;
  /* 0x002a */ char __PADDING__[2];
}; /* size: 0x002c */

struct GfxGenericFilter
{
  /* 0x0000 */ BOOL passEnabled[4][8];
  /* 0x0020 */ struct Material* passMaterial[4][8];
  /* 0x00a0 */ int passTarget[4][8];
  /* 0x0120 */ int passSampler0[4][8];
  /* 0x01a0 */ int passSampler1[4][8];
  /* 0x0220 */ float passParam[16][4][8];
  /* 0x0a20 */ int passQuads[4][8];
  /* 0x0aa0 */ int bitFlag[8];
}; /* size: 0x0ac0 */

struct GfxPoison
{
  /* 0x0000 */ float curAmountTarget;
  /* 0x0004 */ float curAmount;
}; /* size: 0x0008 */

struct GfxSaveScreenFx
{
  /* 0x0000 */ struct GfxSaveScreenParam saveScreenParam;
  /* 0x0018 */ struct GfxBlendSaveScreenBlurredParam blendBlurredParam;
  /* 0x0034 */ struct GfxBlendSaveScreenFlashedParam blendFlashedParam;
}; /* size: 0x0054 */

struct WaterFogDef
{
  /* 0x0000 */ int startTime;
  /* 0x0004 */ int finishTime;
  /* 0x0008 */ union vec4_t color;
  /* 0x0018 */ float fogStart;
  /* 0x001c */ float density;
  /* 0x0020 */ float heightDensity;
  /* 0x0024 */ float baseHeight;
  /* 0x0028 */ union vec4_t sunFogColor;
  /* 0x0038 */ union vec3_t sunFogDir;
  /* 0x0044 */ float sunFogStartAng;
  /* 0x0048 */ float sunFogEndAng;
}; /* size: 0x004c */

struct GfxRippleWave
{
  /* 0x0000 */ union vec3_t wavePosition;
  /* 0x000c */ float waveWidth;
  /* 0x0010 */ float waveSpeedScale;
  /* 0x0014 */ float waveAmplitudeRatio;
  /* 0x0018 */ float waveInnerStart;
  /* 0x001c */ float waveInnerEnd;
  /* 0x0020 */ float waveOuterStart;
  /* 0x0024 */ float waveOuterEnd;
  /* 0x0028 */ int waveTimeStamp;
}; /* size: 0x002c */

struct refdef_t
{
  /* 0x0000 */ unsigned int x;
  /* 0x0004 */ unsigned int y;
  /* 0x0008 */ unsigned int width;
  /* 0x000c */ unsigned int height;
  /* 0x0010 */ float sceneViewportX;
  /* 0x0014 */ float sceneViewportY;
  /* 0x0018 */ float sceneViewportWidth;
  /* 0x001c */ float sceneViewportHeight;
  /* 0x0020 */ float tanHalfFovX;
  /* 0x0024 */ float tanHalfFovY;
  /* 0x0028 */ float maincamTanHalfFovY;
  /* 0x002c */ float extracamTanHalfFovY;
  /* 0x0030 */ float fov_x;
  /* 0x0034 */ union vec3_t vieworg;
  /* 0x0040 */ float yaw;
  /* 0x0044 */ union vec3_t viewaxis[3];
  /* 0x0068 */ int frametime;
  /* 0x006c */ int time;
  /* 0x0070 */ float zNear;
  /* 0x0074 */ float zFar;
  /* 0x0078 */ struct GfxVisionSet visionset;
  /* 0x0258 */ float blurRadius;
  /* 0x025c */ struct GfxDepthOfField dof;
  /* 0x0280 */ float rimIntensity;
  /* 0x0284 */ union vec4_t genericSceneVector0;
  /* 0x0294 */ union vec4_t genericSceneVector1;
  /* 0x02a4 */ union vec4_t genericSceneVector2;
  /* 0x02b4 */ union vec4_t genericSceneVector3;
  /* 0x02c4 */ union vec4_t cameraVelocity;
  /* 0x02d4 */ struct GfxDoubleVision doubleVision;
  /* 0x02f0 */ struct GfxCompositeFx flameFx;
  /* 0x031c */ struct GfxCompositeFx waterSheetingFx;
  /* 0x0348 */ struct GfxGenericFilter genericFilter;
  /* 0x0e08 */ struct GfxPoison poisonFx;
  /* 0x0e10 */ struct GfxCompositeFx electrifiedFx;
  /* 0x0e3c */ struct GfxCompositeFx transportedFx;
  /* 0x0e68 */ struct GfxSaveScreenFx saveScreenFx;
  /* 0x0ebc */ float sunVisibility;
  /* 0x0ec0 */ struct GfxLight primaryLights[255];
  /* 0x16d60 */ struct GfxViewport scissorViewport;
  /* 0x16d70 */ BOOL useScissorViewport;
  /* 0x16d71 */ char Padding_558[3];
  /* 0x16d74 */ enum LocalClientNum_t localClientNum;
  /* 0x16d78 */ int hideMatureContent;
  /* 0x16d7c */ int splitscreen;
  /* 0x16d80 */ int splitscreenBlurEdges;
  /* 0x16d84 */ int playerTeleported;
  /* 0x16d88 */ int oldExposureId;
  /* 0x16d8c */ int newExposureId;
  /* 0x16d90 */ float lerpcount;
  /* 0x16d94 */ int lastTime;
  /* 0x16d98 */ float exposure;
  /* 0x16d9c */ float linearExposure;
  /* 0x16da0 */ unsigned short exposureMode;
  /* 0x16da2 */ unsigned short worldFogMode;
  /* 0x16da4 */ union vec3_t worldFogVolumeEntryPosition;
  /* 0x16db0 */ short newWorldFogVolumeId;
  /* 0x16db2 */ short oldWorldFogVolumeId;
  /* 0x16db4 */ int worldFogVolumeTimeStamp;
  /* 0x16db8 */ int worldFogFlags;
  /* 0x16dbc */ BOOL worldFogSnapTransition;
  /* 0x16dbd */ BOOL worldFogUseSystemTime;
  /* 0x16dbe */ char Padding_559[2];
  /* 0x16dc0 */ struct GfxWorldFog worldFogOld;
  /* 0x16e00 */ struct GfxWorldFog worldFogNow;
  /* 0x16e40 */ short worldFogModifierVolumeId;
  /* 0x16e42 */ char Padding_560[2];
  /* 0x16e44 */ int worldFogModifierTimeStamp;
  /* 0x16e48 */ float worldFogModifierTimeScale;
  /* 0x16e4c */ float worldFogModifierScaleD;
  /* 0x16e50 */ float worldFogModifierScaleH;
  /* 0x16e54 */ union vec4_t worldFogModifierColorA;
  /* 0x16e64 */ float nWorldFogModifierScaleD;
  /* 0x16e68 */ float nWorldFogModifierScaleH;
  /* 0x16e6c */ union vec4_t nWorldFogModifierColor;
  /* 0x16e7c */ union vec3_t worldFogVolumeLastViewOrg;
  /* 0x16e88 */ unsigned short lutBankMask;
  /* 0x16e8a */ short lutScriptIndex;
  /* 0x16e8c */ short newLutVolumeId;
  /* 0x16e8e */ short oldLutVolumeId;
  /* 0x16e90 */ int lutVolumeTimeStamp;
  /* 0x16e94 */ float lutBlendWeights[32];
  /* 0x16f14 */ float postEmissiveBrightening;
  /* 0x16f18 */ BOOL noLodCullOut;
  /* 0x16f19 */ char Padding_561[3];
  /* 0x16f1c */ float lodScaleRigid;
  /* 0x16f20 */ float lodScaleSkinned;
  /* 0x16f24 */ struct WaterFogDef waterFog;
  /* 0x16f70 */ float adsZScale;
  /* 0x16f74 */ struct ExtraCamLodInfo extraCamLodInfo;
  /* 0x16fa8 */ union vec3_t preExtraCamVieworg;
  /* 0x16fb4 */ union vec3_t preExtraCamViewaxis[3];
  /* 0x16fd8 */ float preExtraCamTanHalfFovX;
  /* 0x16fdc */ float preExtraCamTanHalfFovY;
  /* 0x16fe0 */ float weaponTanHalfFovX;
  /* 0x16fe4 */ float weaponTanHalfFovY;
  /* 0x16fe8 */ BOOL sonarActive;
  /* 0x16fe9 */ BOOL sonarUseThermalMaterial;
  /* 0x16fea */ BOOL sonarOverrideBlend;
  /* 0x16feb */ char Padding_562;
  /* 0x16fec */ float sonarTanHalfFovX;
  /* 0x16ff0 */ float sonarTanHalfFovY;
  /* 0x16ff4 */ union vec2_t sonarViewScale;
  /* 0x16ffc */ union vec2_t sonarViewOffset;
  /* 0x17004 */ float sonarBlur;
  /* 0x17008 */ BOOL drawInfrared;
  /* 0x17009 */ char Padding_563[3];
  /* 0x1700c */ float convergence;
  /* 0x17010 */ BOOL drawPostBlur;
  /* 0x17011 */ BOOL drawWaypointsPostBloom;
  /* 0x17012 */ BOOL useColorControl;
  /* 0x17013 */ char Padding_564;
  /* 0x17014 */ float colorSaturation;
  /* 0x17018 */ float colorTemp;
  /* 0x1701c */ float colorHue;
  /* 0x17020 */ union vec3_t colorScale;
  /* 0x1702c */ struct GfxRippleWave rWaves[1];
  /* 0x17058 */ BOOL darknessActive;
  /* 0x17059 */ char __PADDING__[7];
}; /* size: 0x17060 */

struct ScriptCamera
{
  /* 0x0000 */ int flags;
  /* 0x0004 */ union vec3_t origin;
  /* 0x0010 */ union vec3_t angles;
  /* 0x001c */ union vec3_t lookat;
  /* 0x0028 */ int originCent;
  /* 0x002c */ int lookAtCent;
}; /* size: 0x0030 */

struct ScriptExtraCam
{
  /* 0x0000 */ union vec3_t origin[4];
  /* 0x0030 */ union vec3_t angles[4];
  /* 0x0060 */ int entNum[4];
  /* 0x0070 */ float fov[4];
  /* 0x0080 */ int curCameraIndex;
  /* 0x0084 */ BOOL multiCamEnabled;
  /* 0x0085 */ BOOL multiCamRequest;
  /* 0x0086 */ char __PADDING__[2];
}; /* size: 0x0088 */

struct Camera
{
  /* 0x0000 */ union vec3_t lastViewOrg;
  /* 0x000c */ union vec3_t lastViewAngles;
  /* 0x0018 */ float lastFOV;
  /* 0x001c */ int lastViewInputTime;
  /* 0x0020 */ float lastSpringOffset;
  /* 0x0024 */ float lastViewTraceFraction;
  /* 0x0028 */ int lastTime;
  /* 0x002c */ int lastClientNum;
  /* 0x0030 */ union vec3_t tweenStartOrg;
  /* 0x003c */ union vec3_t tweenStartAngles;
  /* 0x0048 */ float tweenStartFOV;
  /* 0x004c */ int tweenStartTime;
  /* 0x0050 */ float tweenDuration;
  /* 0x0054 */ enum CameraMode lastCamMode;
  /* 0x0058 */ int lastVehicleDefIndex;
  /* 0x005c */ int lastVehicleSeatPos;
  /* 0x0060 */ union vec3_t missileViewAngles;
  /* 0x006c */ BOOL missileWasKillCam;
  /* 0x006d */ char Padding_565[3];
  /* 0x0070 */ struct ScriptCamera scriptCam;
  /* 0x00a0 */ struct ScriptExtraCam scriptExtraCam;
  /* 0x0128 */ BOOL useTagCamera;
  /* 0x0129 */ BOOL bWasRemoteTurretCam;
  /* 0x012a */ char __PADDING__[2];
}; /* size: 0x012c */

struct objectiveMapInfo_t
{
  /* 0x0000 */ struct Material* icon;
  /* 0x0004 */ float iconSize;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned char ignoreEntity : 1; /* bit position: 0 */
    /* 0x0008 */ unsigned char rotateWithEntity : 1; /* bit position: 1 */
    /* 0x0008 */ unsigned char flipMaterial : 1; /* bit position: 2 */
    /* 0x0008 */ unsigned char clipToMap : 1; /* bit position: 3 */
    /* 0x0008 */ unsigned char colorMaterialInCode : 1; /* bit position: 4 */
    /* 0x0008 */ unsigned char stencilToPartialMap : 1; /* bit position: 5 */
  }; /* bitfield */
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

struct viewDamage_t
{
  /* 0x0000 */ int time;
  /* 0x0004 */ int duration;
  /* 0x0008 */ float yaw;
}; /* size: 0x000c */

struct shellshock_t
{
  /* 0x0000 */ const struct shellshock_parms_t* parms;
  /* 0x0004 */ int startTime;
  /* 0x0008 */ int duration;
  /* 0x000c */ int loopEndTime;
  /* 0x0010 */ float sensitivity;
  /* 0x0014 */ union vec2_t viewDelta;
  /* 0x001c */ int hasSavedScreen;
  /* 0x0020 */ int visionSetStarted;
}; /* size: 0x0024 */

struct SonarAttachmentInfo
{
  /* 0x0000 */ union vec3_t prevOrigin;
  /* 0x000c */ float movementDistance[60];
  /* 0x00fc */ int nextMovementDistanceIndex;
}; /* size: 0x0100 */

struct clientInfo_t
{
  /* 0x0000 */ int infoValid;
  /* 0x0004 */ int nextValid;
  /* 0x0008 */ enum ClientNum_t clientNum;
  /* 0x000c */ char name[32];
  /* 0x002c */ enum team_t team;
  /* 0x0030 */ enum team_t oldteam;
  /* 0x0034 */ enum ffa_team_t ffaTeam;
  /* 0x0038 */ int clanAbbrev_IsEliteValidated;
  /* 0x003c */ long Padding_566;
  /* 0x0040 */ unsigned __int64 leagueTeamID;
  /* 0x0048 */ int leagueDivisionID;
  /* 0x004c */ long Padding_567;
  /* 0x0050 */ unsigned __int64 leagueSubdivisionID;
  /* 0x0058 */ struct Material* hLeagueDivisionIcon;
  /* 0x005c */ int leagueSubdivisionRank;
  /* 0x0060 */ int rank;
  union
  {
    /* 0x0064 */ int prestige;
    /* 0x0064 */ int lastDaysPlayed;
  }; /* size: 0x0004 */
  /* 0x0068 */ int needsRevive;
  /* 0x006c */ unsigned int perks[2];
  /* 0x0074 */ long Padding_568;
  /* 0x0078 */ unsigned __int64 xuid;
  /* 0x0080 */ char clanAbbrev[8];
  /* 0x0088 */ struct score_s score;
  /* 0x00d0 */ struct Material* hStatusIcon;
  /* 0x00d4 */ struct Material* hRankIcon;
  /* 0x00d8 */ int location;
  /* 0x00dc */ int health;
  /* 0x00e0 */ char model[64];
  /* 0x0120 */ char attachModelNames[64][6];
  /* 0x02a0 */ char attachTagNames[64][6];
  /* 0x0420 */ unsigned int modelChecksum;
  /* 0x0424 */ unsigned int attachModelChecksums[6];
  /* 0x043c */ unsigned int attachTagChecksums[6];
  /* 0x0454 */ struct lerpFrame_t legs;
  /* 0x0488 */ struct lerpFrame_t torso;
  /* 0x04bc */ float lerpMoveDir;
  /* 0x04c0 */ float lerpLean;
  /* 0x04c4 */ union vec3_t playerAngles;
  /* 0x04d0 */ int leftHandGun;
  /* 0x04d4 */ int dobjDirty;
  /* 0x04d8 */ struct clientControllers_t control;
  /* 0x0538 */ int lastDamageTime;
  /* 0x053c */ int lastStandStartTime;
  /* 0x0540 */ int turnedHumanTime;
  /* 0x0544 */ long Padding_569;
  /* 0x0548 */ __int64 moveType;
  /* 0x0550 */ __int64 eventType;
  /* 0x0558 */ int beingRevived;
  /* 0x055c */ unsigned int clientConditions[25];
  /* 0x05c0 */ struct XAnimTree_s* pXAnimTree;
  /* 0x05c4 */ union Weapon DObjWeapon;
  /* 0x05c8 */ unsigned char weaponModel;
  /* 0x05c9 */ char Padding_570[3];
  /* 0x05cc */ union Weapon DObjOffhandWeapon;
  /* 0x05d0 */ union Weapon DObjMeleeWeapon;
  /* 0x05d4 */ unsigned char meleeWeaponModel;
  /* 0x05d5 */ char Padding_571[3];
  /* 0x05d8 */ int showReloadClipInHand;
  /* 0x05dc */ int hideWeaponClipModel;
  /* 0x05e0 */ int dropWeaponClipTime;
  /* 0x05e4 */ int stanceTransitionTime;
  /* 0x05e8 */ int turnAnimEndTime;
  /* 0x05ec */ char turnAnimType;
  /* 0x05ed */ char Padding_572[3];
  /* 0x05f0 */ int attachedVehEntNum;
  /* 0x05f4 */ int attachedVehSeat;
  /* 0x05f8 */ BOOL hideWeapon;
  /* 0x05f9 */ char Padding_573[3];
  /* 0x05fc */ unsigned int weaponHideBits[5];
  /* 0x0610 */ BOOL usingKnife;
  /* 0x0611 */ BOOL usingGrenade;
  /* 0x0612 */ BOOL usingLaser;
  /* 0x0613 */ char Padding_574;
  /* 0x0614 */ int nextHideWeaponTime;
  /* 0x0618 */ union vec3_t vehAnimLastOrg;
  /* 0x0624 */ union vec3_t vehAnimLastAngle;
  /* 0x0630 */ int vehAnimLastBone;
  /* 0x0634 */ int vehAnimLastTime;
  /* 0x0638 */ int vehAnimLerpStartTime;
  /* 0x063c */ int vehAnimLerpEndTime;
  /* 0x0640 */ float weaponSpinLerp;
  /* 0x0644 */ float lastWeaponSpinLerp;
  /* 0x0648 */ float weaponSpin;
  /* 0x064c */ BOOL wasFiring[5];
  /* 0x0651 */ char Padding_575[3];
  /* 0x0654 */ int laseFXCentNum;
  /* 0x0658 */ unsigned int laseFXHandle;
  /* 0x065c */ int clientUIVisibilityFlags;
  /* 0x0660 */ int teleportTime;
  /* 0x0664 */ BOOL teleportBit;
  /* 0x0665 */ char Padding_576[3];
  /* 0x0668 */ int surfaceType;
  /* 0x066c */ int movementType;
  /* 0x0670 */ int footstepEventCount;
  /* 0x0674 */ struct SonarAttachmentInfo sonarAttachmentInfo;
  /* 0x0774 */ float infraredFadeOut;
  /* 0x0778 */ struct WeaponDobjInfo weaponDobjInfo;
  /* 0x0804 */ int offhandWeaponVisible;
}; /* size: 0x0808 */

struct animInfo_t
{
  /* 0x0000 */ struct actorLerpFrame_t lerp;
  /* 0x0008 */ struct lerpFrame_t legs;
}; /* size: 0x003c */

struct actorInfo_t
{
  /* 0x0000 */ int infoValid;
  /* 0x0004 */ int nextValid;
  /* 0x0008 */ int actorNum;
  /* 0x000c */ int entityNum;
  /* 0x0010 */ char name[32];
  /* 0x0030 */ char model[64];
  /* 0x0070 */ char attachModelNames[64][6];
  /* 0x01f0 */ char attachTagNames[64][6];
  /* 0x0370 */ unsigned int modelChecksum;
  /* 0x0374 */ unsigned int attachModelChecksums[6];
  /* 0x038c */ unsigned int attachTagChecksums[6];
  /* 0x03a4 */ unsigned int attachIgnoreCollision;
  /* 0x03a8 */ struct animInfo_t animInfo;
  /* 0x03e4 */ int animScriptedAnim;
  /* 0x03e8 */ int nextAnimScriptedAnim;
  /* 0x03ec */ struct SonarAttachmentInfo sonarAttachmentInfo;
  /* 0x04ec */ int dobjDirty;
  /* 0x04f0 */ struct XAnimTree_s* pXAnimTree;
}; /* size: 0x04f4 */

struct bgs_clientfieldapi_t
{
  /* 0x0000 */ void* CompareHashToGameState /* function */;
  /* 0x0004 */ void* AllowVersionReRegistration /* function */;
  /* 0x0008 */ void* FieldVersionAllowsRegistration /* function */;
  /* 0x000c */ void* ServerVersionAllowsRegistration /* function */;
}; /* size: 0x0010 */

struct bgs_t
{
  /* 0x0000 */ struct bgsAnim_s* animData;
  /* 0x0004 */ struct bgsClientFields_s* clientFields;
  /* 0x0008 */ struct scr_animtree_t* scriptmoveranim_trees[16];
  /* 0x000c */ unsigned int* scriptmoveranim_tree_count;
  /* 0x0010 */ int time;
  /* 0x0014 */ int latestSnapshotTime;
  /* 0x0018 */ int frametime;
  /* 0x001c */ int anim_user;
  /* 0x0020 */ int proneTime[18];
  /* 0x0068 */ void* GetXModel /* function */;
  /* 0x006c */ void* CreateDObj /* function */;
  /* 0x0070 */ void* AttachWeapon /* function */;
  /* 0x0074 */ void* AttachStowedWeapon /* function */;
  /* 0x0078 */ void* GetDObj /* function */;
  /* 0x007c */ void* SafeDObjFree /* function */;
  /* 0x0080 */ void* AllocXAnim /* function */;
  /* 0x0084 */ void* AnimCmdRefCount /* function */;
  /* 0x0088 */ void* AnimCmdAddDependent /* function */;
  /* 0x008c */ void* SetEntAnimSpeed /* function */;
  /* 0x0090 */ void* GetEntAnimSpeed /* function */;
  /* 0x0094 */ long Padding_577;
  /* 0x0098 */ struct clientInfo_t clientinfo[18];
  /* 0x9128 */ struct actorInfo_t actorinfo[32];
  /* 0x12fa8 */ void* PlayerDobjChanging /* function */;
  /* 0x12fac */ void* Scr_AddInt /* function */;
  /* 0x12fb0 */ void* Scr_AddFloat /* function */;
  /* 0x12fb4 */ void* Scr_AddString /* function */;
  /* 0x12fb8 */ void* Scr_AddLocalClientNumber /* function */;
  /* 0x12fbc */ void* Scr_ExecEntThreadNum /* function */;
  /* 0x12fc0 */ struct bgs_clientfieldapi_t clientFieldAPI;
}; /* size: 0x12fd0 */

struct visionSetVars_t
{
  /* 0x0000 */ BOOL filmEnable;
  /* 0x0001 */ char Padding_578[3];
  /* 0x0004 */ union vec4_t visBloomLevelsRGBYInB;
  /* 0x0014 */ union vec4_t visBloomLevelsRGBYInG;
  /* 0x0024 */ union vec4_t visBloomLevelsRGBYInW;
  /* 0x0034 */ union vec4_t visBloomLevelsRGBYOutB;
  /* 0x0044 */ union vec4_t visBloomLevelsRGBYOutW;
  /* 0x0054 */ union vec4_t visBloomRGBHi;
  /* 0x0064 */ union vec4_t visBloomRGBLo;
  /* 0x0074 */ union vec4_t visBloomYHi;
  /* 0x0084 */ union vec4_t visBloomYLo;
  /* 0x0094 */ union vec4_t visColorRangeS;
  /* 0x00a4 */ union vec4_t visColorRangeE;
  /* 0x00b4 */ union vec4_t visColorShadowMatrixR;
  /* 0x00c4 */ union vec4_t visColorShadowMatrixG;
  /* 0x00d4 */ union vec4_t visColorShadowMatrixB;
  /* 0x00e4 */ union vec4_t visColorMidtoneMatrixR;
  /* 0x00f4 */ union vec4_t visColorMidtoneMatrixG;
  /* 0x0104 */ union vec4_t visColorMidtoneMatrixB;
  /* 0x0114 */ union vec4_t visColorHilightMatrixR;
  /* 0x0124 */ union vec4_t visColorHilightMatrixG;
  /* 0x0134 */ union vec4_t visColorHilightMatrixB;
  /* 0x0144 */ union vec4_t visColorFinalGamma;
  /* 0x0154 */ union vec4_t visColorFinalSaturation;
  /* 0x0164 */ union vec4_t visColorFinalBlend;
  /* 0x0174 */ float filmLut;
  /* 0x0178 */ BOOL reviveEnable;
  /* 0x0179 */ char Padding_579[3];
  /* 0x017c */ float reviveEdgeColorTemp;
  /* 0x0180 */ float reviveEdgeSaturation;
  /* 0x0184 */ union vec3_t reviveEdgeScale;
  /* 0x0190 */ union vec3_t reviveEdgeContrast;
  /* 0x019c */ union vec3_t reviveEdgeOffset;
  /* 0x01a8 */ float reviveEdgeMaskAdjust;
  /* 0x01ac */ float reviveEdgeAmount;
  /* 0x01b0 */ BOOL charPrimaryUseTweaks;
  /* 0x01b1 */ char Padding_580[3];
  /* 0x01b4 */ float charPrimaryDiffuseScale;
  /* 0x01b8 */ float charPrimarySpecularScale;
  /* 0x01bc */ float masterRingmod;
  /* 0x01c0 */ float reverbRingmod;
  /* 0x01c4 */ float hiFilter;
  /* 0x01c8 */ float lowFilter;
  /* 0x01cc */ union vec4_t sunFlareTint;
  /* 0x01dc */ float postEmissiveBrightening;
  /* 0x01e0 */ char name[64];
}; /* size: 0x0220 */

struct transPlayerState_t
{
  /* 0x0000 */ int otherFlags;
  /* 0x0004 */ int damageEvent;
  /* 0x0008 */ short predictableEventSequence;
  /* 0x000a */ char Padding_581[2];
  /* 0x000c */ int predictableEvents[4];
  /* 0x001c */ short unpredictableEventSequence;
  /* 0x001e */ char Padding_582[2];
  /* 0x0020 */ int unpredictableEvents[4];
}; /* size: 0x0030 */

struct hudElemSoundInfo_t
{
  /* 0x0000 */ int lastPlayedTime;
}; /* size: 0x0004 */

struct CompassScrambler
{
  /* 0x0000 */ union vec2_t pos;
  /* 0x0008 */ int startTime;
  /* 0x000c */ int handle;
}; /* size: 0x0010 */

struct ShieldHitDelayedEvent
{
  /* 0x0000 */ unsigned int eventParm;
}; /* size: 0x0004 */

struct cg_t::FogSettings
{
  /* 0x0000 */ float start;
  /* 0x0004 */ float r;
  /* 0x0008 */ float g;
  /* 0x000c */ float b;
  /* 0x0010 */ float density;
  /* 0x0014 */ float heightDensity;
  /* 0x0018 */ float baseHeight;
  /* 0x001c */ float fogColorScale;
  /* 0x0020 */ float sunFogColorR;
  /* 0x0024 */ float sunFogColorG;
  /* 0x0028 */ float sunFogColorB;
  /* 0x002c */ float sunFogDirX;
  /* 0x0030 */ float sunFogDirY;
  /* 0x0034 */ float sunFogDirZ;
  /* 0x0038 */ float sunFogStartAng;
  /* 0x003c */ float sunFogEndAng;
  /* 0x0040 */ float fogMaxOpacity;
}; /* size: 0x0044 */

struct bullet_hit_info_t
{
  /* 0x0000 */ union vec3_t hitp;
  /* 0x000c */ union vec3_t hitn;
  /* 0x0018 */ int sflags;
  /* 0x001c */ float depth;
  /* 0x0020 */ int hitid;
  /* 0x0024 */ float range;
}; /* size: 0x0028 */

struct targetInfo_t
{
  /* 0x0000 */ int entNum;
  /* 0x0004 */ union vec3_t offset;
  /* 0x0010 */ int materialIndex;
  /* 0x0014 */ int offscreenMaterialIndex;
  /* 0x0018 */ int flags;
}; /* size: 0x001c */

struct snd_ambient_script_data
{
  /* 0x0000 */ BOOL isAmbientRoom;
  /* 0x0001 */ BOOL isAmbientPackage;
  /* 0x0002 */ BOOL isDefaultRoom;
  /* 0x0003 */ char Padding_583;
  /* 0x0004 */ short entnums[16];
  /* 0x0024 */ char priorities[16];
  /* 0x0034 */ char name[64];
  /* 0x0074 */ unsigned int hash;
  /* 0x0078 */ int numContexts;
  /* 0x007c */ struct snd_context contexts[16];
}; /* size: 0x00fc */

struct snd_ambient_collider
{
  /* 0x0000 */ int roomTriggerIndex;
  /* 0x0004 */ int previousRoomTriggerIndex;
  /* 0x0008 */ int packageTriggerIndex;
  /* 0x000c */ int roomPriorityIndex;
  /* 0x0010 */ int packagePriorityIndex;
  /* 0x0014 */ int entnum;
  /* 0x0018 */ unsigned int hash;
  /* 0x001c */ int colliderEntnum;
  /* 0x0020 */ BOOL firstFrame;
  /* 0x0021 */ BOOL inUse;
  /* 0x0022 */ char Padding_584[2];
  /* 0x0024 */ unsigned int playerRingoff;
  /* 0x0028 */ BOOL updated;
  /* 0x0029 */ BOOL localPlayer;
  /* 0x002a */ char __PADDING__[2];
}; /* size: 0x002c */

struct cg_t
{
  /* 0x0000 */ enum ClientNum_t clientNum;
  /* 0x0004 */ enum LocalClientNum_t localClientNum;
  /* 0x0008 */ enum DemoType demoType;
  /* 0x000c */ enum CubemapShot cubemapShot;
  /* 0x0010 */ int cubemapSize;
  /* 0x0014 */ int renderScreen;
  /* 0x0018 */ int latestSnapshotNum;
  /* 0x001c */ int latestSnapshotTime;
  /* 0x0020 */ struct snapshot_s* snap;
  /* 0x0024 */ struct snapshot_s* nextSnap;
  /* 0x0028 */ long Padding_585[22];
  /* 0x0080 */ struct snapshot_s activeSnapshots[2];
  /* 0x48080 */ BOOL slowMotionModified;
  /* 0x48081 */ char Padding_586[3];
  /* 0x48084 */ float frameInterpolation;
  /* 0x48088 */ int frametime;
  /* 0x4808c */ int time;
  /* 0x48090 */ int oldTime;
  /* 0x48094 */ int physicsTime;
  /* 0x48098 */ int mapRestart;
  /* 0x4809c */ BOOL bThirdPerson;
  /* 0x4809d */ char Padding_587[3];
  /* 0x480a0 */ enum thirdPersonType renderingThirdPerson;
  /* 0x480a4 */ long Padding_588;
  /* 0x480a8 */ struct playerState_s predictedPlayerState;
  /* 0x4aab0 */ int lastPlayerStateOverride;
  /* 0x4aab4 */ struct centity_t predictedPlayerEntity;
  /* 0x4ae34 */ struct playerEntity_t playerEntity;
  /* 0x4ae64 */ int predictedErrorTime;
  /* 0x4ae68 */ union vec3_t predictedError;
  /* 0x4ae74 */ long Padding_589;
  /* 0x4ae78 */ struct playerState_s lastUIPlayerState;
  /* 0x4d880 */ float landChange;
  /* 0x4d884 */ int landTime;
  /* 0x4d888 */ float heightToCeiling;
  /* 0x4d88c */ int heightToCeilingTS;
  /* 0x4d890 */ struct refdef_t refdef;
  /* 0x648f0 */ union vec3_t refdefViewAngles;
  /* 0x648fc */ struct Camera cameraData;
  /* 0x64a28 */ float lastPelvisCameraOffset;
  /* 0x64a2c */ union vec3_t baseGunAngles;
  /* 0x64a38 */ union vec3_t swayViewAngles;
  /* 0x64a44 */ union vec3_t swayAngles;
  /* 0x64a50 */ union vec3_t swayOffset;
  /* 0x64a5c */ union vec3_t recoilAngles;
  /* 0x64a68 */ union vec3_t recoilSpeed;
  /* 0x64a74 */ union vec3_t damageKickAngles;
  /* 0x64a80 */ int previousRecoilTime;
  /* 0x64a84 */ float previousRecoilRatio;
  /* 0x64a88 */ union vec3_t lastStandSwayAngles;
  /* 0x64a94 */ union vec3_t lastStandSwayAVel;
  /* 0x64aa0 */ union vec3_t lastStandSwayTarget;
  /* 0x64aac */ union vec3_t radiantCameraOrigin;
  /* 0x64ab8 */ union vec3_t radiantCameraAngles;
  /* 0x64ac4 */ int radiantCamInUse;
  /* 0x64ac8 */ int iEntityLastType[1792];
  /* 0x666c8 */ struct XModel* pEntityLastXModel[1792];
  /* 0x682c8 */ float zoomSensitivity;
  /* 0x682cc */ BOOL isLoading;
  /* 0x682cd */ char objectiveText[1024];
  /* 0x686cd */ char Padding_590[3];
  /* 0x686d0 */ enum team_indicator teamIndicator;
  /* 0x686d4 */ BOOL colorBlindAssist;
  /* 0x686d5 */ char Padding_591[3];
  /* 0x686d8 */ int teamPlayerMask[1][10];
  /* 0x68700 */ int vehicleInitView;
  /* 0x68704 */ union vec3_t prevVehicleInvAxis[3];
  /* 0x68728 */ BOOL vehicleViewLocked;
  /* 0x68729 */ char Padding_592[3];
  /* 0x6872c */ union vec3_t vehicleViewLockedAngles;
  /* 0x68738 */ int missileInitView;
  /* 0x6873c */ union vec3_t storedRemoteCameraAngles;
  /* 0x68748 */ union vec3_t storedRemoteCameraOrigin;
  /* 0x68754 */ char scriptMainMenu[256];
  /* 0x68854 */ BOOL initialPlayersConnected;
  /* 0x68855 */ BOOL initialPlayersConnectedRespondedTo;
  /* 0x68856 */ char Padding_593[2];
  /* 0x68858 */ int numScores;
  /* 0x6885c */ int teamScores[10];
  /* 0x68884 */ unsigned int teamHasMeat[10];
  /* 0x688ac */ int teamPings[10];
  /* 0x688d4 */ int teamPlayers[10];
  /* 0x688fc */ enum ClientNum_t scoreOrder[18];
  /* 0x68944 */ enum scoreboardColumnType_t scoreboardColumnTypes[5];
  /* 0x68958 */ int matchUIVisibilityFlags;
  /* 0x6895c */ unsigned int talkFlags;
  /* 0x68960 */ struct objectiveMapInfo_t objectiveMapInfo[2][64];
  /* 0x68f60 */ struct objective_t clientObjectives[32];
  /* 0x69560 */ int bombTimer[2];
  /* 0x69568 */ int showScores;
  /* 0x6956c */ int scoreFadeTime;
  /* 0x69570 */ int scoresTop;
  /* 0x69574 */ int scoresOffBottom;
  /* 0x69578 */ int scoresBottom;
  /* 0x6957c */ int selectedGamerIndex;
  /* 0x69580 */ int bannerLines[10];
  /* 0x695a8 */ unsigned __int64 selectedGamerXuid;
  /* 0x695b0 */ int selectedGamerClientNum;
  /* 0x695b4 */ int drawHud;
  /* 0x695b8 */ int timeScaleTimeStart;
  /* 0x695bc */ int timeScaleTimeEnd;
  /* 0x695c0 */ float timeScaleStart;
  /* 0x695c4 */ float timeScaleEnd;
  /* 0x695c8 */ enum ClientNum_t crosshairClientNum;
  /* 0x695cc */ int crosshairClientLastTime;
  /* 0x695d0 */ int crosshairClientStartTime;
  /* 0x695d4 */ unsigned int crosshairTraceDistance;
  /* 0x695d8 */ unsigned int airburstMarkDistance;
  /* 0x695dc */ int airburstMarkStartTime;
  /* 0x695e0 */ int airburstMarkEndTime;
  /* 0x695e4 */ int airburstMarkInProgress;
  /* 0x695e8 */ int gpsJammerLastInactive;
  /* 0x695ec */ int bulletsFiredContinuously;
  /* 0x695f0 */ int bulletsFiredContinuouslyLeft;
  /* 0x695f4 */ int bulletsFiredStopTime;
  /* 0x695f8 */ int cursorHintIcon;
  /* 0x695fc */ int cursorHintTime;
  /* 0x69600 */ int cursorHintFade;
  /* 0x69604 */ int cursorHintString;
  /* 0x69608 */ int vehicleHintTime;
  /* 0x6960c */ int lastVehicleSeat;
  /* 0x69610 */ int driverHintShown;
  /* 0x69614 */ int gunnerHintShown;
  /* 0x69618 */ int lastClipFlashTime;
  /* 0x6961c */ enum InvalidCmdHintType invalidCmdHintType;
  /* 0x69620 */ int invalidCmdHintTime;
  /* 0x69624 */ enum SuccessfulCmdHintType successfulCmdHintType;
  /* 0x69628 */ int successfulCmdHintTime;
  /* 0x6962c */ int lastHealthPulseTime;
  /* 0x69630 */ int lastHealthLerpDelay;
  /* 0x69634 */ int lastHealthClient;
  /* 0x69638 */ float lastHealth;
  /* 0x6963c */ float healthOverlayFromAlpha;
  /* 0x69640 */ float healthOverlayToAlpha;
  /* 0x69644 */ int healthOverlayPulseTime;
  /* 0x69648 */ int healthOverlayPulseDuration;
  /* 0x6964c */ int healthOverlayPulsePhase;
  /* 0x69650 */ BOOL healthOverlayHurt;
  /* 0x69651 */ char Padding_594[3];
  /* 0x69654 */ int healthOverlayLastHitTime;
  /* 0x69658 */ float healthOverlayOldHealth;
  /* 0x6965c */ int healthOverlayPulseIndex;
  /* 0x69660 */ int proneBlockedEndTime;
  /* 0x69664 */ int lastStance;
  /* 0x69668 */ int lastStanceChangeTime;
  /* 0x6966c */ int lastStanceFlashTime;
  /* 0x69670 */ int voiceTime;
  /* 0x69674 */ union Weapon weaponSelect;
  /* 0x69678 */ int weaponSelectTime;
  /* 0x6967c */ BOOL weaponForcedSelect;
  /* 0x6967d */ char Padding_595[3];
  /* 0x69680 */ union Weapon weaponLatestPrimary;
  /* 0x69684 */ union Weapon lastWeaponForAlt[15];
  /* 0x696c0 */ unsigned int viewModelFx;
  /* 0x696c4 */ union Weapon prevViewmodelWeapon;
  /* 0x696c8 */ BOOL prevViewmodelWeaponInASD;
  /* 0x696c9 */ char Padding_596[3];
  /* 0x696cc */ union Weapon equippedOffHand;
  /* 0x696d0 */ struct viewDirectionalHitIndicator_t directionalHitIndicator[4];
  /* 0x69710 */ struct viewDamage_t viewDamage[8];
  /* 0x69770 */ int damageTime;
  /* 0x69774 */ float damageX;
  /* 0x69778 */ float damageY;
  /* 0x6977c */ float damageValue;
  /* 0x69780 */ float viewFade;
  /* 0x69784 */ int waterDropCount;
  /* 0x69788 */ int waterDropStartTime;
  /* 0x6978c */ int waterDropStopTime;
  /* 0x69790 */ int weaponIdleTime;
  /* 0x69794 */ int nomarks;
  /* 0x69798 */ int clearMarks;
  /* 0x6979c */ int newPlayerViewmodel;
  /* 0x697a0 */ BOOL weaponLaserOff;
  /* 0x697a1 */ char Padding_597[3];
  /* 0x697a4 */ int v_dmg_time;
  /* 0x697a8 */ float v_dmg_pitch;
  /* 0x697ac */ float v_dmg_roll;
  /* 0x697b0 */ float v_dmg_flash;
  /* 0x697b4 */ float fBobCycle;
  /* 0x697b8 */ float xyspeed;
  /* 0x697bc */ union vec3_t kickAVel;
  /* 0x697c8 */ union vec3_t kickAngles;
  /* 0x697d4 */ union vec3_t offsetAngles;
  /* 0x697e0 */ float gunPitch;
  /* 0x697e4 */ float gunYaw;
  /* 0x697e8 */ float gunXOfs;
  /* 0x697ec */ float gunYOfs;
  /* 0x697f0 */ float gunZOfs;
  /* 0x697f4 */ union vec3_t flamethrowerKickOffset;
  /* 0x69800 */ float minigunSpinAngle;
  /* 0x69804 */ union vec3_t viewModelAxis[4];
  /* 0x69834 */ float rumbleScale;
  /* 0x69838 */ float compassNorthYaw;
  /* 0x6983c */ union vec2_t compassNorth;
  /* 0x69844 */ struct Material* compassMapMaterial;
  /* 0x69848 */ struct Material* compassMapScrambledMaterial;
  /* 0x6984c */ union vec2_t compassMapUpperLeft;
  /* 0x69854 */ union vec2_t compassMapWorldSize;
  /* 0x6985c */ int compassLastTime;
  /* 0x69860 */ float compassYaw;
  /* 0x69864 */ float compassSpeed;
  /* 0x69868 */ int compassFadeTime;
  /* 0x6986c */ int healthFadeTime;
  /* 0x69870 */ int ammoFadeTime;
  /* 0x69874 */ int stanceFadeTime;
  /* 0x69878 */ int sprintFadeTime;
  /* 0x6987c */ int offhandFadeTime;
  /* 0x69880 */ int offhandFlashTime;
  /* 0x69884 */ int waypointFadeTime;
  /* 0x69888 */ int vehicleControlsFadeTime;
  /* 0x6988c */ struct shellshock_t shellshock;
  struct
  {
    /* 0x698b0 */ int time;
    /* 0x698b4 */ int duration;
  } /* size: 0x0008 */ testShock;
  /* 0x698b8 */ int shellshockSoundActive;
  /* 0x698bc */ int holdBreathTime;
  /* 0x698c0 */ int holdBreathInTime;
  /* 0x698c4 */ int holdBreathDelay;
  /* 0x698c8 */ float holdBreathFrac;
  /* 0x698cc */ float radarProgress;
  /* 0x698d0 */ float satelliteProgress;
  /* 0x698d4 */ int radarType;
  /* 0x698d8 */ union vec2_t selectedLocation;
  /* 0x698e0 */ union vec2_t selectedYaw;
  /* 0x698e8 */ int typewriterStartTime;
  /* 0x698ec */ union vec2_t selectedLocations[3];
  /* 0x69904 */ int lastTimeSelected;
  /* 0x69908 */ struct SprintState sprintStates;
  /* 0x69924 */ int adsViewErrorDone;
  /* 0x69928 */ int inKillCam;
  /* 0x6992c */ int wasInKillCam;
  /* 0x69930 */ BOOL killCamFirstFrameRan;
  /* 0x69931 */ char Padding_598[3];
  /* 0x69934 */ int killCamEntity;
  /* 0x69938 */ int invalidKillCamEntity;
  /* 0x6993c */ enum KillCamEntityType killCamEntityType;
  /* 0x69940 */ int killCamLastEntityNum;
  /* 0x69944 */ union vec3_t killCamLastEntityOrg;
  /* 0x69950 */ union vec3_t killCamLastEntityAngles;
  /* 0x6995c */ enum KillCamEntityRestState killCamEntityRestState;
  /* 0x69960 */ int killCamLookAtEntity;
  /* 0x69964 */ union vec3_t killCamLookAt;
  /* 0x69970 */ union vec3_t killCamHelicopterOffset;
  /* 0x6997c */ short killCamLastVehicleDefIndex;
  /* 0x6997e */ char Padding_599[2];
  /* 0x69980 */ int killCamStoppedTime;
  /* 0x69984 */ float killCamStoppedDecelTime;
  /* 0x69988 */ union vec3_t killCamStoppedPos;
  /* 0x69994 */ union vec3_t killCamStoppedVel;
  /* 0x699a0 */ union vec3_t killCamPrevBombOrigin;
  /* 0x699ac */ int killCamLerpEndTime;
  /* 0x699b0 */ union vec3_t killCamOldViewAngles;
  /* 0x699bc */ union vec3_t killCamOldViewOrg;
  /* 0x699c8 */ struct bgs_t bgs;
  /* 0x7c998 */ struct cpose_t viewModelPose;
  /* 0x7caf8 */ struct visionSetVars_t visionSetPreLoaded[8];
  /* 0x7dbf8 */ char visionSetPreLoadedName[64][8];
  /* 0x7ddf8 */ struct visionSetVars_t visionSetFrom[8];
  /* 0x7eef8 */ struct visionSetVars_t visionSetTo[8];
  /* 0x7fff8 */ struct visionSetVars_t visionSetCurrent[8];
  /* 0x810f8 */ struct visionSetLerpData_t visionSetLerpData[8];
  /* 0x81178 */ char visionNameNaked[64];
  /* 0x811b8 */ char visionNameNight[64];
  /* 0x811f8 */ char visionNameLastStand[64];
  /* 0x81238 */ char visionNameFlare[64];
  /* 0x81278 */ char visionNameInfrared[64];
  /* 0x812b8 */ char visionNameTvguided[64];
  /* 0x812f8 */ char visionNameExtraCam[64];
  /* 0x81338 */ BOOL drewReticle;
  /* 0x81339 */ char Padding_600[3];
  /* 0x8133c */ class bitarray<64> extraButton_bits;
  /* 0x81344 */ BOOL breathPressedLastFrame;
  /* 0x81345 */ char Padding_601[3];
  /* 0x81348 */ int lastActionSlotTime;
  /* 0x8134c */ BOOL playerTeleported;
  /* 0x8134d */ char Padding_602[3];
  /* 0x81350 */ float flareRatioLastFrame;
  /* 0x81354 */ int stepViewStart;
  /* 0x81358 */ float stepViewChange;
  struct
  {
    /* 0x8135c */ float aimSpreadScale;
  } /* size: 0x0004 */ lastFrame;
  /* 0x81360 */ int oldCommandTime;
  /* 0x81364 */ union vec3_t oldOrigin;
  /* 0x81370 */ union vec3_t oldViewangles;
  /* 0x8137c */ struct transPlayerState_t oldTransPlayerState;
  /* 0x813ac */ struct hudElemSoundInfo_t hudElemSound[32];
  /* 0x8142c */ int nextRippleTime;
  /* 0x81430 */ unsigned int impactEffectsNext;
  /* 0x81434 */ unsigned int impactEffects[256];
  /* 0x81834 */ float warDesiredMomentumProgress;
  /* 0x81838 */ float warCurrentMomentumProgress;
  /* 0x8183c */ int warMomentumMultiplier;
  /* 0x81840 */ int warMomentumBlitzkriegTime;
  /* 0x81844 */ int warMomentumFlashTime;
  /* 0x81848 */ float gunnerPitchOffset;
  /* 0x8184c */ unsigned int centInNextSnapshot[32];
  /* 0x818cc */ struct centity_t* slideFakeEnt;
  /* 0x818d0 */ int cameraLinkedEntitiesCount;
  /* 0x818d4 */ int cameraLinkedEntities[4];
  /* 0x818e4 */ enum link_type_e cameraLinkedEntitiesType[4];
  /* 0x818f4 */ union vec3_t cameraLinkedEntitiesOffset[4];
  /* 0x81924 */ int groundTiltEntNum;
  /* 0x81928 */ int poisoned;
  /* 0x8192c */ struct Material* genericMaterialMap[64];
  /* 0x81a2c */ BOOL genericFilterPassEnabled[4][8];
  /* 0x81a4c */ struct Material* genericFilterPassMaterial[4][8];
  /* 0x81acc */ int genericFilterPassTarget[4][8];
  /* 0x81b4c */ int genericFilterPassSampler0[4][8];
  /* 0x81bcc */ int genericFilterPassSampler1[4][8];
  /* 0x81c4c */ float genericFilterPassParam[16][4][8];
  /* 0x8244c */ int genericFilterPassQuads[4][8];
  /* 0x824cc */ int genericFilterBitFlag[8];
  /* 0x824ec */ BOOL genericOverlayEnabled[3];
  /* 0x824ef */ char Padding_603;
  /* 0x824f0 */ struct Material* genericOverlayMaterial[3];
  /* 0x824fc */ float genericOverlayParam[16][3];
  /* 0x825bc */ int genericOverlaySortIndex[3];
  /* 0x825c8 */ float genericOverlayParamADS[8];
  /* 0x825e8 */ BOOL genericOverlayEnableADS;
  /* 0x825e9 */ char Padding_604[3];
  /* 0x825ec */ int swimming;
  /* 0x825f0 */ int swimmingStartTime;
  /* 0x825f4 */ int missileViewWobbleLastTime;
  /* 0x825f8 */ union vec3_t missileViewWobbleFreq;
  /* 0x82604 */ union vec3_t missileViewWobbleAmp;
  /* 0x82610 */ int counterSpinTime;
  /* 0x82614 */ float counterSpinTarget;
  /* 0x82618 */ float counterSpinAngle;
  /* 0x8261c */ int extraCamEntity;
  /* 0x82620 */ int extraCamActive;
  /* 0x82624 */ int extraCamStatic;
  /* 0x82628 */ union vec3_t extraCamOrigin;
  /* 0x82634 */ union vec3_t extraCamAngles;
  /* 0x82640 */ int hasLocalRadar;
  /* 0x82644 */ union vec2_t localRadarPos;
  /* 0x8264c */ float localRadarProgress;
  /* 0x82650 */ int globalScramblerActive;
  /* 0x82654 */ float scramblerEnemyAlpha;
  /* 0x82658 */ float scramblerFriendlyAlpha;
  /* 0x8265c */ int popUpSwayStartTime;
  /* 0x82660 */ float popupRotationAngle;
  /* 0x82664 */ float popUpAngleDelta;
  /* 0x82668 */ struct CompassScrambler compassScrambler[16];
  /* 0x82768 */ struct centity_t* closestEnemyScrambler;
  /* 0x8276c */ int alliesFlagAway;
  /* 0x82770 */ int axisFlagAway;
  /* 0x82774 */ int resetWeaponStateFlag;
  /* 0x82778 */ int delayedShieldHitEventsCount;
  /* 0x8277c */ struct ShieldHitDelayedEvent delayedShieldHitEvents[2];
  /* 0x82784 */ int recentKilledByClientNum;
  /* 0x82788 */ int recentKilledByTime;
  /* 0x8278c */ int recentVictimClientNums[8];
  /* 0x827ac */ int recentVictimTimes[8];
  /* 0x827cc */ int recentVictimIndex;
  /* 0x827d0 */ BOOL talkingToEnemy;
  /* 0x827d1 */ char Padding_605[3];
  /* 0x827d4 */ struct cg_t::FogSettings serverFogSettings;
  /* 0x82818 */ BOOL forceInfraredMaterialsStreaming;
  /* 0x82819 */ BOOL sonarAttachmentOn;
  /* 0x8281a */ BOOL hudOutlineOn;
  /* 0x8281b */ BOOL sonarAttachmentFullscreenOn;
  /* 0x8281c */ struct DroppedWeaponDobjInfo droppedWeaponDobjInfo[64];
  /* 0x84c1c */ union vec3_t traceHitPos;
  /* 0x84c28 */ int traceHitDistance;
  /* 0x84c2c */ BOOL traceHitEnemy;
  /* 0x84c2d */ char Padding_606[3];
  /* 0x84c30 */ int rangeFinderStartTime;
  /* 0x84c34 */ BOOL rangeFinderTimerActive;
  /* 0x84c35 */ BOOL rangeFinderPerformTrace;
  /* 0x84c36 */ BOOL rangeFinderPerformFxVisTest;
  /* 0x84c37 */ char Padding_607;
  /* 0x84c38 */ int playerVehicleEntity;
  /* 0x84c3c */ BOOL clientCollisionLinked;
  /* 0x84c3d */ char Padding_608[3];
  /* 0x84c40 */ float altScopeFrac;
  /* 0x84c44 */ int lastAltScopeFracUpdateTime;
  /* 0x84c48 */ BOOL useAlternateAimAssistParams;
  /* 0x84c49 */ BOOL useFlashLight;
  /* 0x84c4a */ char Padding_609[2];
  /* 0x84c4c */ int empStartTime;
  /* 0x84c50 */ int lastEmpTime;
  /* 0x84c54 */ struct footstepEvent_t footstepEvents[16];
  /* 0x84d54 */ unsigned int numFootstepEvents;
  /* 0x84d58 */ int movers[64];
  /* 0x84e58 */ int moversCount;
  /* 0x84e5c */ struct bullet_hit_info_t hit_infos[12];
  /* 0x8503c */ int num_hit_infos;
  /* 0x85040 */ int hit_charge;
  /* 0x85044 */ BOOL hit_possible;
  /* 0x85045 */ BOOL bClientNeedsConnectCallback;
  /* 0x85046 */ char Padding_610[2];
  /* 0x85048 */ struct targetInfo_t targets[32];
  /* 0x853c8 */ struct snd_ambient_script_data soundAmbientData[32];
  /* 0x87348 */ int numAmbientDataStructs;
  /* 0x8734c */ struct snd_ambient_script_data* defaultAmbientRoom;
  /* 0x87350 */ struct snd_ambient_collider soundAmbientColliderData[64];
  /* 0x87e50 */ int currentAmbientRoom;
  /* 0x87e54 */ int currentAmbientPackage;
  /* 0x87e58 */ unsigned int ambientRoomOverride;
  /* 0x87e5c */ unsigned int ambientPackageOverride;
  /* 0x87e60 */ int shoutcastListenInBits;
  /* 0x87e64 */ union Weapon selectedClassWeapon;
  /* 0x87e68 */ int gumpTransitionState;
  /* 0x87e6c */ union vec3_t gumpTransitionColor;
  /* 0x87e78 */ float gumpTransitionAlpha;
  /* 0x87e7c */ int gumpTransitionTime;
  /* 0x87e80 */ int hudDpadShown;
  /* 0x87e84 */ int resetLuiNeeded;
  /* 0x87e88 */ int hostMigrationOccured;
  /* 0x87e8c */ int safeSpectatorCamTime;
  /* 0x87e90 */ union vec3_t safeSpectatorCamPos;
  /* 0x87e9c */ union vec3_t safeSpectatorCamOffset;
  /* 0x87ea8 */ enum team_t team;
  /* 0x87eac */ long __PADDING__[21];
}; /* size: 0x87f00 */

class std::_List_const_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> > >
{
}; /* size: 0x0004 */

struct WeaponAttachmentTableEntry
{
  /* 0x0000 */ const char* displayName;
  /* 0x0004 */ const char* referenceName;
  /* 0x0008 */ const char* pointName;
  /* 0x000c */ const char* imageName;
  /* 0x0010 */ const char* description;
  /* 0x0014 */ char allocationCost;
  /* 0x0015 */ char count;
  /* 0x0016 */ char unlockLvl;
  struct /* bitfield */
  {
    /* 0x0017 */ char unlockPLevel : 7; /* bit position: 0 */
    /* 0x0017 */ unsigned char isElite : 1; /* bit position: 7 */
  }; /* bitfield */
  /* 0x0018 */ int referenceHash;
}; /* size: 0x001c */

struct AttachmentTableEntry
{
  /* 0x0000 */ enum eAttachment attachmentIndex;
  /* 0x0004 */ enum eAttachmentPoint attachmentPointIndex;
  /* 0x0008 */ struct WeaponAttachmentTableEntry values;
  /* 0x0024 */ long Padding_611;
  /* 0x0028 */ unsigned __int64 compatibleAttachments;
  /* 0x0030 */ BOOL isValid;
  /* 0x0031 */ char __PADDING__[7];
}; /* size: 0x0038 */

struct AnimStateDef
{
  /* 0x0000 */ struct scr_animtree_t tree;
  /* 0x0004 */ unsigned short name;
  /* 0x0006 */ unsigned short size;
  /* 0x0008 */ struct AnimState* states;
}; /* size: 0x000c */

struct EmblemLayer
{
  /* 0x0000 */ int cost;
  /* 0x0004 */ int unlockLevel;
  /* 0x0008 */ int unlockPLevel;
}; /* size: 0x000c */

struct EmblemCategory
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ const char* description;
}; /* size: 0x0008 */

struct EmblemIconType
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ const char* description;
}; /* size: 0x0008 */

struct EmblemBGCategory
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ const char* description;
}; /* size: 0x0008 */

struct EmblemSet
{
  /* 0x0000 */ int colorCount;
  /* 0x0004 */ int layerCount;
  /* 0x0008 */ struct EmblemLayer layers[32];
  /* 0x0188 */ int categoryCount;
  /* 0x018c */ struct EmblemCategory categories[16];
  /* 0x020c */ int iconTypeCount;
  /* 0x0210 */ struct EmblemIconType iconTypes[16];
  /* 0x0290 */ int bgCategoryCount;
  /* 0x0294 */ struct EmblemBGCategory bgCategories[16];
  /* 0x0314 */ int iconCount;
  /* 0x0318 */ struct EmblemIcon icons[1024];
  /* 0x9318 */ int backgroundCount;
  /* 0x931c */ struct EmblemBackground backgrounds[645];
  /* 0xe3d4 */ int backgroundLookupCount;
  /* 0xe3d8 */ short backgroundLookup[574];
}; /* size: 0xe854 */

class phys_link_list<pulse_sum_angular>::iterator
{
  /* 0x0000 */ class pulse_sum_angular* m_ptr;
}; /* size: 0x0004 */

struct rope_frame_verts_t
{
  /* 0x0000 */ int num_verts;
  /* 0x0004 */ union vec3_t v[50];
}; /* size: 0x025c */

class phys_free_list<VehicleParameter>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<VehicleParameter>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<VehicleParameter>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

struct ComWorld
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int isInUse;
  /* 0x0008 */ unsigned int primaryLightCount;
  /* 0x000c */ struct ComPrimaryLight* primaryLights;
}; /* size: 0x0010 */

struct stbi_loader
{
  /* 0x0000 */ void* test_memory /* function */;
  /* 0x0004 */ void* load_from_memory /* function */;
  /* 0x0008 */ void* test_file /* function */;
  /* 0x000c */ void* load_from_file /* function */;
}; /* size: 0x0010 */

class phys_simple_allocator<gjk_polygon_cylinder_t>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

struct PathData
{
  /* 0x0000 */ unsigned int nodeCount;
  /* 0x0004 */ unsigned int originalNodeCount;
  /* 0x0008 */ struct pathnode_t* nodes;
  /* 0x000c */ struct pathbasenode_t* basenodes;
  /* 0x0010 */ int visBytes;
  /* 0x0014 */ unsigned char* pathVis;
  /* 0x0018 */ int smoothBytes;
  /* 0x001c */ unsigned char* smoothCache;
  /* 0x0020 */ int nodeTreeCount;
  /* 0x0024 */ struct pathnode_tree_t* nodeTree;
}; /* size: 0x0028 */

struct GameWorldSp
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ struct PathData path;
}; /* size: 0x002c */

class phys_free_list<rigid_body_constraint_custom_path>::T_internal
{
  /* 0x0000 */ long Padding_612[4];
  /* 0x0010 */ class rigid_body_constraint_custom_path m_data;
  /* 0x0090 */ int m_ptr_list_index;
}; /* size: 0x00a0 */

struct QoSStatus
{
  /* 0x0000 */ int startMS;
  /* 0x0004 */ int firstMS;
  /* 0x0008 */ int updateMS;
  /* 0x000c */ unsigned int prevNumSuccesses;
}; /* size: 0x0010 */

struct GfxShadowGeometry
{
  /* 0x0000 */ unsigned short surfaceCount;
  /* 0x0002 */ unsigned short smodelCount;
  /* 0x0004 */ unsigned short* sortedSurfIndex;
  /* 0x0008 */ unsigned short* smodelIndex;
}; /* size: 0x000c */

struct GlassPackedOutline
{
  /* 0x0000 */ unsigned char numVerts;
  /* 0x0001 */ BOOL onBottomEdge;
  /* 0x0002 */ unsigned short sortKey;
  /* 0x0004 */ unsigned int edgeFlags;
  /* 0x0008 */ float edgeRatio;
  /* 0x000c */ float area;
  /* 0x0010 */ struct GlassPackedOutline::PackedVert* verts;
}; /* size: 0x0014 */

struct GlassShard::Mesh
{
  /* 0x0000 */ union PackedUnitVec* normArray;
  /* 0x0004 */ unsigned char* indices;
  /* 0x0008 */ unsigned char numNorm;
  /* 0x0009 */ unsigned char numVerts;
  /* 0x000a */ unsigned char numVertsLow;
  /* 0x000b */ unsigned char numIndices;
  /* 0x000c */ unsigned char numIndicesLow;
  /* 0x000d */ char __PADDING__[3];
}; /* size: 0x0010 */

struct GlassShard
{
  union
  {
    struct
    {
      /* 0x0000 */ struct GlassShard* groupNext;
      /* 0x0004 */ unsigned char* memoryPtr;
      /* 0x0008 */ unsigned short memorySize;
      /* 0x000a */ unsigned short glassIndex;
      /* 0x000c */ struct GlassPackedOutline packedOutline;
      /* 0x0020 */ float thickness;
      /* 0x0024 */ float uvScale;
      /* 0x0028 */ union vec2_t uvOffset;
      /* 0x0030 */ float binormalSign;
      /* 0x0034 */ struct GlassShard::Mesh mesh;
      struct
      {
        /* 0x0044 */ unsigned int packedPos;
        /* 0x0048 */ float timeUntilAction;
        /* 0x004c */ union vec3_t axis[3];
        /* 0x0070 */ union vec3_t origin;
        /* 0x007c */ union vec3_t worldBBoxMin;
        /* 0x0088 */ union vec3_t worldBBoxMax;
        /* 0x0094 */ BOOL inGroupChange;
        /* 0x0095 */ char __PADDING__[3];
      } /* size: 0x0054 */ local;
      /* 0x0098 */ int physObjId;
      /* 0x009c */ struct GlassPhysics* glassPhysics;
      /* 0x00a0 */ struct ShardGroup* group;
      /* 0x00a4 */ BOOL remove;
      /* 0x00a5 */ BOOL delayedDrop;
    }; /* size: 0x00a6 */
    /* 0x0000 */ int removeReasonsCount[8];
    struct
    {
      /* 0x0000 */ int lastFreeMemorySize;
      /* 0x0004 */ long __PADDING__[41];
    }; /* size: 0x00a8 */
  }; /* size: 0x00a8 */
}; /* size: 0x00a8 */

struct FixedSizeAllocator<GlassShard>::Block
{
  /* 0x0000 */ struct FixedSizeAllocator<GlassShard>::Block* prev;
  /* 0x0004 */ struct FixedSizeAllocator<GlassShard>::Block* next;
  /* 0x0008 */ unsigned int magic;
  /* 0x000c */ struct GlassShard data;
}; /* size: 0x00b4 */

struct GfxSceneDef
{
  /* 0x0000 */ int time;
  /* 0x0004 */ float floatTime;
  /* 0x0008 */ union vec3_t viewOffset;
}; /* size: 0x0014 */

struct GfxViewRenderControl
{
  /* 0x0000 */ unsigned char mainSceneMSAA;
  /* 0x0001 */ unsigned char mainScene;
  /* 0x0002 */ unsigned char mainSceneFinal;
  /* 0x0003 */ unsigned char mainSceneSaved;
  /* 0x0004 */ unsigned char extraCamSamplerRenderTarget;
  /* 0x0005 */ unsigned char ui3d;
  /* 0x0006 */ char Padding_613[2];
  /* 0x0008 */ unsigned int renderingMode;
  /* 0x000c */ unsigned int additionalPostFX;
}; /* size: 0x0010 */

struct GfxUI3DBackend
{
  /* 0x0000 */ struct GfxViewport viewport[6];
  /* 0x0060 */ union vec4_t uvSetup[6];
  /* 0x00c0 */ int renderCmdCount[6];
  /* 0x00d8 */ int renderCmdThatDrawsSomethingCount[6];
  /* 0x00f0 */ int totalRenderCmds;
  /* 0x00f4 */ int totalRenderCmdsThatDrawsSomething;
  /* 0x00f8 */ float blurRadius;
}; /* size: 0x00fc */

struct GfxViewInfo
{
  /* 0x0000 */ struct GfxViewParms viewParms;
  /* 0x0150 */ struct GfxViewport sceneViewport;
  /* 0x0160 */ struct GfxViewport displayViewport;
  /* 0x0170 */ struct GfxViewport scissorViewport;
  /* 0x0180 */ struct GfxSceneDef sceneDef;
  /* 0x0194 */ enum ShadowType dynamicShadowType;
  /* 0x0198 */ enum LocalClientNum_t localClientNum;
  /* 0x019c */ int viewInfoIndex;
  /* 0x01a0 */ int isRenderingFullScreen;
  /* 0x01a4 */ int playerTeleported;
  /* 0x01a8 */ long Padding_614[2];
  /* 0x01b0 */ struct GfxLight visibleLights[4];
  /* 0x0730 */ int visibleLightCount;
  /* 0x0734 */ union vec4_t frustumPlanes[4];
  /* 0x0774 */ struct GfxLightScale charPrimaryLightScale;
  /* 0x077c */ struct GfxPostFxInfo* postFxInfo;
  /* 0x0780 */ const void* cmds;
  /* 0x0784 */ float sunVisibility;
  /* 0x0788 */ float adsZScale;
  /* 0x078c */ struct GfxQuadMeshData* fullSceneViewMesh;
  /* 0x0790 */ struct GfxDrawSurfListInfo* drawList;
  /* 0x0794 */ struct GfxCmdBufInput* input;
  /* 0x0798 */ unsigned char hdrRenderingMode;
  /* 0x0799 */ char Padding_615[3];
  /* 0x079c */ struct GfxViewRenderControl sceneComposition;
  /* 0x07ac */ struct GfxUI3DBackend rbUI3D;
  /* 0x08a8 */ struct GfxQRCodeBackend rbQRCode;
  /* 0x0968 */ BOOL isExtraCamera;
  /* 0x0969 */ char Padding_616[3];
  /* 0x096c */ int noLodCullOut;
  /* 0x0970 */ float lodScaleRigid;
  /* 0x0974 */ float lodScaleSkinned;
  /* 0x0978 */ float postEmissiveBrightening;
  /* 0x097c */ long Padding_617;
  /* 0x0980 */ struct GfxViewParms weaponViewParms;
  /* 0x0ad0 */ BOOL sonarRenderTargetInUse;
  /* 0x0ad1 */ char Padding_618[3];
  /* 0x0ad4 */ float sonarBlur;
  /* 0x0ad8 */ long Padding_619[2];
  /* 0x0ae0 */ struct GfxViewParms sonarViewParms;
  /* 0x0c30 */ BOOL sonarUseThermalMaterial;
  /* 0x0c31 */ BOOL sonarOverrideBlend;
  /* 0x0c32 */ BOOL drawInfrared;
  /* 0x0c33 */ BOOL drawPostBlur;
  /* 0x0c34 */ BOOL drawWaypointsPostBloom;
  /* 0x0c35 */ char Padding_620[3];
  /* 0x0c38 */ int splitscreenBlurEdges;
  /* 0x0c3c */ BOOL needResolveOpaque;
  /* 0x0c3d */ char Padding_621;
  /* 0x0c3e */ short lutScriptIndex;
  /* 0x0c40 */ BOOL drawDarkness;
  /* 0x0c41 */ char __PADDING__[15];
}; /* size: 0x0c50 */

struct SndAssetBankEntry
{
  /* 0x0000 */ unsigned int id;
  /* 0x0004 */ unsigned int size;
  /* 0x0008 */ unsigned int offset;
  /* 0x000c */ unsigned int frameCount;
  /* 0x0010 */ unsigned char frameRateIndex;
  /* 0x0011 */ unsigned char channelCount;
  /* 0x0012 */ unsigned char looping;
  /* 0x0013 */ unsigned char format;
}; /* size: 0x0014 */

struct controller_info_t
{
  /* 0x0000 */ union vec3_t angles[6];
  /* 0x0048 */ union vec3_t tag_origin_angles;
  /* 0x0054 */ union vec3_t tag_origin_offset;
}; /* size: 0x0060 */

struct VehicleHandler
{
  /* 0x0000 */ void* vehicle /* function */;
  /* 0x0004 */ void* wheel /* function */;
  /* 0x0008 */ void* proximityCache /* function */;
  /* 0x000c */ void* collmap /* function */;
}; /* size: 0x0010 */

struct TxaaCtxDX
{
  /* 0x0000 */ unsigned int pad[256];
}; /* size: 0x0400 */

struct DxCmdBuf
{
  /* 0x0000 */ int isInUse[33];
  /* 0x0084 */ struct ID3D11DeviceContext* context[33];
  /* 0x0108 */ struct ID3D11CommandList* list[33];
}; /* size: 0x018c */

struct DxGlobals
{
  /* 0x0000 */ struct HINSTANCE__* hinst;
  /* 0x0004 */ struct ID3D11Device* device;
  /* 0x0008 */ struct ID3D11DeviceContext* context;
  /* 0x000c */ struct ID3D11Buffer* constBuffer[4];
  /* 0x001c */ unsigned long vendorId;
  /* 0x0020 */ BOOL adapterNativeIsValid;
  /* 0x0021 */ char Padding_622[3];
  /* 0x0024 */ int adapterNativeWidth;
  /* 0x0028 */ int adapterNativeHeight;
  /* 0x002c */ int adapterFullscreenWidth;
  /* 0x0030 */ int adapterFullscreenHeight;
  /* 0x0034 */ BOOL nvInitialized;
  /* 0x0035 */ BOOL nvStereoActivated;
  /* 0x0036 */ char Padding_623[2];
  /* 0x0038 */ void* nvStereoHandle;
  /* 0x003c */ long Padding_624;
  /* 0x0040 */ struct TxaaCtxDX txaaCtx;
  /* 0x0440 */ int adapterIndex;
  /* 0x0444 */ BOOL vidRestart;
  /* 0x0445 */ BOOL needResizeBuffers;
  /* 0x0446 */ BOOL doResizeBuffers;
  /* 0x0447 */ BOOL ignoreResize;
  /* 0x0448 */ BOOL needsShaderWarming;
  /* 0x0449 */ char Padding_625[3];
  /* 0x044c */ int lastMaterialWarmed;
  /* 0x0450 */ enum DXGI_FORMAT depthStencilFormat;
  /* 0x0454 */ struct DxCmdBuf cmdBuf[4];
  /* 0x0a84 */ unsigned int monitorCount;
  /* 0x0a88 */ unsigned int displayModeCount[8];
  /* 0x0aa8 */ struct DXGI_MODE_DESC displayModes[512][8];
  /* 0x1caa8 */ const char* resolutionNameTable[513];
  /* 0x1d2ac */ char modeText[10240];
  /* 0x1faac */ const char* monitorResolutionNameTable[513][8];
  /* 0x23acc */ char monitorModeText[81920];
  /* 0x37acc */ struct ID3D11Query* fencePool[8];
  /* 0x37aec */ unsigned int nextFence;
  /* 0x37af0 */ int gpuCount;
  /* 0x37af4 */ void* resolutionCallback /* function */;
  /* 0x37af8 */ unsigned int multiSampleType;
  /* 0x37afc */ unsigned long multiSampleQuality;
  /* 0x37b00 */ unsigned short sunShadowPartition;
  /* 0x37b02 */ unsigned short spotShadowPartition;
  /* 0x37b04 */ struct ID3D11DepthStencilView* singleSampleDepthStencilSurface;
  /* 0x37b08 */ int targetWindowIndex;
  /* 0x37b0c */ int windowCount;
  /* 0x37b10 */ struct GfxWindowTarget windows[1];
  /* 0x37b24 */ struct IDXGISwapChain* swapChain;
  /* 0x37b28 */ struct ID3D11Texture2D* backBuffer;
  /* 0x37b2c */ struct ID3D11Query* flushGpuQuery;
  /* 0x37b30 */ int linearMippedAnisotropy;
  /* 0x37b34 */ int anisotropyFor2x;
  /* 0x37b38 */ int anisotropyFor4x;
  /* 0x37b3c */ int mipFilterMode;
  /* 0x37b40 */ unsigned long mipBias;
  /* 0x37b44 */ long __PADDING__[15];
}; /* size: 0x37b80 */

struct SndPatch
{
  /* 0x0000 */ char* name;
  /* 0x0004 */ unsigned int elementCount;
  /* 0x0008 */ unsigned int* elements;
}; /* size: 0x000c */

class phys_free_list<user_rigid_body>::T_internal
{
  /* 0x0000 */ long Padding_626[4];
  /* 0x0010 */ class user_rigid_body m_data;
  /* 0x01c0 */ int m_ptr_list_index;
}; /* size: 0x01d0 */

struct cNode_t
{
  /* 0x0000 */ struct cplane_s* plane;
  /* 0x0004 */ short children[2];
}; /* size: 0x0008 */

class std::numeric_limits<short>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct VertUsage
{
  /* 0x0000 */ int index;
  /* 0x0004 */ struct VertUsage* next;
}; /* size: 0x0008 */

struct shellshock_parms_t
{
  struct
  {
    /* 0x0000 */ int blurredFadeTime;
    /* 0x0004 */ int blurredEffectTime;
    /* 0x0008 */ int flashWhiteFadeTime;
    /* 0x000c */ int flashShotFadeTime;
    /* 0x0010 */ enum ShockViewTypes type;
  } /* size: 0x0014 */ screenBlend;
  struct
  {
    /* 0x0014 */ int fadeTime;
    /* 0x0018 */ float kickRate;
    /* 0x001c */ float kickRadius;
  } /* size: 0x000c */ view;
  struct
  {
    /* 0x0020 */ BOOL affect;
    /* 0x0021 */ char loop[64];
    /* 0x0061 */ char loopSilent[64];
    /* 0x00a1 */ char end[64];
    /* 0x00e1 */ char endAbort[64];
    /* 0x0101 */ char Padding_627[3];
    /* 0x0124 */ int fadeInTime;
    /* 0x0128 */ int fadeOutTime;
    /* 0x012c */ float drylevel;
    /* 0x0130 */ float wetlevel;
    /* 0x0134 */ char roomtype[64];
    /* 0x0174 */ int modEndDelay;
    /* 0x0178 */ int loopFadeTime;
    /* 0x017c */ int loopEndDelay;
    /* 0x0180 */ char snapshot[64];
  } /* size: 0x01a0 */ sound;
  struct
  {
    /* 0x01c0 */ BOOL affect;
    /* 0x0001 */ char Padding_628[3];
    /* 0x01c4 */ int fadeTime;
    /* 0x01c8 */ float mouseSensitivity;
    /* 0x01cc */ float maxPitchSpeed;
    /* 0x01d0 */ float maxYawSpeed;
  } /* size: 0x0014 */ lookControl;
  struct
  {
    /* 0x01d4 */ float scale;
  } /* size: 0x0004 */ movement;
  struct
  {
    /* 0x01d8 */ BOOL affect;
  } /* size: 0x0001 */ animation;
  /* 0x01d9 */ char Padding_629[3];
  struct
  {
    /* 0x01dc */ char name[32];
    /* 0x01fc */ int inTime;
    /* 0x0200 */ int outTime;
  } /* size: 0x0028 */ visionSet;
}; /* size: 0x0204 */

struct $_TypeDescriptor$_extraBytes_27
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[27];
}; /* size: 0x0023 */

class phys_link_list<gjk_trace_output_t>
{
  /* 0x0000 */ struct gjk_trace_output_t* m_first;
  /* 0x0004 */ struct gjk_trace_output_t** m_last_next_ptr;
  /* 0x0008 */ int m_alloc_count;
}; /* size: 0x000c */

struct WeaponComponentList
{
  /* 0x0000 */ int numComponents;
  /* 0x0004 */ int numAttachments;
  /* 0x0008 */ struct WeaponComponent components[8];
}; /* size: 0x0268 */

struct Image_MemUsage
{
  /* 0x0000 */ int total;
  /* 0x0004 */ int lightmap;
  /* 0x0008 */ int minspec;
}; /* size: 0x000c */

struct viewLerpWaypoint_s
{
  /* 0x0000 */ int iFrac;
  /* 0x0004 */ float fViewPercent;
}; /* size: 0x0008 */

class compare_weapon_component_sort
{
}; /* size: 0x0001 */

struct player_push_slide_move_input_t
{
  /* 0x0000 */ long Padding_630[11];
  /* 0x002c */ union vec3_t velocity_;
}; /* size: 0x0038 */

struct bgsAnim_s
{
  /* 0x0000 */ struct animScriptData_t animScriptData;
  struct
  {
    /* 0x92f80 */ struct scr_animtree_t tree;
    /* 0x92f84 */ struct scr_anim_s body;
    /* 0x92f88 */ struct scr_anim_s main;
    /* 0x92f8c */ struct scr_anim_s torso;
    /* 0x92f90 */ struct scr_anim_s legs;
  } /* size: 0x0014 */ generic_human;
  struct
  {
    /* 0x92f94 */ struct scr_animtree_t tree;
    /* 0x92f98 */ struct scr_anim_s main;
  } /* size: 0x0008 */ generic_dog;
  /* 0x92f9c */ unsigned int done_notify;
}; /* size: 0x92fa0 */

struct gscProfileInfo_t
{
  /* 0x0000 */ unsigned long inclusive_time;
  /* 0x0004 */ unsigned long exclusive_time;
  /* 0x0008 */ unsigned long hit_count;
}; /* size: 0x000c */

struct huffman
{
  /* 0x0000 */ unsigned char fast[512];
  /* 0x0200 */ unsigned short code[256];
  /* 0x0400 */ unsigned char values[256];
  /* 0x0500 */ unsigned char size[257];
  /* 0x0601 */ char Padding_631[3];
  /* 0x0604 */ unsigned int maxcode[18];
  /* 0x064c */ int delta[17];
}; /* size: 0x0690 */

struct bgsClientFields_s
{
  /* 0x0000 */ int bRegistrationFinished;
  /* 0x0004 */ struct clientFieldSet_s clientFieldSets[12];
  /* 0x1e94 */ unsigned int fieldHash;
  /* 0x1e98 */ unsigned int highestVersionUsed;
  /* 0x1e9c */ struct bgsClientFieldCallbacks_s* pPendingCallbacks;
}; /* size: 0x1ea0 */

struct DynEntityServer
{
  /* 0x0000 */ unsigned short flags;
  /* 0x0002 */ char Padding_632[2];
  /* 0x0004 */ int health;
}; /* size: 0x0008 */

struct IPakIndexEntry
{
  /* 0x0000 */ unsigned __int64 key;
  /* 0x0008 */ unsigned int offset;
  /* 0x000c */ unsigned int size;
}; /* size: 0x0010 */

struct reliableMsg
{
  /* 0x0000 */ BOOL active;
  /* 0x0001 */ unsigned char sequenceNum;
  /* 0x0002 */ char Padding_633[2];
  /* 0x0004 */ struct msg_t msg;
  /* 0x0034 */ enum netsrc_t fromLocalNetID;
}; /* size: 0x0038 */

struct reliableClient
{
  /* 0x0000 */ struct netadr_t addr;
  /* 0x0014 */ int lastSendTime;
  /* 0x0018 */ int firstSendTime;
  /* 0x001c */ unsigned char nextSequence;
  /* 0x001d */ char Padding_634[3];
  /* 0x0020 */ int bufferUsed;
  /* 0x0024 */ int bytesAckd;
  /* 0x0028 */ unsigned char reliableBuf[1000];
  /* 0x0410 */ struct reliableMsg msgs[20];
}; /* size: 0x0870 */

class pulse_sum_contact_point
{
  /* 0x0000 */ class phys_vec3 m_b1_r;
  /* 0x0010 */ class phys_vec3 m_b2_r;
  /* 0x0020 */ class phys_vec3 m_b1_ap_n;
  /* 0x0030 */ class phys_vec3 m_b2_ap_n;
  /* 0x0040 */ class phys_vec3 m_b1_ap_f1;
  /* 0x0050 */ class phys_vec3 m_b2_ap_f1;
  /* 0x0060 */ class phys_vec3 m_b1_ap_f2;
  /* 0x0070 */ class phys_vec3 m_b2_ap_f2;
  /* 0x0080 */ class phys_vec3 m_pulse_sum;
  /* 0x0090 */ class phys_vec3 m_right_side;
  /* 0x00a0 */ float m_big_dirt;
  /* 0x00a4 */ float m_denom_xx;
  /* 0x00a8 */ float m_denom_yy;
  /* 0x00ac */ float m_denom_zz;
  /* 0x00b0 */ float m_denom_xy;
  /* 0x00b4 */ float m_denom_xz;
  /* 0x00b8 */ float m_inv_yy;
  /* 0x00bc */ float m_inv_yz;
  /* 0x00c0 */ float m_inv_zz;
}; /* size: 0x00d0 */

struct stbi_gif_lzw_struct
{
  /* 0x0000 */ short prefix;
  /* 0x0002 */ unsigned char first;
  /* 0x0003 */ unsigned char suffix;
}; /* size: 0x0004 */

struct par_t
{
  /* 0x0000 */ union vec3_t p;
  /* 0x000c */ union vec3_t p0;
  /* 0x0018 */ union vec3_t p_prev;
  /* 0x0024 */ int flags;
}; /* size: 0x0028 */

struct DObjModel_s
{
  /* 0x0000 */ struct XModel* model;
  /* 0x0004 */ unsigned short boneName;
  /* 0x0006 */ unsigned short parentModel;
  /* 0x0008 */ BOOL ignoreCollision;
  /* 0x0009 */ char Padding_635[3];
  /* 0x000c */ union vec3_t trans;
  /* 0x0018 */ union vec3_t rot;
}; /* size: 0x0024 */

class std::hash<long double>
{
}; /* size: 0x0001 */

struct DWRITE_UNDERLINE
{
  /* 0x0000 */ float width;
  /* 0x0004 */ float thickness;
  /* 0x0008 */ float offset;
  /* 0x000c */ float runHeight;
  /* 0x0010 */ enum DWRITE_READING_DIRECTION readingDirection;
  /* 0x0014 */ enum DWRITE_FLOW_DIRECTION flowDirection;
  /* 0x0018 */ const wchar_t* localeName;
  /* 0x001c */ enum DWRITE_MEASURING_MODE measuringMode;
}; /* size: 0x0020 */

typedef struct _DM_CMDCONT
{
  /* 0x0000 */ void* HandlingFunction /* function */;
  /* 0x0004 */ unsigned long DataSize;
  /* 0x0008 */ void* Buffer;
  /* 0x000c */ unsigned long BufferSize;
  /* 0x0010 */ void* CustomData;
  /* 0x0014 */ unsigned long BytesRemaining;
} DM_CMDCONT, *PDM_CMDCONT; /* size: 0x0018 */

class std::out_of_range
{
}; /* size: 0x000c */

struct $_TypeDescriptor$_extraBytes_23
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[23];
}; /* size: 0x001f */

class LinkedList<FixedSizeAllocator<ShardGroup>::Block *>
{
  /* 0x0000 */ struct FixedSizeAllocator<ShardGroup>::Block* head;
}; /* size: 0x0004 */

class FixedSizeAllocator<ShardGroup>
{
  /* 0x0000 */ void* memory;
  /* 0x0004 */ class LinkedList<FixedSizeAllocator<ShardGroup>::Block *> freeList;
  /* 0x0008 */ class LinkedList<FixedSizeAllocator<ShardGroup>::Block *> usedList;
  /* 0x000c */ unsigned int size;
  /* 0x0010 */ unsigned int used;
  /* 0x0014 */ unsigned int maxUsed;
  /* 0x0018 */ unsigned int magic;
}; /* size: 0x001c */

struct $_TypeDescriptor$_extraBytes_22
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[22];
}; /* size: 0x001e */

struct std::_Iterator_base12
{
  /* 0x0000 */ struct std::_Container_proxy* _Myproxy;
  /* 0x0004 */ struct std::_Iterator_base12* _Mynextiter;
}; /* size: 0x0008 */

class bdUCDAccountID
{
  /* 0x0000 */ long Padding_636[2];
  /* 0x0008 */ unsigned __int64 m_ucdID;
}; /* size: 0x0010 */

struct GlassLock
{
  /* 0x0000 */ volatile long lock;
}; /* size: 0x0004 */

struct IDirectInputDeviceA
{
}; /* size: 0x0004 */

class bdTeamProfile
{
  /* 0x0000 */ long Padding_637[2];
  /* 0x0008 */ unsigned __int64 m_teamID;
}; /* size: 0x0010 */

class bdUCDAccountStatus
{
  /* 0x0000 */ long Padding_638;
  /* 0x0004 */ BOOL m_hasUCDAccount;
  /* 0x0005 */ BOOL m_marketingOptIn;
  /* 0x0006 */ BOOL m_emailVerified;
  /* 0x0007 */ BOOL m_isEliteMember;
  /* 0x0008 */ BOOL m_isEliteFounder;
  /* 0x0009 */ char Padding_639[3];
  /* 0x000c */ int m_isElitePaid;
}; /* size: 0x0010 */

class SmallAllocatorTemplate<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node>
{
  /* 0x0000 */ class SmallAllocator& alloc;
}; /* size: 0x0004 */

struct phys_convex_hull::ch_edge
{
  /* 0x0000 */ class phys_vec3* m_verts[2];
}; /* size: 0x0008 */

struct std::char_traits<char>
{
}; /* size: 0x0001 */

struct DSkel
{
  /* 0x0000 */ struct DSkelPartBits partBits;
  /* 0x003c */ int timeStamp;
  union
  {
    /* 0x0040 */ struct DObjAnimMat* mat;
    /* 0x0040 */ struct DObjAnimMat* localMat;
  }; /* size: 0x0004 */
}; /* size: 0x0044 */

struct DObj
{
  union
  {
    /* 0x0000 */ struct XAnimTree_s* localTree;
    /* 0x0000 */ struct XAnimTree_s* tree;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned short duplicateParts;
  /* 0x0006 */ unsigned short entnum;
  /* 0x0008 */ unsigned char duplicatePartsSize;
  /* 0x0009 */ unsigned char numModels;
  /* 0x000a */ unsigned char numBones;
  /* 0x000b */ char Padding_640;
  /* 0x000c */ unsigned int ignoreCollision;
  /* 0x0010 */ volatile long locked;
  /* 0x0014 */ struct DSkel skel;
  /* 0x0058 */ float radius;
  /* 0x005c */ unsigned int hidePartBits[5];
  /* 0x0070 */ char localClientIndex;
  /* 0x0071 */ unsigned char flags;
  /* 0x0072 */ unsigned char numRootAdjustMats;
  /* 0x0073 */ char Padding_641;
  /* 0x0074 */ unsigned char* ikState;
  union
  {
    /* 0x0078 */ struct XModel** localModels;
    /* 0x0078 */ struct XModel** models;
  }; /* size: 0x0004 */
}; /* size: 0x007c */

struct veh_gjk_slide_move_input_t
{
  /* 0x0000 */ long Padding_642[11];
  /* 0x002c */ struct slide_move_params_t* m_params;
}; /* size: 0x0030 */

struct IPakHeader
{
  /* 0x0000 */ unsigned int magic;
  /* 0x0004 */ unsigned int version;
  /* 0x0008 */ unsigned int size;
  /* 0x000c */ unsigned int sectionCount;
}; /* size: 0x0010 */

struct TriggerModel
{
  /* 0x0000 */ int contents;
  /* 0x0004 */ unsigned short hullCount;
  /* 0x0006 */ unsigned short firstHull;
}; /* size: 0x0008 */

typedef struct _MINIDUMP_EXCEPTION_INFORMATION
{
  /* 0x0000 */ unsigned long ThreadId;
  /* 0x0004 */ struct _EXCEPTION_POINTERS* ExceptionPointers;
  /* 0x0008 */ int ClientPointers;
} MINIDUMP_EXCEPTION_INFORMATION, *PMINIDUMP_EXCEPTION_INFORMATION; /* size: 0x000c */

struct AudioState
{
  /* 0x0000 */ unsigned char AUDC;
  /* 0x0001 */ unsigned char AUDV;
  /* 0x0002 */ unsigned char AUDF;
  /* 0x0003 */ unsigned char output;
  /* 0x0004 */ int dividerCount;
  /* 0x0008 */ int dividerMax;
  /* 0x000c */ unsigned int poly_4;
  /* 0x0010 */ unsigned int poly_5;
  /* 0x0014 */ unsigned int poly_9;
}; /* size: 0x0018 */

struct GfxPointVertex
{
  /* 0x0000 */ union vec3_t xyz;
  /* 0x000c */ unsigned char color[4];
}; /* size: 0x0010 */

struct TriggerSlab
{
  /* 0x0000 */ union vec3_t dir;
  /* 0x000c */ float midPoint;
  /* 0x0010 */ float halfSize;
}; /* size: 0x0014 */

class std::domain_error
{
}; /* size: 0x000c */

struct tagPALETTEENTRY
{
  /* 0x0000 */ unsigned char peRed;
  /* 0x0001 */ unsigned char peGreen;
  /* 0x0002 */ unsigned char peBlue;
  /* 0x0003 */ unsigned char peFlags;
}; /* size: 0x0004 */

struct GfxPostFxInfo
{
  /* 0x0000 */ struct GfxDepthOfField dof;
  /* 0x0024 */ struct GfxFilm film;
  /* 0x0134 */ struct GfxCompositeFx flameFx;
  /* 0x0160 */ struct GfxReviveFx reviveFx;
  /* 0x0198 */ struct GfxCompositeFx waterSheetingFx;
  /* 0x01c4 */ struct GfxDoubleVision doubleVision;
  /* 0x01e0 */ struct GfxGenericFilter genericFilter;
  /* 0x0ca0 */ struct GfxPoison poisonFx;
  /* 0x0ca8 */ struct GfxCompositeFx electrifiedFx;
  /* 0x0cd4 */ struct GfxCompositeFx transportedFx;
  /* 0x0d00 */ struct GfxSaveScreenFx saveScreenFx;
  /* 0x0d54 */ struct GfxBloom bloom;
  /* 0x0de4 */ float bloomExpansionXpos;
  /* 0x0de8 */ float bloomExpansionYpos;
  /* 0x0dec */ float blurRadius;
  /* 0x0df0 */ float exposureValue;
  /* 0x0df4 */ float exposureRemap;
  /* 0x0df8 */ BOOL useColorControl;
  /* 0x0df9 */ char Padding_643[3];
  /* 0x0dfc */ float colorSaturation;
  /* 0x0e00 */ float colorTemp;
  /* 0x0e04 */ float colorHue;
  /* 0x0e08 */ union vec3_t colorScale;
}; /* size: 0x0e14 */

struct tagIPHDR
{
  /* 0x0000 */ unsigned char VIHL;
  /* 0x0001 */ unsigned char TOS;
  /* 0x0002 */ short TotLen;
  /* 0x0004 */ short ID;
  /* 0x0006 */ short FlagOff;
  /* 0x0008 */ unsigned char TTL;
  /* 0x0009 */ unsigned char Protocol;
  /* 0x000a */ unsigned short Checksum;
  /* 0x000c */ struct in_addr iaSrc;
  /* 0x0010 */ struct in_addr iaDst;
}; /* size: 0x0014 */

struct tagICMPHDR
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Code;
  /* 0x0002 */ unsigned short Checksum;
  /* 0x0004 */ unsigned short ID;
  /* 0x0006 */ unsigned short Seq;
  /* 0x0008 */ char Data;
}; /* size: 0x0009 */

struct tagECHOREQUEST
{
  /* 0x0000 */ struct tagICMPHDR icmpHdr;
  /* 0x0009 */ unsigned long dwTime;
  /* 0x000d */ char cData[32];
}; /* size: 0x002d */

struct tagECHOREPLY
{
  /* 0x0000 */ struct tagIPHDR ipHdr;
  /* 0x0014 */ struct tagECHOREQUEST echoRequest;
  /* 0x0041 */ char cFiller[256];
}; /* size: 0x0141 */

class std::hash<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
{
}; /* size: 0x0001 */

class std::range_error
{
}; /* size: 0x000c */

struct sockaddr_storage
{
  /* 0x0000 */ unsigned short ss_family;
  /* 0x0002 */ char __ss_pad1[6];
  /* 0x0008 */ __int64 __ss_align;
  /* 0x0010 */ char __ss_pad2[112];
}; /* size: 0x0080 */

class std::overflow_error
{
}; /* size: 0x000c */

struct fileshareSummary_t
{
  /* 0x0000 */ unsigned __int64 fileID;
  /* 0x0008 */ int size;
  /* 0x000c */ enum fileShareLocation location;
  /* 0x0010 */ enum ControllerIndex_t controller;
  /* 0x0014 */ int nextFetchTime;
  /* 0x0018 */ BOOL isDirty;
  /* 0x0019 */ char Padding_644[3];
  /* 0x001c */ void* dataValidationCallback /* function */;
}; /* size: 0x0020 */

struct TempOutlineTemplate<64>
{
  /* 0x0000 */ long Padding_645[4];
  /* 0x0010 */ struct GlassOutline::Vertex v[64];
}; /* size: 0x0610 */

struct D2D_RECT_F
{
  /* 0x0000 */ float left;
  /* 0x0004 */ float top;
  /* 0x0008 */ float right;
  /* 0x000c */ float bottom;
}; /* size: 0x0010 */

struct D2D_MATRIX_3X2_F
{
  /* 0x0000 */ float _11;
  /* 0x0004 */ float _12;
  /* 0x0008 */ float _21;
  /* 0x000c */ float _22;
  /* 0x0010 */ float _31;
  /* 0x0014 */ float _32;
}; /* size: 0x0018 */

struct D2D1_LAYER_PARAMETERS
{
  /* 0x0000 */ struct D2D_RECT_F contentBounds;
  /* 0x0010 */ struct ID2D1Geometry* geometricMask;
  /* 0x0014 */ enum D2D1_ANTIALIAS_MODE maskAntialiasMode;
  /* 0x0018 */ struct D2D_MATRIX_3X2_F maskTransform;
  /* 0x0030 */ float opacity;
  /* 0x0034 */ struct ID2D1Brush* opacityBrush;
  /* 0x0038 */ enum D2D1_LAYER_OPTIONS layerOptions;
}; /* size: 0x003c */

struct fshCacheRatingDetails_t
{
  /* 0x0000 */ unsigned __int64 fileID;
  /* 0x0008 */ class bdVoteRankStatsInfo rating;
  /* 0x00d0 */ enum fileShareLocation location;
  /* 0x00d4 */ long __PADDING__[1];
}; /* size: 0x00d8 */

struct WinMouseVars_t
{
  /* 0x0000 */ int oldButtonState;
  /* 0x0004 */ struct tagPOINT oldPos;
  /* 0x000c */ BOOL mouseActive;
  /* 0x000d */ BOOL mouseInitialized;
  /* 0x000e */ char __PADDING__[2];
}; /* size: 0x0010 */

class bdCypherAES
{
  /* 0x0000 */ long Padding_646;
  /* 0x0004 */ struct symmetric_CBC m_cbc;
}; /* size: 0x10d4 */

class phys_free_list<PhysObjUserData>::T_internal
{
  /* 0x0000 */ long Padding_647[4];
  /* 0x0010 */ struct PhysObjUserData m_data;
  /* 0x0150 */ int m_ptr_list_index;
}; /* size: 0x0160 */

struct VariantWind
{
  /* 0x0000 */ union vec3_t wind_vector;
  /* 0x000c */ union vec3_t rustle_angular_frequency;
  /* 0x0018 */ union vec3_t rustle_amplitude;
  /* 0x0024 */ float blade_acceleration;
  /* 0x0028 */ float blade_velocity;
  /* 0x002c */ int reset_timer;
  /* 0x0030 */ int gust_start;
  /* 0x0034 */ int gust_dur;
}; /* size: 0x0038 */

class phys_static_array<phys_convex_hull::ch_triangle,128>::iterator
{
  /* 0x0000 */ struct phys_convex_hull::ch_triangle* m_ptr;
}; /* size: 0x0004 */

class phys_link_list_base<pulse_sum_point>
{
  /* 0x0000 */ class pulse_sum_point* m_next_link;
}; /* size: 0x0004 */

struct WeaponFullDef
{
  /* 0x0000 */ struct WeaponVariantDef weapVariantDef;
  /* 0x02cc */ struct WeaponDef weapDef;
  /* 0x0c5c */ struct WeaponAttachment* attachments[63];
  /* 0x0d58 */ struct WeaponAttachmentUnique* attachmentUniques[95];
  /* 0x0ed4 */ struct XModel* gunXModel[16];
  /* 0x0f14 */ const char* szXAnims[88];
  /* 0x1074 */ unsigned short hideTags[32];
  /* 0x10b4 */ unsigned short notetrackSoundMapKeys[20];
  /* 0x10dc */ unsigned short notetrackSoundMapValues[20];
  /* 0x1104 */ struct XModel* worldModel[16];
  /* 0x1144 */ struct XModel* attachViewModel[8];
  /* 0x1164 */ struct XModel* attachWorldModel[8];
  /* 0x1184 */ const char* attachViewModelTag[8];
  /* 0x11a4 */ const char* attachWorldModelTag[8];
  /* 0x11c4 */ float parallelBounce[32];
  /* 0x1244 */ float perpendicularBounce[32];
  /* 0x12c4 */ float locationDamageMultipliers[21];
  /* 0x1318 */ char weaponCamo[64];
}; /* size: 0x1358 */

struct buttonHoldCmd
{
  /* 0x0000 */ BOOL active;
  /* 0x0001 */ char Padding_648[3];
  /* 0x0004 */ int key;
  /* 0x0008 */ int activatedTime;
}; /* size: 0x000c */

struct MantleResults
{
  /* 0x0000 */ union vec3_t dir;
  /* 0x000c */ union vec3_t startPos;
  /* 0x0018 */ union vec3_t ledgePos;
  /* 0x0024 */ union vec3_t endPos;
  /* 0x0030 */ int flags;
  /* 0x0034 */ int entityNum;
  /* 0x0038 */ int duration;
}; /* size: 0x003c */

struct fileshareData_t
{
  /* 0x0000 */ BOOL isDirty;
  /* 0x0001 */ char Padding_649[7];
  /* 0x0008 */ unsigned __int64 xuid;
  /* 0x0010 */ int groupRow;
  /* 0x0014 */ enum fileshareState_e state;
  /* 0x0018 */ int retryCount;
  /* 0x001c */ int nextFetchTime;
  /* 0x0020 */ enum ControllerIndex_t controller;
  /* 0x0024 */ long Padding_650;
  /* 0x0028 */ class bdFileMetaData descriptors[200];
  /* 0x7ef68 */ int numDescriptors;
  /* 0x7ef6c */ int fetchOffset;
  /* 0x7ef70 */ int totalDescriptors;
  /* 0x7ef74 */ int numManagedDescriptors;
  /* 0x7ef78 */ struct fileshareStats_t stats[2];
  /* 0xde488 */ int viewOffset;
  /* 0xde48c */ int voteOffset;
  /* 0xde490 */ class bdFileMetaData* byTime[200];
  /* 0xde7b0 */ class bdFileMetaData* byType[200];
}; /* size: 0xdead0 */

struct demoKeyFrame
{
  /* 0x0000 */ int keyframeBufferStart;
  /* 0x0004 */ int demoFileMemoryBlockStart;
  /* 0x0008 */ int keyframeSnapshotTime;
  /* 0x000c */ int keyframeClipServerTime;
  /* 0x0010 */ int firstCmdSequence;
  /* 0x0014 */ int size;
  /* 0x0018 */ struct msg_bookmark_t msgBookmark;
}; /* size: 0x0030 */

struct demoDollyCameraMarker
{
  /* 0x0000 */ int time;
  /* 0x0004 */ unsigned char glowFXValue;
  /* 0x0005 */ char Padding_651[3];
  /* 0x0008 */ union vec3_t origin;
  /* 0x0014 */ union vec3_t forward;
  /* 0x0020 */ enum demoDollyCameraTimeScaleMode timeScaleMode;
  /* 0x0024 */ float timeScaleValue;
  /* 0x0028 */ unsigned int cameraHeadFxHandle;
  /* 0x002c */ unsigned int cameraGlowFxHandle;
  /* 0x0030 */ struct demoKeyFrame keyFrame;
}; /* size: 0x0060 */

struct demoHighlightReelInformationDefine
{
  /* 0x0000 */ enum demoHighlightReelInformationType type;
  /* 0x0004 */ enum demoBookmarkType bookmarkType;
  /* 0x0008 */ unsigned short eType;
  /* 0x000a */ char Padding_652[2];
  /* 0x000c */ int secondsBefore;
  /* 0x0010 */ int secondsAfter;
  /* 0x0014 */ int thumbnailCaptureTimeDelta;
  /* 0x0018 */ int priorityWeightPerEvent;
  /* 0x001c */ int priorityStackFactor;
  /* 0x0020 */ BOOL boostPriorityOnly;
  /* 0x0021 */ BOOL killcamAvailable;
  /* 0x0022 */ char __PADDING__[2];
}; /* size: 0x0024 */

struct demoHighlightReelStarLevels
{
  /* 0x0000 */ float starLevel;
  /* 0x0004 */ int minScore;
}; /* size: 0x0008 */

struct demoHighlightReelTimeline
{
  /* 0x0000 */ enum demoHighlightReelInformationType infoType;
  /* 0x0004 */ int startTime;
  /* 0x0008 */ int endTime;
  /* 0x000c */ int thumbnailCaptureTime;
  /* 0x0010 */ int priority;
  /* 0x0014 */ unsigned int entityNumber;
  /* 0x0018 */ int birthTime;
  /* 0x001c */ int entityLookAt;
  /* 0x0020 */ enum ClientNum_t clientNum;
  /* 0x0024 */ enum demoHighlightReelPlayerPriority playerPriority;
  /* 0x0028 */ unsigned int bookmarks[79];
  /* 0x0164 */ BOOL hasGameResult;
  /* 0x0165 */ char __PADDING__[3];
}; /* size: 0x0168 */

struct demoHighlightReelPreparingInformation
{
  /* 0x0000 */ BOOL pendingUpdate;
  /* 0x0001 */ char Padding_653[3];
  /* 0x0004 */ struct demoHighlightReelTimeline currentEvent;
  /* 0x016c */ int continuousOccurenceCount;
}; /* size: 0x0170 */

struct demoHighlightReelSettings
{
  /* 0x0000 */ enum demoHighlightReelPlayerFilter playerFilter;
  /* 0x0004 */ enum demoHighlightReelTransitionFilter transitionFilter;
  /* 0x0008 */ enum demoHighlightReelStylesFilter stylesFilter;
  /* 0x000c */ int numberOfSegments;
  /* 0x0010 */ int minimumNumberofStars;
  /* 0x0014 */ enum demoHighlightReelGameResultFilter gameResultFilter;
}; /* size: 0x0018 */

struct demoPlayback
{
  /* 0x0000 */ BOOL overridePause;
  /* 0x0001 */ char Padding_654[3];
  /* 0x0004 */ float timeScale;
  /* 0x0008 */ float fov;
  /* 0x000c */ int highlightReelPriority;
  /* 0x0010 */ BOOL jumpTimeFlag;
  /* 0x0011 */ BOOL switchedPlayers;
  /* 0x0012 */ BOOL forceKeyframe;
  /* 0x0013 */ BOOL waitingForDownloadData;
  /* 0x0014 */ BOOL requestedForScreenshotCapture;
  /* 0x0015 */ char Padding_655[3];
  /* 0x0018 */ enum demoInformationScreenTypes informationScreenType;
  /* 0x001c */ int informationScreenActivateTime;
  /* 0x0020 */ BOOL informationScreenActive;
  /* 0x0021 */ char Padding_656[3];
  /* 0x0024 */ struct buttonHoldCmd holdCmd;
  /* 0x0030 */ int buttonPressTime[10];
  /* 0x0058 */ unsigned char* screenshotBuf;
  /* 0x005c */ int screenshotSize;
  /* 0x0060 */ int thumbnailImageSize;
  /* 0x0064 */ unsigned char thumbnailImageBuf[65536];
  /* 0x10064 */ unsigned char thumbnailDecompressionBuffer[262144];
  /* 0x50064 */ long Padding_657;
  /* 0x50068 */ struct demoDefaultMetaInfo screenshotInfo;
  /* 0x50570 */ struct demoMemBlock clipRecordMemBlock;
  /* 0x60578 */ BOOL displayPartyScoreboard;
  /* 0x60579 */ char Padding_658[3];
  /* 0x6057c */ unsigned char* keyframeBuf;
  /* 0x60580 */ struct demoKeyFrame keyFrame[250];
  /* 0x63460 */ struct msg_t keyframeMsg;
  /* 0x63490 */ int keyframeIndex;
  /* 0x63494 */ int keyframeBufferIndex;
  /* 0x63498 */ int lastProcessedCmd;
  /* 0x6349c */ BOOL keyframeGenerated;
  /* 0x6349d */ char Padding_659[3];
  /* 0x634a0 */ int lastJumpedKeyframe;
  /* 0x634a4 */ int keyframeJumpCount;
  /* 0x634a8 */ float actorAnimTimeAtJump[32];
  /* 0x63528 */ float actorCorpseAnimTimeAtJump[8];
  /* 0x63548 */ int actorCorpseOutOfSyncUseCount[8];
  /* 0x63568 */ BOOL completed;
  /* 0x63569 */ BOOL hideGameHud;
  /* 0x6356a */ BOOL hideDemoHud;
  /* 0x6356b */ char Padding_660[21];
  /* 0x63580 */ struct demoSnapshotData prevSnapshot;
  /* 0xd4c00 */ enum demoCameraMode cameraMode;
  /* 0xd4c04 */ enum demoFreeCameraMode freeCameraMode;
  /* 0xd4c08 */ long Padding_661[2];
  /* 0xd4c10 */ struct refdef_t refdef;
  /* 0xebc70 */ union vec3_t freeCameraOrigin;
  /* 0xebc7c */ union vec3_t freeCameraAngles;
  /* 0xebc88 */ union vec3_t freeCameraVelocity;
  /* 0xebc94 */ int freeCameraOffsetEntity;
  /* 0xebc98 */ union vec3_t freeCameraOffsetAngles;
  /* 0xebca4 */ union vec3_t freeCameraOffsetOrigin;
  /* 0xebcb0 */ BOOL freeCameraEntityLockOnAllowed;
  /* 0xebcb1 */ char Padding_662[3];
  /* 0xebcb4 */ int freeCameraLockedEntity;
  /* 0xebcb8 */ BOOL freeCameraLockedOnEntityActive;
  /* 0xebcb9 */ char Padding_663[3];
  /* 0xebcbc */ int freeCameraHighlightedEntityForLockOn;
  /* 0xebcc0 */ union vec3_t initialEntityAngles;
  /* 0xebccc */ union vec3_t dollyCameraVerts[500];
  /* 0xed43c */ unsigned char* dollyCamKeyframeBuf;
  /* 0xed440 */ struct demoDollyCameraMarker dollyCamMarkers[50];
  /* 0xee700 */ unsigned int ghostDollyCameraHeadFxHandle;
  /* 0xee704 */ unsigned int ghostDollyCameraGlowFxHandle;
  /* 0xee708 */ int dollyCamMarkerCount;
  /* 0xee70c */ int dollyCamKeyframeBufferIndex;
  /* 0xee710 */ int highlightedDollyCamMarker;
  /* 0xee714 */ BOOL repositioningDollyCamMarker;
  /* 0xee715 */ BOOL cancelRepositioning;
  /* 0xee716 */ char Padding_664[2];
  /* 0xee718 */ int gameExtraCamActiveState;
  /* 0xee71c */ union vec3_t gameExtraCamOrigin;
  /* 0xee728 */ union vec3_t gameExtraCamAngles;
  /* 0xee734 */ union vec3_t clipCameraOrigin;
  /* 0xee740 */ union vec3_t clipCameraAngles;
  /* 0xee74c */ union vec3_t prevClipCameraOrigin;
  /* 0xee758 */ union vec3_t prevClipCameraAngles;
  /* 0xee764 */ int clipHighlightReelPriority;
  /* 0xee768 */ BOOL clipPausedState;
  /* 0xee769 */ char Padding_665[3];
  /* 0xee76c */ int clipCameraOffsetEntity;
  /* 0xee770 */ union vec3_t clipCameraOffsetAngles;
  /* 0xee77c */ union vec3_t clipCameraOffsetOrigin;
  /* 0xee788 */ union vec3_t prevClipCameraOffsetAngles;
  /* 0xee794 */ union vec3_t prevClipCameraOffsetOrigin;
  /* 0xee7a0 */ struct msg_t clipRecordingMsg;
  /* 0xee7d0 */ int prevClipRecordBufIndex;
  /* 0xee7d4 */ int clipRecordBufIndex;
  /* 0xee7d8 */ unsigned char* mainClipRecordingBuf;
  /* 0xee7dc */ unsigned char* clipMergeBuf;
  /* 0xee7e0 */ unsigned char subClipRecordingBuf[65536];
  /* 0xfe7e0 */ struct playerState_s clipRecordPS;
  /* 0x1011e8 */ unsigned char clipRecordClient;
  /* 0x1011e9 */ char Padding_666[3];
  /* 0x1011ec */ float clipRecordTimescale;
  /* 0x1011f0 */ float clipRecordFov;
  /* 0x1011f4 */ int clipRecordHighlightReelPriority;
  /* 0x1011f8 */ enum demoCameraMode clipCameraMode;
  /* 0x1011fc */ BOOL clipHudHidden;
  /* 0x1011fd */ char Padding_667[3];
  /* 0x101200 */ struct demoDefaultMetaInfo clipRecordInfo;
  /* 0x101708 */ BOOL forceWriteClipCommands;
  /* 0x101709 */ char Padding_668[3];
  /* 0x10170c */ enum demoClipState clipState;
  /* 0x101710 */ int clipTime;
  /* 0x101714 */ int clipServerTime;
  /* 0x101718 */ int prevClipTime;
  /* 0x10171c */ int originalFilmTime;
  /* 0x101720 */ BOOL clipModified;
  /* 0x101721 */ BOOL pendingSegmentSave;
  /* 0x101722 */ BOOL previewAllSegments;
  /* 0x101723 */ BOOL cancelPreview;
  /* 0x101724 */ BOOL forceTeleportClipCamera;
  /* 0x101725 */ char Padding_669[3];
  /* 0x101728 */ struct clipSegment segments[20];
  /* 0x243f28 */ int segmentCount;
  /* 0x243f2c */ int segmentGameStateSize;
  /* 0x243f30 */ int clipPreviewBufferIndex;
  /* 0x243f34 */ int clipPreviewSegmentNumber;
  /* 0x243f38 */ unsigned char demoPreviewBuf[65536][2];
  /* 0x263f38 */ struct demoKeyFrame demoPreview[2];
  /* 0x263f98 */ BOOL demoCompleteStateForRestorationPoint[2];
  /* 0x263f9a */ BOOL forceResetTimeValues;
  /* 0x263f9b */ BOOL creatingHighlightReel;
  /* 0x263f9c */ BOOL cancelHighlightReelCreation;
  /* 0x263f9d */ BOOL errorStartingClipRecording;
  /* 0x263f9e */ BOOL shownHighlightReelStartScreen;
  /* 0x263f9f */ char Padding_670;
  /* 0x263fa0 */ struct demoHighlightReelInformationDefine highlightReelInformationDefines[31];
  /* 0x2643fc */ int highlightReelInformationDefineCount;
  /* 0x264400 */ struct demoHighlightReelStarLevels highlightReelStarLevels[10];
  /* 0x264450 */ int highlightReelNumStarLevels;
  /* 0x264454 */ struct demoHighlightReelTimeline highlightReelTimeline[50];
  /* 0x268aa4 */ struct demoHighlightReelPreparingInformation highlightReelPreparingInformation[21];
  /* 0x26a8d4 */ struct demoHighlightReelSettings highlightReelSettings;
  /* 0x26a8ec */ BOOL preparedHighlightReelTimeline;
  /* 0x26a8ed */ char Padding_671[3];
  /* 0x26a8f0 */ int prevHighlightReelTimelineInformationCountBeforeFinalize;
  /* 0x26a8f4 */ int highlightReelTimelineInformationCount;
  /* 0x26a8f8 */ int highlightReelTimelineInformationAvailableCount;
  /* 0x26a8fc */ int processedHighlightReelTimelineIndex;
  /* 0x26a900 */ BOOL creatingHighlightReelKillcam;
  /* 0x26a901 */ BOOL setHighlightReelEventTimeScale;
  /* 0x26a902 */ char __PADDING__[126];
}; /* size: 0x26a980 */

struct FxImpactEntry
{
  /* 0x0000 */ const struct FxEffectDef* nonflesh[32];
  /* 0x0080 */ const struct FxEffectDef* flesh[4];
}; /* size: 0x0090 */

struct std::bidirectional_iterator_tag
{
}; /* size: 0x0001 */

class standard_query
{
}; /* size: 0x0004 */

struct DynEntityProps
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ BOOL clientOnly;
  /* 0x0005 */ BOOL clipMove;
  /* 0x0006 */ BOOL usePhysics;
  /* 0x0007 */ BOOL destroyable;
}; /* size: 0x0008 */

class std::numeric_limits<unsigned short>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct validateCACStatus_s::loadoutSlotStatus_s
{
  /* 0x0000 */ int value;
  /* 0x0004 */ BOOL matchSuccess;
  /* 0x0005 */ BOOL validationPerformed;
  /* 0x0006 */ char __PADDING__[2];
}; /* size: 0x0008 */

class std::numeric_limits<int>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

typedef struct _MEMORYSTATUS
{
  /* 0x0000 */ unsigned long dwLength;
  /* 0x0004 */ unsigned long dwMemoryLoad;
  /* 0x0008 */ unsigned long dwTotalPhys;
  /* 0x000c */ unsigned long dwAvailPhys;
  /* 0x0010 */ unsigned long dwTotalPageFile;
  /* 0x0014 */ unsigned long dwAvailPageFile;
  /* 0x0018 */ unsigned long dwTotalVirtual;
  /* 0x001c */ unsigned long dwAvailVirtual;
} MEMORYSTATUS, *PMEMORYSTATUS; /* size: 0x0020 */

struct std::tr1::_Nil
{
}; /* size: 0x0001 */

struct $_TypeDescriptor$_extraBytes_36
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[36];
}; /* size: 0x002c */

class type_info
{
  /* 0x0000 */ long Padding_672;
  /* 0x0004 */ void* _M_data;
  /* 0x0008 */ char _M_d_name[1];
}; /* size: 0x000c */

class phys_simple_allocator<gjkcc_info>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

struct XAnimState
{
  /* 0x0000 */ float currentAnimTime;
  /* 0x0004 */ float oldTime;
  /* 0x0008 */ short cycleCount;
  /* 0x000a */ short oldCycleCount;
  /* 0x000c */ float goalTime;
  /* 0x0010 */ float goalWeight;
  /* 0x0014 */ float weight;
  /* 0x0018 */ float rate;
  /* 0x001c */ BOOL instantWeightChange;
  /* 0x001d */ char __PADDING__[3];
}; /* size: 0x0020 */

class std::list<GlassShard *,SmallAllocatorTemplate<GlassShard *> >
{
}; /* size: 0x0010 */

struct ID2D1GeometrySink
{
}; /* size: 0x0004 */

struct gjk_slide_move_input_t
{
  /* 0x0000 */ long Padding_673;
  /* 0x0004 */ const union vec3_t* position;
  /* 0x0008 */ const union vec3_t* velocity;
  /* 0x000c */ int gravity;
  /* 0x0010 */ int has_gravity;
  /* 0x0014 */ const union vec3_t* mins;
  /* 0x0018 */ const union vec3_t* maxs;
  /* 0x001c */ int tracemask;
  /* 0x0020 */ int clientnum;
  /* 0x0024 */ float frametime;
  /* 0x0028 */ BOOL do_step_down;
  /* 0x0029 */ char __PADDING__[3];
}; /* size: 0x002c */

struct gunLevelRow_t
{
  /* 0x0000 */ unsigned short targetXP;
  /* 0x0002 */ unsigned short rewardXP;
  /* 0x0004 */ unsigned char attachment;
  /* 0x0005 */ unsigned char rankID;
  /* 0x0006 */ unsigned char itemIndex;
  /* 0x0007 */ char __PADDING__[1];
}; /* size: 0x0008 */

class SmallAllocatorTemplate<GlassShard *>
{
  /* 0x0000 */ class SmallAllocator& alloc;
}; /* size: 0x0004 */

class std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >
{
  /* 0x0000 */ struct std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node* _Myhead;
  /* 0x0004 */ unsigned int _Mysize;
  /* 0x0008 */ class SmallAllocatorTemplate<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node> _Alnod;
  /* 0x000c */ class SmallAllocatorTemplate<GlassShard *> _Alval;
}; /* size: 0x0010 */

class phys_link_list_base<pulse_sum_node>
{
  /* 0x0000 */ class pulse_sum_node* m_next_link;
}; /* size: 0x0004 */

class bdAuthHostToServicePlainText
{
  /* 0x0000 */ unsigned __int64 m_licenseID;
}; /* size: 0x0008 */

struct itemInfo_t
{
  /* 0x0000 */ short index;
  /* 0x0002 */ short dwIndex;
  /* 0x0004 */ short dwBaseIndex;
  /* 0x0006 */ short row;
  /* 0x0008 */ char unlockLevel;
  /* 0x0009 */ char unlockPLevel;
  /* 0x000a */ char cost;
  struct /* bitfield */
  {
    /* 0x000b */ unsigned char isNullItem : 1; /* bit position: 0 */
    /* 0x000b */ unsigned char isPassive : 1; /* bit position: 1 */
    /* 0x000b */ unsigned char isValid : 1; /* bit position: 2 */
    /* 0x000b */ unsigned char count : 2; /* bit position: 3 */
  }; /* bitfield */
  /* 0x000c */ char dwCost;
  /* 0x000d */ char allocationCost;
  /* 0x000e */ unsigned char dlcIndex;
  /* 0x000f */ unsigned char sortKey;
  /* 0x0010 */ short momentumCost;
  /* 0x0012 */ char Padding_674[2];
  /* 0x0014 */ enum loadoutSlot_t loadoutSlot;
  /* 0x0018 */ enum itemGroup_t group;
  /* 0x001c */ struct gunLevelRow_t* firstGunLevelRow;
  /* 0x0020 */ int nameHash;
  /* 0x0024 */ int refHash;
  /* 0x0028 */ int defaultClassBits;
  /* 0x002c */ unsigned char numAttachments[6];
  /* 0x0032 */ char attachments[30];
  /* 0x0050 */ unsigned short gunLevelIndex[30];
}; /* size: 0x008c */

struct IDirect3DStateBlock9
{
}; /* size: 0x0004 */

struct IDXGIDeviceSubObject
{
}; /* size: 0x0004 */

struct ScriptParseTree
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int len;
  /* 0x0008 */ unsigned char* buffer;
}; /* size: 0x000c */

struct XAnimServerNotify
{
  /* 0x0000 */ unsigned short entNum;
  /* 0x0002 */ unsigned short notifyName;
  /* 0x0004 */ unsigned short notetrackName;
  /* 0x0006 */ char Padding_675[2];
  /* 0x0008 */ float fPercentTime;
}; /* size: 0x000c */

class bdRatingInfo
{
  /* 0x0000 */ long Padding_676[2];
  /* 0x0008 */ unsigned __int64 m_entityID;
  /* 0x0010 */ unsigned char m_rating;
}; /* size: 0x0018 */

class phys_gjk_collision_info
{
  /* 0x0000 */ class phys_vec3 m_p1;
  /* 0x0010 */ class phys_vec3 m_p2;
  /* 0x0020 */ class phys_vec3 m_n;
}; /* size: 0x0030 */

struct AddonMapEnts
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ char* entityString;
  /* 0x0008 */ int numEntityChars;
  /* 0x000c */ struct MapTriggers trigger;
  /* 0x0024 */ struct ClipInfo* info;
  /* 0x0028 */ unsigned int numSubModels;
  /* 0x002c */ struct cmodel_t* cmodels;
  /* 0x0030 */ struct GfxBrushModel* models;
}; /* size: 0x0034 */

class broad_phase_memory_info
{
  /* 0x0000 */ int m_max_num_gjk_ci;
  /* 0x0004 */ int m_max_num_sap_active_pairs;
  /* 0x0008 */ int m_max_num_surface_types;
}; /* size: 0x000c */

struct KeyValuePairs
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int numVariables;
  /* 0x0008 */ struct KeyValuePair* keyValuePairs;
}; /* size: 0x000c */

class bdReference<bdDataChunk>
{
  /* 0x0000 */ class bdDataChunk* m_ptr;
}; /* size: 0x0004 */

class bdLinkedList<bdReference<bdDataChunk> >::Node
{
  /* 0x0000 */ class bdReference<bdDataChunk> m_data;
  /* 0x0004 */ class bdLinkedList<bdReference<bdDataChunk> >::Node* m_next;
  /* 0x0008 */ class bdLinkedList<bdReference<bdDataChunk> >::Node* m_prev;
}; /* size: 0x000c */

struct gjk_brush_t
{
  /* 0x0000 */ long Padding_677[20];
  /* 0x0050 */ int nverts;
  /* 0x0054 */ const union vec3_t* verts;
  /* 0x0058 */ const struct cbrush_t* brush;
  /* 0x005c */ long __PADDING__[1];
}; /* size: 0x0060 */

class I_spuDmaSave
{
}; /* size: 0x0001 */

struct demoSaveCmd
{
  /* 0x0000 */ unsigned char* data;
  /* 0x0004 */ int size;
  /* 0x0008 */ BOOL writeFooter;
  /* 0x0009 */ BOOL gameState;
  /* 0x000a */ char __PADDING__[2];
}; /* size: 0x000c */

struct gjk_geom_info_t
{
  /* 0x0000 */ class phys_vec3 m_aabb_min;
  /* 0x0010 */ class phys_vec3 m_aabb_max;
  /* 0x0020 */ struct gjk_base_t* m_cg;
  /* 0x0024 */ struct gjk_entity_info_t* m_ent_info;
  /* 0x0028 */ int m_query_visitor_count;
  /* 0x002c */ float m_hit_time;
  /* 0x0030 */ struct gjk_geom_info_t* m_next_link;
  /* 0x0034 */ struct gjk_geom_info_t* m_total_next_link;
  /* 0x0038 */ long __PADDING__[2];
}; /* size: 0x0040 */

struct LocalizeEntry
{
  /* 0x0000 */ const char* value;
  /* 0x0004 */ const char* name;
}; /* size: 0x0008 */

struct gjk_entity_info_t
{
  /* 0x0000 */ class phys_mat44 m_mat;
  /* 0x0040 */ enum gjk_entity_info_t::ENTITY_TYPE m_ent_type;
  /* 0x0044 */ const void* m_ent;
  /* 0x0048 */ int m_query_visitor_count;
  /* 0x004c */ long __PADDING__[1];
}; /* size: 0x0050 */

struct HWND__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct clientDebugStringInfo_t
{
  /* 0x0000 */ int max;
  /* 0x0004 */ int num;
  /* 0x0008 */ struct trDebugString_t* strings;
  /* 0x000c */ int* durations;
}; /* size: 0x0010 */

struct $_TypeDescriptor$_extraBytes_28
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[28];
}; /* size: 0x0024 */

class phys_contact_manifold
{
  /* 0x0000 */ class phys_vec3 m_feature_normal;
  /* 0x0010 */ class phys_vec3 m_feature_hitp;
  /* 0x0020 */ class phys_vec3 m_feature_hitn;
  /* 0x0030 */ float m_feature_distance_eps;
  /* 0x0034 */ float m_sin_feautre_angular_eps_sq;
  /* 0x0038 */ int m_close_mesh_point_count;
  /* 0x003c */ class phys_memory_heap* m_allocator;
  /* 0x0040 */ struct contact_manifold_mesh_point* m_list_mesh_point;
  /* 0x0044 */ int m_list_mesh_point_count;
  /* 0x0048 */ struct contact_manifold_mesh_point** m_list_sorted_mesh_point;
  /* 0x004c */ struct contact_manifold_mesh_point** m_list_contact_point;
  /* 0x0050 */ int m_list_contact_point_count;
}; /* size: 0x0060 */

class phys_memory_heap
{
  /* 0x0000 */ char* m_buffer_start;
  /* 0x0004 */ char* m_buffer_end;
  /* 0x0008 */ char* m_buffer_cur;
  /* 0x000c */ char* m_user_start;
}; /* size: 0x0010 */

struct GSC_ANIMNODE_ITEM
{
  /* 0x0000 */ unsigned long name;
  /* 0x0004 */ unsigned long address;
}; /* size: 0x0008 */

struct uiInfo_s
{
  /* 0x0000 */ struct UiContext uiDC;
  /* 0x21b4 */ int playerRefresh;
  /* 0x21b8 */ int playerIndex;
  /* 0x21bc */ int timeIndex;
  /* 0x21c0 */ int previousTimes[4];
  /* 0x21d0 */ enum uiMenuCommand_t currentMenuType;
  /* 0x21d4 */ BOOL allowScriptMenuResponse;
  /* 0x21d5 */ char toastPopupTitle[256];
  /* 0x22d5 */ char toastPopupDesc[256];
  /* 0x23d5 */ char toastPopupIconName[256];
  /* 0x24d5 */ char Padding_678[3];
  /* 0x24d8 */ int toastPopupDuration;
  /* 0x24dc */ int toastPopupTimeCounter;
  /* 0x24e0 */ BOOL toastPopupOpened;
  /* 0x24e1 */ char Padding_679[3];
  /* 0x24e4 */ int contractIndex;
}; /* size: 0x24e8 */

struct DpvsGlob_sunShadow
{
  /* 0x0000 */ union vec3_t viewDir;
  /* 0x000c */ float viewDirDist;
  /* 0x0010 */ float sunShadowDrawDist;
  /* 0x0014 */ int viewDirSign[3];
}; /* size: 0x0020 */

struct SavedScreenParams
{
  /* 0x0000 */ float s0;
  /* 0x0004 */ float t0;
  /* 0x0008 */ float ds;
  /* 0x000c */ float dt;
  /* 0x0010 */ int isSet;
}; /* size: 0x0014 */

struct SCRIPT_PENDING_BINUPDATE
{
  /* 0x0000 */ BOOL is_pending;
  /* 0x0001 */ char Padding_680[3];
  /* 0x0004 */ struct GSC_OBJ* obj;
  /* 0x0008 */ struct GSC_OBJGDB* gdb;
  /* 0x000c */ int objLen;
  /* 0x0010 */ int gdbLen;
}; /* size: 0x0014 */

struct SndVolumeGroup
{
  /* 0x0000 */ char name[32];
  /* 0x0020 */ char parentName[32];
  /* 0x0040 */ unsigned int id;
  /* 0x0044 */ int parentIndex;
  /* 0x0048 */ enum SndMenuCategory category;
  /* 0x004c */ unsigned short attenuationSp;
  /* 0x004e */ unsigned short attenuationMp;
}; /* size: 0x0050 */

class phys_surface_type_info
{
  /* 0x0000 */ float m_friction_coef;
  /* 0x0004 */ float m_bounce_coef;
  /* 0x0008 */ unsigned int m_solver_priority;
  /* 0x000c */ BOOL m_no_overflow_error;
}; /* size: 0x0010 */

class phys_inplace_avl_tree_node<broad_phase_environment_info>
{
  /* 0x0000 */ class broad_phase_environment_info* m_left;
  /* 0x0004 */ class broad_phase_environment_info* m_right;
  /* 0x0008 */ int m_balance;
}; /* size: 0x000c */

struct flameChunkSpawnVars_t
{
  /* 0x0000 */ int time;
  /* 0x0004 */ int duration;
  /* 0x0008 */ union vec3_t origin;
  /* 0x0014 */ union vec3_t angle;
  /* 0x0020 */ float speed;
  /* 0x0024 */ float decel;
  /* 0x0028 */ float gravityStart;
  /* 0x002c */ float gravityEnd;
  /* 0x0030 */ float sizeMax;
  /* 0x0034 */ float sizeStart;
  /* 0x0038 */ float sizeEnd;
  /* 0x003c */ float sizeRate;
  /* 0x0040 */ float spawnFireIntervalStart;
  /* 0x0044 */ float spawnFireIntervalEnd;
}; /* size: 0x0048 */

class broad_phase_environment_info
{
  /* 0x0000 */ void* m_data;
  /* 0x0004 */ struct minspec_mutex m_mutex;
  /* 0x0008 */ unsigned int m_gjk_geom_id;
  /* 0x000c */ class broad_phase_environment_info* m_next_bpei;
  /* 0x0010 */ class phys_inplace_avl_tree_node<broad_phase_environment_info> m_avl_tree_node;
  /* 0x001c */ class bpei_database_id m_database_id;
}; /* size: 0x0024 */

struct overlay_info_t
{
  /* 0x0000 */ char* name;
  /* 0x0004 */ int size;
}; /* size: 0x0008 */

class phys_static_array<rigid_body_constraint_wheel *,4>
{
  /* 0x0000 */ char m_buffer[16];
  /* 0x0010 */ class rigid_body_constraint_wheel** const m_slot_array;
  /* 0x0014 */ int m_alloc_count;
}; /* size: 0x0020 */

class rb_vehicle_model
{
  /* 0x0000 */ class phys_vec3 m_right_dir_loc;
  /* 0x0010 */ class phys_vec3 m_forward_dir_loc;
  /* 0x0020 */ class phys_static_array<rigid_body_constraint_wheel *,4> m_wheels;
  /* 0x0040 */ float m_desired_speed_factor;
  /* 0x0044 */ float m_acceleration_factor;
  /* 0x0048 */ float m_power_braking_factor;
  /* 0x004c */ float m_braking_factor;
  /* 0x0050 */ float m_coasting_factor;
  /* 0x0054 */ float m_reference_wheel_radius;
  /* 0x0058 */ float m_steer_factor;
  /* 0x005c */ float m_steer_factor_offset;
  /* 0x0060 */ float m_steer_current_angle;
  /* 0x0064 */ float m_steer_max_angle;
  /* 0x0068 */ float m_steer_speed;
  /* 0x006c */ long Padding_681;
  /* 0x0070 */ class phys_vec3 m_steer_front_pt_loc;
  /* 0x0080 */ float m_steer_front_back_length;
  /* 0x0084 */ unsigned int m_state_flags;
  /* 0x0088 */ class rigid_body_constraint_upright* m_rbc_upright;
}; /* size: 0x0090 */

struct std::_Scalar_ptr_iterator_tag
{
}; /* size: 0x0001 */

struct fileshareUploadInfo_t
{
  /* 0x0000 */ unsigned char metaData[255];
  /* 0x00ff */ char Padding_682;
  /* 0x0100 */ class bdTag tags[60];
  /* 0x06a0 */ int numTags;
  /* 0x06a4 */ char fileName[256];
  /* 0x07a4 */ char name[22];
  /* 0x07ba */ char description[64];
  /* 0x07fa */ char __PADDING__[6];
}; /* size: 0x0800 */

class bdStatsInfo
{
  /* 0x0000 */ long Padding_683;
  /* 0x0004 */ unsigned int m_leaderboardID;
  /* 0x0008 */ unsigned __int64 m_entityID;
  /* 0x0010 */ enum bdStats::bdWriteType m_writeType;
  /* 0x0014 */ long Padding_684;
  /* 0x0018 */ __int64 m_rating;
  /* 0x0020 */ unsigned __int64 m_rank;
  /* 0x0028 */ char m_entityName[65];
  /* 0x0069 */ char Padding_685[3];
  /* 0x006c */ unsigned int m_secondsSinceUpdate;
}; /* size: 0x0070 */

struct SCR_PROFILER_DATA
{
  /* 0x0000 */ struct gscProfileInfo_t* profileInfo[8];
  /* 0x0020 */ int profileInfoCount;
}; /* size: 0x0024 */

struct IDWriteTextFormat
{
}; /* size: 0x0004 */

struct ClientPlayerWeaponInfo
{
  /* 0x0000 */ struct XModel* handModel;
  /* 0x0004 */ struct XModel* gogglesModel;
  /* 0x0008 */ struct XModel* rocketModel;
  /* 0x000c */ unsigned char weapModelIdx;
  /* 0x000d */ char Padding_686[3];
  /* 0x0010 */ int registered;
  /* 0x0014 */ union Weapon weapon;
  /* 0x0018 */ const char* translatedDisplayName;
  /* 0x001c */ const char* translatedModename;
  /* 0x0020 */ const char* translatedAIOverlayDescription;
}; /* size: 0x0024 */

struct BaseLerpBoneDef
{
  /* 0x0000 */ char animBoneTextName[20];
  /* 0x0014 */ unsigned int animBoneName;
  /* 0x0018 */ unsigned int parentBoneIndex;
  /* 0x001c */ int lerpTime;
}; /* size: 0x0020 */

struct broad_phase_environment_info::avl_tree_accessor
{
}; /* size: 0x0001 */

struct std::unary_function<__int64,unsigned int>
{
}; /* size: 0x0001 */

struct GfxParticleCloud
{
  /* 0x0000 */ struct GfxScaledPlacement placement;
  /* 0x0020 */ union vec3_t velDirWorld;
  /* 0x002c */ union GfxColor color;
  /* 0x0030 */ union vec2_t radius;
  /* 0x0038 */ unsigned short count;
  /* 0x003a */ unsigned short offset;
  /* 0x003c */ unsigned char gaussian;
  /* 0x003d */ unsigned char pad[3];
}; /* size: 0x0040 */

class phys_link_list<phys_collision_pair>
{
  /* 0x0000 */ class phys_collision_pair* m_first;
  /* 0x0004 */ class phys_collision_pair** m_last_next_ptr;
  /* 0x0008 */ int m_alloc_count;
}; /* size: 0x000c */

class std::invalid_argument
{
}; /* size: 0x000c */

struct HFONT__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct BoneDef
{
  /* 0x0000 */ char animBoneTextNames[20][2];
  /* 0x0028 */ unsigned int animBoneNames[2];
  /* 0x0030 */ float radius;
  /* 0x0034 */ BOOL mirror;
  /* 0x0035 */ char Padding_687[3];
  /* 0x0038 */ float percent;
  /* 0x003c */ float mass;
  /* 0x0040 */ float friction;
  /* 0x0044 */ float buoyancy;
  /* 0x0048 */ int parentBone;
  /* 0x004c */ enum PhysicsGeomType geomType;
}; /* size: 0x0050 */

struct JointDef
{
  /* 0x0000 */ unsigned char bone;
  /* 0x0001 */ char Padding_688[3];
  /* 0x0004 */ enum JointType type;
  /* 0x0008 */ int numLimitAxes;
  /* 0x000c */ union vec3_t limitAxes[3];
  /* 0x0030 */ float minAngles[3];
  /* 0x003c */ float maxAngles[3];
  /* 0x0048 */ float axisFriction[3];
}; /* size: 0x0054 */

struct SelfPairDef
{
  /* 0x0000 */ unsigned char bones[2];
}; /* size: 0x0002 */

struct RagdollDef
{
  /* 0x0000 */ BOOL inUse;
  /* 0x0001 */ BOOL bound;
  /* 0x0002 */ char Padding_689[2];
  /* 0x0004 */ int numBones;
  /* 0x0008 */ struct BoneDef boneDefs[14];
  /* 0x0468 */ int numBaseLerpBones;
  /* 0x046c */ struct BaseLerpBoneDef baseLerpBoneDefs[9];
  /* 0x058c */ int numJoints;
  /* 0x0590 */ struct JointDef jointDefs[28];
  /* 0x0ec0 */ int numSelfPairs;
  /* 0x0ec4 */ struct SelfPairDef selfPairDefs[33];
  /* 0x0f06 */ char __PADDING__[2];
}; /* size: 0x0f08 */

struct GfxTextureOverride
{
  /* 0x0000 */ short prev;
  /* 0x0002 */ unsigned char type;
  /* 0x0003 */ char Padding_690;
  /* 0x0004 */ unsigned int dobjModelMask;
  /* 0x0008 */ const struct Material* mat;
  union
  {
    struct
    {
      /* 0x000c */ const struct GfxImage* img1;
      /* 0x0010 */ const struct GfxImage* img2;
    } /* size: 0x0008 */ image;
    struct
    {
      /* 0x000c */ const struct Material* mat1;
      /* 0x0010 */ const struct Material* mat2;
    } /* size: 0x0008 */ material;
    struct
    {
      /* 0x000c */ unsigned int constIdx;
      /* 0x0010 */ union vec4_t value;
    } /* size: 0x0014 */ shaderConst;
  }; /* size: 0x0014 */
}; /* size: 0x0020 */

struct actorGravity_t
{
  /* 0x0000 */ struct centity_t* actor;
  /* 0x0004 */ int gravity;
}; /* size: 0x0008 */

union std::_String_val<char,std::allocator<char> >::_Bxty
{
  union
  {
    /* 0x0000 */ char _Buf[16];
    /* 0x0000 */ char* _Ptr;
    /* 0x0000 */ char _Alias[16];
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

class std::allocator<char>
{
}; /* size: 0x0001 */

class std::_String_val<char,std::allocator<char> >
{
  /* 0x0000 */ union std::_String_val<char,std::allocator<char> >::_Bxty _Bx;
  /* 0x0010 */ unsigned int _Mysize;
  /* 0x0014 */ unsigned int _Myres;
  /* 0x0018 */ class std::allocator<char> _Alval;
}; /* size: 0x001c */

struct CgEntCollSector
{
  /* 0x0000 */ struct CgEntCollTree tree;
  /* 0x000c */ unsigned short entListHead;
  /* 0x000e */ char __PADDING__[2];
}; /* size: 0x0010 */

struct CgEntCollWorld
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ unsigned short freeHead;
  /* 0x001a */ char Padding_691[2];
  /* 0x001c */ struct CgEntCollSector sectors[1024];
}; /* size: 0x401c */

class std::underflow_error
{
}; /* size: 0x000c */

class bdPlatformMutex
{
}; /* size: 0x0001 */

struct GfxVertexBufferState
{
  /* 0x0000 */ volatile long used;
  /* 0x0004 */ int total;
  /* 0x0008 */ struct ID3D11Buffer* buffer;
  /* 0x000c */ unsigned char* verts;
}; /* size: 0x0010 */

struct GfxMeshData
{
  /* 0x0000 */ struct GfxMeshData* thisPtr;
  /* 0x0004 */ unsigned int indexCount;
  /* 0x0008 */ unsigned int totalIndexCount;
  /* 0x000c */ struct ID3D11Buffer* ib;
  /* 0x0010 */ unsigned short* indices;
  /* 0x0014 */ struct GfxVertexBufferState vb;
  /* 0x0024 */ unsigned int vertSize;
}; /* size: 0x0028 */

struct GfxLightingSH
{
  /* 0x0000 */ union vec4_t V0;
  /* 0x0010 */ union vec4_t V1;
  /* 0x0020 */ union vec4_t V2;
}; /* size: 0x0030 */

struct GfxReflectionProbe
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ struct GfxLightingSH lightingSH;
  /* 0x003c */ struct GfxImage* reflectionImage;
  /* 0x0040 */ struct GfxReflectionProbeVolumeData* probeVolumes;
  /* 0x0044 */ unsigned int probeVolumeCount;
  /* 0x0048 */ float mipLodBias;
}; /* size: 0x004c */

struct GfxEntity
{
  /* 0x0000 */ unsigned int renderFxFlags;
  /* 0x0004 */ float materialTime;
  /* 0x0008 */ float destructibleBurnAmount;
  /* 0x000c */ int textureOverrideIndex;
}; /* size: 0x0010 */

struct TracerInfo
{
  /* 0x0000 */ struct Material* material;
  /* 0x0004 */ float clipDist;
  /* 0x0008 */ float length;
  /* 0x000c */ float width;
  /* 0x0010 */ float screwDist;
  /* 0x0014 */ float screwRadius;
  /* 0x0018 */ float fadeTime;
  /* 0x001c */ float fadeScale;
  /* 0x0020 */ float texRepeatRate;
  /* 0x0024 */ unsigned char colors[4][5];
  /* 0x0038 */ int isClientEmitter;
}; /* size: 0x003c */

struct localEntity_s
{
  /* 0x0000 */ struct localEntity_s* prev;
  /* 0x0004 */ struct localEntity_s* next;
  /* 0x0008 */ enum leType_t leType;
  /* 0x000c */ int endTime;
  /* 0x0010 */ struct trajectory_t pos;
  /* 0x0034 */ struct GfxEntity refEntity;
  /* 0x0044 */ struct TracerInfo tracer;
}; /* size: 0x0080 */

struct cgs_t
{
  /* 0x0000 */ int viewX;
  /* 0x0004 */ int viewY;
  /* 0x0008 */ int viewWidth;
  /* 0x000c */ int viewHeight;
  /* 0x0010 */ float viewAspect;
  /* 0x0014 */ float sceneViewportX;
  /* 0x0018 */ float sceneViewportY;
  /* 0x001c */ float sceneViewportWidth;
  /* 0x0020 */ float sceneViewportHeight;
  /* 0x0024 */ int serverCommandSequence;
  /* 0x0028 */ int processedSnapshotNum;
  /* 0x002c */ int localServer;
  /* 0x0030 */ char gametype[32];
  /* 0x0050 */ char szHostName[256];
  /* 0x0150 */ int maxclients;
  /* 0x0154 */ int privateClients;
  /* 0x0158 */ char mappath[64];
  /* 0x0198 */ char mapname[32];
  /* 0x01b8 */ int gameEndTime;
  /* 0x01bc */ int voteTime;
  /* 0x01c0 */ int voteYes;
  /* 0x01c4 */ int voteNo;
  /* 0x01c8 */ char voteString[256];
  /* 0x02c8 */ int redCrosshair;
  /* 0x02cc */ struct XModel* gameModels[512];
  /* 0x0acc */ const struct FxEffectDef* fxs[196];
  /* 0x0ddc */ const struct FxEffectDef* grenadeFx[40];
  /* 0x0e7c */ int grenadeFxCount;
  /* 0x0e80 */ const struct FxEffectDef* playerFireFx[3];
  /* 0x0e8c */ struct shellshock_parms_t holdBreathParams;
  /* 0x1090 */ char teamChatMsgs[90][8];
  /* 0x1360 */ int teamChatMsgTimes[8];
  /* 0x1380 */ int teamChatPos;
  /* 0x1384 */ int teamLastChatPos;
  /* 0x1388 */ float compassWidth;
  /* 0x138c */ float compassHeight;
  /* 0x1390 */ float compassY;
  /* 0x1394 */ long Padding_692;
  /* 0x1398 */ struct clientInfo_t corpseinfo[4];
  /* 0x33b8 */ struct actorInfo_t actorCorpseInfo[8];
  /* 0x5b58 */ BOOL entUpdateToggleContextKey;
  /* 0x5b59 */ char Padding_693[3];
  /* 0x5b5c */ struct actorGravity_t actorGravity[32];
  /* 0x5c5c */ long __PADDING__[1];
}; /* size: 0x5c60 */

struct pmoveHandler_t
{
  /* 0x0000 */ void* trace /* function */;
  /* 0x0004 */ void* playerEvent /* function */;
  /* 0x0008 */ void* getEntityOriginAngles /* function */;
  /* 0x000c */ void* getEntityVelocity /* function */;
  /* 0x0010 */ void* getVehicleTypeString /* function */;
  /* 0x0014 */ void* entityLinkFromPMove /* function */;
  /* 0x0018 */ void* getPlayerWeapon /* function */;
  /* 0x001c */ void* setVehDriverInputs /* function */;
  /* 0x0020 */ void* isEntWalkable /* function */;
}; /* size: 0x0024 */

struct FootstepTableDef
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int sndAliasTable[7][32];
}; /* size: 0x0384 */

struct SkinnedVertsDef
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int maxSkinnedVerts;
}; /* size: 0x0008 */

class phys_free_list<rigid_body_constraint_contact>::iterator
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_contact>::T_internal_base* m_ptr;
}; /* size: 0x0004 */

struct GfxWorldVertexData1
{
  /* 0x0000 */ unsigned char* data;
  /* 0x0004 */ struct ID3D11Buffer* vb;
}; /* size: 0x0008 */

struct GfxWorldDraw
{
  /* 0x0000 */ unsigned int reflectionProbeCount;
  union
  {
    /* 0x0004 */ struct GfxReflectionProbe* localReflectionProbes;
    /* 0x0004 */ struct GfxReflectionProbe* reflectionProbes;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0008 */ union GfxTexture* localReflectionProbeTextures;
    /* 0x0008 */ union GfxTexture* reflectionProbeTextures;
  }; /* size: 0x0004 */
  /* 0x000c */ int lightmapCount;
  union
  {
    /* 0x0010 */ struct GfxLightmapArray* localLightmaps;
    /* 0x0010 */ struct GfxLightmapArray* lightmaps;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0014 */ union GfxTexture* localLightmapPrimaryTextures;
    /* 0x0014 */ union GfxTexture* lightmapPrimaryTextures;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0018 */ union GfxTexture* localLightmapSecondaryTextures;
    /* 0x0018 */ union GfxTexture* lightmapSecondaryTextures;
  }; /* size: 0x0004 */
  /* 0x001c */ unsigned int vertexCount;
  /* 0x0020 */ unsigned int vertexDataSize0;
  /* 0x0024 */ struct GfxWorldVertexData0 vd0;
  /* 0x002c */ unsigned int vertexDataSize1;
  /* 0x0030 */ struct GfxWorldVertexData1 vd1;
  /* 0x0038 */ int indexCount;
  /* 0x003c */ unsigned short* indices;
  /* 0x0040 */ struct ID3D11Buffer* indexBuffer;
}; /* size: 0x0044 */

class bdCategorizedRatingInfo
{
  /* 0x0000 */ long Padding_694[6];
  /* 0x0018 */ unsigned short m_category;
}; /* size: 0x0020 */

struct GfxLightGrid
{
  /* 0x0000 */ unsigned int sunPrimaryLightIndex;
  /* 0x0004 */ unsigned short mins[3];
  /* 0x000a */ unsigned short maxs[3];
  /* 0x0010 */ float offset;
  /* 0x0014 */ unsigned int rowAxis;
  /* 0x0018 */ unsigned int colAxis;
  /* 0x001c */ unsigned short* rowDataStart;
  /* 0x0020 */ unsigned int rawRowDataSize;
  /* 0x0024 */ unsigned char* rawRowData;
  /* 0x0028 */ unsigned int entryCount;
  /* 0x002c */ struct GfxLightGridEntry* entries;
  /* 0x0030 */ unsigned int colorCount;
  /* 0x0034 */ struct GfxCompressedLightGridColors* colors;
  /* 0x0038 */ unsigned int coeffCount;
  /* 0x003c */ struct GfxCompressedLightGridCoeffs* coeffs;
  /* 0x0040 */ unsigned int skyGridVolumeCount;
  /* 0x0044 */ struct GfxSkyGridVolume* skyGridVolumes;
}; /* size: 0x0048 */

struct scr_localVar_t
{
  /* 0x0000 */ unsigned int name;
  /* 0x0004 */ unsigned int sourcePos;
}; /* size: 0x0008 */

struct WeaponOptionTableEntry
{
  /* 0x0000 */ short weaponOptionIndex;
  /* 0x0002 */ short subOtionIndex;
  /* 0x0004 */ enum eWeaponOptionGroup weaponOptionGroup;
  /* 0x0008 */ struct WeaponAttachmentTableEntry values;
  /* 0x0024 */ BOOL isValid;
  /* 0x0025 */ char __PADDING__[3];
}; /* size: 0x0028 */

class create_gjk_geom_collision_visitor
{
  /* 0x0000 */ long Padding_695;
  /* 0x0004 */ struct gjk_geom_list_t* gjk_geom_list;
}; /* size: 0x0008 */

struct flameWeaponConfig_t
{
  /* 0x0000 */ BOOL bIsFiring;
  /* 0x0001 */ BOOL bFireWhileIdle;
  /* 0x0002 */ char Padding_696[2];
  /* 0x0004 */ union vec3_t origin;
  /* 0x0010 */ union vec3_t angle;
  /* 0x001c */ float strength;
  /* 0x0020 */ float thickness;
  /* 0x0024 */ float burnRate;
  /* 0x0028 */ union vec3_t entityOrigin;
  /* 0x0034 */ struct flameTable* fTable;
  /* 0x0038 */ int damage;
  /* 0x003c */ float damageDuration;
  /* 0x0040 */ float damageInterval;
}; /* size: 0x0044 */

struct cscr_mp_data_t
{
  /* 0x0000 */ int airsupport;
  /* 0x0004 */ int demo_jump;
  /* 0x0008 */ int playerSwitch;
  /* 0x000c */ int killcam_begin;
  /* 0x0010 */ int killcam_end;
  /* 0x0014 */ int activateexploder;
  /* 0x0018 */ int deactivateexploder;
  /* 0x001c */ int activatelightexploder;
  /* 0x0020 */ int deactivatelightexploder;
  /* 0x0024 */ int soundNotifyCallback;
  /* 0x0028 */ int chargeshotWeaponSoundNotify;
}; /* size: 0x002c */

struct DynEntityDef
{
  /* 0x0000 */ enum DynEntityType type;
  /* 0x0004 */ struct GfxPlacement pose;
  /* 0x0020 */ struct XModel* xModel;
  /* 0x0024 */ struct XModel* destroyedxModel;
  /* 0x0028 */ unsigned short brushModel;
  /* 0x002a */ unsigned short physicsBrushModel;
  /* 0x002c */ const struct FxEffectDef* destroyFx;
  /* 0x0030 */ unsigned int destroySound;
  /* 0x0034 */ struct XModelPieces* destroyPieces;
  /* 0x0038 */ struct PhysPreset* physPreset;
  /* 0x003c */ short physConstraints[4];
  /* 0x0044 */ int health;
  /* 0x0048 */ int flags;
  /* 0x004c */ int contents;
  /* 0x0050 */ unsigned short targetname;
  /* 0x0052 */ unsigned short target;
}; /* size: 0x0054 */

struct RawFile
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int len;
  /* 0x0008 */ const char* buffer;
}; /* size: 0x000c */

struct GfxLightingInfo
{
  /* 0x0000 */ unsigned char primaryLightIndex;
  /* 0x0001 */ unsigned char reflectionProbeIndex;
  /* 0x0002 */ unsigned short lightingHandle;
}; /* size: 0x0004 */

struct XModelPieces
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int numpieces;
  /* 0x0008 */ struct XModelPiece* pieces;
}; /* size: 0x000c */

struct flameDrips_t
{
  /* 0x0000 */ struct flameGeneric_s gen;
  /* 0x0060 */ struct flameRender_s* flameRend;
}; /* size: 0x0064 */

struct XModelPiece
{
  /* 0x0000 */ struct XModel* model;
  /* 0x0004 */ union vec3_t offset;
}; /* size: 0x0010 */

struct DXGI_FRAME_STATISTICS
{
  /* 0x0000 */ unsigned int PresentCount;
  /* 0x0004 */ unsigned int PresentRefreshCount;
  /* 0x0008 */ unsigned int SyncRefreshCount;
  /* 0x000c */ long Padding_697;
  /* 0x0010 */ union _LARGE_INTEGER SyncQPCTime;
  /* 0x0018 */ union _LARGE_INTEGER SyncGPUTime;
}; /* size: 0x0020 */

class phys_free_list<broad_phase_collision_pair>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<broad_phase_collision_pair>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<broad_phase_collision_pair>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<broad_phase_collision_pair>
{
  /* 0x0000 */ class phys_free_list<broad_phase_collision_pair>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ class broad_phase_collision_pair* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

struct gump_info_t
{
  /* 0x0000 */ char* name;
  /* 0x0004 */ int size;
}; /* size: 0x0008 */

struct IDXGIObject
{
}; /* size: 0x0004 */

class phys_free_list<broad_phase_collision_pair>::T_internal
{
  /* 0x0000 */ long Padding_698[2];
  /* 0x0008 */ class broad_phase_collision_pair m_data;
  /* 0x0014 */ int m_ptr_list_index;
}; /* size: 0x0018 */

struct std::_Pair_base<RagdollSortStruct *,RagdollSortStruct *>
{
  /* 0x0000 */ struct RagdollSortStruct* first;
  /* 0x0004 */ struct RagdollSortStruct* second;
}; /* size: 0x0008 */

struct gjk_partition_t
{
  /* 0x0000 */ long Padding_699[20];
  /* 0x0050 */ int ninds;
  /* 0x0054 */ const union vec3_t* verts;
  /* 0x0058 */ unsigned short* inds;
  /* 0x005c */ const struct CollisionPartition* partition;
  /* 0x0060 */ const struct CollisionAabbTree* tree;
  /* 0x0064 */ long __PADDING__[3];
}; /* size: 0x0070 */

struct std::allocator<char>::rebind<char>
{
}; /* size: 0x0001 */

struct CollisionPartition
{
  /* 0x0000 */ unsigned char triCount;
  /* 0x0001 */ char Padding_700[3];
  /* 0x0004 */ int firstTri;
  /* 0x0008 */ int nuinds;
  /* 0x000c */ int fuind;
}; /* size: 0x0010 */

union std::_String_val<wchar_t,std::allocator<wchar_t> >::_Bxty
{
  union
  {
    /* 0x0000 */ wchar_t _Buf[8];
    /* 0x0000 */ wchar_t* _Ptr;
    /* 0x0000 */ char _Alias[8];
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

struct tMIXERCONTROLDETAILS_BOOLEAN
{
  /* 0x0000 */ long fValue;
}; /* size: 0x0004 */

struct CgEntCollNode
{
  /* 0x0000 */ unsigned short sector;
  /* 0x0002 */ unsigned short nextEntInSector;
  /* 0x0004 */ union vec3_t linkMins;
  /* 0x0010 */ union vec3_t linkMaxs;
}; /* size: 0x001c */

struct std::unary_function<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,unsigned int>
{
}; /* size: 0x0001 */

class nuge
{
}; /* size: 0x0001 */

struct FxCodeMeshData
{
  /* 0x0000 */ unsigned int triCount;
  /* 0x0004 */ unsigned short* indices;
  /* 0x0008 */ unsigned short argOffset;
  /* 0x000a */ unsigned short argCount;
  /* 0x000c */ struct GfxLightingInfo lightingInfo;
}; /* size: 0x0010 */

class std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >;

struct GfxWorldFogVolume
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ unsigned int control;
  /* 0x0010 */ union vec3_t maxs;
  /* 0x001c */ float fogTransitionTime;
  /* 0x0020 */ unsigned int controlEx;
  /* 0x0024 */ struct GfxWorldFog volumeWorldFog[1];
}; /* size: 0x0064 */

class phys_free_list<broad_phase_info>::iterator;

struct stbi_resample
{
  /* 0x0000 */ void* resample /* function */;
  /* 0x0004 */ unsigned char* line0;
  /* 0x0008 */ unsigned char* line1;
  /* 0x000c */ int hs;
  /* 0x0010 */ int vs;
  /* 0x0014 */ int w_lores;
  /* 0x0018 */ int ystep;
  /* 0x001c */ int ypos;
}; /* size: 0x0020 */

class phys_free_list<broad_phase_info>::T_internal
{
  /* 0x0000 */ long Padding_701[4];
  /* 0x0010 */ class broad_phase_info m_data;
  /* 0x0080 */ int m_ptr_list_index;
}; /* size: 0x0090 */

struct D3D10_QUERY_DESC
{
  /* 0x0000 */ enum D3D10_QUERY Query;
  /* 0x0004 */ unsigned int MiscFlags;
}; /* size: 0x0008 */

class phys_free_list<PhysObjUserData>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<PhysObjUserData>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<PhysObjUserData>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<PhysObjUserData>
{
  /* 0x0000 */ class phys_free_list<PhysObjUserData>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ struct PhysObjUserData* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

class phys_simple_link_list<contact_point_info>::iterator
{
  /* 0x0000 */ class contact_point_info* m_ptr;
}; /* size: 0x0004 */

struct GfxExposureVolume
{
  /* 0x0000 */ unsigned int control;
  /* 0x0004 */ float exposure;
  /* 0x0008 */ float luminanceIncreaseScale;
  /* 0x000c */ float luminanceDecreaseScale;
  /* 0x0010 */ float featherRange;
  /* 0x0014 */ float featherAdjust;
}; /* size: 0x0018 */

struct gjk_double_sphere_t
{
  /* 0x0000 */ long Padding_702[20];
  /* 0x0050 */ class phys_vec3 m_list_center[2];
  /* 0x0070 */ class phys_vec3 m_center;
  /* 0x0080 */ float m_list_radius[2];
  /* 0x0088 */ float m_geom_radius;
  /* 0x008c */ int m_count;
}; /* size: 0x0090 */

struct GfxCell
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ int aabbTreeCount;
  /* 0x001c */ struct GfxAabbTree* aabbTree;
  /* 0x0020 */ int portalCount;
  /* 0x0024 */ struct GfxPortal* portals;
  /* 0x0028 */ unsigned char reflectionProbeCount;
  /* 0x0029 */ char Padding_703[3];
  /* 0x002c */ unsigned char* reflectionProbes;
}; /* size: 0x0030 */

struct gjk_obb_t
{
  /* 0x0000 */ long Padding_704[20];
  /* 0x0050 */ class phys_vec3 m_dims;
  /* 0x0060 */ class phys_mat44 m_xform;
}; /* size: 0x00a0 */

struct stbi
{
  /* 0x0000 */ unsigned int img_x;
  /* 0x0004 */ unsigned int img_y;
  /* 0x0008 */ int img_n;
  /* 0x000c */ int img_out_n;
  /* 0x0010 */ struct _iobuf* img_file;
  /* 0x0014 */ int buflen;
  /* 0x0018 */ unsigned char buffer_start[128];
  /* 0x0098 */ int from_file;
  /* 0x009c */ unsigned char* img_buffer;
  /* 0x00a0 */ unsigned char* img_buffer_end;
}; /* size: 0x00a4 */

struct png
{
  /* 0x0000 */ struct stbi s;
  /* 0x00a4 */ unsigned char* idata;
  /* 0x00a8 */ unsigned char* expanded;
  /* 0x00ac */ unsigned char* out;
}; /* size: 0x00b0 */

struct gjk_query_input
{
  /* 0x0000 */ class phys_vec3 m_cg_aabb_min;
  /* 0x0010 */ class phys_vec3 m_cg_aabb_max;
  /* 0x0020 */ class phys_vec3 m_cg_position;
  /* 0x0030 */ class phys_vec3 m_cg_translation;
  /* 0x0040 */ class phys_vec3 m_ac_eps_vec;
  /* 0x0050 */ int m_contents;
  /* 0x0054 */ int m_pass_entity_num;
  /* 0x0058 */ int m_pass_owner_num;
  /* 0x005c */ BOOL m_is_server_thread;
  /* 0x005d */ char Padding_705[3];
  /* 0x0060 */ class colgeom_visitor_inlined_t<300>* m_proximity_data;
  /* 0x0064 */ int m_proximity_mask;
  /* 0x0068 */ unsigned int m_gjk_query_flags;
  /* 0x006c */ class phys_link_list<gjk_geom_info_t> m_geom_skip_list;
  /* 0x0078 */ long __PADDING__[2];
}; /* size: 0x0080 */

struct gjk_double_sphere_t::csi
{
  /* 0x0000 */ class phys_vec3 m_normal;
  /* 0x0010 */ int m_indices[3];
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

struct r_SkinConditions
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long outOfSkinnedCachedVerts : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long almostoutOfSkinnedCachedVerts : 1; /* bit position: 1 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long allbits;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct GfxWorldDpvsPlanes
{
  /* 0x0000 */ int cellCount;
  /* 0x0004 */ struct cplane_s* planes;
  /* 0x0008 */ unsigned short* nodes;
  /* 0x000c */ unsigned int* sceneEntCellBits;
}; /* size: 0x0010 */

struct GfxStaticModelLmapVertexInfo
{
  /* 0x0000 */ unsigned int* lmapVertexColors;
  /* 0x0004 */ struct ID3D11Buffer* lmapVertexColorsVB;
  /* 0x0008 */ unsigned short numLmapVertexColors;
  /* 0x000a */ char __PADDING__[2];
}; /* size: 0x000c */

struct phys_transient_allocator::block_header
{
  /* 0x0000 */ unsigned int m_block_size;
  /* 0x0004 */ unsigned int m_block_alignment;
  /* 0x0008 */ struct phys_transient_allocator::block_header* m_next_block;
}; /* size: 0x000c */

struct GfxPackedPlacement
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ union vec3_t axis[3];
  /* 0x0030 */ float scale;
}; /* size: 0x0034 */

struct GfxLightingSHQuantized
{
  /* 0x0000 */ unsigned short V0[4];
  /* 0x0008 */ unsigned short V1[4];
  /* 0x0010 */ unsigned short V2[4];
}; /* size: 0x0018 */

struct GfxStaticModelDrawInst
{
  /* 0x0000 */ float cullDist;
  /* 0x0004 */ struct GfxPackedPlacement placement;
  /* 0x0038 */ struct XModel* model;
  /* 0x003c */ int flags;
  /* 0x0040 */ float invScaleSq;
  /* 0x0044 */ unsigned short lightingHandle;
  /* 0x0046 */ unsigned short colorsIndex;
  /* 0x0048 */ struct GfxLightingSHQuantized lightingSH;
  /* 0x0060 */ unsigned char primaryLightIndex;
  /* 0x0061 */ unsigned char visibility;
  /* 0x0062 */ unsigned char reflectionProbeIndex;
  /* 0x0063 */ char Padding_706;
  /* 0x0064 */ unsigned int smid;
  /* 0x0068 */ struct GfxStaticModelLmapVertexInfo lmapVertexInfo[4];
}; /* size: 0x0098 */

struct Glass
{
  /* 0x0000 */ unsigned int numCellIndices;
  /* 0x0004 */ unsigned short cellIndices[6];
  /* 0x0010 */ struct GlassDef* glassDef;
  /* 0x0014 */ unsigned int index;
  /* 0x0018 */ unsigned int brushModel;
  /* 0x001c */ union vec3_t origin;
  /* 0x0028 */ union vec3_t angles;
  /* 0x0034 */ union vec3_t absmin;
  /* 0x0040 */ union vec3_t absmax;
  /* 0x004c */ BOOL isPlanar;
  /* 0x004d */ unsigned char numOutlineVerts;
  /* 0x004e */ unsigned char binormalSign;
  /* 0x004f */ char Padding_707;
  /* 0x0050 */ union vec2_t* outline;
  /* 0x0054 */ union vec3_t outlineAxis[3];
  /* 0x0078 */ union vec3_t outlineOrigin;
  /* 0x0084 */ float uvScale;
  /* 0x0088 */ float thickness;
}; /* size: 0x008c */

struct DXGI_OUTPUT_DESC
{
  /* 0x0000 */ wchar_t DeviceName[32];
  /* 0x0040 */ struct tagRECT DesktopCoordinates;
  /* 0x0050 */ int AttachedToDesktop;
  /* 0x0054 */ enum DXGI_MODE_ROTATION Rotation;
  /* 0x0058 */ struct HMONITOR__* Monitor;
}; /* size: 0x005c */

struct GlassDef
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int maxHealth;
  /* 0x0008 */ float thickness;
  /* 0x000c */ float minShardSize;
  /* 0x0010 */ float maxShardSize;
  /* 0x0014 */ float shardLifeProbablility;
  /* 0x0018 */ int maxShards;
  /* 0x001c */ struct Material* pristineMaterial;
  /* 0x0020 */ struct Material* crackedMaterial;
  /* 0x0024 */ struct Material* shardMaterial;
  /* 0x0028 */ const char* crackSound;
  /* 0x002c */ const char* shatterShound;
  /* 0x0030 */ const char* autoShatterShound;
  /* 0x0034 */ const struct FxEffectDef* crackEffect;
  /* 0x0038 */ const struct FxEffectDef* shatterEffect;
}; /* size: 0x003c */

struct cachedClient_s
{
  /* 0x0000 */ int playerStateExists;
  /* 0x0004 */ long Padding_708;
  /* 0x0008 */ struct clientState_s cs;
  /* 0x0128 */ struct playerState_s ps;
}; /* size: 0x2b30 */

struct SortData
{
  /* 0x0000 */ enum scriptInstance_t inst;
  /* 0x0004 */ int parentType;
  /* 0x0008 */ unsigned int* names;
  /* 0x000c */ unsigned int* localIds;
}; /* size: 0x0010 */

struct DXGI_RGB
{
  /* 0x0000 */ float Red;
  /* 0x0004 */ float Green;
  /* 0x0008 */ float Blue;
}; /* size: 0x000c */

class phys_assert_info
{
  /* 0x0000 */ int m_hits_total_count;
  /* 0x0004 */ int m_hits_frame_count;
  /* 0x0008 */ int m_max_hits_total;
  /* 0x000c */ int m_max_hits_per_frame;
  /* 0x0010 */ BOOL m_use_warnings_only;
  /* 0x0011 */ char Padding_709[3];
  /* 0x0014 */ class phys_assert_info* m_next;
}; /* size: 0x0018 */

struct GSC_FIXUP_ITEM
{
  /* 0x0000 */ unsigned long offset;
  /* 0x0004 */ unsigned long address;
}; /* size: 0x0008 */

struct GfxWaterBuffer
{
  /* 0x0000 */ unsigned int bufferSize;
  /* 0x0004 */ union vec4_t* buffer;
}; /* size: 0x0008 */

struct gjk_aabb_t
{
  /* 0x0000 */ long Padding_710[20];
  /* 0x0050 */ class phys_vec3 m_center_local;
  /* 0x0060 */ class phys_vec3 m_dims;
  /* 0x0070 */ const struct cbrush_t* m_brush;
  /* 0x0074 */ long __PADDING__[3];
}; /* size: 0x0080 */

struct GfxDebugPlume
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ union vec4_t color;
  /* 0x001c */ int score;
  /* 0x0020 */ int startTime;
  /* 0x0024 */ int duration;
}; /* size: 0x0028 */

class broad_phase_environment_query_input
{
  /* 0x0000 */ class phys_vec3 trace_aabb_min_wace;
  /* 0x0010 */ class phys_vec3 trace_aabb_max_wace;
  /* 0x0020 */ class phys_vec3 trace_translation;
  /* 0x0030 */ unsigned int env_collision_flags;
}; /* size: 0x0040 */

struct LerpBone
{
  /* 0x0000 */ int parentBone;
  /* 0x0004 */ unsigned char animBone;
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

struct BulletFireParams
{
  /* 0x0000 */ int weaponEntIndex;
  /* 0x0004 */ int ignoreEntIndex;
  /* 0x0008 */ float damageMultiplier;
  /* 0x000c */ int methodOfDeath;
  /* 0x0010 */ union vec3_t origStart;
  /* 0x001c */ union vec3_t start;
  /* 0x0028 */ union vec3_t end;
  /* 0x0034 */ union vec3_t dir;
}; /* size: 0x0040 */

class phys_simple_allocator<generic_avl_map_node_t>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

class phys_link_list<contact_point_info>
{
  /* 0x0000 */ class contact_point_info* m_first;
  /* 0x0004 */ class contact_point_info** m_last_next_ptr;
  /* 0x0008 */ int m_alloc_count;
}; /* size: 0x000c */

class phys_contact_manifold_process
{
  /* 0x0000 */ class phys_mat44 contact_mat;
  /* 0x0040 */ class phys_mat44 cg1_to_rb2_xform;
  /* 0x0080 */ class phys_transient_allocator* m_cpi_allocator;
  /* 0x0084 */ class phys_link_list<contact_point_info> m_list_cpi;
  /* 0x0090 */ class contact_point_info* m_cpi;
  /* 0x0094 */ struct contact_manifold_mesh_point** m_list_isect_point;
  /* 0x0098 */ class rigid_body_constraint_contact* m_rbc_contact_search_tree_root;
  /* 0x009c */ long Padding_711;
  /* 0x00a0 */ class phys_contact_manifold cman1;
  /* 0x0100 */ class phys_contact_manifold cman2;
  /* 0x0160 */ int m_contact_point_count;
  /* 0x0164 */ class phys_memory_heap m_allocator;
  /* 0x0174 */ char m_allocator_memory[16384];
}; /* size: 0x4180 */

struct Bone
{
  /* 0x0000 */ int parentBone;
  /* 0x0004 */ unsigned char animBones[2];
  /* 0x0006 */ char Padding_712[2];
  /* 0x0008 */ int rigidBody;
  /* 0x000c */ float length;
  /* 0x0010 */ union vec3_t center;
}; /* size: 0x001c */

struct sunflare_t
{
  /* 0x0000 */ BOOL hasValidData;
  /* 0x0001 */ char Padding_713[3];
  /* 0x0004 */ struct Material* spriteMaterial;
  /* 0x0008 */ struct Material* flareMaterial;
  /* 0x000c */ float spriteSize;
  /* 0x0010 */ float flareMinSize;
  /* 0x0014 */ float flareMinDot;
  /* 0x0018 */ float flareMaxSize;
  /* 0x001c */ float flareMaxDot;
  /* 0x0020 */ float flareMaxAlpha;
  /* 0x0024 */ int flareFadeInTime;
  /* 0x0028 */ int flareFadeOutTime;
  /* 0x002c */ float blindMinDot;
  /* 0x0030 */ float blindMaxDot;
  /* 0x0034 */ float blindMaxDarken;
  /* 0x0038 */ int blindFadeInTime;
  /* 0x003c */ int blindFadeOutTime;
  /* 0x0040 */ float glareMinDot;
  /* 0x0044 */ float glareMaxDot;
  /* 0x0048 */ float glareMaxLighten;
  /* 0x004c */ int glareFadeInTime;
  /* 0x0050 */ int glareFadeOutTime;
  /* 0x0054 */ union vec3_t sunFxPosition;
}; /* size: 0x0060 */

struct cg_level_locals_t
{
  /* 0x0000 */ int scriptPrintChannel;
  /* 0x0004 */ struct SpawnVar spawnVar;
  /* 0x0a10 */ int triggerIndex;
  /* 0x0a14 */ struct trigger_info_t pendingTriggerList[256];
  /* 0x1614 */ struct trigger_info_t currentTriggerList[256];
  /* 0x2214 */ int pendingTriggerListSize;
  /* 0x2218 */ int currentTriggerListSize;
  /* 0x221c */ int entTriggerIndex[1792];
  /* 0x3e1c */ struct AITypeScript* aiTypes[255];
  /* 0x4218 */ struct ZBarrierType* zbarrierTypes[255];
  /* 0x4614 */ struct FootstepTableDef* player1stPerson;
  /* 0x4618 */ struct FootstepTableDef* player3rdPerson;
  /* 0x461c */ struct FootstepTableDef* player1stPersonQuiet;
  /* 0x4620 */ struct FootstepTableDef* player3rdPersonQuiet;
  /* 0x4624 */ struct FootstepTableDef* player3rdPersonLoud;
  /* 0x4628 */ struct FootstepTableDef* defaultAi;
  /* 0x462c */ struct FootstepTableDef* dogSteps;
  /* 0x4630 */ struct FootstepFXTableDef* defaultFootstepFX;
  /* 0x4634 */ union vec2_t mapLatLong;
  /* 0x463c */ union vec2_t mapLatLongOrigin;
}; /* size: 0x4644 */

class std::runtime_error
{
}; /* size: 0x000c */

struct phys_contact_manifold_process::isect_info
{
  /* 0x0000 */ class phys_contact_manifold* m_cman;
  /* 0x0004 */ struct contact_manifold_mesh_point** m_i;
  /* 0x0008 */ struct contact_manifold_mesh_point** m_next_i;
  /* 0x000c */ struct contact_manifold_mesh_point** m_last_i;
  /* 0x0010 */ class phys_vec2 m_edge;
}; /* size: 0x0018 */

struct debugFileInfo_t
{
  /* 0x0000 */ const char* filename;
  /* 0x0004 */ void* startAddr;
  /* 0x0008 */ void* endAddr;
  /* 0x000c */ unsigned char** lineStartAddr;
  /* 0x0010 */ int lineStartAddrCount;
  /* 0x0014 */ char* source;
  /* 0x0018 */ int sourceLen;
  /* 0x001c */ struct GSC_OBJGDB* gdb;
}; /* size: 0x0020 */

struct phys_contact_manifold_process::bridge
{
  /* 0x0000 */ class phys_vec2 m_intersection_p;
  /* 0x0008 */ struct contact_manifold_mesh_point** m_left_i;
  /* 0x000c */ struct contact_manifold_mesh_point** m_right_i;
}; /* size: 0x0010 */

class phys_inplace_avl_tree_node<phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal>
{
  /* 0x0000 */ struct phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal* m_left;
  /* 0x0004 */ struct phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal* m_right;
  /* 0x0008 */ int m_balance;
}; /* size: 0x000c */

struct phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal
{
  /* 0x0000 */ long Padding_714[32];
  /* 0x0080 */ class phys_inplace_avl_tree_node<phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal> m_avl_tree_node;
  /* 0x008c */ struct phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal* m_next_gjk_ci;
}; /* size: 0x0090 */

struct D3D10_INPUT_ELEMENT_DESC
{
  /* 0x0000 */ const char* SemanticName;
  /* 0x0004 */ unsigned int SemanticIndex;
  /* 0x0008 */ enum DXGI_FORMAT Format;
  /* 0x000c */ unsigned int InputSlot;
  /* 0x0010 */ unsigned int AlignedByteOffset;
  /* 0x0014 */ enum D3D10_INPUT_CLASSIFICATION InputSlotClass;
  /* 0x0018 */ unsigned int InstanceDataStepRate;
}; /* size: 0x001c */

struct phys_gjk_info::phys_gjk_set_info
{
  /* 0x0000 */ float m_lamda[4];
  /* 0x0010 */ int m_candidate;
}; /* size: 0x0014 */

class phys_free_list<NitrousVehicle>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<NitrousVehicle>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<NitrousVehicle>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<NitrousVehicle>
{
  /* 0x0000 */ class phys_free_list<NitrousVehicle>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ class NitrousVehicle* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

class gjk_unique_id_database_t
{
  /* 0x0000 */ unsigned int m_counter;
}; /* size: 0x0004 */

struct GfxWorldStreamInfo
{
  /* 0x0000 */ int aabbTreeCount;
  /* 0x0004 */ struct GfxStreamingAabbTree* aabbTrees;
  /* 0x0008 */ int leafRefCount;
  /* 0x000c */ int* leafRefs;
}; /* size: 0x0010 */

struct GfxWorldSun
{
  /* 0x0000 */ unsigned int control;
  /* 0x0004 */ union vec3_t angles;
  /* 0x0010 */ union vec4_t ambientColor;
  /* 0x0020 */ union vec4_t sunCd;
  /* 0x0030 */ union vec4_t sunCs;
  /* 0x0040 */ union vec4_t skyColor;
  /* 0x0050 */ float exposure;
}; /* size: 0x0054 */

struct SunLightParseParams
{
  /* 0x0000 */ char name[64];
  /* 0x0040 */ struct GfxWorldSun initWorldSun[1];
  /* 0x0094 */ float fogTransitionTime;
  /* 0x0098 */ struct GfxWorldFog initWorldFog[1];
}; /* size: 0x00d8 */

struct GfxSkyDynamicIntensity
{
  /* 0x0000 */ float angle0;
  /* 0x0004 */ float angle1;
  /* 0x0008 */ float factor0;
  /* 0x000c */ float factor1;
}; /* size: 0x0010 */

struct GfxWorldDpvsStatic
{
  /* 0x0000 */ unsigned int smodelCount;
  /* 0x0004 */ unsigned int staticSurfaceCount;
  /* 0x0008 */ unsigned int litSurfsBegin;
  /* 0x000c */ unsigned int litSurfsEnd;
  /* 0x0010 */ unsigned int litTransSurfsBegin;
  /* 0x0014 */ unsigned int litTransSurfsEnd;
  /* 0x0018 */ unsigned int emissiveOpaqueSurfsBegin;
  /* 0x001c */ unsigned int emissiveOpaqueSurfsEnd;
  /* 0x0020 */ unsigned int emissiveTransSurfsBegin;
  /* 0x0024 */ unsigned int emissiveTransSurfsEnd;
  /* 0x0028 */ unsigned int smodelVisDataCount;
  /* 0x002c */ unsigned int surfaceVisDataCount;
  /* 0x0030 */ unsigned char* smodelVisData[3];
  /* 0x003c */ unsigned char* surfaceVisData[3];
  /* 0x0048 */ unsigned char* smodelVisDataCameraSaved;
  /* 0x004c */ unsigned char* surfaceVisDataCameraSaved;
  /* 0x0050 */ unsigned short* sortedSurfIndex;
  /* 0x0054 */ struct GfxStaticModelInst* smodelInsts;
  /* 0x0058 */ struct GfxSurface* surfaces;
  /* 0x005c */ struct GfxStaticModelDrawInst* smodelDrawInsts;
  /* 0x0060 */ union GfxDrawSurf* surfaceMaterials;
  /* 0x0064 */ unsigned char* surfaceCastsSunShadow;
  /* 0x0068 */ unsigned char* surfaceCastsShadow;
  /* 0x006c */ unsigned char* smodelCastsShadow;
  /* 0x0070 */ volatile long usageCount;
}; /* size: 0x0074 */

struct GfxWorldDpvsDynamic
{
  /* 0x0000 */ unsigned int dynEntClientWordCount[2];
  /* 0x0008 */ unsigned int dynEntClientCount[2];
  /* 0x0010 */ unsigned int* dynEntCellBits[2];
  /* 0x0018 */ unsigned char* dynEntVisData[3][2];
  /* 0x0030 */ volatile long usageCount;
}; /* size: 0x0034 */

struct GfxWorld
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ const char* baseName;
  /* 0x0008 */ int planeCount;
  /* 0x000c */ int nodeCount;
  /* 0x0010 */ int surfaceCount;
  /* 0x0014 */ struct GfxWorldStreamInfo streamInfo;
  /* 0x0024 */ const char* skyBoxModel;
  /* 0x0028 */ struct SunLightParseParams sunParse;
  /* 0x0100 */ struct GfxLight* sunLight;
  /* 0x0104 */ unsigned int sunPrimaryLightIndex;
  /* 0x0108 */ unsigned int primaryLightCount;
  /* 0x010c */ unsigned int coronaCount;
  /* 0x0110 */ struct GfxLightCorona* coronas;
  /* 0x0114 */ unsigned int shadowMapVolumeCount;
  /* 0x0118 */ struct GfxShadowMapVolume* shadowMapVolumes;
  /* 0x011c */ unsigned int shadowMapVolumePlaneCount;
  /* 0x0120 */ struct GfxVolumePlane* shadowMapVolumePlanes;
  /* 0x0124 */ unsigned int exposureVolumeCount;
  /* 0x0128 */ struct GfxExposureVolume* exposureVolumes;
  /* 0x012c */ unsigned int exposureVolumePlaneCount;
  /* 0x0130 */ struct GfxVolumePlane* exposureVolumePlanes;
  /* 0x0134 */ unsigned int worldFogVolumeCount;
  /* 0x0138 */ struct GfxWorldFogVolume* worldFogVolumes;
  /* 0x013c */ unsigned int worldFogVolumePlaneCount;
  /* 0x0140 */ struct GfxVolumePlane* worldFogVolumePlanes;
  /* 0x0144 */ unsigned int worldFogModifierVolumeCount;
  /* 0x0148 */ struct GfxWorldFogModifierVolume* worldFogModifierVolumes;
  /* 0x014c */ unsigned int worldFogModifierVolumePlaneCount;
  /* 0x0150 */ struct GfxVolumePlane* worldFogModifierVolumePlanes;
  /* 0x0154 */ unsigned int lutVolumeCount;
  /* 0x0158 */ struct GfxLutVolume* lutVolumes;
  /* 0x015c */ unsigned int lutVolumePlaneCount;
  /* 0x0160 */ struct GfxVolumePlane* lutVolumePlanes;
  /* 0x0164 */ struct GfxSkyDynamicIntensity skyDynIntensity;
  /* 0x0174 */ struct GfxWorldDpvsPlanes dpvsPlanes;
  /* 0x0184 */ int cellBitsCount;
  /* 0x0188 */ struct GfxCell* cells;
  /* 0x018c */ struct GfxWorldDraw draw;
  /* 0x01d0 */ struct GfxLightGrid lightGrid;
  /* 0x0218 */ int modelCount;
  /* 0x021c */ struct GfxBrushModel* models;
  /* 0x0220 */ union vec3_t mins;
  /* 0x022c */ union vec3_t maxs;
  /* 0x0238 */ unsigned int checksum;
  /* 0x023c */ int materialMemoryCount;
  /* 0x0240 */ struct MaterialMemory* materialMemory;
  /* 0x0244 */ struct sunflare_t sun;
  /* 0x02a4 */ union vec4_t outdoorLookupMatrix[4];
  /* 0x02e4 */ struct GfxImage* outdoorImage;
  /* 0x02e8 */ unsigned int* cellCasterBits;
  /* 0x02ec */ struct GfxSceneDynModel* sceneDynModel;
  /* 0x02f0 */ struct GfxSceneDynBrush* sceneDynBrush;
  /* 0x02f4 */ unsigned int* primaryLightEntityShadowVis;
  /* 0x02f8 */ unsigned int* primaryLightDynEntShadowVis[2];
  /* 0x0300 */ unsigned int numSiegeSkinInsts;
  /* 0x0304 */ struct SSkinInstance* siegeSkinInsts;
  /* 0x0308 */ struct GfxShadowGeometry* shadowGeom;
  /* 0x030c */ struct GfxLightRegion* lightRegion;
  /* 0x0310 */ struct GfxWorldDpvsStatic dpvs;
  /* 0x0384 */ struct GfxWorldDpvsDynamic dpvsDyn;
  /* 0x03b8 */ float waterDirection;
  /* 0x03bc */ struct GfxWaterBuffer waterBuffers[2];
  /* 0x03cc */ const struct Material* waterMaterial;
  /* 0x03d0 */ const struct Material* coronaMaterial;
  /* 0x03d4 */ const struct Material* ropeMaterial;
  /* 0x03d8 */ const struct Material* lutMaterial;
  /* 0x03dc */ unsigned int numOccluders;
  /* 0x03e0 */ struct Occluder* occluders;
  /* 0x03e4 */ unsigned int numOutdoorBounds;
  /* 0x03e8 */ struct GfxOutdoorBounds* outdoorBounds;
  /* 0x03ec */ unsigned int heroLightCount;
  /* 0x03f0 */ unsigned int heroLightTreeCount;
  /* 0x03f4 */ struct GfxHeroLight* heroLights;
  /* 0x03f8 */ struct GfxHeroLightTree* heroLightTree;
  /* 0x03fc */ unsigned int lightingFlags;
  /* 0x0400 */ int lightingQuality;
}; /* size: 0x0404 */

struct gjk_polygon_cylinder_t::poly_verts
{
  /* 0x0000 */ float m_co[4];
  /* 0x0010 */ float m_si[4];
}; /* size: 0x0020 */

struct gjk_polygon_cylinder_t
{
  /* 0x0000 */ struct gjk_polygon_cylinder_t::poly_verts s_poly_verts;
  /* 0x0020 */ long Padding_715[12];
  /* 0x0050 */ class phys_vec3 m_center;
  /* 0x0060 */ float m_polygon_cylinder_radius;
  /* 0x0064 */ float m_capsule_radius;
  /* 0x0068 */ float m_half_height;
  /* 0x006c */ float m_geom_radius;
  /* 0x0070 */ float m_head_offset;
  /* 0x0074 */ float m_foot_offset;
  /* 0x0078 */ int m_mode;
  /* 0x007c */ long __PADDING__[1];
}; /* size: 0x0080 */

struct GfxLightCorona
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ float radius;
  /* 0x0010 */ union vec3_t color;
  /* 0x001c */ float intensity;
}; /* size: 0x0020 */

class phys_link_list<contact_point_info>::iterator;

struct phys_inplace_avl_tree<bpei_database_id,broad_phase_environment_info,broad_phase_environment_info::avl_tree_accessor>::stack_item
{
  /* 0x0000 */ class broad_phase_environment_info** m_node;
  /* 0x0004 */ int m_child;
}; /* size: 0x0008 */

struct GfxLightRegion
{
  /* 0x0000 */ unsigned int hullCount;
  /* 0x0004 */ struct GfxLightRegionHull* hulls;
}; /* size: 0x0008 */

struct IXAudio2EngineCallback
{
}; /* size: 0x0004 */

struct qtime_s
{
  /* 0x0000 */ int tm_sec;
  /* 0x0004 */ int tm_min;
  /* 0x0008 */ int tm_hour;
  /* 0x000c */ int tm_mday;
  /* 0x0010 */ int tm_mon;
  /* 0x0014 */ int tm_year;
  /* 0x0018 */ int tm_wday;
  /* 0x001c */ int tm_yday;
  /* 0x0020 */ int tm_isdst;
}; /* size: 0x0024 */

class rigid_body_constraint
{
  /* 0x0000 */ class rigid_body* b1;
  /* 0x0004 */ class rigid_body* b2;
  /* 0x0008 */ class rigid_body_constraint* m_next;
}; /* size: 0x000c */

struct tWAVEFORMATEX
{
  /* 0x0000 */ unsigned short wFormatTag;
  /* 0x0002 */ unsigned short nChannels;
  /* 0x0004 */ unsigned long nSamplesPerSec;
  /* 0x0008 */ unsigned long nAvgBytesPerSec;
  /* 0x000c */ unsigned short nBlockAlign;
  /* 0x000e */ unsigned short wBitsPerSample;
  /* 0x0010 */ unsigned short cbSize;
}; /* size: 0x0012 */

struct XMA2WAVEFORMATEX
{
  /* 0x0000 */ struct tWAVEFORMATEX wfx;
  /* 0x0012 */ unsigned short NumStreams;
  /* 0x0014 */ unsigned long ChannelMask;
  /* 0x0018 */ unsigned long SamplesEncoded;
  /* 0x001c */ unsigned long BytesPerBlock;
  /* 0x0020 */ unsigned long PlayBegin;
  /* 0x0024 */ unsigned long PlayLength;
  /* 0x0028 */ unsigned long LoopBegin;
  /* 0x002c */ unsigned long LoopLength;
  /* 0x0030 */ unsigned char LoopCount;
  /* 0x0031 */ unsigned char EncoderVersion;
  /* 0x0032 */ unsigned short BlockCount;
}; /* size: 0x0034 */

struct unz_global_info_s
{
  /* 0x0000 */ unsigned long number_entry;
  /* 0x0004 */ unsigned long size_comment;
}; /* size: 0x0008 */

struct unz_file_info_s
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long version_needed;
  /* 0x0008 */ unsigned long flag;
  /* 0x000c */ unsigned long compression_method;
  /* 0x0010 */ unsigned long dosDate;
  /* 0x0014 */ unsigned long crc;
  /* 0x0018 */ unsigned long compressed_size;
  /* 0x001c */ unsigned long uncompressed_size;
  /* 0x0020 */ unsigned long size_filename;
  /* 0x0024 */ unsigned long size_file_extra;
  /* 0x0028 */ unsigned long size_file_comment;
  /* 0x002c */ unsigned long disk_num_start;
  /* 0x0030 */ unsigned long internal_fa;
  /* 0x0034 */ unsigned long external_fa;
  /* 0x0038 */ struct tm_unz_s tmu_date;
}; /* size: 0x0050 */

struct unz_file_info_internal_s
{
  /* 0x0000 */ unsigned long offset_curfile;
}; /* size: 0x0004 */

struct unz_s
{
  /* 0x0000 */ struct _iobuf* file;
  /* 0x0004 */ struct unz_global_info_s gi;
  /* 0x000c */ unsigned long byte_before_the_zipfile;
  /* 0x0010 */ unsigned long num_file;
  /* 0x0014 */ unsigned long pos_in_central_dir;
  /* 0x0018 */ unsigned long current_file_ok;
  /* 0x001c */ unsigned long central_pos;
  /* 0x0020 */ unsigned long size_central_dir;
  /* 0x0024 */ unsigned long offset_central_dir;
  /* 0x0028 */ struct unz_file_info_s cur_file_info;
  /* 0x0078 */ struct unz_file_info_internal_s cur_file_info_internal;
  /* 0x007c */ struct file_in_zip_read_info_s* pfile_in_zip_read;
}; /* size: 0x0080 */

class phys_gjk_input
{
  /* 0x0000 */ class phys_vec3 m_cg1_translation;
  /* 0x0010 */ class phys_vec3 m_cg2_translation;
  /* 0x0020 */ float m_start_time;
  /* 0x0024 */ float m_end_time;
  /* 0x0028 */ const class phys_gjk_geom* gjk_cg1;
  /* 0x002c */ const class phys_gjk_geom* gjk_cg2;
  /* 0x0030 */ const class phys_mat44* cg1_to_world_xform;
  /* 0x0034 */ const class phys_mat44* cg2_to_world_xform;
  /* 0x0038 */ class phys_gjk_cache_info* gjk_ci;
  /* 0x003c */ float cg1_radius;
  /* 0x0040 */ float cg2_radius;
  /* 0x0044 */ float m_sep_thresh;
  /* 0x0048 */ BOOL m_intersection_test_only;
  /* 0x0049 */ BOOL m_continuous_collision;
}; /* size: 0x0050 */

struct serverStaticHeader_t
{
  /* 0x0000 */ struct client_t* clients;
  /* 0x0004 */ struct actor_t* actors;
  /* 0x0008 */ int time;
  /* 0x000c */ int physicsTime;
  /* 0x0010 */ int snapFlagServerBit;
  /* 0x0014 */ int packetBackupCount;
  /* 0x0018 */ int packetBackupMask;
  /* 0x001c */ struct svEntity_s* svEntities;
  /* 0x0020 */ int numNoDeltaEntities;
  /* 0x0024 */ int nextNoDeltaEntity;
  /* 0x0028 */ struct entityState_s* noDeltaEntities;
  /* 0x002c */ int nextSnapshotEntities;
  /* 0x0030 */ int numSnapshotEntities;
  /* 0x0034 */ struct entityState_s* snapshotEntities;
  /* 0x0038 */ int nextCachedSnapshotEntities;
  /* 0x003c */ int numCachedSnapshotEntities;
  /* 0x0040 */ struct archivedEntity_s* cachedSnapshotEntities;
  /* 0x0044 */ int numSnapshotMatchStates;
  /* 0x0048 */ int nextSnapshotMatchStates;
  /* 0x004c */ struct MatchState* snapshotMatchStates;
  /* 0x0050 */ int numCachedSnapshotMatchStates;
  /* 0x0054 */ int nextCachedSnapshotMatchStates;
  /* 0x0058 */ struct MatchState* cachedSnapshotMatchStates;
  /* 0x005c */ int numSnapshotClients;
  /* 0x0060 */ int nextSnapshotClients;
  /* 0x0064 */ struct clientState_s* snapshotClients;
  /* 0x0068 */ int numCachedSnapshotClients;
  /* 0x006c */ int nextCachedSnapshotClients;
  /* 0x0070 */ struct cachedClient_s* cachedSnapshotClients;
  /* 0x0074 */ int numSnapshotActors;
  /* 0x0078 */ int nextSnapshotActors;
  /* 0x007c */ struct actorState_s* snapshotActors;
  /* 0x0080 */ int numCachedSnapshotActors;
  /* 0x0084 */ int nextCachedSnapshotActors;
  /* 0x0088 */ struct cachedActor_s* cachedSnapshotActors;
  /* 0x008c */ union vec3_t mapCenter;
  /* 0x0098 */ union vec3_t mapCenterBoundsMin;
  /* 0x00a4 */ union vec3_t mapCenterBoundsMax;
  /* 0x00b0 */ unsigned char* archivedSnapshotBuffer;
  /* 0x00b4 */ struct cachedSnapshot_t* cachedSnapshotFrames;
  /* 0x00b8 */ int nextCachedSnapshotFrames;
  /* 0x00bc */ int nextArchivedSnapshotFrames;
  /* 0x00c0 */ int archivedEntityCount;
  /* 0x00c4 */ int num_entities;
  /* 0x00c8 */ int maxclients;
  /* 0x00cc */ int fps;
  /* 0x00d0 */ int clientArchive;
  /* 0x00d4 */ struct gentity_t* gentities;
  /* 0x00d8 */ int gentitySize;
  /* 0x00dc */ struct clientState_s* firstClientState;
  /* 0x00e0 */ struct actorState_s* firstActorState;
  /* 0x00e4 */ struct playerState_s* firstPlayerState;
  /* 0x00e8 */ struct MatchState* matchState;
  /* 0x00ec */ int clientSize;
  /* 0x00f0 */ int actorSize;
  /* 0x00f4 */ int serverFrameMS;
  /* 0x00f8 */ unsigned int pad[2];
}; /* size: 0x0100 */

struct SourceLookup
{
  /* 0x0000 */ unsigned int sourcePos;
  /* 0x0004 */ int type;
}; /* size: 0x0008 */

typedef struct _FLOATING_SAVE_AREA
{
  /* 0x0000 */ unsigned long ControlWord;
  /* 0x0004 */ unsigned long StatusWord;
  /* 0x0008 */ unsigned long TagWord;
  /* 0x000c */ unsigned long ErrorOffset;
  /* 0x0010 */ unsigned long ErrorSelector;
  /* 0x0014 */ unsigned long DataOffset;
  /* 0x0018 */ unsigned long DataSelector;
  /* 0x001c */ unsigned char RegisterArea[80];
  /* 0x006c */ unsigned long Cr0NpxState;
} FLOATING_SAVE_AREA, *PFLOATING_SAVE_AREA; /* size: 0x0070 */

typedef struct _CONTEXT
{
  /* 0x0000 */ unsigned long ContextFlags;
  /* 0x0004 */ unsigned long Dr0;
  /* 0x0008 */ unsigned long Dr1;
  /* 0x000c */ unsigned long Dr2;
  /* 0x0010 */ unsigned long Dr3;
  /* 0x0014 */ unsigned long Dr6;
  /* 0x0018 */ unsigned long Dr7;
  /* 0x001c */ struct _FLOATING_SAVE_AREA FloatSave;
  /* 0x008c */ unsigned long SegGs;
  /* 0x0090 */ unsigned long SegFs;
  /* 0x0094 */ unsigned long SegEs;
  /* 0x0098 */ unsigned long SegDs;
  /* 0x009c */ unsigned long Edi;
  /* 0x00a0 */ unsigned long Esi;
  /* 0x00a4 */ unsigned long Ebx;
  /* 0x00a8 */ unsigned long Edx;
  /* 0x00ac */ unsigned long Ecx;
  /* 0x00b0 */ unsigned long Eax;
  /* 0x00b4 */ unsigned long Ebp;
  /* 0x00b8 */ unsigned long Eip;
  /* 0x00bc */ unsigned long SegCs;
  /* 0x00c0 */ unsigned long EFlags;
  /* 0x00c4 */ unsigned long Esp;
  /* 0x00c8 */ unsigned long SegSs;
  /* 0x00cc */ unsigned char ExtendedRegisters[512];
} CONTEXT, *PCONTEXT; /* size: 0x02cc */

typedef struct _MINIDUMP_THREAD_CALLBACK
{
  /* 0x0000 */ unsigned long ThreadId;
  /* 0x0004 */ void* ThreadHandle;
  /* 0x0008 */ struct _CONTEXT Context;
  /* 0x02d4 */ unsigned long SizeOfContext;
  /* 0x02d8 */ unsigned __int64 StackBase;
  /* 0x02e0 */ unsigned __int64 StackEnd;
} MINIDUMP_THREAD_CALLBACK, *PMINIDUMP_THREAD_CALLBACK; /* size: 0x02e8 */

typedef struct _INTERNET_BUFFERSA
{
  /* 0x0000 */ unsigned long dwStructSize;
  /* 0x0004 */ struct _INTERNET_BUFFERSA* Next;
  /* 0x0008 */ const char* lpcszHeader;
  /* 0x000c */ unsigned long dwHeadersLength;
  /* 0x0010 */ unsigned long dwHeadersTotal;
  /* 0x0014 */ void* lpvBuffer;
  /* 0x0018 */ unsigned long dwBufferLength;
  /* 0x001c */ unsigned long dwBufferTotal;
  /* 0x0020 */ unsigned long dwOffsetLow;
  /* 0x0024 */ unsigned long dwOffsetHigh;
} INTERNET_BUFFERSA, *PINTERNET_BUFFERSA; /* size: 0x0028 */

struct XAUDIO2_FILTER_PARAMETERS
{
  /* 0x0000 */ enum XAUDIO2_FILTER_TYPE Type;
  /* 0x0004 */ float Frequency;
  /* 0x0008 */ float OneOverQ;
}; /* size: 0x000c */

struct FixedSizeAllocator<GlassShard *>::Block
{
  /* 0x0000 */ struct FixedSizeAllocator<GlassShard *>::Block* prev;
  /* 0x0004 */ struct FixedSizeAllocator<GlassShard *>::Block* next;
  /* 0x0008 */ unsigned int magic;
  /* 0x000c */ struct GlassShard* data;
}; /* size: 0x0010 */

struct WAVEFORMATEXTENSIBLE
{
  /* 0x0000 */ struct tWAVEFORMATEX Format;
  union
  {
    union
    {
      /* 0x0012 */ unsigned short wValidBitsPerSample;
      /* 0x0012 */ unsigned short wSamplesPerBlock;
      /* 0x0012 */ unsigned short wReserved;
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ Samples;
  /* 0x0014 */ unsigned long dwChannelMask;
  /* 0x0018 */ struct _GUID SubFormat;
}; /* size: 0x0028 */

struct XAUDIO2_DEVICE_DETAILS
{
  /* 0x0000 */ wchar_t DeviceID[256];
  /* 0x0200 */ wchar_t DisplayName[256];
  /* 0x0400 */ enum XAUDIO2_DEVICE_ROLE Role;
  /* 0x0404 */ struct WAVEFORMATEXTENSIBLE OutputFormat;
}; /* size: 0x042c */

struct IXAudio2MasteringVoice
{
}; /* size: 0x0004 */

class phys_auto_activate_callback
{
}; /* size: 0x0004 */

class std::reverse_iterator<std::_List_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> > > >;

struct sd_stream
{
  /* 0x0000 */ int used;
  /* 0x0004 */ const char* filename;
  /* 0x0008 */ struct sd_stream_buffer primeBuffer;
  /* 0x0040 */ struct sd_stream_buffer* ioBuffer;
  /* 0x0044 */ struct sd_stream_buffer* lastBuffer;
  /* 0x0048 */ struct sd_stream_buffer* buffers[2];
  /* 0x0050 */ int buffersSubmitted[2];
  /* 0x0058 */ unsigned int readOffset;
  /* 0x005c */ const char* primeData;
  /* 0x0060 */ unsigned int primeSize;
  /* 0x0064 */ const struct SndAssetBankEntry* entry;
  /* 0x0068 */ int fileHandle;
}; /* size: 0x006c */

struct sd_stream_preload
{
  /* 0x0000 */ const char* fileName;
  /* 0x0004 */ int fileHandle;
  /* 0x0008 */ unsigned int offset;
  /* 0x000c */ unsigned int size;
  /* 0x0010 */ unsigned int latencyMs;
}; /* size: 0x0014 */

struct sd_stream_globals
{
  /* 0x0000 */ struct sd_stream streamPool[20];
  /* 0x0870 */ struct sd_stream_buffer streamBufferPool[20];
  /* 0x0cd0 */ char* streamBlob;
  /* 0x0cd4 */ volatile long streamIoActive;
  /* 0x0cd8 */ unsigned int streamBuffersUsed;
  /* 0x0cdc */ unsigned int streamBuffersFree;
  /* 0x0ce0 */ unsigned int streamInUse;
  /* 0x0ce4 */ unsigned int streamStarvationCount;
  /* 0x0ce8 */ struct sd_stream_preload preloads[16];
}; /* size: 0x0e28 */

struct PathFindInput
{
  /* 0x0000 */ struct path_t* pPath;
  /* 0x0004 */ const union vec3_t* vStartPos;
  /* 0x0008 */ const union vec3_t* vGoalPos;
  /* 0x000c */ struct pathnode_t* pNodeFrom;
  /* 0x0010 */ struct pathnode_t* pNodeTo;
  /* 0x0014 */ int bAllowNegotiationLinks;
  /* 0x0018 */ int bAllowNegotiationHints;
  /* 0x001c */ int useChokePoints;
  /* 0x0020 */ int bIgnoreBadPlaces;
  /* 0x0024 */ int searchEntNum;
  /* 0x0028 */ enum team_t eTeam;
  /* 0x002c */ float physRadius;
  /* 0x0030 */ float physHeight;
}; /* size: 0x0034 */

struct std::_Pair_base<flameGeneric_s * *,flameGeneric_s * *>
{
  /* 0x0000 */ struct flameGeneric_s** first;
  /* 0x0004 */ struct flameGeneric_s** second;
}; /* size: 0x0008 */

typedef struct _MINIDUMP_USER_STREAM
{
  /* 0x0000 */ unsigned int Type;
  /* 0x0004 */ unsigned long BufferSize;
  /* 0x0008 */ void* Buffer;
} MINIDUMP_USER_STREAM, *PMINIDUMP_USER_STREAM; /* size: 0x000c */

class phys_free_list<broad_phase_group>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<broad_phase_group>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<broad_phase_group>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<broad_phase_group>
{
  /* 0x0000 */ class phys_free_list<broad_phase_group>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ class broad_phase_group* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

struct XAUDIO2_DEBUG_CONFIGURATION
{
  /* 0x0000 */ unsigned int TraceMask;
  /* 0x0004 */ unsigned int BreakMask;
  /* 0x0008 */ int LogThreadID;
  /* 0x000c */ int LogFileline;
  /* 0x0010 */ int LogFunctionName;
  /* 0x0014 */ int LogTiming;
}; /* size: 0x0018 */

struct GfxDebugPoly
{
  /* 0x0000 */ union vec4_t faceColor;
  /* 0x0010 */ BOOL faceDepthTest;
  /* 0x0011 */ char Padding_716[3];
  /* 0x0014 */ union vec4_t edgeColor;
  /* 0x0024 */ BOOL edgeDepthTest;
  /* 0x0025 */ char Padding_717[3];
  /* 0x0028 */ int firstVert;
  /* 0x002c */ int vertCount;
}; /* size: 0x0030 */

class phys_free_list<broad_phase_group>::iterator;

struct clients_rewind_context_t
{
  /* 0x0000 */ union vec3_t m_client_pos[18];
  /* 0x00d8 */ BOOL m_active;
  /* 0x00d9 */ char __PADDING__[3];
}; /* size: 0x00dc */

struct bbLoadoutData
{
  /* 0x0000 */ const char* primaryname;
  /* 0x0004 */ const char* primary;
  /* 0x0008 */ const char* primaryattachment1;
  /* 0x000c */ const char* primaryattachment2;
  /* 0x0010 */ const char* primaryattachment3;
  /* 0x0014 */ const char* primarycamo;
  /* 0x0018 */ const char* primaryreticle;
  /* 0x001c */ const char* primaryreticlecolor;
  /* 0x0020 */ const char* primarylens;
  /* 0x0024 */ const char* primaryemblem;
  /* 0x0028 */ const char* secondaryname;
  /* 0x002c */ const char* secondary;
  /* 0x0030 */ const char* secondaryattachment1;
  /* 0x0034 */ const char* secondaryattachment2;
  /* 0x0038 */ const char* secondaryattachment3;
  /* 0x003c */ const char* secondarycamo;
  /* 0x0040 */ const char* secondaryreticle;
  /* 0x0044 */ const char* secondaryreticlecolor;
  /* 0x0048 */ const char* secondarylens;
  /* 0x004c */ const char* secondaryemblem;
  /* 0x0050 */ const char* primarygrenade;
  /* 0x0054 */ const char* specialgrenade;
  /* 0x0058 */ int primarygrenadecount;
  /* 0x005c */ int specialgrenadecount;
  /* 0x0060 */ const char* killstreak1;
  /* 0x0064 */ const char* killstreak2;
  /* 0x0068 */ const char* killstreak3;
  /* 0x006c */ const char* killstreak4;
  /* 0x0070 */ const char* specialty1;
  /* 0x0074 */ const char* specialty2;
  /* 0x0078 */ const char* specialty3;
  /* 0x007c */ const char* specialty4;
  /* 0x0080 */ const char* specialty5;
  /* 0x0084 */ const char* specialty6;
}; /* size: 0x0088 */

struct ExtentBounds
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
}; /* size: 0x0018 */

struct MenuList
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int menuCount;
  /* 0x0008 */ struct menuDef_t** menus;
}; /* size: 0x000c */

struct $_TypeDescriptor$_extraBytes_40
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[40];
}; /* size: 0x0030 */

union sval_u
{
  union
  {
    /* 0x0000 */ unsigned char type;
    /* 0x0000 */ unsigned int stringValue;
    /* 0x0000 */ unsigned int idValue;
    /* 0x0000 */ float floatValue;
    /* 0x0000 */ int intValue;
    /* 0x0000 */ union sval_u* node;
    /* 0x0000 */ unsigned int sourcePosValue;
    /* 0x0000 */ const unsigned char* codePosValue;
    /* 0x0000 */ const char* debugString;
    /* 0x0000 */ struct scr_block_s* block;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct VariableCompileValue
{
  /* 0x0000 */ struct VariableValue value;
  /* 0x0008 */ union sval_u sourcePos;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

class ProfileLog
{
  /* 0x0000 */ enum bb_profilelog_id local_id;
}; /* size: 0x0004 */

struct TaskDefinition
{
  /* 0x0000 */ unsigned __int64 category;
  /* 0x0008 */ const char* name;
  /* 0x000c */ int payloadSize;
  /* 0x0010 */ void* completed_callback /* function */;
  /* 0x0014 */ void* failure_callback /* function */;
  /* 0x0018 */ void* localTask /* function */;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

struct FontIconAlias
{
  /* 0x0000 */ int aliasHash;
  /* 0x0004 */ int buttonHash;
}; /* size: 0x0008 */

class phys_link_list<gjk_geom_info_t>::iterator
{
  /* 0x0000 */ struct gjk_geom_info_t* m_ptr;
}; /* size: 0x0004 */

class bitarray<768>
{
  /* 0x0000 */ int array[24];
}; /* size: 0x0060 */

struct D3DX10_IMAGE_INFO
{
  /* 0x0000 */ unsigned int Width;
  /* 0x0004 */ unsigned int Height;
  /* 0x0008 */ unsigned int Depth;
  /* 0x000c */ unsigned int ArraySize;
  /* 0x0010 */ unsigned int MipLevels;
  /* 0x0014 */ unsigned int MiscFlags;
  /* 0x0018 */ enum DXGI_FORMAT Format;
  /* 0x001c */ enum D3D10_RESOURCE_DIMENSION ResourceDimension;
  /* 0x0020 */ enum D3DX10_IMAGE_FILE_FORMAT ImageFileFormat;
}; /* size: 0x0024 */

class query_brush_model_gjk_geom_visitor
{
  /* 0x0000 */ long Padding_718[32];
  /* 0x0080 */ class gjk_collision_visitor* m_allocator;
}; /* size: 0x0090 */

struct BModelDrawInfo
{
  /* 0x0000 */ unsigned short surfId;
}; /* size: 0x0002 */

class gjk_collision_visitor
{
}; /* size: 0x0004 */

struct half4
{
  union
  {
    struct
    {
      /* 0x0000 */ struct half x;
      /* 0x0002 */ struct half y;
      /* 0x0004 */ struct half z;
      /* 0x0006 */ struct half w;
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned __int64 v;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct sv_rewind_context_t
{
  /* 0x0000 */ struct gentity_t* m_ent_to_link;
  /* 0x0004 */ int m_mover_num;
  /* 0x0008 */ union vec3_t* m_origin;
  /* 0x000c */ union vec3_t* m_angles;
  /* 0x0010 */ union vec3_t m_origin_backup;
  /* 0x001c */ union vec3_t m_angles_backup;
}; /* size: 0x0028 */

struct ThreadDebugInfo
{
  /* 0x0000 */ unsigned char* pos[32];
  /* 0x0080 */ int posSize;
  /* 0x0084 */ float varUsage;
  /* 0x0088 */ float endonUsage;
}; /* size: 0x008c */

typedef struct _gscBuiltinProfileInfo_t
{
  union
  {
    /* 0x0000 */ void* func /* function */;
    /* 0x0000 */ void* method /* function */;
  }; /* size: 0x0004 */
  /* 0x0004 */ const char* name;
  /* 0x0008 */ struct gscProfileInfo_t profileInfo;
  /* 0x0014 */ struct _gscBuiltinProfileInfo_t* next;
} gscBuiltinProfileInfo_t, *PgscBuiltinProfileInfo_t; /* size: 0x0018 */

struct rigid_body_constraint_contact::avl_tree_accessor
{
}; /* size: 0x0001 */

class bdIPDiscoveryPacket
{
  /* 0x0000 */ unsigned char m_type;
  /* 0x0001 */ char Padding_719;
  /* 0x0002 */ unsigned short m_protocolVersion;
}; /* size: 0x0004 */

class phys_gjk_info
{
  /* 0x0000 */ class phys_mat44 cg2_to_cg1_xform;
  /* 0x0040 */ class phys_vec3 m_cg1_relative_translation_loc;
  /* 0x0050 */ float m_continuous_collision_lambda;
  /* 0x0054 */ long Padding_720[3];
  /* 0x0060 */ class phys_gjk_collision_info cg1_cinfo_loc;
  /* 0x0090 */ class phys_vec3 m_gjk_origin;
  /* 0x00a0 */ class phys_vec3 m_w_verts[4];
  /* 0x00e0 */ class phys_vec3 m_a_verts[4];
  /* 0x0120 */ class phys_vec3 m_b_verts[4];
  /* 0x0160 */ class phys_vec3 m_a_inds[4];
  /* 0x01a0 */ class phys_vec3 m_b_inds[4];
  /* 0x01e0 */ class phys_vec3 m_support_dir;
  /* 0x01f0 */ float m_geom_radii_sum;
  /* 0x01f4 */ int m_cc_reset_iter;
  /* 0x01f8 */ int m_flags;
  /* 0x01fc */ int m_w_set;
  /* 0x0200 */ int m_last_w_set;
  /* 0x0204 */ int m_gjk_iter;
  /* 0x0208 */ float m_gjk_sep_thresh;
  /* 0x020c */ float m_gjk_pen_thresh_sq;
  /* 0x0210 */ float m_upper_dist_sq;
  /* 0x0214 */ float m_lower_dist_sq;
  /* 0x0218 */ float m_dot_ij[4][4];
  /* 0x0258 */ struct phys_gjk_info::phys_gjk_set_info m_set_list[16];
}; /* size: 0x03a0 */

struct ProbedPage
{
  /* 0x0000 */ unsigned int page_start;
  /* 0x0004 */ unsigned int page_end;
  /* 0x0008 */ unsigned int after_previous_page_start;
  /* 0x000c */ unsigned int first_decoded_sample;
  /* 0x0010 */ unsigned int last_decoded_sample;
}; /* size: 0x0014 */

struct TraceExtents
{
  /* 0x0000 */ class hybrid_vector start;
  /* 0x0010 */ class hybrid_vector end;
  /* 0x0020 */ class hybrid_vector invDelta;
}; /* size: 0x0030 */

struct traceWork_t
{
  /* 0x0000 */ class hybrid_vector delta;
  /* 0x0010 */ class hybrid_vector midpoint;
  /* 0x0020 */ class hybrid_vector halfDelta;
  /* 0x0030 */ class hybrid_vector halfDeltaAbs;
  /* 0x0040 */ class hybrid_vector size;
  /* 0x0050 */ class hybrid_vector bounds[2];
  /* 0x0070 */ class hybrid_vector radiusOffset;
  /* 0x0080 */ struct TraceExtents extents;
  /* 0x00b0 */ float deltaLen;
  /* 0x00b4 */ float deltaLenSq;
  /* 0x00b8 */ int contents;
  /* 0x00bc */ BOOL isPoint;
  /* 0x00bd */ BOOL axialCullOnly;
  /* 0x00be */ char Padding_721[2];
  /* 0x00c0 */ float radius;
  /* 0x00c4 */ float offsetZ;
  /* 0x00c8 */ float boundingRadius;
  /* 0x00cc */ struct TraceThreadInfo threadInfo;
  /* 0x00e4 */ long __PADDING__[3];
}; /* size: 0x00f0 */

struct Codebook
{
  /* 0x0000 */ int dimensions;
  /* 0x0004 */ int entries;
  /* 0x0008 */ unsigned char* codeword_lengths;
  /* 0x000c */ float minimum_value;
  /* 0x0010 */ float delta_value;
  /* 0x0014 */ unsigned char value_bits;
  /* 0x0015 */ unsigned char lookup_type;
  /* 0x0016 */ unsigned char sequence_p;
  /* 0x0017 */ unsigned char sparse;
  /* 0x0018 */ unsigned int lookup_values;
  /* 0x001c */ float* multiplicands;
  /* 0x0020 */ unsigned int* codewords;
  /* 0x0024 */ short fast_huffman[1024];
  /* 0x0824 */ unsigned int* sorted_codewords;
  /* 0x0828 */ int* sorted_values;
  /* 0x082c */ int sorted_entries;
}; /* size: 0x0830 */

class phys_static_array<rigid_body_constraint_wheel *,4>::iterator;

class phys_link_list_base<phys_collision_pair>
{
  /* 0x0000 */ class phys_collision_pair* m_next_link;
}; /* size: 0x0004 */

class phys_free_list<rigid_body_constraint_custom_orientation>::iterator
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base* m_ptr;
}; /* size: 0x0004 */

class broad_phase_memory
{
  /* 0x0000 */ class tlAtomicMutex g_bp_auto_activate_mutex;
  /* 0x0010 */ class tlAtomicReadWriteMutex g_bp_gjk_cache_mutex;
  /* 0x0028 */ class phys_heap_gjk_cache_system_avl_tree g_phys_gjk_cache_system;
  /* 0x0038 */ class phys_free_list<broad_phase_info> g_list_broad_phase_info;
  /* 0x044c */ class phys_free_list<broad_phase_group> g_list_broad_phase_group;
  /* 0x0860 */ class phys_free_list<broad_phase_collision_pair> g_list_broad_phase_collision_pair;
  /* 0x0c74 */ class bpei_database_t g_bpei_database;
  /* 0x0c84 */ class broad_phase_terrain_query_callback* g_broad_phase_terrain_query_callback;
  /* 0x0c88 */ class broad_phase_base* g_list_bpb;
  /* 0x0c8c */ int g_list_bpb_count;
  /* 0x0c90 */ class broad_phase_info* m_list_bpi_env;
  /* 0x0c94 */ int m_bpi_env_count;
  /* 0x0c98 */ int m_bpg_env_count;
  /* 0x0c9c */ int m_bpg_env_bpi_count;
  /* 0x0ca0 */ int m_bpi_env_no_database_count;
  /* 0x0ca4 */ int m_memory_high_water;
  /* 0x0ca8 */ class phys_link_list<phys_collision_pair> g_list_phys_collide_data;
  /* 0x0cb4 */ class phys_transient_allocator g_collision_memory_buffer;
  /* 0x0ccc */ class phys_surface_type_info* g_surface_type_info_database;
  /* 0x0cd0 */ int m_max_num_surface_types;
  /* 0x0cd4 */ int m_max_num_surface_type_infos;
}; /* size: 0x0cd8 */

struct GlassShardMeshVertex
{
  /* 0x0000 */ unsigned char pos;
  /* 0x0001 */ unsigned char norm;
}; /* size: 0x0002 */

struct pointtrace_t
{
  /* 0x0000 */ struct TraceExtents extents;
  /* 0x0030 */ const struct IgnoreEntParams* ignoreEntParams;
  /* 0x0034 */ int contentmask;
  /* 0x0038 */ int bLocational;
  /* 0x003c */ unsigned char* priorityMap;
}; /* size: 0x0040 */

struct phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal::avl_tree_accessor
{
}; /* size: 0x0001 */

struct gjk_trace_input_t
{
  /* 0x0000 */ const struct gjk_base_t* m_cg;
  /* 0x0004 */ float m_gjk_ac_eps;
  /* 0x0008 */ BOOL m_keep_all_collisions;
  /* 0x0009 */ BOOL m_exit_on_penetration;
  /* 0x000a */ char Padding_722[2];
  /* 0x000c */ float m_extra_time;
  /* 0x0010 */ float m_skip_sentients;
  /* 0x0014 */ class phys_heap_gjk_cache_system_avl_tree* m_gjk_cache;
  /* 0x0018 */ struct gjk_query_output* m_query_output;
  /* 0x001c */ struct gjkcc_info* m_gcci;
  /* 0x0020 */ struct gjk_query_input m_query_input;
  /* 0x00a0 */ class phys_transient_allocator* m_allocator;
  /* 0x00a4 */ long __PADDING__[3];
}; /* size: 0x00b0 */

struct MaterialUsage
{
  /* 0x0000 */ int memory;
  /* 0x0004 */ struct VertUsage* verts;
  /* 0x0008 */ struct Material* material;
}; /* size: 0x000c */

struct GlassesServer
{
  /* 0x0000 */ int nextShatterTime;
  /* 0x0004 */ int shatterIntervalsMS;
  /* 0x0008 */ BOOL inited;
  /* 0x0009 */ char Padding_723[3];
  /* 0x000c */ unsigned int numGlasses;
  /* 0x0010 */ struct GlassServer glasses[1000];
  /* 0xabf0 */ const struct dvar_t* damageMultiplier;
}; /* size: 0xabf4 */

struct actors_rewind_context_t
{
  /* 0x0000 */ union vec3_t m_actor_pos[32];
  /* 0x0180 */ union vec3_t m_actor_angles[32];
  /* 0x0300 */ BOOL m_active;
  /* 0x0301 */ char __PADDING__[3];
}; /* size: 0x0304 */

struct scr_const_t
{
  /* 0x0000 */ unsigned short _;
  /* 0x0002 */ unsigned short active;
  /* 0x0004 */ unsigned short spawn;
  /* 0x0006 */ unsigned short exit;
  /* 0x0008 */ unsigned short aim_bone;
  /* 0x000a */ unsigned short aim_highest_bone;
  /* 0x000c */ unsigned short aim_vis_bone;
  /* 0x000e */ unsigned short alert;
  /* 0x0010 */ unsigned short all;
  /* 0x0012 */ unsigned short allies;
  /* 0x0014 */ unsigned short ambush;
  /* 0x0016 */ unsigned short ambush_nodes_only;
  /* 0x0018 */ unsigned short angles;
  /* 0x001a */ unsigned short any_exposed_nodes_only;
  /* 0x001c */ unsigned short arc_min_pitch;
  /* 0x001e */ unsigned short arc_max_pitch;
  /* 0x0020 */ unsigned short arc_min_yaw;
  /* 0x0022 */ unsigned short arc_max_yaw;
  /* 0x0024 */ unsigned short asleep;
  /* 0x0026 */ unsigned short axis;
  /* 0x0028 */ unsigned short bad_path;
  /* 0x002a */ unsigned short begin_firing;
  /* 0x002c */ unsigned short unknown_location;
  /* 0x002e */ unsigned short cancel_location;
  /* 0x0030 */ unsigned short confirm_location;
  /* 0x0032 */ unsigned short deployed_turret;
  /* 0x0034 */ unsigned short combat;
  /* 0x0036 */ unsigned short cover;
  /* 0x0038 */ unsigned short crouch;
  /* 0x003a */ unsigned short current;
  /* 0x003c */ unsigned short damage;
  /* 0x003e */ unsigned short deathshield;
  /* 0x0040 */ unsigned short damage_afterdeath;
  /* 0x0042 */ unsigned short dead;
  /* 0x0044 */ unsigned short death;
  /* 0x0046 */ unsigned short disconnect;
  /* 0x0048 */ unsigned short death_or_disconnect;
  /* 0x004a */ unsigned short detonate;
  /* 0x004c */ unsigned short direct;
  /* 0x004e */ unsigned short dlight;
  /* 0x0050 */ unsigned short done;
  /* 0x0052 */ unsigned short dropweapon;
  /* 0x0054 */ unsigned short empty;
  /* 0x0056 */ unsigned short end_firing;
  /* 0x0058 */ unsigned short enter_vehicle;
  /* 0x005a */ unsigned short entity;
  /* 0x005c */ unsigned short exit_vehicle;
  /* 0x005e */ unsigned short exposed_nodes_only;
  /* 0x0060 */ unsigned short change_seat;
  /* 0x0062 */ unsigned short vehicle_death;
  /* 0x0064 */ unsigned short explode;
  /* 0x0066 */ unsigned short failed;
  /* 0x0068 */ unsigned short free;
  /* 0x006a */ unsigned short fraction;
  /* 0x006c */ unsigned short goal;
  /* 0x006e */ unsigned short goal_changed;
  /* 0x0070 */ unsigned short goal_yaw;
  /* 0x0072 */ unsigned short grenade;
  /* 0x0074 */ unsigned short grenadedanger;
  /* 0x0076 */ unsigned short grenade_flee;
  /* 0x0078 */ unsigned short grenade_fire;
  /* 0x007a */ unsigned short grenade_launcher_fire;
  /* 0x007c */ unsigned short grenade_pullback;
  /* 0x007e */ unsigned short grenade_throwback;
  /* 0x0080 */ unsigned short stationary;
  /* 0x0082 */ unsigned short grenade_stuck;
  /* 0x0084 */ unsigned short grenade_bounce;
  /* 0x0086 */ unsigned short hero;
  /* 0x0088 */ unsigned short info_notnull;
  /* 0x008a */ unsigned short invisible;
  /* 0x008c */ unsigned short j_gun;
  /* 0x008e */ unsigned short key1;
  /* 0x0090 */ unsigned short key2;
  /* 0x0092 */ unsigned short killanimscript;
  /* 0x0094 */ unsigned short left;
  /* 0x0096 */ unsigned short left_tread;
  /* 0x0098 */ unsigned short light;
  /* 0x009a */ unsigned short missile_fire;
  /* 0x009c */ unsigned short missile_boost;
  /* 0x009e */ unsigned short movedone;
  /* 0x00a0 */ unsigned short multikill;
  /* 0x00a2 */ unsigned short next_node;
  /* 0x00a4 */ unsigned short no_cover;
  /* 0x00a6 */ unsigned short only_cover;
  /* 0x00a8 */ unsigned short noclass;
  /* 0x00aa */ unsigned short node;
  /* 0x00ac */ unsigned short noncombat;
  /* 0x00ae */ unsigned short none;
  /* 0x00b0 */ unsigned short normal;
  /* 0x00b2 */ unsigned short origin;
  /* 0x00b4 */ unsigned short over;
  /* 0x00b6 */ unsigned short player;
  /* 0x00b8 */ unsigned short point_relative;
  /* 0x00ba */ unsigned short position;
  /* 0x00bc */ unsigned short projectile_impact;
  /* 0x00be */ unsigned short prone;
  /* 0x00c0 */ unsigned short result;
  /* 0x00c2 */ unsigned short right;
  /* 0x00c4 */ unsigned short right_tread;
  /* 0x00c6 */ unsigned short tank_armor;
  /* 0x00c8 */ unsigned short reload;
  /* 0x00ca */ unsigned short reload_start;
  /* 0x00cc */ unsigned short rocket;
  /* 0x00ce */ unsigned short rotatedone;
  /* 0x00d0 */ unsigned short script_brushmodel;
  /* 0x00d2 */ unsigned short script_model;
  /* 0x00d4 */ unsigned short script_origin;
  /* 0x00d6 */ unsigned short snd_enveffectsprio_level;
  /* 0x00d8 */ unsigned short snd_enveffectsprio_shellshock;
  /* 0x00da */ unsigned short snd_busvolprio_holdbreath;
  /* 0x00dc */ unsigned short snd_busvolprio_pain;
  /* 0x00de */ unsigned short snd_busvolprio_shellshock;
  /* 0x00e0 */ unsigned short stand;
  /* 0x00e2 */ unsigned short suppression;
  /* 0x00e4 */ unsigned short suppression_end;
  /* 0x00e6 */ unsigned short surfacetype;
  /* 0x00e8 */ unsigned short tag_aim_pitch;
  /* 0x00ea */ unsigned short tag_aim;
  /* 0x00ec */ unsigned short tag_aim_animated;
  /* 0x00ee */ unsigned short tag_brass;
  /* 0x00f0 */ unsigned short tag_brass1;
  /* 0x00f2 */ unsigned short tag_brass_2;
  /* 0x00f4 */ unsigned short tag_butt;
  /* 0x00f6 */ unsigned short tag_clip;
  /* 0x00f8 */ unsigned short tag_flash;
  /* 0x00fa */ unsigned short tag_explosive;
  /* 0x00fc */ unsigned short tag_flash1;
  /* 0x00fe */ unsigned short tag_flash2;
  /* 0x0100 */ unsigned short tag_flash3;
  /* 0x0102 */ unsigned short tag_flash4;
  /* 0x0104 */ unsigned short tag_flash_alt;
  /* 0x0106 */ unsigned short tag_fx;
  /* 0x0108 */ unsigned short tag_inhand;
  /* 0x010a */ unsigned short tag_knife_attach;
  /* 0x010c */ unsigned short tag_knife_fx;
  /* 0x010e */ unsigned short tag_bayonet;
  /* 0x0110 */ unsigned short tag_laser;
  /* 0x0112 */ unsigned short tag_origin;
  /* 0x0114 */ unsigned short tag_weapon;
  /* 0x0116 */ unsigned short tag_weapon1;
  /* 0x0118 */ unsigned short tag_player;
  /* 0x011a */ unsigned short tag_camera;
  /* 0x011c */ unsigned short tag_weapon_right;
  /* 0x011e */ unsigned short tag_weapon_left;
  /* 0x0120 */ unsigned short tag_stowed_back;
  /* 0x0122 */ unsigned short tag_weapon_chest;
  /* 0x0124 */ unsigned short tag_gasmask;
  /* 0x0126 */ unsigned short tag_gasmask2;
  /* 0x0128 */ unsigned short tag_sync;
  /* 0x012a */ unsigned short tag_wake;
  /* 0x012c */ unsigned short target_script_trigger;
  /* 0x012e */ unsigned short team3;
  /* 0x0130 */ unsigned short team_changed;
  /* 0x0132 */ unsigned short tempEntity;
  /* 0x0134 */ unsigned short top;
  /* 0x0136 */ unsigned short touch;
  /* 0x0138 */ unsigned short trigger;
  /* 0x013a */ unsigned short trigger_use;
  /* 0x013c */ unsigned short trigger_use_touch;
  /* 0x013e */ unsigned short trigger_damage;
  /* 0x0140 */ unsigned short trigger_lookat;
  /* 0x0142 */ unsigned short trigger_radius;
  /* 0x0144 */ unsigned short trigger_box;
  /* 0x0146 */ unsigned short trigger_box_use;
  /* 0x0148 */ unsigned short trigger_radius_use;
  /* 0x014a */ unsigned short truck_cam;
  /* 0x014c */ unsigned short turret_return_default_pos;
  /* 0x014e */ unsigned short turret_scan_start;
  /* 0x0150 */ unsigned short turret_scan_stop;
  /* 0x0152 */ unsigned short turret_target_aquired;
  /* 0x0154 */ unsigned short turret_target_lost;
  /* 0x0156 */ unsigned short turret_tow_fire;
  /* 0x0158 */ unsigned short turret_tow_unlink;
  /* 0x015a */ unsigned short weapon_change_on_turret;
  /* 0x015c */ unsigned short weapon_change;
  /* 0x015e */ unsigned short weapon_change_complete;
  /* 0x0160 */ unsigned short weapon_raising;
  /* 0x0162 */ unsigned short weapon_fired;
  /* 0x0164 */ unsigned short weapon_melee;
  /* 0x0166 */ unsigned short weapon_switch_started;
  /* 0x0168 */ unsigned short raise_riotshield;
  /* 0x016a */ unsigned short deploy_riotshield;
  /* 0x016c */ unsigned short pickup_riotshield;
  /* 0x016e */ unsigned short worldspawn;
  /* 0x0170 */ unsigned short flashbang;
  /* 0x0172 */ unsigned short flash;
  /* 0x0174 */ unsigned short smoke;
  /* 0x0176 */ unsigned short night_vision_on;
  /* 0x0178 */ unsigned short night_vision_off;
  /* 0x017a */ unsigned short back;
  /* 0x017c */ unsigned short back_low;
  /* 0x017e */ unsigned short back_mid;
  /* 0x0180 */ unsigned short back_up;
  /* 0x0182 */ unsigned short head;
  /* 0x0184 */ unsigned short j_mainroot;
  /* 0x0186 */ unsigned short neck;
  /* 0x0188 */ unsigned short pelvis;
  /* 0x018a */ unsigned short j_head;
  /* 0x018c */ unsigned short purchased;
  /* 0x018e */ unsigned short for_sale;
  /* 0x0190 */ unsigned short wrong_era;
  /* 0x0192 */ unsigned short blacklisted;
  /* 0x0194 */ unsigned short locked;
  /* 0x0196 */ unsigned short mod_unknown;
  /* 0x0198 */ unsigned short mod_pistol_bullet;
  /* 0x019a */ unsigned short mod_rifle_bullet;
  /* 0x019c */ unsigned short mod_grenade;
  /* 0x019e */ unsigned short mod_grenade_splash;
  /* 0x01a0 */ unsigned short mod_projectile;
  /* 0x01a2 */ unsigned short mod_projectile_splash;
  /* 0x01a4 */ unsigned short mod_melee;
  /* 0x01a6 */ unsigned short mod_bayonet;
  /* 0x01a8 */ unsigned short mod_head_shot;
  /* 0x01aa */ unsigned short mod_crush;
  /* 0x01ac */ unsigned short mod_telefrag;
  /* 0x01ae */ unsigned short mod_falling;
  /* 0x01b0 */ unsigned short mod_suicide;
  /* 0x01b2 */ unsigned short mod_trigger_hurt;
  /* 0x01b4 */ unsigned short mod_explosive;
  /* 0x01b6 */ unsigned short mod_impact;
  /* 0x01b8 */ unsigned short mod_burned;
  /* 0x01ba */ unsigned short mod_hit_by_object;
  /* 0x01bc */ unsigned short mod_drown;
  /* 0x01be */ unsigned short mod_gas;
  /* 0x01c0 */ unsigned short face;
  /* 0x01c2 */ unsigned short face_casual;
  /* 0x01c4 */ unsigned short face_alert;
  /* 0x01c6 */ unsigned short face_cqb;
  /* 0x01c8 */ unsigned short face_running;
  /* 0x01ca */ unsigned short face_shoot_single;
  /* 0x01cc */ unsigned short face_shoot_burst;
  /* 0x01ce */ unsigned short face_melee;
  /* 0x01d0 */ unsigned short face_react;
  /* 0x01d2 */ unsigned short face_talk;
  /* 0x01d4 */ unsigned short face_talk_long;
  /* 0x01d6 */ unsigned short face_pain;
  /* 0x01d8 */ unsigned short face_death;
  /* 0x01da */ unsigned short melee;
  /* 0x01dc */ unsigned short script_vehicle;
  /* 0x01de */ unsigned short script_vehicle_collision;
  /* 0x01e0 */ unsigned short script_vehicle_corpse;
  /* 0x01e2 */ unsigned short turret_fire;
  /* 0x01e4 */ unsigned short turret_on_target;
  /* 0x01e6 */ unsigned short gunner_turret_on_target;
  /* 0x01e8 */ unsigned short gunner_turret_overheat;
  /* 0x01ea */ unsigned short gunner_turret_stop_overheat;
  /* 0x01ec */ unsigned short turret_not_on_target;
  /* 0x01ee */ unsigned short turret_on_vistarget;
  /* 0x01f0 */ unsigned short turret_no_vis;
  /* 0x01f2 */ unsigned short turret_rotate_stopped;
  /* 0x01f4 */ unsigned short turret_rotate_moving;
  /* 0x01f6 */ unsigned short turret_deactivate;
  /* 0x01f8 */ unsigned short turretstatechange;
  /* 0x01fa */ unsigned short turretownerchange;
  /* 0x01fc */ unsigned short reached_node;
  /* 0x01fe */ unsigned short reached_end_node;
  /* 0x0200 */ unsigned short reached_wait_node;
  /* 0x0202 */ unsigned short reached_wait_speed;
  /* 0x0204 */ unsigned short near_goal;
  /* 0x0206 */ unsigned short veh_collision;
  /* 0x0208 */ unsigned short veh_predictedcollision;
  /* 0x020a */ unsigned short veh_inair;
  /* 0x020c */ unsigned short veh_landed;
  /* 0x020e */ unsigned short veh_suspension_limit_activated;
  /* 0x0210 */ unsigned short veh_engine_stutter;
  /* 0x0212 */ unsigned short veh_ejectoccupants;
  /* 0x0214 */ unsigned short veh_heightmesh_max;
  /* 0x0216 */ unsigned short veh_heightmesh_min;
  /* 0x0218 */ unsigned short veh_stuck;
  /* 0x021a */ unsigned short script_camera;
  /* 0x021c */ unsigned short begin;
  /* 0x021e */ unsigned short jumpcut;
  /* 0x0220 */ unsigned short playerBreathInSound;
  /* 0x0222 */ unsigned short playerBreathGaspSound;
  /* 0x0224 */ unsigned short playerBreathOutSound;
  /* 0x0226 */ unsigned short mantlesoundplayer;
  /* 0x0228 */ unsigned short meleeswipesoundplayer;
  /* 0x022a */ unsigned short dtplandsoundplayer;
  /* 0x022c */ unsigned short curve_nodehit;
  /* 0x022e */ unsigned short curve_start;
  /* 0x0230 */ unsigned short curve_end;
  /* 0x0232 */ unsigned short asphalt;
  /* 0x0234 */ unsigned short bark;
  /* 0x0236 */ unsigned short brick;
  /* 0x0238 */ unsigned short carpet;
  /* 0x023a */ unsigned short ceramic;
  /* 0x023c */ unsigned short cloth;
  /* 0x023e */ unsigned short concrete;
  /* 0x0240 */ unsigned short cushion;
  /* 0x0242 */ unsigned short dirt;
  /* 0x0244 */ unsigned short flesh;
  /* 0x0246 */ unsigned short foliage;
  /* 0x0248 */ unsigned short fruit;
  /* 0x024a */ unsigned short glass;
  /* 0x024c */ unsigned short grass;
  /* 0x024e */ unsigned short gravel;
  /* 0x0250 */ unsigned short ice;
  /* 0x0252 */ unsigned short metal;
  /* 0x0254 */ unsigned short mud;
  /* 0x0256 */ unsigned short paintedmetal;
  /* 0x0258 */ unsigned short paper;
  /* 0x025a */ unsigned short plaster;
  /* 0x025c */ unsigned short plastic;
  /* 0x025e */ unsigned short rock;
  /* 0x0260 */ unsigned short rubber;
  /* 0x0262 */ unsigned short sand;
  /* 0x0264 */ unsigned short snow;
  /* 0x0266 */ unsigned short water;
  /* 0x0268 */ unsigned short wood;
  /* 0x026a */ unsigned short tag_enter_driver;
  /* 0x026c */ unsigned short tag_enter_gunner1;
  /* 0x026e */ unsigned short tag_enter_gunner2;
  /* 0x0270 */ unsigned short tag_enter_gunner3;
  /* 0x0272 */ unsigned short tag_enter_gunner4;
  /* 0x0274 */ unsigned short tag_enter_passenger1;
  /* 0x0276 */ unsigned short tag_enter_passenger2;
  /* 0x0278 */ unsigned short tag_enter_passenger3;
  /* 0x027a */ unsigned short tag_enter_passenger4;
  /* 0x027c */ unsigned short tag_driver;
  /* 0x027e */ unsigned short tag_passenger1;
  /* 0x0280 */ unsigned short tag_passenger2;
  /* 0x0282 */ unsigned short tag_passenger3;
  /* 0x0284 */ unsigned short tag_passenger4;
  /* 0x0286 */ unsigned short tag_passenger5;
  /* 0x0288 */ unsigned short tag_passenger6;
  /* 0x028a */ unsigned short tag_gunner1;
  /* 0x028c */ unsigned short tag_gunner2;
  /* 0x028e */ unsigned short tag_gunner3;
  /* 0x0290 */ unsigned short tag_gunner4;
  /* 0x0292 */ unsigned short tag_gunner_barrel1;
  /* 0x0294 */ unsigned short tag_gunner_barrel2;
  /* 0x0296 */ unsigned short tag_gunner_barrel3;
  /* 0x0298 */ unsigned short tag_gunner_barrel4;
  /* 0x029a */ unsigned short tag_gunner_turret1;
  /* 0x029c */ unsigned short tag_gunner_turret2;
  /* 0x029e */ unsigned short tag_gunner_turret3;
  /* 0x02a0 */ unsigned short tag_gunner_turret4;
  /* 0x02a2 */ unsigned short tag_flash_gunner[8];
  /* 0x02b2 */ unsigned short tag_gunner_brass1;
  /* 0x02b4 */ unsigned short tag_gunner_brass1a;
  /* 0x02b6 */ unsigned short tag_gunner_brass2;
  /* 0x02b8 */ unsigned short tag_gunner_brass2a;
  /* 0x02ba */ unsigned short tag_gunner_hands1;
  /* 0x02bc */ unsigned short tag_wheel_front_left;
  /* 0x02be */ unsigned short tag_wheel_front_right;
  /* 0x02c0 */ unsigned short tag_wheel_back_left;
  /* 0x02c2 */ unsigned short tag_wheel_back_right;
  /* 0x02c4 */ unsigned short tag_wheel_middle_left;
  /* 0x02c6 */ unsigned short tag_wheel_middle_right;
  /* 0x02c8 */ unsigned short tag_wheel_front;
  /* 0x02ca */ unsigned short tag_wheel_back;
  /* 0x02cc */ unsigned short tag_main_rotor;
  /* 0x02ce */ unsigned short tag_tail_rotor;
  /* 0x02d0 */ unsigned short tag_main_rotor_blur;
  /* 0x02d2 */ unsigned short tag_main_rotor_static;
  /* 0x02d4 */ unsigned short tag_tail_rotor_blur;
  /* 0x02d6 */ unsigned short tag_tail_rotor_static;
  /* 0x02d8 */ unsigned short tag_rotor_fl_arm;
  /* 0x02da */ unsigned short tag_rotor_fr_arm;
  /* 0x02dc */ unsigned short tag_rotor_rl_arm;
  /* 0x02de */ unsigned short tag_rotor_rr_arm;
  /* 0x02e0 */ unsigned short tag_antenna1;
  /* 0x02e2 */ unsigned short tag_antenna2;
  /* 0x02e4 */ unsigned short host_sucks_end_game;
  /* 0x02e6 */ unsigned short freelook;
  /* 0x02e8 */ unsigned short localplayers;
  /* 0x02ea */ unsigned short tag_enter_right;
  /* 0x02ec */ unsigned short tag_enter_left;
  /* 0x02ee */ unsigned short tag_enter_back;
  /* 0x02f0 */ unsigned short tag_popout;
  /* 0x02f2 */ unsigned short tag_body;
  /* 0x02f4 */ unsigned short tag_turret;
  /* 0x02f6 */ unsigned short tag_turret_base;
  /* 0x02f8 */ unsigned short tag_barrel;
  /* 0x02fa */ unsigned short tag_barrel_recoil;
  /* 0x02fc */ unsigned short tag_engine_left;
  /* 0x02fe */ unsigned short tag_engine_right;
  /* 0x0300 */ unsigned short tag_spin;
  /* 0x0302 */ unsigned short tag_minigun_right_barrel;
  /* 0x0304 */ unsigned short front_left;
  /* 0x0306 */ unsigned short front_right;
  /* 0x0308 */ unsigned short back_left;
  /* 0x030a */ unsigned short back_right;
  /* 0x030c */ unsigned short middle_left;
  /* 0x030e */ unsigned short middle_right;
  /* 0x0310 */ unsigned short stuck_to_player;
  /* 0x0312 */ unsigned short stuck_to_shield;
  /* 0x0314 */ unsigned short auto_ai;
  /* 0x0316 */ unsigned short auto_nonai;
  /* 0x0318 */ unsigned short manual;
  /* 0x031a */ unsigned short manual_ai;
  /* 0x031c */ unsigned short scavenger;
  /* 0x031e */ unsigned short neutral;
  /* 0x0320 */ unsigned short team4;
  /* 0x0322 */ unsigned short team5;
  /* 0x0324 */ unsigned short team6;
  /* 0x0326 */ unsigned short team7;
  /* 0x0328 */ unsigned short team8;
  /* 0x032a */ unsigned short auto_change;
  /* 0x032c */ unsigned short call_vote;
  /* 0x032e */ unsigned short intermission;
  /* 0x0330 */ unsigned short manual_change;
  /* 0x0332 */ unsigned short menuresponse;
  /* 0x0334 */ unsigned short pistol;
  /* 0x0336 */ unsigned short plane_waypoint;
  /* 0x0338 */ unsigned short playing;
  /* 0x033a */ unsigned short spectator;
  /* 0x033c */ unsigned short spectator_cycle;
  /* 0x033e */ unsigned short vote;
  /* 0x0340 */ unsigned short sprint_begin;
  /* 0x0342 */ unsigned short sprint_end;
  /* 0x0344 */ unsigned short tag_gunner_pov;
  /* 0x0346 */ unsigned short tag_flamer_pilot_light;
  /* 0x0348 */ unsigned short tag_fx_front;
  /* 0x034a */ unsigned short tag_fx_right;
  /* 0x034c */ unsigned short tag_fx_left;
  /* 0x034e */ unsigned short flared_or_tabuned_death;
  /* 0x0350 */ unsigned short destroyed_vehicle;
  /* 0x0352 */ unsigned short vehicle_driver;
  /* 0x0354 */ unsigned short died_in_turret;
  /* 0x0356 */ unsigned short force_crouch;
  /* 0x0358 */ unsigned short trigger_use_doubletap;
  /* 0x035a */ unsigned short doubletap_detonate;
  /* 0x035c */ unsigned short dtp_through_glass;
  /* 0x035e */ unsigned short dtp_start;
  /* 0x0360 */ unsigned short dtp_end;
  /* 0x0362 */ unsigned short mantle_start;
  /* 0x0364 */ unsigned short moon_gravity;
  /* 0x0366 */ unsigned short draw;
  /* 0x0368 */ unsigned short remote_revive;
  /* 0x036a */ unsigned short begin_custom_anim;
  /* 0x036c */ unsigned short deathplant;
  /* 0x036e */ unsigned short zombie;
  /* 0x0370 */ unsigned short zombie_dog;
  /* 0x0372 */ unsigned short _custom;
  /* 0x0374 */ unsigned short angle_deltas;
  /* 0x0376 */ unsigned short bigdog;
  /* 0x0378 */ unsigned short bulletwhizby;
  /* 0x037a */ unsigned short dog;
  /* 0x037c */ unsigned short enemy;
  /* 0x037e */ unsigned short enemy_visible;
  /* 0x0380 */ unsigned short face_angle;
  /* 0x0382 */ unsigned short face_current;
  /* 0x0384 */ unsigned short face_default;
  /* 0x0386 */ unsigned short face_direction;
  /* 0x0388 */ unsigned short face_enemy;
  /* 0x038a */ unsigned short face_enemy_or_motion;
  /* 0x038c */ unsigned short face_enemy_or_motion_sidestep;
  /* 0x038e */ unsigned short face_goal;
  /* 0x0390 */ unsigned short face_motion;
  /* 0x0392 */ unsigned short face_point;
  /* 0x0394 */ unsigned short gravity;
  /* 0x0396 */ unsigned short groundEntChanged;
  /* 0x0398 */ unsigned short gunshot;
  /* 0x039a */ unsigned short obstacle;
  /* 0x039c */ unsigned short movemode;
  /* 0x039e */ unsigned short node_out_of_range;
  /* 0x03a0 */ unsigned short node_relinquished;
  /* 0x03a2 */ unsigned short node_taken;
  /* 0x03a4 */ unsigned short node_not_safe;
  /* 0x03a6 */ unsigned short noclip;
  /* 0x03a8 */ unsigned short nogravity;
  /* 0x03aa */ unsigned short slide;
  /* 0x03ac */ unsigned short nophysics;
  /* 0x03ae */ unsigned short pain;
  /* 0x03b0 */ unsigned short react;
  /* 0x03b2 */ unsigned short pos_deltas;
  /* 0x03b4 */ unsigned short run;
  /* 0x03b6 */ unsigned short runto_arrived;
  /* 0x03b8 */ unsigned short silenced_shot;
  /* 0x03ba */ unsigned short spawned;
  /* 0x03bc */ unsigned short start_move;
  /* 0x03be */ unsigned short stop;
  /* 0x03c0 */ unsigned short stop_soon;
  /* 0x03c2 */ unsigned short tag_eye;
  /* 0x03c4 */ unsigned short walk;
  /* 0x03c6 */ unsigned short world;
  /* 0x03c8 */ unsigned short zonly_physics;
  /* 0x03ca */ unsigned short down;
  /* 0x03cc */ unsigned short j_ankle_le;
  /* 0x03ce */ unsigned short j_ankle_ri;
  /* 0x03d0 */ unsigned short j_ball_le;
  /* 0x03d2 */ unsigned short j_ball_ri;
  /* 0x03d4 */ unsigned short j_palm_le;
  /* 0x03d6 */ unsigned short j_palm_ri;
  /* 0x03d8 */ unsigned short j_elbow_le;
  /* 0x03da */ unsigned short j_wrist_le;
  /* 0x03dc */ unsigned short broken;
  /* 0x03de */ unsigned short destructible;
  /* 0x03e0 */ unsigned short destructible_base_piece_death;
  /* 0x03e2 */ unsigned short breakafter;
  /* 0x03e4 */ unsigned short snapacknowledged;
  /* 0x03e6 */ unsigned short snap_processed;
  /* 0x03e8 */ unsigned short j_barrel;
  /* 0x03ea */ unsigned short j_counter;
  /* 0x03ec */ unsigned short j_dial_left;
  /* 0x03ee */ unsigned short j_dial_right;
  /* 0x03f0 */ unsigned short j_spinnerRF;
  /* 0x03f2 */ unsigned short j_spinnerLF;
  /* 0x03f4 */ unsigned short j_spinnerR1;
  /* 0x03f6 */ unsigned short j_spinnerL1;
  /* 0x03f8 */ unsigned short j_spinnerR2;
  /* 0x03fa */ unsigned short j_spinnerL2;
  /* 0x03fc */ unsigned short j_spinnerR3;
  /* 0x03fe */ unsigned short j_spinnerL3;
  /* 0x0400 */ unsigned short ca_disconnected;
  /* 0x0402 */ unsigned short ca_cinematic;
  /* 0x0404 */ unsigned short ca_uicinematic;
  /* 0x0406 */ unsigned short ca_logo;
  /* 0x0408 */ unsigned short ca_connecting;
  /* 0x040a */ unsigned short ca_challenging;
  /* 0x040c */ unsigned short ca_connected;
  /* 0x040e */ unsigned short ca_sendingstats;
  /* 0x0410 */ unsigned short ca_loading;
  /* 0x0412 */ unsigned short ca_primed;
  /* 0x0414 */ unsigned short ca_active;
  /* 0x0416 */ unsigned short ca_map_restart;
  /* 0x0418 */ unsigned short orientdone;
  /* 0x041a */ unsigned short menuchanged;
  /* 0x041c */ unsigned short unlink;
  /* 0x041e */ unsigned short init;
  /* 0x0420 */ unsigned short move;
  /* 0x0422 */ unsigned short traverse;
  /* 0x0424 */ unsigned short idle;
  /* 0x0426 */ unsigned short move_run;
  /* 0x0428 */ unsigned short move_sprint;
  /* 0x042a */ unsigned short move_stumpy;
  /* 0x042c */ unsigned short move_start;
  /* 0x042e */ unsigned short move_stop;
  /* 0x0430 */ unsigned short move_walk;
  /* 0x0432 */ unsigned short move_turn_left;
  /* 0x0434 */ unsigned short move_turn_right;
  /* 0x0436 */ unsigned short move_run_turn_left;
  /* 0x0438 */ unsigned short move_run_turn_right;
  /* 0x043a */ unsigned short move_turn_around_left;
  /* 0x043c */ unsigned short move_turn_around_right;
  /* 0x043e */ unsigned short move_run_turn_around_left;
  /* 0x0440 */ unsigned short move_run_turn_around_right;
  /* 0x0442 */ unsigned short move_attack;
  /* 0x0444 */ unsigned short nopatrol;
  /* 0x0446 */ unsigned short stop_idle;
  /* 0x0448 */ unsigned short stop_attackidle;
  /* 0x044a */ unsigned short stop_attackidle_bark;
  /* 0x044c */ unsigned short stop_attackidle_growl;
  /* 0x044e */ unsigned short pain_main;
  /* 0x0450 */ unsigned short pain_front;
  /* 0x0452 */ unsigned short pain_back;
  /* 0x0454 */ unsigned short pain_left;
  /* 0x0456 */ unsigned short pain_right;
  /* 0x0458 */ unsigned short pain_run_front;
  /* 0x045a */ unsigned short pain_run_back;
  /* 0x045c */ unsigned short pain_run_left;
  /* 0x045e */ unsigned short pain_run_right;
  /* 0x0460 */ unsigned short death_front;
  /* 0x0462 */ unsigned short death_back;
  /* 0x0464 */ unsigned short death_left;
  /* 0x0466 */ unsigned short death_right;
  /* 0x0468 */ unsigned short flashed;
  /* 0x046a */ unsigned short combat_attackidle;
  /* 0x046c */ unsigned short combat_attackidle_bark;
  /* 0x046e */ unsigned short combat_attackidle_growl;
  /* 0x0470 */ unsigned short combat_attack_run;
  /* 0x0472 */ unsigned short combat_attack_player;
  /* 0x0474 */ unsigned short combat_attack_player_early;
  /* 0x0476 */ unsigned short combat_attack_player_lunge;
  /* 0x0478 */ unsigned short combat_attack_player_close_range;
  /* 0x047a */ unsigned short combat_attack_miss;
  /* 0x047c */ unsigned short combat_attack_miss_left;
  /* 0x047e */ unsigned short combat_attack_miss_right;
  /* 0x0480 */ unsigned short combat_player_neck_snap;
  /* 0x0482 */ unsigned short combat_player_neck_miss;
  /* 0x0484 */ unsigned short traverse_jump_up_40;
  /* 0x0486 */ unsigned short traverse_jump_up_80;
  /* 0x0488 */ unsigned short traverse_jump_down_40;
  /* 0x048a */ unsigned short traverse_jump_down_80;
  /* 0x048c */ unsigned short traverse_wallhop;
  /* 0x048e */ unsigned short traverse_window;
  /* 0x0490 */ unsigned short traverse_through_hole_42;
  /* 0x0492 */ unsigned short zombie_climb_chain;
  /* 0x0494 */ unsigned short zombie_jump_down_40;
  /* 0x0496 */ unsigned short zombie_jump_down_48;
  /* 0x0498 */ unsigned short zombie_jump_down_72;
  /* 0x049a */ unsigned short zombie_jump_down_96;
  /* 0x049c */ unsigned short zombie_jump_down_120;
  /* 0x049e */ unsigned short zombie_jump_down_127;
  /* 0x04a0 */ unsigned short zombie_jump_down_184;
  /* 0x04a2 */ unsigned short zombie_jump_down_190;
  /* 0x04a4 */ unsigned short zombie_jump_down_222;
  /* 0x04a6 */ unsigned short zombie_jump_down_240;
  /* 0x04a8 */ unsigned short zombie_jump_down_286;
  /* 0x04aa */ unsigned short zombie_jump_down_386;
  /* 0x04ac */ unsigned short zombie_jump_up_222;
  /* 0x04ae */ unsigned short zombie_jump_up_to_climb;
  /* 0x04b0 */ unsigned short zombie_jump_up_to_climb_coast;
  /* 0x04b2 */ unsigned short zombie_ladder_up;
  /* 0x04b4 */ unsigned short zombie_lighthouse_crawl_down;
  /* 0x04b6 */ unsigned short zombie_mantle_over_40;
  /* 0x04b8 */ unsigned short zombie_quad_vent_jump_down;
  /* 0x04ba */ unsigned short zombie_wall_crawl_drop;
  /* 0x04bc */ unsigned short zombie_wall_crawl_drop_quick;
  /* 0x04be */ unsigned short zombie_ground_rise;
  /* 0x04c0 */ unsigned short zombie_ground_rise_death;
  /* 0x04c2 */ unsigned short zombie_death;
  /* 0x04c4 */ unsigned short zombie_run_melee;
  /* 0x04c6 */ unsigned short zombie_walk_melee;
  /* 0x04c8 */ unsigned short zombie_crawl_melee;
  /* 0x04ca */ unsigned short zombie_stumpy_melee;
  /* 0x04cc */ unsigned short zombie_window_melee;
  /* 0x04ce */ unsigned short zombie_board_tear;
  /* 0x04d0 */ unsigned short zombie_jump_on_bus;
  /* 0x04d2 */ unsigned short zombie_board_tear_bus;
  /* 0x04d4 */ unsigned short zombie_climbin_bus;
  /* 0x04d6 */ unsigned short zombie_bus_window_idle;
  /* 0x04d8 */ unsigned short zombie_bus_window_melee;
  /* 0x04da */ unsigned short swimming_begin;
  /* 0x04dc */ unsigned short swimming_end;
  /* 0x04de */ unsigned short snd_boat_engine;
  /* 0x04e0 */ unsigned short snd_boat_bow_l;
  /* 0x04e2 */ unsigned short snd_boat_bow_r;
  /* 0x04e4 */ unsigned short gv_event;
  /* 0x04e6 */ unsigned short gv_action;
  /* 0x04e8 */ unsigned short gv_target;
  /* 0x04ea */ unsigned short gv_parameter;
  /* 0x04ec */ unsigned short gv_condlhs;
  /* 0x04ee */ unsigned short gv_condop;
  /* 0x04f0 */ unsigned short gv_condrhs;
  /* 0x04f2 */ unsigned short basic_score;
  /* 0x04f4 */ unsigned short perk_score;
  /* 0x04f6 */ unsigned short challenge_score;
  /* 0x04f8 */ unsigned short intel_score;
  /* 0x04fa */ unsigned short difficulty_score;
  /* 0x04fc */ unsigned short total_score;
  /* 0x04fe */ unsigned short freeze;
  /* 0x0500 */ unsigned short up;
  /* 0x0502 */ unsigned short liveupdate;
  /* 0x0504 */ unsigned short respawn;
  /* 0x0506 */ unsigned short dtp_land;
  /* 0x0508 */ unsigned short hidden;
  /* 0x050a */ unsigned short fake_fire;
  /* 0x050c */ unsigned short sprint;
  /* 0x050e */ unsigned short crouchrun;
  /* 0x0510 */ unsigned short crouchwalk;
  /* 0x0512 */ unsigned short entityshutdown;
  /* 0x0514 */ unsigned short guidance_none;
  /* 0x0516 */ unsigned short guidance_sidewinder;
  /* 0x0518 */ unsigned short guidance_hellfire;
  /* 0x051a */ unsigned short guidance_javelin;
  /* 0x051c */ unsigned short guidance_ballistic;
  /* 0x051e */ unsigned short guidance_wireguided;
  /* 0x0520 */ unsigned short guidance_tvguided;
  /* 0x0522 */ unsigned short guidance_drone;
  /* 0x0524 */ unsigned short guidance_heatseeking;
  /* 0x0526 */ unsigned short lightbehavior_firecaster;
  /* 0x0528 */ unsigned short lightbehavior_fire_flicker;
  /* 0x052a */ unsigned short lightbehavior_electrical_flicker;
  /* 0x052c */ unsigned short lightbehavior_flicker_then_stop;
  /* 0x052e */ unsigned short lightbehavior_generic_double_strobe;
  /* 0x0530 */ unsigned short lightbehavior_generic_strobe;
  /* 0x0532 */ unsigned short lightbehavior_light_off;
  /* 0x0534 */ unsigned short lightbehavior_light_solid;
  /* 0x0536 */ unsigned short lightbehavior_television;
  /* 0x0538 */ unsigned short lightbehavior_generic_flickering;
  /* 0x053a */ unsigned short lightbehavior_generic_pulsing;
  /* 0x053c */ unsigned short lightbehavior_explode_then_ficker;
  /* 0x053e */ unsigned short mixerbehavior_robot;
  /* 0x0540 */ unsigned short footstep_left_large;
  /* 0x0542 */ unsigned short footstep_left_small;
  /* 0x0544 */ unsigned short footstep_right_large;
  /* 0x0546 */ unsigned short footstep_right_small;
  /* 0x0548 */ unsigned short footstep_left;
  /* 0x054a */ unsigned short footstep_right;
  /* 0x054c */ unsigned short footstep_front_left;
  /* 0x054e */ unsigned short footstep_front_right;
  /* 0x0550 */ unsigned short footstep_rear_left;
  /* 0x0552 */ unsigned short footstep_rear_right;
  /* 0x0554 */ unsigned short footstep_front_left_small;
  /* 0x0556 */ unsigned short footstep_front_right_small;
  /* 0x0558 */ unsigned short footstep_rear_left_small;
  /* 0x055a */ unsigned short footstep_rear_right_small;
  /* 0x055c */ unsigned short footstep_front_left_shuffle;
  /* 0x055e */ unsigned short footstep_front_right_shuffle;
  /* 0x0560 */ unsigned short footstep_rear_left_shuffle;
  /* 0x0562 */ unsigned short footstep_rear_right_shuffle;
  /* 0x0564 */ unsigned short footstep_front_left_scrape;
  /* 0x0566 */ unsigned short footstep_front_right_scrape;
  /* 0x0568 */ unsigned short footstep_rear_left_scrape;
  /* 0x056a */ unsigned short footstep_rear_right_scrape;
  /* 0x056c */ unsigned short dogstep_lf;
  /* 0x056e */ unsigned short dogstep_rf;
  /* 0x0570 */ unsigned short dogstep_lr;
  /* 0x0572 */ unsigned short dogstep_rr;
  /* 0x0574 */ unsigned short jnt_f_l_ankle;
  /* 0x0576 */ unsigned short jnt_f_r_ankle;
  /* 0x0578 */ unsigned short jnt_r_l_ankle;
  /* 0x057a */ unsigned short jnt_r_r_ankle;
  /* 0x057c */ unsigned short jnt_f_l_knee_upper_dmg;
  /* 0x057e */ unsigned short jnt_f_r_knee_upper_dmg;
  /* 0x0580 */ unsigned short jnt_r_l_knee_upper_dmg;
  /* 0x0582 */ unsigned short jnt_r_r_knee_upper_dmg;
  /* 0x0584 */ unsigned short open;
  /* 0x0586 */ unsigned short closed;
  /* 0x0588 */ unsigned short opening;
  /* 0x058a */ unsigned short closing;
  /* 0x058c */ unsigned short targetted_by_zombie;
  /* 0x058e */ unsigned short actor;
  /* 0x0590 */ unsigned short actor_spawner;
  /* 0x0592 */ unsigned short actor_corpse;
  /* 0x0594 */ unsigned short cf_int;
  /* 0x0596 */ unsigned short cf_float;
  /* 0x0598 */ unsigned short ambient_package;
  /* 0x059a */ unsigned short save_restore;
  /* 0x059c */ unsigned short difficulty_change;
  /* 0x059e */ unsigned short tag_board_1;
  /* 0x05a0 */ unsigned short tag_board_2;
  /* 0x05a2 */ unsigned short tag_board_3;
  /* 0x05a4 */ unsigned short tag_board_4;
  /* 0x05a6 */ unsigned short tag_board_5;
  /* 0x05a8 */ unsigned short tag_board_6;
  /* 0x05aa */ unsigned short tag_control_dial_1;
  /* 0x05ac */ unsigned short tag_control_dial_2;
  /* 0x05ae */ unsigned short tag_control_dial_3;
}; /* size: 0x05b0 */

typedef struct _DIDATAFORMAT
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwObjSize;
  /* 0x0008 */ unsigned long dwFlags;
  /* 0x000c */ unsigned long dwDataSize;
  /* 0x0010 */ unsigned long dwNumObjs;
  /* 0x0014 */ struct _DIOBJECTDATAFORMAT* rgodf;
} DIDATAFORMAT, *PDIDATAFORMAT; /* size: 0x0018 */

class SmallAllocator
{
  /* 0x0000 */ void* memory;
  /* 0x0004 */ void* freeHead;
  /* 0x0008 */ unsigned int blockSize;
  /* 0x000c */ unsigned int numBlocks;
  /* 0x0010 */ unsigned int numUsed;
  /* 0x0014 */ unsigned int maxUsed;
}; /* size: 0x0018 */

class Allocator
{
  /* 0x0000 */ void* buffer;
  /* 0x0004 */ class Allocator::Memory* head;
  /* 0x0008 */ class Allocator::Memory* tail;
  /* 0x000c */ class Allocator::Memory* freeHead;
  /* 0x0010 */ int maxUsed;
}; /* size: 0x0014 */

struct GlassRenderer::Action
{
  /* 0x0000 */ enum _TAG_UNNAMED_207 type;
  union
  {
    struct
    {
      /* 0x0004 */ struct GlassClient* glass;
      /* 0x0008 */ BOOL gameState;
      /* 0x0005 */ char Padding_724[3];
      /* 0x000c */ union vec3_t hitPos;
      /* 0x0018 */ union vec3_t hitDir;
    } /* size: 0x0020 */ shatter;
    struct
    {
      /* 0x0004 */ union vec3_t p0;
      /* 0x0010 */ union vec3_t p1;
    } /* size: 0x0018 */ trace;
    struct
    {
      /* 0x0004 */ union vec3_t origin;
      /* 0x0010 */ float damageInner;
      /* 0x0014 */ float damageOuter;
      /* 0x0018 */ float radius;
      /* 0x001c */ int mod;
    } /* size: 0x001c */ explosion;
    struct
    {
      /* 0x0004 */ union vec3_t eyePos;
      /* 0x0010 */ union vec3_t forward;
      /* 0x001c */ union vec3_t right;
      /* 0x0028 */ union vec3_t up;
      /* 0x0034 */ float range;
    } /* size: 0x0034 */ melee;
  }; /* size: 0x0034 */
}; /* size: 0x0038 */

struct GlassRenderer
{
  struct
  {
    /* 0x0000 */ struct GlassShardMeshVertex* vertexList[22];
    /* 0x0058 */ union vec3_t allBBoxMin;
    /* 0x0064 */ union vec3_t allBBoxMax;
    /* 0x0070 */ union vec3_t coordScale;
    /* 0x007c */ float worldBottom;
  } /* size: 0x0080 */ local;
  /* 0x0080 */ struct GlassShard* groupChanges[2048];
  /* 0x2080 */ volatile long numGroupChanges;
  /* 0x2084 */ int maxNumGroupChanges;
  /* 0x2088 */ const struct dvar_t* cullShards;
  /* 0x208c */ const struct dvar_t* drawDebug;
  /* 0x2090 */ const struct dvar_t* drawBBox;
  /* 0x2094 */ const struct dvar_t* drawShardOutline;
  /* 0x2098 */ const struct dvar_t* pickShards;
  /* 0x209c */ const struct dvar_t* debugSplit;
  /* 0x20a0 */ const struct dvar_t* freezeShards;
  /* 0x20a4 */ const struct dvar_t* broom;
  struct
  {
    /* 0x20a8 */ int numMovingShards;
    /* 0x20ac */ int numVisGroups;
    /* 0x20b0 */ int numVisShards;
    /* 0x20b4 */ int numOOMGroups;
  } /* size: 0x0010 */ stat;
  struct
  {
    /* 0x20b8 */ int numMovingShards;
    /* 0x20bc */ int numVisGroups;
    /* 0x20c0 */ int numVisShards;
    /* 0x20c4 */ int numOOMGroups;
  } /* size: 0x0010 */ prevStat;
  /* 0x20c8 */ int minFreeVertsMemory;
  /* 0x20cc */ int minFreeIndicesMemory;
  /* 0x20d0 */ int minFreeShardsMemory;
  /* 0x20d4 */ int maxCrashShards;
  /* 0x20d8 */ unsigned int numShatters;
  /* 0x20dc */ long Padding_725;
  /* 0x20e0 */ unsigned __int64 shatterTimer;
  /* 0x20e8 */ unsigned int numSplits;
  /* 0x20ec */ long Padding_726;
  /* 0x20f0 */ unsigned __int64 splitTimer;
  /* 0x20f8 */ unsigned __int64 triangulateTimer;
  /* 0x2100 */ unsigned int genVertsCount;
  /* 0x2104 */ long Padding_727;
  /* 0x2108 */ unsigned __int64 genVertsTimer;
  /* 0x2110 */ const struct dvar_t* maxShardSplit;
  /* 0x2114 */ const struct dvar_t* maxSplitSizeRatio;
  /* 0x2118 */ const struct dvar_t* defragMemory;
  /* 0x211c */ const struct dvar_t* defragIndices;
  /* 0x2120 */ const struct dvar_t* smpGlass;
  /* 0x2124 */ const struct dvar_t* doMaintenance;
  /* 0x2128 */ unsigned int frame;
  /* 0x212c */ int timeLastUpdate;
  /* 0x2130 */ float deltaTime;
  /* 0x2134 */ struct GlassLock rendererLock;
  /* 0x2138 */ class SmallAllocator smallAllocator;
  /* 0x2150 */ class Allocator shardMemoryAllocator;
  /* 0x2164 */ class FixedSizeAllocator<ShardGroup>* groupsAllocator;
  /* 0x2168 */ class FixedSizeAllocator<GlassShard>* shardsAllocator;
  /* 0x216c */ class FixedSizeAllocator<GlassPhysics>* physicsAllocator;
  /* 0x2170 */ class FixedSizeAllocator<GlassShard *>* delayedPhysicsShardsList;
  /* 0x2174 */ class GlassRenderer::SortedShardsList* colidingShards;
  /* 0x2178 */ class GlassRenderer::SortedShardsList* tempShardsList;
  /* 0x217c */ struct Material* usedMaterials[32];
  /* 0x21fc */ unsigned int numUsedMaterials;
  /* 0x2200 */ struct GlassRenderer::Action actions[200];
  /* 0x4dc0 */ volatile long actionInputIndex;
  /* 0x4dc4 */ volatile long actionOutputIndex;
}; /* size: 0x4dc8 */

class ISteamGameServer
{
}; /* size: 0x0004 */

struct SteamServerConnectFailure_t
{
  /* 0x0000 */ enum EResult m_eResult;
}; /* size: 0x0004 */

typedef struct _DIOBJECTDATAFORMAT
{
  /* 0x0000 */ const struct _GUID* pguid;
  /* 0x0004 */ unsigned long dwOfs;
  /* 0x0008 */ unsigned long dwType;
  /* 0x000c */ unsigned long dwFlags;
} DIOBJECTDATAFORMAT, *PDIOBJECTDATAFORMAT; /* size: 0x0010 */

class CCallback<LiveSteamServer,SteamServerConnectFailure_t,1>
{
  /* 0x0000 */ long Padding_728[3];
  /* 0x000c */ class LiveSteamServer* m_pObj;
  /* 0x0010 */ void* m_Func /* function */;
}; /* size: 0x0014 */

struct col_context_t
{
  /* 0x0000 */ int mask;
  /* 0x0004 */ const struct col_prim_t* prims;
  /* 0x0008 */ int nprims;
  /* 0x000c */ struct IgnoreEntParams* ignoreEntParams;
  /* 0x0010 */ int passEntityNum0;
  /* 0x0014 */ int passEntityNum1;
  /* 0x0018 */ int staticmodels;
  /* 0x001c */ int locational;
  /* 0x0020 */ unsigned char* priorityMap;
  /* 0x0024 */ void* collide_entity_func /* function */;
}; /* size: 0x0028 */

struct std::forward_iterator_tag
{
}; /* size: 0x0001 */

class servernetadr_t
{
  /* 0x0000 */ unsigned short m_usConnectionPort;
  /* 0x0002 */ unsigned short m_usQueryPort;
  /* 0x0004 */ unsigned int m_unIP;
}; /* size: 0x0008 */

class std::_List_unchecked_const_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> >,std::_Iterator_base0>
{
  /* 0x0000 */ struct std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node* _Ptr;
}; /* size: 0x0004 */

struct MatchMakingKeyValuePair_t
{
  /* 0x0000 */ char m_szKey[256];
  /* 0x0100 */ char m_szValue[256];
}; /* size: 0x0200 */

class pulse_sum_angular
{
  /* 0x0000 */ long Padding_729[4];
  /* 0x0010 */ class phys_vec3 m_ud;
  /* 0x0020 */ class phys_vec3 m_b1_r;
  /* 0x0030 */ class phys_vec3 m_b2_r;
  /* 0x0040 */ class phys_vec3 m_b1_ap;
  /* 0x0050 */ class phys_vec3 m_b2_ap;
  /* 0x0060 */ float m_pulse_sum_min;
  /* 0x0064 */ float m_pulse_sum_max;
  /* 0x0068 */ float m_pulse_sum;
  /* 0x006c */ float m_right_side;
  /* 0x0070 */ float m_big_dirt;
  /* 0x0074 */ float m_cfm;
  /* 0x0078 */ float m_denom;
  /* 0x007c */ unsigned int m_flags;
  /* 0x0080 */ class pulse_sum_node* m_b1;
  /* 0x0084 */ class pulse_sum_node* m_b2;
  /* 0x0088 */ class pulse_sum_cache* m_pulse_sum_cache;
}; /* size: 0x0090 */

struct IgnoreEntParams
{
  /* 0x0000 */ int baseEntity;
  /* 0x0004 */ int parentEntity;
  /* 0x0008 */ BOOL ignoreSelf;
  /* 0x0009 */ BOOL ignoreParent;
  /* 0x000a */ BOOL ignoreSiblings;
  /* 0x000b */ BOOL ignoreChildren;
}; /* size: 0x000c */

struct GlassPhysics
{
  union
  {
    /* 0x0000 */ struct GlassPhysics::StaticLocals staticLocals;
    /* 0x0000 */ class phys_mat44 m_mat;
  }; /* size: 0x0040 */
  /* 0x0040 */ class phys_vec3 m_inv_inertia;
  /* 0x0050 */ class phys_vec3 m_t_vel;
  /* 0x0060 */ class phys_vec3 m_a_vel;
  /* 0x0070 */ class phys_vec3 m_force_sum;
  /* 0x0080 */ class phys_vec3 m_torque_sum;
  /* 0x0090 */ float m_inv_mass;
  /* 0x0094 */ long __PADDING__[3];
}; /* size: 0x00a0 */

struct FixedSizeAllocator<GlassPhysics>::Block
{
  /* 0x0000 */ struct FixedSizeAllocator<GlassPhysics>::Block* prev;
  /* 0x0004 */ struct FixedSizeAllocator<GlassPhysics>::Block* next;
  /* 0x0008 */ unsigned int magic;
  /* 0x000c */ long Padding_730;
  /* 0x0010 */ struct GlassPhysics data;
}; /* size: 0x00b0 */

struct std::_Allocator_base<char>
{
}; /* size: 0x0001 */

struct GfxDelayedCmdBuf
{
  /* 0x0000 */ int primDrawSurfPos;
  /* 0x0004 */ unsigned int primDrawSurfSize;
  /* 0x0008 */ union GfxDrawSurf drawSurfKey;
}; /* size: 0x0010 */

struct GfxDrawSurfList
{
  /* 0x0000 */ union GfxDrawSurf* current;
  /* 0x0004 */ union GfxDrawSurf* end;
}; /* size: 0x0008 */

struct GfxBspDrawSurfData
{
  /* 0x0000 */ struct GfxDelayedCmdBuf delayedCmdBuf;
  /* 0x0010 */ struct GfxDrawSurfList drawSurfList;
}; /* size: 0x0018 */

struct PlayerInviteRecord
{
  /* 0x0000 */ unsigned __int64 playerInvited;
  /* 0x0008 */ int timeInvited;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

struct RecentlyInvitedPlayers
{
  /* 0x0000 */ struct PlayerInviteRecord playerInviteRecord[20];
  /* 0x0140 */ int currPlayerInviteRecordListPos;
  /* 0x0144 */ long __PADDING__[1];
}; /* size: 0x0148 */

class phys_simple_allocator<gjk_double_sphere_t>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

class bdQoSRequestPacket
{
  /* 0x0000 */ unsigned char m_type;
  /* 0x0001 */ char Padding_731[7];
  /* 0x0008 */ unsigned __int64 m_timestamp;
  /* 0x0010 */ unsigned int m_id;
  /* 0x0014 */ unsigned int m_secid;
}; /* size: 0x0018 */

class minspec_hash_table<phys_slot_pool,64>
{
  /* 0x0000 */ class phys_slot_pool* m_hash_table[64];
  /* 0x0100 */ unsigned int m_mod;
  /* 0x0104 */ unsigned int m_highest_collision;
  /* 0x0108 */ unsigned int m_total_collisions;
}; /* size: 0x010c */

struct tagged_void_pointer_t
{
  /* 0x0000 */ void* m_ptr;
  /* 0x0004 */ unsigned int m_tag;
}; /* size: 0x0008 */

class phys_slot_pool
{
  /* 0x0000 */ volatile struct tagged_void_pointer_t m_first_free_slot;
  /* 0x0008 */ unsigned int m_map_key;
  /* 0x000c */ class phys_slot_pool* m_hash_next;
  /* 0x0010 */ int m_total_slot_count;
  /* 0x0014 */ int m_allocated_slot_count;
}; /* size: 0x0018 */

class phys_memory_manager
{
  /* 0x0000 */ char* m_buffer_start;
  /* 0x0004 */ char* m_buffer_end;
  /* 0x0008 */ char* m_buffer_cur;
  /* 0x000c */ int m_list_slot_pool_count;
  /* 0x0010 */ struct minspec_read_write_mutex m_slot_pool_map_mutex;
  /* 0x0014 */ class minspec_hash_table<phys_slot_pool,64> m_slot_pool_map;
  /* 0x0120 */ struct minspec_mutex m_slot_pool_allocate_mutex;
  /* 0x0124 */ long Padding_732;
  /* 0x0128 */ class phys_slot_pool m_list_preallocated_slot_pools[28];
  /* 0x03c8 */ int m_list_preallocated_slot_pools_count;
}; /* size: 0x03d0 */

struct r_global_permap_assets_t
{
  /* 0x0000 */ struct Material* flameThrowerFXMaterial;
  /* 0x0004 */ struct Material* electrifiedFXMaterial;
  /* 0x0008 */ struct Material* transportedFXMaterial;
  /* 0x000c */ struct Material* waterSheetingFXMaterial;
}; /* size: 0x0010 */

class phys_free_list<rigid_body>::T_internal
{
  /* 0x0000 */ long Padding_733[4];
  /* 0x0010 */ class rigid_body m_data;
  /* 0x0170 */ int m_ptr_list_index;
}; /* size: 0x0180 */

typedef struct _MINIDUMP_THREAD_EX_CALLBACK
{
  /* 0x0000 */ unsigned long ThreadId;
  /* 0x0004 */ void* ThreadHandle;
  /* 0x0008 */ struct _CONTEXT Context;
  /* 0x02d4 */ unsigned long SizeOfContext;
  /* 0x02d8 */ unsigned __int64 StackBase;
  /* 0x02e0 */ unsigned __int64 StackEnd;
  /* 0x02e8 */ unsigned __int64 BackingStoreBase;
  /* 0x02f0 */ unsigned __int64 BackingStoreEnd;
} MINIDUMP_THREAD_EX_CALLBACK, *PMINIDUMP_THREAD_EX_CALLBACK; /* size: 0x02f8 */

typedef struct _MINIDUMP_IO_CALLBACK
{
  /* 0x0000 */ void* Handle;
  /* 0x0004 */ unsigned __int64 Offset;
  /* 0x000c */ void* Buffer;
  /* 0x0010 */ unsigned long BufferBytes;
} MINIDUMP_IO_CALLBACK, *PMINIDUMP_IO_CALLBACK; /* size: 0x0014 */

typedef struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK
{
  /* 0x0000 */ unsigned __int64 Offset;
  /* 0x0008 */ unsigned long Bytes;
  /* 0x000c */ HRESULT FailureStatus;
} MINIDUMP_READ_MEMORY_FAILURE_CALLBACK, *PMINIDUMP_READ_MEMORY_FAILURE_CALLBACK; /* size: 0x0010 */

typedef struct _MINIDUMP_CALLBACK_INPUT
{
  /* 0x0000 */ unsigned long ProcessId;
  /* 0x0004 */ void* ProcessHandle;
  /* 0x0008 */ unsigned long CallbackType;
  union
  {
    /* 0x000c */ HRESULT Status;
    /* 0x000c */ struct _MINIDUMP_THREAD_CALLBACK Thread;
    /* 0x000c */ struct _MINIDUMP_THREAD_EX_CALLBACK ThreadEx;
    /* 0x000c */ struct _MINIDUMP_MODULE_CALLBACK Module;
    /* 0x000c */ struct _MINIDUMP_INCLUDE_THREAD_CALLBACK IncludeThread;
    /* 0x000c */ struct _MINIDUMP_INCLUDE_MODULE_CALLBACK IncludeModule;
    /* 0x000c */ struct _MINIDUMP_IO_CALLBACK Io;
    /* 0x000c */ struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK ReadMemoryFailure;
    struct
    {
      /* 0x000c */ unsigned long SecondaryFlags;
      /* 0x0010 */ long __PADDING__[189];
    }; /* size: 0x02f8 */
  }; /* size: 0x02f8 */
} MINIDUMP_CALLBACK_INPUT, *PMINIDUMP_CALLBACK_INPUT; /* size: 0x0304 */

struct PortalHeapNode
{
  /* 0x0000 */ struct GfxPortal* portal;
  /* 0x0004 */ float dist;
}; /* size: 0x0008 */

class phys_link_list<gjk_trace_output_t>::iterator
{
  /* 0x0000 */ struct gjk_trace_output_t* m_ptr;
}; /* size: 0x0004 */

struct trStatistics_t
{
  /* 0x0000 */ struct trViewStatistics_t* views;
  /* 0x0004 */ struct Image_MemUsage c_imageUsage;
}; /* size: 0x0010 */

struct HMONITOR__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct DXGI_MAPPED_RECT
{
  /* 0x0000 */ int Pitch;
  /* 0x0004 */ unsigned char* pBits;
}; /* size: 0x0008 */

struct DXGI_GAMMA_CONTROL
{
  /* 0x0000 */ struct DXGI_RGB Scale;
  /* 0x000c */ struct DXGI_RGB Offset;
  /* 0x0018 */ struct DXGI_RGB GammaCurve[1025];
}; /* size: 0x3024 */

struct trViewStatistics_t
{
  /* 0x0000 */ int c_indexes;
  /* 0x0004 */ int c_fxIndexes;
  /* 0x0008 */ int c_viewIndexes;
  /* 0x000c */ int c_shadowIndexes;
  /* 0x0010 */ int c_vertexes;
  /* 0x0014 */ int c_batches;
}; /* size: 0x0018 */

struct DXGI_SURFACE_DESC
{
  /* 0x0000 */ unsigned int Width;
  /* 0x0004 */ unsigned int Height;
  /* 0x0008 */ enum DXGI_FORMAT Format;
  /* 0x000c */ struct DXGI_SAMPLE_DESC SampleDesc;
}; /* size: 0x0014 */

struct IDXGISurface
{
}; /* size: 0x0004 */

struct stb_memory
{
  /* 0x0000 */ unsigned char* data;
  /* 0x0004 */ unsigned int index;
  /* 0x0008 */ unsigned int size;
}; /* size: 0x000c */

struct DXGI_GAMMA_CONTROL_CAPABILITIES
{
  /* 0x0000 */ int ScaleAndOffsetSupported;
  /* 0x0004 */ float MaxConvertedValue;
  /* 0x0008 */ float MinConvertedValue;
  /* 0x000c */ unsigned int NumGammaControlPoints;
  /* 0x0010 */ float ControlPointPositions[1025];
}; /* size: 0x1014 */

class bdBandwidthTestResults
{
  /* 0x0000 */ unsigned int m_bytesReceived;
  /* 0x0004 */ unsigned int m_receivePeriodMs;
  /* 0x0008 */ unsigned int m_avgSeqNumber;
  /* 0x000c */ unsigned int m_minSeqNumber;
  /* 0x0010 */ unsigned int m_maxSeqNumber;
}; /* size: 0x0014 */

struct function_stack_t
{
  /* 0x0000 */ unsigned char* pos;
  /* 0x0004 */ struct VariableValue* top;
  /* 0x0008 */ unsigned int localId;
  /* 0x000c */ unsigned int localVarCount;
  /* 0x0010 */ struct VariableValue* startTop;
  /* 0x0014 */ struct SCR_PROFILER_DATA profileData;
}; /* size: 0x0038 */

struct function_frame_t
{
  /* 0x0000 */ struct function_stack_t fs;
  /* 0x0038 */ unsigned char* creationPos;
}; /* size: 0x003c */

struct scrVmPub_t
{
  /* 0x0000 */ unsigned int* localVars;
  /* 0x0004 */ struct VariableValue* maxstack;
  /* 0x0008 */ int function_count;
  /* 0x000c */ struct function_frame_t* function_frame;
  /* 0x0010 */ struct VariableValue* top;
  /* 0x0014 */ BOOL debugCode;
  /* 0x0015 */ BOOL abort_on_error;
  /* 0x0016 */ BOOL terminal_error;
  /* 0x0017 */ BOOL block_execution;
  /* 0x0018 */ unsigned int inparamcount;
  /* 0x001c */ unsigned int outparamcount;
  /* 0x0020 */ unsigned int breakpointOutparamcount;
  /* 0x0024 */ BOOL showError;
  /* 0x0025 */ char Padding_734[3];
  /* 0x0028 */ struct function_frame_t function_frame_start[32];
  /* 0x07a8 */ struct VariableValue stack[2048];
  /* 0x47a8 */ void* notifyListeners[1] /* function */;
  /* 0x47ac */ long __PADDING__[1];
}; /* size: 0x47b0 */

class bdCommerceWriter
{
  /* 0x0000 */ long Padding_735[2];
  /* 0x0008 */ unsigned __int64 m_writerID;
  /* 0x0010 */ unsigned int m_modDateTime;
  /* 0x0014 */ char m_writerName[256];
}; /* size: 0x0118 */

struct DXGI_SWAP_CHAIN_DESC
{
  /* 0x0000 */ struct DXGI_MODE_DESC BufferDesc;
  /* 0x001c */ struct DXGI_SAMPLE_DESC SampleDesc;
  /* 0x0024 */ unsigned int BufferUsage;
  /* 0x0028 */ unsigned int BufferCount;
  /* 0x002c */ struct HWND__* OutputWindow;
  /* 0x0030 */ int Windowed;
  /* 0x0034 */ enum DXGI_SWAP_EFFECT SwapEffect;
  /* 0x0038 */ unsigned int Flags;
}; /* size: 0x003c */

struct contact_t
{
  /* 0x0000 */ union vec3_t point;
  /* 0x000c */ union vec3_t normal;
  /* 0x0018 */ int particle_index;
}; /* size: 0x001c */

struct GfxSunShadowBoundingPoly
{
  /* 0x0000 */ union vec2_t snapDelta;
  /* 0x0008 */ int pointCount;
  /* 0x000c */ union vec2_t points[9];
  /* 0x0054 */ int pointIsNear[9];
}; /* size: 0x0078 */

struct ShardGroup
{
  /* 0x0000 */ unsigned int packedPos;
  /* 0x0004 */ const struct GlassDef* glassDef;
  /* 0x0008 */ struct GlassShard* head;
  /* 0x000c */ union vec3_t worldBBoxMin;
  /* 0x0018 */ union vec3_t worldBBoxMax;
  /* 0x0024 */ union vec3_t origin;
  /* 0x0030 */ BOOL inGenVertsJob;
  /* 0x0031 */ BOOL invalidBBox;
  /* 0x0032 */ BOOL visible;
  /* 0x0033 */ BOOL highLod;
  /* 0x0034 */ short numShards;
  /* 0x0036 */ short numIndices;
  /* 0x0038 */ short numVerts;
  /* 0x003a */ unsigned short lightingHandle;
  /* 0x003c */ struct GfxLightingInfo lightingInfo;
  /* 0x0040 */ struct FxCodeMeshData* codeMesh;
  /* 0x0044 */ union GfxDrawSurf* drawSurf;
  /* 0x0048 */ unsigned short vertsBaseIndex;
  /* 0x004a */ char Padding_736[2];
  /* 0x004c */ struct GfxPackedVertex* baseVerts;
  /* 0x0050 */ unsigned short* renderIndices;
}; /* size: 0x0054 */

struct FixedSizeAllocator<ShardGroup>::Block
{
  /* 0x0000 */ struct FixedSizeAllocator<ShardGroup>::Block* prev;
  /* 0x0004 */ struct FixedSizeAllocator<ShardGroup>::Block* next;
  /* 0x0008 */ unsigned int magic;
  /* 0x000c */ struct ShardGroup data;
}; /* size: 0x0060 */

struct $_TypeDescriptor$_extraBytes_18
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[18];
}; /* size: 0x001a */

struct GlassOutline::EdgeDistance
{
  /* 0x0000 */ unsigned int edgeIndex;
  /* 0x0004 */ float edgeParam;
  /* 0x0008 */ float dist;
  /* 0x000c */ union vec2_t closestPoint;
}; /* size: 0x0014 */

struct trDebugSphere_t
{
  /* 0x0000 */ union vec3_t center;
  /* 0x000c */ float radius;
  /* 0x0010 */ int sideCount;
  /* 0x0014 */ union vec4_t color;
  /* 0x0024 */ int depthTest;
}; /* size: 0x0028 */

class bdTeamProfileSearchParams
{
}; /* size: 0x0004 */

struct HINSTANCE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct DIDEVICEINSTANCEA
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ struct _GUID guidInstance;
  /* 0x0014 */ struct _GUID guidProduct;
  /* 0x0024 */ unsigned long dwDevType;
  /* 0x0028 */ char tszInstanceName[260];
  /* 0x012c */ char tszProductName[260];
  /* 0x0230 */ struct _GUID guidFFDriver;
  /* 0x0240 */ unsigned short wUsagePage;
  /* 0x0242 */ unsigned short wUsage;
}; /* size: 0x0244 */

struct GfxRenderTargetSurface
{
  /* 0x0000 */ struct ID3D11RenderTargetView* color;
  /* 0x0004 */ struct ID3D11DepthStencilView* depthStencil;
}; /* size: 0x0008 */

struct GfxRenderTarget
{
  /* 0x0000 */ struct GfxImage* image;
  /* 0x0004 */ struct GfxRenderTargetSurface surface;
  /* 0x000c */ unsigned short width;
  /* 0x000e */ unsigned short height;
  /* 0x0010 */ BOOL cleared;
  /* 0x0011 */ char __PADDING__[3];
}; /* size: 0x0014 */

struct GlassGenVertsCmd
{
  /* 0x0000 */ const struct GlassRenderer* renderer;
  /* 0x0004 */ struct ShardGroup* groups[16];
  /* 0x0044 */ unsigned int numGroups;
}; /* size: 0x0048 */

struct ScreenPlacement
{
  /* 0x0000 */ union vec2_t scaleVirtualToReal;
  /* 0x0008 */ union vec2_t scaleVirtualToFull;
  /* 0x0010 */ union vec2_t scaleRealToVirtual;
  /* 0x0018 */ union vec2_t virtualViewableMin;
  /* 0x0020 */ union vec2_t virtualViewableMax;
  /* 0x0028 */ union vec2_t virtualTweakableMin;
  /* 0x0030 */ union vec2_t virtualTweakableMax;
  /* 0x0038 */ union vec2_t realViewportBase;
  /* 0x0040 */ union vec2_t realViewportSize;
  /* 0x0048 */ union vec2_t realViewportMid;
  /* 0x0050 */ union vec2_t realViewableMin;
  /* 0x0058 */ union vec2_t realViewableMax;
  /* 0x0060 */ union vec2_t realTweakableMin;
  /* 0x0068 */ union vec2_t realTweakableMax;
  /* 0x0070 */ union vec2_t subScreen;
  /* 0x0078 */ float hudSplitscreenScale;
}; /* size: 0x007c */

struct IPakLoadedPackfile
{
  /* 0x0000 */ char name[64];
  /* 0x0040 */ struct IPakSection data;
  /* 0x0050 */ struct IPakSection index;
  /* 0x0060 */ int fh;
  /* 0x0064 */ int refCount;
  /* 0x0068 */ int priority;
}; /* size: 0x006c */

struct GlassShard::Triangles
{
  /* 0x0000 */ const struct GlassOutline* outline;
  /* 0x0004 */ unsigned char triangleIndices[256];
  /* 0x0104 */ unsigned int nIndices;
}; /* size: 0x0108 */

class std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
}; /* size: 0x0001 */

class bdPlatformThread
{
}; /* size: 0x0001 */

struct GfxSunShadowPartition
{
  /* 0x0000 */ struct GfxViewParms shadowViewParms;
  /* 0x0150 */ int partitionIndex;
  /* 0x0154 */ struct GfxViewport viewport;
  /* 0x0164 */ struct GfxSunShadowBoundingPoly boundingPoly;
  /* 0x01dc */ long __PADDING__[1];
}; /* size: 0x01e0 */

class std::hash<double>
{
}; /* size: 0x0001 */

struct GfxIndexBufferState
{
  /* 0x0000 */ volatile long used;
  /* 0x0004 */ int total;
  /* 0x0008 */ struct ID3D11Buffer* buffer;
  /* 0x000c */ unsigned short* indices;
}; /* size: 0x0010 */

struct HDC__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct IDirect3DCubeTexture9
{
}; /* size: 0x0004 */

struct GfxAabbTree
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ unsigned short childCount;
  /* 0x001a */ unsigned short surfaceCount;
  /* 0x001c */ unsigned short startSurfIndex;
  /* 0x001e */ unsigned short smodelIndexCount;
  /* 0x0020 */ unsigned short* smodelIndexes;
  /* 0x0024 */ int childrenOffset;
}; /* size: 0x0028 */

struct GfxDrawPrimArgs
{
  /* 0x0000 */ int vertexCount;
  /* 0x0004 */ int triCount;
  /* 0x0008 */ int baseIndex;
}; /* size: 0x000c */

struct GfxCodeMatrices
{
  /* 0x0000 */ struct GfxMatrix matrix[32];
}; /* size: 0x0800 */

class bdAuthChangeUserKeyCypherText
{
  /* 0x0000 */ unsigned int m_magicNumber;
  /* 0x0004 */ char m_userKey[24];
}; /* size: 0x001c */

struct FxMarkMeshData
{
  /* 0x0000 */ unsigned int triCount;
  /* 0x0004 */ unsigned short* indices;
  /* 0x0008 */ unsigned short modelIndex;
  /* 0x000a */ unsigned char modelTypeAndSurf;
  /* 0x000b */ unsigned char pad0;
}; /* size: 0x000c */

struct GfxBackEndPrimitiveData
{
  /* 0x0000 */ int hasSunDirChanged;
}; /* size: 0x0004 */

struct JoinSessionMessage
{
  /* 0x0000 */ enum IMType mType;
  /* 0x0004 */ int inviteID;
  /* 0x0008 */ BOOL isJoinable;
  /* 0x0009 */ BOOL invited;
  /* 0x000a */ char Padding_737[2];
  /* 0x000c */ int maxLocalPlayersAllowed;
  /* 0x0010 */ BOOL allowGuests;
  /* 0x0011 */ char Padding_738[3];
  /* 0x0014 */ enum e_JoinRejectionReason rejectionReason;
  /* 0x0018 */ struct InviteMessage inviteInfo;
}; /* size: 0x0060 */

struct DebugGlobals
{
  /* 0x0000 */ struct PolySet polySet;
  /* 0x0018 */ struct trDebugString_t* strings;
  /* 0x001c */ int stringCount;
  /* 0x0020 */ int stringLimit;
  /* 0x0024 */ struct trDebugString_t* externStrings;
  /* 0x0028 */ int externStringCount;
  /* 0x002c */ int externMaxStringCount;
  /* 0x0030 */ struct trDebugLine_t* lines;
  /* 0x0034 */ int lineCount;
  /* 0x0038 */ int lineLimit;
  /* 0x003c */ struct trDebugLine_t* externLines;
  /* 0x0040 */ int externLineCount;
  /* 0x0044 */ int externMaxLineCount;
  /* 0x0048 */ struct GfxDebugPlume* plumes;
  /* 0x004c */ int plumeCount;
  /* 0x0050 */ int plumeLimit;
  /* 0x0054 */ struct trDebugSphere_t* spheres;
  /* 0x0058 */ int sphereCount;
  /* 0x005c */ int sphereLimit;
  /* 0x0060 */ struct trDebugSphere_t* externSpheres;
  /* 0x0064 */ int externSphereCount;
  /* 0x0068 */ int externMaxSphereCount;
}; /* size: 0x006c */

struct twitterFeed_t
{
  /* 0x0000 */ int nextUpdateTime;
  /* 0x0004 */ enum bdTwitterResultType resultType;
  /* 0x0008 */ class bdTwitterSearchResult results[1];
  /* 0x0870 */ int numResults;
  /* 0x0874 */ int totalResults;
  /* 0x0878 */ int page;
}; /* size: 0x087c */

struct trDebugString_t
{
  /* 0x0000 */ union vec3_t xyz;
  /* 0x000c */ union vec4_t color;
  /* 0x001c */ float scale;
  /* 0x0020 */ char text[96];
}; /* size: 0x0080 */

struct StickToCodeMap_t
{
  /* 0x0000 */ enum GamePadStick padStick;
  /* 0x0004 */ enum GamePadStickDir padStickDir;
  /* 0x0008 */ int code;
}; /* size: 0x000c */

struct sysEvent_t
{
  /* 0x0000 */ int evTime;
  /* 0x0004 */ enum sysEventType_t evType;
  /* 0x0008 */ int evValue;
  /* 0x000c */ int evValue2;
  /* 0x0010 */ int evPtrLength;
  /* 0x0014 */ void* evPtr;
}; /* size: 0x0018 */

struct SmallAllocatorTemplate<GlassShard *>::rebind<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node>
{
}; /* size: 0x0001 */

struct std::output_iterator_tag
{
}; /* size: 0x0001 */

struct dwTwitterRegisterTask
{
  /* 0x0000 */ char accountName[1024];
  /* 0x0400 */ char password[255];
  /* 0x04ff */ char Padding_739;
  /* 0x0500 */ class bdTwitterAccount* account;
}; /* size: 0x0504 */

class phys_link_list<pulse_sum_point>
{
  /* 0x0000 */ class pulse_sum_point* m_first;
  /* 0x0004 */ class pulse_sum_point** m_last_next_ptr;
  /* 0x0008 */ int m_alloc_count;
}; /* size: 0x000c */

struct GfxCompressedLightGridCoeffs
{
  /* 0x0000 */ unsigned short coeffs[3][9];
}; /* size: 0x0036 */

class std::_List_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> > >
{
}; /* size: 0x0004 */

struct dwTwitterPostTask
{
  /* 0x0000 */ char message[560];
}; /* size: 0x0230 */

struct dwTwitterInfoTask
{
  /* 0x0000 */ unsigned int fields;
  /* 0x0004 */ int numAttributes;
  /* 0x0008 */ class bdTwitterUserAttribute userAttributes[6];
}; /* size: 0x0c38 */

struct dwTwitterSearchTask
{
  /* 0x0000 */ char searchString[129];
  /* 0x0081 */ char Padding_740[3];
  /* 0x0084 */ unsigned int page;
  /* 0x0088 */ class bdTwitterSearchResult* results;
  /* 0x008c */ int maxResults;
  /* 0x0090 */ int* numResults;
  /* 0x0094 */ int* totalResults;
  /* 0x0098 */ enum bdTwitterResultType resultType;
  /* 0x009c */ void* successCallback /* function */;
  /* 0x00a0 */ void* failureCallback /* function */;
}; /* size: 0x00a4 */

struct playerTwitterOperations
{
  /* 0x0000 */ struct dwTwitterGetAccountTask twGetAccountTask;
  /* 0x0004 */ struct dwTwitterRegisterTask twRegisterTask;
  /* 0x0508 */ struct dwTwitterPostTask twPostTask;
  /* 0x0738 */ struct dwTwitterInfoTask twInfoTask;
  /* 0x1370 */ struct dwTwitterSearchTask twSearchTask;
}; /* size: 0x1414 */

struct ScriptExpression_t
{
  /* 0x0000 */ union sval_u parseData;
  /* 0x0004 */ int breakonExpr;
  /* 0x0008 */ struct debugger_sval_s* exprHead;
}; /* size: 0x000c */

struct MaterialMemory
{
  /* 0x0000 */ struct Material* material;
  /* 0x0004 */ int memory;
}; /* size: 0x0008 */

struct TempOutlineTemplate<16>
{
  /* 0x0000 */ long Padding_741[4];
  /* 0x0010 */ struct GlassOutline::Vertex v[16];
}; /* size: 0x0190 */

struct GfxCmdBufInput
{
  /* 0x0000 */ union vec4_t consts[211];
  /* 0x0d30 */ const struct GfxImage* codeImages[55];
  /* 0x0e0c */ unsigned char codeImageSamplerStates[55];
  /* 0x0e43 */ char Padding_742;
  /* 0x0e44 */ const struct GfxBackEndData* data;
  /* 0x0e48 */ long __PADDING__[2];
}; /* size: 0x0e50 */

struct GfxCmdBufSourceState
{
  /* 0x0000 */ struct GfxCodeMatrices matrices;
  /* 0x0800 */ struct GfxCmdBufInput input;
  /* 0x1650 */ struct GfxViewParms viewParms;
  /* 0x17a0 */ struct GfxMatrix shadowLookupMatrix;
  /* 0x17e0 */ unsigned short constVersions[243];
  /* 0x19c6 */ unsigned short matrixVersions[8];
  /* 0x19d6 */ char Padding_743[10];
  /* 0x19e0 */ union vec4_t eyeOffset;
  /* 0x19f0 */ unsigned int shadowableLightForShadowLookupMatrix;
  /* 0x19f4 */ const struct GfxScaledPlacement* objectPlacement;
  /* 0x19f8 */ const struct GfxViewParms* viewParms3D;
  /* 0x19fc */ unsigned int depthHackFlags;
  /* 0x1a00 */ struct GfxScaledPlacement skinnedPlacement;
  /* 0x1a20 */ int cameraView;
  /* 0x1a24 */ enum GfxViewMode viewMode;
  /* 0x1a28 */ struct GfxSceneDef sceneDef;
  /* 0x1a3c */ struct GfxViewport sceneViewport;
  /* 0x1a4c */ struct GfxViewport scissorViewport;
  /* 0x1a5c */ float materialTime;
  /* 0x1a60 */ float destructibleBurnAmount;
  /* 0x1a64 */ unsigned char viewportBehavior;
  /* 0x1a65 */ char Padding_744[3];
  /* 0x1a68 */ int renderTargetWidth;
  /* 0x1a6c */ int renderTargetHeight;
  /* 0x1a70 */ BOOL viewportIsDirty;
  /* 0x1a71 */ BOOL scissorEnabled;
  /* 0x1a72 */ char Padding_745[2];
  /* 0x1a74 */ unsigned int shadowableLightIndex;
  /* 0x1a78 */ long __PADDING__[2];
}; /* size: 0x1a80 */

class phys_link_list<pulse_sum_normal>
{
  /* 0x0000 */ class pulse_sum_normal* m_first;
  /* 0x0004 */ class pulse_sum_normal** m_last_next_ptr;
  /* 0x0008 */ int m_alloc_count;
}; /* size: 0x000c */

struct GfxWorkerData
{
  /* 0x0000 */ int cmdBufValid[33];
  /* 0x0084 */ struct GfxCmdBuf cmdBuf[33];
  /* 0x0210 */ struct jqBatchGroup cmdBufBatchGroup[33];
}; /* size: 0x0318 */

struct GfxSunShadowProjection
{
  /* 0x0000 */ float viewMatrix[4][4];
  /* 0x0040 */ union vec4_t switchPartition;
  /* 0x0050 */ union vec4_t shadowmapScale;
}; /* size: 0x0060 */

struct GfxSunShadow
{
  /* 0x0000 */ struct GfxMatrix lookupMatrix;
  /* 0x0040 */ struct GfxSunShadowProjection sunProj;
  /* 0x00a0 */ int sunShadowCount;
  /* 0x00a4 */ long Padding_746[3];
  /* 0x00b0 */ struct GfxSunShadowPartition partition[2];
}; /* size: 0x0470 */

struct GfxBackEndData
{
  /* 0x0000 */ unsigned char surfsBuffer[1];
  /* 0x0001 */ char Padding_747[127];
  /* 0x0080 */ struct FxCodeMeshData codeMeshes[1];
  /* 0x0090 */ long Padding_748[28];
  /* 0x0100 */ unsigned int primDrawSurfsBuf[65536];
  /* 0x40100 */ unsigned char lodData[16384][4];
  /* 0x50100 */ struct GfxViewParms viewParms[9];
  /* 0x50cd0 */ long Padding_749[12];
  /* 0x50d00 */ unsigned char primaryLightTechType[256][16];
  /* 0x51d00 */ union vec4_t codeMeshArgs[256];
  /* 0x52d00 */ struct GfxParticleCloud clouds[256];
  /* 0x56d00 */ union GfxDrawSurf drawSurfs[1];
  /* 0x56d08 */ long Padding_750[2];
  /* 0x56d10 */ struct GfxMeshData* codeMeshPtr;
  /* 0x56d14 */ long Padding_751[3];
  /* 0x56d20 */ struct GfxMeshData markMesh;
  /* 0x56d48 */ long Padding_752[2];
  /* 0x56d50 */ struct GfxMeshData glassMesh;
  /* 0x56d78 */ struct GfxBackEndPrimitiveData prim;
  /* 0x56d7c */ unsigned char shadowableLightHasShadowMap[255];
  /* 0x56e7b */ char Padding_753;
  /* 0x56e7c */ unsigned int frameCount;
  /* 0x56e80 */ int drawSurfCount;
  /* 0x56e84 */ volatile long surfPos;
  /* 0x56e88 */ volatile long gfxEntCount;
  /* 0x56e8c */ struct GfxEntity gfxEnts[256];
  /* 0x57e8c */ volatile long shaderConstantSetCount;
  /* 0x57e90 */ struct ShaderConstantSet shaderConstantSets[128];
  /* 0x5ba90 */ volatile long textureOverrideCount;
  /* 0x5ba94 */ struct GfxTextureOverride textureOverrides[1024];
  /* 0x63a94 */ volatile long cloudCount;
  /* 0x63a98 */ volatile long codeMeshCount;
  /* 0x63a9c */ volatile long codeMeshArgsCount;
  /* 0x63aa0 */ volatile long markMeshCount;
  /* 0x63aa4 */ struct FxMarkMeshData markMeshes[1];
  /* 0x63ab0 */ struct GfxVertexBufferState* skinnedCacheVb;
  /* 0x63ab4 */ volatile long skinnedCacheVertsAllocated;
  /* 0x63ab8 */ struct GfxIndexBufferState* dynamicIndexBuffer;
  /* 0x63abc */ struct GfxVertexBufferState* dynamicVertexBuffer;
  /* 0x63ac0 */ struct ID3D11Query* endFence;
  /* 0x63ac4 */ struct ID3D11Query* endFrameFence;
  /* 0x63ac8 */ unsigned char* tempSkinBuf;
  /* 0x63acc */ volatile long tempSkinPos;
  /* 0x63ad0 */ int tempSkinSize;
  /* 0x63ad4 */ int viewParmCount;
  /* 0x63ad8 */ struct GfxFog fogSettings;
  /* 0x63b28 */ struct GfxCmdArray* commands;
  /* 0x63b2c */ unsigned int viewInfoIndex;
  /* 0x63b30 */ unsigned int viewInfoCount;
  /* 0x63b34 */ struct GfxViewInfo* viewInfo;
  /* 0x63b38 */ struct GfxWorkerData workerData[4];
  /* 0x64798 */ struct GfxUI3DBackend rbUI3D;
  /* 0x64894 */ struct GfxQRCodeBackend rbQRCode;
  /* 0x64954 */ const void* cmds;
  /* 0x64958 */ const void* compositingCmds;
  /* 0x6495c */ long Padding_754;
  /* 0x64960 */ struct GfxLight sunLight;
  /* 0x64ac0 */ int hasApproxSunDirChanged;
  /* 0x64ac4 */ volatile long primDrawSurfPos;
  /* 0x64ac8 */ unsigned int streamerExecedFrame;
  /* 0x64acc */ unsigned int frameLastTransferId;
  /* 0x64ad0 */ struct jqBatchGroup glassGenerateVertsBatchGroup;
  /* 0x64ad8 */ struct DebugGlobals debugGlobals;
  /* 0x64b44 */ unsigned int dualPlaySplitScreenOn;
  /* 0x64b48 */ unsigned int drawType;
  /* 0x64b4c */ float eyeOffset;
  /* 0x64b50 */ int hideMatureContent;
  /* 0x64b54 */ int splitscreen;
  /* 0x64b58 */ long Padding_755[2];
  /* 0x64b60 */ struct GfxLight shadowableLights[255];
  /* 0x7aa00 */ unsigned int shadowableLightCount;
  /* 0x7aa04 */ unsigned int emissiveSpotLightIndex;
  /* 0x7aa08 */ long Padding_756[2];
  /* 0x7aa10 */ struct GfxLight emissiveSpotLight;
  /* 0x7ab70 */ unsigned int emissiveSpotLightCount;
  /* 0x7ab74 */ int emissiveSpotLightShadowableLightIndex;
  /* 0x7ab78 */ long Padding_757[2];
  /* 0x7ab80 */ struct GfxSunShadow sunShadow;
  /* 0x7aff0 */ unsigned int spotShadowCount;
  /* 0x7aff4 */ long Padding_758[3];
  /* 0x7b000 */ struct GfxSpotShadow spotShadows[4];
  /* 0x7b780 */ struct WindState gfxWindState;
  /* 0x7b890 */ struct GfxFrameStats frameStats;
  /* 0x7cce4 */ long __PADDING__[7];
}; /* size: 0x7cd00 */

struct DXGI_ADAPTER_DESC1
{
  /* 0x0000 */ wchar_t Description[128];
  /* 0x0100 */ unsigned int VendorId;
  /* 0x0104 */ unsigned int DeviceId;
  /* 0x0108 */ unsigned int SubSysId;
  /* 0x010c */ unsigned int Revision;
  /* 0x0110 */ unsigned long DedicatedVideoMemory;
  /* 0x0114 */ unsigned long DedicatedSystemMemory;
  /* 0x0118 */ unsigned long SharedSystemMemory;
  /* 0x011c */ struct _LUID AdapterLuid;
  /* 0x0124 */ unsigned int Flags;
}; /* size: 0x0128 */

typedef struct _XINPUT_GAMEPAD
{
  /* 0x0000 */ unsigned short wButtons;
  /* 0x0002 */ unsigned char bLeftTrigger;
  /* 0x0003 */ unsigned char bRightTrigger;
  /* 0x0004 */ short sThumbLX;
  /* 0x0006 */ short sThumbLY;
  /* 0x0008 */ short sThumbRX;
  /* 0x000a */ short sThumbRY;
} XINPUT_GAMEPAD, *PXINPUT_GAMEPAD; /* size: 0x000c */

class bdArray<bdKeyValuePair>
{
  /* 0x0000 */ class bdKeyValuePair* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

class std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> >
{
}; /* size: 0x0010 */

typedef struct _tagADDRESS
{
  /* 0x0000 */ unsigned long Offset;
  /* 0x0004 */ unsigned short Segment;
  /* 0x0006 */ char Padding_759[2];
  /* 0x0008 */ enum ADDRESS_MODE Mode;
} tagADDRESS, *PtagADDRESS; /* size: 0x000c */

struct ID2D1LinearGradientBrush
{
}; /* size: 0x0004 */

struct GfxCmdArray
{
  /* 0x0000 */ unsigned char* cmds;
  /* 0x0004 */ int usedTotal;
  /* 0x0008 */ int usedCritical;
  /* 0x000c */ struct GfxCmdHeader* lastCmd;
  /* 0x0010 */ int byteSize;
  /* 0x0014 */ int warnSize;
  /* 0x0018 */ int check;
}; /* size: 0x001c */

struct std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node
{
  /* 0x0000 */ struct std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node* _Next;
  /* 0x0004 */ struct std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node* _Prev;
  /* 0x0008 */ struct GlassShard* _Myval;
}; /* size: 0x000c */

class bdReliableSendWindow::bdMessageFrame
{
  /* 0x0000 */ class bdReference<bdDataChunk> m_chunk;
  /* 0x0004 */ long Padding_760;
  /* 0x0008 */ class bdStopwatch m_timer;
  /* 0x0010 */ unsigned char m_sendCount;
  /* 0x0011 */ unsigned char m_missingCount;
  /* 0x0012 */ BOOL m_gapAcked;
}; /* size: 0x0018 */

struct XModelNameMap
{
  /* 0x0000 */ unsigned short name;
  /* 0x0002 */ unsigned short index;
}; /* size: 0x0004 */

struct GfxQuadMeshData
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
  /* 0x0008 */ float width;
  /* 0x000c */ float height;
  /* 0x0010 */ struct GfxMeshData meshData;
}; /* size: 0x0038 */

struct IKJointBones
{
  /* 0x0000 */ enum IKBoneNames twistBone;
  /* 0x0004 */ enum IKBoneNames childBone;
  /* 0x0008 */ enum IKBoneNames jointBone;
  /* 0x000c */ enum IKBoneNames parentBone;
  /* 0x0010 */ enum IKBoneNames baseBone;
}; /* size: 0x0014 */

struct XAnimInfo
{
  /* 0x0000 */ unsigned short notifyChild;
  /* 0x0002 */ short notifyIndex;
  /* 0x0004 */ unsigned short notifyName;
  /* 0x0006 */ unsigned short notifyType;
  /* 0x0008 */ unsigned short prev;
  /* 0x000a */ unsigned short next;
  /* 0x000c */ unsigned short children;
  /* 0x000e */ unsigned short parent;
  /* 0x0010 */ unsigned short animIndex;
  /* 0x0012 */ unsigned short animToModel;
  union
  {
    /* 0x0014 */ struct XAnimParts* parts;
    /* 0x0014 */ struct XAnimParent animParent;
  }; /* size: 0x0004 */
  /* 0x0018 */ struct XAnimState state;
  /* 0x0038 */ struct XAnimParts* streamedParts;
  /* 0x003c */ unsigned short streamedAnimToModel;
  /* 0x003e */ char __PADDING__[2];
}; /* size: 0x0040 */

class bdReference<bdCookie>
{
  /* 0x0000 */ class bdCookie* m_ptr;
}; /* size: 0x0004 */

class bdCookieEchoChunk
{
  /* 0x0000 */ long Padding_761[4];
  /* 0x0010 */ enum bdCookieEchoChunk::bdCookieEchoFlags m_flags;
  /* 0x0014 */ class bdReference<bdCookie> m_cookie;
  /* 0x0018 */ class bdReference<bdByteBuffer> m_cookieBuffer;
}; /* size: 0x001c */

struct IDirect3DSwapChain9
{
}; /* size: 0x0004 */

struct serverInfo_t
{
  /* 0x0000 */ struct XNADDR xnaddr;
  /* 0x0025 */ class bdSecurityKey xnkey;
  /* 0x0035 */ class bdSecurityID xnkid;
  /* 0x003d */ char Padding_762[3];
  /* 0x0040 */ int publicSlots;
  /* 0x0044 */ int publicSlotsUsed;
  /* 0x0048 */ int privateSlots;
  /* 0x004c */ int privateSlotsUsed;
  /* 0x0050 */ unsigned __int64 nonce;
  /* 0x0058 */ struct netadr_t adr;
  /* 0x006c */ unsigned char allowAnonymous;
  /* 0x006d */ unsigned char bPassword;
  /* 0x006e */ unsigned char pure;
  /* 0x006f */ char consoleDisabled;
  /* 0x0070 */ unsigned char netType;
  /* 0x0071 */ unsigned char clients;
  /* 0x0072 */ unsigned char maxClients;
  /* 0x0073 */ unsigned char dirty;
  /* 0x0074 */ char friendlyfire;
  /* 0x0075 */ char killcam;
  /* 0x0076 */ char hardcore;
  /* 0x0077 */ unsigned char hardware;
  /* 0x0078 */ unsigned char mod;
  /* 0x0079 */ unsigned char voice;
  /* 0x007a */ unsigned char requestCount;
  /* 0x007b */ char Padding_763;
  /* 0x007c */ short minPing;
  /* 0x007e */ short maxPing;
  /* 0x0080 */ short ping;
  /* 0x0082 */ char Padding_764[2];
  /* 0x0084 */ int pingedTime;
  /* 0x0088 */ char hostName[32];
  /* 0x00a8 */ char mapName[32];
  /* 0x00c8 */ char game[24];
  /* 0x00e0 */ char gameType[16];
  /* 0x00f0 */ unsigned char isInGame;
  /* 0x00f1 */ char Padding_765[7];
  /* 0x00f8 */ unsigned __int64 friendsBits;
  /* 0x0100 */ unsigned __int64 bdUserID;
  /* 0x0108 */ int region;
  /* 0x010c */ int score;
}; /* size: 0x0110 */

struct WorkerCmdConditional
{
  /* 0x0000 */ void* address;
  /* 0x0004 */ unsigned int value;
}; /* size: 0x0008 */

struct SndPan
{
  /* 0x0000 */ char name[32];
  /* 0x0020 */ unsigned int id;
  /* 0x0024 */ float front;
  /* 0x0028 */ float back;
  /* 0x002c */ float center;
  /* 0x0030 */ float lfe;
  /* 0x0034 */ float left;
  /* 0x0038 */ float right;
}; /* size: 0x003c */

struct clientDebugLineInfo_t
{
  /* 0x0000 */ int max;
  /* 0x0004 */ int num;
  /* 0x0008 */ struct trDebugLine_t* lines;
  /* 0x000c */ int* durations;
}; /* size: 0x0010 */

struct clientDebugSphereInfo_t
{
  /* 0x0000 */ int max;
  /* 0x0004 */ int num;
  /* 0x0008 */ struct trDebugSphere_t* spheres;
  /* 0x000c */ int* durations;
}; /* size: 0x0010 */

struct clientDebug_t
{
  /* 0x0000 */ int prevFromServer;
  /* 0x0004 */ int fromServer;
  /* 0x0008 */ struct clientDebugStringInfo_t clStrings;
  /* 0x0018 */ struct clientDebugStringInfo_t svStringsBuffer;
  /* 0x0028 */ struct clientDebugStringInfo_t svStrings;
  /* 0x0038 */ struct clientDebugLineInfo_t clLines;
  /* 0x0048 */ struct clientDebugLineInfo_t svLinesBuffer;
  /* 0x0058 */ struct clientDebugLineInfo_t svLines;
  /* 0x0068 */ struct clientDebugSphereInfo_t clSpheres;
  /* 0x0078 */ struct clientDebugSphereInfo_t svSpheresBuffer;
  /* 0x0088 */ struct clientDebugSphereInfo_t svSpheres;
}; /* size: 0x0098 */

struct file_in_zip_read_info_s
{
  /* 0x0000 */ char* read_buffer;
  /* 0x0004 */ struct z_stream_s stream;
  /* 0x0038 */ unsigned long pos_in_zipfile;
  /* 0x003c */ unsigned long stream_initialised;
  /* 0x0040 */ unsigned long offset_local_extrafield;
  /* 0x0044 */ unsigned int size_local_extrafield;
  /* 0x0048 */ unsigned long pos_local_extrafield;
  /* 0x004c */ unsigned long rest_read_compressed;
  /* 0x0050 */ unsigned long rest_read_uncompressed;
  /* 0x0054 */ struct _iobuf* file;
  /* 0x0058 */ unsigned long compression_method;
  /* 0x005c */ unsigned long byte_before_the_zipfile;
}; /* size: 0x0060 */

struct SSkinAnim
{
  /* 0x0000 */ int bones;
  /* 0x0004 */ int width;
  /* 0x0008 */ int frames;
  /* 0x000c */ float* data;
}; /* size: 0x0010 */

struct SndLoopEmitter
{
  /* 0x0000 */ unsigned int id;
  /* 0x0004 */ union vec3_t origin;
  /* 0x0010 */ const struct SndAliasList* alias;
  /* 0x0014 */ float aliasDistanceSq;
}; /* size: 0x0018 */

struct mnode_t
{
  /* 0x0000 */ unsigned short cellIndex;
  /* 0x0002 */ unsigned short rightChildOffset;
}; /* size: 0x0004 */

struct PredictedVehicleDef
{
  /* 0x0000 */ BOOL fullPhysics;
  /* 0x0001 */ char Padding_766[3];
  /* 0x0004 */ union vec3_t origin;
  /* 0x0010 */ union vec3_t angles;
  /* 0x001c */ union vec3_t tVel;
  /* 0x0028 */ union vec3_t aVel;
  /* 0x0034 */ int serverTime;
}; /* size: 0x0038 */

struct clientHeader_t
{
  /* 0x0000 */ int state;
  /* 0x0004 */ int sendAsActive;
  /* 0x0008 */ int deltaMessage;
  /* 0x000c */ int rateDelayed;
  /* 0x0010 */ int hasAckedBaselineData;
  /* 0x0014 */ int hugeSnapshotSent;
  /* 0x0018 */ struct netchan_t netchan;
  /* 0x06e0 */ union vec3_t predictedOrigin;
  /* 0x06ec */ int predictedOriginServerTime;
  /* 0x06f0 */ int migrationState;
  /* 0x06f4 */ struct PredictedVehicleDef predictedVehicle;
}; /* size: 0x072c */

struct SndEntityContextInfo
{
  /* 0x0000 */ unsigned int contexts[16];
}; /* size: 0x0040 */

union CullInfo
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned int dynamicIndexBufferQwordOffset : 17; /* bit position: 0 */
        /* 0x0000 */ unsigned int triCount : 15; /* bit position: 17 */
      }; /* bitfield */
    } /* size: 0x0004 */ fields;
    /* 0x0000 */ unsigned int packed;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct loadAnim_t
{
  /* 0x0000 */ struct scr_anim_s anim;
  /* 0x0004 */ int iNameHash;
  /* 0x0008 */ char szAnimName[64];
}; /* size: 0x0048 */

struct demoTheaterFileInfo
{
  /* 0x0000 */ char name[64];
  /* 0x0040 */ char description[64];
  /* 0x0080 */ char category[32];
  /* 0x00a0 */ int duration;
  /* 0x00a4 */ BOOL isPooled;
  /* 0x00a5 */ char Padding_767[3];
  /* 0x00a8 */ unsigned __int64 matchID;
  /* 0x00b0 */ unsigned __int64 fileID;
}; /* size: 0x00b8 */

struct scrParserGlob_t
{
  /* 0x0000 */ struct SourceLookup* sourcePosLookup;
  /* 0x0004 */ unsigned int sourcePosLookupMaxLen;
  /* 0x0008 */ unsigned int sourcePosLookupLen;
  /* 0x000c */ unsigned int sourceBufferLookupMaxLen;
  /* 0x0010 */ const unsigned char* currentCodePos;
  /* 0x0014 */ unsigned int currentSourcePosCount;
  /* 0x0018 */ struct SaveSourceBufferInfo* saveSourceBufferLookup;
  /* 0x001c */ unsigned int saveSourceBufferLookupLen;
  /* 0x0020 */ int delayedSourceIndex;
  /* 0x0024 */ int threadStartSourceIndex;
}; /* size: 0x0028 */

struct SnapshotInfo_s
{
  /* 0x0000 */ enum ClientNum_t clientNum;
  /* 0x0004 */ const struct clientHeader_t* client;
  /* 0x0008 */ int snapshotDeltaTime;
  /* 0x000c */ BOOL fromBaseline;
  /* 0x000d */ BOOL archived;
  /* 0x000e */ BOOL packetIsDelta;
  /* 0x000f */ BOOL entJustUnlinked;
  /* 0x0010 */ BOOL entNeverChanges;
  /* 0x0011 */ BOOL demoSnapshot;
  /* 0x0012 */ char Padding_768[2];
  /* 0x0014 */ enum PacketEntityType packetEntityType;
  /* 0x0018 */ BOOL packetEntityTypeArchived;
  /* 0x0019 */ char __PADDING__[3];
}; /* size: 0x001c */

class bitarray<160>
{
  /* 0x0000 */ int array[5];
}; /* size: 0x0014 */

struct XAnimToXModel
{
  /* 0x0000 */ class bitarray<160> partBits;
  /* 0x0014 */ unsigned char boneCount;
  /* 0x0015 */ unsigned char boneIndex[160];
  /* 0x00b5 */ char __PADDING__[3];
}; /* size: 0x00b8 */

struct SndDspMeters
{
  /* 0x0000 */ float p;
  /* 0x0004 */ float vu;
  /* 0x0008 */ float dyn1Gain;
  /* 0x000c */ float dyn1Level;
  /* 0x0010 */ float dyn2Gain;
  /* 0x0014 */ float dyn2Level;
  /* 0x0018 */ float cf;
  /* 0x001c */ unsigned char padding[4];
}; /* size: 0x0020 */

struct demoRecordedFileUploadInfo
{
  /* 0x0000 */ unsigned __int64 fileID;
  /* 0x0008 */ unsigned char metaData[255];
  /* 0x0107 */ char Padding_769;
  /* 0x0108 */ class bdTag tags[60];
  /* 0x06a8 */ int numTags;
  /* 0x06ac */ long __PADDING__[1];
}; /* size: 0x06b0 */

struct SndEnvEffect
{
  /* 0x0000 */ unsigned int reverbId;
  /* 0x0004 */ float drylevel;
  /* 0x0008 */ float drygoal;
  /* 0x000c */ float dryrate;
  /* 0x0010 */ float wetlevel;
  /* 0x0014 */ float wetgoal;
  /* 0x0018 */ float wetrate;
  /* 0x001c */ BOOL active;
  /* 0x001d */ char __PADDING__[3];
}; /* size: 0x0020 */

struct XAnimCalcAnimInfo
{
  /* 0x0000 */ struct DObjAnimMat rotTransArray[960];
  /* 0x7800 */ class bitarray<160> animPartBits;
  /* 0x7814 */ class bitarray<160> ignorePartBits;
  /* 0x7828 */ BOOL bLeftHandGripIKActive;
  /* 0x7829 */ char __PADDING__[7];
}; /* size: 0x7830 */

typedef struct _WIN32_FILE_ATTRIBUTE_DATA
{
  /* 0x0000 */ unsigned long dwFileAttributes;
  /* 0x0004 */ struct _FILETIME ftCreationTime;
  /* 0x000c */ struct _FILETIME ftLastAccessTime;
  /* 0x0014 */ struct _FILETIME ftLastWriteTime;
  /* 0x001c */ unsigned long nFileSizeHigh;
  /* 0x0020 */ unsigned long nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *PWIN32_FILE_ATTRIBUTE_DATA; /* size: 0x0024 */

struct streamingState_s
{
  /* 0x0000 */ unsigned char* buffer;
  /* 0x0004 */ int bufferSize;
  /* 0x0008 */ enum demoStreamingState phase;
  /* 0x000c */ int segmentNo;
  /* 0x0010 */ int byteOffset;
  /* 0x0014 */ int totalDuration;
  /* 0x0018 */ BOOL isEnteringState;
  /* 0x0019 */ char __PADDING__[3];
}; /* size: 0x001c */

class bdReference<bdHeartbeatAckChunk>
{
  /* 0x0000 */ class bdHeartbeatAckChunk* m_ptr;
}; /* size: 0x0004 */

struct HMENU__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct std::unary_function<unsigned __int64,unsigned int>
{
}; /* size: 0x0001 */

struct GfxGlobals
{
  /* 0x0000 */ BOOL startedRenderThread;
  /* 0x0001 */ BOOL isMultiplayer;
  /* 0x0002 */ BOOL isZombie;
  /* 0x0003 */ char Padding_770;
  /* 0x0004 */ volatile int endFrameFence;
  /* 0x0008 */ BOOL isRenderingRemoteUpdate;
  /* 0x0009 */ char Padding_771[3];
  /* 0x000c */ volatile int screenUpdateNotify;
  /* 0x0010 */ volatile int remoteScreenUpdateNesting;
  /* 0x0014 */ volatile int remoteScreenUpdateInGame;
  /* 0x0018 */ volatile int remoteScreenUpdateLUI;
  /* 0x001c */ unsigned char remoteScreenLastSceneResolveTarget;
  /* 0x001d */ char Padding_772[3];
  /* 0x0020 */ int backEndFrameCount;
  /* 0x0024 */ unsigned char frameBuffer;
  /* 0x0025 */ char __PADDING__[3];
}; /* size: 0x0028 */

struct FxBeamLaserData
{
  /* 0x0000 */ float endRadius;
}; /* size: 0x0004 */

struct FxBeamFlameData
{
  /* 0x0000 */ float endRadius;
  /* 0x0004 */ float* segmentVerts;
  /* 0x0008 */ struct Material* material2;
  /* 0x000c */ int perpSegmentCount;
  /* 0x0010 */ float animFrac;
}; /* size: 0x0014 */

struct FxBeamDemoLineData
{
  /* 0x0000 */ float* segmentVerts;
}; /* size: 0x0004 */

struct FxBeamArcData
{
  /* 0x0000 */ float endRadius;
  /* 0x0004 */ float textureReps;
  /* 0x0008 */ float* segmentVerts;
}; /* size: 0x000c */

struct FxBeam
{
  /* 0x0000 */ unsigned char type;
  /* 0x0001 */ BOOL depthHack;
  /* 0x0002 */ unsigned char drawSurfOverride;
  /* 0x0003 */ char Padding_773;
  /* 0x0004 */ union vec3_t begin;
  /* 0x0010 */ union vec3_t end;
  /* 0x001c */ union GfxColor colors[5];
  /* 0x0030 */ float radius;
  /* 0x0034 */ struct Material* material;
  /* 0x0038 */ int segmentCount;
  union
  {
    /* 0x003c */ struct FxBeamTracerData tracer;
    /* 0x003c */ struct FxBeamLaserData laser;
    /* 0x003c */ struct FxBeamFlameData flame;
    /* 0x003c */ struct FxBeamDemoLineData demoLine;
    struct
    {
      /* 0x003c */ struct FxBeamArcData arc;
      /* 0x0048 */ long __PADDING__[2];
    }; /* size: 0x0014 */
  }; /* size: 0x0014 */
}; /* size: 0x0050 */

class std::logic_error
{
}; /* size: 0x000c */

struct GlassOutline
{
  union
  {
    struct
    {
      /* 0x0000 */ struct GlassOutline::Vertex* verts;
      /* 0x0004 */ float length;
      /* 0x0008 */ float area;
      /* 0x000c */ unsigned char maxVerts;
      /* 0x000d */ unsigned char numVerts;
      /* 0x000e */ BOOL isClosed;
    }; /* size: 0x000f */
    /* 0x0000 */ int splitFailCount[8];
  }; /* size: 0x0020 */
  /* 0x0020 */ long __PADDING__[1073741820];
}; /* size: 0x0010 */

struct IDWriteFontCollection
{
}; /* size: 0x0004 */

struct scr_block_s
{
  /* 0x0000 */ int abortLevel;
  /* 0x0004 */ int localVarsCreateCount;
  /* 0x0008 */ int localVarsPublicCount;
  /* 0x000c */ int localVarsCount;
  /* 0x0010 */ unsigned char localVarsInitBits[8];
  /* 0x0018 */ struct scr_localVar_t localVars[64];
}; /* size: 0x0218 */

struct GrassWind
{
  /* 0x0000 */ union vec2_t pos;
  /* 0x0008 */ union vec2_t dir;
  /* 0x0010 */ float strength_skew;
  /* 0x0014 */ int life_span;
  /* 0x0018 */ int start_time;
}; /* size: 0x001c */

struct weaponState_t
{
  /* 0x0000 */ const struct playerState_s* ps;
  /* 0x0004 */ float xyspeed;
  /* 0x0008 */ float frametime;
  /* 0x000c */ float fLastIdleFactor;
  /* 0x0010 */ int time;
  /* 0x0014 */ int damageTime;
  /* 0x0018 */ float v_dmg_pitch;
  /* 0x001c */ float v_dmg_roll;
  /* 0x0020 */ int* removeMeUnusedInt;
  /* 0x0024 */ union vec3_t baseAngles;
  /* 0x0030 */ union vec3_t baseOrigin;
  /* 0x003c */ union vec3_t recoilAngles;
  /* 0x0048 */ union vec3_t recoilSpeed;
  /* 0x0054 */ union vec3_t swayAngles;
  /* 0x0060 */ union vec3_t swayOrigin;
  /* 0x006c */ union vec3_t swayViewAngles;
  /* 0x0078 */ union vec3_t bobAngles;
  /* 0x0084 */ int shellShockStart;
  /* 0x0088 */ int shellShockDuration;
  /* 0x008c */ int shellShockFadeTime;
  /* 0x0090 */ union vec3_t damageKickAngles;
  /* 0x009c */ BOOL isServer;
  /* 0x009d */ char __PADDING__[3];
}; /* size: 0x00a0 */

class XAnimClientNotify
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int notetrackName;
  /* 0x0008 */ unsigned int notifyType;
  /* 0x000c */ unsigned int notifyName;
  /* 0x0010 */ float timeFrac;
}; /* size: 0x0014 */

struct std::_Container_proxy
{
  /* 0x0000 */ const struct std::_Container_base12* _Mycont;
  /* 0x0004 */ struct std::_Iterator_base12* _Myfirstiter;
}; /* size: 0x0008 */

struct clientLogo_t
{
  /* 0x0000 */ int startTime;
  /* 0x0004 */ int duration;
  /* 0x0008 */ int fadein;
  /* 0x000c */ int fadeout;
  /* 0x0010 */ struct Material* material[2];
}; /* size: 0x0018 */

struct vidConfig_t
{
  /* 0x0000 */ unsigned int sceneWidth;
  /* 0x0004 */ unsigned int sceneHeight;
  /* 0x0008 */ unsigned int displayWidth;
  /* 0x000c */ unsigned int displayHeight;
  /* 0x0010 */ unsigned short outputDisplayWidth;
  /* 0x0012 */ unsigned short outputDisplayHeight;
  /* 0x0014 */ unsigned int displayFrequency;
  /* 0x0018 */ BOOL isToolMode;
  /* 0x0019 */ char Padding_774[3];
  /* 0x001c */ int isWideScreen;
  /* 0x0020 */ int isHiDef;
  /* 0x0024 */ int isFullscreen;
  /* 0x0028 */ float aspectRatioWindow;
  /* 0x002c */ float aspectRatioScenePixel;
  /* 0x0030 */ float aspectRatioDisplayPixel;
  /* 0x0034 */ unsigned int maxTextureSize;
  /* 0x0038 */ unsigned int maxTextureMaps;
  /* 0x003c */ BOOL deviceSupportsGamma;
  /* 0x003d */ char __PADDING__[3];
}; /* size: 0x0040 */

struct clientStatic_t
{
  /* 0x0000 */ int hunkUsersStarted;
  /* 0x0004 */ char servername[256];
  /* 0x0104 */ struct XSESSION_INFO hostInfo;
  /* 0x0141 */ char Padding_775[3];
  /* 0x0144 */ int rendererStarted;
  /* 0x0148 */ int soundStarted;
  /* 0x014c */ int uiStarted;
  /* 0x0150 */ int devGuiStarted;
  /* 0x0154 */ int frametime;
  /* 0x0158 */ float frametime_base;
  /* 0x015c */ int realtime;
  /* 0x0160 */ int realFrametime;
  /* 0x0164 */ BOOL inputUpdatedPrevFrame;
  /* 0x0165 */ char Padding_776[3];
  /* 0x0168 */ struct clientLogo_t logo;
  /* 0x0180 */ union vec3_t mapCenter;
  /* 0x018c */ int numlocalservers;
  /* 0x0190 */ struct serverInfo_t localServers[128];
  /* 0x8990 */ int lastServerPinged;
  /* 0x8994 */ int pingedServerCount;
  /* 0x8998 */ int totalServersParsed;
  /* 0x899c */ int pingUpdateSource;
  /* 0x89a0 */ struct Material* whiteMaterial;
  /* 0x89a4 */ struct Material* consoleMaterial;
  /* 0x89a8 */ struct Material* spinnerMaterial;
  /* 0x89ac */ struct Material* loaderMaterial;
  /* 0x89b0 */ struct Font_s* consoleFont;
  /* 0x89b4 */ struct vidConfig_t vidConfig;
  /* 0x89f4 */ struct clientDebug_t debug;
  /* 0x8a8c */ struct XNADDR xnaddrs[18];
  /* 0x8d26 */ char Padding_777[2];
  /* 0x8d28 */ volatile long scriptError;
  /* 0x8d2c */ union vec3_t debugRenderForward;
  /* 0x8d38 */ union vec3_t debugRenderPos;
  /* 0x8d44 */ int serverId;
  /* 0x8d48 */ int forceFullscreen;
  /* 0x8d4c */ int exitForceFullscreen;
  /* 0x8d50 */ BOOL inParty[18];
  /* 0x8d62 */ char Padding_778[6];
  /* 0x8d68 */ struct clSnapshot_t noDeltaSnapshot;
  /* 0xb7b0 */ int nextNoDeltaEntity;
  /* 0xb7b4 */ struct entityState_s noDeltaEntities[1024];
  /* 0x497b4 */ struct gameState_t gameState;
  /* 0x5ef84 */ long __PADDING__[1];
}; /* size: 0x5ef88 */

struct flameRender_s
{
  /* 0x0000 */ char name[128];
  /* 0x0080 */ struct flameGeneric_s* fireList;
  /* 0x0084 */ struct flameGeneric_s* dripsList;
}; /* size: 0x0088 */

class std::numeric_limits<unsigned int>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct XAnimPartTransPtr
{
  /* 0x0000 */ struct XAnimPartTrans* trans;
  /* 0x0004 */ unsigned char partIndex;
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

class std::allocator<void>
{
}; /* size: 0x0001 */

struct LeaderboardDef
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int id;
  /* 0x0008 */ int columnCount;
  /* 0x000c */ int dwColumnCount;
  /* 0x0010 */ int xpColId;
  /* 0x0014 */ int prestigeColId;
  /* 0x0018 */ struct LbColumnDef* columns;
  /* 0x001c */ enum LbUpdateType updateType;
  /* 0x0020 */ int trackTypes;
}; /* size: 0x0024 */

struct std::char_traits<wchar_t>
{
}; /* size: 0x0001 */

struct uploadStreamData_t
{
  /* 0x0000 */ enum ControllerIndex_t controllerIndex;
  /* 0x0004 */ unsigned char buffer[524288];
  /* 0x80004 */ long Padding_779;
  /* 0x80008 */ unsigned __int64 fileID;
  /* 0x80010 */ volatile int writer;
  /* 0x80014 */ volatile int reader;
  /* 0x80018 */ volatile BOOL active;
  /* 0x80019 */ char Padding_780[3];
  /* 0x8001c */ volatile int lastWrite;
  /* 0x80020 */ int totalBytesUploaded;
  /* 0x80024 */ BOOL overflow;
  /* 0x80025 */ BOOL failure;
  /* 0x80026 */ char Padding_781[2];
  /* 0x80028 */ struct uploadSendInfo_t sendHistory[100];
  /* 0x80348 */ int sendHistoryIndex;
  /* 0x8034c */ long __PADDING__[1];
}; /* size: 0x80350 */

class std::numeric_limits<float>
{
  union
  {
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
    /* 0x0000 */ const int max_exponent;
    /* 0x0000 */ const int max_exponent10;
    /* 0x0000 */ const int min_exponent;
    /* 0x0000 */ const int min_exponent10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct WebM_Url
{
  /* 0x0000 */ int size;
  /* 0x0004 */ struct UrlMethod* method;
  /* 0x0008 */ void* stream;
}; /* size: 0x000c */

class std::numeric_limits<__int64>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct std::_Container_base0
{
}; /* size: 0x0001 */

typedef struct _DSCAPS
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long dwMinSecondarySampleRate;
  /* 0x000c */ unsigned long dwMaxSecondarySampleRate;
  /* 0x0010 */ unsigned long dwPrimaryBuffers;
  /* 0x0014 */ unsigned long dwMaxHwMixingAllBuffers;
  /* 0x0018 */ unsigned long dwMaxHwMixingStaticBuffers;
  /* 0x001c */ unsigned long dwMaxHwMixingStreamingBuffers;
  /* 0x0020 */ unsigned long dwFreeHwMixingAllBuffers;
  /* 0x0024 */ unsigned long dwFreeHwMixingStaticBuffers;
  /* 0x0028 */ unsigned long dwFreeHwMixingStreamingBuffers;
  /* 0x002c */ unsigned long dwMaxHw3DAllBuffers;
  /* 0x0030 */ unsigned long dwMaxHw3DStaticBuffers;
  /* 0x0034 */ unsigned long dwMaxHw3DStreamingBuffers;
  /* 0x0038 */ unsigned long dwFreeHw3DAllBuffers;
  /* 0x003c */ unsigned long dwFreeHw3DStaticBuffers;
  /* 0x0040 */ unsigned long dwFreeHw3DStreamingBuffers;
  /* 0x0044 */ unsigned long dwTotalHwMemBytes;
  /* 0x0048 */ unsigned long dwFreeHwMemBytes;
  /* 0x004c */ unsigned long dwMaxContigFreeHwMemBytes;
  /* 0x0050 */ unsigned long dwUnlockTransferRateHwBuffers;
  /* 0x0054 */ unsigned long dwPlayCpuOverheadSwBuffers;
  /* 0x0058 */ unsigned long dwReserved1;
  /* 0x005c */ unsigned long dwReserved2;
} DSCAPS, *PDSCAPS; /* size: 0x0060 */

class std::numeric_limits<unsigned long>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct std::_Num_int_base
{
  union
  {
    /* 0x0000 */ const BOOL is_bounded;
    /* 0x0000 */ const BOOL is_exact;
    /* 0x0000 */ const BOOL is_integer;
    /* 0x0000 */ const BOOL is_modulo;
    /* 0x0000 */ const BOOL is_specialized;
    /* 0x0000 */ const int radix;
  }; /* size: 0x0004 */
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

struct cgMedia_t
{
  /* 0x0000 */ struct Material* whiteMaterial;
  /* 0x0004 */ struct Material* teamStatusBar;
  /* 0x0008 */ struct Material* afkLightbulb;
  /* 0x000c */ struct Material* connectionMaterial;
  /* 0x0010 */ struct Material* youInKillCamMaterial;
  /* 0x0014 */ struct TracerDef* tracerDefault;
  /* 0x0018 */ struct Material* tracerThermalOverrideMat;
  /* 0x001c */ struct Material* redTracerMaterial;
  /* 0x0020 */ struct Material* greenTracerMaterial;
  /* 0x0024 */ struct Material* bulletMaterial;
  /* 0x0028 */ struct Material* laserMaterial;
  /* 0x002c */ struct Material* laserViewmodelMaterial;
  /* 0x0030 */ struct Material* laserLightMaterial;
  /* 0x0034 */ struct Material* lagometerMaterial;
  /* 0x0038 */ struct Material* ropeMaterial;
  /* 0x003c */ struct Material* fhj18hudBackground;
  /* 0x0040 */ struct Material* rangefinderHudBackground;
  /* 0x0044 */ struct Material* bcpuHudBackground;
  /* 0x0048 */ struct Material* tacticalInsertionBackground;
  /* 0x004c */ struct Material* briefcaseBombBackground;
  /* 0x0050 */ struct Material* pdaHackerBackground;
  /* 0x0054 */ struct Material* scopeOverlayEmp;
  /* 0x0058 */ struct Material* hintMaterials[264];
  /* 0x0478 */ struct Material* objectiveMaterials[1];
  /* 0x047c */ struct Material* friendMaterials[3];
  /* 0x0488 */ struct Material* partyMaterials[3];
  /* 0x0494 */ struct Material* damageMaterial;
  /* 0x0498 */ struct Material* mantleHint;
  /* 0x049c */ struct Material* graphline;
  /* 0x04a0 */ struct Font_s* smallDevFont;
  /* 0x04a4 */ struct Font_s* bigDevFont;
  /* 0x04a8 */ struct Font_s* extraBigDevFont;
  /* 0x04ac */ struct Font_s* inspectorFont;
  /* 0x04b0 */ unsigned int grenadeExplodeSound[32];
  /* 0x0530 */ unsigned int rifleGrenadeSound[32];
  /* 0x05b0 */ unsigned int rocketExplodeSound[32];
  /* 0x0630 */ unsigned int rocketExplodeXtremeSound[32];
  /* 0x06b0 */ unsigned int mortarShellExplodeSound[32];
  /* 0x0730 */ unsigned int tankShellExplodeSound[32];
  /* 0x07b0 */ unsigned int weaponImpactsTankArmorSound[16];
  /* 0x07f0 */ unsigned int weaponImpactsTankTreadSound[16];
  /* 0x0830 */ unsigned int bulletHitSmallSound[32];
  /* 0x08b0 */ unsigned int bulletHitLargeSound[32];
  /* 0x0930 */ unsigned int bulletHitAPSound[32];
  /* 0x09b0 */ unsigned int bulletHitXTremeSound[32];
  /* 0x0a30 */ unsigned int shotgunHitSound[32];
  /* 0x0ab0 */ unsigned int boltHitSound[32];
  /* 0x0b30 */ unsigned int bladeHitSound[32];
  /* 0x0bb0 */ unsigned int bulletExitSmallSound[32];
  /* 0x0c30 */ unsigned int bulletExitLargeSound[32];
  /* 0x0cb0 */ unsigned int bulletExitAPSound[32];
  /* 0x0d30 */ unsigned int bulletExitXTremeSound[32];
  /* 0x0db0 */ unsigned int shotgunExitSound[32];
  /* 0x0e30 */ unsigned int boltExitSound[32];
  /* 0x0eb0 */ unsigned int mantleSound;
  /* 0x0eb4 */ unsigned int mantleSoundPlayer;
  /* 0x0eb8 */ unsigned int dtpLaunchSound;
  /* 0x0ebc */ unsigned int dtpLaunchSoundPlayer;
  /* 0x0ec0 */ unsigned int dtpLandSound[9];
  /* 0x0ee4 */ unsigned int dtpLandSoundPlayer[9];
  /* 0x0f08 */ char dtpSlideLoopSound[64][9];
  /* 0x1148 */ char dtpSlideLoopSoundPlayer[64][9];
  /* 0x1388 */ unsigned int dtpSlideStopSound[9];
  /* 0x13ac */ unsigned int dtpSlideStopSoundPlayer[9];
  /* 0x13d0 */ unsigned int dtpCollideSound;
  /* 0x13d4 */ unsigned int dtpCollideSoundPlayer;
  /* 0x13d8 */ unsigned int playerSlidingStart_1p[9];
  /* 0x13fc */ unsigned int playerSlidingStart_3p[9];
  /* 0x1420 */ unsigned int playerSlidingStop_1p[9];
  /* 0x1444 */ unsigned int playerSlidingStop_3p[9];
  /* 0x1468 */ unsigned int bulletWhizby;
  /* 0x146c */ unsigned int bulletCrack;
  /* 0x1470 */ unsigned int underwaterWhizby;
  /* 0x1474 */ unsigned int deathGurgle;
  /* 0x1478 */ unsigned int meleeHit;
  /* 0x147c */ unsigned int meleeHitOther;
  /* 0x1480 */ unsigned int meleeKnifeHit;
  /* 0x1484 */ unsigned int meleeKnifeHitOther;
  /* 0x1488 */ unsigned int meleeDogHit;
  /* 0x148c */ unsigned int meleeDogHitOther;
  /* 0x1490 */ unsigned int meleeKnifeHitShield;
  /* 0x1494 */ unsigned int nightVisionOn;
  /* 0x1498 */ unsigned int nightVisionOff;
  /* 0x149c */ unsigned int playerSprintGasp;
  /* 0x14a0 */ unsigned int playerHeartBeatSound;
  /* 0x14a4 */ unsigned int playerBreathInSound;
  /* 0x14a8 */ unsigned int playerBreathOutSound;
  /* 0x14ac */ unsigned int playerBreathGaspSound;
  /* 0x14b0 */ unsigned int playerSwapOffhand;
  /* 0x14b4 */ unsigned int rangeFinderLoopSound;
  /* 0x14b8 */ unsigned int sensorGrenadeAlert;
  /* 0x14bc */ unsigned int sonarAttachmentPingSound;
  /* 0x14c0 */ unsigned int chargeShotWeaponChargingSound;
  /* 0x14c4 */ unsigned int chargeShotWeaponDischargeSound;
  /* 0x14c8 */ unsigned int chargeShotWeaponBulletQueueSound[5];
  /* 0x14dc */ unsigned int radarSweepSound;
  /* 0x14e0 */ unsigned int radarPingSound;
  /* 0x14e4 */ unsigned int headshotSound;
  /* 0x14e8 */ struct Material* compassping_player;
  /* 0x14ec */ struct Material* compassping_player_bracket;
  /* 0x14f0 */ struct Material* compassping_playerfiring_shoutcast;
  /* 0x14f4 */ struct Material* compassping_friendlyfiring;
  /* 0x14f8 */ struct Material* compassping_friendlyyelling;
  /* 0x14fc */ struct Material* compassping_friendlyfakefire;
  /* 0x1500 */ struct Material* compassping_partyfiring;
  /* 0x1504 */ struct Material* compassping_partyyelling;
  /* 0x1508 */ struct Material* compassping_enemy;
  /* 0x150c */ struct Material* compassping_enemydirectional;
  /* 0x1510 */ struct Material* compassping_enemyfiring;
  /* 0x1514 */ struct Material* compassping_enemyyelling;
  /* 0x1518 */ struct Material* compassping_enemysatellite;
  /* 0x151c */ struct Material* compassping_grenade;
  /* 0x1520 */ struct Material* compassping_explosion;
  /* 0x1524 */ struct Material* compassping_firstplace;
  /* 0x1528 */ struct Material* compassping_generic_player_shoutcast;
  /* 0x152c */ struct Material* compassping_generic_playerfiring_shoutcast;
  /* 0x1530 */ struct Material* compassping_generic_playerfiring;
  /* 0x1534 */ struct Material* watch_face;
  /* 0x1538 */ struct Material* watch_hour;
  /* 0x153c */ struct Material* watch_minute;
  /* 0x1540 */ struct Material* watch_second;
  /* 0x1544 */ struct Material* acoustic_ping;
  /* 0x1548 */ struct Material* acoustic_wedge;
  /* 0x154c */ struct Material* acoustic_grid;
  /* 0x1550 */ struct Material* compass_scrambler_large;
  /* 0x1554 */ struct Material* compass_mortar_selector;
  /* 0x1558 */ struct Material* compass_acoustic_ping;
  /* 0x155c */ struct Material* compass_radarline;
  /* 0x1560 */ struct Material* compass_artillery_friendly;
  /* 0x1564 */ struct Material* compass_artillery_enemy;
  /* 0x1568 */ struct Material* compass_mortar_friendly;
  /* 0x156c */ struct Material* compass_mortar_enemy;
  /* 0x1570 */ struct Material* compass_dogs_enemy;
  /* 0x1574 */ struct Material* compass_incoming_artillery;
  /* 0x1578 */ struct Material* compass_sentry_white;
  /* 0x157c */ struct Material* compass_microwave_turret_white;
  /* 0x1580 */ struct Material* compass_supplydrop_white;
  /* 0x1584 */ struct Material* compass_supplydrop_green;
  /* 0x1588 */ struct Material* compass_supplydrop_red;
  /* 0x158c */ struct Material* compass_guided_hellfire_missile;
  /* 0x1590 */ struct Material* compass_guided_drone_missile;
  /* 0x1594 */ struct Material* compass_tank_turret;
  /* 0x1598 */ struct Material* grenadeIconFrag;
  /* 0x159c */ struct Material* grenadeIconFlash;
  /* 0x15a0 */ struct Material* grenadeIconThrowBack;
  /* 0x15a4 */ struct Material* grenadePointer;
  /* 0x15a8 */ struct Material* offscreenObjectivePointer;
  /* 0x15ac */ struct Material* clientLastStandWaypoint;
  /* 0x15b0 */ struct Material* clientAutoReviveWaypoint;
  /* 0x15b4 */ struct Material* clientManualReviveWaypoint;
  /* 0x15b8 */ struct Material* clientTeamReviveWaypoint[10];
  /* 0x15e0 */ struct Material* demoTimelineFaded;
  /* 0x15e4 */ struct Material* demoTimelineSolid;
  /* 0x15e8 */ struct Material* demoTimelineCursor;
  /* 0x15ec */ struct Material* demoTimelineBookmark;
  /* 0x15f0 */ struct Material* demoStatePaused;
  /* 0x15f4 */ struct Material* demoStatePlay;
  /* 0x15f8 */ struct Material* demoStateStop;
  /* 0x15fc */ struct Material* demoStateJump;
  /* 0x1600 */ struct Material* demoStateForwardFast;
  /* 0x1604 */ struct Material* demoStateForwardSlow;
  /* 0x1608 */ struct Material* demoDollycamTracerMaterial;
  /* 0x160c */ struct FxImpactTable* fx;
  /* 0x1610 */ const struct FxEffectDef* fxNoBloodFleshHit;
  /* 0x1614 */ const struct FxEffectDef* fxKnifeBlood;
  /* 0x1618 */ const struct FxEffectDef* fxKnifeNoBlood;
  /* 0x161c */ const struct FxEffectDef* fxDogBlood;
  /* 0x1620 */ const struct FxEffectDef* fxDogNoBlood;
  /* 0x1624 */ const struct FxEffectDef* fxNonFatalHero;
  /* 0x1628 */ const struct FxEffectDef* fxSensorGrenadeFriendlyRunner;
  /* 0x162c */ const struct FxEffectDef* fxSensorGrenadeEnemyRunner;
  /* 0x1630 */ const struct FxEffectDef* fxSensorGrenadeTargetingBolt;
  /* 0x1634 */ const struct FxEffectDef* fxRiotShieldImpact;
  /* 0x1638 */ const struct FxEffectDef* fxBloodOnRiotshield;
  /* 0x163c */ const struct FxEffectDef* fxLaserPoint;
  /* 0x1640 */ const struct FxEffectDef* fxLaserPointSight;
  /* 0x1644 */ const struct FxEffectDef* fxLaserPointSightThermal;
  /* 0x1648 */ const struct FxEffectDef* fxLaserPointVehicle;
  /* 0x164c */ const struct FxEffectDef* fxDtpArmSlide1;
  /* 0x1650 */ const struct FxEffectDef* fxDtpArmSlide2;
  /* 0x1654 */ const struct FxEffectDef* fxPlayerSliding;
  /* 0x1658 */ const struct FxEffectDef* fxPuff;
  /* 0x165c */ const struct FxEffectDef* heliDustEffect;
  /* 0x1660 */ const struct FxEffectDef* heliWaterEffect;
  /* 0x1664 */ const struct FxEffectDef* helicopterLightSmoke;
  /* 0x1668 */ const struct FxEffectDef* helicopterHeavySmoke;
  /* 0x166c */ const struct FxEffectDef* helicopterOnFire;
  /* 0x1670 */ const struct FxEffectDef* jetAfterburner;
  /* 0x1674 */ struct Material* empFilterOverlay;
  /* 0x1678 */ struct Material* nightVisionOverlay;
  /* 0x167c */ struct Material* hudIconNVG;
  /* 0x1680 */ struct Material* hudDpadArrow;
  /* 0x1684 */ struct Material* hudDpadCircle;
  /* 0x1688 */ struct Material* hudDpadLeftHighlight;
  /* 0x168c */ struct Material* ammoCounterBullet;
  /* 0x1690 */ struct Material* ammoCounterBeltBullet;
  /* 0x1694 */ struct Material* ammoCounterRifleBullet;
  /* 0x1698 */ struct Material* ammoCounterRocket;
  /* 0x169c */ struct Material* ammoCounterShotgunShell;
  /* 0x16a0 */ struct Material* ammoCounterSingle;
  /* 0x16a4 */ struct Material* lifeCounterAlive;
  /* 0x16a8 */ struct Material* lifeCounterDead;
  /* 0x16ac */ struct Material* textDecodeCharacters;
  /* 0x16b0 */ struct Material* textDecodeCharactersGlow;
  /* 0x16b4 */ const struct FxEffectDef* physicsWaterEffects[8];
  /* 0x16d4 */ const struct FxEffectDef* infraredHeartbeat;
  /* 0x16d8 */ const struct FxEffectDef* playerLaserSightLight;
}; /* size: 0x16dc */

struct AnimState
{
  /* 0x0000 */ unsigned short name;
  /* 0x0002 */ unsigned short notify;
  /* 0x0004 */ unsigned char flags;
  /* 0x0005 */ unsigned char size;
  /* 0x0006 */ char Padding_782[2];
  /* 0x0008 */ struct AnimSubState* subStates;
}; /* size: 0x000c */

struct std::_Iterator_base0
{
}; /* size: 0x0001 */

struct WaveInLineInfo
{
  /* 0x0000 */ int isValid;
  /* 0x0004 */ unsigned long mixerID;
  /* 0x0008 */ unsigned long dstWaveInLineID;
  /* 0x000c */ int oldRecLevel;
  /* 0x0010 */ int oldMuteState;
}; /* size: 0x0014 */

class std::reverse_iterator<std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >;

class std::tr1::_Ref_count_base
{
  /* 0x0000 */ long Padding_783;
  /* 0x0004 */ long _Uses;
  /* 0x0008 */ long _Weaks;
}; /* size: 0x000c */

class std::numeric_limits<double>
{
  union
  {
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
    /* 0x0000 */ const int max_exponent;
    /* 0x0000 */ const int max_exponent10;
    /* 0x0000 */ const int min_exponent;
    /* 0x0000 */ const int min_exponent10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

class std::numeric_limits<long double>
{
  union
  {
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
    /* 0x0000 */ const int max_exponent;
    /* 0x0000 */ const int max_exponent10;
    /* 0x0000 */ const int min_exponent;
    /* 0x0000 */ const int min_exponent10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct split_cb_params
{
  /* 0x0000 */ int subvect_size;
  /* 0x0004 */ int nb_subvect;
  /* 0x0008 */ const char* shape_cb;
  /* 0x000c */ int shape_bits;
  /* 0x0010 */ int have_sign;
}; /* size: 0x0014 */

class std::numeric_limits<long>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct std::_Num_base
{
  union
  {
    /* 0x0000 */ enum std::float_denorm_style has_denorm;
    /* 0x0000 */ const BOOL has_denorm_loss;
    /* 0x0000 */ const BOOL has_infinity;
    /* 0x0000 */ const BOOL has_quiet_NaN;
    /* 0x0000 */ const BOOL has_signaling_NaN;
    /* 0x0000 */ const BOOL is_bounded;
    /* 0x0000 */ const BOOL is_exact;
    /* 0x0000 */ const BOOL is_iec559;
    /* 0x0000 */ const BOOL is_integer;
    /* 0x0000 */ const BOOL is_modulo;
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const BOOL is_specialized;
    /* 0x0000 */ const BOOL tinyness_before;
    /* 0x0000 */ const BOOL traps;
    /* 0x0000 */ enum std::float_round_style round_style;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
    /* 0x0000 */ const int max_exponent;
    /* 0x0000 */ const int max_exponent10;
    /* 0x0000 */ const int min_exponent;
    /* 0x0000 */ const int min_exponent10;
    /* 0x0000 */ const int radix;
  }; /* size: 0x0004 */
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

struct weaponParms
{
  /* 0x0000 */ union vec3_t forward;
  /* 0x000c */ union vec3_t right;
  /* 0x0018 */ union vec3_t up;
  /* 0x0024 */ union vec3_t muzzleTrace;
  /* 0x0030 */ union vec3_t gunForward;
  /* 0x003c */ union Weapon weapon;
  /* 0x0040 */ const struct WeaponVariantDef* weapVariantDef;
  /* 0x0044 */ const struct WeaponDef* weapDef;
}; /* size: 0x0048 */

class std::numeric_limits<wchar_t>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

class std::numeric_limits<unsigned __int64>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct std::_Pair_base<WeaponComponent *,WeaponComponent *>
{
  /* 0x0000 */ struct WeaponComponent* first;
  /* 0x0004 */ struct WeaponComponent* second;
}; /* size: 0x0008 */

struct smodel_debug_info_t
{
  /* 0x0000 */ struct cStaticModel_s* smodel;
  /* 0x0004 */ float dist2;
}; /* size: 0x0008 */

class std::numeric_limits<signed char>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct std::_Nonscalar_ptr_iterator_tag
{
}; /* size: 0x0001 */

typedef union _Dconst
{
  union
  {
    /* 0x0000 */ unsigned short _Word[8];
    /* 0x0000 */ float _Float;
    /* 0x0000 */ double _Double;
    /* 0x0000 */ double _Long_double;
  }; /* size: 0x0010 */
} Dconst, *PDconst; /* size: 0x0010 */

struct scrEvaluateGlob_t
{
  /* 0x0000 */ BOOL freezeScope;
  /* 0x0001 */ BOOL freezeObjects;
  /* 0x0002 */ BOOL objectChanged;
}; /* size: 0x0003 */

typedef struct __type_info_node
{
  /* 0x0000 */ void* _MemPtr;
  /* 0x0004 */ struct __type_info_node* _Next;
} _type_info_node, *P_type_info_node; /* size: 0x0008 */

struct code
{
  /* 0x0000 */ unsigned char op;
  /* 0x0001 */ unsigned char bits;
  /* 0x0002 */ unsigned short val;
}; /* size: 0x0004 */

class bdYouTubeAuthorizationCode
{
  /* 0x0000 */ long Padding_784;
  /* 0x0004 */ char m_userCode[33];
  /* 0x0025 */ char m_verificationUrl[513];
}; /* size: 0x0228 */

struct breakpointData_t
{
  /* 0x0000 */ int type;
  /* 0x0004 */ int oldType;
  /* 0x0008 */ int id;
  /* 0x000c */ unsigned char* pos;
  /* 0x0010 */ unsigned char op;
  /* 0x0011 */ char Padding_785[3];
  /* 0x0014 */ int uniqueId;
  /* 0x0018 */ struct objFileInfo_t* fileInfo;
  /* 0x001c */ int lineNum;
  /* 0x0020 */ unsigned int localId;
  /* 0x0024 */ const char* watch_expr_text;
  /* 0x0028 */ struct ScriptExpression_t watch_expr;
  /* 0x0034 */ const char* cond_expr_text;
  /* 0x0038 */ struct ScriptExpression_t cond_expr;
  /* 0x0044 */ unsigned int context;
  /* 0x0048 */ struct VariableValue oldValue;
  /* 0x0050 */ unsigned int notifyStringId;
  /* 0x0054 */ long __PADDING__[1];
}; /* size: 0x0058 */

struct SurfaceTypeSoundList
{
  /* 0x0000 */ char* surfaceSoundBase;
  /* 0x0004 */ char** soundAliasList;
}; /* size: 0x0008 */

struct WeaponStatsTable
{
  /* 0x0000 */ struct AttachmentTableEntry specificWeaponAttachments[64];
  /* 0x0e00 */ struct AttachmentTableEntry* specificWeaponAttachmentPoints[64][6];
  /* 0x1400 */ int numSpecificWeaponAttachmentPoints[6];
  /* 0x1418 */ int numSpecificWeaponAttachments;
  /* 0x141c */ long __PADDING__[1];
}; /* size: 0x1420 */

struct std::unary_function<double,unsigned int>
{
}; /* size: 0x0001 */

struct cspField_t
{
  /* 0x0000 */ const char* szName;
  /* 0x0004 */ int iOffset;
  /* 0x0008 */ int iFieldType;
}; /* size: 0x000c */

struct FxImpactTable
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ struct FxImpactEntry* table;
}; /* size: 0x0008 */

union XAssetHeader
{
  union
  {
    /* 0x0000 */ struct XModelPieces* xmodelPieces;
    /* 0x0000 */ struct PhysPreset* physPreset;
    /* 0x0000 */ struct PhysConstraints* physConstraints;
    /* 0x0000 */ struct DestructibleDef* destructibleDef;
    /* 0x0000 */ struct XAnimParts* parts;
    /* 0x0000 */ struct XModel* model;
    /* 0x0000 */ struct Material* material;
    /* 0x0000 */ struct MaterialPixelShader* pixelShader;
    /* 0x0000 */ struct MaterialVertexShader* vertexShader;
    /* 0x0000 */ struct MaterialTechniqueSet* techniqueSet;
    /* 0x0000 */ struct GfxImage* image;
    /* 0x0000 */ struct SndBank* sound;
    /* 0x0000 */ struct SndPatch* soundPatch;
    /* 0x0000 */ struct clipMap_t* clipMap;
    /* 0x0000 */ struct ComWorld* comWorld;
    /* 0x0000 */ struct GameWorldSp* gameWorldSp;
    /* 0x0000 */ struct GameWorldMp* gameWorldMp;
    /* 0x0000 */ struct MapEnts* mapEnts;
    /* 0x0000 */ struct GfxWorld* gfxWorld;
    /* 0x0000 */ struct GfxLightDef* lightDef;
    /* 0x0000 */ struct Font_s* font;
    /* 0x0000 */ struct FontIcon* fontIcon;
    /* 0x0000 */ struct MenuList* menuList;
    /* 0x0000 */ struct menuDef_t* menu;
    /* 0x0000 */ struct LocalizeEntry* localize;
    /* 0x0000 */ struct WeaponVariantDef* weapon;
    /* 0x0000 */ struct WeaponAttachment* attachment;
    /* 0x0000 */ struct WeaponAttachmentUnique* attachmentUnique;
    /* 0x0000 */ struct WeaponCamo* weaponCamo;
    /* 0x0000 */ struct SndDriverGlobals* sndDriverGlobals;
    /* 0x0000 */ const struct FxEffectDef* fx;
    /* 0x0000 */ struct FxImpactTable* impactFx;
    /* 0x0000 */ struct RawFile* rawfile;
    /* 0x0000 */ struct StringTable* stringTable;
    /* 0x0000 */ struct LeaderboardDef* leaderboardDef;
    /* 0x0000 */ struct XGlobals* xGlobals;
    /* 0x0000 */ struct ddlRoot_t* ddlRoot;
    /* 0x0000 */ struct Glasses* glasses;
    /* 0x0000 */ struct TextureList* textureList;
    /* 0x0000 */ struct EmblemSet* emblemSet;
    /* 0x0000 */ struct ScriptParseTree* scriptParseTree;
    /* 0x0000 */ struct KeyValuePairs* keyValuePairs;
    /* 0x0000 */ struct VehicleDef* vehicleDef;
    /* 0x0000 */ struct MemoryBlock* memoryBlock;
    /* 0x0000 */ struct AddonMapEnts* addonMapEnts;
    /* 0x0000 */ struct TracerDef* tracerDef;
    /* 0x0000 */ struct SkinnedVertsDef* skinnedVertsDef;
    /* 0x0000 */ struct Qdb* qdb;
    /* 0x0000 */ struct Slug* slug;
    /* 0x0000 */ struct FootstepTableDef* footstepTableDef;
    /* 0x0000 */ struct FootstepFXTableDef* footstepFXTableDef;
    /* 0x0000 */ struct ZBarrierDef* zbarrierDef;
    /* 0x0000 */ void* data;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct zhuffman
{
  /* 0x0000 */ unsigned short fast[512];
  /* 0x0400 */ unsigned short firstcode[16];
  /* 0x0420 */ int maxcode[17];
  /* 0x0464 */ unsigned short firstsymbol[16];
  /* 0x0484 */ unsigned char size[288];
  /* 0x05a4 */ unsigned short value[288];
}; /* size: 0x07e4 */

struct zbuf
{
  /* 0x0000 */ unsigned char* zbuffer;
  /* 0x0004 */ unsigned char* zbuffer_end;
  /* 0x0008 */ int num_bits;
  /* 0x000c */ unsigned int code_buffer;
  /* 0x0010 */ char* zout;
  /* 0x0014 */ char* zout_start;
  /* 0x0018 */ char* zout_end;
  /* 0x001c */ int z_expandable;
  /* 0x0020 */ struct zhuffman z_length;
  /* 0x0804 */ struct zhuffman z_distance;
}; /* size: 0x0fe8 */

struct SndIndexEntry
{
  /* 0x0000 */ unsigned short value;
  /* 0x0002 */ unsigned short next;
}; /* size: 0x0004 */

struct PhysGlob
{
  /* 0x0000 */ class phys_free_list<PhysObjUserData> objects;
  /* 0x0414 */ struct PhysObjUserData* userRigidBodies[16];
  /* 0x0454 */ int timeLastSnapshot;
  /* 0x0458 */ int timeLastUpdate;
}; /* size: 0x045c */

class phys_free_list<VehicleParameter>
{
  /* 0x0000 */ class phys_free_list<VehicleParameter>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ struct VehicleParameter* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

struct ID3D10Asynchronous
{
}; /* size: 0x0004 */

struct SndDuck
{
  /* 0x0000 */ char name[32];
  /* 0x0020 */ unsigned int id;
  /* 0x0024 */ float fadeIn;
  /* 0x0028 */ float fadeOut;
  /* 0x002c */ float startDelay;
  /* 0x0030 */ float distance;
  /* 0x0034 */ float length;
  /* 0x0038 */ unsigned int fadeInCurve;
  /* 0x003c */ unsigned int fadeOutCurve;
  /* 0x0040 */ float* attenuation;
  /* 0x0044 */ float* filter;
  /* 0x0048 */ int updateWhilePaused;
}; /* size: 0x004c */

class CCallback<LiveSteamClient,PersonaStateChange_t,0>
{
  /* 0x0000 */ long Padding_786[3];
  /* 0x000c */ class LiveSteamClient* m_pObj;
  /* 0x0010 */ void* m_Func /* function */;
}; /* size: 0x0014 */

struct SndDialogScriptIdLookup
{
  /* 0x0000 */ unsigned int scriptId;
  /* 0x0004 */ unsigned int aliasId;
}; /* size: 0x0008 */

struct clipMap_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int isInUse;
  /* 0x0008 */ struct ClipInfo info;
  /* 0x0050 */ struct ClipInfo* pInfo;
  /* 0x0054 */ unsigned int numStaticModels;
  /* 0x0058 */ struct cStaticModel_s* staticModelList;
  /* 0x005c */ unsigned int numNodes;
  /* 0x0060 */ struct cNode_t* nodes;
  /* 0x0064 */ unsigned int numLeafs;
  /* 0x0068 */ struct cLeaf_s* leafs;
  /* 0x006c */ unsigned int vertCount;
  /* 0x0070 */ union vec3_t* verts;
  /* 0x0074 */ int triCount;
  /* 0x0078 */ unsigned short* triIndices;
  /* 0x007c */ unsigned char* triEdgeIsWalkable;
  /* 0x0080 */ int partitionCount;
  /* 0x0084 */ struct CollisionPartition* partitions;
  /* 0x0088 */ int aabbTreeCount;
  /* 0x008c */ struct CollisionAabbTree* aabbTrees;
  /* 0x0090 */ unsigned int numSubModels;
  /* 0x0094 */ struct cmodel_t* cmodels;
  /* 0x0098 */ int numClusters;
  /* 0x009c */ int clusterBytes;
  /* 0x00a0 */ unsigned char* visibility;
  /* 0x00a4 */ int vised;
  /* 0x00a8 */ struct MapEnts* mapEnts;
  /* 0x00ac */ struct cbrush_t* box_brush;
  /* 0x00b0 */ struct cmodel_t box_model;
  /* 0x00fc */ unsigned short originalDynEntCount;
  /* 0x00fe */ unsigned short dynEntCount[4];
  /* 0x0106 */ char Padding_787[2];
  /* 0x0108 */ struct DynEntityDef* dynEntDefList[2];
  /* 0x0110 */ struct DynEntityPose* dynEntPoseList[2];
  /* 0x0118 */ struct DynEntityClient* dynEntClientList[2];
  /* 0x0120 */ struct DynEntityServer* dynEntServerList[2];
  /* 0x0128 */ struct DynEntityColl* dynEntCollList[4];
  /* 0x0138 */ int num_constraints;
  /* 0x013c */ struct PhysConstraint* constraints;
  /* 0x0140 */ int max_ropes;
  /* 0x0144 */ struct rope_t* ropes;
  /* 0x0148 */ unsigned int checksum;
}; /* size: 0x014c */

struct GfxLightRegionAxis
{
  /* 0x0000 */ union vec3_t dir;
  /* 0x000c */ float midPoint;
  /* 0x0010 */ float halfSize;
}; /* size: 0x0014 */

class rbint
{
}; /* size: 0x0001 */

struct MapEnts
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ char* entityString;
  /* 0x0008 */ int numEntityChars;
  /* 0x000c */ struct MapTriggers trigger;
}; /* size: 0x0024 */

struct uploadStreamDebugData_t
{
  /* 0x0000 */ BOOL isDataAdded;
  /* 0x0001 */ char Padding_788[3];
  /* 0x0004 */ int value;
}; /* size: 0x0008 */

struct TriggerHull
{
  /* 0x0000 */ struct Bounds bounds;
  /* 0x0018 */ int contents;
  /* 0x001c */ unsigned short slabCount;
  /* 0x001e */ unsigned short firstSlab;
}; /* size: 0x0020 */

struct $_TypeDescriptor$_extraBytes_70
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[70];
}; /* size: 0x004e */

struct VehicleState
{
  /* 0x0000 */ int entity;
  /* 0x0004 */ union vec3_t origin;
  /* 0x0010 */ union vec3_t angles;
  /* 0x001c */ union vec3_t velocity;
  /* 0x0028 */ union vec3_t angVelocity;
  /* 0x0034 */ union vec3_t previousOrigin;
  /* 0x0040 */ union vec3_t previousAngles;
  /* 0x004c */ union vec3_t bodyVelocity;
  /* 0x0058 */ union vec2_t tilt;
  /* 0x0060 */ union vec2_t tiltVelocity;
  /* 0x0068 */ union vec3_t mins;
  /* 0x0074 */ union vec3_t maxs;
  /* 0x0080 */ float targetHeightDelta;
  /* 0x0084 */ float lastGroundHeight;
  /* 0x0088 */ int clipmask;
  /* 0x008c */ union vec3_t groundNormal;
}; /* size: 0x0098 */

struct uploadStreamHistory_t
{
  /* 0x0000 */ struct uploadStreamDebugData_t history[60];
  /* 0x01e0 */ BOOL changed;
  /* 0x01e1 */ char Padding_789[3];
  /* 0x01e4 */ int highwater;
  /* 0x01e8 */ int roundNumber;
  /* 0x01ec */ unsigned int bytesWrittenThisRound;
  /* 0x01f0 */ unsigned int timeRoundStarted;
  /* 0x01f4 */ unsigned int lastIntervalUpdateBytes;
  /* 0x01f8 */ unsigned int lastIntervalUpdateTime;
}; /* size: 0x01fc */

struct $_TypeDescriptor$_extraBytes_64
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[64];
}; /* size: 0x0048 */

struct XAnimTime
{
  /* 0x0000 */ float time;
  /* 0x0004 */ float frameFrac;
  /* 0x0008 */ int frameIndex;
}; /* size: 0x000c */

struct DynEntityPose
{
  /* 0x0000 */ struct GfxPlacement pose;
  /* 0x001c */ float radius;
}; /* size: 0x0020 */

struct streamBuffer_t
{
  /* 0x0000 */ unsigned char* buffer;
  /* 0x0004 */ int bufferSize;
  /* 0x0008 */ volatile int writer;
  /* 0x000c */ volatile int reader;
  /* 0x0010 */ volatile BOOL active;
  /* 0x0011 */ char Padding_790[3];
  /* 0x0014 */ volatile int lastWriteTime;
  /* 0x0018 */ volatile int lastReadTime;
  /* 0x001c */ volatile BOOL taskRequestPending;
  /* 0x001d */ volatile BOOL taskRequestError;
  /* 0x001e */ char Padding_791[2];
  /* 0x0020 */ volatile unsigned __int64 fileID;
  /* 0x0028 */ enum ControllerIndex_t controllerIndex;
  /* 0x002c */ void* userData;
  /* 0x0030 */ int userDataSize;
  /* 0x0034 */ long __PADDING__[1];
}; /* size: 0x0038 */

struct downloadStreamingInformation_t
{
  /* 0x0000 */ enum ControllerIndex_t controllerIndex;
  /* 0x0004 */ long Padding_792;
  /* 0x0008 */ struct streamBuffer_t streamBuffer;
  /* 0x0040 */ struct fileShareReadFileInfo fileInfo;
  /* 0x0078 */ enum downloadStreamingState currentPhase;
  /* 0x007c */ BOOL markedForRetry;
  /* 0x007d */ char Padding_793[3];
  /* 0x0080 */ int downloadFailedTime;
  /* 0x0084 */ int retryAttempts;
  /* 0x0088 */ char demoMode[32];
  /* 0x00a8 */ BOOL readyForPlayback;
  /* 0x00a9 */ BOOL active;
  /* 0x00aa */ char Padding_794[2];
  /* 0x00ac */ int dataBlockDownloadRequestTime;
}; /* size: 0x00b0 */

struct DynEntityClient
{
  /* 0x0000 */ int physObjId;
  /* 0x0004 */ unsigned short flags;
  /* 0x0006 */ unsigned short lightingHandle;
  /* 0x0008 */ int health;
  /* 0x000c */ unsigned short burnTime;
  /* 0x000e */ unsigned short fadeTime;
  /* 0x0010 */ int physicsStartTime;
}; /* size: 0x0014 */

struct GfxHeroLight
{
  /* 0x0000 */ unsigned char type;
  /* 0x0001 */ unsigned char unused[3];
  /* 0x0004 */ union vec3_t color;
  /* 0x0010 */ union vec3_t dir;
  /* 0x001c */ union vec3_t origin;
  /* 0x0028 */ float radius;
  /* 0x002c */ float cosHalfFovOuter;
  /* 0x0030 */ float cosHalfFovInner;
  /* 0x0034 */ int exponent;
}; /* size: 0x0038 */

struct DynEntityColl
{
  /* 0x0000 */ unsigned short sector;
  /* 0x0002 */ unsigned short nextEntInSector;
  /* 0x0004 */ union vec3_t linkMins;
  /* 0x0010 */ union vec3_t linkMaxs;
  /* 0x001c */ int contents;
}; /* size: 0x0020 */

struct rope_client_verts_t
{
  /* 0x0000 */ struct rope_frame_verts_t frame_verts[2];
  /* 0x04b8 */ unsigned int frame_index;
}; /* size: 0x04bc */

struct rope_t
{
  /* 0x0000 */ struct par_t m_particles[25];
  /* 0x03e8 */ struct constraint_t m_constraints[30];
  /* 0x0730 */ int m_entity_anchors[3];
  /* 0x073c */ int m_num_particles;
  /* 0x0740 */ int m_num_constraints;
  /* 0x0744 */ int m_num_entity_anchors;
  /* 0x0748 */ int m_num_draw_verts;
  /* 0x074c */ struct rope_client_verts_t m_client_verts;
  /* 0x0c08 */ union vec3_t m_min;
  /* 0x0c14 */ union vec3_t m_max;
  /* 0x0c20 */ union vec3_t m_start;
  /* 0x0c2c */ union vec3_t m_end;
  /* 0x0c38 */ int m_in_use;
  /* 0x0c3c */ int m_visible;
  /* 0x0c40 */ int m_dist_constraint;
  /* 0x0c44 */ int m_flags;
  /* 0x0c48 */ const struct Material* m_material;
  /* 0x0c4c */ float m_seglen;
  /* 0x0c50 */ float m_length;
  /* 0x0c54 */ float m_width;
  /* 0x0c58 */ float m_scale;
  /* 0x0c5c */ float m_force_scale;
  /* 0x0c60 */ int m_health;
  /* 0x0c64 */ int m_frame;
  /* 0x0c68 */ int m_stable_count;
  /* 0x0c6c */ int m_static_rope;
  /* 0x0c70 */ unsigned short m_lightingHandle;
  /* 0x0c72 */ char __PADDING__[2];
}; /* size: 0x0c74 */

struct XModelConfig
{
  /* 0x0000 */ struct XModelConfigEntry entries[4];
  /* 0x1020 */ float mins[3];
  /* 0x102c */ float maxs[3];
  /* 0x1038 */ int collLod;
  /* 0x103c */ unsigned int flags;
  /* 0x1040 */ char physicsPresetFilename[1024];
  /* 0x1440 */ char physicsConstraintsFilename[1024];
  /* 0x1840 */ char collMapFilename[1024];
  /* 0x1c40 */ float bakeLightmapSampleSize;
  /* 0x1c44 */ float lightingOriginOffsetX;
  /* 0x1c48 */ float lightingOriginOffsetY;
  /* 0x1c4c */ float lightingOriginOffsetZ;
  /* 0x1c50 */ float lightingOriginRange;
}; /* size: 0x1c54 */

struct GfxSceneDynBrush
{
  /* 0x0000 */ struct BModelDrawInfo info;
  /* 0x0002 */ unsigned short dynEntId;
}; /* size: 0x0004 */

struct ComPrimaryLight
{
  /* 0x0000 */ unsigned char type;
  /* 0x0001 */ unsigned char canUseShadowMap;
  /* 0x0002 */ unsigned char exponent;
  /* 0x0003 */ char priority;
  /* 0x0004 */ short cullDist;
  /* 0x0006 */ unsigned char useCookie;
  /* 0x0007 */ unsigned char shadowmapVolume;
  /* 0x0008 */ union vec3_t color;
  /* 0x0014 */ union vec3_t dir;
  /* 0x0020 */ union vec3_t origin;
  /* 0x002c */ float radius;
  /* 0x0030 */ float cosHalfFovOuter;
  /* 0x0034 */ float cosHalfFovInner;
  /* 0x0038 */ float cosHalfFovExpanded;
  /* 0x003c */ float rotationLimit;
  /* 0x0040 */ float translationLimit;
  /* 0x0044 */ float mipDistance;
  /* 0x0048 */ float dAttenuation;
  /* 0x004c */ float roundness;
  /* 0x0050 */ union vec4_t diffuseColor;
  /* 0x0060 */ union vec4_t falloff;
  /* 0x0070 */ union vec4_t angle;
  /* 0x0080 */ union vec4_t aAbB;
  /* 0x0090 */ union vec4_t cookieControl0;
  /* 0x00a0 */ union vec4_t cookieControl1;
  /* 0x00b0 */ union vec4_t cookieControl2;
  /* 0x00c0 */ const char* defName;
}; /* size: 0x00c4 */

typedef struct _BLOB
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned char* pBlobData;
} BLOB, *PBLOB; /* size: 0x0008 */

struct SSkinModel
{
  /* 0x0000 */ int numVerts;
  /* 0x0004 */ int numTris;
  /* 0x0008 */ struct SSkinVert* verts;
  /* 0x000c */ unsigned short* tris;
}; /* size: 0x0010 */

struct pathbasenode_t
{
  /* 0x0000 */ union vec3_t vOrigin;
  /* 0x000c */ unsigned int type;
}; /* size: 0x0010 */

class phys_inplace_avl_tree<centity_t const *,auto_rigid_body,auto_rigid_body>
{
  /* 0x0000 */ struct auto_rigid_body* m_tree_root;
}; /* size: 0x0004 */

struct pathnode_tree_nodes_t
{
  /* 0x0000 */ int nodeCount;
  /* 0x0004 */ unsigned short* nodes;
}; /* size: 0x0008 */

union pathnode_tree_info_t
{
  union
  {
    /* 0x0000 */ struct pathnode_tree_t* child[2];
    /* 0x0000 */ struct pathnode_tree_nodes_t s;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct pathnode_tree_t
{
  /* 0x0000 */ int axis;
  /* 0x0004 */ float dist;
  /* 0x0008 */ union pathnode_tree_info_t u;
}; /* size: 0x0010 */

struct phys_inplace_avl_tree<unsigned int,generic_avl_map_node_t,generic_avl_map_node_t>::stack_item
{
  /* 0x0000 */ struct generic_avl_map_node_t** m_node;
  /* 0x0004 */ int m_child;
}; /* size: 0x0008 */

struct D3DXFLOAT16
{
  /* 0x0000 */ unsigned short value;
}; /* size: 0x0002 */

struct D3DXVECTOR3_16F
{
  /* 0x0000 */ struct D3DXFLOAT16 x;
  /* 0x0002 */ struct D3DXFLOAT16 y;
  /* 0x0004 */ struct D3DXFLOAT16 z;
}; /* size: 0x0006 */

struct std::_Pair_base<AimTarget *,AimTarget *>
{
  /* 0x0000 */ struct AimTarget* first;
  /* 0x0004 */ struct AimTarget* second;
}; /* size: 0x0008 */

class FixedSizeAllocator<GlassShard *>
{
  /* 0x0000 */ void* memory;
  /* 0x0004 */ class LinkedList<FixedSizeAllocator<GlassShard *>::Block *> freeList;
  /* 0x0008 */ class LinkedList<FixedSizeAllocator<GlassShard *>::Block *> usedList;
  /* 0x000c */ unsigned int size;
  /* 0x0010 */ unsigned int used;
  /* 0x0014 */ unsigned int maxUsed;
  /* 0x0018 */ unsigned int magic;
}; /* size: 0x001c */

struct GameWorldMp
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ struct PathData path;
}; /* size: 0x002c */

struct SndLengthNotifyInfo
{
  /* 0x0000 */ enum SndLengthType id[4];
  /* 0x0010 */ void* data[4];
  /* 0x0020 */ int count;
}; /* size: 0x0024 */

struct SndFader
{
  /* 0x0000 */ float value;
  /* 0x0004 */ float goal;
  /* 0x0008 */ float rate;
}; /* size: 0x000c */

struct SndSpeakerMap
{
  /* 0x0000 */ int inputChannelCount;
  /* 0x0004 */ int outputChannelCount;
  /* 0x0008 */ float volumes[16];
}; /* size: 0x0048 */

struct SndVoice
{
  /* 0x0000 */ enum SndFileLoadingState loadingState;
  /* 0x0004 */ int assetChannelCount;
  /* 0x0008 */ int assetFrameRate;
  /* 0x000c */ int assetEndTime;
  /* 0x0010 */ int assetTotalMsec;
  /* 0x0014 */ union SndEntHandle sndEnt;
  /* 0x0018 */ enum SndEntityUpdate entity_update;
  /* 0x001c */ int group;
  /* 0x0020 */ int startDelay;
  /* 0x0024 */ int startTime;
  /* 0x0028 */ unsigned int startFrame;
  /* 0x002c */ int looptime;
  /* 0x0030 */ int totalMsec;
  /* 0x0034 */ struct SndPlayback* playback;
  /* 0x0038 */ int playbackId;
  /* 0x003c */ int firstPlaybackId;
  /* 0x0040 */ int secondaryId;
  /* 0x0044 */ struct SndLengthNotifyInfo lengthNotifyInfo;
  /* 0x0068 */ const struct SndAlias* alias;
  /* 0x006c */ union vec3_t offset;
  /* 0x0078 */ union vec3_t position;
  /* 0x0084 */ union vec3_t velocity;
  /* 0x0090 */ union vec3_t orientation[3];
  /* 0x00b4 */ union vec3_t direction;
  /* 0x00c0 */ union vec3_t fluxVelocity;
  /* 0x00cc */ float baseDistance;
  /* 0x00d0 */ float distanceAttenuation;
  /* 0x00d4 */ float reverbAttenuation;
  /* 0x00d8 */ float volModSeed;
  /* 0x00dc */ float volModStart;
  /* 0x00e0 */ float pitchModSeed;
  /* 0x00e4 */ float globalPriority;
  /* 0x00e8 */ float groupScalar;
  /* 0x00ec */ struct SndFader doppler;
  /* 0x00f8 */ struct SndFader fade;
  /* 0x0104 */ struct SndFader script_fade;
  /* 0x0110 */ struct SndFader script_pitch;
  /* 0x011c */ struct SndFader losOcclusion;
  /* 0x0128 */ int traceCache[5];
  /* 0x013c */ int needsToStop;
  /* 0x0140 */ enum SndMenuCategory category;
  /* 0x0144 */ short localClientGroupMask;
  /* 0x0146 */ short localClientGroup;
  /* 0x0148 */ int closestListenerIndex;
  /* 0x014c */ int voiceStartTime;
  /* 0x0150 */ float dryLevel;
  /* 0x0154 */ float wetLevel;
  /* 0x0158 */ float futzBlend;
  /* 0x015c */ struct SndSpeakerMap pan;
  /* 0x01a4 */ long Padding_795;
  /* 0x01a8 */ __int64 played;
  /* 0x01b0 */ const struct SndDuck* duck;
  /* 0x01b4 */ struct SndDuckActive* activeDuck;
  /* 0x01b8 */ BOOL paused;
  /* 0x01b9 */ BOOL startPaused;
  /* 0x01ba */ BOOL timescale;
  /* 0x01bb */ BOOL positionUpdated;
  /* 0x01bc */ BOOL pitchShift;
  /* 0x01bd */ BOOL aliasFadeOut;
  /* 0x01be */ char __PADDING__[2];
}; /* size: 0x01c0 */

struct GlassDefLoad
{
  /* 0x0000 */ char name[64];
  /* 0x0040 */ char baseMaterial[64];
  /* 0x0080 */ char crackedMaterial[64];
  /* 0x00c0 */ char shardMaterial[64];
  /* 0x0100 */ char crackSound[64];
  /* 0x0140 */ char shatterShound[64];
  /* 0x0180 */ char autoShatterShound[64];
  /* 0x01c0 */ char worldMtlType[64];
  /* 0x0200 */ struct GlassDef glassDef;
}; /* size: 0x023c */

struct GfxStreamingAabbTree
{
  /* 0x0000 */ union vec4_t mins;
  /* 0x0010 */ union vec4_t maxs;
  /* 0x0020 */ float maxStreamingDistance;
  /* 0x0024 */ unsigned short firstItem;
  /* 0x0026 */ unsigned short itemCount;
  /* 0x0028 */ unsigned short firstChild;
  /* 0x002a */ unsigned short childCount;
  /* 0x002c */ unsigned short smodelCount;
  /* 0x002e */ unsigned short surfaceCount;
}; /* size: 0x0030 */

struct ExtraCamDebugOrientation
{
  /* 0x0000 */ union vec3_t pos;
  /* 0x000c */ union vec3_t viewAngles;
}; /* size: 0x0018 */

struct moveclip_t
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ union vec3_t outerSize;
  /* 0x0024 */ long Padding_796[3];
  /* 0x0030 */ struct TraceExtents extents;
  /* 0x0060 */ int passEntityNum;
  /* 0x0064 */ int passOwnerNum;
  /* 0x0068 */ int contentmask;
  /* 0x006c */ void* collide_entity_func /* function */;
}; /* size: 0x0070 */

struct GfxVolumePlane
{
  /* 0x0000 */ union vec4_t plane;
}; /* size: 0x0010 */

struct SndEntLoop
{
  /* 0x0000 */ unsigned int id;
  /* 0x0004 */ union SndEntHandle handle;
  /* 0x0008 */ union vec3_t origin;
  /* 0x0014 */ short fade;
  /* 0x0016 */ char __PADDING__[2];
}; /* size: 0x0018 */

struct TempPackedOutline
{
  /* 0x0000 */ long Padding_797[5];
  /* 0x0014 */ struct GlassPackedOutline::PackedVert v[16];
}; /* size: 0x0054 */

struct PotentialTargetData
{
  /* 0x0000 */ struct gentity_t* entity;
  /* 0x0004 */ int threat;
  /* 0x0008 */ float distToEnt;
  /* 0x000c */ union vec2_t dirToEnt;
}; /* size: 0x0014 */

struct GfxWorldFogModifierVolume
{
  /* 0x0000 */ unsigned int control;
  /* 0x0004 */ unsigned short minX;
  /* 0x0006 */ unsigned short minY;
  /* 0x0008 */ unsigned short minZ;
  /* 0x000a */ unsigned short maxX;
  /* 0x000c */ unsigned short maxY;
  /* 0x000e */ unsigned short maxZ;
  /* 0x0010 */ unsigned int controlEx;
  /* 0x0014 */ float transitionTime;
  /* 0x0018 */ float depthScale;
  /* 0x001c */ float heightScale;
  /* 0x0020 */ union vec4_t colorAdjust;
}; /* size: 0x0030 */

struct SndCommandStopEnt
{
  /* 0x0000 */ union SndEntHandle ent;
}; /* size: 0x0004 */

class GlassRenderer::SortedShardsList
{
}; /* size: 0x0010 */

struct P2PSessionState_t
{
  /* 0x0000 */ unsigned char m_bConnectionActive;
  /* 0x0001 */ unsigned char m_bConnecting;
  /* 0x0002 */ unsigned char m_eP2PSessionError;
  /* 0x0003 */ unsigned char m_bUsingRelay;
  /* 0x0004 */ int m_nBytesQueuedForSend;
  /* 0x0008 */ int m_nPacketsQueuedForSend;
  /* 0x000c */ unsigned int m_nRemoteIP;
  /* 0x0010 */ unsigned short m_nRemotePort;
  /* 0x0012 */ char __PADDING__[2];
}; /* size: 0x0014 */

struct SavedDObjModel
{
  /* 0x0000 */ unsigned short boneName;
}; /* size: 0x0002 */

struct SavedDObj
{
  /* 0x0000 */ struct SavedDObjModel dobjModels[32];
  /* 0x0040 */ struct XModel** models;
  /* 0x0044 */ unsigned int ignoreCollision;
  /* 0x0048 */ unsigned short numModels;
  /* 0x004a */ unsigned short entnum;
  /* 0x004c */ unsigned char flags;
  /* 0x004d */ char localClientNum;
  /* 0x004e */ char Padding_798[2];
  /* 0x0050 */ struct XAnimTree_s* tree;
  /* 0x0054 */ unsigned int hidePartBits[5];
  /* 0x0068 */ int numRootAdjustMats;
  /* 0x006c */ struct XAnimRootAdjustMat* rootAdjustMats;
}; /* size: 0x0070 */

struct GfxReflectionProbeVolumeData
{
  /* 0x0000 */ union vec4_t volumePlanes[6];
}; /* size: 0x0060 */

class ISteamUserStats
{
}; /* size: 0x0004 */

struct GfxCompressedLightGridColors
{
  /* 0x0000 */ unsigned char rgb[3][56];
}; /* size: 0x00a8 */

struct SndCommandSetMusicState
{
  /* 0x0000 */ unsigned int stateId;
}; /* size: 0x0004 */

typedef struct _DSCBUFFERDESC
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long dwBufferBytes;
  /* 0x000c */ unsigned long dwReserved;
  /* 0x0010 */ struct tWAVEFORMATEX* lpwfxFormat;
  /* 0x0014 */ unsigned long dwFXCount;
  /* 0x0018 */ struct _DSCEFFECTDESC* lpDSCFXDesc;
} DSCBUFFERDESC, *PDSCBUFFERDESC; /* size: 0x001c */

struct GfxSkyGridVolume
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ union vec3_t lightingOrigin;
  /* 0x0024 */ unsigned short colorsIndex;
  /* 0x0026 */ unsigned char primaryLightIndex;
  /* 0x0027 */ unsigned char visibility;
}; /* size: 0x0028 */

struct SndCommandAliasName
{
  /* 0x0000 */ char name[48];
  /* 0x0030 */ unsigned int id;
}; /* size: 0x0034 */

struct dsound_sample_t
{
  /* 0x0000 */ struct IDirectSoundCaptureBuffer* DSCB;
  /* 0x0004 */ struct IDirectSoundBuffer* DSB;
  /* 0x0008 */ unsigned long dwBufferSize;
  /* 0x000c */ unsigned long dwCaptureOffset;
  /* 0x0010 */ unsigned int currentOffset;
  /* 0x0014 */ unsigned int lastOffset;
  /* 0x0018 */ unsigned int currentBufferLength;
  /* 0x001c */ int stopPosition;
  /* 0x0020 */ unsigned int lastPlayPos;
  /* 0x0024 */ int bytesBuffered;
  /* 0x0028 */ int mode;
  /* 0x002c */ int frequency;
  /* 0x0030 */ int volume;
  /* 0x0034 */ int pan;
  /* 0x0038 */ int channels;
  /* 0x003c */ BOOL playing;
  /* 0x003d */ char Padding_799[3];
  /* 0x0040 */ int channel;
  /* 0x0044 */ unsigned char playMode;
  /* 0x0045 */ char __PADDING__[3];
}; /* size: 0x0048 */

struct std::input_iterator_tag
{
}; /* size: 0x0001 */

struct sd_decoder_flac
{
  /* 0x0000 */ unsigned int inputOffsetIntoTopBuffer;
  /* 0x0004 */ const char* inputBuffers[2];
  /* 0x000c */ unsigned int inputBufferSize[2];
  /* 0x0014 */ short outputBuffer[2048];
  /* 0x1014 */ unsigned int outputBufferReadHead;
  /* 0x1018 */ unsigned int outputBufferWriteHead;
  /* 0x101c */ unsigned int outputBufferCount;
  /* 0x1020 */ unsigned int outputFrameCount;
  /* 0x1024 */ unsigned int readRequest;
  /* 0x1028 */ unsigned int decoderInitialized;
  /* 0x102c */ BOOL looping;
  /* 0x102d */ BOOL resident;
  /* 0x102e */ char Padding_800[2];
  /* 0x1030 */ unsigned int totalFrameCount;
  /* 0x1034 */ unsigned int channelCount;
  /* 0x1038 */ unsigned int assetSize;
  /* 0x103c */ unsigned int totalBytesRead;
  /* 0x1040 */ unsigned int frameBytesRead;
  /* 0x1044 */ struct FLAC__StreamDecoder* flacDecoder;
}; /* size: 0x1048 */

typedef struct _NVAPI_VIDEO_SRC_INFO
{
  /* 0x0000 */ unsigned long srcWidth;
  /* 0x0004 */ unsigned long srcHeight;
  /* 0x0008 */ enum _NV_CODEC codecType;
  /* 0x000c */ unsigned long avgBitrate;
  /* 0x0010 */ unsigned __int64 reserved1;
  /* 0x0018 */ unsigned __int64 reserved2;
} NVAPI_VIDEO_SRC_INFO, *PNVAPI_VIDEO_SRC_INFO; /* size: 0x0020 */

union XModelDrawInfo
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char state;
      /* 0x0001 */ char lod;
      /* 0x0002 */ unsigned short surfId;
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned int packed;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct GfxSceneDynModel
{
  /* 0x0000 */ union XModelDrawInfo info;
  /* 0x0004 */ unsigned short dynEntId;
  /* 0x0006 */ unsigned char primaryLightIndex;
  /* 0x0007 */ unsigned char reflectionProbeIndex;
}; /* size: 0x0008 */

struct SessionGraveYard
{
  /* 0x0000 */ BOOL active;
  /* 0x0001 */ BOOL deleting;
  /* 0x0002 */ char Padding_801[6];
  /* 0x0008 */ struct SessionData sessionData;
}; /* size: 0x0798 */

struct SSkinInstance
{
  union
  {
    /* 0x0000 */ struct vector4 mat;
    /* 0x0000 */ float disk_mat[16];
  }; /* size: 0x0040 */
  /* 0x0040 */ struct SSkinShaders* shaders;
  /* 0x0044 */ struct SSkinModel* model;
  /* 0x0048 */ struct SSkinAnim* anim;
  /* 0x004c */ struct SSkinVert* instVerts;
  /* 0x0050 */ float frame;
  /* 0x0054 */ int pad1;
  /* 0x0058 */ int pad2;
  /* 0x005c */ int pad3;
}; /* size: 0x0060 */

class CustomSearchInfo_FindPathAway
{
  /* 0x0000 */ union vec3_t m_vAwayFromPos;
  /* 0x000c */ float m_fDistAway;
  /* 0x0010 */ float m_fDistAwaySqrd;
  /* 0x0014 */ float m_fInitialDistAwaySq;
  /* 0x0018 */ float m_fBestScore;
  /* 0x001c */ struct pathnode_t* m_pBestNode;
}; /* size: 0x0020 */

struct SSkinShaders
{
  /* 0x0000 */ char* pixelShaderAlign;
  /* 0x0004 */ char* pixelShader;
  /* 0x0008 */ char* vertexShader;
  /* 0x000c */ int pixelShaderSize;
  /* 0x0010 */ int vertexShaderSize;
}; /* size: 0x0014 */

struct NV_TIMING_FLAG
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long isInterlaced : 4; /* bit position: 0 */
    /* 0x0000 */ unsigned long reserved0 : 12; /* bit position: 4 */
  }; /* bitfield */
  union
  {
    /* 0x0004 */ unsigned long tvFormat : 8; /* bit position: 0 */
    /* 0x0004 */ unsigned long ceaId : 8; /* bit position: 0 */
    /* 0x0004 */ unsigned long nvPsfId : 8; /* bit position: 0 */
  }; /* size: 0x0004 */
  /* 0x0008 */ unsigned long scaling : 8; /* bit position: 0 */
}; /* size: 0x000c */

struct SSkinVert
{
  /* 0x0000 */ struct half4 pos_bone;
  /* 0x0008 */ union PackedUnitVec normal;
  /* 0x000c */ struct half2 uv;
}; /* size: 0x0010 */

struct D3D10_VIEWPORT
{
  /* 0x0000 */ int TopLeftX;
  /* 0x0004 */ int TopLeftY;
  /* 0x0008 */ unsigned int Width;
  /* 0x000c */ unsigned int Height;
  /* 0x0010 */ float MinDepth;
  /* 0x0014 */ float MaxDepth;
}; /* size: 0x0018 */

struct GfxLightRegionHull
{
  /* 0x0000 */ float kdopMidPoint[9];
  /* 0x0024 */ float kdopHalfSize[9];
  /* 0x0048 */ unsigned int axisCount;
  /* 0x004c */ struct GfxLightRegionAxis* axis;
}; /* size: 0x0050 */

struct srfTriangles_t
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ int vertexDataOffset0;
  /* 0x0010 */ union vec3_t maxs;
  /* 0x001c */ int vertexDataOffset1;
  /* 0x0020 */ int firstVertex;
  /* 0x0024 */ float himipRadiusInvSq;
  /* 0x0028 */ unsigned short vertexCount;
  /* 0x002a */ unsigned short triCount;
  /* 0x002c */ int baseIndex;
}; /* size: 0x0030 */

struct GfxSurface
{
  /* 0x0000 */ struct srfTriangles_t tris;
  /* 0x0030 */ struct Material* material;
  /* 0x0034 */ unsigned char lightmapIndex;
  /* 0x0035 */ unsigned char reflectionProbeIndex;
  /* 0x0036 */ unsigned char primaryLightIndex;
  /* 0x0037 */ unsigned char flags;
  /* 0x0038 */ union vec3_t bounds[2];
}; /* size: 0x0050 */

struct SndCommandCinematicStart
{
  /* 0x0000 */ float volume;
}; /* size: 0x0004 */

struct GfxClientFog
{
  /* 0x0000 */ struct GfxFog settings[6];
  /* 0x01e0 */ int index;
}; /* size: 0x01e4 */

struct SndNotifyEntUpdate
{
  /* 0x0000 */ union SndEntHandle handle;
}; /* size: 0x0004 */

struct SndNotifySubtitle
{
  /* 0x0000 */ unsigned int lengthMs;
  /* 0x0004 */ const char* subtitle;
}; /* size: 0x0008 */

struct SndNotifyLength
{
  /* 0x0000 */ unsigned int lengthMs;
  /* 0x0004 */ unsigned int ent;
}; /* size: 0x0008 */

struct SndNotifyPlaybackFree
{
  /* 0x0000 */ struct SndPlayback* playback;
}; /* size: 0x0004 */

union SndNotifyContext
{
  union
  {
    /* 0x0000 */ struct SndNotifyEntUpdate ent_update;
    /* 0x0000 */ struct SndNotifySubtitle subtitle;
    /* 0x0000 */ struct SndNotifyLength length;
    /* 0x0000 */ struct SndNotifyPlaybackFree playback_free;
    /* 0x0000 */ struct SndNotifyPlaybackUpdate playback_update;
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

struct GfxLodRamp
{
  /* 0x0000 */ float scale;
  /* 0x0004 */ float bias;
  /* 0x0008 */ float appliedInvScale;
}; /* size: 0x000c */

struct Occluder
{
  /* 0x0000 */ unsigned int flags;
  /* 0x0004 */ char name[16];
  /* 0x0014 */ union vec3_t points[4];
}; /* size: 0x0044 */

struct GfxOutdoorBounds
{
  /* 0x0000 */ union vec3_t bounds[2];
}; /* size: 0x0018 */

struct SndDspBiquadState
{
  /* 0x0000 */ float y[4];
  /* 0x0010 */ float x[4];
}; /* size: 0x0020 */

struct GfxHeroLightTree
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ int leftNode;
  /* 0x001c */ int rightNode;
}; /* size: 0x0020 */

class bdQoSProbeInfo
{
  /* 0x0000 */ class bdReference<bdCommonAddr> m_addr;
  /* 0x0004 */ class bdAddr m_realAddr;
  /* 0x000c */ float m_latency;
  /* 0x0010 */ unsigned char* m_data;
  /* 0x0014 */ unsigned int m_dataSize;
  /* 0x0018 */ BOOL m_disabled;
  /* 0x0019 */ char Padding_802[3];
  /* 0x001c */ unsigned int m_bandwidthDown;
  /* 0x0020 */ unsigned int m_bandwidthUp;
}; /* size: 0x0024 */

struct FontIcon
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int numEntries;
  /* 0x0008 */ int numAliasEntries;
  /* 0x000c */ struct FontIconEntry* fontIconEntry;
  /* 0x0010 */ struct FontIconAlias* fontIconAlias;
}; /* size: 0x0014 */

class ActorCmdHelper
{
}; /* size: 0x0001 */

struct FontIconEntry
{
  /* 0x0000 */ struct FontIconName fontIconName;
  /* 0x0008 */ struct Material* fontIconMaterialHandle;
  /* 0x000c */ int fontIconSize;
  /* 0x0010 */ float xScale;
  /* 0x0014 */ float yScale;
}; /* size: 0x0018 */

class bdBandwidthTestClient
{
  /* 0x0000 */ class bdSocket m_socket;
  /* 0x0008 */ class bdReference<bdRemoteTask> m_remoteTask;
  /* 0x000c */ unsigned int m_packetSize;
  /* 0x0010 */ unsigned int m_numPackets;
  /* 0x0014 */ unsigned int m_senderInitialWait;
  /* 0x0018 */ unsigned int m_sendDuration;
  /* 0x001c */ unsigned int m_receiverInitialWait;
  /* 0x0020 */ unsigned int m_receiveDuration;
  /* 0x0024 */ unsigned int m_lingerDuration;
  /* 0x0028 */ unsigned short m_lsgPort;
  /* 0x002a */ char Padding_803[2];
  /* 0x002c */ unsigned int m_lsgAddr;
  /* 0x0030 */ unsigned char m_cookie[8];
  /* 0x0038 */ class bdStopwatch m_timer;
  /* 0x0040 */ class bdStopwatch m_recvTimeoutTimer;
  /* 0x0048 */ unsigned char* m_packetBuffer;
  /* 0x004c */ unsigned int m_nextPacketNum;
  /* 0x0050 */ unsigned int m_actualNumSent;
  /* 0x0054 */ unsigned int m_seqNumberTotal;
  /* 0x0058 */ class bdLobbyService* m_lobbyService;
  /* 0x005c */ enum bdBandwidthTestInitStatus m_initStatus;
  /* 0x0060 */ enum bdBandwidthTestStatus m_testStatus;
  /* 0x0064 */ class bdBandwidthTestResults m_uploadResults;
  /* 0x0078 */ class bdBandwidthTestResults m_downloadResults;
  /* 0x008c */ enum bdLobbyErrorCode m_error;
  /* 0x0090 */ enum bdBandwidthTestType m_type;
}; /* size: 0x0098 */

struct SndDriverGlobals
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int groupCount;
  /* 0x0008 */ struct SndVolumeGroup* groups;
  /* 0x000c */ unsigned int curveCount;
  /* 0x0010 */ struct SndCurve* curves;
  /* 0x0014 */ unsigned int panCount;
  /* 0x0018 */ struct SndPan* pans;
  /* 0x001c */ unsigned int duckGroupCount;
  /* 0x0020 */ struct SndDuckGroup* duckGroups;
  /* 0x0024 */ unsigned int contextCount;
  /* 0x0028 */ struct SndContext* contexts;
  /* 0x002c */ unsigned int masterCount;
  /* 0x0030 */ struct SndMaster* masters;
  /* 0x0034 */ unsigned int voiceDuckCount;
  /* 0x0038 */ struct SndSidechainDuck* voiceDucks;
  /* 0x003c */ unsigned int futzCount;
  /* 0x0040 */ struct SndFutz* futzes;
}; /* size: 0x0044 */

struct XAUDIO2_SEND_DESCRIPTOR
{
  /* 0x0000 */ unsigned int Flags;
  /* 0x0004 */ struct IXAudio2Voice* pOutputVoice;
}; /* size: 0x0008 */

struct SndDuckGroup
{
  /* 0x0000 */ char name[32];
  /* 0x0020 */ unsigned int id;
}; /* size: 0x0024 */

struct SndMaster
{
  /* 0x0000 */ char name[32];
  /* 0x0020 */ unsigned int id;
  /* 0x0024 */ int lowE;
  /* 0x0028 */ float lowG;
  /* 0x002c */ float lowF;
  /* 0x0030 */ float lowQ;
  /* 0x0034 */ int peak1E;
  /* 0x0038 */ float peak1G;
  /* 0x003c */ float peak1F;
  /* 0x0040 */ float peak1Q;
  /* 0x0044 */ int peak2E;
  /* 0x0048 */ float peak2G;
  /* 0x004c */ float peak2F;
  /* 0x0050 */ float peak2Q;
  /* 0x0054 */ int hiE;
  /* 0x0058 */ float hiG;
  /* 0x005c */ float hiF;
  /* 0x0060 */ float hiQ;
  /* 0x0064 */ float eqG;
  /* 0x0068 */ int compE;
  /* 0x006c */ float compPG;
  /* 0x0070 */ float compMG;
  /* 0x0074 */ float compT;
  /* 0x0078 */ float compR;
  /* 0x007c */ float compTA;
  /* 0x0080 */ float compTR;
  /* 0x0084 */ int limitE;
  /* 0x0088 */ float limitPG;
  /* 0x008c */ float limitMG;
  /* 0x0090 */ float limitT;
  /* 0x0094 */ float limitR;
  /* 0x0098 */ float limitTA;
  /* 0x009c */ float limitTR;
  /* 0x00a0 */ float busReverbG;
  /* 0x00a4 */ float busFxG;
  /* 0x00a8 */ float busVoiceG;
  /* 0x00ac */ float busPfutzG;
  /* 0x00b0 */ float busHdrfxG;
  /* 0x00b4 */ float busUiG;
  /* 0x00b8 */ float busMusicG;
  /* 0x00bc */ float busMovieG;
  /* 0x00c0 */ float busVcsG;
  /* 0x00c4 */ int busReverbE;
  /* 0x00c8 */ int busFxE;
  /* 0x00cc */ int busVoiceE;
  /* 0x00d0 */ int busPfutzE;
  /* 0x00d4 */ int busHdrfxE;
  /* 0x00d8 */ int busUiE;
  /* 0x00dc */ int busMusicE;
  /* 0x00e0 */ int busMovieE;
  /* 0x00e4 */ int hdrfxCompE;
  /* 0x00e8 */ int voiceEqE;
  /* 0x00ec */ int voiceCompE;
}; /* size: 0x00f0 */

struct SndFutz
{
  /* 0x0000 */ char name[32];
  /* 0x0020 */ unsigned int id;
  /* 0x0024 */ float bpfF;
  /* 0x0028 */ float bpfQ;
  /* 0x002c */ float lsG;
  /* 0x0030 */ float lsF;
  /* 0x0034 */ float lsQ;
  /* 0x0038 */ float dist;
  /* 0x003c */ float preG;
  /* 0x0040 */ float postG;
  /* 0x0044 */ float th;
  /* 0x0048 */ float tg;
  /* 0x004c */ float clippre;
  /* 0x0050 */ float clippost;
  /* 0x0054 */ float blend;
  /* 0x0058 */ unsigned int startAliasId;
  /* 0x005c */ unsigned int stopAliasId;
  /* 0x0060 */ unsigned int loopAliasId;
}; /* size: 0x0064 */

struct sightclip_t
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ union vec3_t outerSize;
  /* 0x0024 */ union vec3_t start;
  /* 0x0030 */ union vec3_t end;
  /* 0x003c */ int passEntityNum[2];
  /* 0x0044 */ int contentmask;
}; /* size: 0x0048 */

class ISteamHTTP
{
}; /* size: 0x0004 */

struct LbColumnDef
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int colId;
  /* 0x0008 */ int dwColIndex;
  /* 0x000c */ BOOL hidden;
  /* 0x000d */ char Padding_804[3];
  /* 0x0010 */ const char* statName;
  /* 0x0014 */ enum LbColType type;
  /* 0x0018 */ int precision;
  /* 0x001c */ enum LbAggType agg;
  /* 0x0020 */ const char* localization;
  /* 0x0024 */ int uiCalColX;
  /* 0x0028 */ int uiCalColY;
}; /* size: 0x002c */

class ISteamRemoteStorage
{
}; /* size: 0x0004 */

struct XGlobals
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int xanimStreamBufferSize;
  /* 0x0008 */ int cinematicMaxWidth;
  /* 0x000c */ int cinematicMaxHeight;
  /* 0x0010 */ int extracamResolution;
  /* 0x0014 */ union vec4_t screenClearColor;
  /* 0x0024 */ int bigestGumpSize;
  /* 0x0028 */ int gumpsCount;
  /* 0x002c */ struct gump_info_t gumps[32];
  /* 0x012c */ int bigestOverlaySize;
  /* 0x0130 */ int overlayCount;
  /* 0x0134 */ struct overlay_info_t overlays[32];
}; /* size: 0x0234 */

struct Glasses
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int numGlasses;
  /* 0x0008 */ struct Glass* glasses;
  /* 0x000c */ unsigned char* workMemory;
  /* 0x0010 */ unsigned int workMemorySize;
  /* 0x0014 */ unsigned int smallAllocatorBlocks;
  /* 0x0018 */ unsigned int maxGroups;
  /* 0x001c */ unsigned int maxShards;
  /* 0x0020 */ unsigned int maxPhysics;
  /* 0x0024 */ unsigned int shardMemorySize;
  /* 0x0028 */ unsigned int maxFreeCmd;
  /* 0x002c */ unsigned int numSlots;
  /* 0x0030 */ unsigned int numVerts;
  /* 0x0034 */ unsigned int numIndices;
}; /* size: 0x0038 */

struct SndDuckActive
{
  /* 0x0000 */ int inUse;
  /* 0x0004 */ enum SndDuckCategoryType category;
  /* 0x0008 */ int startTime;
  /* 0x000c */ int endTime;
  /* 0x0010 */ int pingTime;
  /* 0x0014 */ union vec3_t position;
  /* 0x0020 */ unsigned int id;
  /* 0x0024 */ const struct SndDuck* duck;
  /* 0x0028 */ float amount;
  /* 0x002c */ float effect;
  /* 0x0030 */ struct SndVoice* voice;
  /* 0x0034 */ float padding[3];
}; /* size: 0x0040 */

struct $_TypeDescriptor$_extraBytes_75
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[75];
}; /* size: 0x0053 */

struct IXAudio2SourceVoice
{
}; /* size: 0x0004 */

struct KeyValuePair
{
  /* 0x0000 */ int keyHash;
  /* 0x0004 */ int namespaceHash;
  /* 0x0008 */ const char* value;
}; /* size: 0x000c */

class CCallback<LiveSteamServer,SteamServersDisconnected_t,1>
{
  /* 0x0000 */ long Padding_805[3];
  /* 0x000c */ class LiveSteamServer* m_pObj;
  /* 0x0010 */ void* m_Func /* function */;
}; /* size: 0x0014 */

struct MemoryBlock
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ BOOL mainMem;
  /* 0x0005 */ BOOL videoMem;
  /* 0x0006 */ BOOL streamMem;
  /* 0x0007 */ char Padding_806;
  /* 0x0008 */ unsigned int size;
  /* 0x000c */ unsigned int alignment;
  /* 0x0010 */ unsigned char* data;
}; /* size: 0x0014 */

struct tagBITMAP
{
  /* 0x0000 */ long bmType;
  /* 0x0004 */ long bmWidth;
  /* 0x0008 */ long bmHeight;
  /* 0x000c */ long bmWidthBytes;
  /* 0x0010 */ unsigned short bmPlanes;
  /* 0x0012 */ unsigned short bmBitsPixel;
  /* 0x0014 */ void* bmBits;
}; /* size: 0x0018 */

struct GlassUpdateCmd
{
  /* 0x0000 */ struct GlassRenderer* renderer;
  /* 0x0004 */ struct GlassPhysics::StaticLocals staticLocals;
  /* 0x001c */ float deltaTime;
  /* 0x0020 */ struct GlassShard* shards[32];
  /* 0x00a0 */ unsigned int numShards;
}; /* size: 0x00a4 */

struct Slug
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int len;
  /* 0x0008 */ unsigned char* buffer;
}; /* size: 0x000c */

struct dent_info_t
{
  /* 0x0000 */ unsigned short id;
  /* 0x0002 */ char Padding_807[2];
  /* 0x0004 */ float dist2;
}; /* size: 0x0008 */

struct FootstepFXTableDef
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ const struct FxEffectDef* footstepFX[32];
}; /* size: 0x0084 */

class CCallback<CSteamAchievements,UserStatsReceived_t,0>
{
  /* 0x0000 */ long Padding_808[3];
  /* 0x000c */ class CSteamAchievements* m_pObj;
  /* 0x0010 */ void* m_Func /* function */;
}; /* size: 0x0014 */

class compare_attachment_sort
{
}; /* size: 0x0001 */

struct SmallAllocatorTemplate<GlassShard *>::rebind<GlassShard *>
{
}; /* size: 0x0001 */

struct BulletTraceResults
{
  /* 0x0000 */ struct trace_t trace;
  /* 0x0040 */ struct gentity_t* hitEnt;
  /* 0x0044 */ union vec3_t hitPos;
  /* 0x0050 */ BOOL ignoreHitEnt;
  /* 0x0051 */ char Padding_809[3];
  /* 0x0054 */ int depthSurfaceType;
  /* 0x0058 */ long __PADDING__[2];
}; /* size: 0x0060 */

struct pmove_t
{
  /* 0x0000 */ struct playerState_s* ps;
  /* 0x0004 */ struct usercmd_s cmd;
  /* 0x0048 */ struct usercmd_s oldcmd;
  /* 0x008c */ int tracemask;
  /* 0x0090 */ int numtouch;
  /* 0x0094 */ int touchents[32];
  /* 0x0114 */ int numGlassTouch;
  /* 0x0118 */ int touchGlasses[32];
  /* 0x0198 */ union vec3_t mins;
  /* 0x01a4 */ union vec3_t maxs;
  /* 0x01b0 */ float xyspeed;
  /* 0x01b4 */ float currentPitch;
  /* 0x01b8 */ float averagePitch;
  /* 0x01bc */ int nextPitch;
  /* 0x01c0 */ float pitchHistory[30];
  /* 0x0238 */ int proneChange;
  /* 0x023c */ float maxSprintTimeMultiplier;
  /* 0x0240 */ BOOL mantleStarted;
  /* 0x0241 */ char Padding_810[3];
  /* 0x0244 */ union vec3_t mantleEndPos;
  /* 0x0250 */ int mantleDuration;
  /* 0x0254 */ int viewChangeTime;
  /* 0x0258 */ float viewChange;
  /* 0x025c */ union vec3_t vehicleAngles;
  /* 0x0268 */ enum pmoveVehAnimState_t vehAnimState;
  /* 0x026c */ unsigned char handler;
  /* 0x026d */ char Padding_811[3];
  /* 0x0270 */ enum LocalClientNum_t localClientNum;
  /* 0x0274 */ const struct gjkcc_input_t* m_gjkcc_input;
  /* 0x0278 */ long Padding_812[2];
  /* 0x0280 */ class colgeom_visitor_inlined_t<300> proximity_data;
  /* 0x0c70 */ BOOL gravity;
  /* 0x0c71 */ char Padding_813[3];
  /* 0x0c74 */ int gravityOverride;
  /* 0x0c78 */ long __PADDING__[2];
}; /* size: 0x0c80 */

class phys_free_list<NitrousVehicle>::iterator
{
  /* 0x0000 */ class phys_free_list<NitrousVehicle>::T_internal_base* m_ptr;
}; /* size: 0x0004 */

class std::length_error
{
}; /* size: 0x000c */

class std::basic_string<char,std::char_traits<char>,std::allocator<char> >
{
  /* 0x0000 */ const unsigned int npos;
}; /* size: 0x001c */

struct r_double_index_t
{
  /* 0x0000 */ unsigned short value[2];
}; /* size: 0x0004 */

struct DynEntityAreaParms
{
  /* 0x0000 */ const union vec3_t* mins;
  /* 0x0004 */ const union vec3_t* maxs;
  /* 0x0008 */ int contentMask;
  /* 0x000c */ unsigned short* list;
  /* 0x0010 */ unsigned short maxCount;
  /* 0x0012 */ unsigned short count;
}; /* size: 0x0014 */

class std::_String_val<wchar_t,std::allocator<wchar_t> >
{
  /* 0x0000 */ union std::_String_val<wchar_t,std::allocator<wchar_t> >::_Bxty _Bx;
  /* 0x0010 */ unsigned int _Mysize;
  /* 0x0014 */ unsigned int _Myres;
  /* 0x0018 */ class std::allocator<wchar_t> _Alval;
}; /* size: 0x001c */

struct FixedSizeAllocator<TempPackedOutline>::Block
{
  /* 0x0000 */ struct FixedSizeAllocator<TempPackedOutline>::Block* prev;
  /* 0x0004 */ struct FixedSizeAllocator<TempPackedOutline>::Block* next;
  /* 0x0008 */ unsigned int magic;
  /* 0x000c */ struct TempPackedOutline data;
}; /* size: 0x0060 */

struct std::_Pair_base<pathsort_t *,pathsort_t *>
{
  /* 0x0000 */ struct pathsort_t* first;
  /* 0x0004 */ struct pathsort_t* second;
}; /* size: 0x0008 */

struct std::unary_function<float,unsigned int>
{
}; /* size: 0x0001 */

class std::reverse_iterator<std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >;

class ISteamMatchmakingRulesResponse
{
}; /* size: 0x0004 */

struct scoreboardSortByClientNum_t
{
  /* 0x0000 */ int matchClientScoreDataIndex;
  /* 0x0004 */ enum ClientNum_t clientNum;
}; /* size: 0x0008 */

class std::hash<float>
{
}; /* size: 0x0001 */

struct SndAssetToLoad
{
  /* 0x0000 */ int bankFileId;
  /* 0x0004 */ long fileOffset;
  /* 0x0008 */ long size;
  /* 0x000c */ void* destination;
  /* 0x0010 */ unsigned int memoryOffset;
  /* 0x0014 */ enum SndLoadState state;
  /* 0x0018 */ unsigned int assetId;
  /* 0x001c */ struct SndBank* bank;
  /* 0x0020 */ int streamRequestId;
  /* 0x0024 */ unsigned int loadId;
}; /* size: 0x0028 */

struct std::allocator<wchar_t>::rebind<wchar_t>
{
}; /* size: 0x0001 */

class GlassTimer
{
  /* 0x0000 */ unsigned __int64 start;
  /* 0x0008 */ unsigned __int64& counter;
}; /* size: 0x0010 */

struct NV_COPROC_APP_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long appStatus;
}; /* size: 0x0008 */

struct hashName_t
{
  /* 0x0000 */ int hash;
  /* 0x0004 */ const char* name;
}; /* size: 0x0008 */

struct std::unary_function<unsigned long,unsigned int>
{
}; /* size: 0x0001 */

struct std::unary_function<long double,unsigned int>
{
}; /* size: 0x0001 */

class std::hash<unsigned long>
{
}; /* size: 0x0001 */

typedef struct _EXCEPTION_RECORD
{
  /* 0x0000 */ unsigned long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ struct _EXCEPTION_RECORD* ExceptionRecord;
  /* 0x000c */ void* ExceptionAddress;
  /* 0x0010 */ unsigned long NumberParameters;
  /* 0x0014 */ unsigned long ExceptionInformation[15];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD; /* size: 0x0050 */

struct std::_Pair_base<PartyInfo *,PartyInfo *>
{
  /* 0x0000 */ struct PartyInfo* first;
  /* 0x0004 */ struct PartyInfo* second;
}; /* size: 0x0008 */

typedef struct _NVAPI_D3D9_DMA_DESCRIBE_PARAMS
{
  /* 0x0000 */ unsigned long dwWidth;
  /* 0x0004 */ unsigned long dwHeight;
  /* 0x0008 */ unsigned long dwFormat;
  /* 0x000c */ unsigned long dwPitch;
  /* 0x0010 */ unsigned long dwSize;
  /* 0x0014 */ unsigned long dwAlignment;
} NVAPI_D3D9_DMA_DESCRIBE_PARAMS, *PNVAPI_D3D9_DMA_DESCRIBE_PARAMS; /* size: 0x0018 */

class std::hash<unsigned __int64>
{
}; /* size: 0x0001 */

struct heli_height_lock_patches_t
{
  /* 0x0000 */ int brushmodel;
  /* 0x0004 */ union vec3_t origin;
  /* 0x0010 */ unsigned short targetname;
  /* 0x0012 */ BOOL excludeFromDemo;
  /* 0x0013 */ char Padding_814;
  /* 0x0014 */ int enabled;
}; /* size: 0x0018 */

class std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >;

struct SndDspSquelchState
{
  /* 0x0000 */ float l;
  /* 0x0004 */ float g;
}; /* size: 0x0008 */

struct SndDspFutzState
{
  /* 0x0000 */ struct SndDspBiquadState bpf;
  /* 0x0020 */ struct SndDspBiquadState ls;
  /* 0x0040 */ struct SndDspSquelchState squelch;
  /* 0x0048 */ float padding[2];
}; /* size: 0x0050 */

struct SndDspSourceState
{
  /* 0x0000 */ float lpfy;
  /* 0x0004 */ struct SndDspFutzState futz;
}; /* size: 0x0054 */

class std::reverse_iterator<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >;

struct $_s__RTTIBaseClassArray$_extraBytes_12
{
  /* 0x0000 */ const struct _s__RTTIBaseClassDescriptor2* arrayOfBaseClassDescriptors[3];
  /* 0x000c */ char __PADDING__[1];
}; /* size: 0x000d */

struct vehAnimClient_t
{
  /* 0x0000 */ BOOL initialized;
  /* 0x0001 */ char Padding_815[3];
  /* 0x0004 */ enum VehicleSeatPositions curSeat;
  /* 0x0008 */ enum VehicleSeatPositions prevSeat;
  /* 0x000c */ BOOL moving;
  /* 0x000d */ char Padding_816[3];
  /* 0x0010 */ int animStage;
  /* 0x0014 */ int animIndex;
  /* 0x0018 */ int tagName;
}; /* size: 0x001c */

class PublicTeamProfile
{
  /* 0x0000 */ long Padding_817[4];
  /* 0x0010 */ unsigned __int64 m_memberTeamID;
  /* 0x0018 */ unsigned char m_memberemblem[16385];
  /* 0x4019 */ char Padding_818[3];
  /* 0x401c */ int m_membermotto_bg;
  /* 0x4020 */ char m_memberclantag[6];
  /* 0x4026 */ char m_membermotto[25];
}; /* size: 0x4040 */

union float_conv
{
  union
  {
    /* 0x0000 */ float f;
    /* 0x0000 */ int i;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct slide_move_params_t
{
  /* 0x0000 */ float deltaTime;
  /* 0x0004 */ union vec3_t* origin;
  /* 0x0008 */ union vec3_t* velocity;
  /* 0x000c */ union vec3_t* mins;
  /* 0x0010 */ union vec3_t* maxs;
  /* 0x0014 */ BOOL gravity;
  /* 0x0015 */ BOOL hasGround;
  /* 0x0016 */ BOOL zerog;
  /* 0x0017 */ char Padding_819;
  /* 0x0018 */ BOOL* inSolid;
  /* 0x001c */ union vec3_t* groundNormal;
  /* 0x0020 */ int passEntityNum;
  /* 0x0024 */ int clipMask;
  /* 0x0028 */ int bumpEntityNum;
  /* 0x002c */ BOOL use_gjk;
  /* 0x002d */ char Padding_820[3];
  /* 0x0030 */ const struct gjkcc_input_t* gjkcc_input;
  /* 0x0034 */ enum gjccc_create_type_e user_data_collision_type;
  /* 0x0038 */ unsigned int user_id;
  /* 0x003c */ class colgeom_visitor_inlined_t<300>* proximity_data;
  /* 0x0040 */ const struct PhysGeomList* collmap;
  /* 0x0044 */ void* clipVelocityFunc /* function */;
}; /* size: 0x0048 */

struct userFileList
{
  /* 0x0000 */ BOOL isListAvailable;
  /* 0x0001 */ BOOL hasBeenfetch;
  /* 0x0002 */ char Padding_821[6];
  /* 0x0008 */ struct dwFileList fileList;
}; /* size: 0x2288 */

struct AnimRateOffset
{
  /* 0x0000 */ int fromWeaponDef;
  /* 0x0004 */ int fromWeaponVariantDef;
  /* 0x0008 */ void* animTime /* function */;
}; /* size: 0x000c */

struct $_TypeDescriptor$_extraBytes_33
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[33];
}; /* size: 0x0029 */

struct GroundTrace
{
  /* 0x0000 */ struct trace_t trace;
  /* 0x0040 */ union vec3_t location;
  /* 0x004c */ int onGround;
  /* 0x0050 */ int hasGround;
  /* 0x0054 */ int validGroundNormal;
  /* 0x0058 */ long __PADDING__[2];
}; /* size: 0x0060 */

struct field_t
{
  /* 0x0000 */ int cursor;
  /* 0x0004 */ int scroll;
  /* 0x0008 */ int drawWidth;
  /* 0x000c */ int widthInPixels;
  /* 0x0010 */ float charHeight;
  /* 0x0014 */ int fixedSize;
  /* 0x0018 */ char buffer[256];
}; /* size: 0x0118 */

struct unlockableItemsData
{
  /* 0x0000 */ int maxItem;
  /* 0x0004 */ int numItems;
  /* 0x0008 */ struct itemInfo_t itemTable[256];
  /* 0x8c08 */ short defaultClassLoadouts[44][15];
  /* 0x9130 */ struct itemInfo_t* itemsInSlot[256];
  /* 0x9530 */ int numItemsInSlot;
  /* 0x9534 */ int numPurchasedItemsInSlot;
  /* 0x9538 */ short defaultItems[44];
  /* 0x9590 */ short actualDefaultItems[44];
  /* 0x95e8 */ int clanTagFeatureRows[256];
  /* 0x99e8 */ int numClanTagFeatures;
  /* 0x99ec */ struct gunLevelRow_t gunLevelRows[512];
  /* 0xa9ec */ short numGunLevelRows;
  /* 0xa9ee */ char Padding_822[2];
  /* 0xa9f0 */ struct specialtyCollection_t specialtyCollection[32];
  /* 0xab70 */ int numSpecialtyCollection;
}; /* size: 0xab74 */

typedef struct _NVAPI_D3D9_ENABLE_STEREO_CHALLENGE_PARAMS
{
  /* 0x0000 */ unsigned char challenge[16];
} NVAPI_D3D9_ENABLE_STEREO_CHALLENGE_PARAMS, *PNVAPI_D3D9_ENABLE_STEREO_CHALLENGE_PARAMS; /* size: 0x0010 */

struct NvGUID
{
  /* 0x0000 */ unsigned long data1;
  /* 0x0004 */ unsigned short data2;
  /* 0x0006 */ unsigned short data3;
  /* 0x0008 */ unsigned char data4[8];
}; /* size: 0x0010 */

typedef struct _NVAPI_D3D9_ENABLE_STEREO_RESPONSE_PARAMS
{
  /* 0x0000 */ struct NvGUID vendorGUID;
  /* 0x0010 */ unsigned char response[20];
} NVAPI_D3D9_ENABLE_STEREO_RESPONSE_PARAMS, *PNVAPI_D3D9_ENABLE_STEREO_RESPONSE_PARAMS; /* size: 0x0024 */

typedef struct _NVAPI_D3D9_ENABLE_STEREO_PARAMS
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long dwCommand;
  union
  {
    /* 0x0008 */ struct _NVAPI_D3D9_ENABLE_STEREO_CHALLENGE_PARAMS ChallengeParams;
    /* 0x0008 */ struct _NVAPI_D3D9_ENABLE_STEREO_RESPONSE_PARAMS ResponseParams;
  }; /* size: 0x0024 */
} NVAPI_D3D9_ENABLE_STEREO_PARAMS, *PNVAPI_D3D9_ENABLE_STEREO_PARAMS; /* size: 0x002c */

struct fileShareWriteFileInfo
{
  /* 0x0000 */ unsigned short fileSlot;
  /* 0x0002 */ char Padding_823[2];
  /* 0x0004 */ void* fileData;
  /* 0x0008 */ unsigned int fileSize;
  /* 0x000c */ const char* fileName;
  /* 0x0010 */ unsigned short category;
  /* 0x0012 */ char Padding_824[2];
  /* 0x0014 */ const void* thumbData;
  /* 0x0018 */ unsigned int thumbDataSize;
  /* 0x001c */ unsigned int numTags;
  /* 0x0020 */ enum fileShareLocation location;
  /* 0x0024 */ class bdTag* tags;
  /* 0x0028 */ const char* menuDef;
  /* 0x002c */ void* progressCallback /* function */;
  /* 0x0030 */ void* dataCallback /* function */;
  /* 0x0034 */ void* successCallback /* function */;
  /* 0x0038 */ void* failureCallback /* function */;
}; /* size: 0x003c */

class bdUCDAccountInfo
{
  /* 0x0000 */ long Padding_825[2];
  /* 0x0008 */ unsigned __int64 m_ucdID;
  /* 0x0010 */ char m_accountName[256];
  /* 0x0110 */ char m_firstName[256];
  /* 0x0210 */ char m_lastName[256];
  /* 0x0310 */ char m_emailAddress[128];
  /* 0x0390 */ BOOL m_marketingOptIn;
  /* 0x0391 */ char m_dateOfBirth[12];
  /* 0x039d */ char m_countryCode[4];
  /* 0x03a1 */ char m_zipCode[64];
  /* 0x03e1 */ unsigned char m_aesKey[24];
}; /* size: 0x0400 */

struct GSPolicyResponse_t
{
  /* 0x0000 */ unsigned char m_bSecure;
}; /* size: 0x0001 */

struct queryResults_CACMPShared
{
  /* 0x0000 */ int itemIndex;
  /* 0x0004 */ enum loadoutSlot_t loadoutSlot;
}; /* size: 0x0008 */

struct challengeTableRow_t
{
  /* 0x0000 */ const char* challengeStatName;
  /* 0x0004 */ int statNameHash;
  /* 0x0008 */ unsigned int maxVal;
  /* 0x000c */ unsigned short index;
  /* 0x000e */ unsigned short row;
  /* 0x0010 */ unsigned short rewardXP;
  /* 0x0012 */ unsigned char unlockLevel;
  /* 0x0013 */ unsigned char unlockItem;
  struct /* bitfield */
  {
    /* 0x0014 */ unsigned char unlockPLevel : 4; /* bit position: 0 */
    /* 0x0014 */ unsigned char tableNumber : 3; /* bit position: 4 */
  }; /* bitfield */
  /* 0x0015 */ char type;
  /* 0x0016 */ char Padding_826[2];
  /* 0x0018 */ const char* unlockImageName;
  /* 0x001c */ int unlockImageHash;
  /* 0x0020 */ unsigned int xPGroupMask;
  /* 0x0024 */ unsigned short prerequisite;
  /* 0x0026 */ char group;
  struct /* bitfield */
  {
    /* 0x0027 */ unsigned char isLifeTime : 1; /* bit position: 0 */
    /* 0x0027 */ unsigned char isMastery : 1; /* bit position: 1 */
    /* 0x0027 */ unsigned char isMaxLevel : 1; /* bit position: 2 */
    /* 0x0027 */ unsigned char isItemUnlocked : 1; /* bit position: 3 */
    /* 0x0027 */ unsigned char isExpert : 1; /* bit position: 4 */
    /* 0x0027 */ unsigned char resetOnPrestige : 1; /* bit position: 5 */
    /* 0x0027 */ unsigned char setGlobalStat : 1; /* bit position: 6 */
  }; /* bitfield */
  /* 0x0028 */ unsigned int excludeItemsMask[8];
}; /* size: 0x0048 */

struct TrackType
{
  /* 0x0000 */ char* trackType;
  /* 0x0004 */ BOOL prestige;
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

struct param_CACMPShared
{
  /* 0x0000 */ enum cacmpshared_type_e type;
  /* 0x0004 */ struct queryResults_CACMPShared results[256];
  /* 0x0804 */ int numItems;
}; /* size: 0x0808 */

struct UrlMethod;

struct validateCACStatus_s
{
  /* 0x0000 */ struct validateCACStatus_s::loadoutSlotStatus_s loadoutSlotStatus[44];
  /* 0x0160 */ struct CACRoot cacRoot;
  /* 0x0168 */ enum ControllerIndex_t localControllerIndex;
  /* 0x016c */ enum loadoutClass_t customClass;
  /* 0x0170 */ BOOL loadoutVersionOK;
  /* 0x0171 */ char Padding_827[3];
  /* 0x0174 */ int numAllowed_PrimaryWeaponAttachments;
  /* 0x0178 */ int numAllowed_SecondaryWeaponAttachments;
}; /* size: 0x017c */

struct AIDemoLockOnView
{
  /* 0x0000 */ int heightOffset;
  /* 0x0004 */ float pitchMin;
  /* 0x0008 */ float pitchMax;
}; /* size: 0x000c */

struct AIDemoLockOnValues
{
  /* 0x0000 */ float highlightDistance;
  /* 0x0004 */ struct AIDemoLockOnView views[2];
}; /* size: 0x001c */

struct CACMPSHARED_WeaponData
{
  /* 0x0000 */ char* name;
  /* 0x0004 */ int numConfigurableAttachments;
}; /* size: 0x0008 */

class LargeLocal
{
  /* 0x0000 */ int startPos;
  /* 0x0004 */ int size;
}; /* size: 0x0008 */

struct gjkcc_info_database_t
{
  /* 0x0000 */ class phys_inplace_avl_tree<unsigned int,generic_avl_map_node_t,generic_avl_map_node_t> m_map;
  /* 0x0004 */ int m_token;
  /* 0x0008 */ int m_gcci_count;
  /* 0x000c */ BOOL m_is_server_thread;
  /* 0x000d */ char __PADDING__[3];
}; /* size: 0x0010 */

class phys_static_array<geom_plane,128>
{
  /* 0x0000 */ char m_buffer[6144];
  /* 0x1800 */ struct geom_plane* const m_slot_array;
  /* 0x1804 */ int m_alloc_count;
}; /* size: 0x1810 */

union XAssetPoolEntry<ddlRoot_t>
{
  union
  {
    /* 0x0000 */ struct ddlRoot_t entry;
    /* 0x0000 */ union XAssetPoolEntry<ddlRoot_t>* next;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct XAssetPool<ddlRoot_t,1>
{
  /* 0x0000 */ union XAssetPoolEntry<ddlRoot_t>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<ddlRoot_t> entries[1];
}; /* size: 0x000c */

struct list_gjk_trace_output
{
  /* 0x0000 */ class phys_link_list<gjk_trace_output_t> m_list;
  /* 0x000c */ struct gjk_trace_output_t* m_first_hit;
}; /* size: 0x0010 */

class bdMailBody
{
  /* 0x0000 */ long Padding_828;
  /* 0x0004 */ void* m_mailBody;
  /* 0x0008 */ unsigned int m_size;
  /* 0x000c */ long Padding_829;
  /* 0x0010 */ unsigned __int64 m_mailID;
}; /* size: 0x0018 */

struct clientSnapshot_t
{
  /* 0x0000 */ struct playerState_s ps;
  /* 0x2a08 */ int entityCount;
  /* 0x2a0c */ int clientCount;
  /* 0x2a10 */ int actorCount;
  /* 0x2a14 */ int matchStateIndex;
  /* 0x2a18 */ int firstEntityIndex;
  /* 0x2a1c */ int firstClientIndex;
  /* 0x2a20 */ int firstActorIndex;
  /* 0x2a24 */ int messageSent;
  /* 0x2a28 */ int messageAcked;
  /* 0x2a2c */ int messageSize;
  /* 0x2a30 */ int serverTime;
  /* 0x2a34 */ int physicsTime;
  /* 0x2a38 */ int timeDelta;
  /* 0x2a3c */ int baselineSnap;
}; /* size: 0x2a40 */

struct $_TypeDescriptor$_extraBytes_29
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[29];
}; /* size: 0x0025 */

class phys_static_array<geom_plane,128>::iterator
{
  /* 0x0000 */ struct geom_plane* m_ptr;
}; /* size: 0x0004 */

class bdReference<bdAntiCheatChallenges>
{
  /* 0x0000 */ class bdAntiCheatChallenges* m_ptr;
}; /* size: 0x0004 */

struct archivedEntityShared_t
{
  /* 0x0000 */ int svFlags;
  /* 0x0004 */ union vec3_t absmin;
  /* 0x0010 */ union vec3_t absmax;
}; /* size: 0x001c */

struct $_TypeDescriptor$_extraBytes_37
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[37];
}; /* size: 0x002d */

struct cachedActor_s
{
  /* 0x0000 */ struct actorState_s as;
}; /* size: 0x0064 */

class bdYouTubeUserToken
{
  /* 0x0000 */ long Padding_830;
  /* 0x0004 */ char m_tokenType[129];
  /* 0x0085 */ char m_token[4097];
  /* 0x1086 */ char m_tokenSecret[1025];
  /* 0x1487 */ char m_keyIdentifier[513];
  /* 0x1688 */ unsigned int m_tokenTTL;
  /* 0x168c */ unsigned int m_expiryTime;
}; /* size: 0x1690 */

struct $_TypeDescriptor$_extraBytes_57
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[57];
}; /* size: 0x0041 */

struct ZMLocationRichPresenceInfo
{
  /* 0x0000 */ char* zmLocation;
  /* 0x0004 */ const char* locString;
}; /* size: 0x0008 */

struct BackgroundPurchasedCount
{
  /* 0x0000 */ unsigned int flush;
  /* 0x0004 */ int count;
}; /* size: 0x0008 */

struct animVehicleSeats_t
{
  /* 0x0000 */ int seats;
}; /* size: 0x0004 */

struct animConditionTable_t
{
  /* 0x0000 */ enum animScriptConditionTypes_t type;
  /* 0x0004 */ struct animStringItem_t* values;
  /* 0x0008 */ int minValue;
  /* 0x000c */ int maxValue;
}; /* size: 0x0010 */

struct tagNV_TIMINGEXT
{
  /* 0x0000 */ unsigned long flag;
  /* 0x0004 */ unsigned short rr;
  /* 0x0006 */ char Padding_831[2];
  /* 0x0008 */ unsigned long rrx1k;
  /* 0x000c */ unsigned long aspect;
  /* 0x0010 */ unsigned short rep;
  /* 0x0012 */ char Padding_832[2];
  /* 0x0014 */ unsigned long status;
  /* 0x0018 */ unsigned char name[40];
}; /* size: 0x0040 */

struct tagNV_TIMING
{
  /* 0x0000 */ unsigned short HVisible;
  /* 0x0002 */ unsigned short HBorder;
  /* 0x0004 */ unsigned short HFrontPorch;
  /* 0x0006 */ unsigned short HSyncWidth;
  /* 0x0008 */ unsigned short HTotal;
  /* 0x000a */ unsigned char HSyncPol;
  /* 0x000b */ char Padding_833;
  /* 0x000c */ unsigned short VVisible;
  /* 0x000e */ unsigned short VBorder;
  /* 0x0010 */ unsigned short VFrontPorch;
  /* 0x0012 */ unsigned short VSyncWidth;
  /* 0x0014 */ unsigned short VTotal;
  /* 0x0016 */ unsigned char VSyncPol;
  /* 0x0017 */ char Padding_834;
  /* 0x0018 */ unsigned short interlaced;
  /* 0x001a */ char Padding_835[2];
  /* 0x001c */ unsigned long pclk;
  /* 0x0020 */ struct tagNV_TIMINGEXT etc;
}; /* size: 0x0060 */

struct jqWorkerCmd
{
  /* 0x0000 */ struct jqModule* module;
  /* 0x0004 */ unsigned int dataSize;
  /* 0x0008 */ volatile long ppu_fence;
  /* 0x000c */ volatile long spu_fence;
  /* 0x0010 */ volatile long* spuThreadLimit;
  /* 0x0014 */ struct jqQueue* queue;
  /* 0x0018 */ unsigned int string_table;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

union XAssetPoolEntry<XModelPieces>
{
  union
  {
    /* 0x0000 */ struct XModelPieces entry;
    /* 0x0000 */ union XAssetPoolEntry<XModelPieces>* next;
  }; /* size: 0x000c */
}; /* size: 0x000c */

struct dwTeamClanCreateTask
{
  /* 0x0000 */ char teamName[21];
  /* 0x0015 */ char Padding_836[3];
  /* 0x0018 */ class bdTeamInfo teamInfo;
}; /* size: 0x0078 */

typedef struct _MINIDUMP_MEMORY_INFO
{
  /* 0x0000 */ unsigned __int64 BaseAddress;
  /* 0x0008 */ unsigned __int64 AllocationBase;
  /* 0x0010 */ unsigned int AllocationProtect;
  /* 0x0014 */ unsigned int __alignment1;
  /* 0x0018 */ unsigned __int64 RegionSize;
  /* 0x0020 */ unsigned int State;
  /* 0x0024 */ unsigned int Protect;
  /* 0x0028 */ unsigned int Type;
  /* 0x002c */ unsigned int __alignment2;
} MINIDUMP_MEMORY_INFO, *PMINIDUMP_MEMORY_INFO; /* size: 0x0030 */

struct client_t
{
  /* 0x0000 */ struct clientHeader_t header;
  /* 0x072c */ const char* dropReason;
  /* 0x0730 */ char userinfo[1024];
  /* 0x0b30 */ char reliableCommandBuffer[16384];
  /* 0x4b30 */ int reliableCommandBufferNext;
  /* 0x4b34 */ struct svscmd_info_t reliableCommandInfo[128];
  /* 0x5134 */ int reliableSequence;
  /* 0x5138 */ int reliableAcknowledge;
  /* 0x513c */ int reliableSent;
  /* 0x5140 */ int messageAcknowledge;
  /* 0x5144 */ int gamestateMessageNum;
  /* 0x5148 */ int challenge;
  /* 0x514c */ struct usercmd_s lastUsercmd;
  /* 0x5190 */ int lastClientCommand;
  /* 0x5194 */ char lastClientCommandString[1024];
  /* 0x5594 */ struct gentity_t* gentity;
  /* 0x5598 */ char name[32];
  /* 0x55b8 */ char clanAbbrev[5];
  /* 0x55bd */ char Padding_837[3];
  /* 0x55c0 */ int clanAbbrev_IsEliteValidated;
  /* 0x55c4 */ long Padding_838;
  /* 0x55c8 */ unsigned __int64 xuid;
  /* 0x55d0 */ unsigned __int64 teamid;
  /* 0x55d8 */ unsigned int doubleXPGroupMask;
  /* 0x55dc */ unsigned int availableMappackFlags;
  /* 0x55e0 */ int nextReliableTime;
  /* 0x55e4 */ int nextReliableCount;
  /* 0x55e8 */ char reservedSlot;
  /* 0x55e9 */ char Padding_839[3];
  /* 0x55ec */ int lastPacketTime;
  /* 0x55f0 */ int lastConnectTime;
  /* 0x55f4 */ int nextSnapshotTime;
  /* 0x55f8 */ int lastSnapshotTime;
  /* 0x55fc */ int timeoutCount;
  /* 0x5600 */ struct clientSnapshot_t frames[16];
  /* 0x2fa00 */ int ping;
  /* 0x2fa04 */ int pingMin;
  /* 0x2fa08 */ int pingMax;
  /* 0x2fa0c */ int unackCount;
  /* 0x2fa10 */ int rate;
  /* 0x2fa14 */ int pureAuthentic;
  /* 0x2fa18 */ int packetUploadCount;
  /* 0x2fa1c */ long Padding_840[25];
  /* 0x2fa80 */ char netchanOutgoingBuffer[65536];
  /* 0x3fa80 */ char netchanIncomingBuffer[2048];
  /* 0x40280 */ int guid;
  /* 0x40284 */ unsigned short scriptId;
  /* 0x40286 */ BOOL bIsSplitscreenClient;
  /* 0x40287 */ BOOL bIsSecondScreenClient;
  /* 0x40288 */ int bIsTestClient;
  /* 0x4028c */ int serverId;
  /* 0x40290 */ int natType;
  /* 0x40294 */ unsigned char stats[50176];
  /* 0x4c694 */ unsigned char purchasedItems[32];
  /* 0x4c6b4 */ int unlockedAttachments[64];
  /* 0x4c7b4 */ unsigned char bonusCardsActive[10];
  /* 0x4c7be */ unsigned char modifiedStatBytes[6272];
  /* 0x4e03e */ char Padding_841[2];
  /* 0x4e040 */ int statsSentIndex;
  /* 0x4e044 */ int statsModified;
  /* 0x4e048 */ __int64 statPacketsReceived;
  /* 0x4e050 */ int statsValidated;
  /* 0x4e054 */ BOOL liveAuthorized;
  /* 0x4e055 */ char Padding_842[3];
  /* 0x4e058 */ int liveAuthFlags;
  /* 0x4e05c */ unsigned char liveAuthFailCount;
  /* 0x4e05d */ char Padding_843[3];
  /* 0x4e060 */ int liveAuthTimestamp;
  /* 0x4e064 */ long Padding_844;
  /* 0x4e068 */ unsigned __int64 liveUserID;
  /* 0x4e070 */ BOOL tempPacketDebugging;
  /* 0x4e071 */ char Padding_845[3];
  /* 0x4e074 */ int snapshotHistoryTime;
  /* 0x4e078 */ int snapshotHistoryFrames;
  /* 0x4e07c */ int messageHistorySize;
  /* 0x4e080 */ int demoPacketCount;
  /* 0x4e084 */ int demoPacketSizes[8];
  /* 0x4e0a4 */ int demoPacketIsFragment[8];
  /* 0x4e0c4 */ int demoReliableCmdSize;
  /* 0x4e0c8 */ char demoReliableCmdItemChars[16];
  /* 0x4e0d8 */ int demoReliableCmdItemSize[16];
  /* 0x4e118 */ int demoReliableCmdCount;
  /* 0x4e11c */ unsigned int lastHashedXP;
  /* 0x4e120 */ int lastSmallDeltaTime;
  /* 0x4e124 */ int lastSnapSentTime;
  /* 0x4e128 */ long __PADDING__[22];
}; /* size: 0x4e180 */

struct tree_desc_s
{
  /* 0x0000 */ struct ct_data_s* dyn_tree;
  /* 0x0004 */ int max_code;
  /* 0x0008 */ struct static_tree_desc_s* stat_desc;
}; /* size: 0x000c */

struct internal_state
{
  /* 0x0000 */ struct z_stream_s* strm;
  /* 0x0004 */ int status;
  /* 0x0008 */ unsigned char* pending_buf;
  /* 0x000c */ unsigned long pending_buf_size;
  /* 0x0010 */ unsigned char* pending_out;
  /* 0x0014 */ unsigned int pending;
  /* 0x0018 */ int wrap;
  /* 0x001c */ struct gz_header_s* gzhead;
  /* 0x0020 */ unsigned int gzindex;
  /* 0x0024 */ unsigned char method;
  /* 0x0025 */ char Padding_846[3];
  /* 0x0028 */ int last_flush;
  /* 0x002c */ unsigned int w_size;
  /* 0x0030 */ unsigned int w_bits;
  /* 0x0034 */ unsigned int w_mask;
  /* 0x0038 */ unsigned char* window;
  /* 0x003c */ unsigned long window_size;
  /* 0x0040 */ unsigned short* prev;
  /* 0x0044 */ unsigned short* head;
  /* 0x0048 */ unsigned int ins_h;
  /* 0x004c */ unsigned int hash_size;
  /* 0x0050 */ unsigned int hash_bits;
  /* 0x0054 */ unsigned int hash_mask;
  /* 0x0058 */ unsigned int hash_shift;
  /* 0x005c */ long block_start;
  /* 0x0060 */ unsigned int match_length;
  /* 0x0064 */ unsigned int prev_match;
  /* 0x0068 */ int match_available;
  /* 0x006c */ unsigned int strstart;
  /* 0x0070 */ unsigned int match_start;
  /* 0x0074 */ unsigned int lookahead;
  /* 0x0078 */ unsigned int prev_length;
  /* 0x007c */ unsigned int max_chain_length;
  /* 0x0080 */ unsigned int max_lazy_match;
  /* 0x0084 */ int level;
  /* 0x0088 */ int strategy;
  /* 0x008c */ unsigned int good_match;
  /* 0x0090 */ int nice_match;
  /* 0x0094 */ struct ct_data_s dyn_ltree[573];
  /* 0x0988 */ struct ct_data_s dyn_dtree[61];
  /* 0x0a7c */ struct ct_data_s bl_tree[39];
  /* 0x0b18 */ struct tree_desc_s l_desc;
  /* 0x0b24 */ struct tree_desc_s d_desc;
  /* 0x0b30 */ struct tree_desc_s bl_desc;
  /* 0x0b3c */ unsigned short bl_count[16];
  /* 0x0b5c */ int heap[573];
  /* 0x1450 */ int heap_len;
  /* 0x1454 */ int heap_max;
  /* 0x1458 */ unsigned char depth[573];
  /* 0x1695 */ char Padding_847[3];
  /* 0x1698 */ unsigned char* l_buf;
  /* 0x169c */ unsigned int lit_bufsize;
  /* 0x16a0 */ unsigned int last_lit;
  /* 0x16a4 */ unsigned short* d_buf;
  /* 0x16a8 */ unsigned long opt_len;
  /* 0x16ac */ unsigned long static_len;
  /* 0x16b0 */ unsigned int matches;
  /* 0x16b4 */ int last_eob_len;
  /* 0x16b8 */ unsigned short bi_buf;
  /* 0x16ba */ char Padding_848[2];
  /* 0x16bc */ int bi_valid;
}; /* size: 0x16c0 */

struct AnimStateName
{
  /* 0x0000 */ unsigned short* name;
  /* 0x0004 */ int category;
}; /* size: 0x0008 */

struct uJson::array_iter
{
}; /* size: 0x0004 */

struct IPakPriority
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int priority;
}; /* size: 0x0008 */

struct IPakWorkData
{
  /* 0x0000 */ struct IPakLoadedPackfile* pak;
  /* 0x0004 */ int indexReadOffset;
  /* 0x0008 */ int activeBuffer;
  /* 0x000c */ unsigned int currentEntry;
  /* 0x0010 */ unsigned short imageParts[5312];
  /* 0x2990 */ struct IPakIndexEntry indexBuffer[4096][2];
  /* 0x22990 */ int indexBufferOffset[2];
  /* 0x22998 */ int indexBufferState[2];
}; /* size: 0x229a0 */

struct jpeg
{
  /* 0x0000 */ struct stbi s;
  /* 0x00a4 */ struct huffman huff_dc[4];
  /* 0x1ae4 */ struct huffman huff_ac[4];
  /* 0x3524 */ unsigned char dequant[64][4];
  /* 0x3624 */ int img_h_max;
  /* 0x3628 */ int img_v_max;
  /* 0x362c */ int img_mcu_x;
  /* 0x3630 */ int img_mcu_y;
  /* 0x3634 */ int img_mcu_w;
  /* 0x3638 */ int img_mcu_h;
  /* 0x363c */ struct
  {
    /* 0x363c */ int id;
    /* 0x3640 */ int h;
    /* 0x3644 */ int v;
    /* 0x3648 */ int tq;
    /* 0x364c */ int hd;
    /* 0x3650 */ int ha;
    /* 0x3654 */ int dc_pred;
    /* 0x3658 */ int x;
    /* 0x365c */ int y;
    /* 0x3660 */ int w2;
    /* 0x3664 */ int h2;
    /* 0x3668 */ unsigned char* data;
    /* 0x366c */ void* raw_data;
    /* 0x3670 */ unsigned char* linebuf;
  } /* size: 0x0038 */ img_comp[4];
  /* 0x371c */ unsigned int code_buffer;
  /* 0x3720 */ int code_bits;
  /* 0x3724 */ unsigned char marker;
  /* 0x3725 */ char Padding_849[3];
  /* 0x3728 */ int nomore;
  /* 0x372c */ int scan_n;
  /* 0x3730 */ int order[4];
  /* 0x3740 */ int restart_interval;
  /* 0x3744 */ int todo;
}; /* size: 0x3748 */

struct archivedSnapshot_s
{
  /* 0x0000 */ int start;
  /* 0x0004 */ int size;
}; /* size: 0x0008 */

struct SndCommandPlay
{
  /* 0x0000 */ unsigned int alias;
  /* 0x0004 */ int fadeTimeMs;
  /* 0x0008 */ float attenuation;
  /* 0x000c */ union SndEntHandle entHandle;
  /* 0x0010 */ int notify;
  /* 0x0014 */ union vec3_t position;
  /* 0x0020 */ union vec3_t direction;
  /* 0x002c */ struct SndPlayback* playback;
  /* 0x0030 */ int startPaused;
  /* 0x0034 */ int setEntState;
  /* 0x0038 */ union vec3_t origin;
  /* 0x0044 */ union vec3_t velocity;
  /* 0x0050 */ union vec3_t orientation[3];
  /* 0x0074 */ int setScriptValues;
  /* 0x0078 */ float scriptPitch;
  /* 0x007c */ float scriptPitchRate;
  /* 0x0080 */ float scriptAttenuation;
  /* 0x0084 */ float scriptAttenuationRate;
}; /* size: 0x0088 */

struct SndCommandStopAlias
{
  /* 0x0000 */ union SndEntHandle ent;
  /* 0x0004 */ unsigned int alias_name;
}; /* size: 0x0008 */

struct SndCommandDisconnectListener
{
  /* 0x0000 */ enum LocalClientNum_t listener;
}; /* size: 0x0004 */

struct SndCommandSetListener
{
  /* 0x0000 */ enum LocalClientNum_t listener;
  /* 0x0004 */ enum ClientNum_t clientNum;
  /* 0x0008 */ enum team_t team;
  /* 0x000c */ union vec3_t origin;
  /* 0x0018 */ union vec3_t axis[3];
}; /* size: 0x003c */

struct SndCommandStopSounds
{
  /* 0x0000 */ enum SndStopSoundFlags flags;
}; /* size: 0x0004 */

struct SndCommandSetEnvironmentEffects
{
  /* 0x0000 */ int priority;
  /* 0x0004 */ unsigned int id;
  /* 0x0008 */ float drylevel;
  /* 0x000c */ float wetlevel;
  /* 0x0010 */ int fademsec;
}; /* size: 0x0014 */

struct SndCommandDeactivateEnvironmentEffects
{
  /* 0x0000 */ int priority;
  /* 0x0004 */ int fademsec;
}; /* size: 0x0008 */

struct SndCommandSetPlaybackAttenuation
{
  /* 0x0000 */ int id;
  /* 0x0004 */ float attenuation;
}; /* size: 0x0008 */

struct SndCommandSetPlaybackAttenuationRate
{
  /* 0x0000 */ int id;
  /* 0x0004 */ float rate;
}; /* size: 0x0008 */

struct SndCommandSetPlaybackPitch
{
  /* 0x0000 */ int id;
  /* 0x0004 */ float pitch;
}; /* size: 0x0008 */

struct SndCommandSetPlaybackPitchRate
{
  /* 0x0000 */ int id;
  /* 0x0004 */ float rate;
}; /* size: 0x0008 */

struct SndCommandStopPlayback
{
  /* 0x0000 */ int id;
}; /* size: 0x0004 */

struct SndCommandSetStartPaused
{
  /* 0x0000 */ int id;
  /* 0x0004 */ int pause;
}; /* size: 0x0008 */

struct SndCommandDuck
{
  /* 0x0000 */ enum SndDuckCategoryType type;
  /* 0x0004 */ unsigned int id;
  /* 0x0008 */ float amount;
}; /* size: 0x000c */

struct SndCommandSetEntState
{
  /* 0x0000 */ union SndEntHandle handle;
  /* 0x0004 */ union vec3_t origin;
  /* 0x0010 */ union vec3_t velocity;
  /* 0x001c */ union vec3_t orientation[3];
}; /* size: 0x0040 */

struct SndCommandSetGameState
{
  /* 0x0000 */ int is_paused;
  /* 0x0004 */ int is_mature;
  /* 0x0008 */ float timescale;
  /* 0x000c */ unsigned int cg_time;
  /* 0x0010 */ unsigned int seed;
  /* 0x0014 */ float voiceScale;
  /* 0x0018 */ float musicScale;
  /* 0x001c */ float sfxScale;
  /* 0x0020 */ float masterScale;
  /* 0x0024 */ float cinematicScale;
  /* 0x0028 */ int masterPatch;
  /* 0x002c */ unsigned int hearingImpaired;
}; /* size: 0x0030 */

struct SndCommandLoopAt
{
  /* 0x0000 */ unsigned int id;
  /* 0x0004 */ union vec3_t origin;
}; /* size: 0x0010 */

struct SndCommandLineAt
{
  /* 0x0000 */ unsigned int id;
  /* 0x0004 */ union vec3_t origin[2];
}; /* size: 0x001c */

struct SndCommandSetContext
{
  /* 0x0000 */ unsigned int type;
  /* 0x0004 */ unsigned int value;
}; /* size: 0x0008 */

struct SndCommandSetEntContext
{
  /* 0x0000 */ union SndEntHandle handle;
  /* 0x0004 */ unsigned int type;
  /* 0x0008 */ unsigned int value;
}; /* size: 0x000c */

struct SndCommandScriptTimescale
{
  /* 0x0000 */ float value;
}; /* size: 0x0004 */

struct SndCommandLoadPatch
{
  /* 0x0000 */ struct SndPatch* patch;
}; /* size: 0x0004 */

struct SndCommandLoadGlobals
{
  /* 0x0000 */ struct SndDriverGlobals* globals;
}; /* size: 0x0004 */

struct SndCommandPrefetchLoadedAlias
{
  /* 0x0000 */ unsigned int aliasId;
}; /* size: 0x0004 */

struct SndCommandSetDefaultAmbientContext
{
  /* 0x0000 */ unsigned int type;
  /* 0x0004 */ unsigned int value;
}; /* size: 0x0008 */

struct SndCommandSetFrontendMusic
{
  /* 0x0000 */ unsigned int musicAlias;
}; /* size: 0x0004 */

struct SndCommandSetLoopState
{
  /* 0x0000 */ union SndEntHandle handle;
  /* 0x0004 */ unsigned int aliasId;
  /* 0x0008 */ float attenuation;
  /* 0x000c */ float attenuationRate;
  /* 0x0010 */ float pitch;
  /* 0x0014 */ float pitchRate;
}; /* size: 0x0018 */

struct SndCommandPlayLoops
{
  /* 0x0000 */ struct SndEntLoop loops[5];
  /* 0x0078 */ int count;
}; /* size: 0x007c */

union SndCommandContext
{
  union
  {
    /* 0x0000 */ struct SndCommandAliasName alias_name;
    /* 0x0000 */ struct SndCommandPlay play;
    /* 0x0000 */ struct SndCommandStopAlias stop_alias;
    /* 0x0000 */ struct SndCommandStopEnt stop_ent;
    /* 0x0000 */ struct SndCommandCinematicStart notify_cinematic_start;
    /* 0x0000 */ struct SndCommandDisconnectListener disconnect_listener;
    /* 0x0000 */ struct SndCommandSetListener set_listener;
    /* 0x0000 */ struct SndCommandStopSounds stop_sounds;
    /* 0x0000 */ struct SndCommandSetEnvironmentEffects set_environment_effects;
    /* 0x0000 */ struct SndCommandDeactivateEnvironmentEffects deactivate_environment_effects;
    /* 0x0000 */ struct SndCommandSetPlaybackAttenuation set_playback_attenuation;
    /* 0x0000 */ struct SndCommandSetPlaybackAttenuationRate set_playback_attenuation_rate;
    /* 0x0000 */ struct SndCommandSetPlaybackPitch set_playback_pitch;
    /* 0x0000 */ struct SndCommandSetPlaybackPitchRate set_playback_pitch_rate;
    /* 0x0000 */ struct SndCommandStopPlayback stop_playback;
    /* 0x0000 */ struct SndCommandSetStartPaused set_start_paused;
    /* 0x0000 */ struct SndCommandDuck duck;
    /* 0x0000 */ struct SndCommandSetEntState set_ent_state;
    /* 0x0000 */ struct SndCommandSetGameState set_game_state;
    /* 0x0000 */ struct SndCommandLoopAt loop_at;
    /* 0x0000 */ struct SndCommandLineAt line_at;
    /* 0x0000 */ struct SndCommandSetContext set_context;
    /* 0x0000 */ struct SndCommandSetEntContext set_ent_context;
    /* 0x0000 */ struct SndCommandScriptTimescale script_timescale;
    /* 0x0000 */ struct SndCommandLoadBank load_bank;
    /* 0x0000 */ struct SndCommandLoadPatch load_patch;
    /* 0x0000 */ struct SndCommandLoadGlobals load_globals;
    /* 0x0000 */ struct SndCommandPrimeAlias prime_alias;
    /* 0x0000 */ struct SndCommandSetMusicState setMusicState;
    /* 0x0000 */ struct SndCommandPrefetchLoadedAlias prefetchLoadedAlias;
    /* 0x0000 */ struct SndCommandSetGlobalFutz setGlobalFutz;
    /* 0x0000 */ struct SndCommandSetDefaultAmbientContext setDefaultAmbientContext;
    /* 0x0000 */ struct SndCommandSetFrontendMusic setFrontendMusic;
    /* 0x0000 */ struct SndCommandSetLoopState setLoopState;
    /* 0x0000 */ struct SndCommandPlayLoops playLoops;
  }; /* size: 0x0088 */
}; /* size: 0x0088 */

struct SndCommand
{
  /* 0x0000 */ struct SndCommand* next;
  /* 0x0004 */ enum SndCommandType type;
  /* 0x0008 */ union SndCommandContext context;
}; /* size: 0x0090 */

class bdTimeStamp
{
  /* 0x0000 */ long Padding_850;
  /* 0x0004 */ unsigned int m_timeStamp;
}; /* size: 0x0008 */

struct chunk
{
  /* 0x0000 */ unsigned int length;
  /* 0x0004 */ unsigned int type;
}; /* size: 0x0008 */

union XAssetPoolEntry<Qdb>
{
  union
  {
    /* 0x0000 */ struct Qdb entry;
    /* 0x0000 */ union XAssetPoolEntry<Qdb>* next;
  }; /* size: 0x000c */
}; /* size: 0x000c */

struct dwTeamGetMembershipsTask
{
  /* 0x0000 */ unsigned __int64 userID;
  /* 0x0008 */ class bdTeamInfo* teamInfos;
  /* 0x000c */ unsigned int maxNumTeams;
}; /* size: 0x0010 */

typedef struct _NVAPI_D3D9_DMA_UNMAP_PARAMS
{
  /* 0x0000 */ struct NVDX_ObjectHandle__* hSysmemSurface;
} NVAPI_D3D9_DMA_UNMAP_PARAMS, *PNVAPI_D3D9_DMA_UNMAP_PARAMS; /* size: 0x0004 */

struct NV_MOSAIC_TOPO_BRIEF
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum NV_MOSAIC_TOPO topo;
  /* 0x0008 */ unsigned long enabled;
  /* 0x000c */ unsigned long isPossible;
}; /* size: 0x0010 */

struct orientation_t
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ union vec3_t axis[3];
}; /* size: 0x0030 */

struct stbi_gif_struct
{
  /* 0x0000 */ int w;
  /* 0x0004 */ int h;
  /* 0x0008 */ unsigned char* out;
  /* 0x000c */ int flags;
  /* 0x0010 */ int bgindex;
  /* 0x0014 */ int ratio;
  /* 0x0018 */ int transparent;
  /* 0x001c */ int eflags;
  /* 0x0020 */ unsigned char pal[4][256];
  /* 0x0420 */ unsigned char lpal[4][256];
  /* 0x0820 */ struct stbi_gif_lzw_struct codes[4096];
  /* 0x4820 */ unsigned char* color_table;
  /* 0x4824 */ int parse;
  /* 0x4828 */ int step;
  /* 0x482c */ int lflags;
  /* 0x4830 */ int start_x;
  /* 0x4834 */ int start_y;
  /* 0x4838 */ int max_x;
  /* 0x483c */ int max_y;
  /* 0x4840 */ int cur_x;
  /* 0x4844 */ int cur_y;
  /* 0x4848 */ int line_size;
}; /* size: 0x484c */

struct NV_HDCP_STATUS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 bEncrypting : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 bRepeater : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 bUserAccessible : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 bExtUnprotected : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 uPortIndex : 4; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 uNumPorts : 4; /* bit position: 8 */
    /* 0x0000 */ unsigned __int64 bInternalPanel : 1; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 bWideScope : 1; /* bit position: 13 */
    /* 0x0000 */ unsigned __int64 bHasCs : 1; /* bit position: 14 */
    /* 0x0000 */ unsigned __int64 bReadZ : 1; /* bit position: 15 */
    /* 0x0000 */ unsigned __int64 uReserved : 24; /* bit position: 16 */
    /* 0x0000 */ unsigned __int64 bDualLinkEven : 1; /* bit position: 40 */
    /* 0x0000 */ unsigned __int64 bDualLinkOdd : 1; /* bit position: 41 */
    /* 0x0000 */ unsigned __int64 bDualLinkCapable : 1; /* bit position: 42 */
    /* 0x0000 */ unsigned __int64 reserved : 21; /* bit position: 43 */
  }; /* bitfield */
  /* 0x0008 */ unsigned long DisplayId;
}; /* size: 0x000c */

struct AimAssistPlayerState
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ union vec3_t viewangles;
  /* 0x0018 */ union vec3_t velocity;
  /* 0x0024 */ union vec3_t linkAngles;
  /* 0x0030 */ int eFlags;
  /* 0x0034 */ int linkFlags;
  /* 0x0038 */ int pm_flags;
  /* 0x003c */ int pm_type;
  /* 0x0040 */ __int64 weapFlags;
  /* 0x0048 */ int weaponstate;
  /* 0x004c */ int speed;
  /* 0x0050 */ float fWeaponPosFrac;
  /* 0x0054 */ float viewHeightCurrent;
  /* 0x0058 */ union Weapon weapon;
  /* 0x005c */ union Weapon meleeWeapon;
  /* 0x0060 */ BOOL hasAmmo;
  /* 0x0061 */ BOOL isDualWielding;
  /* 0x0062 */ BOOL targetAssistDisabled;
  /* 0x0063 */ BOOL onMovingPlatform;
  /* 0x0064 */ long __PADDING__[1];
}; /* size: 0x0068 */

struct team_move_context_t
{
  /* 0x0000 */ struct actor_t* self;
  /* 0x0004 */ union vec2_t vVelSelf;
  /* 0x000c */ union vec3_t vOrgSelf;
  /* 0x0018 */ union vec2_t vVelDirSelf;
  /* 0x0020 */ float fVelSelfSqrd;
  /* 0x0024 */ float fDeltaCorrection;
  /* 0x0028 */ float fIntervalSqrd;
  /* 0x002c */ float fWalkIntervalSqrd;
  /* 0x0030 */ float fMaxIntervalSqrd;
  /* 0x0034 */ int bFailedLookahead;
  /* 0x0038 */ float fDodgePosDeltaLengthSqrd;
  /* 0x003c */ int dodgeEntities[72];
  /* 0x015c */ int dodgeEntityCount;
  /* 0x0160 */ struct sentient_t* pDodgeOther;
  /* 0x0164 */ BOOL bPileUp;
  /* 0x0165 */ char Padding_851[3];
  /* 0x0168 */ float fSlowDownPosDeltaLengthSqrd;
  /* 0x016c */ struct sentient_t* pSlowDownOther;
  /* 0x0170 */ union vec2_t vVelSlowDownOther;
}; /* size: 0x0178 */

class ISteamUtils
{
}; /* size: 0x0004 */

class colgeom_visitor_inlined_t<200>
{
  /* 0x0000 */ long Padding_852[32];
  /* 0x0080 */ int nprims;
  /* 0x0084 */ BOOL overflow;
  /* 0x0085 */ char Padding_853[3];
  /* 0x0088 */ struct col_prim_t prims[200];
}; /* size: 0x06d0 */

struct IKCollisionCache
{
  /* 0x0000 */ int hitIndex;
  /* 0x0004 */ long Padding_854[3];
  /* 0x0010 */ class colgeom_visitor_inlined_t<200> proximity_data;
}; /* size: 0x06e0 */

struct BuiltinMethodDef
{
  /* 0x0000 */ const char* actionString;
  /* 0x0004 */ unsigned int constId;
  /* 0x0008 */ int min_args;
  /* 0x000c */ int max_args;
  /* 0x0010 */ void* actionFunc /* function */;
  /* 0x0014 */ int type;
}; /* size: 0x0018 */

struct D3D10_SO_DECLARATION_ENTRY
{
  /* 0x0000 */ const char* SemanticName;
  /* 0x0004 */ unsigned int SemanticIndex;
  /* 0x0008 */ unsigned char StartComponent;
  /* 0x0009 */ unsigned char ComponentCount;
  /* 0x000a */ unsigned char OutputSlot;
  /* 0x000b */ char __PADDING__[1];
}; /* size: 0x000c */

struct actor_fields_s
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int constId;
  /* 0x0008 */ int ofs;
  /* 0x000c */ int size[1];
  /* 0x0010 */ enum fieldtype_t type;
  /* 0x0014 */ void* setter /* function */;
  /* 0x0018 */ void* getter /* function */;
}; /* size: 0x001c */

struct ThrottleData
{
  /* 0x0000 */ int returnTimeMs;
}; /* size: 0x0004 */

typedef struct _NVDRS_BINARY_SETTING
{
  /* 0x0000 */ unsigned long valueLength;
  /* 0x0004 */ unsigned char valueData[4096];
} NVDRS_BINARY_SETTING, *PNVDRS_BINARY_SETTING; /* size: 0x1004 */

typedef struct _NVDRS_SETTING_VALUES
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long numSettingValues;
  /* 0x0008 */ enum _NVDRS_SETTING_TYPE settingType;
  union
  {
    /* 0x000c */ unsigned long u32DefaultValue;
    /* 0x000c */ struct _NVDRS_BINARY_SETTING binaryDefaultValue;
    /* 0x000c */ unsigned short wszDefaultValue[2048];
  }; /* size: 0x1004 */
  /* 0x1010 */ union
  {
    union
    {
      /* 0x1010 */ unsigned long u32Value;
      /* 0x1010 */ struct _NVDRS_BINARY_SETTING binaryValue;
      /* 0x1010 */ unsigned short wszValue[2048];
    }; /* size: 0x1004 */
  } /* size: 0x1004 */ settingValues[100];
} NVDRS_SETTING_VALUES, *PNVDRS_SETTING_VALUES; /* size: 0x651a0 */

struct archivedEntity_s
{
  /* 0x0000 */ struct entityState_s s;
  /* 0x00f8 */ struct archivedEntityShared_t r;
}; /* size: 0x0114 */

struct cachedSnapshot_t
{
  /* 0x0000 */ int archivedFrame;
  /* 0x0004 */ int time;
  /* 0x0008 */ int physicsTime;
  /* 0x000c */ int entityCount;
  /* 0x0010 */ int clientCount;
  /* 0x0014 */ int actorCount;
  /* 0x0018 */ int firstEntityIndex;
  /* 0x001c */ int firstClientIndex;
  /* 0x0020 */ int firstActorIndex;
  /* 0x0024 */ int matchStateIndex;
  /* 0x0028 */ int usesDelta;
}; /* size: 0x002c */

class CustomSearchInfo_FindPathWithLOS
{
  /* 0x0000 */ struct pathnode_t* m_pNodeTo;
  /* 0x0004 */ float m_fWithinDistSqrd;
  /* 0x0008 */ union vec3_t startPos;
  /* 0x0014 */ float negotiationOverlapCost;
}; /* size: 0x0018 */

struct SndOcclusionTrace
{
  /* 0x0000 */ int id;
  /* 0x0004 */ int voiceIndex;
  /* 0x0008 */ union vec3_t listener;
  /* 0x0014 */ union vec3_t playback;
  /* 0x0020 */ int cache[5];
  /* 0x0034 */ float occlusion;
  /* 0x0038 */ unsigned char padding[8];
}; /* size: 0x0040 */

struct FaceQuadrantThresholds
{
  /* 0x0000 */ float forwardDot;
  /* 0x0004 */ float sideDot;
}; /* size: 0x0008 */

struct NV_GPU_GPIO_LEGAL_PINS
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long gpioPinCount;
  /* 0x0008 */ unsigned long gpioLegalPins[32];
}; /* size: 0x0088 */

typedef struct __s_GUID
{
  /* 0x0000 */ unsigned long Data1;
  /* 0x0004 */ unsigned short Data2;
  /* 0x0006 */ unsigned short Data3;
  /* 0x0008 */ unsigned char Data4[8];
} _s_GUID, *P_s_GUID; /* size: 0x0010 */

class ISteamApps
{
}; /* size: 0x0004 */

struct scr_classStruct_t
{
  /* 0x0000 */ unsigned short id;
  /* 0x0002 */ unsigned short entArrayId;
  /* 0x0004 */ char charId;
  /* 0x0005 */ char Padding_855[3];
  /* 0x0008 */ const char* name;
}; /* size: 0x000c */

struct pathnode_parent_t
{
  /* 0x0000 */ union vec3_t origin_loc;
  /* 0x000c */ int entnum;
  /* 0x0010 */ struct pathnode_t* m_node;
  /* 0x0014 */ struct pathnode_parent_t* m_next;
}; /* size: 0x0018 */

struct demoFileShareTaskHandler
{
  /* 0x0000 */ BOOL isAbortingFileshareTask;
  /* 0x0001 */ char Padding_856[3];
  /* 0x0004 */ enum ControllerIndex_t fileshareTaskControllerIndex;
  /* 0x0008 */ int abortResetTime;
}; /* size: 0x000c */

struct demoFileHandler
{
  /* 0x0000 */ unsigned char* ptr;
  /* 0x0004 */ int size;
  /* 0x0008 */ int offset;
}; /* size: 0x000c */

struct fileShareWriteSummaryInfo
{
  /* 0x0000 */ unsigned __int64 fileID;
  /* 0x0008 */ enum fileShareLocation location;
  /* 0x000c */ const void* summaryData;
  /* 0x0010 */ unsigned int summaryDataSize;
  /* 0x0014 */ const void* metaData;
  /* 0x0018 */ unsigned int metaDataSize;
  /* 0x001c */ unsigned int numTags;
  /* 0x0020 */ class bdTag* tags;
  /* 0x0024 */ void* successCallback /* function */;
  /* 0x0028 */ void* failureCallback /* function */;
  /* 0x002c */ long __PADDING__[1];
}; /* size: 0x0030 */

class sd_xa2_callback
{
}; /* size: 0x0004 */

struct snd_fire_manager
{
  /* 0x0000 */ int active;
  /* 0x0004 */ union vec3_t location;
  /* 0x0010 */ float level;
  /* 0x0014 */ int id;
}; /* size: 0x0018 */

struct NV_GPU_CLIENT_POWER_READING_V1
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long bMilliWattValid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long reserved : 31; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long mp;
  /* 0x0008 */ unsigned long mW;
}; /* size: 0x000c */

struct NV_GPU_CLIENT_POWER_POLICIES_POLICY_INFO_V1
{
  /* 0x0000 */ enum NV_GPU_CLIENT_POWER_POLICIES_POLICY_ID policyId;
  /* 0x0004 */ enum NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID channelId;
  /* 0x0008 */ struct NV_GPU_CLIENT_POWER_READING_V1 powerLimitMin;
  /* 0x0014 */ struct NV_GPU_CLIENT_POWER_READING_V1 powerLimitDefault;
  /* 0x0020 */ struct NV_GPU_CLIENT_POWER_READING_V1 powerLimitMax;
}; /* size: 0x002c */

class CCallback<CSteamAchievements,UserStatsStored_t,0>
{
  /* 0x0000 */ long Padding_857[3];
  /* 0x000c */ class CSteamAchievements* m_pObj;
  /* 0x0010 */ void* m_Func /* function */;
}; /* size: 0x0014 */

struct sentient_fields_s
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int constId;
  /* 0x0008 */ int ofs;
  /* 0x000c */ int size[1];
  /* 0x0010 */ enum fieldtype_t type;
  /* 0x0014 */ void* setter /* function */;
  /* 0x0018 */ void* getter /* function */;
}; /* size: 0x001c */

struct GSC_OBJGDB
{
  /* 0x0000 */ char magic[8];
  /* 0x0008 */ unsigned long version;
  /* 0x000c */ unsigned long source_crc;
  /* 0x0010 */ unsigned long lineinfo_count;
}; /* size: 0x0014 */

struct ai_funcs_t
{
  /* 0x0000 */ void* pfnStart /* function */;
  /* 0x0004 */ void* pfnFinish /* function */;
  /* 0x0008 */ void* pfnSuspend /* function */;
  /* 0x000c */ void* pfnResume /* function */;
  /* 0x0010 */ void* pfnThink /* function */;
  /* 0x0014 */ void* pfnTouch /* function */;
  /* 0x0018 */ void* pfnPain /* function */;
  /* 0x001c */ void* pfnReact /* function */;
}; /* size: 0x0020 */

struct AITypeScript
{
  /* 0x0000 */ int main;
  /* 0x0004 */ int precache;
  /* 0x0008 */ int spawner;
  /* 0x000c */ unsigned char aiTypeIndex;
  /* 0x000d */ unsigned char clientAiTypeIndex;
  /* 0x000e */ char Padding_858[2];
  /* 0x0010 */ int clientMain;
  /* 0x0014 */ int clientPrecache;
  /* 0x0018 */ struct FootstepTableDef* footstepTable;
  /* 0x001c */ struct FootstepFXTableDef* footstepFXTable;
  /* 0x0020 */ struct AnimStateDef* animStateDef;
  /* 0x0024 */ struct AIDemoLockOnValues demoLockOn;
  /* 0x0040 */ BOOL bAITypeGeneratesFootstepCallback;
  /* 0x0041 */ BOOL bClientPrecacheCalled;
  /* 0x0042 */ char __PADDING__[2];
}; /* size: 0x0044 */

class ISteamMatchmakingServers
{
}; /* size: 0x0004 */

struct node_field_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int constId;
  /* 0x0008 */ int ofs;
  /* 0x000c */ int size[1];
  /* 0x0010 */ enum fieldtype_t type;
  /* 0x0014 */ unsigned int whichbits;
  /* 0x0018 */ void* getter /* function */;
}; /* size: 0x001c */

class phys_simple_allocator<pathnode_parent_t>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

struct NVAPI_VIDSURF_ENCRYPT_CTRL_GET_GUID_COUNT
{
  /* 0x0000 */ unsigned long dwGuidCount;
}; /* size: 0x0004 */

struct GlassStreamOutline
{
  /* 0x0000 */ unsigned int numVerts;
  /* 0x0004 */ unsigned int edgeFlags;
  /* 0x0008 */ struct GlassPackedOutline::PackedVert verts[1];
}; /* size: 0x000c */

struct SndAliasLookupNode
{
  /* 0x0000 */ unsigned int id;
  /* 0x0004 */ struct SndAliasList* list;
}; /* size: 0x0008 */

struct SndAliasLookupCache
{
  /* 0x0000 */ struct SndAliasLookupNode cache[1024];
}; /* size: 0x2000 */

struct SndBankGlobals
{
  /* 0x0000 */ struct SndAssetBankEntry bankEntries[16487];
  /* 0x5080c */ unsigned int bankEntryMagic;
  /* 0x50810 */ unsigned int bankCount;
  /* 0x50814 */ unsigned int patchCount;
  /* 0x50818 */ struct SndBank* banks[32];
  /* 0x50898 */ struct SndPatch* patches[8];
  /* 0x508b8 */ void* blockingEvent;
  /* 0x508bc */ BOOL blockingEventInit;
  /* 0x508bd */ BOOL blockingSuccess;
  /* 0x508be */ BOOL loadGate;
  /* 0x508bf */ char Padding_859;
  /* 0x508c0 */ unsigned int assetLoadIndex;
  /* 0x508c4 */ unsigned int assetLoadId;
  /* 0x508c8 */ struct SndAssetToLoad assetLoadQueue[2048];
  /* 0x648c8 */ struct SndAssetToLoad assetLoadActive[16];
  /* 0x64b48 */ struct SndBank* sequentialReadInProgress;
  /* 0x64b4c */ BOOL bankEntriesInUse;
  /* 0x64b4d */ char Padding_860[51];
  /* 0x64b80 */ struct SndAssetBankHeader bankHeader;
  /* 0x65380 */ struct SndAliasLookupCache aliasCache;
  /* 0x67380 */ unsigned int missingAliasCache[1024];
  /* 0x68380 */ unsigned int aliasCacheHit;
  /* 0x68384 */ unsigned int aliasCacheMiss;
  /* 0x68388 */ unsigned int aliasCacheCollision;
  /* 0x6838c */ float assetLoadPercent;
  /* 0x68390 */ long __PADDING__[28];
}; /* size: 0x68400 */

struct NV_COOLER_TACHOMETER
{
  /* 0x0000 */ unsigned long speedRPM;
  /* 0x0004 */ unsigned char bSupported;
  /* 0x0005 */ char Padding_861[3];
  /* 0x0008 */ unsigned long maxSpeedRPM;
  /* 0x000c */ unsigned long minSpeedRPM;
}; /* size: 0x0010 */

typedef struct _NVAPI_DESKTOP_RES
{
  /* 0x0000 */ unsigned long width;
  /* 0x0004 */ unsigned long height;
  /* 0x0008 */ unsigned long bitsPerPixel;
  /* 0x000c */ unsigned long refreshRate;
  /* 0x0010 */ unsigned __int64 reserved1;
  /* 0x0018 */ unsigned __int64 reserved2;
} NVAPI_DESKTOP_RES, *PNVAPI_DESKTOP_RES; /* size: 0x0020 */

typedef struct _NVAPI_VIDEO_PROCESSING_CAPS
{
  /* 0x0000 */ unsigned __int64 deinterlaceMode;
  /* 0x0008 */ unsigned __int64 videoEnhance;
  /* 0x0010 */ unsigned __int64 colorControl;
  /* 0x0018 */ unsigned __int64 gamma;
  /* 0x0020 */ unsigned __int64 miscCaps;
  /* 0x0028 */ unsigned __int64 reserved1;
  /* 0x0030 */ unsigned __int64 reserved2;
  /* 0x0038 */ unsigned __int64 reserved3;
} NVAPI_VIDEO_PROCESSING_CAPS, *PNVAPI_VIDEO_PROCESSING_CAPS; /* size: 0x0040 */

typedef struct _NVAPI_VIDEO_CAPS
{
  /* 0x0000 */ unsigned long maxFlipRate;
  /* 0x0004 */ enum _NV_CODEC hwDecode;
  /* 0x0008 */ unsigned __int64 vidFeature;
  /* 0x0010 */ unsigned long perfLevel;
  /* 0x0014 */ unsigned long numVidProfiles;
  /* 0x0018 */ unsigned long maxResPixels;
  /* 0x001c */ unsigned long reserved1;
  /* 0x0020 */ struct _NVAPI_VIDEO_PROCESSING_CAPS vidProcCaps[4];
} NVAPI_VIDEO_CAPS, *PNVAPI_VIDEO_CAPS; /* size: 0x0120 */

typedef struct _NVAPI_VIDEO_CAPS_PACKET
{
  /* 0x0000 */ unsigned long packetVer;
  /* 0x0004 */ unsigned long numVidStreams;
  /* 0x0008 */ struct _NVAPI_VIDEO_SRC_INFO vidSrcInfo[4];
  /* 0x0088 */ struct _NVAPI_DESKTOP_RES res[4];
  /* 0x0108 */ unsigned __int64 renderMode;
  /* 0x0110 */ unsigned __int64 totalFB;
  /* 0x0118 */ unsigned short NumExtOvlBufNeeded;
  /* 0x011a */ unsigned short reserved1;
  /* 0x011c */ unsigned long reserved2;
  /* 0x0120 */ struct _NVAPI_VIDEO_CAPS videoCaps[4];
} NVAPI_VIDEO_CAPS_PACKET, *PNVAPI_VIDEO_CAPS_PACKET; /* size: 0x05a0 */

struct BindPair_s
{
  /* 0x0000 */ enum Bind_t vehicle;
  /* 0x0004 */ enum Bind_t primary;
}; /* size: 0x0008 */

struct SndDspVoiceFilterParam
{
  /* 0x0000 */ float f;
  /* 0x0004 */ float g;
  /* 0x0008 */ float q;
  /* 0x000c */ float t;
  /* 0x0010 */ float ta;
  /* 0x0014 */ float tr;
}; /* size: 0x0018 */

class FixedSizeAllocator<GlassShard>
{
  /* 0x0000 */ void* memory;
  /* 0x0004 */ class LinkedList<FixedSizeAllocator<GlassShard>::Block *> freeList;
  /* 0x0008 */ class LinkedList<FixedSizeAllocator<GlassShard>::Block *> usedList;
  /* 0x000c */ unsigned int size;
  /* 0x0010 */ unsigned int used;
  /* 0x0014 */ unsigned int maxUsed;
  /* 0x0018 */ unsigned int magic;
}; /* size: 0x001c */

class PrivateTeamProfile
{
  /* 0x0000 */ long Padding_862[4];
  /* 0x0010 */ unsigned __int64 m_memberTeamID;
  /* 0x0018 */ char m_membermotd[96];
}; /* size: 0x0078 */

struct eliteClanData_t
{
  /* 0x0000 */ class bdTeamInfo teamInfos[1];
  /* 0x0060 */ int numTotalTeams;
  /* 0x0064 */ long Padding_863;
  /* 0x0068 */ class bdTeamMember teamMembers[100];
  /* 0x25e8 */ int numTotalTeamMembers;
  /* 0x25ec */ long Padding_864;
  /* 0x25f0 */ class PublicTeamProfile teamPublicProfiles[1];
  /* 0x6630 */ int numTotalTeamPublicProfiles;
  /* 0x6634 */ long Padding_865;
  /* 0x6638 */ class PrivateTeamProfile teamPrivateProfile;
  /* 0x66b0 */ BOOL clanAbbrev_NeedsValidating;
  /* 0x66b1 */ BOOL clanAbbrev_Validated;
  /* 0x66b2 */ char Padding_866[2];
  /* 0x66b4 */ int mClanXP;
  /* 0x66b8 */ int mClanLevel;
  /* 0x66bc */ long __PADDING__[1];
}; /* size: 0x66c0 */

class phys_link_list<pulse_sum_wheel>
{
  /* 0x0000 */ class pulse_sum_wheel* m_first;
  /* 0x0004 */ class pulse_sum_wheel** m_last_next_ptr;
  /* 0x0008 */ int m_alloc_count;
}; /* size: 0x000c */

struct uJson
{
  /* 0x0000 */ const char* data;
}; /* size: 0x0004 */

struct uJson::object_iter
{
  /* 0x0000 */ struct uJson first;
  /* 0x0004 */ struct uJson second;
}; /* size: 0x0008 */

struct NV_GPU_GET_HDCP_SUPPORT_STATUS
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum _NV_GPU_HDCP_FUSE_STATE hdcpFuseState;
  /* 0x0008 */ enum _NV_GPU_HDCP_KEY_SOURCE hdcpKeySource;
  /* 0x000c */ enum _NV_GPU_HDCP_KEY_SOURCE_STATE hdcpKeySourceState;
}; /* size: 0x0010 */

struct WeaponOptions::Reticle
{
  /* 0x0000 */ const struct Material* reticleMaterial;
  /* 0x0004 */ const struct Material* lensMaterial;
}; /* size: 0x0008 */

typedef struct _NV_DISPLAYCONFIG_PATH_INFO
{
  /* 0x0000 */ unsigned long version;
  union
  {
    /* 0x0004 */ unsigned long sourceId;
    /* 0x0004 */ unsigned long reserved_sourceId;
  }; /* size: 0x0004 */
  /* 0x0008 */ unsigned long targetInfoCount;
  /* 0x000c */ struct _NV_DISPLAYCONFIG_PATH_TARGET_INFO_V2* targetInfo;
  /* 0x0010 */ struct _NV_DISPLAYCONFIG_SOURCE_MODE_INFO_V1* sourceModeInfo;
  struct /* bitfield */
  {
    /* 0x0014 */ unsigned long IsNonNVIDIAAdapter : 1; /* bit position: 0 */
    /* 0x0014 */ unsigned long reserved : 31; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0018 */ void* pOSAdapterID;
} NV_DISPLAYCONFIG_PATH_INFO, *PNV_DISPLAYCONFIG_PATH_INFO; /* size: 0x001c */

class MatchMakingInfo
{
  /* 0x0000 */ long Padding_867[72];
  /* 0x0120 */ unsigned __int64 m_GAME_SECURITY_ID;
  /* 0x0128 */ unsigned char m_GAME_SECURITY_KEY[17];
  /* 0x0139 */ char Padding_868[3];
  /* 0x013c */ int m_SERVER_TYPE;
  /* 0x0140 */ int m_SHOW_IN_MATCHMAKING;
  /* 0x0144 */ int m_NETCODE_VERSION;
  /* 0x0148 */ int m_MAP_PACKS;
  /* 0x014c */ int m_PLAYLIST_VERSION;
  /* 0x0150 */ int m_PLAYLIST_NUMBER;
  /* 0x0154 */ int m_IS_EMPTY;
  /* 0x0158 */ int m_TEAM_SIZE_MAX;
  /* 0x015c */ float m_SKILL;
  /* 0x0160 */ int m_GEO_1;
  /* 0x0164 */ int m_GEO_2;
  /* 0x0168 */ int m_GEO_3;
  /* 0x016c */ int m_GEO_4;
  /* 0x0170 */ int m_dirty;
  /* 0x0174 */ int m_active;
  /* 0x0178 */ int m_timeSinceLastUpdate;
  /* 0x017c */ int m_recreateSession;
}; /* size: 0x0180 */

struct GfxLodParms
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ struct GfxLodRamp ramp[2];
  /* 0x0024 */ struct GfxLodRamp rampExtracam[2];
  /* 0x003c */ BOOL valid;
  /* 0x003d */ char Padding_869[3];
  /* 0x0040 */ struct ExtraCamLodInfo extracamLod;
}; /* size: 0x0074 */

struct r_globals_t
{
  /* 0x0000 */ struct GfxViewParms identityViewParms;
  /* 0x0150 */ BOOL inFrame;
  /* 0x0151 */ BOOL registered;
  /* 0x0152 */ BOOL forbidDelayLoadImages;
  /* 0x0153 */ BOOL ignorePrecacheErrors;
  /* 0x0154 */ union vec3_t viewOrg;
  /* 0x0160 */ union vec3_t viewDir;
  /* 0x016c */ unsigned int frontEndFrameCount;
  /* 0x0170 */ int totalImageMemory;
  /* 0x0174 */ struct Material* materialHashTable[4992];
  /* 0x4f74 */ struct MaterialUsage materialUsage[4992];
  /* 0x13974 */ struct GfxClientFog clientFogs[4];
  /* 0x14104 */ union GfxColor color_axis;
  /* 0x14108 */ union GfxColor color_allies;
  /* 0x1410c */ struct trStatistics_t* globalstats;
  /* 0x14110 */ struct trViewStatistics_t* stats;
  /* 0x14114 */ struct GfxFrameStats frameStats;
  /* 0x15568 */ struct GfxLodParms lodParms;
  /* 0x155dc */ struct GfxLodParms correctedLodParms[4];
  /* 0x157ac */ BOOL useSunLightOverride;
  /* 0x157ad */ BOOL useSunDirOverride;
  /* 0x157ae */ BOOL useSunDirLerp;
  /* 0x157af */ char Padding_870;
  /* 0x157b0 */ union vec3_t diffuseSunLightOverride;
  /* 0x157bc */ union vec3_t specularSunLightOverride;
  /* 0x157c8 */ union vec3_t sunDirOverride;
  /* 0x157d4 */ union vec3_t sunDirOverrideTarget;
  /* 0x157e0 */ int sunDirLerpBeginTime;
  /* 0x157e4 */ int sunDirLerpEndTime;
  /* 0x157e8 */ const struct GfxViewParms* debugViewParms;
  /* 0x157ec */ int endTime;
  /* 0x157f0 */ BOOL distortion;
  /* 0x157f1 */ BOOL drawWorld;
  /* 0x157f2 */ BOOL drawSModels;
  /* 0x157f3 */ BOOL drawXModels;
  /* 0x157f4 */ BOOL drawBModels;
  /* 0x157f5 */ char Padding_871[3];
  /* 0x157f8 */ const char* codeImageNames[55];
  /* 0x158d4 */ unsigned int viewInfoCount;
  /* 0x158d8 */ int sunShadowFull;
  /* 0x158dc */ float sunShadowmapScale;
  /* 0x158e0 */ float sunShadowmapScaleNum;
  /* 0x158e4 */ unsigned int sunShadowSize;
  /* 0x158e8 */ float sunShadowPartitionRatio;
  /* 0x158ec */ int drawSunShadow;
  /* 0x158f0 */ BOOL isNotRenderingFullScreen;
  /* 0x158f1 */ BOOL enablePlayerShadowFlag;
  /* 0x158f2 */ BOOL gammaModified;
  /* 0x158f3 */ char Padding_872;
  /* 0x158f4 */ float gamma;
  /* 0x158f8 */ float skinnedVertexCacheUsed[4];
  /* 0x15908 */ long __PADDING__[2];
}; /* size: 0x15910 */

struct eliteSubscriberData_t
{
  /* 0x0000 */ enum eSubLevel_e subscriberInfo;
}; /* size: 0x0004 */

struct eliteUCDData_t
{
  /* 0x0000 */ class bdUCDAccountStatus eliteAccountStatus;
  /* 0x0010 */ BOOL isValid;
  /* 0x0011 */ char __PADDING__[3];
}; /* size: 0x0014 */

struct elite_t
{
  /* 0x0000 */ struct eliteClanData_t eliteClanData;
  /* 0x66c0 */ struct eliteSubscriberData_t eliteSubscriberData;
  /* 0x66c4 */ struct eliteUCDData_t eliteUCDData;
  /* 0x66d8 */ unsigned __int64 xuid;
  /* 0x66e0 */ unsigned int progress;
  /* 0x66e4 */ enum eliteStatus_e status;
  /* 0x66e8 */ int retryCount;
  /* 0x66ec */ int nextRetryTime;
}; /* size: 0x66f0 */

struct r_global_permanent_t
{
  /* 0x0000 */ struct Material* sortedMaterials[4992];
  /* 0x4e00 */ BOOL needSortMaterials;
  /* 0x4e01 */ BOOL postMapFastfileLoadFinished;
  /* 0x4e02 */ char Padding_873[2];
  /* 0x4e04 */ int materialCount;
  /* 0x4e08 */ struct GfxImage* whiteImage;
  /* 0x4e0c */ struct GfxImage* blackImage;
  /* 0x4e10 */ struct GfxImage* blankImage;
  /* 0x4e14 */ struct GfxImage* grayImage;
  /* 0x4e18 */ struct GfxImage* linearGrayImage;
  /* 0x4e1c */ struct GfxImage* lightmapIntensityImages[31];
  /* 0x4e98 */ struct GfxImage* identityNormalMapImage;
  /* 0x4e9c */ struct GfxImage* whiteTransparentImage;
  /* 0x4ea0 */ struct GfxImage* blackTransparentImage;
  /* 0x4ea4 */ struct GfxImage* outdoorImage;
  /* 0x4ea8 */ struct GfxImage* heatMapImage;
  /* 0x4eac */ struct GfxImage* qrcodeImage[12];
  /* 0x4edc */ struct GfxLightDef* dlightDef;
  /* 0x4ee0 */ struct GfxLightDef* flashLightDef;
  /* 0x4ee4 */ struct Material* defaultMaterial;
  /* 0x4ee8 */ struct Material* whiteMaterial;
  /* 0x4eec */ struct Material* additiveMaterial;
  /* 0x4ef0 */ struct Material* additiveMaterialNoDepth;
  /* 0x4ef4 */ struct Material* pointMaterial;
  /* 0x4ef8 */ struct Material* lineMaterial;
  /* 0x4efc */ struct Material* lineMaterialNoDepth;
  /* 0x4f00 */ struct Material* blendMaterial;
  /* 0x4f04 */ struct Material* blendMaterialNoDepth;
  /* 0x4f08 */ struct Material* whiteDebugExteriorMaterial;
  /* 0x4f0c */ struct Material* whiteDepthInteriorMaterial;
  /* 0x4f10 */ struct Material* clearAlphaMaterial;
  /* 0x4f14 */ struct Material* clearAlphaStencilMaterial;
  /* 0x4f18 */ struct Material* setAlphaMaterial;
  /* 0x4f1c */ struct Material* shadowClearMaterial;
  /* 0x4f20 */ struct Material* shadowCasterMaterial;
  /* 0x4f24 */ struct Material* shadowOverlayMaterial;
  /* 0x4f28 */ struct Material* depthPrepassMaterial;
  /* 0x4f2c */ struct Material* glareBlindMaterial;
  /* 0x4f30 */ struct Material* lightCoronaMaterial;
  /* 0x4f34 */ struct Material* stencilShadowMaterial;
  /* 0x4f38 */ struct Material* stencilDisplayMaterial;
  /* 0x4f3c */ struct Material* floatZDisplayMaterial;
  /* 0x4f40 */ struct Material* resolveFloatZ1;
  /* 0x4f44 */ struct Material* resolveFloatZ2;
  /* 0x4f48 */ struct Material* resolveFloatZ4;
  /* 0x4f4c */ struct Material* resolveFloatZ8;
  /* 0x4f50 */ struct Material* resolveFloatZ16;
  /* 0x4f54 */ struct Material* fxaaMaterial;
  /* 0x4f58 */ struct Material* ssaoMaterial;
  /* 0x4f5c */ struct Material* ssaoApplyMaterial;
  /* 0x4f60 */ struct Material* ssaoBlurMaterial;
  /* 0x4f64 */ struct Material* ssaoMinifyMaterial;
  /* 0x4f68 */ struct Material* ssaoReconstructMaterial;
  /* 0x4f6c */ struct Material* colorChannelMixerMaterial;
  /* 0x4f70 */ struct Material* frameColorDebugMaterial;
  /* 0x4f74 */ struct Material* frameAlphaDebugMaterial;
  /* 0x4f78 */ struct GfxImage* rawImage;
  /* 0x4f7c */ struct GfxWorld* world;
  /* 0x4f80 */ struct Material* feedbackReplaceMaterial;
  /* 0x4f84 */ struct Material* feedbackBlendMaterial;
  /* 0x4f88 */ struct Material* feedbackFilmBlendMaterial;
  /* 0x4f8c */ struct Material* dofDownsampleMaterial;
  /* 0x4f90 */ struct Material* dofNearCocMaterial;
  /* 0x4f94 */ struct Material* smallBlurMaterial;
  /* 0x4f98 */ struct Material* postFxDofMaterial;
  /* 0x4f9c */ struct Material* postFxDofMaterial2;
  /* 0x4fa0 */ struct Material* postFxDofColorMaterial;
  /* 0x4fa4 */ struct Material* dofHqDownsample;
  /* 0x4fa8 */ struct Material* dofHqBlurMask;
  /* 0x4fac */ struct Material* dofHqBlur;
  /* 0x4fb0 */ struct Material* dofHqFinal;
  /* 0x4fb4 */ struct Material* dofHqFinalExtra;
  /* 0x4fb8 */ struct Material* zombieDarkness;
  /* 0x4fbc */ struct Material* redactMaterial1;
  /* 0x4fc0 */ struct Material* redactMaterial2;
  /* 0x4fc4 */ struct Material* redactMaterial3;
  /* 0x4fc8 */ struct Material* waterDropletMaterial;
  /* 0x4fcc */ struct Material* reviveFXMaterial;
  /* 0x4fd0 */ struct Material* postFxColorMaterial;
  /* 0x4fd4 */ struct Material* postFxMaterial;
  /* 0x4fd8 */ struct Material* poisonFXMaterial;
  /* 0x4fdc */ struct Material* anaglyphFXMaterial;
  /* 0x4fe0 */ struct Material* symmetricFilterMaterial[8];
  /* 0x5000 */ struct Material* shellShockBlurredMaterial;
  /* 0x5004 */ struct Material* shellShockFlashedMaterial;
  /* 0x5008 */ struct Material* ropeMaterial;
  /* 0x500c */ struct Material* logoMaterial;
  /* 0x5010 */ int savedScreenTimes[4];
  /* 0x5020 */ struct SavedScreenParams savedScreenParams[4];
  /* 0x5070 */ struct Material* resampleFinal;
  /* 0x5074 */ struct Material* resampleHDR;
  /* 0x5078 */ struct Material* resampleCubicFinal;
  /* 0x507c */ struct Material* resampleCubicFinalLeft;
  /* 0x5080 */ struct Material* resampleCubicFinalRight;
  /* 0x5084 */ struct Material* resampleShift;
  /* 0x5088 */ struct Material* resampleMatrix;
  /* 0x508c */ struct Material* bloomDownsample;
  /* 0x5090 */ struct Material* bloomDownsampleHQ;
  /* 0x5094 */ struct Material* bloomDownsampleConvolution;
  /* 0x5098 */ struct Material* bloomDownsampleConvolutionHQ;
  /* 0x509c */ struct Material* bloomRemap;
  /* 0x50a0 */ struct Material* bloomBlurX;
  /* 0x50a4 */ struct Material* bloomBlurY;
  /* 0x50a8 */ struct Material* bloomCombineHiLo;
  /* 0x50ac */ struct Material* bloomApply;
  /* 0x50b0 */ struct Material* bloomApplyHQ;
  /* 0x50b4 */ struct Material* bloomApplyNull;
  /* 0x50b8 */ struct Material* bloomApplyThermal;
  /* 0x50bc */ struct Material* debugZbuffer;
  /* 0x50c0 */ struct Material* createLut2d;
  /* 0x50c4 */ struct Material* createLut2dv;
  /* 0x50c8 */ struct Material* applyLut3d;
  /* 0x50cc */ struct Material* dummyMaterial;
  /* 0x50d0 */ struct Material* compositeResult;
  /* 0x50d4 */ struct Material* infraredWhite;
  /* 0x50d8 */ struct Material* sonarMaterial;
  /* 0x50dc */ struct Material* sonarAttachmentMaterial;
  /* 0x50e0 */ struct Material* hudOutlineMaterial[3];
  /* 0x50ec */ struct Material* predatorMaterial;
  /* 0x50f0 */ struct r_global_permap_assets_t permapAssets;
  /* 0x5100 */ struct FontIcon* fontIconHandle[4];
  /* 0x5110 */ int fontIconFilesCount;
  /* 0x5114 */ long __PADDING__[27];
}; /* size: 0x5180 */

struct GroupSet
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ BOOL exclusive;
  /* 0x0005 */ char Padding_874[3];
  /* 0x0008 */ const char** groupNames;
  /* 0x000c */ int capacity;
  /* 0x0010 */ unsigned int start;
}; /* size: 0x0014 */

struct GametypeRichPresenceInfo
{
  /* 0x0000 */ char* gametype;
  /* 0x0004 */ int context;
  /* 0x0008 */ const char* locString;
}; /* size: 0x000c */

struct DpvsGlob
{
  /* 0x0000 */ struct DpvsPlane nearPlane;
  /* 0x0014 */ struct DpvsPlane farPlane;
  /* 0x0028 */ BOOL farPlaneEnabled;
  /* 0x0029 */ BOOL cacheCells;
  /* 0x002a */ BOOL cellsCached;
  /* 0x002b */ char Padding_875;
  /* 0x002c */ const struct GfxMatrix* viewProjMtx;
  /* 0x0030 */ const struct GfxMatrix* invViewProjMtx;
  /* 0x0034 */ const struct GfxMatrix* projMtx;
  /* 0x0038 */ union vec4_t viewOrg;
  /* 0x0048 */ int viewOrgIsDir;
  /* 0x004c */ struct DpvsGlob_sunShadow sunShadow;
  /* 0x006c */ int queuedCount;
  /* 0x0070 */ struct PortalHeapNode* portalQueue;
  /* 0x0074 */ union GfxHullPointsPool* nextFreeHullPoints;
  /* 0x0078 */ float cullDist;
  /* 0x007c */ struct DpvsPlane childPlanes[2048];
  /* 0xa07c */ struct DpvsView views[3][4];
  /* 0xadfc */ struct DpvsPlane* sideFrustumPlanes;
  /* 0xae00 */ unsigned char* entVis[4];
  /* 0xae10 */ unsigned int* cellCasterBitsForCell;
  /* 0xae14 */ unsigned char cellVisible[256];
  /* 0xaf14 */ unsigned char cellForceInvisible[256];
  /* 0xb014 */ long Padding_876[3];
  /* 0xb020 */ union vec4_t occluderPlanes[325];
  /* 0xc470 */ int numOccluders;
  /* 0xc474 */ unsigned int numCachedCells;
  /* 0xc478 */ unsigned int numCachedPlanes;
  /* 0xc47c */ unsigned int cachedCellCount[3];
  /* 0xc488 */ unsigned int cachedCellBase[3];
  /* 0xc494 */ struct DpvsCachedCell cachedCells[512];
  /* 0xcc94 */ const struct DpvsCachedCell* cellToCachedCellMap[256];
  /* 0xd094 */ long __PADDING__[3];
}; /* size: 0xd0a0 */

union GfxHullPointsPool
{
  union
  {
    /* 0x0000 */ union GfxHullPointsPool* nextFree;
    /* 0x0000 */ union vec2_t points[64];
  }; /* size: 0x0200 */
}; /* size: 0x0200 */

struct jsmn_parser
{
  /* 0x0000 */ unsigned int pos;
  /* 0x0004 */ int toknext;
  /* 0x0008 */ int toksuper;
}; /* size: 0x000c */

union jsmnVal_u
{
  union
  {
    /* 0x0000 */ char stringVal[1025];
    /* 0x0000 */ int intVal;
    /* 0x0000 */ BOOL boolVal;
  }; /* size: 0x0401 */
}; /* size: 0x0404 */

struct OutlineEdge
{
  /* 0x0000 */ int index;
  /* 0x0004 */ struct ray2_t ray;
}; /* size: 0x0018 */

class CCallback<LiveSteamClient,GameOverlayActivated_t,0>
{
  /* 0x0000 */ long Padding_877[3];
  /* 0x000c */ class LiveSteamClient* m_pObj;
  /* 0x0010 */ void* m_Func /* function */;
}; /* size: 0x0014 */

struct sd_decoder_ps3_mp3;

class fileShareDownloadInterceptor
{
  /* 0x0000 */ long Padding_878;
  /* 0x0004 */ struct dwFileShareReadFileTask* task;
  /* 0x0008 */ void* callback /* function */;
}; /* size: 0x000c */

struct SndNotify
{
  /* 0x0000 */ struct SndNotify* next;
  /* 0x0004 */ enum SndNotifyType type;
  /* 0x0008 */ union SndNotifyContext context;
}; /* size: 0x0018 */

typedef struct _NVDRS_APPLICATION_V2
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long isPredefined;
  /* 0x0008 */ unsigned short appName[2048];
  /* 0x1008 */ unsigned short userFriendlyName[2048];
  /* 0x2008 */ unsigned short launcher[2048];
  /* 0x3008 */ unsigned short fileInFolder[2048];
} NVDRS_APPLICATION_V2, *PNVDRS_APPLICATION_V2; /* size: 0x4008 */

struct LaunchData
{
  /* 0x0000 */ int version;
  /* 0x0004 */ char startupText[826];
  /* 0x033e */ char Padding_879[2];
  /* 0x0340 */ enum ControllerIndex_t activeController;
  /* 0x0344 */ long Padding_880;
  /* 0x0348 */ unsigned __int64 invitedXUID;
  /* 0x0350 */ struct XSESSION_INFO inviteHostInfo;
  /* 0x038d */ char Padding_881[3];
  /* 0x0390 */ unsigned __int64 inviteFromXUID;
  /* 0x0398 */ BOOL skipMovies;
  /* 0x0399 */ BOOL gameInviteAccepted;
  /* 0x039a */ BOOL isDedicated;
  /* 0x039b */ BOOL fromGameInvite;
  /* 0x039c */ BOOL fromMPInvite;
  /* 0x039d */ BOOL bootableInvite;
  /* 0x039e */ BOOL usedControllers[1];
  /* 0x039f */ BOOL startOtherExecutableAfterInvite;
  /* 0x03a0 */ BOOL mpZombieMode;
  /* 0x03a1 */ char Padding_882[3];
  /* 0x03a4 */ unsigned int stackTrace[16];
  /* 0x03e4 */ long __PADDING__[1];
}; /* size: 0x03e8 */

union XAssetPoolEntry<PhysPreset>
{
  union
  {
    /* 0x0000 */ struct PhysPreset entry;
    /* 0x0000 */ union XAssetPoolEntry<PhysPreset>* next;
  }; /* size: 0x0054 */
}; /* size: 0x0054 */

struct XAssetPool<PhysPreset,1>
{
  /* 0x0000 */ union XAssetPoolEntry<PhysPreset>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<PhysPreset> entries[1];
}; /* size: 0x0058 */

class bdLogSubscriber
{
  /* 0x0000 */ long Padding_883[4];
  /* 0x0010 */ const char* m_channels[5];
}; /* size: 0x0024 */

struct InviteInfo
{
  /* 0x0000 */ struct XSESSION_INFO sessionInfo;
  /* 0x003d */ BOOL fromGameInvite;
  /* 0x003e */ BOOL fromMPInvite;
  /* 0x003f */ char inviteString[32];
  /* 0x005f */ char invitePass[64];
}; /* size: 0x009f */

struct Friend
{
  /* 0x0000 */ unsigned char nameInd;
  /* 0x0001 */ char Padding_884[3];
  /* 0x0004 */ unsigned int level;
  /* 0x0008 */ char clanTag[10];
  /* 0x0012 */ char colorMods[128];
  /* 0x0092 */ char Padding_885[2];
  /* 0x0094 */ struct netadr_t currentServer;
  /* 0x00a8 */ unsigned __int64 accountID;
  /* 0x00b0 */ BOOL online;
  /* 0x00b1 */ BOOL sendInvite;
  /* 0x00b2 */ BOOL showInvite;
  /* 0x00b3 */ char Padding_886;
  /* 0x00b4 */ int lastInviteTime;
  /* 0x00b8 */ struct InviteInfo inviteInfo;
  /* 0x0157 */ BOOL haveInvite;
}; /* size: 0x0158 */

struct scr_entref_t
{
  /* 0x0000 */ unsigned short entnum;
  /* 0x0002 */ unsigned short classnum;
  /* 0x0004 */ enum LocalClientNum_t client;
}; /* size: 0x0008 */

struct Floor0
{
  /* 0x0000 */ unsigned char order;
  /* 0x0001 */ char Padding_887;
  /* 0x0002 */ unsigned short rate;
  /* 0x0004 */ unsigned short bark_map_size;
  /* 0x0006 */ unsigned char amplitude_bits;
  /* 0x0007 */ unsigned char amplitude_offset;
  /* 0x0008 */ unsigned char number_of_books;
  /* 0x0009 */ unsigned char book_list[16];
  /* 0x0019 */ char __PADDING__[1];
}; /* size: 0x001a */

class phys_inplace_avl_tree_node<pulse_sum_constraint_solver::temp_user_rigid_body>
{
  /* 0x0000 */ class pulse_sum_constraint_solver::temp_user_rigid_body* m_left;
  /* 0x0004 */ class pulse_sum_constraint_solver::temp_user_rigid_body* m_right;
  /* 0x0008 */ int m_balance;
}; /* size: 0x000c */

class pulse_sum_constraint_solver::temp_user_rigid_body
{
  /* 0x0000 */ long Padding_888[109];
  /* 0x01b4 */ class user_rigid_body* m_avl_key;
  /* 0x01b8 */ class phys_inplace_avl_tree_node<pulse_sum_constraint_solver::temp_user_rigid_body> m_avl_tree_node;
}; /* size: 0x01d0 */

class dwQoSMultiProbeListener
{
  /* 0x0000 */ long Padding_889;
  /* 0x0004 */ class bdQoSRemoteAddr m_probeAddrs[50];
  /* 0x057c */ BOOL m_probeSucceeded[50];
  /* 0x05ae */ char Padding_890[2];
  /* 0x05b0 */ unsigned int m_numProbes;
  /* 0x05b4 */ class bdQoSProbeInfo m_successes[50];
  /* 0x0cbc */ class bdSecurityID m_successIDs[50];
  /* 0x0e4c */ unsigned int m_numSuccesses;
  /* 0x0e50 */ unsigned int m_numFailures;
}; /* size: 0x0e54 */

struct pulse_sum_constraint_solver::solver_info
{
  /* 0x0000 */ int m_max_vel_iters;
  /* 0x0004 */ int m_max_vel_pos_iters;
  /* 0x0008 */ float m_max_vel_error_sq;
  /* 0x000c */ float m_max_vel_pos_error_sq;
  /* 0x0010 */ float m_delta_t;
}; /* size: 0x0014 */

class phys_link_list<pulse_sum_angular>
{
  /* 0x0000 */ class pulse_sum_angular* m_first;
  /* 0x0004 */ class pulse_sum_angular** m_last_next_ptr;
  /* 0x0008 */ int m_alloc_count;
}; /* size: 0x000c */

class phys_link_list<pulse_sum_contact>
{
  /* 0x0000 */ class pulse_sum_contact* m_first;
  /* 0x0004 */ class pulse_sum_contact** m_last_next_ptr;
  /* 0x0008 */ int m_alloc_count;
}; /* size: 0x000c */

class pulse_sum_constraint_solver
{
  /* 0x0000 */ float m_outside_delta_t;
  /* 0x0004 */ int m_psys_max_vel_iters;
  /* 0x0008 */ int m_psys_max_vel_pos_iters;
  /* 0x000c */ struct pulse_sum_constraint_solver::solver_info m_si;
  /* 0x0020 */ class phys_transient_allocator m_solver_memory_allocator;
  /* 0x0038 */ class phys_link_list<pulse_sum_node> m_list_pulse_sum_node;
  /* 0x0044 */ int m_memory_high_water;
  /* 0x0048 */ class phys_link_list<pulse_sum_normal> m_list_pulse_sum_normal;
  /* 0x0054 */ class phys_link_list<pulse_sum_point> m_list_pulse_sum_point;
  /* 0x0060 */ class phys_link_list<pulse_sum_angular> m_list_pulse_sum_angular;
  /* 0x006c */ class phys_link_list<pulse_sum_wheel> m_list_pulse_sum_wheel;
  /* 0x0078 */ class phys_link_list<pulse_sum_contact> m_list_pulse_sum_contact;
}; /* size: 0x0084 */

struct SpawnInfluencerPreset
{
  /* 0x0000 */ char description[32];
  /* 0x0020 */ int index;
  /* 0x0024 */ enum eInfluencerType type;
  /* 0x0028 */ enum eInfluencerShape shape;
  /* 0x002c */ float radius;
  /* 0x0030 */ float originalLength;
  /* 0x0034 */ float score;
  /* 0x0038 */ enum eInfluencerScoreCurve score_curve;
  /* 0x003c */ int markDangerous;
}; /* size: 0x0040 */

class bdMailHeader
{
  /* 0x0000 */ long Padding_891[2];
  /* 0x0008 */ unsigned __int64 m_senderID;
  /* 0x0010 */ char m_senderName[64];
  /* 0x0050 */ unsigned __int64 m_mailID;
  /* 0x0058 */ unsigned int m_timeStamp;
  /* 0x005c */ unsigned int m_size;
}; /* size: 0x0060 */

struct DBReorderAssetEntry
{
  /* 0x0000 */ unsigned int sequence;
  /* 0x0004 */ int type;
  /* 0x0008 */ const char* typeString;
  /* 0x000c */ const char* assetName;
}; /* size: 0x0010 */

class bdNotification
{
  /* 0x0000 */ long Padding_892;
  /* 0x0004 */ enum bdNotificationType m_type;
  /* 0x0008 */ unsigned int m_timeStamp;
  /* 0x000c */ long Padding_893;
  /* 0x0010 */ unsigned __int64 m_ID;
  /* 0x0018 */ unsigned __int64 m_sourceUser;
  /* 0x0020 */ char m_sourceUserName[64];
  /* 0x0060 */ unsigned __int64 m_affectedUser;
  /* 0x0068 */ char m_affectedUserName[64];
  /* 0x00a8 */ unsigned __int64 m_teamID;
  /* 0x00b0 */ char m_teamName[64];
}; /* size: 0x00f0 */

struct threat_bias_t
{
  /* 0x0000 */ unsigned short groupName[16];
  /* 0x0020 */ int threatTable[16][16];
  /* 0x0420 */ int threatGroupCount;
}; /* size: 0x0424 */

struct qosPayload_t
{
  /* 0x0000 */ int protocol;
  /* 0x0004 */ int isMP;
  /* 0x0008 */ int isMigrating;
  /* 0x000c */ int numAvailableSlots;
  /* 0x0010 */ int maxLocalPlayersAllowed;
  /* 0x0014 */ int allowGuests;
  /* 0x0018 */ int isMatchEnding;
  /* 0x001c */ int isLoading;
  /* 0x0020 */ int isDedicated;
  /* 0x0024 */ long Padding_894;
  /* 0x0028 */ unsigned __int64 xuid;
}; /* size: 0x0030 */

class phys_static_array<plane_lt,512>::iterator;

struct team_move_other_context_t
{
  /* 0x0000 */ struct sentient_t* other;
  /* 0x0004 */ union vec3_t vOrgOther;
  /* 0x0010 */ union vec2_t vVelOther;
  /* 0x0018 */ union vec2_t vDelta;
  /* 0x0020 */ union vec2_t vPerp;
  /* 0x0028 */ float fPosDeltaLengthSqrd;
  /* 0x002c */ float fScale;
}; /* size: 0x0030 */

struct PC_AgeRestrict
{
  /* 0x0000 */ char* titleId;
  /* 0x0004 */ int age;
}; /* size: 0x0008 */

class bdMessagingGroup
{
  /* 0x0000 */ long Padding_895;
  /* 0x0004 */ unsigned char m_category;
  /* 0x0005 */ char Padding_896[3];
  /* 0x0008 */ unsigned __int64 m_groupID;
}; /* size: 0x0010 */

struct XuidInfo
{
  /* 0x0000 */ unsigned __int64 playerXuids;
  /* 0x0008 */ char gamertag[32];
  /* 0x0028 */ int systemTime;
  /* 0x002c */ long __PADDING__[1];
}; /* size: 0x0030 */

struct s_mutePlayerInfo
{
  /* 0x0000 */ unsigned __int64 playerXuid;
  /* 0x0008 */ BOOL muteVoice;
  /* 0x0009 */ char Padding_897[3];
  /* 0x000c */ struct s_mutePlayerInfo* next;
}; /* size: 0x0010 */

struct pathsort_t
{
  /* 0x0000 */ struct pathnode_t* node;
  /* 0x0004 */ float metric;
  /* 0x0008 */ float distMetric;
}; /* size: 0x000c */

struct tagMONITORINFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ struct tagRECT rcMonitor;
  /* 0x0014 */ struct tagRECT rcWork;
  /* 0x0024 */ unsigned long dwFlags;
}; /* size: 0x0028 */

struct physBatch
{
  /* 0x0000 */ struct jqModule* Module;
  /* 0x0004 */ void* Input;
  /* 0x0008 */ void* Output;
}; /* size: 0x000c */

typedef struct _DSCEFFECTDESC
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ struct _GUID guidDSCFXClass;
  /* 0x0018 */ struct _GUID guidDSCFXInstance;
  /* 0x0028 */ unsigned long dwReserved1;
  /* 0x002c */ unsigned long dwReserved2;
} DSCEFFECTDESC, *PDSCEFFECTDESC; /* size: 0x0030 */

struct trackerItem_s
{
  /* 0x0000 */ short col;
  /* 0x0002 */ char Padding_898[6];
  /* 0x0008 */ unsigned __int64 ent;
  /* 0x0010 */ int val;
  /* 0x0014 */ enum trackerColType_e type;
}; /* size: 0x0018 */

struct trackerQueue_s
{
  /* 0x0000 */ struct trackerItem_s items[96];
  /* 0x0900 */ BOOL dirty;
  /* 0x0901 */ char Padding_899[3];
  /* 0x0904 */ int lastUploadTime;
}; /* size: 0x0908 */

class phys_static_array<phys_vec3,512>::iterator;

struct sentient_sort_t
{
  /* 0x0000 */ struct sentient_t* sentient;
  /* 0x0004 */ float fMetric;
  /* 0x0008 */ float distSqrd;
}; /* size: 0x000c */

struct tagMIXERLINEA
{
  /* 0x0000 */ unsigned long cbStruct;
  /* 0x0004 */ unsigned long dwDestination;
  /* 0x0008 */ unsigned long dwSource;
  /* 0x000c */ unsigned long dwLineID;
  /* 0x0010 */ unsigned long fdwLine;
  /* 0x0014 */ unsigned long dwUser;
  /* 0x0018 */ unsigned long dwComponentType;
  /* 0x001c */ unsigned long cChannels;
  /* 0x0020 */ unsigned long cConnections;
  /* 0x0024 */ unsigned long cControls;
  /* 0x0028 */ char szShortName[16];
  /* 0x0038 */ char szName[64];
  struct
  {
    /* 0x0078 */ unsigned long dwType;
    /* 0x007c */ unsigned long dwDeviceID;
    /* 0x0080 */ unsigned short wMid;
    /* 0x0082 */ unsigned short wPid;
    /* 0x0084 */ unsigned int vDriverVersion;
    /* 0x0088 */ char szPname[32];
  } /* size: 0x0030 */ Target;
}; /* size: 0x00a8 */

typedef struct _DSCBCAPS
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long dwBufferBytes;
  /* 0x000c */ unsigned long dwReserved;
} DSCBCAPS, *PDSCBCAPS; /* size: 0x0010 */

struct FxCurveIterator
{
  /* 0x0000 */ const struct FxCurve* master;
  /* 0x0004 */ int currentKeyIndex;
}; /* size: 0x0008 */

struct fileFetchData
{
  /* 0x0000 */ unsigned char* buffer;
  /* 0x0004 */ int bufferSize;
  /* 0x0008 */ BOOL fetched;
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

class CustomSearchInfo_FindPathAwayNotCrossPlanes
{
  /* 0x0000 */ long Padding_900[8];
  /* 0x0020 */ int m_iPlaneCount;
  /* 0x0024 */ union vec2_t* m_vNormal;
  /* 0x0028 */ float* m_fDist;
}; /* size: 0x002c */

class CustomSearchInfo_FindPathInCylinderWithLOSNotCrossPlanes
{
  /* 0x0000 */ long Padding_901[6];
  /* 0x0018 */ const struct actor_goal_s* goal;
  /* 0x001c */ int m_iPlaneCount;
  /* 0x0020 */ union vec2_t* m_vNormal;
  /* 0x0024 */ float* m_fDist;
}; /* size: 0x0028 */

class phys_simple_allocator<gjk_obb_t>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

class CustomSearchInfo_FindPathClosestPossible
{
  /* 0x0000 */ float m_fBestScore;
  /* 0x0004 */ struct pathnode_t* m_pBestNode;
  /* 0x0008 */ struct pathnode_t* m_pNodeTo;
  /* 0x000c */ float negotiationOverlapCost;
}; /* size: 0x0010 */

struct AttractorRepulsor_t
{
  /* 0x0000 */ BOOL inUse;
  /* 0x0001 */ BOOL isAttractor;
  /* 0x0002 */ char Padding_902[2];
  /* 0x0004 */ int entnum;
  /* 0x0008 */ union vec3_t origin;
  /* 0x0014 */ float strength;
  /* 0x0018 */ float maxDist;
}; /* size: 0x001c */

struct dwFileMetadata
{
  /* 0x0000 */ char* fileName;
  /* 0x0004 */ long Padding_903;
  /* 0x0008 */ class bdFileInfo fileInfo;
  /* 0x00b8 */ BOOL isUserFile;
  /* 0x00b9 */ char __PADDING__[7];
}; /* size: 0x00c0 */

struct FFOTDInfo
{
  /* 0x0000 */ char filename[64];
  /* 0x0040 */ unsigned int totalSize;
  /* 0x0044 */ unsigned int timestamp;
  /* 0x0048 */ int chunkCount;
  /* 0x004c */ int chunksDownloaded;
  /* 0x0050 */ int bytesDownloaded;
  /* 0x0054 */ BOOL downloadComplete;
  /* 0x0055 */ char __PADDING__[3];
}; /* size: 0x0058 */

struct WADEntry
{
  /* 0x0000 */ char name[32];
  /* 0x0020 */ unsigned int compressedSize;
  /* 0x0024 */ unsigned int size;
  /* 0x0028 */ unsigned int offset;
}; /* size: 0x002c */

class phys_simple_allocator<gjk_cylinder_t>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

struct WADHeader
{
  /* 0x0000 */ unsigned int magic;
  /* 0x0004 */ unsigned int timestamp;
  /* 0x0008 */ unsigned int numEntries;
  /* 0x000c */ unsigned int ffotdVersion;
}; /* size: 0x0010 */

struct Residue
{
  /* 0x0000 */ unsigned int begin;
  /* 0x0004 */ unsigned int end;
  /* 0x0008 */ unsigned int part_size;
  /* 0x000c */ unsigned char classifications;
  /* 0x000d */ unsigned char classbook;
  /* 0x000e */ char Padding_904[2];
  /* 0x0010 */ unsigned char** classdata;
  /* 0x0014 */ short* residue_books[8];
}; /* size: 0x0018 */

struct IXAudio2VoiceCallback
{
}; /* size: 0x0004 */

struct chull_t
{
  /* 0x0000 */ unsigned int key;
  /* 0x0004 */ int nverts;
  /* 0x0008 */ class phys_vec3* verts;
  /* 0x000c */ int ninds;
  /* 0x0010 */ unsigned short* inds;
  /* 0x0014 */ struct chull_t* next;
  /* 0x0018 */ int touched;
  /* 0x001c */ struct chull_t* next_list;
}; /* size: 0x0020 */

struct gz_header_s
{
  /* 0x0000 */ int text;
  /* 0x0004 */ unsigned long time;
  /* 0x0008 */ int xflags;
  /* 0x000c */ int os;
  /* 0x0010 */ unsigned char* extra;
  /* 0x0014 */ unsigned int extra_len;
  /* 0x0018 */ unsigned int extra_max;
  /* 0x001c */ unsigned char* name;
  /* 0x0020 */ unsigned int name_max;
  /* 0x0024 */ unsigned char* comment;
  /* 0x0028 */ unsigned int comm_max;
  /* 0x002c */ int hcrc;
  /* 0x0030 */ int done;
}; /* size: 0x0034 */

struct XAUDIO2_BUFFER
{
  /* 0x0000 */ unsigned int Flags;
  /* 0x0004 */ unsigned int AudioBytes;
  /* 0x0008 */ const unsigned char* pAudioData;
  /* 0x000c */ unsigned int PlayBegin;
  /* 0x0010 */ unsigned int PlayLength;
  /* 0x0014 */ unsigned int LoopBegin;
  /* 0x0018 */ unsigned int LoopLength;
  /* 0x001c */ unsigned int LoopCount;
  /* 0x0020 */ void* pContext;
}; /* size: 0x0024 */

struct XZoneInfo
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int allocFlags;
  /* 0x0008 */ int freeFlags;
}; /* size: 0x000c */

struct ENTROPY_CONTEXT_PLANES
{
  /* 0x0000 */ char y1[4];
  /* 0x0004 */ char u[2];
  /* 0x0006 */ char v[2];
  /* 0x0008 */ char y2;
}; /* size: 0x0009 */

struct FFOTDChunkFooter
{
  /* 0x0000 */ char marker[4];
  /* 0x0004 */ unsigned int timestamp;
  /* 0x0008 */ unsigned int totalSize;
  /* 0x000c */ unsigned short chunkLength;
  /* 0x000e */ unsigned char chunkCount;
  /* 0x000f */ unsigned char chunkNumber;
}; /* size: 0x0010 */

struct fetchSignedStatsKeyUserData
{
  /* 0x0000 */ int keyType;
  /* 0x0004 */ void* initKey /* function */;
  /* 0x0008 */ unsigned char fetchBuffer[65536];
}; /* size: 0x10008 */

struct persistentStats
{
  /* 0x0000 */ unsigned char statsBuffer[50176];
  /* 0xc400 */ BOOL isChecksumValid;
  /* 0xc401 */ BOOL statsWriteNeeded;
  /* 0xc402 */ BOOL statsValidatedWithDDL;
  /* 0xc403 */ BOOL statsFetched;
  /* 0xc404 */ BOOL disableUpload;
}; /* size: 0xc405 */

class phys_static_array<phys_vec3,6144>::iterator
{
  /* 0x0000 */ class phys_vec3* m_ptr;
}; /* size: 0x0004 */

class phys_static_array<int,512>
{
  /* 0x0000 */ char m_buffer[2048];
  /* 0x0800 */ int* const m_slot_array;
  /* 0x0804 */ int m_alloc_count;
}; /* size: 0x0810 */

struct ai_gjk_slide_move_input_t
{
  /* 0x0000 */ long Padding_905[11];
  /* 0x002c */ struct actor_physics_t* m_pPhys;
}; /* size: 0x0030 */

struct RedBlackTreeNode
{
  /* 0x0000 */ unsigned __int64 key;
  /* 0x0008 */ unsigned int color;
  /* 0x000c */ struct RedBlackTreeNode* parent;
  /* 0x0010 */ struct RedBlackTreeNode* child[2];
}; /* size: 0x0018 */

class phys_link_list_base<pulse_sum_wheel>
{
  /* 0x0000 */ class pulse_sum_wheel* m_next_link;
}; /* size: 0x0004 */

struct XAUDIO2_VOICE_SENDS
{
  /* 0x0000 */ unsigned int SendCount;
  /* 0x0004 */ struct XAUDIO2_SEND_DESCRIPTOR* pSends;
}; /* size: 0x0008 */

struct LeagueTeamSubdivisionInfo
{
  /* 0x0000 */ unsigned __int64 teamID;
  /* 0x0008 */ class bdLeagueSubdivisionResult subdivisionInfo[8];
  /* 0x0348 */ BOOL isSolo;
  /* 0x0349 */ char Padding_906[3];
  /* 0x034c */ int lastUpdated;
}; /* size: 0x0350 */

struct XDoll_ConstraintInfo
{
  /* 0x0000 */ int type;
  /* 0x0004 */ int timer;
  union
  {
    /* 0x0008 */ class rigid_body_constraint* constraint;
    /* 0x0008 */ class rigid_body_constraint_ragdoll* ragdoll_constraint;
    /* 0x0008 */ class rigid_body_constraint_point* point_constraint;
    /* 0x0008 */ class rigid_body_constraint_hinge* hinge_constraint;
    /* 0x0008 */ class rigid_body_constraint_angular_actuator* actuator_constraint;
  }; /* size: 0x0004 */
}; /* size: 0x000c */

struct fileShareSearchInfo_t
{
  /* 0x0000 */ class bdTag* tags;
  /* 0x0004 */ int numTags;
  /* 0x0008 */ enum fileShareLocation location;
  /* 0x000c */ int startIndex;
  /* 0x0010 */ int maxFileIDs;
  /* 0x0014 */ class bdFileID* outFileIDs;
  /* 0x0018 */ int* outFileCount;
  /* 0x001c */ class bdVoteRankStatsInfo* outRatings;
  /* 0x0020 */ int* outRatingCount;
  /* 0x0024 */ int* outTotalFileCount;
  /* 0x0028 */ void* successCallback /* function */;
  /* 0x002c */ void* failureCallback /* function */;
}; /* size: 0x0030 */

struct materialCommands_t
{
  /* 0x0000 */ struct GfxVertex verts[2];
  /* 0x0040 */ unsigned short indices[2];
  /* 0x0044 */ enum MaterialVertexDeclType vertDeclType;
  /* 0x0048 */ unsigned int vertexSize;
  /* 0x004c */ int indexCount;
  /* 0x0050 */ int vertexCount;
  /* 0x0054 */ int firstVertex;
  /* 0x0058 */ int lastVertex;
  /* 0x005c */ BOOL finishedFilling;
  /* 0x005d */ char Padding_907[3];
  /* 0x0060 */ enum TessPrimType primType;
}; /* size: 0x0064 */

struct classSets_t
{
  /* 0x0000 */ unsigned char classSetsBuffer[14336];
  /* 0x3800 */ BOOL classSetsFetched;
  /* 0x3801 */ BOOL classSetsWriteNeeded;
}; /* size: 0x3802 */

struct fileshareListingInfo_t
{
  /* 0x0000 */ unsigned __int64 xuids[100];
  /* 0x0320 */ int numXuids;
  /* 0x0324 */ int category;
  /* 0x0328 */ unsigned short offset;
  /* 0x032a */ char Padding_908[2];
  /* 0x032c */ class bdFileMetaData* descriptors;
  /* 0x0330 */ int* numDescriptors;
  /* 0x0334 */ int* totalDescriptors;
  /* 0x0338 */ int maxDescriptors;
  /* 0x033c */ BOOL isUserFile;
  /* 0x033d */ char Padding_909[3];
  /* 0x0340 */ const char* fileName;
  /* 0x0344 */ void* successCallback /* function */;
  /* 0x0348 */ void* failureCallback /* function */;
  /* 0x034c */ long __PADDING__[1];
}; /* size: 0x0350 */

struct leaves_t
{
  /* 0x0000 */ int count;
  /* 0x0004 */ int max_count;
  /* 0x0008 */ int* list;
}; /* size: 0x000c */

struct $_TypeDescriptor$_extraBytes_41
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[41];
}; /* size: 0x0031 */

struct playerNetworkData
{
  /* 0x0000 */ struct persistentStats playerStats;
  /* 0xc405 */ struct persistentStats playerStatsBackup;
  /* 0x1880a */ struct persistentStats stableStatsBuffer;
  /* 0x24c0f */ struct classSets_t classSets;
  /* 0x28411 */ BOOL fileShareFetched;
  /* 0x28412 */ char Padding_910[2];
  /* 0x28414 */ struct playerFileOperations* fileOps;
  /* 0x28418 */ unsigned char DWEmailAddress[200];
}; /* size: 0x284e0 */

struct DIDEVCAPS
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long dwDevType;
  /* 0x000c */ unsigned long dwAxes;
  /* 0x0010 */ unsigned long dwButtons;
  /* 0x0014 */ unsigned long dwPOVs;
  /* 0x0018 */ unsigned long dwFFSamplePeriod;
  /* 0x001c */ unsigned long dwFFMinTimeResolution;
  /* 0x0020 */ unsigned long dwFirmwareRevision;
  /* 0x0024 */ unsigned long dwHardwareRevision;
  /* 0x0028 */ unsigned long dwFFDriverVersion;
}; /* size: 0x002c */

struct phys_convex_hull::ch_triangle
{
  /* 0x0000 */ class phys_vec3 m_normal;
  /* 0x0010 */ class phys_vec3* m_verts[3];
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

typedef struct _XINPUT_STATE
{
  /* 0x0000 */ unsigned long dwPacketNumber;
  /* 0x0004 */ struct _XINPUT_GAMEPAD Gamepad;
} XINPUT_STATE, *PXINPUT_STATE; /* size: 0x0010 */

struct $_TypeDescriptor$_extraBytes_35
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[35];
}; /* size: 0x002b */

class phys_free_list<rigid_body_constraint_contact>::T_internal
{
  /* 0x0000 */ long Padding_911[2];
  /* 0x0008 */ class rigid_body_constraint_contact m_data;
  /* 0x0034 */ int m_ptr_list_index;
}; /* size: 0x0038 */

typedef struct _LUID_AND_ATTRIBUTES
{
  /* 0x0000 */ struct _LUID Luid;
  /* 0x0008 */ unsigned long Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES; /* size: 0x000c */

typedef struct _TOKEN_PRIVILEGES
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ struct _LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES; /* size: 0x0010 */

struct ConversionArguments
{
  /* 0x0000 */ int argCount;
  /* 0x0004 */ const char* args[9];
}; /* size: 0x0028 */

struct SndStartAliasInfo
{
  /* 0x0000 */ const struct SndAlias* alias;
  /* 0x0004 */ union SndEntHandle sndEnt;
  /* 0x0008 */ union vec3_t org;
  /* 0x0014 */ union vec3_t dir;
  /* 0x0020 */ float volModStart;
  /* 0x0024 */ int timeshift;
  /* 0x0028 */ float fadetime;
  /* 0x002c */ int startDelay;
  /* 0x0030 */ struct SndOcclusionStartCache* ocache;
  /* 0x0034 */ struct SndPlayback* playback;
  /* 0x0038 */ int playbackId;
  /* 0x003c */ int secondaryId;
  /* 0x0040 */ BOOL startPaused;
  /* 0x0041 */ BOOL setScriptValues;
  /* 0x0042 */ char Padding_912[2];
  /* 0x0044 */ float scriptPitch;
  /* 0x0048 */ float scriptPitchRate;
  /* 0x004c */ float scriptAttenuation;
  /* 0x0050 */ float scriptAttenuationRate;
}; /* size: 0x0054 */

class phys_link_list_base<pulse_sum_normal>
{
  /* 0x0000 */ class pulse_sum_normal* m_next_link;
}; /* size: 0x0004 */

class fileShareUploadInterceptor
{
  /* 0x0000 */ long Padding_913;
  /* 0x0004 */ struct dwFileShareWriteFileTask* task;
  /* 0x0008 */ void* callback /* function */;
}; /* size: 0x000c */

struct tagWNDCLASSA
{
  /* 0x0000 */ unsigned int style;
  /* 0x0004 */ void* lpfnWndProc /* function */;
  /* 0x0008 */ int cbClsExtra;
  /* 0x000c */ int cbWndExtra;
  /* 0x0010 */ struct HINSTANCE__* hInstance;
  /* 0x0014 */ struct HICON__* hIcon;
  /* 0x0018 */ struct HICON__* hCursor;
  /* 0x001c */ struct HBRUSH__* hbrBackground;
  /* 0x0020 */ const char* lpszMenuName;
  /* 0x0024 */ const char* lpszClassName;
}; /* size: 0x0028 */

struct LeagueFriendInfo
{
  /* 0x0000 */ unsigned __int64 xuid;
  /* 0x0008 */ char gamertag[32];
}; /* size: 0x0028 */

struct sockaddr_in
{
  /* 0x0000 */ short sin_family;
  /* 0x0002 */ unsigned short sin_port;
  /* 0x0004 */ struct in_addr sin_addr;
  /* 0x0008 */ char sin_zero[8];
}; /* size: 0x0010 */

struct GSClientApprove_t
{
  /* 0x0000 */ class CSteamID m_SteamID;
}; /* size: 0x0008 */

struct tagMSG
{
  /* 0x0000 */ struct HWND__* hwnd;
  /* 0x0004 */ unsigned int message;
  /* 0x0008 */ unsigned int wParam;
  /* 0x000c */ long lParam;
  /* 0x0010 */ unsigned long time;
  /* 0x0014 */ struct tagPOINT pt;
}; /* size: 0x001c */

struct vehicle_avoidnode_t
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ float radius;
  /* 0x0010 */ float height;
}; /* size: 0x0014 */

struct $_TypeDescriptor$_extraBytes_69
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[69];
}; /* size: 0x004d */

struct SentientGlobals
{
  union
  {
    /* 0x0000 */ const int PLAYER_TRAIL_SAMPLES;
    /* 0x0000 */ int lastTime;
  }; /* size: 0x0004 */
  /* 0x0004 */ int lastSample;
  /* 0x0008 */ union vec3_t playerTrail[2];
  /* 0x0020 */ int sampleTime[2];
}; /* size: 0x0028 */

typedef struct _EXCEPTION_POINTERS
{
  /* 0x0000 */ struct _EXCEPTION_RECORD* ExceptionRecord;
  /* 0x0004 */ struct _CONTEXT* ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS; /* size: 0x0008 */

struct SteamServersDisconnected_t
{
  /* 0x0000 */ enum EResult m_eResult;
}; /* size: 0x0004 */

struct GSClientKick_t
{
  /* 0x0000 */ class CSteamID m_SteamID;
  /* 0x0008 */ enum EDenyReason m_eDenyReason;
}; /* size: 0x000c */

class CCallback<LiveSteamServer,SteamServersConnected_t,1>
{
  /* 0x0000 */ long Padding_914[3];
  /* 0x000c */ class LiveSteamServer* m_pObj;
  /* 0x0010 */ void* m_Func /* function */;
}; /* size: 0x0014 */

class CCallback<LiveSteamServer,GSPolicyResponse_t,1>
{
  /* 0x0000 */ long Padding_915[3];
  /* 0x000c */ class LiveSteamServer* m_pObj;
  /* 0x0010 */ void* m_Func /* function */;
}; /* size: 0x0014 */

class CCallback<LiveSteamServer,GSClientDeny_t,1>
{
  /* 0x0000 */ long Padding_916[3];
  /* 0x000c */ class LiveSteamServer* m_pObj;
  /* 0x0010 */ void* m_Func /* function */;
}; /* size: 0x0014 */

class CCallback<LiveSteamServer,GSClientKick_t,1>
{
  /* 0x0000 */ long Padding_917[3];
  /* 0x000c */ class LiveSteamServer* m_pObj;
  /* 0x0010 */ void* m_Func /* function */;
}; /* size: 0x0014 */

class LiveSteamServer
{
  /* 0x0000 */ unsigned int currentMapDlcAppID;
  /* 0x0004 */ unsigned int serverIP;
  /* 0x0008 */ unsigned int lastRunChecksTime;
  /* 0x000c */ enum SteamServerState state;
  /* 0x0010 */ class CCallback<LiveSteamServer,SteamServersConnected_t,1> m_CallbackSteamServersConnected;
  /* 0x0024 */ class CCallback<LiveSteamServer,SteamServerConnectFailure_t,1> m_CallbackSteamServerConnectFailure;
  /* 0x0038 */ class CCallback<LiveSteamServer,SteamServersDisconnected_t,1> m_CallbackSteamServersDisconnected;
  /* 0x004c */ class CCallback<LiveSteamServer,GSPolicyResponse_t,1> m_CallbackPolicyResponse;
  /* 0x0060 */ class CCallback<LiveSteamServer,GSClientApprove_t,1> m_CallbackGSClientApprove;
  /* 0x0074 */ class CCallback<LiveSteamServer,GSClientDeny_t,1> m_CallbackGSClientDeny;
  /* 0x0088 */ class CCallback<LiveSteamServer,GSClientKick_t,1> m_CallbackGSClientKick;
}; /* size: 0x009c */

struct entity_bpi_header
{
  /* 0x0000 */ class phys_mat44* m_mat;
  /* 0x0004 */ class phys_auto_activate_callback* m_aac;
}; /* size: 0x0008 */

class phys_link_list_base<pulse_sum_contact>
{
  /* 0x0000 */ class pulse_sum_contact* m_next_link;
}; /* size: 0x0004 */

struct DXGI_ADAPTER_DESC
{
  /* 0x0000 */ wchar_t Description[128];
  /* 0x0100 */ unsigned int VendorId;
  /* 0x0104 */ unsigned int DeviceId;
  /* 0x0108 */ unsigned int SubSysId;
  /* 0x010c */ unsigned int Revision;
  /* 0x0110 */ unsigned long DedicatedVideoMemory;
  /* 0x0114 */ unsigned long DedicatedSystemMemory;
  /* 0x0118 */ unsigned long SharedSystemMemory;
  /* 0x011c */ struct _LUID AdapterLuid;
}; /* size: 0x0124 */

struct std::pair<pathsort_t *,pathsort_t *>
{
}; /* size: 0x0008 */

struct SteamServersConnected_t
{
}; /* size: 0x0001 */

struct SndCsvParseEntry
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int offset;
  /* 0x0008 */ BOOL required;
  /* 0x0009 */ char Padding_918[3];
  /* 0x000c */ enum SndCsvParseEntryType type;
  /* 0x0010 */ float minimum;
  /* 0x0014 */ float maximum;
  /* 0x0018 */ unsigned int length;
  /* 0x001c */ const char** enum_ids;
}; /* size: 0x0020 */

typedef struct _KDHELP64
{
  /* 0x0000 */ unsigned __int64 Thread;
  /* 0x0008 */ unsigned long ThCallbackStack;
  /* 0x000c */ unsigned long ThCallbackBStore;
  /* 0x0010 */ unsigned long NextCallback;
  /* 0x0014 */ unsigned long FramePointer;
  /* 0x0018 */ unsigned __int64 KiCallUserMode;
  /* 0x0020 */ unsigned __int64 KeUserCallbackDispatcher;
  /* 0x0028 */ unsigned __int64 SystemRangeStart;
  /* 0x0030 */ unsigned __int64 KiUserExceptionDispatcher;
  /* 0x0038 */ unsigned __int64 StackBase;
  /* 0x0040 */ unsigned __int64 StackLimit;
  /* 0x0048 */ unsigned __int64 Reserved[5];
} KDHELP64, *PKDHELP64; /* size: 0x0070 */

class bdAuthUtility
{
}; /* size: 0x0001 */

struct debug_brush_t
{
  /* 0x0000 */ const struct cbrush_t* brush;
  /* 0x0004 */ unsigned int first_vertex_index;
  /* 0x0008 */ unsigned int first_winding_index;
  /* 0x000c */ unsigned short num_indices;
  /* 0x000e */ unsigned short num_windings;
}; /* size: 0x0010 */

typedef struct _STARTUPINFOA
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ char* lpReserved;
  /* 0x0008 */ char* lpDesktop;
  /* 0x000c */ char* lpTitle;
  /* 0x0010 */ unsigned long dwX;
  /* 0x0014 */ unsigned long dwY;
  /* 0x0018 */ unsigned long dwXSize;
  /* 0x001c */ unsigned long dwYSize;
  /* 0x0020 */ unsigned long dwXCountChars;
  /* 0x0024 */ unsigned long dwYCountChars;
  /* 0x0028 */ unsigned long dwFillAttribute;
  /* 0x002c */ unsigned long dwFlags;
  /* 0x0030 */ unsigned short wShowWindow;
  /* 0x0032 */ unsigned short cbReserved2;
  /* 0x0034 */ unsigned char* lpReserved2;
  /* 0x0038 */ void* hStdInput;
  /* 0x003c */ void* hStdOutput;
  /* 0x0040 */ void* hStdError;
} STARTUPINFOA, *PSTARTUPINFOA; /* size: 0x0044 */

class phys_link_list_base<pulse_sum_angular>
{
  /* 0x0000 */ class pulse_sum_angular* m_next_link;
}; /* size: 0x0004 */

struct FLAC__StreamDecoderProtected;

struct IKSystem
{
  /* 0x0000 */ BOOL bInitialized;
  /* 0x0001 */ char Padding_919[3];
  /* 0x0004 */ char* boneStrings[24];
  /* 0x0064 */ enum IKBoneNames ikBoneParents[24];
  /* 0x00c4 */ struct IKJointBones joints[4];
  /* 0x0114 */ int systemFrameNumber;
  /* 0x0118 */ unsigned short* ikImportBoneStringVars;
  /* 0x011c */ unsigned short* ikImportMiscBoneStringVars;
  union
  {
    /* 0x0120 */ unsigned char* localClipMap;
    /* 0x0120 */ unsigned char* clipMap;
  }; /* size: 0x0004 */
  /* 0x0124 */ const struct dvar_t* dvars[33];
  /* 0x01a8 */ BOOL inViewer;
  /* 0x01a9 */ char Padding_920[3];
  /* 0x01ac */ union vec3_t leftHandOffset;
  /* 0x01b8 */ union vec3_t leftHandRotation;
  /* 0x01c4 */ int leftHandEntnum;
  /* 0x01c8 */ int leftHandSwitchTime;
  /* 0x01cc */ int numActorIKEnabled;
  /* 0x01d0 */ int numActorIKEnabledFrameNumber;
  /* 0x01d4 */ union vec3_t leftHandIdlePos;
  /* 0x01e0 */ union vec3_t leftHandOffsetPos;
  /* 0x01ec */ union vec3_t leftHandOffsetRot;
  /* 0x01f8 */ union vec3_t leftHandPronePos;
  /* 0x0204 */ union vec3_t leftHandProneRot;
}; /* size: 0x0210 */

struct sd_source
{
  /* 0x0000 */ struct sd_loaded loaded;
  /* 0x0018 */ struct sd_stream* stream;
  /* 0x001c */ unsigned int assetId;
  /* 0x0020 */ int primed;
  /* 0x0024 */ int looping;
  /* 0x0028 */ int error;
  /* 0x002c */ int eos;
}; /* size: 0x0030 */

class cCurveManager
{
  union
  {
    /* 0x0000 */ class cCurve mCurves[4];
    /* 0x0000 */ int levelNotifyFunc;
  }; /* size: 0xa9e0 */
}; /* size: 0x0001 */

struct png_color_16_struct
{
  /* 0x0000 */ unsigned char index;
  /* 0x0001 */ char Padding_921;
  /* 0x0002 */ unsigned short red;
  /* 0x0004 */ unsigned short green;
  /* 0x0006 */ unsigned short blue;
  /* 0x0008 */ unsigned short gray;
}; /* size: 0x000a */

class gameserveritem_t
{
  /* 0x0000 */ class servernetadr_t m_NetAdr;
  /* 0x0008 */ int m_nPing;
  /* 0x000c */ BOOL m_bHadSuccessfulResponse;
  /* 0x000d */ BOOL m_bDoNotRefresh;
  /* 0x000e */ char m_szGameDir[32];
  /* 0x002e */ char m_szMap[32];
  /* 0x004e */ char m_szGameDescription[64];
  /* 0x008e */ char Padding_922[2];
  /* 0x0090 */ unsigned int m_nAppID;
  /* 0x0094 */ int m_nPlayers;
  /* 0x0098 */ int m_nMaxPlayers;
  /* 0x009c */ int m_nBotPlayers;
  /* 0x00a0 */ BOOL m_bPassword;
  /* 0x00a1 */ BOOL m_bSecure;
  /* 0x00a2 */ char Padding_923[2];
  /* 0x00a4 */ unsigned int m_ulTimeLastPlayed;
  /* 0x00a8 */ int m_nServerVersion;
  /* 0x00ac */ char m_szServerName[64];
  /* 0x00ec */ char m_szGameTags[128];
  /* 0x016c */ class CSteamID m_steamID;
}; /* size: 0x0174 */

struct IKJointVars
{
  /* 0x0000 */ BOOL bValid;
  /* 0x0001 */ char Padding_924[3];
  /* 0x0004 */ float UpperLength;
  /* 0x0008 */ float UpperIKc;
  /* 0x000c */ float UpperIKInvc;
  /* 0x0010 */ float LowerLength;
  /* 0x0014 */ float LowerIKc;
  /* 0x0018 */ float LowerIKInvc;
}; /* size: 0x001c */

class ISteamUser
{
}; /* size: 0x0004 */

struct SndMusicState
{
  /* 0x0000 */ unsigned int stateName;
  /* 0x0004 */ unsigned int segmentCount;
  /* 0x0008 */ struct SndMusicSegment* segments;
}; /* size: 0x000c */

class CCallResult<LiveSteamClient,EncryptedAppTicketResponse_t>
{
  /* 0x0000 */ long Padding_925[4];
  /* 0x0010 */ unsigned __int64 m_hAPICall;
  /* 0x0018 */ class LiveSteamClient* m_pObj;
  /* 0x001c */ void* m_Func /* function */;
}; /* size: 0x0020 */

class LiveSteamClient
{
  /* 0x0000 */ enum EResult resultOnRequestEncryptedAppTicket;
  /* 0x0004 */ int ticketTime;
  /* 0x0008 */ int numFriendsNotifications;
  /* 0x000c */ long Padding_926;
  /* 0x0010 */ class CCallResult<LiveSteamClient,EncryptedAppTicketResponse_t> m_SteamCallResultEncryptedAppTicket;
  /* 0x0030 */ class CCallback<LiveSteamClient,GameOverlayActivated_t,0> m_CallbackOverlayActivated;
  /* 0x0044 */ class CCallback<LiveSteamClient,DlcInstalled_t,0> m_CallbackDLCInstalled;
  /* 0x0058 */ class CCallback<LiveSteamClient,PersonaStateChange_t,0> m_CallbackSteamFreindsStatusChange;
  /* 0x006c */ class CCallback<LiveSteamClient,GameRichPresenceJoinRequested_t,0> m_CallbackRichPresenceJoinRequested;
}; /* size: 0x0080 */

class phys_static_array<flameGeneric_s *,1000>
{
  /* 0x0000 */ char m_buffer[4000];
  /* 0x0fa0 */ struct flameGeneric_s** const m_slot_array;
  /* 0x0fa4 */ int m_alloc_count;
}; /* size: 0x0fb0 */

struct TreeNameMap
{
  /* 0x0000 */ int animIndex;
  /* 0x0004 */ char strName[80];
}; /* size: 0x0054 */

struct EncryptedAppTicketResponse_t
{
  /* 0x0000 */ enum EResult m_eResult;
}; /* size: 0x0004 */

struct GameOverlayActivated_t
{
  /* 0x0000 */ unsigned char m_bActive;
}; /* size: 0x0001 */

struct MappingChannel
{
  /* 0x0000 */ unsigned char magnitude;
  /* 0x0001 */ unsigned char angle;
  /* 0x0002 */ unsigned char mux;
}; /* size: 0x0003 */

struct DlcInstalled_t
{
  /* 0x0000 */ unsigned int m_nAppID;
}; /* size: 0x0004 */

struct Point
{
  /* 0x0000 */ unsigned short x;
  /* 0x0002 */ unsigned short y;
}; /* size: 0x0004 */

struct GameRichPresenceJoinRequested_t
{
  /* 0x0000 */ class CSteamID m_steamIDFriend;
  /* 0x0008 */ char m_rgchConnect[256];
}; /* size: 0x0108 */

struct sd_decoder_pc_flac;

struct PIAState
{
  /* 0x0000 */ int interval;
  /* 0x0004 */ int intervalRemaining;
  /* 0x0008 */ unsigned char stat;
  /* 0x0009 */ unsigned char timer;
  /* 0x000a */ unsigned char SWCHA;
  /* 0x000b */ unsigned char SWCHB;
  /* 0x000c */ unsigned char RAM[128];
}; /* size: 0x008c */

struct $_TypeDescriptor$_extraBytes_58
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[58];
}; /* size: 0x0042 */

struct stb_vorbis_info
{
  /* 0x0000 */ unsigned int sample_rate;
  /* 0x0004 */ int channels;
  /* 0x0008 */ unsigned int setup_memory_required;
  /* 0x000c */ unsigned int setup_temp_memory_required;
  /* 0x0010 */ unsigned int temp_memory_required;
  /* 0x0014 */ int max_frame_size;
}; /* size: 0x0018 */

struct MOSState
{
  /* 0x0000 */ unsigned short PC;
  /* 0x0002 */ unsigned char SP;
  /* 0x0003 */ unsigned char X;
  /* 0x0004 */ unsigned char Y;
  /* 0x0005 */ unsigned char A;
  /* 0x0006 */ unsigned char SR;
  /* 0x0007 */ char __PADDING__[1];
}; /* size: 0x0008 */

class CCallback<CSteamAchievements,UserAchievementStored_t,0>
{
  /* 0x0000 */ long Padding_927[3];
  /* 0x000c */ class CSteamAchievements* m_pObj;
  /* 0x0010 */ void* m_Func /* function */;
}; /* size: 0x0014 */

class CSteamAchievements
{
  /* 0x0000 */ BOOL m_needStatsStored;
  /* 0x0001 */ char Padding_928[7];
  /* 0x0008 */ unsigned __int64 m_iAppID;
  /* 0x0010 */ struct Achievement_t* m_pAchievements;
  /* 0x0014 */ int m_iNumAchievements;
  /* 0x0018 */ BOOL m_bInitialized;
  /* 0x0019 */ char Padding_929[3];
  /* 0x001c */ class CCallback<CSteamAchievements,UserStatsReceived_t,0> m_CallbackUserStatsReceived;
  /* 0x0030 */ class CCallback<CSteamAchievements,UserStatsStored_t,0> m_CallbackUserStatsStored;
  /* 0x0044 */ class CCallback<CSteamAchievements,UserAchievementStored_t,0> m_CallbackAchievementStored;
}; /* size: 0x0058 */

struct std::pair<flameGeneric_s * *,flameGeneric_s * *>
{
}; /* size: 0x0008 */

struct TIAState
{
  /* 0x0000 */ void* pixels;
  /* 0x0004 */ int pitch;
  /* 0x0008 */ int height;
  /* 0x000c */ int linePosition;
  /* 0x0010 */ int lineCount;
  /* 0x0014 */ int state;
  /* 0x0018 */ BOOL pendingVSync;
  /* 0x0019 */ char Padding_930[3];
  /* 0x001c */ int posP0;
  /* 0x0020 */ int posP1;
  /* 0x0024 */ int posM0;
  /* 0x0028 */ int posM1;
  /* 0x002c */ int posBL;
  /* 0x0030 */ int HMP0;
  /* 0x0034 */ int HMP1;
  /* 0x0038 */ int HMM0;
  /* 0x003c */ int HMM1;
  /* 0x0040 */ int HMBL;
  /* 0x0044 */ unsigned char GRP0;
  /* 0x0045 */ unsigned char GRP0D;
  /* 0x0046 */ unsigned char GRP1;
  /* 0x0047 */ unsigned char GRP1D;
  /* 0x0048 */ unsigned char ENABL;
  /* 0x0049 */ unsigned char ENABLD;
  /* 0x004a */ unsigned char GRPCache[9][4];
  /* 0x006e */ unsigned char GRPCached[4];
  /* 0x0072 */ unsigned char CTRLPF;
  /* 0x0073 */ unsigned char PF0;
  /* 0x0074 */ unsigned char PF1;
  /* 0x0075 */ unsigned char PF2;
  /* 0x0076 */ unsigned char playFieldCache[40];
  /* 0x009e */ BOOL playFieldDirty;
  /* 0x009f */ unsigned char NUSIZ0;
  /* 0x00a0 */ unsigned char REFP0;
  /* 0x00a1 */ unsigned char NUSIZ1;
  /* 0x00a2 */ unsigned char REFP1;
  /* 0x00a3 */ unsigned char xCache[160][2];
  /* 0x01e3 */ BOOL xCacheDirty[2];
  /* 0x01e5 */ char Padding_931[3];
  /* 0x01e8 */ struct AudioState audio[2];
  /* 0x0218 */ int audioCycles;
  /* 0x021c */ int audioResampleCount;
  /* 0x0220 */ int audioReadSample;
  /* 0x0224 */ int audioWriteSample;
  /* 0x0228 */ unsigned char audioBuffer[4096];
  /* 0x1228 */ struct SndDspBiquadState outputFilter;
  /* 0x1248 */ float dcBlockX;
  /* 0x124c */ float dcBlockY;
  /* 0x1250 */ unsigned char reg[64];
}; /* size: 0x1290 */

struct Achievement_t
{
  /* 0x0000 */ int m_eAchievementID;
  /* 0x0004 */ const char* m_pchAchievementID;
  /* 0x0008 */ char m_rgchName[128];
  /* 0x0088 */ char m_rgchDescription[256];
  /* 0x0188 */ BOOL m_bAchieved;
  /* 0x0189 */ char Padding_932[3];
  /* 0x018c */ int m_iIconImage;
}; /* size: 0x0190 */

struct sd_mix_bus_param
{
  /* 0x0000 */ float reverbG;
  /* 0x0004 */ float fxG;
  /* 0x0008 */ float voiceG;
  /* 0x000c */ float pfutzG;
  /* 0x0010 */ float hdrfxG;
  /* 0x0014 */ float uiG;
  /* 0x0018 */ float musicG;
  /* 0x001c */ float movieG;
  /* 0x0020 */ float vcsG;
  /* 0x0024 */ float referenceG;
  /* 0x0028 */ int reverbE;
  /* 0x002c */ int fxE;
  /* 0x0030 */ int voiceE;
  /* 0x0034 */ int pfutzE;
  /* 0x0038 */ int hdrfxE;
  /* 0x003c */ int uiE;
  /* 0x0040 */ int musicE;
  /* 0x0044 */ int movieE;
  /* 0x0048 */ int hdrfxCompE;
  /* 0x004c */ int voiceEqE;
  /* 0x0050 */ int voiceCompE;
}; /* size: 0x0054 */

struct IDirectSoundBuffer
{
}; /* size: 0x0004 */

class phys_free_list<RagdollBody>::iterator
{
  /* 0x0000 */ class phys_free_list<RagdollBody>::T_internal_base* m_ptr;
}; /* size: 0x0004 */

struct UserStatsStored_t
{
  /* 0x0000 */ unsigned __int64 m_nGameID;
  /* 0x0008 */ enum EResult m_eResult;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

struct Joint
{
  /* 0x0000 */ int joint;
  /* 0x0004 */ int joint2;
}; /* size: 0x0008 */

struct RagdollBody
{
  /* 0x0000 */ int references;
  /* 0x0004 */ int ragdollDef;
  /* 0x0008 */ int dobj;
  /* 0x000c */ struct DObj* obj;
  /* 0x0010 */ const struct cpose_t* pose;
  /* 0x0014 */ union vec3_t poseOffset;
  /* 0x0020 */ enum LocalClientNum_t localClientNum;
  /* 0x0024 */ enum RagdollBodyState state;
  /* 0x0028 */ int stateMsec;
  /* 0x002c */ int stateFrames;
  /* 0x0030 */ int velCaptureMsec;
  /* 0x0034 */ int stableTime;
  /* 0x0038 */ int numBones;
  /* 0x003c */ struct Bone bones[14];
  /* 0x01c4 */ int numLerpBones;
  /* 0x01c8 */ struct LerpBone lerpBones[9];
  /* 0x0210 */ int numJoints;
  /* 0x0214 */ struct Joint joints[28];
  /* 0x02f4 */ int curOrientationBuffer;
  /* 0x02f8 */ struct BoneOrientation boneOrientations[23][2];
  /* 0x08b8 */ struct BoneOrientation lerpBoneOffsets[9];
  /* 0x09d8 */ int flags;
  /* 0x09dc */ int storedLaunchCount;
  /* 0x09e0 */ enum hitLocation_t storedLaunchHitLoc[2];
  /* 0x09e8 */ union vec3_t storedLaunchForce[2];
  /* 0x0a00 */ enum hitLocation_t storedAttachHitLoc;
  /* 0x0a04 */ int storedAttachEnt;
  /* 0x0a08 */ int storedPhysObjId;
  /* 0x0a0c */ class rigid_body_constraint_point* debug_hang_point;
  /* 0x0a10 */ class rigid_body_constraint_point* hang_point;
  /* 0x0a14 */ int start_hang_time;
  /* 0x0a18 */ class broad_phase_group* m_bpg;
  /* 0x0a1c */ class broad_phase_collision_pair* m_list_bpcp;
  /* 0x0a20 */ int rope_id;
  /* 0x0a24 */ void* rbc_dist;
  /* 0x0a28 */ BOOL gravity_override;
  /* 0x0a29 */ char Padding_933[3];
  /* 0x0a2c */ int gravity;
  /* 0x0a30 */ union vec3_t mover_xform_axis[3][14];
  /* 0x0c28 */ union vec3_t mover_xform_origin[14];
  /* 0x0cd0 */ float waterHeight;
}; /* size: 0x0cd4 */

class phys_free_list<RagdollBody>::T_internal
{
  /* 0x0000 */ long Padding_934[2];
  /* 0x0008 */ struct RagdollBody m_data;
  /* 0x0cdc */ int m_ptr_list_index;
}; /* size: 0x0ce0 */

struct DynEntSortStruct
{
  /* 0x0000 */ float distSq;
  /* 0x0004 */ unsigned short id;
  /* 0x0006 */ char __PADDING__[2];
}; /* size: 0x0008 */

struct UserAchievementStored_t
{
  /* 0x0000 */ unsigned __int64 m_nGameID;
  /* 0x0008 */ BOOL m_bGroupAchievement;
  /* 0x0009 */ char m_rgchAchievementName[128];
  /* 0x0089 */ char Padding_935[3];
  /* 0x008c */ unsigned int m_nCurProgress;
  /* 0x0090 */ unsigned int m_nMaxProgress;
  /* 0x0094 */ long __PADDING__[1];
}; /* size: 0x0098 */

struct UserStatsReceived_t
{
  /* 0x0000 */ unsigned __int64 m_nGameID;
  /* 0x0008 */ enum EResult m_eResult;
  /* 0x000c */ class CSteamID m_steamIDUser;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

struct fshCacheFileDetails_t
{
  /* 0x0000 */ class bdFileMetaData descriptor;
  /* 0x0a28 */ enum fileShareLocation location;
  /* 0x0a2c */ long __PADDING__[1];
}; /* size: 0x0a30 */

struct SteamParamStringArray_t
{
  /* 0x0000 */ const char** m_ppStrings;
  /* 0x0004 */ int m_nNumStrings;
}; /* size: 0x0008 */

struct ikLerpInfo_t
{
  /* 0x0000 */ int lastUpdateTime;
  /* 0x0004 */ float lerp;
  /* 0x0008 */ BOOL goalState;
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

struct IKState
{
  /* 0x0000 */ int inUse;
  /* 0x0004 */ int entityNum;
  /* 0x0008 */ int isServer;
  /* 0x000c */ enum LocalClientNum_t localClientIndex;
  union
  {
    /* 0x0010 */ unsigned char* model;
    /* 0x0010 */ unsigned char* localModel;
  }; /* size: 0x0004 */
  /* 0x0014 */ int isIKModel;
  union
  {
    /* 0x0018 */ struct IKSystem* localIkSystem;
    /* 0x0018 */ struct IKSystem* ikSystem;
  }; /* size: 0x0004 */
  /* 0x001c */ int timeMS;
  /* 0x0020 */ int frameUsed;
  /* 0x0024 */ unsigned char ikBoneToObjBone[24];
  /* 0x003c */ unsigned char objBoneToIKBone[160];
  /* 0x00dc */ int bJointVarsValid;
  /* 0x00e0 */ struct IKJointVars jointVars[4];
  /* 0x0150 */ float footHeightFromGround;
  /* 0x0154 */ int animatedIKBonesBits[1];
  /* 0x0158 */ int objBoneCalcBits[4];
  /* 0x0168 */ int modifiedIKBones;
  /* 0x016c */ long Padding_936;
  /* 0x0170 */ union vec4_t footMats[4][2];
  /* 0x01f0 */ union vec4_t handMats[4][2];
  /* 0x0270 */ union vec4_t leftHandFromRightHandMat[4];
  /* 0x02b0 */ union vec4_t entityXform[4];
  /* 0x02f0 */ union vec4_t entityLegsXform[4];
  /* 0x0330 */ union vec4_t* matArrayPreIK[4];
  /* 0x0334 */ union vec4_t* matArrayPostIK[4];
  /* 0x0338 */ union vec4_t* matArrayXforms[4];
  /* 0x033c */ union vec4_t* matArrayCache[4];
  /* 0x0340 */ union vec4_t* matArrayCachePre[4];
  /* 0x0344 */ int cacheActive;
  /* 0x0348 */ union vec3_t rootOffset;
  /* 0x0354 */ union vec4_t rootQuat;
  /* 0x0364 */ union vec3_t origin;
  /* 0x0370 */ union vec3_t angles;
  /* 0x037c */ float lastTerrainMappingFootOffsetZ[2];
  /* 0x0384 */ float lastTerrainMappingPelvisZ;
  /* 0x0388 */ union vec3_t lastTerrainMappingOrigin;
  /* 0x0394 */ float lastTerrainMappingTraceZ[2];
  /* 0x039c */ union vec2_t lastTerrainMappingTraceFootPos[2];
  /* 0x03ac */ float leftHandLerp;
  /* 0x03b0 */ float rightHandLerp;
  /* 0x03b4 */ int terrainDisableTime;
  /* 0x03b8 */ struct ikLerpInfo_t lerpInfo[25];
  /* 0x04e4 */ int lastFrameMS[25];
  /* 0x0548 */ BOOL bHasActiveLayers;
  /* 0x0549 */ char Padding_937[3];
  /* 0x054c */ int lastMovedTime;
  /* 0x0550 */ int lastNotMovedTime;
  /* 0x0554 */ int lastUpdateLayerLerpsTime;
  /* 0x0558 */ int statusFlags;
  /* 0x055c */ int lastUpdateStatusFlags;
  /* 0x0560 */ int lastIsIKEntityFrameNum;
  /* 0x0564 */ union vec3_t controllers[6];
  /* 0x05ac */ union vec3_t controller_origin_angles;
  /* 0x05b8 */ BOOL hasControllers;
  /* 0x05b9 */ char Padding_938[7];
  /* 0x05c0 */ union DvarValue dvarValues[33];
  /* 0x07d0 */ union vec3_t velocity;
  /* 0x07dc */ float gunnerCrouch;
  /* 0x07e0 */ struct IKCollisionCache collisionCache;
  /* 0x0ec0 */ union vec3_t leftHandIdlePos;
  /* 0x0ecc */ union vec3_t leftHandOffset;
  /* 0x0ed8 */ union vec3_t leftHandRotation;
  /* 0x0ee4 */ union vec3_t leftHandOffsetPrev;
  /* 0x0ef0 */ union vec3_t leftHandRotationPrev;
  /* 0x0efc */ int leftHandChangeTime;
  /* 0x0f00 */ float leftHandLastProximityLerp;
  /* 0x0f04 */ enum IKWeaponOffsetType weaponOffsetType;
  /* 0x0f08 */ enum IKWeaponSpecialNames weaponSpecialCurrent;
  /* 0x0f0c */ union vec3_t lastFootTraceNormals[2];
  /* 0x0f24 */ union vec3_t lastFootTraceGoalNormals[2];
  /* 0x0f3c */ float lastCollisionEntityZ;
  /* 0x0f40 */ int footTraceCollisionHint[2];
  /* 0x0f48 */ int actorLookAtIsEntity;
  /* 0x0f4c */ int actorLookAtIsAiming;
  /* 0x0f50 */ union vec3_t actorLookAtAngles;
  /* 0x0f5c */ union vec3_t actorLookAtAnglesDelayed;
  /* 0x0f68 */ float actorLookAtScale;
  /* 0x0f6c */ int actorLookAtLastUpdateTime;
  /* 0x0f70 */ BOOL bHasLegSolverLayer;
  /* 0x0f71 */ BOOL bHasArmSolverLayer;
  /* 0x0f72 */ char Padding_939[2];
  /* 0x0f74 */ float legSolverFrac;
  /* 0x0f78 */ float armSolverFrac;
  /* 0x0f7c */ enum IKWeaponClass weaponClass;
  /* 0x0f80 */ int headClipTraceIgnoreTime;
  /* 0x0f84 */ int nextUpdateDvarTime;
  /* 0x0f88 */ float maxProneLerp;
  /* 0x0f8c */ long __PADDING__[1];
}; /* size: 0x0f90 */

class ISteamGameServerStats;

class ISteamClient
{
}; /* size: 0x0004 */

struct sd_voice
{
  /* 0x0000 */ enum sd_voice_state state;
  /* 0x0004 */ int done;
  /* 0x0008 */ int hasData;
  /* 0x000c */ long Padding_940;
  /* 0x0010 */ __int64 position;
  /* 0x0018 */ float pitchFraction;
  /* 0x001c */ struct sd_source source;
  /* 0x004c */ struct sd_decoder* decoder;
  /* 0x0050 */ struct sd_decoder_output decoderOutput;
  /* 0x0064 */ struct SndDspSourceState dspState[2];
  /* 0x010c */ unsigned int channelCount;
  /* 0x0110 */ int shutdownDueToStarvation;
  /* 0x0114 */ unsigned int starvedThisFrame;
  /* 0x0118 */ float dryPanFilter[12];
  /* 0x0148 */ float wetPanFilter[12];
  /* 0x0178 */ struct sd_voice_param* previousParam;
  /* 0x017c */ char align[4];
}; /* size: 0x0180 */

struct SndRvParams
{
  /* 0x0000 */ float frameRate;
  /* 0x0004 */ float smoothing;
  /* 0x0008 */ float earlyTime;
  /* 0x000c */ float lateTime;
  /* 0x0010 */ float earlyGain;
  /* 0x0014 */ float lateGain;
  /* 0x0018 */ float lateGainProx[4];
  /* 0x0028 */ float returnGain;
  /* 0x002c */ float earlyLpf;
  /* 0x0030 */ float lateLpf;
  /* 0x0034 */ float inputLpf;
  /* 0x0038 */ float dampLpf;
  /* 0x003c */ float wallReflect[4];
  /* 0x004c */ float dryGain;
  /* 0x0050 */ float earlySize;
  /* 0x0054 */ float lateSize;
  /* 0x0058 */ float diffusion;
  /* 0x005c */ float angle;
  /* 0x0060 */ unsigned int delayMatrix;
  /* 0x0064 */ float returnHighpass;
  /* 0x0068 */ unsigned char padding[8];
}; /* size: 0x0070 */

struct SndRvState
{
  /* 0x0000 */ union __m128 earlyReflectionCoefs[4];
  /* 0x0040 */ unsigned int earlyReflectionDelays[4][4];
  /* 0x0080 */ union __m128 lateReflectionCoefs[4];
  /* 0x00c0 */ unsigned int lateReflectionDelays[4][4];
  /* 0x0100 */ union __m128 inputLpfState;
  /* 0x0110 */ union __m128 earlyLpfState;
  /* 0x0120 */ union __m128 lateLpfState;
  /* 0x0130 */ union __m128 dampLpfState;
  /* 0x0140 */ union __m128 returnHpfState1;
  /* 0x0150 */ union __m128 returnHpfState2;
  /* 0x0160 */ struct SndRvParams params;
  /* 0x01d0 */ unsigned int earlyReflectionDelayBase[4][4];
  /* 0x0210 */ unsigned int lateReflectionDelayBase[4][4];
  /* 0x0250 */ unsigned int delayIndex;
  /* 0x0254 */ unsigned int radverbTimeUsec;
  /* 0x0258 */ unsigned int spuCacheAccesses;
  /* 0x025c */ unsigned int spuCacheMisses;
}; /* size: 0x0260 */

struct SndDspDynamoState
{
  /* 0x0000 */ unsigned int offset;
  /* 0x0004 */ float yfilter;
  /* 0x0008 */ float gfilter;
  /* 0x000c */ float g;
  /* 0x0010 */ float dcx;
  /* 0x0014 */ float dcy;
  /* 0x0018 */ long Padding_941[26];
  /* 0x0080 */ float lookahead[512];
}; /* size: 0x0880 */

struct SndDspVoiceFilterState
{
  /* 0x0000 */ float f0;
  /* 0x0004 */ float q;
  /* 0x0008 */ float g;
  /* 0x000c */ float gain;
  /* 0x0010 */ float gfilter;
  /* 0x0014 */ float fadeTime;
  /* 0x0018 */ float f;
  /* 0x001c */ struct SndDspBiquadState filter;
}; /* size: 0x003c */

struct sd_mix_master_state
{
  /* 0x0000 */ unsigned int reverbOverwriteCheck;
  /* 0x0004 */ unsigned int masterTimeUsec;
  /* 0x0008 */ unsigned int masterTimeScale;
  /* 0x000c */ unsigned int masterTimePfutz;
  /* 0x0010 */ unsigned int masterTimeGfutz;
  /* 0x0014 */ unsigned int masterTimeVoice;
  /* 0x0018 */ unsigned int masterTimeDyn1;
  /* 0x001c */ unsigned int masterTimeEq;
  /* 0x0020 */ unsigned int masterTimeDyn2;
  /* 0x0024 */ unsigned int masterTimeMeter;
  /* 0x0028 */ unsigned int masterTimeRebuffer;
  /* 0x002c */ long Padding_942[21];
  /* 0x0080 */ struct SndDspDynamoState dyn1[6];
  /* 0x3380 */ struct SndDspDynamoState dyn2[6];
  /* 0x6680 */ struct SndDspBiquadState eqLow[6];
  /* 0x6740 */ struct SndDspBiquadState eqPeak1[6];
  /* 0x6800 */ struct SndDspBiquadState eqPeak2[6];
  /* 0x68c0 */ struct SndDspBiquadState eqHi[6];
  /* 0x6980 */ struct SndDspVoiceFilterState voiceEqFx[6];
  /* 0x6ae8 */ struct SndDspVoiceFilterState voiceEqHdrfx[6];
  /* 0x6c50 */ struct SndDspFutzState gfutzState[6];
  /* 0x6e30 */ struct SndDspFutzState pfutzState[6];
  /* 0x7010 */ long __PADDING__[28];
}; /* size: 0x7080 */

struct SndDspMasterEqParam
{
  /* 0x0000 */ int lowE;
  /* 0x0004 */ float lowG;
  /* 0x0008 */ float lowF;
  /* 0x000c */ float lowQ;
  /* 0x0010 */ int peak1E;
  /* 0x0014 */ float peak1G;
  /* 0x0018 */ float peak1F;
  /* 0x001c */ float peak1Q;
  /* 0x0020 */ int peak2E;
  /* 0x0024 */ float peak2G;
  /* 0x0028 */ float peak2F;
  /* 0x002c */ float peak2Q;
  /* 0x0030 */ int hiE;
  /* 0x0034 */ float hiG;
  /* 0x0038 */ float hiF;
  /* 0x003c */ float hiQ;
  /* 0x0040 */ float eqG;
}; /* size: 0x0044 */

struct sd_mix_master_param
{
  /* 0x0000 */ struct SndRvParams radverb;
  /* 0x0070 */ enum sd_mix_param_state state;
  /* 0x0074 */ struct sd_mix_bus_param bus;
  /* 0x00c8 */ struct SndDspDynamoParam dyn1;
  /* 0x00e4 */ struct SndDspDynamoParam dyn2;
  /* 0x0100 */ struct SndDspMasterEqParam eq;
  /* 0x0144 */ struct SndDspVoiceFilterParam voiceFilter;
  /* 0x015c */ struct SndDspFutzParam gfutz;
  /* 0x019c */ struct SndDspFutzParam pfutz;
  /* 0x01dc */ unsigned char padding[36];
}; /* size: 0x0200 */

struct sd_globals
{
  /* 0x0000 */ unsigned int testTone;
  /* 0x0004 */ unsigned int running;
  /* 0x0008 */ unsigned int threadExit;
  /* 0x000c */ unsigned int buffersSubmitted;
  /* 0x0010 */ struct sd_decoder_interface decoderInterfaces[11];
  /* 0x01f4 */ struct sd_decoder_pcm16 pcm16InstancePool[100];
  /* 0x0b54 */ struct sd_decoder pcm16Pool[100];
  /* 0x1964 */ struct sd_decoder flacPool[100];
  /* 0x2774 */ struct sd_decoder_flac flacInstancePool[100];
  /* 0x68394 */ BOOL decodeThreadActive;
  /* 0x68395 */ char Padding_943[3];
  /* 0x68398 */ float decodeWaitTime;
  /* 0x6839c */ float decodeProcessTime;
  /* 0x683a0 */ struct sd_voice_param* voiceParamFreeList;
  /* 0x683a4 */ long Padding_944[23];
  /* 0x68400 */ struct sd_voice_param voiceParamPool[200];
  /* 0x74c00 */ struct sd_voice voicePool[100];
  /* 0x7e200 */ int voiceYearnsToBeFree[100];
  /* 0x7e390 */ long Padding_945[28];
  /* 0x7e400 */ struct sd_voice_param* voiceNewParam[100];
  /* 0x7e590 */ long Padding_946[28];
  /* 0x7e600 */ struct sd_voice_param* voiceParam[100];
  /* 0x7e790 */ long Padding_947[28];
  /* 0x7e800 */ short voiceDecodeBuffer[819200];
  /* 0x20e800 */ struct SndRvState radverb;
  /* 0x20ea60 */ long Padding_948[8];
  /* 0x20ea80 */ float radverbDelayLine[131072];
  /* 0x28ea80 */ struct sd_mix_master_state mixMasterState;
  /* 0x295b00 */ struct sd_mix_master_param* mixParamNew;
  /* 0x295b04 */ struct sd_mix_master_param* mixParam;
  /* 0x295b08 */ long Padding_949[30];
  /* 0x295b80 */ struct sd_mix_master_param mixParamPool[4];
  /* 0x296380 */ float busBuffers[13824];
  /* 0x2a3b80 */ float tempBlockBuffer[1536];
  /* 0x2a5380 */ struct sd_voice* voices[68];
  /* 0x2a5490 */ long Padding_950[28];
  /* 0x2a5500 */ float busScale[9];
  /* 0x2a5524 */ unsigned int decoderMonoInUse;
  /* 0x2a5528 */ unsigned int decoderStereoInUse;
  /* 0x2a552c */ unsigned int voiceParamInUse;
  /* 0x2a5530 */ unsigned int voiceInUse;
  /* 0x2a5534 */ unsigned int mixParamInUse;
  /* 0x2a5538 */ unsigned int mixParamAllocated;
  /* 0x2a553c */ float mixTimeUsec;
  /* 0x2a5540 */ float mixWaitTimeUsec;
  /* 0x2a5544 */ float mixVoicesUsec;
  /* 0x2a5548 */ float mixReverbUsec;
  /* 0x2a554c */ float mixMasterUsec;
  /* 0x2a5550 */ float decodePostTimeUsec;
  /* 0x2a5554 */ float decodePreTimeUsec;
  /* 0x2a5558 */ unsigned int voiceStarvationCount;
  /* 0x2a555c */ unsigned int masterStarvationCount;
  /* 0x2a5560 */ unsigned int streamStarvationCount;
  /* 0x2a5564 */ unsigned int mixVoiceDmaUsec;
  /* 0x2a5568 */ unsigned int mixVoiceSpuUsec;
  /* 0x2a556c */ unsigned int mp3DecoderSpuAveUsec;
  /* 0x2a5570 */ void* auxCallback /* function */;
  /* 0x2a5574 */ void* vcsCallback /* function */;
  /* 0x2a5578 */ struct IXAudio2* xa2;
  /* 0x2a557c */ struct IXAudio2MasteringVoice* xa2MasterVoice;
  /* 0x2a5580 */ struct IXAudio2SourceVoice* xa2SourceVoice;
  /* 0x2a5584 */ class sd_xa2_callback xa2Callback;
  /* 0x2a5588 */ void* bufferReadyEvent;
  /* 0x2a558c */ unsigned int buffersFlying;
  /* 0x2a5590 */ long Padding_951[28];
  /* 0x2a5600 */ float xa2MasterBuffers[9216];
  /* 0x2ae600 */ BOOL xmpOverride;
  /* 0x2ae601 */ char Padding_952[3];
  /* 0x2ae604 */ int deviceIndex;
  /* 0x2ae608 */ int deviceGUIDValid;
  /* 0x2ae60c */ struct _GUID deviceGUID;
  /* 0x2ae61c */ struct XAUDIO2_DEVICE_DETAILS details;
  /* 0x2aea48 */ void* voiceMixEvent;
  /* 0x2aea4c */ void* radverbEvent;
  /* 0x2aea50 */ void* masteringEvent;
  /* 0x2aea54 */ void* voiceActiveEvent;
  /* 0x2aea58 */ void* voiceFreeEvent;
  /* 0x2aea5c */ long __PADDING__[9];
}; /* size: 0x2aea80 */

struct flameStream_s
{
  /* 0x0000 */ struct flameGeneric_s gen;
  /* 0x0060 */ struct flameRenderList_s* renderList;
  /* 0x0064 */ struct flameTable* flameVars;
  /* 0x0068 */ struct flameChunk_s* chunkList;
  /* 0x006c */ int lastSmokeChunkTime;
  /* 0x0070 */ int lastDripChunkTime;
  /* 0x0074 */ int entityNum;
  /* 0x0078 */ int damage;
  /* 0x007c */ float damageDuration;
  /* 0x0080 */ float damageInterval;
  /* 0x0084 */ int isKillcamFlame;
  /* 0x0088 */ int firingThroughGeo;
}; /* size: 0x008c */

class ISteamMatchmakingPingResponse
{
}; /* size: 0x0004 */

struct XAnimPartQuat
{
  /* 0x0000 */ unsigned short size;
  /* 0x0002 */ char Padding_953[2];
  /* 0x0004 */ union XAnimPartQuatData u;
}; /* size: 0x000c */

class ISteamMatchmakingServerListResponse
{
}; /* size: 0x0004 */

struct flameSource_t
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ union vec3_t angle;
  /* 0x0018 */ union vec3_t entityOrigin;
  /* 0x0024 */ struct flameStream_s* currentStream;
  /* 0x0028 */ int lastUsedTime;
  /* 0x002c */ int isKillcamFlame;
  /* 0x0030 */ int firingThroughGeo;
  /* 0x0034 */ int entityNum;
  /* 0x0038 */ int firstDobjHandle;
  /* 0x003c */ int thirdDobjHandle;
  /* 0x0040 */ int lastSoundTime;
  /* 0x0044 */ union vec3_t flameSoundPoint;
  /* 0x0050 */ BOOL bIsFiring;
  /* 0x0051 */ BOOL inUse;
  /* 0x0052 */ BOOL is_server_alloc;
  /* 0x0053 */ BOOL wasFiring;
  /* 0x0054 */ unsigned char firstBoneIndex;
  /* 0x0055 */ unsigned char thirdBoneIndex;
  /* 0x0056 */ char __PADDING__[2];
}; /* size: 0x0058 */

class ISteamScreenshots
{
}; /* size: 0x0004 */

class phys_static_array<flameGeneric_s *,1000>::iterator;

class ISteamMatchmakingPlayersResponse
{
}; /* size: 0x0004 */

struct gameTypesTable_t
{
  /* 0x0000 */ struct gameTypeRow_t gameTypeRows[32];
  /* 0x0180 */ int numGameTypes;
}; /* size: 0x0184 */

struct unlockedItemsData_t
{
  /* 0x0000 */ unsigned char numRecentUnlocks[1];
  /* 0x0001 */ char Padding_954[7];
  /* 0x0008 */ unsigned __int64 recentlyUnlockedAttachmentsBitMask[64][1];
  /* 0x0208 */ unsigned char recentlyUnlockedItems[256][1];
  /* 0x0308 */ unsigned char numRecentlyUnlockedItems[1];
  /* 0x0309 */ char __PADDING__[7];
}; /* size: 0x0310 */

class phys_free_list<RagdollBody>::T_internal_base
{
  /* 0x0000 */ class phys_free_list<RagdollBody>::T_internal_base* m_prev_T_internal;
  /* 0x0004 */ class phys_free_list<RagdollBody>::T_internal_base* m_next_T_internal;
}; /* size: 0x0008 */

class phys_free_list<RagdollBody>
{
  /* 0x0000 */ class phys_free_list<RagdollBody>::T_internal_base m_dummy_head;
  /* 0x0008 */ int m_list_count;
  /* 0x000c */ int m_list_count_high_water;
  /* 0x0010 */ struct RagdollBody* m_ptr_list[256];
  /* 0x0410 */ int m_ptr_list_count;
}; /* size: 0x0414 */

struct badplace_arc_t
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ float radius;
  /* 0x0010 */ float halfheight;
  /* 0x0014 */ float angle0;
  /* 0x0018 */ float angle1;
}; /* size: 0x001c */

struct badplace_brush_t
{
  /* 0x0000 */ struct gentity_t* volume;
  /* 0x0004 */ float radius;
}; /* size: 0x0008 */

union badplace_parms_t
{
  union
  {
    /* 0x0000 */ struct badplace_arc_t arc;
    /* 0x0000 */ struct badplace_brush_t brush;
  }; /* size: 0x001c */
}; /* size: 0x001c */

typedef struct _pendedBadPlace
{
  /* 0x0000 */ union badplace_parms_t params;
  /* 0x001c */ unsigned int name;
  /* 0x0020 */ int duration;
  /* 0x0024 */ int teamflags;
  /* 0x0028 */ int type;
} pendedBadPlace, *PpendedBadPlace; /* size: 0x002c */

struct PhysImpulse
{
  /* 0x0000 */ int id;
  /* 0x0004 */ union vec3_t hitp;
  /* 0x0010 */ union vec3_t hitd;
}; /* size: 0x001c */

struct searchContext_t
{
  /* 0x0000 */ enum fileShareLocation location;
  /* 0x0004 */ enum fileshareCategory_e category;
  /* 0x0008 */ enum filesharePlayerFilter_e playerFilter;
  /* 0x000c */ int startIndex;
  /* 0x0010 */ class bdTag tags[60];
  /* 0x05b0 */ int numTags;
  /* 0x05b4 */ int id;
  /* 0x05b8 */ unsigned int lbID;
  /* 0x05bc */ enum ControllerIndex_t controllerIndex;
}; /* size: 0x05c0 */

struct search_t
{
  /* 0x0000 */ BOOL dirty;
  /* 0x0001 */ char Padding_955[7];
  /* 0x0008 */ struct searchContext_t context;
  /* 0x05c8 */ struct searchBook_t book;
  /* 0x0768 */ struct searchPage_t page;
}; /* size: 0x6d00 */

struct mz_zip_archive_file_stat
{
  /* 0x0000 */ unsigned int m_file_index;
  /* 0x0004 */ unsigned int m_central_dir_ofs;
  /* 0x0008 */ unsigned short m_version_made_by;
  /* 0x000a */ unsigned short m_version_needed;
  /* 0x000c */ unsigned short m_bit_flag;
  /* 0x000e */ unsigned short m_method;
  /* 0x0010 */ unsigned int m_crc32;
  /* 0x0014 */ long Padding_956;
  /* 0x0018 */ unsigned __int64 m_comp_size;
  /* 0x0020 */ unsigned __int64 m_uncomp_size;
  /* 0x0028 */ unsigned short m_internal_attr;
  /* 0x002a */ char Padding_957[2];
  /* 0x002c */ unsigned int m_external_attr;
  /* 0x0030 */ unsigned __int64 m_local_header_ofs;
  /* 0x0038 */ unsigned int m_comment_size;
  /* 0x003c */ char m_filename[260];
  /* 0x0140 */ char m_comment[256];
}; /* size: 0x0240 */

struct SndPlayback
{
  /* 0x0000 */ int id;
  /* 0x0004 */ float attenuation;
  /* 0x0008 */ int lengthMs;
  /* 0x000c */ int playedMs;
  /* 0x0010 */ unsigned int aliasId;
  /* 0x0014 */ union SndEntHandle entHandle;
  /* 0x0018 */ struct SndPlayback* next;
}; /* size: 0x001c */

struct badplace_t
{
  /* 0x0000 */ int endtime;
  /* 0x0004 */ int pingTime;
  /* 0x0008 */ unsigned short name;
  /* 0x000a */ unsigned char type;
  /* 0x000b */ unsigned char teamflags;
  /* 0x000c */ int depth;
  /* 0x0010 */ union badplace_parms_t parms;
}; /* size: 0x002c */

class phys_free_list<NitrousVehicle>::T_internal
{
  /* 0x0000 */ long Padding_958[4];
  /* 0x0010 */ class NitrousVehicle m_data;
  /* 0x0480 */ int m_ptr_list_index;
}; /* size: 0x0490 */

struct fileShareSearchBackoff_t
{
  /* 0x0000 */ BOOL isActive;
  /* 0x0001 */ char Padding_959[3];
  /* 0x0004 */ int level;
}; /* size: 0x0008 */

struct ddlStackMember_t
{
  /* 0x0000 */ struct ddlMemberDef_t* ddlMember;
  /* 0x0004 */ int arrayIndex;
}; /* size: 0x0008 */

struct ddlStack_t
{
  /* 0x0000 */ struct ddlStackMember_t stackMember[16];
  /* 0x0080 */ int top;
}; /* size: 0x0084 */

struct scrMemTreeDebugGlob_t
{
  /* 0x0000 */ unsigned char mt_usage[65536];
  /* 0x10000 */ unsigned char mt_usage_size[65536];
}; /* size: 0x20000 */

struct SndSpeakerAngle
{
  /* 0x0000 */ enum SndSpeakerFlag speaker;
  /* 0x0004 */ float angle;
}; /* size: 0x0008 */

struct SndSpeakerConfig
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ enum SndSpeakerFlag outputFormat;
  /* 0x0008 */ unsigned int speakerCount;
  /* 0x000c */ unsigned int speakerMapCount;
  /* 0x0010 */ unsigned int angleCount;
  /* 0x0014 */ struct SndSpeakerAngle angles[8];
}; /* size: 0x0054 */

class DebuggerCriticalSection
{
}; /* size: 0x0001 */

struct scrVmDebugPub_t
{
  /* 0x0000 */ int dummy;
}; /* size: 0x0004 */

class destructible_ent_aa
{
  /* 0x0000 */ long Padding_960;
  /* 0x0004 */ BOOL m_has_auto_activated;
  /* 0x0005 */ char Padding_961[3];
  /* 0x0008 */ struct centity_t* m_cent;
}; /* size: 0x000c */

struct dwTeamClanLeaveTask
{
  /* 0x0000 */ unsigned __int64 teamID;
}; /* size: 0x0008 */

struct dwTeamSetPublicProfileTask
{
  /* 0x0000 */ unsigned __int64 teamID;
  /* 0x0008 */ class PublicTeamProfile teamPublicProfile;
}; /* size: 0x4048 */

struct dwTeamSetPrivateProfileTask
{
  /* 0x0000 */ unsigned __int64 teamID;
  /* 0x0008 */ class PrivateTeamProfile teamPrivateProfile;
}; /* size: 0x0080 */

struct dwTeamGetMembersTask
{
  /* 0x0000 */ unsigned __int64 teamID;
  /* 0x0008 */ class bdTeamMember* teamMembers;
  /* 0x000c */ unsigned int maxNumTeamMembers;
}; /* size: 0x0010 */

struct dwTeamGetPublicProfileTask
{
  /* 0x0000 */ unsigned __int64 teamId[1];
  /* 0x0008 */ class PublicTeamProfile* teamPublicProfiles;
  /* 0x000c */ unsigned int maxNumTeams;
}; /* size: 0x0010 */

struct dwTeamGetPrivateProfileTask
{
  /* 0x0000 */ unsigned __int64 teamId;
  /* 0x0008 */ class PrivateTeamProfile* teamPrivateProfile;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

struct dwLobbyGetSubscriptionFromDWTask
{
  /* 0x0000 */ unsigned __int64 subscriptionIDs[1];
  /* 0x0008 */ class bdSubscriptionInfo DWSubscriptionInfo[1];
  /* 0x0028 */ int count;
  /* 0x002c */ long __PADDING__[1];
}; /* size: 0x0030 */

struct controllerEliteTasks_t
{
  /* 0x0000 */ struct dwTeamClanCreateTask eliteCreateTask;
  /* 0x0078 */ struct dwTeamClanInviteTask eliteClanInviteTask;
  /* 0x0088 */ struct dwTeamClanLeaveTask eliteClanLeaveTask;
  /* 0x0090 */ struct dwTeamSetPublicProfileTask eliteSetPublicProfileTask;
  /* 0x40d8 */ struct dwTeamSetPrivateProfileTask eliteSetPrivateProfileTask;
  /* 0x4158 */ struct dwTeamGetMembershipsTask eliteGetMembershipsTask;
  /* 0x4168 */ struct dwTeamGetMembersTask eliteGetMembersTask;
  /* 0x4178 */ struct dwTeamGetPublicProfileTask eliteGetTeamPublicProfileTask;
  /* 0x4188 */ struct dwTeamGetPrivateProfileTask eliteGetTeamPrivateProfileTask;
  /* 0x4198 */ struct dwLobbyGetSubscriptionFromDWTask eliteGetSubscriberInfoFromDWTask;
  /* 0x41c8 */ struct dwKeyArchiveReadTask keyArchiveReadTask;
  /* 0x4330 */ struct dwKeyArchiveWriteTask keyArchiveWriteTask;
  /* 0x4350 */ class bdKeyValuePair keyArchiveWriteValuePair;
}; /* size: 0x4360 */

struct MapnameRichPresenceInfo
{
  /* 0x0000 */ const char* mapname;
  /* 0x0004 */ int context;
  /* 0x0008 */ int mapPack;
  /* 0x000c */ const char* locString;
}; /* size: 0x0010 */

struct SndGameState
{
  /* 0x0000 */ float timescale;
  /* 0x0004 */ unsigned int cgTime;
  /* 0x0008 */ unsigned int seed;
  /* 0x000c */ int gamePaused;
  /* 0x0010 */ int mature;
  /* 0x0014 */ float voiceScale;
  /* 0x0018 */ float musicScale;
  /* 0x001c */ float sfxScale;
  /* 0x0020 */ float masterScale;
  /* 0x0024 */ float cinematicScale;
  /* 0x0028 */ int masterPatch;
  /* 0x002c */ int hearingImpaired;
}; /* size: 0x0030 */

struct SearchSessionMapPackCombinationData
{
  /* 0x0000 */ char contentName[128];
  /* 0x0080 */ int contentPackFlags;
}; /* size: 0x0084 */

struct AnimScriptList
{
  /* 0x0000 */ struct scr_animscript_t combat;
  /* 0x000c */ struct scr_animscript_t concealment_crouch;
  /* 0x0018 */ struct scr_animscript_t concealment_prone;
  /* 0x0024 */ struct scr_animscript_t concealment_stand;
  /* 0x0030 */ struct scr_animscript_t cover_arrival;
  /* 0x003c */ struct scr_animscript_t cover_crouch;
  /* 0x0048 */ struct scr_animscript_t cover_left;
  /* 0x0054 */ struct scr_animscript_t cover_prone;
  /* 0x0060 */ struct scr_animscript_t cover_right;
  /* 0x006c */ struct scr_animscript_t cover_stand;
  /* 0x0078 */ struct scr_animscript_t death;
  /* 0x0084 */ struct scr_animscript_t grenade_return_throw;
  /* 0x0090 */ struct scr_animscript_t init;
  /* 0x009c */ struct scr_animscript_t pain;
  /* 0x00a8 */ struct scr_animscript_t react;
  /* 0x00b4 */ struct scr_animscript_t move;
  /* 0x00c0 */ struct scr_animscript_t scripted;
  /* 0x00cc */ struct scr_animscript_t stop;
  /* 0x00d8 */ struct scr_animscript_t grenade_cower;
  /* 0x00e4 */ struct scr_animscript_t flashed;
  /* 0x00f0 */ struct scr_animscript_t jump;
  /* 0x00fc */ struct scr_animscript_t turn;
  /* 0x0108 */ struct scr_animscript_t weapons[256];
}; /* size: 0x0d08 */

struct GroupMembership
{
  /* 0x0000 */ unsigned int bits[32];
  /* 0x0080 */ int dirty;
  /* 0x0084 */ int updateTime;
}; /* size: 0x0088 */

struct corpseInfo_t
{
  /* 0x0000 */ struct XAnimTree_s* tree;
  /* 0x0004 */ int entnum;
  /* 0x0008 */ int time;
  /* 0x000c */ long Padding_962;
  /* 0x0010 */ struct clientInfo_t ci;
  /* 0x0818 */ BOOL falling;
  /* 0x0819 */ char __PADDING__[7];
}; /* size: 0x0820 */

struct InvitesGlob
{
  /* 0x0000 */ struct FriendInfo xfriends[10];
  /* 0x0910 */ int numInvites;
  /* 0x0914 */ long __PADDING__[1];
}; /* size: 0x0918 */

struct FxTrail
{
  union
  {
    /* 0x0000 */ const int HANDLE_SCALE;
    /* 0x0000 */ const int POOL_SIZE;
    struct
    {
      /* 0x0000 */ unsigned short nextTrailHandle;
      /* 0x0002 */ unsigned short firstElemHandle;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned short lastElemHandle;
  /* 0x0006 */ char defIndex;
  /* 0x0007 */ char sequence;
}; /* size: 0x0008 */

struct gameTypeScript_t
{
  /* 0x0000 */ char pszScript[64];
  /* 0x0040 */ char pszName[64];
  /* 0x0080 */ int bTeamBased;
}; /* size: 0x0084 */

typedef struct _KDHELP
{
  /* 0x0000 */ unsigned long Thread;
  /* 0x0004 */ unsigned long ThCallbackStack;
  /* 0x0008 */ unsigned long NextCallback;
  /* 0x000c */ unsigned long FramePointer;
  /* 0x0010 */ unsigned long KiCallUserMode;
  /* 0x0014 */ unsigned long KeUserCallbackDispatcher;
  /* 0x0018 */ unsigned long SystemRangeStart;
  /* 0x001c */ unsigned long ThCallbackBStore;
  /* 0x0020 */ unsigned long KiUserExceptionDispatcher;
  /* 0x0024 */ unsigned long StackBase;
  /* 0x0028 */ unsigned long StackLimit;
  /* 0x002c */ unsigned long Reserved[5];
} KDHELP, *PKDHELP; /* size: 0x0040 */

struct SndEntState
{
  /* 0x0000 */ union SndEntHandle handle;
  /* 0x0004 */ union vec3_t origin;
  /* 0x0010 */ union vec3_t velocity;
  /* 0x001c */ union vec3_t orientation[3];
  /* 0x0040 */ unsigned int lastUsed;
  /* 0x0044 */ unsigned int hasPosition;
  /* 0x0048 */ struct SndEntState* next;
}; /* size: 0x004c */

struct SndMusicActiveSegment
{
  /* 0x0000 */ enum SndMusicActiveSegmentState state;
  /* 0x0004 */ unsigned int stateName;
  /* 0x0008 */ struct SndMusicSegment* segment;
  /* 0x000c */ int playback;
  /* 0x0010 */ int startTime;
  /* 0x0014 */ int stopTime;
}; /* size: 0x0018 */

struct ClientGameState
{
  /* 0x0000 */ int flags;
  /* 0x0004 */ enum LocalClientNum_t localClientNum;
  /* 0x0008 */ enum ControllerIndex_t controllerIndex;
  /* 0x000c */ enum UIContextIndex_t uiContextIndex;
  /* 0x0010 */ enum netsrc_t networkID;
  /* 0x0014 */ enum LastInput_t lastInput;
}; /* size: 0x0018 */

struct SndListener
{
  /* 0x0000 */ struct orientation_t orient;
  /* 0x0030 */ enum ClientNum_t clientNum;
  /* 0x0034 */ BOOL active;
  /* 0x0035 */ char Padding_963[3];
  /* 0x0038 */ enum team_t team;
}; /* size: 0x003c */

typedef struct _MINIDUMP_CALLBACK_INFORMATION
{
  /* 0x0000 */ void* CallbackRoutine /* function */;
  /* 0x0004 */ void* CallbackParam;
} MINIDUMP_CALLBACK_INFORMATION, *PMINIDUMP_CALLBACK_INFORMATION; /* size: 0x0008 */

struct GSC_STRINGTABLE_ITEM
{
  /* 0x0000 */ unsigned short string;
  /* 0x0002 */ unsigned char num_address;
  /* 0x0003 */ unsigned char type;
}; /* size: 0x0004 */

struct SndAliasPreload
{
  /* 0x0000 */ unsigned int aliasId;
  /* 0x0004 */ int playTimeCgMs;
}; /* size: 0x0008 */

struct SndLocal
{
  /* 0x0000 */ int magic;
  /* 0x0004 */ int init;
  /* 0x0008 */ int paused;
  /* 0x000c */ float timescale;
  /* 0x0010 */ float scriptTimescale;
  /* 0x0014 */ int time;
  /* 0x0018 */ int looptime;
  /* 0x001c */ int pausetime;
  /* 0x0020 */ unsigned int frame;
  /* 0x0024 */ struct SndDriverGlobals* global_constants;
  /* 0x0028 */ int cinematicVoicesPlaying;
  /* 0x002c */ int cinematicTimestamp;
  /* 0x0030 */ int cinematicUpdate;
  /* 0x0034 */ int forcePause;
  /* 0x0038 */ int playbackIdCounter;
  /* 0x003c */ struct SndFader volume;
  /* 0x0048 */ unsigned int defaultHash;
  /* 0x004c */ const struct SndCurve* defaultCurve;
  /* 0x0050 */ unsigned int defaultPanIndex;
  /* 0x0054 */ unsigned int activeListenerCount;
  /* 0x0058 */ int curveMagnitudeIsZero[32];
  /* 0x00d8 */ unsigned int pfutzId;
  /* 0x00dc */ float pfutzBlend;
  /* 0x00e0 */ unsigned int gfutzIds[2];
  /* 0x00e8 */ int gfutzLoopId;
  /* 0x00ec */ struct SndEnvEffect envEffects[3];
  /* 0x014c */ struct SndEnvEffect* effect;
  /* 0x0150 */ unsigned int listenerSanityCount;
  /* 0x0154 */ unsigned int voiceGroup;
  /* 0x0158 */ unsigned int announcerGroup;
  /* 0x015c */ long Padding_964[9];
  /* 0x0180 */ struct SndListener listeners[4];
  /* 0x0270 */ long Padding_965[4];
  /* 0x0280 */ struct SndGameState gameState;
  /* 0x02b0 */ long Padding_966[20];
  /* 0x0300 */ struct SndVoice voice[68];
  /* 0x7a00 */ unsigned int voiceAliasHash[68];
  /* 0x7b10 */ long Padding_967[28];
  /* 0x7b80 */ union vec3_t voicePositionCache[68];
  /* 0x7eb0 */ long Padding_968[20];
  /* 0x7f00 */ struct SndEntState entState[272];
  /* 0xcfc0 */ long Padding_969[16];
  /* 0xd000 */ struct SndEntState* entStateIndex[2048];
  /* 0xf000 */ unsigned int currentContexts[16];
  /* 0xf040 */ unsigned int currentVoiceDuck;
  /* 0xf044 */ struct SndLineEmitter lineEmitters[128];
  /* 0x10244 */ struct SndLoopEmitter loopEmitters[384];
  /* 0x12644 */ int pfutzLoops[8];
  /* 0x12664 */ unsigned int lineCount;
  /* 0x12668 */ unsigned int loopCount;
  /* 0x1266c */ long Padding_970[5];
  /* 0x12680 */ struct SndDuckActive duckActive[128];
  /* 0x14680 */ unsigned int duckCategoryIndex[12];
  /* 0x146b0 */ long Padding_971[20];
  /* 0x14700 */ float duckAttenuationValue[32];
  /* 0x14780 */ float duckAttenuationValueLinear[32];
  /* 0x14800 */ float duckFilterValue[32];
  /* 0x14880 */ float duckAttenuationTarget[32];
  /* 0x14900 */ float duckFilterTarget[32];
  /* 0x14980 */ float duckTemp[32];
  /* 0x14a00 */ float duckOne[32];
  /* 0x14a80 */ float duckRate[32];
  /* 0x14b00 */ float duckNegRate[32];
  /* 0x14b80 */ float duckDelta[32];
  /* 0x14c00 */ struct SndDspMeters meters[8];
  /* 0x14d00 */ unsigned int logCommandCount;
  /* 0x14d04 */ unsigned int logNotifyCount;
  /* 0x14d08 */ unsigned int frameNotifyCount;
  /* 0x14d0c */ unsigned int frameCommandCount;
  /* 0x14d10 */ unsigned int updated;
  /* 0x14d14 */ struct SndPlayback playbacks[272];
  /* 0x16ad4 */ struct SndPlayback* playbackFreeList;
  /* 0x16ad8 */ unsigned int playbacksInUse;
  /* 0x16adc */ int command_init;
  /* 0x16ae0 */ struct SndCommand commands[1024];
  /* 0x3aae0 */ struct SndCommand* commandFreeList;
  /* 0x3aae4 */ unsigned int commandInUse;
  /* 0x3aae8 */ unsigned int command_id_commit;
  /* 0x3aaec */ struct SndCommand* command_q[1024];
  /* 0x3baec */ unsigned int command_q_head;
  /* 0x3baf0 */ unsigned int command_q_tail;
  /* 0x3baf4 */ BOOL command_process_flag;
  /* 0x3baf5 */ BOOL muteAllSounds;
  /* 0x3baf6 */ char Padding_972[2];
  /* 0x3baf8 */ struct SndNotify notifies[512];
  /* 0x3eaf8 */ struct SndNotify* notifyFreeList;
  /* 0x3eafc */ unsigned int notifyInUse;
  /* 0x3eb00 */ struct SndNotify* notify_q[512];
  /* 0x3f300 */ unsigned int notify_q_head;
  /* 0x3f304 */ unsigned int notify_q_tail;
  /* 0x3f308 */ int asyncRunning;
  /* 0x3f30c */ unsigned int musicRequestedState;
  /* 0x3f310 */ unsigned int musicCurrentState;
  /* 0x3f314 */ int musicInhibitCount;
  /* 0x3f318 */ struct SndMusicActiveSegment musicActiveSegments[32];
  /* 0x3f618 */ long Padding_973[26];
  /* 0x3f680 */ struct SndOcclusionTrace occlusionTraces[68];
  /* 0x40780 */ int occlusionRunning;
  /* 0x40784 */ unsigned int framesSinceLastOcclusionUpdate;
  /* 0x40788 */ unsigned int traceSequence;
  /* 0x4078c */ unsigned int traceCount;
  /* 0x40790 */ unsigned int lastTraceSequence;
  /* 0x40794 */ unsigned int occlusionUsec;
  /* 0x40798 */ unsigned int occlusionTraceCount;
  /* 0x4079c */ unsigned int occlusionVoiceCount;
  /* 0x407a0 */ unsigned int logTimestamp;
  /* 0x407a4 */ unsigned int frameUsec;
  /* 0x407a8 */ unsigned int updateUsec;
  /* 0x407ac */ unsigned int duckUsec;
  /* 0x407b0 */ unsigned int occlusionUpdateUsec;
  /* 0x407b4 */ unsigned int voiceUpdateUsec;
  /* 0x407b8 */ unsigned int entStateUsec;
  /* 0x407bc */ unsigned int updateVoicePositionUsec;
  /* 0x407c0 */ unsigned int updateVoiceVoiceUsec;
  /* 0x407c4 */ unsigned int updateVoiceDriverUsec;
  /* 0x407c8 */ unsigned int commandPumpUsec;
  /* 0x407cc */ unsigned int devhostEndUsec;
  /* 0x407d0 */ unsigned int devhostBeginUsec;
  /* 0x407d4 */ unsigned int occlusionCacheMiss;
  /* 0x407d8 */ unsigned int occlusionCacheTotal;
  /* 0x407dc */ unsigned int spuUpdateUsec;
  /* 0x407e0 */ unsigned int banksLoading;
  /* 0x407e4 */ unsigned int stressAliasIndex;
  /* 0x407e8 */ unsigned int stressAliasCount;
  /* 0x407ec */ BOOL bankUpdateStatus;
  /* 0x407ed */ char Padding_974[3];
  /* 0x407f0 */ unsigned int frontendMusicAlias;
  /* 0x407f4 */ unsigned int PreviousFrontendMusicAlias;
  /* 0x407f8 */ struct SndEntityContextInfo entContexts[1792];
  /* 0x5c7f8 */ struct SndAliasPreload aliasPreload[128];
  /* 0x5cbf8 */ long __PADDING__[2];
}; /* size: 0x5cc00 */

struct GSC_IMPORT_ITEM
{
  /* 0x0000 */ unsigned short name;
  /* 0x0002 */ unsigned short name_space;
  /* 0x0004 */ unsigned short num_address;
  /* 0x0006 */ unsigned char param_count;
  /* 0x0007 */ unsigned char flags;
}; /* size: 0x0008 */

typedef struct _MINIDUMP_CALLBACK_OUTPUT
{
  union
  {
    /* 0x0000 */ unsigned long ModuleWriteFlags;
    /* 0x0000 */ unsigned long ThreadWriteFlags;
    /* 0x0000 */ unsigned long SecondaryFlags;
    struct
    {
      /* 0x0000 */ unsigned __int64 MemoryBase;
      /* 0x0008 */ unsigned long MemorySize;
    }; /* size: 0x000c */
    struct
    {
      /* 0x0000 */ int CheckCancel;
      /* 0x0004 */ int Cancel;
    }; /* size: 0x0008 */
    /* 0x0000 */ void* Handle;
    struct
    {
      /* 0x0000 */ struct _MINIDUMP_MEMORY_INFO VmRegion;
      /* 0x0030 */ int Continue;
    }; /* size: 0x0034 */
    struct
    {
      /* 0x0000 */ HRESULT Status;
      /* 0x0004 */ long __PADDING__[12];
    }; /* size: 0x0034 */
  }; /* size: 0x0034 */
} MINIDUMP_CALLBACK_OUTPUT, *PMINIDUMP_CALLBACK_OUTPUT; /* size: 0x0034 */

struct cdl_proftimer
{
  /* 0x0000 */ unsigned __int64 stamp;
  /* 0x0008 */ unsigned __int64 value;
  /* 0x0010 */ unsigned __int64 avr;
  /* 0x0018 */ unsigned __int64 tot;
  /* 0x0020 */ unsigned __int64 capture_count;
  /* 0x0028 */ unsigned __int64 calls;
  /* 0x0030 */ BOOL capture;
  /* 0x0031 */ char Padding_975[7];
  /* 0x0038 */ unsigned __int64 mx[5];
}; /* size: 0x0060 */

struct sd_decoder_mpc;

class miniDumper
{
  union
  {
    struct
    {
      /* 0x0000 */ struct _EXCEPTION_POINTERS* m_pExceptionInfo;
      /* 0x0004 */ char m_szMiniDumpPath[260];
      /* 0x0108 */ char m_szMiniDumpDir[260];
      /* 0x020c */ char m_szAppPath[260];
      /* 0x0310 */ char m_szAppBaseName[260];
      /* 0x0414 */ BOOL m_bPromptUserForMiniDump;
    }; /* size: 0x0415 */
    /* 0x0000 */ class miniDumper* s_pMiniDumper;
    /* 0x0000 */ struct _RTL_CRITICAL_SECTION* s_pCriticalSection;
  }; /* size: 0x0415 */
}; /* size: 0x0418 */

struct Flame_SortByStream
{
}; /* size: 0x0001 */

struct PrecacheEntry
{
  /* 0x0000 */ unsigned short filename;
  /* 0x0002 */ BOOL include;
  /* 0x0003 */ char Padding_976;
  /* 0x0004 */ unsigned int sourcePos;
}; /* size: 0x0008 */

struct collision_material_t
{
  /* 0x0000 */ char name[64];
  /* 0x0040 */ int cflags;
  /* 0x0044 */ int sflags;
}; /* size: 0x0048 */

struct signedStatsHash_t
{
  /* 0x0000 */ unsigned char signedHashBuffer[50];
  /* 0x0032 */ char Padding_977[2];
  /* 0x0034 */ unsigned long signedHashLen;
}; /* size: 0x0038 */

union viewedTime_u
{
  union
  {
    /* 0x0000 */ int utctime;
    /* 0x0000 */ unsigned char time[4];
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct snd_occlusion_single
{
  /* 0x0000 */ union vec3_t listener;
  /* 0x000c */ union vec3_t playback;
  /* 0x0018 */ float* result;
  /* 0x001c */ enum snd_occlusion_single_state* state;
}; /* size: 0x0020 */

struct gameBookmarks_t
{
  /* 0x0000 */ unsigned __int64 fildID[16];
  /* 0x0080 */ int lastIndex;
  /* 0x0084 */ long __PADDING__[1];
}; /* size: 0x0088 */

struct scrAnimGlob_t
{
  /* 0x0000 */ const char* start;
  /* 0x0004 */ const char* pos;
  /* 0x0008 */ unsigned short using_xanim_lookup[128][2];
  /* 0x0208 */ int bAnimCheck;
}; /* size: 0x020c */

struct PlayerSkill
{
  /* 0x0000 */ float skill;
  /* 0x0004 */ float variance;
  /* 0x0008 */ float score;
  /* 0x000c */ int contrib;
}; /* size: 0x0010 */

union ddlValue_t
{
  union
  {
    /* 0x0000 */ float fixedPointValue;
    /* 0x0000 */ int intValue;
    /* 0x0000 */ unsigned int uintValue;
    /* 0x0000 */ unsigned __int64 int64Value;
    /* 0x0000 */ float floatValue;
    /* 0x0000 */ const char* stringPtr;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct CodeBreakpoint
{
  /* 0x0000 */ char filename[64];
  /* 0x0040 */ int lineNum;
  /* 0x0044 */ unsigned char* addr;
}; /* size: 0x0048 */

struct statsDeltaRow_t
{
  /* 0x0000 */ struct ddlState_t searchState;
  /* 0x0014 */ int oldValue[1];
  /* 0x0018 */ struct statsDelta_t reportDelta;
  /* 0x0020 */ struct statsDelta_t clampDelta;
  /* 0x0028 */ struct statsDelta_t dropDelta;
  /* 0x0030 */ BOOL isValid;
  /* 0x0031 */ BOOL isValueValid;
  /* 0x0032 */ char Padding_978[2];
  /* 0x0034 */ enum trackerColumn_e clientTrackerCol;
  /* 0x0038 */ enum trackerColumn_e serverTrackerCol;
}; /* size: 0x003c */

struct MapProfileElement
{
  /* 0x0000 */ unsigned __int64 ticksStart;
  /* 0x0008 */ unsigned __int64 ticksTotal;
  /* 0x0010 */ unsigned __int64 ticksSelf;
}; /* size: 0x0018 */

class SndScopedPerformanceError
{
  /* 0x0000 */ double threshold;
  /* 0x0008 */ unsigned __int64 start;
  /* 0x0010 */ const char* what;
}; /* size: 0x0018 */

struct cachedStats_t
{
  /* 0x0000 */ struct cachedStatsMsg_t cachedStatsChanges[64];
  /* 0x1100 */ int nextFreeCachedStat;
}; /* size: 0x1104 */

struct SessionCreateData
{
  /* 0x0000 */ BOOL silentFail;
  /* 0x0001 */ BOOL active;
  /* 0x0002 */ char Padding_979[2];
  /* 0x0004 */ struct SessionData* session;
}; /* size: 0x0008 */

struct CodeBreakpoints
{
  /* 0x0000 */ struct CodeBreakpoint breakpoints[128];
  /* 0x2400 */ int num;
}; /* size: 0x2404 */

class bdSecurityInfo
{
}; /* size: 0x0001 */

struct scrStringGlob_t
{
  /* 0x0000 */ struct HashEntry* hashTable;
  /* 0x0004 */ BOOL inited;
  /* 0x0005 */ char Padding_980[3];
  /* 0x0008 */ struct HashEntry* nextFreeEntry;
  /* 0x000c */ int indentLevel;
  /* 0x0010 */ int stringsUsed[32];
  /* 0x0090 */ long __PADDING__[28];
}; /* size: 0x0100 */

struct SessionSearchPayloadData
{
  /* 0x0000 */ void* abortCheckfunc /* function */;
  /* 0x0004 */ struct ThrottleData* throttleData;
}; /* size: 0x0008 */

struct SessionTaskCheckData
{
  /* 0x0000 */ const struct TaskDefinition* sessionTaskDef;
  /* 0x0004 */ struct SessionData* session;
  /* 0x0008 */ struct TaskRecord* sessionTask;
}; /* size: 0x000c */

struct std::_Pair_base<unsigned int *,unsigned int *>
{
  /* 0x0000 */ unsigned int* first;
  /* 0x0004 */ unsigned int* second;
}; /* size: 0x0008 */

struct SessionJoinData
{
  /* 0x0000 */ BOOL active;
  /* 0x0001 */ char Padding_981[3];
  /* 0x0004 */ int privateSlot;
  /* 0x0008 */ int slot;
  /* 0x000c */ long Padding_982;
  /* 0x0010 */ unsigned __int64 player;
  /* 0x0018 */ struct SessionData* session;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

union XAssetPoolEntry<WeaponCamo>
{
  union
  {
    /* 0x0000 */ struct WeaponCamo entry;
    /* 0x0000 */ union XAssetPoolEntry<WeaponCamo>* next;
  }; /* size: 0x001c */
}; /* size: 0x001c */

struct Ps3PresenceData
{
  /* 0x0000 */ unsigned char version;
  /* 0x0001 */ char Padding_983[3];
  /* 0x0004 */ int presence;
  /* 0x0008 */ int map;
  /* 0x000c */ int gametype;
  /* 0x0010 */ int zmLocation;
}; /* size: 0x0014 */

struct Floor1
{
  /* 0x0000 */ unsigned char partitions;
  /* 0x0001 */ unsigned char partition_class_list[32];
  /* 0x0021 */ unsigned char class_dimensions[16];
  /* 0x0031 */ unsigned char class_subclasses[16];
  /* 0x0041 */ unsigned char class_masterbooks[16];
  /* 0x0051 */ char Padding_984;
  /* 0x0052 */ short subclass_books[8][16];
  /* 0x0152 */ unsigned short Xlist[250];
  /* 0x0346 */ unsigned char sorted_order[250];
  /* 0x0440 */ unsigned char neighbors[2][250];
  /* 0x0634 */ unsigned char floor1_multiplier;
  /* 0x0635 */ unsigned char rangebits;
  /* 0x0636 */ char Padding_985[2];
  /* 0x0638 */ int values;
}; /* size: 0x063c */

union Floor
{
  union
  {
    /* 0x0000 */ struct Floor0 floor0;
    /* 0x0000 */ struct Floor1 floor1;
  }; /* size: 0x063c */
}; /* size: 0x063c */

union XAssetPoolEntry<SndAliasList>
{
  union
  {
    /* 0x0000 */ struct SndAliasList entry;
    /* 0x0000 */ union XAssetPoolEntry<SndAliasList>* next;
  }; /* size: 0x0014 */
}; /* size: 0x0014 */

struct XAssetPool<SndAliasList,16>
{
  /* 0x0000 */ union XAssetPoolEntry<SndAliasList>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<SndAliasList> entries[16];
}; /* size: 0x0144 */

struct FriendsGlob
{
  /* 0x0000 */ struct FriendInfo xfriends[300];
  /* 0x10fe0 */ int numFriends;
  /* 0x10fe4 */ long __PADDING__[1];
}; /* size: 0x10fe8 */

struct stb_vorbis_packet
{
  /* 0x0000 */ struct stb_vorbis_packet* next;
  /* 0x0004 */ unsigned char* data;
  /* 0x0008 */ unsigned int size;
  /* 0x000c */ unsigned char flags;
  /* 0x000d */ char __PADDING__[3];
}; /* size: 0x0010 */

struct scoreInfo_t
{
  /* 0x0000 */ int nameHash;
  /* 0x0004 */ float value;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned int addPlayerStat : 1; /* bit position: 0 */
    /* 0x0008 */ unsigned int isMedal : 1; /* bit position: 1 */
    /* 0x0008 */ unsigned int isDoubleXP : 1; /* bit position: 2 */
    /* 0x0008 */ unsigned int isGunXP : 1; /* bit position: 3 */
    /* 0x0008 */ unsigned int demoBookmarkPriority : 7; /* bit position: 4 */
    /* 0x0008 */ unsigned int tableIndex : 9; /* bit position: 11 */
  }; /* bitfield */
}; /* size: 0x000c */

struct PlayerIdentityData
{
  /* 0x0000 */ unsigned __int64 xuid;
  /* 0x0008 */ const char* gamertag;
  /* 0x000c */ char clantag[32];
  /* 0x002c */ long __PADDING__[1];
}; /* size: 0x0030 */

struct _DSA;

struct fileshareCopy_t
{
  /* 0x0000 */ class bdFileMetaData descriptor;
  /* 0x0a28 */ int numDescriptors;
  /* 0x0a2c */ enum fileShareLocation location;
  /* 0x0a30 */ int slot;
  /* 0x0a34 */ char name[22];
  /* 0x0a4a */ BOOL isModifiedName;
  /* 0x0a4b */ char description[64];
  /* 0x0a8b */ BOOL isModifiedDescription;
  /* 0x0a8c */ long __PADDING__[1];
}; /* size: 0x0a90 */

struct fileshareDescriptorData_t
{
  /* 0x0000 */ unsigned __int64 fileID;
  /* 0x0008 */ unsigned __int64 originID;
  /* 0x0010 */ int fileSize;
  /* 0x0014 */ int summarySize;
  /* 0x0018 */ BOOL isSupported;
  /* 0x0019 */ BOOL isPooled;
  /* 0x001a */ BOOL isBookmarked;
  /* 0x001b */ char Padding_986;
  /* 0x001c */ int slot;
  /* 0x0020 */ enum fileshareCategory_e category;
  /* 0x0024 */ int mapID;
  /* 0x0028 */ const char* mapString;
  /* 0x002c */ const char* mapName;
  /* 0x0030 */ unsigned __int64 matchID;
  /* 0x0038 */ int duration;
  /* 0x003c */ char durationString[64];
  /* 0x007c */ int createTime;
  /* 0x0080 */ char createTimeString[64];
  /* 0x00c0 */ int gameType;
  /* 0x00c4 */ const char* gameTypeString;
  /* 0x00c8 */ const char* gameTypeName;
  /* 0x00cc */ const char* gameTypeImage;
  /* 0x00d0 */ int zmMapStartLoc;
  /* 0x00d4 */ const char* zmMapStartLocString;
  /* 0x00d8 */ const char* zmMapStartLocName;
  /* 0x00dc */ long Padding_987;
  /* 0x00e0 */ unsigned __int64 authorXuid;
  /* 0x00e8 */ char authorName[64];
  /* 0x0128 */ char modifiedName[64];
  /* 0x0168 */ char modifiedDescription[64];
  /* 0x01a8 */ int playlistID;
  /* 0x01ac */ enum filesharePlaylistType_e playlistType;
}; /* size: 0x01b0 */

struct dwLobbyRefreshDWSubscriptionTask
{
}; /* size: 0x0001 */

union XAssetPoolEntry<menuDef_t>
{
  union
  {
    /* 0x0000 */ struct menuDef_t entry;
    /* 0x0000 */ union XAssetPoolEntry<menuDef_t>* next;
  }; /* size: 0x0190 */
}; /* size: 0x0190 */

struct XAssetPool<menuDef_t,1>
{
  /* 0x0000 */ union XAssetPoolEntry<menuDef_t>* freeHead;
  /* 0x0004 */ long Padding_988;
  /* 0x0008 */ union XAssetPoolEntry<menuDef_t> entries[1];
}; /* size: 0x0198 */

class phys_simple_allocator<gjk_brush_t>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

struct ltc_cipher_descriptor
{
  /* 0x0000 */ char* name;
  /* 0x0004 */ unsigned char ID;
  /* 0x0005 */ char Padding_989[3];
  /* 0x0008 */ int min_key_length;
  /* 0x000c */ int max_key_length;
  /* 0x0010 */ int block_length;
  /* 0x0014 */ int default_rounds;
  /* 0x0018 */ void* setup /* function */;
  /* 0x001c */ void* ecb_encrypt /* function */;
  /* 0x0020 */ void* ecb_decrypt /* function */;
  /* 0x0024 */ void* test /* function */;
  /* 0x0028 */ void* done /* function */;
  /* 0x002c */ void* keysize /* function */;
  /* 0x0030 */ void* accel_ecb_encrypt /* function */;
  /* 0x0034 */ void* accel_ecb_decrypt /* function */;
  /* 0x0038 */ void* accel_cbc_encrypt /* function */;
  /* 0x003c */ void* accel_cbc_decrypt /* function */;
  /* 0x0040 */ void* accel_ctr_encrypt /* function */;
  /* 0x0044 */ void* accel_lrw_encrypt /* function */;
  /* 0x0048 */ void* accel_lrw_decrypt /* function */;
  /* 0x004c */ void* accel_ccm_memory /* function */;
  /* 0x0050 */ void* accel_gcm_memory /* function */;
  /* 0x0054 */ void* omac_memory /* function */;
  /* 0x0058 */ void* xcbc_memory /* function */;
  /* 0x005c */ void* f9_memory /* function */;
}; /* size: 0x0060 */

union XAssetPoolEntry<FxImpactTable>
{
  union
  {
    /* 0x0000 */ struct FxImpactTable entry;
    /* 0x0000 */ union XAssetPoolEntry<FxImpactTable>* next;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct Mode
{
  /* 0x0000 */ unsigned char blockflag;
  /* 0x0001 */ unsigned char mapping;
  /* 0x0002 */ unsigned short windowtype;
  /* 0x0004 */ unsigned short transformtype;
}; /* size: 0x0006 */

struct sortedItemsData_t
{
  /* 0x0000 */ int itemIndex;
  /* 0x0004 */ int itemValue;
  /* 0x0008 */ int completedChallengeBackgrounds[3];
}; /* size: 0x0014 */

struct HashInfo
{
  /* 0x0000 */ enum challengeTest_t type;
  /* 0x0004 */ unsigned int start;
  /* 0x0008 */ unsigned int length;
  /* 0x000c */ unsigned int position;
  /* 0x0010 */ unsigned int blockSize;
  /* 0x0014 */ long Padding_990;
  /* 0x0018 */ unsigned __int64 state;
}; /* size: 0x0020 */

struct ChallengeProbe
{
  /* 0x0000 */ unsigned __int64 key;
  /* 0x0008 */ unsigned __int64 result;
  /* 0x0010 */ unsigned int index;
  /* 0x0014 */ unsigned int startAddress;
  /* 0x0018 */ unsigned int blockSize;
  /* 0x001c */ void* hashHandle;
  /* 0x0020 */ BOOL started;
  /* 0x0021 */ char __PADDING__[7];
}; /* size: 0x0028 */

struct ChallengeState
{
  /* 0x0000 */ void* hashHandle;
  /* 0x0004 */ long Padding_991;
  /* 0x0008 */ struct ChallengeProbe probe;
  /* 0x0030 */ BOOL mipsterRunning;
  /* 0x0031 */ char __PADDING__[7];
}; /* size: 0x0038 */

struct BLOCKD
{
  /* 0x0000 */ short* qcoeff;
  /* 0x0004 */ short* dqcoeff;
  /* 0x0008 */ unsigned char* predictor;
  /* 0x000c */ short* diff;
  /* 0x0010 */ short* dequant;
  /* 0x0014 */ unsigned char** base_pre;
  /* 0x0018 */ int pre;
  /* 0x001c */ int pre_stride;
  /* 0x0020 */ unsigned char** base_dst;
  /* 0x0024 */ int dst;
  /* 0x0028 */ int dst_stride;
  /* 0x002c */ int eob;
  /* 0x0030 */ union b_mode_info bmi;
}; /* size: 0x0034 */

struct YV12_BUFFER_CONFIG
{
  /* 0x0000 */ int y_width;
  /* 0x0004 */ int y_height;
  /* 0x0008 */ int y_stride;
  /* 0x000c */ int uv_width;
  /* 0x0010 */ int uv_height;
  /* 0x0014 */ int uv_stride;
  /* 0x0018 */ unsigned char* y_buffer;
  /* 0x001c */ unsigned char* u_buffer;
  /* 0x0020 */ unsigned char* v_buffer;
  /* 0x0024 */ unsigned char* buffer_alloc;
  /* 0x0028 */ int border;
  /* 0x002c */ int frame_size;
  /* 0x0030 */ enum YUV_TYPE clrtype;
  /* 0x0034 */ int corrupted;
  /* 0x0038 */ int flags;
}; /* size: 0x003c */

class phys_static_array<float,512>
{
  /* 0x0000 */ char m_buffer[2048];
  /* 0x0800 */ float* const m_slot_array;
  /* 0x0804 */ int m_alloc_count;
}; /* size: 0x0810 */

typedef struct _finddata64i32_t
{
  /* 0x0000 */ unsigned int attrib;
  /* 0x0004 */ long Padding_992;
  /* 0x0008 */ __int64 time_create;
  /* 0x0010 */ __int64 time_access;
  /* 0x0018 */ __int64 time_write;
  /* 0x0020 */ unsigned long size;
  /* 0x0024 */ char name[260];
} finddata64i32_t, *Pfinddata64i32_t; /* size: 0x0128 */

struct snd_occlusion_cmd
{
  /* 0x0000 */ enum snd_occlusion_query_type type;
  union
  {
    /* 0x0004 */ struct snd_occlusion_multiple multiple;
    /* 0x0004 */ struct snd_occlusion_single single;
  }; /* size: 0x0020 */
}; /* size: 0x0024 */

struct RedBlackCacheNode
{
  /* 0x0000 */ struct RedBlackTreeNode rbNode;
  /* 0x0018 */ unsigned int timeStamp;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

struct RedBlackTree
{
  /* 0x0000 */ struct RedBlackTreeNode null;
  /* 0x0018 */ struct RedBlackTreeNode root;
  /* 0x0030 */ void* AllocNodeCallback /* function */;
  /* 0x0034 */ long __PADDING__[1];
}; /* size: 0x0038 */

struct XDollBoneOrientation
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ int boneFlags;
  /* 0x0010 */ union vec4_t orientation;
}; /* size: 0x0020 */

struct DynEnt_FadeData
{
  /* 0x0000 */ unsigned short id;
  /* 0x0002 */ char Padding_993[2];
  /* 0x0004 */ int startTime;
}; /* size: 0x0008 */

struct SndDspChamberlinState
{
  /* 0x0000 */ float z0;
  /* 0x0004 */ float z1;
}; /* size: 0x0008 */

struct SndDspChamberlinCoef
{
  /* 0x0000 */ float Fc;
  /* 0x0004 */ float Fs;
  /* 0x0008 */ float Q;
}; /* size: 0x000c */

struct socketpool_t
{
  /* 0x0000 */ int sendtime;
  /* 0x0004 */ unsigned int m_sock;
  /* 0x0008 */ int ready;
  /* 0x000c */ int sendcount;
}; /* size: 0x0010 */

struct PhysPresetInfo
{
  /* 0x0000 */ float mass;
  /* 0x0004 */ float bounce;
  /* 0x0008 */ float friction;
  /* 0x000c */ int isFrictionInfinity;
  /* 0x0010 */ float bulletForceScale;
  /* 0x0014 */ float explosiveForceScale;
  /* 0x0018 */ float piecesSpreadFraction;
  /* 0x001c */ float piecesUpwardVelocity;
  /* 0x0020 */ int canFloat;
  /* 0x0024 */ float gravityScale;
  /* 0x0028 */ union vec3_t centerOfMassOffset;
  /* 0x0034 */ union vec3_t buoyancyBoxMin;
  /* 0x0040 */ union vec3_t buoyancyBoxMax;
}; /* size: 0x004c */

struct SndDspBiQuadCoef
{
  /* 0x0000 */ float s[5];
}; /* size: 0x0014 */

struct DIDEVICEOBJECTDATA
{
  /* 0x0000 */ unsigned long dwOfs;
  /* 0x0004 */ unsigned long dwData;
  /* 0x0008 */ unsigned long dwTimeStamp;
  /* 0x000c */ unsigned long dwSequence;
  /* 0x0010 */ unsigned int uAppData;
}; /* size: 0x0014 */

typedef struct _XINPUT_VIBRATION
{
  /* 0x0000 */ unsigned short wLeftMotorSpeed;
  /* 0x0002 */ unsigned short wRightMotorSpeed;
} XINPUT_VIBRATION, *PXINPUT_VIBRATION; /* size: 0x0004 */

typedef struct _XINPUT_CAPABILITIES
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char SubType;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ struct _XINPUT_GAMEPAD Gamepad;
  /* 0x0010 */ struct _XINPUT_VIBRATION Vibration;
} XINPUT_CAPABILITIES, *PXINPUT_CAPABILITIES; /* size: 0x0014 */

struct XMAPLAYBACK;

struct FLAC__StreamDecoderPrivate;

struct RagdollSortStruct
{
  /* 0x0000 */ float distSq;
  /* 0x0004 */ struct RagdollBody* body;
}; /* size: 0x0008 */

struct LeagueSeason
{
  /* 0x0000 */ int id;
  /* 0x0004 */ const char* name;
  /* 0x0008 */ int startUTC;
  /* 0x000c */ int endUTC;
}; /* size: 0x0010 */

class WinSplashStartup
{
  /* 0x0000 */ BOOL started;
}; /* size: 0x0001 */

struct _DPA;

struct debugger_sval_s
{
  /* 0x0000 */ struct debugger_sval_s* next;
}; /* size: 0x0004 */

struct scrDebuggerGlob_t
{
  /* 0x0000 */ struct breakpointData_t breakpointData[132];
  /* 0x2d60 */ BOOL send_file_info;
  /* 0x2d61 */ char Padding_994[3];
  /* 0x2d64 */ struct breakpointData_t* activeBreakpoint;
  /* 0x2d68 */ struct VariableValue* activeBreakpointStack;
  /* 0x2d6c */ unsigned int activeBreakpointLocalID;
  /* 0x2d70 */ volatile BOOL atBreakpoint;
  /* 0x2d71 */ BOOL debugger_inited_system;
  /* 0x2d72 */ volatile BOOL abort;
  /* 0x2d73 */ BOOL forceBreak;
  /* 0x2d74 */ BOOL forceJump;
  /* 0x2d75 */ char Padding_995[3];
  /* 0x2d78 */ unsigned char* forceJumpPos;
  /* 0x2d7c */ BOOL testForDataBreakpoints;
  /* 0x2d7d */ BOOL testForNotifyBreakpoints;
  /* 0x2d7e */ BOOL reportThreadUsage;
  /* 0x2d7f */ char Padding_996;
  /* 0x2d80 */ const char* pendingShellCommand;
  /* 0x2d84 */ long __PADDING__[1];
}; /* size: 0x2d88 */

struct IDXGIAdapter1
{
}; /* size: 0x0004 */

struct IDXGIAdapter
{
}; /* size: 0x0004 */

struct SysInfo
{
  /* 0x0000 */ double cpuGHz;
  /* 0x0008 */ double configureGHz;
  /* 0x0010 */ int logicalCpuCount;
  /* 0x0014 */ int physicalCpuCount;
  /* 0x0018 */ int sysMB;
  /* 0x001c */ char gpuDescription[512];
  /* 0x021c */ char cpuVendor[13];
  /* 0x0229 */ char cpuName[49];
  /* 0x025a */ char __PADDING__[6];
}; /* size: 0x0260 */

struct StreamPosInfo
{
  /* 0x0000 */ unsigned char* pos;
  /* 0x0004 */ unsigned int index;
}; /* size: 0x0008 */

typedef struct _MINIDUMP_USER_STREAM_INFORMATION
{
  /* 0x0000 */ unsigned long UserStreamCount;
  /* 0x0004 */ struct _MINIDUMP_USER_STREAM* UserStreamArray;
} MINIDUMP_USER_STREAM_INFORMATION, *PMINIDUMP_USER_STREAM_INFORMATION; /* size: 0x0008 */

struct _IMAGELIST;

typedef struct _OSVERSIONINFOA
{
  /* 0x0000 */ unsigned long dwOSVersionInfoSize;
  /* 0x0004 */ unsigned long dwMajorVersion;
  /* 0x0008 */ unsigned long dwMinorVersion;
  /* 0x000c */ unsigned long dwBuildNumber;
  /* 0x0010 */ unsigned long dwPlatformId;
  /* 0x0014 */ char szCSDVersion[128];
} OSVERSIONINFOA, *POSVERSIONINFOA; /* size: 0x0094 */

struct devhostXAnimNode
{
  /* 0x0000 */ int depth;
  /* 0x0004 */ float goalWeight;
  /* 0x0008 */ float weight;
  /* 0x000c */ float rate;
  /* 0x0010 */ float time;
}; /* size: 0x0014 */

struct XAnimRootAdjustMat
{
  /* 0x0000 */ unsigned int modelIndex;
  /* 0x0004 */ union vec4_t quat;
  /* 0x0014 */ union vec3_t trans;
}; /* size: 0x0020 */

struct XAUDIO2_VOICE_DETAILS
{
  /* 0x0000 */ unsigned int CreationFlags;
  /* 0x0004 */ unsigned int InputChannels;
  /* 0x0008 */ unsigned int InputSampleRate;
}; /* size: 0x000c */

struct XAUDIO2_EFFECT_DESCRIPTOR
{
  /* 0x0000 */ struct IUnknown* pEffect;
  /* 0x0004 */ int InitialState;
  /* 0x0008 */ unsigned int OutputChannels;
}; /* size: 0x000c */

struct XAUDIO2_VOICE_STATE
{
  /* 0x0000 */ void* pCurrentBufferContext;
  /* 0x0004 */ unsigned int BuffersQueued;
  /* 0x0008 */ unsigned __int64 SamplesPlayed;
}; /* size: 0x0010 */

struct XAUDIO2_PERFORMANCE_DATA
{
  /* 0x0000 */ unsigned __int64 AudioCyclesSinceLastQuery;
  /* 0x0008 */ unsigned __int64 TotalCyclesSinceLastQuery;
  /* 0x0010 */ unsigned int MinimumCyclesPerQuantum;
  /* 0x0014 */ unsigned int MaximumCyclesPerQuantum;
  /* 0x0018 */ unsigned int MemoryUsageInBytes;
  /* 0x001c */ unsigned int CurrentLatencyInSamples;
  /* 0x0020 */ unsigned int GlitchesSinceEngineStarted;
  /* 0x0024 */ unsigned int ActiveSourceVoiceCount;
  /* 0x0028 */ unsigned int TotalSourceVoiceCount;
  /* 0x002c */ unsigned int ActiveSubmixVoiceCount;
  /* 0x0030 */ unsigned int ActiveResamplerCount;
  /* 0x0034 */ unsigned int ActiveMatrixMixCount;
  /* 0x0038 */ unsigned int ActiveXmaSourceVoices;
  /* 0x003c */ unsigned int ActiveXmaStreams;
}; /* size: 0x0040 */

class XAnimClientNotifyList
{
  /* 0x0000 */ unsigned char m_clientNotifyMemory[1280];
  /* 0x0500 */ int m_numNotifies;
}; /* size: 0x0504 */

struct FxEffectDefTableEntry
{
  /* 0x0000 */ unsigned int key;
  /* 0x0004 */ const struct FxEffectDef* effectDef;
}; /* size: 0x0008 */

struct FxEffectDefTable
{
  /* 0x0000 */ int count;
  /* 0x0004 */ struct FxEffectDefTableEntry entries[1024];
}; /* size: 0x2004 */

struct tMIXERCONTROLDETAILS_UNSIGNED
{
  /* 0x0000 */ unsigned long dwValue;
}; /* size: 0x0004 */

struct FxEffectField
{
  /* 0x0000 */ const char* keyName;
  /* 0x0004 */ void* handler /* function */;
}; /* size: 0x0008 */

struct nodespawn_t
{
  /* 0x0000 */ char* name;
  /* 0x0004 */ enum nodeType type;
}; /* size: 0x0008 */

struct WinVars_t
{
  /* 0x0000 */ struct HINSTANCE__* reflib_library;
  /* 0x0004 */ int reflib_active;
  /* 0x0008 */ struct HWND__* hWnd;
  /* 0x000c */ struct HINSTANCE__* hInstance;
  /* 0x0010 */ int activeApp;
  /* 0x0014 */ int isMinimized;
  /* 0x0018 */ int recenterMouse;
  /* 0x001c */ struct HHOOK__* lowLevelKeyboardHook;
  /* 0x0020 */ unsigned int sysMsgTime;
}; /* size: 0x0024 */

struct NodeNums
{
  /* 0x0000 */ int array[8192][2];
}; /* size: 0x10000 */

struct PathLinkInfo
{
  /* 0x0000 */ unsigned short from;
  /* 0x0002 */ unsigned short to;
  /* 0x0004 */ unsigned short prev;
  /* 0x0006 */ unsigned short next;
}; /* size: 0x0008 */

struct pathlocal_t
{
  /* 0x0000 */ struct PathLinkInfo pathLinkInfoArray[2560];
  /* 0x5000 */ int pathLinkInfoArrayInited;
  /* 0x5004 */ unsigned int actualNodeCount;
  /* 0x5008 */ unsigned int extraNodes;
  /* 0x500c */ unsigned int originErrors;
  struct
  {
    /* 0x5010 */ union vec3_t origin;
    /* 0x501c */ union vec2_t enemyPos;
    /* 0x5024 */ int checkEnemyPos;
    /* 0x5028 */ float maxDist;
    /* 0x502c */ float maxDistSq;
    /* 0x5030 */ float maxHeight;
    /* 0x5034 */ float maxHeightSq;
    /* 0x5038 */ int typeFlags;
    /* 0x503c */ int spawnFlags;
    /* 0x5040 */ struct pathsort_t* nodes;
    /* 0x5044 */ int maxNodes;
    /* 0x5048 */ int nodeCount;
  } /* size: 0x003c */ circle;
  /* 0x504c */ long __PADDING__[13];
}; /* size: 0x5080 */

struct tagMIXERLINECONTROLSA
{
  /* 0x0000 */ unsigned long cbStruct;
  /* 0x0004 */ unsigned long dwLineID;
  union
  {
    /* 0x0008 */ unsigned long dwControlID;
    /* 0x0008 */ unsigned long dwControlType;
  }; /* size: 0x0004 */
  /* 0x000c */ unsigned long cControls;
  /* 0x0010 */ unsigned long cbmxctrl;
  /* 0x0014 */ struct tagMIXERCONTROLA* pamxctrl;
}; /* size: 0x0018 */

struct tagMIXERCAPSA
{
  /* 0x0000 */ unsigned short wMid;
  /* 0x0002 */ unsigned short wPid;
  /* 0x0004 */ unsigned int vDriverVersion;
  /* 0x0008 */ char szPname[32];
  /* 0x0028 */ unsigned long fdwSupport;
  /* 0x002c */ unsigned long cDestinations;
}; /* size: 0x0030 */

struct NodeTypeToName
{
  /* 0x0000 */ enum nodeType type;
  /* 0x0004 */ const char* name;
}; /* size: 0x0008 */

typedef struct _DSBCAPS
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long dwBufferBytes;
  /* 0x000c */ unsigned long dwUnlockTransferRate;
  /* 0x0010 */ unsigned long dwPlayCpuOverhead;
} DSBCAPS, *PDSBCAPS; /* size: 0x0014 */

class colgeom_debug_renderer_t
{
  /* 0x0000 */ long Padding_997[32];
  /* 0x0080 */ union vec3_t lightPos;
  /* 0x008c */ BOOL bRenderStaticCollision;
  /* 0x008d */ BOOL bRenderBrushes;
}; /* size: 0x0090 */

class phys_free_list<VehicleParameter>::T_internal
{
  /* 0x0000 */ long Padding_998[2];
  /* 0x0008 */ struct VehicleParameter m_data;
  /* 0x0104 */ int m_ptr_list_index;
}; /* size: 0x0108 */

struct scrMemTreeGlob_t
{
  /* 0x0000 */ struct MemoryNode* nodes;
  /* 0x0004 */ long Padding_999[31];
  /* 0x0080 */ unsigned char leftBits[256];
  /* 0x0180 */ unsigned char numBits[256];
  /* 0x0280 */ unsigned char logBits[256];
  /* 0x0380 */ unsigned short* head;
  /* 0x0384 */ int totalAlloc;
  /* 0x0388 */ int totalAllocBuckets;
  /* 0x038c */ int avgAlloc;
  /* 0x0390 */ int avgAllocBytes;
  /* 0x0394 */ long __PADDING__[27];
}; /* size: 0x0400 */

struct inflate_state
{
  /* 0x0000 */ enum inflate_mode mode;
  /* 0x0004 */ int last;
  /* 0x0008 */ int wrap;
  /* 0x000c */ int havedict;
  /* 0x0010 */ int flags;
  /* 0x0014 */ unsigned int dmax;
  /* 0x0018 */ unsigned long check;
  /* 0x001c */ unsigned long total;
  /* 0x0020 */ struct gz_header_s* head;
  /* 0x0024 */ unsigned int wbits;
  /* 0x0028 */ unsigned int wsize;
  /* 0x002c */ unsigned int whave;
  /* 0x0030 */ unsigned int write;
  /* 0x0034 */ unsigned char* window;
  /* 0x0038 */ unsigned long hold;
  /* 0x003c */ unsigned int bits;
  /* 0x0040 */ unsigned int length;
  /* 0x0044 */ unsigned int offset;
  /* 0x0048 */ unsigned int extra;
  /* 0x004c */ const struct code* lencode;
  /* 0x0050 */ const struct code* distcode;
  /* 0x0054 */ unsigned int lenbits;
  /* 0x0058 */ unsigned int distbits;
  /* 0x005c */ unsigned int ncode;
  /* 0x0060 */ unsigned int nlen;
  /* 0x0064 */ unsigned int ndist;
  /* 0x0068 */ unsigned int have;
  /* 0x006c */ struct code* next;
  /* 0x0070 */ unsigned short lens[320];
  /* 0x02f0 */ unsigned short work[288];
  /* 0x0530 */ struct code codes[2048];
}; /* size: 0x2530 */

struct config_s
{
  /* 0x0000 */ unsigned short good_length;
  /* 0x0002 */ unsigned short max_lazy;
  /* 0x0004 */ unsigned short nice_length;
  /* 0x0006 */ unsigned short max_chain;
  /* 0x0008 */ void* func /* function */;
}; /* size: 0x000c */

typedef struct _watchNode_t
{
  /* 0x0000 */ const char* refText;
  /* 0x0004 */ const char* valueText;
  /* 0x0008 */ unsigned int objectId;
  /* 0x000c */ unsigned char objectType;
  /* 0x000d */ unsigned char oldObjectType;
  /* 0x000e */ char Padding_1000[2];
  /* 0x0010 */ struct VariableValue value;
  /* 0x0018 */ struct ScriptExpression_t expr;
  /* 0x0024 */ BOOL is_expand;
  /* 0x0025 */ BOOL is_valid_value;
  /* 0x0026 */ BOOL is_thread_list;
  /* 0x0027 */ BOOL is_endon_list;
} watchNode_t, *PwatchNode_t; /* size: 0x0028 */

struct scrVmGlob_t
{
  /* 0x0000 */ struct VariableValue eval_stack[2];
  /* 0x0010 */ const char* dialog_error_message;
  /* 0x0014 */ int loading;
  /* 0x0018 */ int starttime;
  /* 0x001c */ unsigned int localVarsStack[2048];
  /* 0x201c */ BOOL recordPlace;
  /* 0x201d */ char Padding_1001[3];
  /* 0x2020 */ const char* lastFileName;
  /* 0x2024 */ int lastLine;
}; /* size: 0x2028 */

struct entityHandler_t
{
  /* 0x0000 */ void* think /* function */;
  /* 0x0004 */ void* reached /* function */;
  /* 0x0008 */ void* blocked /* function */;
  /* 0x000c */ void* touch /* function */;
  /* 0x0010 */ void* use /* function */;
  /* 0x0014 */ void* pain /* function */;
  /* 0x0018 */ void* react /* function */;
  /* 0x001c */ void* die /* function */;
  /* 0x0020 */ void* entinfo /* function */;
  /* 0x0024 */ void* controller /* function */;
  /* 0x0028 */ int methodOfDeath;
  /* 0x002c */ int splashMethodOfDeath;
}; /* size: 0x0030 */

struct FxSpatialFrame
{
  /* 0x0000 */ union vec4_t quat;
  /* 0x0010 */ union vec3_t origin;
}; /* size: 0x001c */

union FxBoltAndSortOrder
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int sortOrder : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned int type : 2; /* bit position: 8 */
      /* 0x0000 */ unsigned int dobjHandle : 11; /* bit position: 10 */
      /* 0x0000 */ unsigned int temporalBits : 1; /* bit position: 21 */
      /* 0x0000 */ unsigned int boneIndex : 9; /* bit position: 22 */
    }; /* bitfield */
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int _sortOrder : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned int _type : 2; /* bit position: 8 */
      /* 0x0000 */ unsigned int absDynEntId : 21; /* bit position: 10 */
    }; /* bitfield */
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct FxEffect
{
  union
  {
    /* 0x0000 */ const int HANDLE_SCALE;
    /* 0x0000 */ struct orientation_t boneOffset;
  }; /* size: 0x0030 */
  /* 0x0030 */ struct FxSpatialFrame frameAtSpawn;
  /* 0x004c */ struct FxSpatialFrame frameNow;
  /* 0x0068 */ struct FxSpatialFrame framePrev;
  /* 0x0084 */ struct FxSpatialFrame effectToGroundEntAtSpawn;
  union
  {
    /* 0x00a0 */ const struct FxEffectDef* def;
    /* 0x00a0 */ const struct FxEffectDef* localDef;
  }; /* size: 0x0004 */
  /* 0x00a4 */ unsigned short firstElemHandle[3];
  /* 0x00aa */ unsigned short firstSortedElemHandle;
  /* 0x00ac */ unsigned short firstTrailHandle;
  /* 0x00ae */ unsigned short randomSeed;
  /* 0x00b0 */ unsigned int ownerEffect;
  /* 0x00b4 */ union FxBoltAndSortOrder boltAndSortOrder;
  /* 0x00b8 */ volatile long frameCount;
  /* 0x00bc */ int msecBegin;
  /* 0x00c0 */ int msecLastUpdate;
  /* 0x00c4 */ float distanceTraveled;
  /* 0x00c8 */ volatile long elemCount[3];
  /* 0x00d4 */ unsigned int uniqueHandle;
  /* 0x00d8 */ float occlusionVisibility;
  /* 0x00dc */ union vec4_t lightGridColor;
  /* 0x00ec */ float primaryLightFraction;
  /* 0x00f0 */ int lightingOriginOffset;
  /* 0x00f4 */ unsigned short occlusionQueryHandle;
  /* 0x00f6 */ short groundEntityNum;
  /* 0x00f8 */ short occlusionRefCount;
  /* 0x00fa */ unsigned char flags;
  /* 0x00fb */ unsigned char culled;
}; /* size: 0x00fc */

class phys_simple_allocator<auto_rigid_body>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

struct scrParserPub_t
{
  /* 0x0000 */ struct SourceBufferInfo* sourceBufferLookup;
  /* 0x0004 */ unsigned int sourceBufferLookupLen;
  /* 0x0008 */ const char* scriptfilename;
  /* 0x000c */ const char* sourceBuf;
}; /* size: 0x0010 */

struct FxCameraUpdate
{
  /* 0x0000 */ union vec3_t vieworg;
  /* 0x000c */ union vec3_t viewaxis[3];
  /* 0x0030 */ float tanHalfFovX;
  /* 0x0034 */ float tanHalfFovY;
  /* 0x0038 */ float zfar;
}; /* size: 0x003c */

struct ContinueStatementInfo
{
  /* 0x0000 */ unsigned char* codePos;
  /* 0x0004 */ unsigned char* nextCodePos;
  /* 0x0008 */ struct ContinueStatementInfo* next;
}; /* size: 0x000c */

struct actor_physics_local_t
{
  /* 0x0000 */ float fFrameTime;
  /* 0x0004 */ int bIsWalking;
  /* 0x0008 */ int bGroundPlane;
  /* 0x000c */ long Padding_1002;
  /* 0x0010 */ struct trace_t groundTrace;
  /* 0x0050 */ float fImpactSpeed;
  /* 0x0054 */ union vec3_t vPrevOrigin;
  /* 0x0060 */ union vec3_t vPrevVelocity;
  /* 0x006c */ int iTraceMask;
  /* 0x0070 */ float stepheight;
  /* 0x0074 */ long __PADDING__[3];
}; /* size: 0x0080 */

struct SimplePlaneIntersection
{
  /* 0x0000 */ union vec3_t xyz;
  /* 0x000c */ int planeIndex[3];
}; /* size: 0x0018 */

struct BuildBounds
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
}; /* size: 0x0018 */

class ScriptTokenizer
{
  /* 0x0000 */ enum scriptInstance_t inst;
  /* 0x0004 */ int m_iNumInStack;
  /* 0x0008 */ char m_stack[256][40];
}; /* size: 0x2808 */

class CustomSearchInfo_FindPath
{
  union
  {
    struct
    {
      /* 0x0000 */ struct pathnode_t* m_pNodeTo;
      /* 0x0004 */ union vec3_t startPos;
    }; /* size: 0x0010 */
    /* 0x0000 */ const int NUM_RANDOM_WEIGHTS;
  }; /* size: 0x0010 */
  /* 0x0010 */ int randomWeightIndex;
  /* 0x0014 */ float randomNodeCosts[4];
  /* 0x0024 */ float chokePointWeights[4];
  /* 0x0034 */ float negotiationOverlapCost;
}; /* size: 0x0038 */

struct Sphere
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ float radius;
  /* 0x0010 */ float radiusSq;
}; /* size: 0x0014 */

class CustomSearchInfo_CouldAttack
{
  /* 0x0000 */ struct pathnode_t* m_pNodeTo;
  /* 0x0004 */ struct pathnode_t* attackNode;
}; /* size: 0x0008 */

class CustomSearchInfo_FindPathNotCrossPlanes
{
  /* 0x0000 */ long Padding_1003[14];
  /* 0x0038 */ int m_iPlaneCount;
  /* 0x003c */ union vec2_t* m_vNormal;
  /* 0x0040 */ float* m_fDist;
}; /* size: 0x0044 */

struct FxMarkPoint
{
  /* 0x0000 */ union vec3_t xyz;
  /* 0x000c */ union vec2_t lmapCoord;
  /* 0x0014 */ union vec3_t normal;
}; /* size: 0x0020 */

struct FxPointGroup
{
  /* 0x0000 */ struct FxMarkPoint points[2];
  /* 0x0040 */ int next;
}; /* size: 0x0044 */

union FxPointGroupPool
{
  union
  {
    /* 0x0000 */ union FxPointGroupPool* nextFreePointGroup;
    /* 0x0000 */ struct FxPointGroup pointGroup;
  }; /* size: 0x0044 */
}; /* size: 0x0044 */

class CustomSearchInfo_FindPathInCylinderWithLOS
{
  /* 0x0000 */ long Padding_1004[6];
  /* 0x0018 */ const struct actor_goal_s* goal;
}; /* size: 0x001c */

class CustomSearchInfo_FindPathWithWidth
{
  /* 0x0000 */ struct pathnode_t* m_pNodeTo;
  /* 0x0004 */ float width;
  /* 0x0008 */ union vec2_t perp;
}; /* size: 0x0010 */

class BotSearchInfo
{
  /* 0x0000 */ const struct pathnode_t* m_pNodeTo;
  /* 0x0004 */ enum team_t m_team;
  /* 0x0008 */ int m_owner;
}; /* size: 0x000c */

class bitarray<24576>
{
  /* 0x0000 */ int array[768];
}; /* size: 0x0c00 */

struct BspChunk
{
  /* 0x0000 */ enum LumpType type;
  /* 0x0004 */ unsigned int length;
}; /* size: 0x0008 */

struct DObjTrace_s
{
  /* 0x0000 */ float fraction;
  /* 0x0004 */ int sflags;
  /* 0x0008 */ union vec3_t normal;
  /* 0x0014 */ unsigned short modelIndex;
  /* 0x0016 */ unsigned short partName;
  /* 0x0018 */ unsigned short partGroup;
  /* 0x001a */ char Padding_1005[2];
  /* 0x001c */ int localBoneIndex;
}; /* size: 0x0020 */

struct stb_vorbis_alloc
{
  /* 0x0000 */ char* alloc_buffer;
  /* 0x0004 */ int alloc_buffer_length_in_bytes;
}; /* size: 0x0008 */

struct AIEventListener
{
  /* 0x0000 */ int entIndex;
  /* 0x0004 */ unsigned int events;
}; /* size: 0x0008 */

class std::basic_ostream<char,std::char_traits<char> >::_Sentry_base
{
  /* 0x0000 */ class std::basic_ostream<char,std::char_traits<char> >& _Myostr;
}; /* size: 0x0004 */

struct scr_data_t
{
  /* 0x0000 */ int level_gamemode_callback_setup;
  /* 0x0004 */ int levelscript;
  /* 0x0008 */ int scripted_init;
  /* 0x000c */ int gametypescript;
  /* 0x0010 */ int allies;
  /* 0x0014 */ int axis;
  struct
  {
    /* 0x0018 */ int main;
    /* 0x001c */ int startupgametype;
    /* 0x0020 */ int playerconnect;
    /* 0x0024 */ int playerdisconnect;
    /* 0x0028 */ int playerdamage;
    /* 0x002c */ int playerkilled;
    /* 0x0030 */ int playermelee;
    /* 0x0034 */ int votecalled;
    /* 0x0038 */ int playervote;
    /* 0x003c */ int playerrevive;
    /* 0x0040 */ int actordamage;
    /* 0x0044 */ int actorkilled;
    /* 0x0048 */ int vehicledamage;
    /* 0x004c */ int vehicleradiusdamage;
    /* 0x0050 */ int playerlaststand;
    /* 0x0054 */ int playermigrated;
    /* 0x0058 */ int hostmigration;
    /* 0x005c */ int hostmigration_save;
    /* 0x0060 */ int prehostmigration_save;
    /* 0x0064 */ int iNumGameTypes;
    /* 0x0068 */ struct gameTypeScript_t list[32];
  } /* size: 0x10d0 */ gametype;
  /* 0x10e8 */ int delete_;
  /* 0x10ec */ int initstructs;
  /* 0x10f0 */ int createstruct;
  /* 0x10f4 */ int findstruct;
  /* 0x10f8 */ struct AnimScriptList dogAnim;
  /* 0x1e00 */ struct AnimScriptList zombieAnim;
  /* 0x2b08 */ struct AnimScriptList zombieDogAnim;
  /* 0x3810 */ struct corpseInfo_t playerCorpseInfo[4];
  /* 0x5890 */ struct XAnimTree_s* actorXAnimTrees[32];
  /* 0x5910 */ struct corpseInfo_t actorCorpseInfo[8];
  /* 0x9a10 */ int destructible_callback;
  /* 0x9a14 */ int challenge_callback;
  /* 0x9a18 */ int gunchallenge_callback;
  /* 0x9a1c */ int rankup_callback;
  /* 0x9a20 */ int medal_callback;
  /* 0x9a24 */ int onaddplayerstat_scriptedprocesscontracts_callback;
  /* 0x9a28 */ int onaddweaponstat_scriptedprocesscontracts_callback;
  /* 0x9a2c */ int givecontractrewards_callback;
  /* 0x9a30 */ int updatespawnpoints;
  /* 0x9a34 */ int glassSmash;
  /* 0x9a38 */ int finalizeInitialization;
  /* 0x9a3c */ int menuresponse_callback;
}; /* size: 0x9a40 */

struct stb_vorbis
{
  /* 0x0000 */ unsigned int sample_rate;
  /* 0x0004 */ int channels;
  /* 0x0008 */ unsigned int setup_memory_required;
  /* 0x000c */ unsigned int temp_memory_required;
  /* 0x0010 */ unsigned int setup_temp_memory_required;
  /* 0x0014 */ struct _iobuf* f;
  /* 0x0018 */ unsigned int f_start;
  /* 0x001c */ int close_on_free;
  /* 0x0020 */ unsigned char* stream;
  /* 0x0024 */ unsigned char* stream_start;
  /* 0x0028 */ unsigned char* stream_end;
  /* 0x002c */ unsigned int stream_len;
  /* 0x0030 */ unsigned char push_mode;
  /* 0x0031 */ unsigned char packet_mode;
  /* 0x0032 */ char Padding_1006[2];
  /* 0x0034 */ unsigned int first_audio_page_offset;
  /* 0x0038 */ struct ProbedPage p_first;
  /* 0x004c */ struct ProbedPage p_last;
  /* 0x0060 */ struct stb_vorbis_alloc alloc;
  /* 0x0068 */ int setup_offset;
  /* 0x006c */ int temp_offset;
  /* 0x0070 */ int eof;
  /* 0x0074 */ enum STBVorbisError error;
  /* 0x0078 */ int blocksize[2];
  /* 0x0080 */ int blocksize_0;
  /* 0x0084 */ int blocksize_1;
  /* 0x0088 */ int codebook_count;
  /* 0x008c */ struct Codebook* codebooks;
  /* 0x0090 */ int floor_count;
  /* 0x0094 */ unsigned short floor_types[64];
  /* 0x0114 */ union Floor* floor_config;
  /* 0x0118 */ int residue_count;
  /* 0x011c */ unsigned short residue_types[64];
  /* 0x019c */ struct Residue* residue_config;
  /* 0x01a0 */ int mapping_count;
  /* 0x01a4 */ struct Mapping* mapping;
  /* 0x01a8 */ int mode_count;
  /* 0x01ac */ struct Mode mode_config[64];
  /* 0x032c */ unsigned int total_samples;
  /* 0x0330 */ float* channel_buffers[16];
  /* 0x0370 */ float* outputs[16];
  /* 0x03b0 */ float* previous_window[16];
  /* 0x03f0 */ int previous_length;
  /* 0x03f4 */ short* finalY[16];
  /* 0x0434 */ unsigned int current_loc;
  /* 0x0438 */ int current_loc_valid;
  /* 0x043c */ float* A[2];
  /* 0x0444 */ float* B[2];
  /* 0x044c */ float* C[2];
  /* 0x0454 */ float* window[2];
  /* 0x045c */ unsigned short* bit_reverse[2];
  /* 0x0464 */ unsigned int serial;
  /* 0x0468 */ int last_page;
  /* 0x046c */ int segment_count;
  /* 0x0470 */ unsigned char segments[255];
  /* 0x056f */ unsigned char page_flag;
  /* 0x0570 */ unsigned char bytes_in_seg;
  /* 0x0571 */ unsigned char first_decode;
  /* 0x0572 */ char Padding_1007[2];
  /* 0x0574 */ int next_seg;
  /* 0x0578 */ int last_seg;
  /* 0x057c */ int last_seg_which;
  /* 0x0580 */ unsigned int acc;
  /* 0x0584 */ int valid_bits;
  /* 0x0588 */ int packet_bytes;
  /* 0x058c */ int end_seg_with_known_loc;
  /* 0x0590 */ unsigned int known_loc_for_packet;
  /* 0x0594 */ int discard_samples_deferred;
  /* 0x0598 */ unsigned int samples_output;
  /* 0x059c */ int page_crc_tests;
  /* 0x05a0 */ struct CRCscan scan[4];
  /* 0x05f0 */ int channel_buffer_start;
  /* 0x05f4 */ int channel_buffer_end;
  /* 0x05f8 */ struct stb_vorbis_packet* packet;
}; /* size: 0x05fc */

struct checkStopParams_t
{
  /* 0x0000 */ BOOL hadPath;
  /* 0x0001 */ char Padding_1008[3];
  /* 0x0004 */ union vec3_t lastPathLookaheadDir;
  /* 0x0010 */ union vec3_t lastPathGoal;
  /* 0x001c */ const struct pathnode_t* node;
  /* 0x0020 */ const struct pathnode_t* prevNode;
}; /* size: 0x0024 */

struct `anonymous-namespace'::CommandHandler
{
  /* 0x0000 */ char name[32];
  /* 0x0020 */ void* proc /* function */;
}; /* size: 0x0024 */

struct searchState_t
{
  /* 0x0000 */ struct ddlDef_t* ddl;
  /* 0x0004 */ int offset;
  /* 0x0008 */ char path[256];
  /* 0x0108 */ struct ddlMemberDef_t* member;
}; /* size: 0x010c */

struct stype_t
{
  /* 0x0000 */ union sval_u val;
  /* 0x0004 */ unsigned int pos;
}; /* size: 0x0008 */

struct objFileInfo_t
{
  /* 0x0000 */ struct GSC_OBJ* activeVersion;
  /* 0x0004 */ struct GSC_OBJ* baselineVersion;
  /* 0x0008 */ struct debugFileInfo_t debugInfo;
  /* 0x0028 */ struct gscProfileInfo_t* profileInfo;
  /* 0x002c */ int profileInfoCount;
}; /* size: 0x0030 */

struct GSC_OBJ
{
  /* 0x0000 */ char magic[8];
  /* 0x0008 */ unsigned long source_crc;
  /* 0x000c */ unsigned long include_offset;
  /* 0x0010 */ unsigned long animtree_offset;
  /* 0x0014 */ unsigned long cseg_offset;
  /* 0x0018 */ unsigned long stringtablefixup_offset;
  /* 0x001c */ unsigned long exports_offset;
  /* 0x0020 */ unsigned long imports_offset;
  /* 0x0024 */ unsigned long fixup_offset;
  /* 0x0028 */ unsigned long profile_offset;
  /* 0x002c */ unsigned long cseg_size;
  /* 0x0030 */ unsigned short name;
  /* 0x0032 */ unsigned short stringtablefixup_count;
  /* 0x0034 */ unsigned short exports_count;
  /* 0x0036 */ unsigned short imports_count;
  /* 0x0038 */ unsigned short fixup_count;
  /* 0x003a */ unsigned short profile_count;
  /* 0x003c */ unsigned char include_count;
  /* 0x003d */ unsigned char animtree_count;
  /* 0x003e */ unsigned char flags;
  /* 0x003f */ char __PADDING__[1];
}; /* size: 0x0040 */

struct RedBlackCache
{
  /* 0x0000 */ struct RedBlackTree rbTree;
  /* 0x0038 */ struct RedBlackCacheNode* firstNode;
  /* 0x003c */ unsigned int sizeofNode;
  /* 0x0040 */ unsigned int nodeCount;
  /* 0x0044 */ unsigned int minTimeToFree;
  /* 0x0048 */ unsigned int allocCount;
  /* 0x004c */ unsigned int freeWalk;
  /* 0x0050 */ unsigned int timeStamp;
  /* 0x0054 */ BOOL isNewNode;
  /* 0x0055 */ char Padding_1009[3];
  /* 0x0058 */ void* FreeCallback /* function */;
  /* 0x005c */ long __PADDING__[1];
}; /* size: 0x0060 */

class std::basic_istream<wchar_t,std::char_traits<wchar_t> >
{
  /* 0x0000 */ long Padding_1010[2];
  /* 0x0008 */ __int64 _Chcount;
}; /* size: 0x0058 */

struct VariableDebugInfo
{
  /* 0x0000 */ unsigned char* pos;
  /* 0x0004 */ const char* fileName;
  /* 0x0008 */ const char* functionName;
  /* 0x000c */ int varUsage;
}; /* size: 0x0010 */

struct DvarSetConfigInfo
{
  /* 0x0000 */ int start;
  /* 0x0004 */ int max;
  /* 0x0008 */ int bit;
}; /* size: 0x000c */

struct SourceBufferInfo
{
  /* 0x0000 */ const unsigned char* codePos;
  /* 0x0004 */ char* buf;
  /* 0x0008 */ const char* sourceBuf;
  /* 0x000c */ int len;
  /* 0x0010 */ int sortedIndex;
  /* 0x0014 */ BOOL archive;
  /* 0x0015 */ char __PADDING__[3];
}; /* size: 0x0018 */

struct GSC_PROFILE_ITEM
{
  /* 0x0000 */ unsigned long name;
  /* 0x0004 */ unsigned long address;
}; /* size: 0x0008 */

struct GSC_EXPORT_ITEM
{
  /* 0x0000 */ unsigned long checksum;
  /* 0x0004 */ unsigned long address;
  /* 0x0008 */ unsigned short name;
  /* 0x000a */ unsigned char param_count;
  /* 0x000b */ unsigned char flags;
}; /* size: 0x000c */

struct MemoryNode
{
  /* 0x0000 */ unsigned short prev;
  /* 0x0002 */ unsigned short next;
  /* 0x0004 */ unsigned int padding[5];
}; /* size: 0x0018 */

struct winDmCommand
{
  /* 0x0000 */ unsigned int isBinarySend;
  /* 0x0004 */ unsigned int commandStrLength;
  /* 0x0008 */ unsigned int maxResponseLength;
}; /* size: 0x000c */

struct debuggerVarUsageData_t
{
  /* 0x0000 */ const char* filename;
  /* 0x0004 */ int funcIndex;
  /* 0x0008 */ int lineNum;
  /* 0x000c */ int count;
  /* 0x0010 */ int varCount;
  /* 0x0014 */ int endonCount;
  /* 0x0018 */ unsigned int threadId;
  /* 0x001c */ int index;
}; /* size: 0x0020 */

struct ENT_IDS
{
  /* 0x0000 */ unsigned int id;
  /* 0x0004 */ unsigned short c;
  /* 0x0006 */ unsigned short entnum;
}; /* size: 0x0008 */

struct scrCompileGlob_t
{
  /* 0x0000 */ unsigned char* codePos;
  /* 0x0004 */ unsigned char* prevOpcodePos;
  /* 0x0008 */ unsigned int filePosId;
  /* 0x000c */ unsigned int fileCountId;
  /* 0x0010 */ int cumulOffset;
  /* 0x0014 */ int maxOffset;
  /* 0x0018 */ int maxCallOffset;
  /* 0x001c */ BOOL bConstRefCount;
  /* 0x001d */ BOOL in_developer_thread;
  /* 0x001e */ char Padding_1011[2];
  /* 0x0020 */ unsigned int developer_thread_sourcePos;
  /* 0x0024 */ BOOL firstThread[2];
  /* 0x0026 */ char Padding_1012[2];
  /* 0x0028 */ struct CaseStatementInfo* currentCaseStatement;
  /* 0x002c */ BOOL bCanBreak;
  /* 0x002d */ char Padding_1013[3];
  /* 0x0030 */ struct BreakStatementInfo* currentBreakStatement;
  /* 0x0034 */ BOOL bCanContinue;
  /* 0x0035 */ char Padding_1014[3];
  /* 0x0038 */ struct ContinueStatementInfo* currentContinueStatement;
  /* 0x003c */ struct scr_block_s** breakChildBlocks;
  /* 0x0040 */ int* breakChildCount;
  /* 0x0044 */ struct scr_block_s* breakBlock;
  /* 0x0048 */ struct scr_block_s** continueChildBlocks;
  /* 0x004c */ int* continueChildCount;
  /* 0x0050 */ BOOL forceNotCreate;
  /* 0x0051 */ char Padding_1015[3];
  /* 0x0054 */ struct PrecacheEntry* precachescriptList;
  /* 0x0058 */ struct VariableCompileValue value_start[32];
}; /* size: 0x0258 */

struct MacroBlockD
{
  /* 0x0000 */ short diff[400];
  /* 0x0320 */ unsigned char predictor[384];
  /* 0x04a0 */ short qcoeff[400];
  /* 0x07c0 */ short dqcoeff[400];
  /* 0x0ae0 */ char eobs[25];
  /* 0x0af9 */ char Padding_1016[3];
  /* 0x0afc */ struct BLOCKD block[25];
  /* 0x1010 */ struct YV12_BUFFER_CONFIG pre;
  /* 0x104c */ struct YV12_BUFFER_CONFIG dst;
  /* 0x1088 */ struct MODE_INFO* mode_info_context;
  /* 0x108c */ int mode_info_stride;
  /* 0x1090 */ enum FRAME_TYPE frame_type;
  /* 0x1094 */ int up_available;
  /* 0x1098 */ int left_available;
  /* 0x109c */ struct ENTROPY_CONTEXT_PLANES* above_context;
  /* 0x10a0 */ struct ENTROPY_CONTEXT_PLANES* left_context;
  /* 0x10a4 */ unsigned char segmentation_enabled;
  /* 0x10a5 */ unsigned char update_mb_segmentation_map;
  /* 0x10a6 */ unsigned char update_mb_segmentation_data;
  /* 0x10a7 */ unsigned char mb_segement_abs_delta;
  /* 0x10a8 */ unsigned char mb_segment_tree_probs[3];
  /* 0x10ab */ char segment_feature_data[4][2];
  /* 0x10b3 */ unsigned char mode_ref_lf_delta_enabled;
  /* 0x10b4 */ unsigned char mode_ref_lf_delta_update;
  /* 0x10b5 */ char last_ref_lf_deltas[4];
  /* 0x10b9 */ char ref_lf_deltas[4];
  /* 0x10bd */ char last_mode_lf_deltas[4];
  /* 0x10c1 */ char mode_lf_deltas[4];
  /* 0x10c5 */ char Padding_1017[3];
  /* 0x10c8 */ int mb_to_left_edge;
  /* 0x10cc */ int mb_to_right_edge;
  /* 0x10d0 */ int mb_to_top_edge;
  /* 0x10d4 */ int mb_to_bottom_edge;
  /* 0x10d8 */ int ref_frame_cost[4];
  /* 0x10e8 */ unsigned int frames_since_golden;
  /* 0x10ec */ unsigned int frames_till_alt_ref_frame;
  /* 0x10f0 */ void* subpixel_predict /* function */;
  /* 0x10f4 */ void* subpixel_predict8x4 /* function */;
  /* 0x10f8 */ void* subpixel_predict8x8 /* function */;
  /* 0x10fc */ void* subpixel_predict16x16 /* function */;
  /* 0x1100 */ void* current_bc;
  /* 0x1104 */ int corrupted;
  /* 0x1108 */ long __PADDING__[2];
}; /* size: 0x1110 */

struct CaseStatementInfo
{
  /* 0x0000 */ unsigned int name;
  /* 0x0004 */ unsigned char* codePos;
  /* 0x0008 */ unsigned int sourcePos;
  /* 0x000c */ struct CaseStatementInfo* next;
}; /* size: 0x0010 */

struct BreakStatementInfo
{
  /* 0x0000 */ unsigned char* codePos;
  /* 0x0004 */ unsigned char* nextCodePos;
  /* 0x0008 */ struct BreakStatementInfo* next;
}; /* size: 0x000c */

struct infoParm_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int clearSolid;
  /* 0x0008 */ int surfaceFlags;
  /* 0x000c */ int contents;
  /* 0x0010 */ int toolFlags;
}; /* size: 0x0014 */

struct hostent
{
  /* 0x0000 */ char* h_name;
  /* 0x0004 */ char** h_aliases;
  /* 0x0008 */ short h_addrtype;
  /* 0x000a */ short h_length;
  /* 0x000c */ char** h_addr_list;
}; /* size: 0x0010 */

struct DataNode
{
  /* 0x0000 */ struct DataNode* next;
  /* 0x0004 */ enum DataNodeType type;
  /* 0x0008 */ char* data;
  /* 0x000c */ int len;
}; /* size: 0x0010 */

struct MD5_CTX
{
  /* 0x0000 */ unsigned long i[2];
  /* 0x0008 */ unsigned long buf[4];
  /* 0x0018 */ unsigned char in[64];
  /* 0x0058 */ unsigned char digest[16];
}; /* size: 0x0068 */

struct ButtonToCodeMap_t
{
  /* 0x0000 */ enum GamePadButton padButton;
  /* 0x0004 */ int code;
}; /* size: 0x0008 */

struct flameRenderList_s
{
  /* 0x0000 */ union vec3_t fuelVerts[128];
  /* 0x0600 */ union vec3_t flameVerts[128];
  /* 0x0c00 */ struct flameRender_s* flameRend;
}; /* size: 0x0c04 */

struct DIDEVICEOBJECTINSTANCEA
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ struct _GUID guidType;
  /* 0x0014 */ unsigned long dwOfs;
  /* 0x0018 */ unsigned long dwType;
  /* 0x001c */ unsigned long dwFlags;
  /* 0x0020 */ char tszName[260];
  /* 0x0124 */ unsigned long dwFFMaxForce;
  /* 0x0128 */ unsigned long dwFFForceResolution;
  /* 0x012c */ unsigned short wCollectionNumber;
  /* 0x012e */ unsigned short wDesignatorIndex;
  /* 0x0130 */ unsigned short wUsagePage;
  /* 0x0132 */ unsigned short wUsage;
  /* 0x0134 */ unsigned long dwDimension;
  /* 0x0138 */ unsigned short wExponent;
  /* 0x013a */ unsigned short wReportId;
}; /* size: 0x013c */

struct flameChunk_s
{
  /* 0x0000 */ struct flameGeneric_s gen;
  /* 0x0060 */ int spawnFireInterval;
  /* 0x0064 */ int lastSpawnFire;
  /* 0x0068 */ int spawnDripsInterval;
  /* 0x006c */ int spawnSmokeInterval;
}; /* size: 0x0070 */

struct IDirectInputA
{
}; /* size: 0x0004 */

struct flameFire_t
{
  /* 0x0000 */ struct flameGeneric_s gen;
  /* 0x0060 */ struct flameRender_s* flameRend;
}; /* size: 0x0064 */

struct renderQuad_t
{
  /* 0x0000 */ union vec4_t pos;
  /* 0x0010 */ float rotation;
  /* 0x0014 */ float radius;
  /* 0x0018 */ float lifeFrac;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

struct flameVarDef_t
{
  /* 0x0000 */ const char* dvarName;
  /* 0x0004 */ const char* name;
  /* 0x0008 */ float defaultVal;
  /* 0x000c */ float minVal;
  /* 0x0010 */ float maxVal;
  /* 0x0014 */ const char* description;
}; /* size: 0x0018 */

struct HBRUSH__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct conditionStackMember_t
{
  /* 0x0000 */ struct ExpressionStatement condition;
  /* 0x0010 */ BOOL fireOnTrue;
  /* 0x0011 */ char Padding_1018[3];
  /* 0x0014 */ int level;
  /* 0x0018 */ int blockID;
  /* 0x001c */ int constructID;
  /* 0x0020 */ int type;
}; /* size: 0x0024 */

struct fd_set
{
  /* 0x0000 */ unsigned int fd_count;
  /* 0x0004 */ unsigned int fd_array[64];
}; /* size: 0x0104 */

struct tagSIZE
{
  /* 0x0000 */ long cx;
  /* 0x0004 */ long cy;
}; /* size: 0x0008 */

struct sha1_state
{
  /* 0x0000 */ unsigned __int64 length;
  /* 0x0008 */ unsigned long state[5];
  /* 0x001c */ unsigned long curlen;
  /* 0x0020 */ unsigned char buf[64];
}; /* size: 0x0060 */

struct codtvImageCategoryMapping_t
{
  /* 0x0000 */ const char* imageCategoryName;
  /* 0x0004 */ enum codtvImageCategory_e imageCategory;
}; /* size: 0x0008 */

typedef struct _MEMORYSTATUSEX
{
  /* 0x0000 */ unsigned long dwLength;
  /* 0x0004 */ unsigned long dwMemoryLoad;
  /* 0x0008 */ unsigned __int64 ullTotalPhys;
  /* 0x0010 */ unsigned __int64 ullAvailPhys;
  /* 0x0018 */ unsigned __int64 ullTotalPageFile;
  /* 0x0020 */ unsigned __int64 ullAvailPageFile;
  /* 0x0028 */ unsigned __int64 ullTotalVirtual;
  /* 0x0030 */ unsigned __int64 ullAvailVirtual;
  /* 0x0038 */ unsigned __int64 ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *PMEMORYSTATUSEX; /* size: 0x0040 */

class phys_sys
{
}; /* size: 0x0001 */

typedef struct _tagADDRESS64
{
  /* 0x0000 */ unsigned __int64 Offset;
  /* 0x0008 */ unsigned short Segment;
  /* 0x000a */ char Padding_1019[2];
  /* 0x000c */ enum ADDRESS_MODE Mode;
} tagADDRESS64, *PtagADDRESS64; /* size: 0x0010 */

class bdTeamProposal
{
  /* 0x0000 */ long Padding_1020[2];
  /* 0x0008 */ unsigned __int64 m_userID;
  /* 0x0010 */ unsigned __int64 m_teamID;
  /* 0x0018 */ char m_userName[64];
  /* 0x0058 */ char m_teamName[64];
  /* 0x0098 */ unsigned char m_attachment[1024];
  /* 0x0498 */ unsigned int m_attachmentSize;
}; /* size: 0x04a0 */

typedef struct _tagpropertykey
{
  /* 0x0000 */ struct _GUID fmtid;
  /* 0x0010 */ unsigned long pid;
} tagpropertykey, *Ptagpropertykey; /* size: 0x0014 */

typedef struct _PROCESS_INFORMATION
{
  /* 0x0000 */ void* hProcess;
  /* 0x0004 */ void* hThread;
  /* 0x0008 */ unsigned long dwProcessId;
  /* 0x000c */ unsigned long dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION; /* size: 0x0010 */

typedef struct _CTL_USAGE
{
  /* 0x0000 */ unsigned long cUsageIdentifier;
  /* 0x0004 */ char** rgpszUsageIdentifier;
} CTL_USAGE, *PCTL_USAGE; /* size: 0x0008 */

typedef struct _CRYPTOAPI_BLOB
{
  /* 0x0000 */ unsigned long cbData;
  /* 0x0004 */ unsigned char* pbData;
} CRYPTOAPI_BLOB, *PCRYPTOAPI_BLOB; /* size: 0x0008 */

typedef struct _CRYPT_ALGORITHM_IDENTIFIER
{
  /* 0x0000 */ char* pszObjId;
  /* 0x0004 */ struct _CRYPTOAPI_BLOB Parameters;
} CRYPT_ALGORITHM_IDENTIFIER, *PCRYPT_ALGORITHM_IDENTIFIER; /* size: 0x000c */

typedef struct _CTL_INFO
{
  /* 0x0000 */ unsigned long dwVersion;
  /* 0x0004 */ struct _CTL_USAGE SubjectUsage;
  /* 0x000c */ struct _CRYPTOAPI_BLOB ListIdentifier;
  /* 0x0014 */ struct _CRYPTOAPI_BLOB SequenceNumber;
  /* 0x001c */ struct _FILETIME ThisUpdate;
  /* 0x0024 */ struct _FILETIME NextUpdate;
  /* 0x002c */ struct _CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
  /* 0x0038 */ unsigned long cCTLEntry;
  /* 0x003c */ struct _CTL_ENTRY* rgCTLEntry;
  /* 0x0040 */ unsigned long cExtension;
  /* 0x0044 */ struct _CERT_EXTENSION* rgExtension;
} CTL_INFO, *PCTL_INFO; /* size: 0x0048 */

struct CURVESORTARGS
{
  /* 0x0000 */ BOOL increasing_sort_order;
  /* 0x0001 */ char Padding_1021[3];
  /* 0x0004 */ union vec3_t p;
}; /* size: 0x0010 */

struct StateEnt
{
  /* 0x0000 */ void* enterFunc /* function */;
  /* 0x0004 */ void* exitFunc /* function */;
  /* 0x0008 */ void* updateFunc /* function */;
}; /* size: 0x000c */

struct XAnimServerNotifyList
{
  /* 0x0000 */ struct XAnimServerNotify* pList;
  /* 0x0004 */ int iNumElements;
  /* 0x0008 */ int iCurrentElement;
}; /* size: 0x000c */

struct XAnimDeltaInfo
{
  /* 0x0000 */ BOOL bClear;
  /* 0x0001 */ BOOL bNormQuat;
  /* 0x0002 */ BOOL bAbs;
  /* 0x0003 */ BOOL bUseGoalWeight;
}; /* size: 0x0004 */

struct XDollBody
{
  /* 0x0000 */ int references;
  /* 0x0004 */ int entity_index;
  /* 0x0008 */ enum LocalClientNum_t client_index;
  /* 0x000c */ int piece_index;
  /* 0x0010 */ unsigned int attach_bone_hash;
  /* 0x0014 */ struct PhysConstraints* constraintsDef;
  /* 0x0018 */ int numBones;
  /* 0x001c */ struct XDollBone bones[4];
  /* 0x005c */ struct XDollBoneOrientation boneOrientations[4];
  /* 0x00dc */ struct XDoll_ConstraintInfo constraintInfos[4];
  /* 0x010c */ int userBody;
  /* 0x0110 */ unsigned int userBodyBoneHash;
  /* 0x0114 */ int stableTime;
}; /* size: 0x0118 */

struct VisualRope
{
  /* 0x0000 */ float beginRadius;
  /* 0x0004 */ float endRadius;
  /* 0x0008 */ const struct Material* material;
  /* 0x000c */ int segmentCount;
  /* 0x0010 */ float* segmentVerts;
  /* 0x0014 */ union GfxDrawSurf* drawSurf;
  /* 0x0018 */ unsigned short* lightingHandle;
  /* 0x001c */ struct GfxLightingInfo lightingInfo;
  /* 0x0020 */ unsigned char visibilityFlags;
  /* 0x0021 */ char __PADDING__[3];
}; /* size: 0x0024 */

struct leafList_s
{
  /* 0x0000 */ int count;
  /* 0x0004 */ int maxcount;
  /* 0x0008 */ int overflowed;
  /* 0x000c */ unsigned short* list;
  /* 0x0010 */ union vec3_t bounds[2];
  /* 0x0028 */ int lastLeaf;
}; /* size: 0x002c */

struct ClientNotifyData
{
  /* 0x0000 */ unsigned int notetrackName;
  /* 0x0004 */ unsigned int notifyType;
  /* 0x0008 */ unsigned int notifyName;
  /* 0x000c */ float timeFrac;
}; /* size: 0x0010 */

struct AddressInfo_s
{
  /* 0x0000 */ unsigned int address;
  /* 0x0004 */ char moduleName[64];
  /* 0x0044 */ char bestFunction[64];
  /* 0x0084 */ char bestFunctionFilename[64];
  /* 0x00c4 */ unsigned int bestFunctionAddress;
  /* 0x00c8 */ char bestLineFilename[64];
  /* 0x0108 */ unsigned int bestLineAddress;
  /* 0x010c */ unsigned int bestLineNumber;
}; /* size: 0x0110 */

struct HMIXER__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct WinConData
{
  /* 0x0000 */ struct HWND__* hWnd;
  /* 0x0004 */ struct HWND__* hwndBuffer;
  /* 0x0008 */ struct HWND__* codLogo;
  /* 0x000c */ struct HFONT__* hfBufferFont;
  /* 0x0010 */ struct HWND__* hwndInputLine;
  /* 0x0014 */ char errorString[512];
  /* 0x0214 */ char consoleText[512];
  /* 0x0414 */ char returnedText[512];
  /* 0x0614 */ int windowWidth;
  /* 0x0618 */ int windowHeight;
  /* 0x061c */ void* SysInputLineWndProc /* function */;
}; /* size: 0x0620 */

struct mem_track_t
{
  /* 0x0000 */ char name[128];
  /* 0x0080 */ const char* filename;
  /* 0x0084 */ int size[2];
  /* 0x008c */ int pos;
  /* 0x0090 */ unsigned char type;
  /* 0x0091 */ unsigned char usageType;
  /* 0x0092 */ char Padding_1022[2];
  /* 0x0094 */ int count;
}; /* size: 0x0098 */

class debug_brush_info_t
{
  /* 0x0000 */ struct debug_brush_t brushes[5000];
  /* 0x13880 */ unsigned char windings[50000];
  /* 0x1fbd0 */ unsigned char indices[360000];
  /* 0x77a10 */ int num_brushes;
  /* 0x77a14 */ int num_windings;
  /* 0x77a18 */ int num_indices;
}; /* size: 0x77a1c */

struct XAnimPartQuatPtr
{
  /* 0x0000 */ struct XAnimPartQuat* quat;
  /* 0x0004 */ unsigned char partIndex;
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

struct tMIXERCONTROLDETAILS
{
  /* 0x0000 */ unsigned long cbStruct;
  /* 0x0004 */ unsigned long dwControlID;
  /* 0x0008 */ unsigned long cChannels;
  union
  {
    /* 0x000c */ struct HWND__* hwndOwner;
    /* 0x000c */ unsigned long cMultipleItems;
  }; /* size: 0x0004 */
  /* 0x0010 */ unsigned long cbDetails;
  /* 0x0014 */ void* paDetails;
}; /* size: 0x0018 */

class phys_link_list_base<pulse_sum_constraint_solver::user_rigid_body_restore_info>
{
  /* 0x0000 */ class pulse_sum_constraint_solver::user_rigid_body_restore_info* m_next_link;
}; /* size: 0x0004 */

class pulse_sum_constraint_solver::user_rigid_body_restore_info
{
  /* 0x0000 */ long Padding_1023;
  /* 0x0004 */ class user_rigid_body** m_rbc_urb;
  /* 0x0008 */ class user_rigid_body* m_original_urb;
}; /* size: 0x000c */

struct tagMIXERCONTROLA
{
  /* 0x0000 */ unsigned long cbStruct;
  /* 0x0004 */ unsigned long dwControlID;
  /* 0x0008 */ unsigned long dwControlType;
  /* 0x000c */ unsigned long fdwControl;
  /* 0x0010 */ unsigned long cMultipleItems;
  /* 0x0014 */ char szShortName[16];
  /* 0x0024 */ char szName[64];
  union
  {
    union
    {
      struct
      {
        /* 0x0064 */ long lMinimum;
        /* 0x0068 */ long lMaximum;
      }; /* size: 0x0008 */
      struct
      {
        /* 0x0064 */ unsigned long dwMinimum;
        /* 0x0068 */ unsigned long dwMaximum;
      }; /* size: 0x0008 */
      /* 0x0064 */ unsigned long dwReserved[6];
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ Bounds;
  union
  {
    union
    {
      /* 0x007c */ unsigned long cSteps;
      /* 0x007c */ unsigned long cbCustomData;
      /* 0x007c */ unsigned long dwReserved[6];
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ Metrics;
}; /* size: 0x0094 */

class phys_free_list<VehicleParameter>::iterator;

struct pulse_sum_constraint_solver::temp_user_rigid_body::avl_tree_accessor
{
}; /* size: 0x0001 */

struct $_TypeDescriptor$_extraBytes_46
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[46];
}; /* size: 0x0036 */

class phys_static_array<int,512>::iterator;

struct adjacencyWinding_t
{
  /* 0x0000 */ int numsides;
  /* 0x0004 */ int sides[12];
}; /* size: 0x0034 */

class phys_static_array<float,512>::iterator;

struct XModelSurfs
{
  /* 0x0000 */ struct XSurface* surfs;
  /* 0x0004 */ int partBits[5];
}; /* size: 0x0018 */

class dynamic_ent_aa
{
  /* 0x0000 */ long Padding_1024;
  /* 0x0004 */ BOOL m_has_auto_activated;
  /* 0x0005 */ char Padding_1025[3];
  /* 0x0008 */ struct DynEntityDef* m_dynEntDef;
}; /* size: 0x000c */

struct destructible_gamestate
{
  /* 0x0000 */ unsigned char localClientNum;
  /* 0x0001 */ unsigned char numPieces;
  /* 0x0002 */ short entityNum;
  /* 0x0004 */ short health[32];
}; /* size: 0x0044 */

struct RadiantCommandProcessor
{
  /* 0x0000 */ void* processorFunc /* function */;
  /* 0x0004 */ void* clearSelectionFunc /* function */;
  /* 0x0008 */ void* conditionFunc /* function */;
  /* 0x000c */ const char* classname;
}; /* size: 0x0010 */

class std::num_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >;

struct MigrationGlob
{
  /* 0x0000 */ unsigned char* buffer;
  /* 0x0004 */ int size;
}; /* size: 0x0008 */

struct phys_inplace_avl_tree<centity_t const *,auto_rigid_body,auto_rigid_body>::stack_item
{
  /* 0x0000 */ struct auto_rigid_body** m_node;
  /* 0x0004 */ int m_child;
}; /* size: 0x0008 */

class std::ios_base::failure
{
}; /* size: 0x0014 */

struct destructible_event_t
{
  /* 0x0000 */ int type;
  union
  {
    struct
    {
      /* 0x0004 */ struct centity_t* self;
      /* 0x0008 */ const struct centity_t* attacker;
      /* 0x000c */ union vec3_t dir;
      /* 0x0018 */ union vec3_t point;
      /* 0x0024 */ int damage;
      /* 0x0028 */ int mod;
      /* 0x002c */ unsigned int modelIndex;
      /* 0x0030 */ unsigned int partName;
    } /* size: 0x0030 */ ed;
    struct
    {
      /* 0x0004 */ struct centity_t* self;
      /* 0x0008 */ union vec3_t point;
      /* 0x0014 */ float damgeInner;
      /* 0x0018 */ float damgeOuter;
      /* 0x001c */ float radius;
      /* 0x0020 */ int mod;
    } /* size: 0x0020 */ erd;
    struct
    {
      struct
      {
        /* 0x0004 */ enum LocalClientNum_t localClientNum;
        /* 0x0008 */ int event;
        /* 0x000c */ const struct entityState_s* es;
      } /* size: 0x000c */ ehe;
      /* 0x0010 */ long __PADDING__[9];
    }; /* size: 0x0030 */
  }; /* size: 0x0030 */
}; /* size: 0x0034 */

struct TestLod
{
  /* 0x0000 */ BOOL enabled;
  /* 0x0001 */ char Padding_1026[3];
  /* 0x0004 */ float dist;
}; /* size: 0x0008 */

struct XSurfaceGetTriCandidatesLocals
{
  /* 0x0000 */ int mins[3];
  /* 0x000c */ int maxs[3];
  /* 0x0018 */ const struct XSurfaceCollisionTree* tree;
  /* 0x001c */ const unsigned short* inIndices;
  /* 0x0020 */ const unsigned char* inVertices0;
  /* 0x0024 */ const unsigned char* inVertices1;
  /* 0x0028 */ void* visitorFunc /* function */;
  /* 0x002c */ void* visitorContext;
  /* 0x0030 */ unsigned short vertexSize0;
  /* 0x0032 */ unsigned short surfaceFlags;
  /* 0x0034 */ unsigned int nodeQueueBegin;
  /* 0x0038 */ unsigned int nodeQueueEnd;
  /* 0x003c */ unsigned int leafQueueBegin;
  /* 0x0040 */ unsigned int leafQueueEnd;
  /* 0x0044 */ unsigned int triangleQueueBegin;
  /* 0x0048 */ unsigned int triangleQueueEnd;
  /* 0x004c */ unsigned int vertexQueueBegin;
  /* 0x0050 */ unsigned int vertexQueueEnd;
  /* 0x0054 */ struct QueueElement nodeQueue[64];
  /* 0x0254 */ struct QueueElement leafQueue[4];
  /* 0x0274 */ struct QueueElement triangleQueue[4];
  /* 0x0294 */ unsigned short vertexQueue[3][4];
}; /* size: 0x02ac */

struct XAnimRotPos
{
  /* 0x0000 */ union vec4_t rot;
  /* 0x0010 */ float posWeight;
  /* 0x0014 */ union vec3_t pos;
}; /* size: 0x0020 */

struct search_node_s
{
  /* 0x0000 */ const struct SimplePlaneIntersection* edge;
  /* 0x0004 */ int plane;
  /* 0x0008 */ int depth;
  /* 0x000c */ struct search_node_s* prevNode;
}; /* size: 0x0010 */

typedef struct _DSCCAPS
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long dwFormats;
  /* 0x000c */ unsigned long dwChannels;
} DSCCAPS, *PDSCCAPS; /* size: 0x0010 */

struct Sample
{
  /* 0x0000 */ int timestamp;
  /* 0x0004 */ unsigned short avgPing;
  /* 0x0006 */ unsigned short minPing;
  /* 0x0008 */ unsigned short maxPing;
  /* 0x000a */ unsigned char unackCount;
  /* 0x000b */ unsigned char clientIndex;
}; /* size: 0x000c */

struct HMIXEROBJ__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct WSAData
{
  /* 0x0000 */ unsigned short wVersion;
  /* 0x0002 */ unsigned short wHighVersion;
  /* 0x0004 */ char szDescription[257];
  /* 0x0105 */ char szSystemStatus[129];
  /* 0x0186 */ unsigned short iMaxSockets;
  /* 0x0188 */ unsigned short iMaxUdpDg;
  /* 0x018a */ char Padding_1027[2];
  /* 0x018c */ char* lpVendorInfo;
}; /* size: 0x0190 */

union PackedLmapCoords
{
  /* 0x0000 */ unsigned int packed;
}; /* size: 0x0004 */

struct cmdlineArg_t
{
  /* 0x0000 */ char key[64];
  /* 0x0040 */ char val[128];
  /* 0x00c0 */ BOOL optional;
  /* 0x00c1 */ char Padding_1028[3];
  /* 0x00c4 */ enum IdentityParam id;
}; /* size: 0x00c8 */

typedef struct _ITEMIDLIST
{
  /* 0x0000 */ struct _SHITEMID mkid;
} ITEMIDLIST, *PITEMIDLIST; /* size: 0x0003 */

struct GamePad
{
  /* 0x0000 */ BOOL enabled;
  /* 0x0001 */ BOOL keyboardEnabled;
  /* 0x0002 */ short digitals;
  /* 0x0004 */ short lastDigitals;
  /* 0x0006 */ char Padding_1029[2];
  /* 0x0008 */ float analogs[2];
  /* 0x0010 */ float lastAnalogs[2];
  /* 0x0018 */ float sticks[4];
  /* 0x0028 */ float lastSticks[4];
  /* 0x0038 */ BOOL stickDown[2][4];
  /* 0x0040 */ BOOL stickDownLast[2][4];
  /* 0x0048 */ float lowRumble;
  /* 0x004c */ float highRumble;
  struct
  {
    /* 0x0050 */ struct _XINPUT_VIBRATION Rumble;
  } /* size: 0x0004 */ feedback;
  /* 0x0054 */ struct _XINPUT_CAPABILITIES caps;
  /* 0x0068 */ struct _XINPUT_CAPABILITIES keyboardCaps;
}; /* size: 0x007c */

class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
  /* 0x0000 */ class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >& _Myostr;
}; /* size: 0x0004 */

struct winDmCommandResponse
{
  /* 0x0000 */ unsigned int returnValue;
  /* 0x0004 */ unsigned int responseLength;
}; /* size: 0x0008 */

class std::_Locbase<int>
{
  union
  {
    /* 0x0000 */ const int collate;
    /* 0x0000 */ const int ctype;
    /* 0x0000 */ const int monetary;
    /* 0x0000 */ const int numeric;
    /* 0x0000 */ const int time;
    /* 0x0000 */ const int messages;
    /* 0x0000 */ const int all;
    /* 0x0000 */ const int none;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct languageInfo_t
{
  /* 0x0000 */ const char* pszName;
  /* 0x0004 */ const char* pszNameAbbr;
  /* 0x0008 */ int bPresent;
}; /* size: 0x000c */

struct Mapping
{
  /* 0x0000 */ unsigned short coupling_steps;
  /* 0x0002 */ char Padding_1030[2];
  /* 0x0004 */ struct MappingChannel* chan;
  /* 0x0008 */ unsigned char submaps;
  /* 0x0009 */ unsigned char submap_floor[15];
  /* 0x0018 */ unsigned char submap_residue[15];
  /* 0x0027 */ char __PADDING__[1];
}; /* size: 0x0028 */

struct DPCState
{
  /* 0x0000 */ struct DPCChannel channel[8];
  /* 0x0040 */ unsigned char rnd;
  /* 0x0041 */ char __PADDING__[1];
}; /* size: 0x0042 */

struct Machine
{
  /* 0x0000 */ struct MOSState MOS;
  /* 0x0008 */ struct PIAState PIA;
  /* 0x0094 */ struct TIAState TIA;
  /* 0x1324 */ struct ROMInfo* ROM;
  /* 0x1328 */ struct DPCState DPC;
  /* 0x136a */ char Padding_1031[2];
  /* 0x136c */ int bank;
  /* 0x1370 */ int paddle[4];
  /* 0x1380 */ unsigned int paddleCycles[4];
  /* 0x1390 */ int debug;
  /* 0x1394 */ unsigned int MOSCycles;
  /* 0x1398 */ unsigned int PIACycles;
  /* 0x139c */ unsigned int TIACycles;
  /* 0x13a0 */ unsigned int DPCCycles;
}; /* size: 0x13a4 */

class LocalizeStringName
{
}; /* size: 0x0001 */

class phys_list_condition_functor_has_rigid_body
{
  /* 0x0000 */ class rigid_body* m_rb;
}; /* size: 0x0004 */

struct ent_field_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int ofs;
  /* 0x0008 */ int size[1];
  /* 0x000c */ enum fieldtype_t type;
  /* 0x0010 */ void* callback /* function */;
}; /* size: 0x0014 */

struct PacketQueueBlock
{
  /* 0x0000 */ struct PacketQueueBlock* next;
  /* 0x0004 */ int readOffset;
  /* 0x0008 */ int writeOffset;
  /* 0x000c */ unsigned char data[16384];
}; /* size: 0x400c */

class bdIPDiscoveryPacketReply
{
  /* 0x0000 */ unsigned char m_type;
  /* 0x0001 */ char Padding_1032;
  /* 0x0002 */ unsigned short m_protocolVersion;
  /* 0x0004 */ class bdAddr m_addr;
}; /* size: 0x000c */

struct phys_inplace_avl_tree<rigid_body_pair_key,rigid_body_constraint_contact,rigid_body_constraint_contact::avl_tree_accessor>::stack_item
{
  /* 0x0000 */ class rigid_body_constraint_contact** m_node;
  /* 0x0004 */ int m_child;
}; /* size: 0x0008 */

struct PacketQueueEntry
{
  /* 0x0000 */ enum netsrc_t sock;
  /* 0x0004 */ struct netadr_t addr;
  /* 0x0018 */ int length;
  /* 0x001c */ unsigned int flags;
  /* 0x0020 */ unsigned char* payload;
  /* 0x0024 */ int totalSize;
  /* 0x0028 */ int dequeueTime;
}; /* size: 0x002c */

union XAssetPoolEntry<FxEffectDef>
{
  union
  {
    /* 0x0000 */ struct FxEffectDef entry;
    /* 0x0000 */ union XAssetPoolEntry<FxEffectDef>* next;
  }; /* size: 0x004c */
}; /* size: 0x004c */

struct XAssetPool<FxEffectDef,600>
{
  /* 0x0000 */ union XAssetPoolEntry<FxEffectDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<FxEffectDef> entries[600];
}; /* size: 0xb224 */

struct BuiltinFunctionDef
{
  /* 0x0000 */ const char* actionString;
  /* 0x0004 */ unsigned int constId;
  /* 0x0008 */ int min_args;
  /* 0x000c */ int max_args;
  /* 0x0010 */ void* actionFunc /* function */;
  /* 0x0014 */ int type;
}; /* size: 0x0018 */

struct BitFieldGenerateRow
{
  /* 0x0000 */ unsigned int bits[8];
  /* 0x0020 */ int count;
  /* 0x0024 */ int timestamp;
}; /* size: 0x0028 */

struct BitFieldGenerateTable
{
  /* 0x0000 */ int rowCount;
  /* 0x0004 */ unsigned int rowSize;
  /* 0x0008 */ struct BitFieldGenerateRow table[4096];
  /* 0x28008 */ unsigned int totalUsage;
  /* 0x2800c */ unsigned int huffData[256];
}; /* size: 0x2840c */

struct tlSystemCallbacks
{
  /* 0x0000 */ void* ReadFile /* function */;
  /* 0x0004 */ void* ReleaseFile /* function */;
  /* 0x0008 */ void* CriticalError /* function */;
  /* 0x000c */ void* Warning /* function */;
  /* 0x0010 */ void* DebugPrint /* function */;
  /* 0x0014 */ void* MemAlloc /* function */;
  /* 0x0018 */ void* MemRealloc /* function */;
  /* 0x001c */ void* MemFree /* function */;
}; /* size: 0x0020 */

struct SpawnInfluencer
{
  /* 0x0000 */ BOOL used;
  /* 0x0001 */ BOOL active;
  /* 0x0002 */ BOOL archived;
  /* 0x0003 */ char Padding_1033;
  /* 0x0004 */ int influencerInstanceId;
  /* 0x0008 */ int debugEntityNum;
  /* 0x000c */ int expireTime;
  /* 0x0010 */ int disableTime;
  /* 0x0014 */ int teamMask;
  /* 0x0018 */ class EntHandle entity;
  /* 0x001c */ struct SpawnInfluencerPreset* preset;
  /* 0x0020 */ float boundingRadius;
  /* 0x0024 */ union vec2_t bounds;
  /* 0x002c */ float length;
  /* 0x0030 */ union vec3_t origin;
  /* 0x003c */ union vec3_t forward;
  /* 0x0048 */ union vec3_t up;
  /* 0x0054 */ union vec4_t quat;
  /* 0x0064 */ union vec4_t worldQuat;
  /* 0x0074 */ union vec3_t midPoint;
  /* 0x0080 */ int lastUpdateTime;
  /* 0x0084 */ float lastScore;
}; /* size: 0x0088 */

struct SortedPointArray
{
  /* 0x0000 */ int spawnPointsByIndex[200];
  /* 0x0320 */ int count;
  /* 0x0324 */ int sortTime;
}; /* size: 0x0328 */

struct IDWriteInlineObject
{
}; /* size: 0x0004 */

struct SpawnClientPosData
{
  /* 0x0000 */ BOOL active;
  /* 0x0001 */ char Padding_1034[3];
  /* 0x0004 */ union vec3_t origin;
  /* 0x0010 */ float yaw;
  /* 0x0014 */ int team;
}; /* size: 0x0018 */

struct nodetype
{
  /* 0x0000 */ struct nodetype* left;
  /* 0x0004 */ struct nodetype* right;
  /* 0x0008 */ struct nodetype* parent;
  /* 0x000c */ int weight;
  /* 0x0010 */ int symbol;
}; /* size: 0x0014 */

class bdArray<bdReference<bdConnection> >
{
  /* 0x0000 */ class bdReference<bdConnection>* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

typedef struct _D3DVERTEXELEMENT9
{
  /* 0x0000 */ unsigned short Stream;
  /* 0x0002 */ unsigned short Offset;
  /* 0x0004 */ unsigned char Type;
  /* 0x0005 */ unsigned char Method;
  /* 0x0006 */ unsigned char Usage;
  /* 0x0007 */ unsigned char UsageIndex;
} D3DVERTEXELEMENT9, *PD3DVERTEXELEMENT9; /* size: 0x0008 */

struct FxFlagOutputSet
{
  /* 0x0000 */ int* flags[4];
}; /* size: 0x0010 */

class bdAuthGetUsernamesForLicensePlainText
{
  /* 0x0000 */ unsigned __int64 m_licenseID;
}; /* size: 0x0008 */

typedef struct _NVAPI_D3D9_DMA_TRANSFER_PARAMS
{
  /* 0x0000 */ enum _NVAPI_D3D9_DMA_TRANSFER_DIR direction;
  /* 0x0004 */ struct NVDX_ObjectHandle__* hSysmemSurface;
  /* 0x0008 */ struct tagRECT* pSysmemSurfaceRect;
  /* 0x000c */ struct NVDX_ObjectHandle__* hD3D9Surface;
  /* 0x0010 */ struct tagRECT* pD3D9SurfaceRect;
  /* 0x0014 */ void* hCompletionEvent;
  /* 0x0018 */ enum _NVAPI_D3D9_DMA_TRANSFER_TYPE transferType;
  struct /* bitfield */
  {
    /* 0x001c */ unsigned long floatSrcRectFlag : 1; /* bit position: 0 */
    /* 0x001c */ unsigned long smoothingLevel : 2; /* bit position: 1 */
    /* 0x001c */ unsigned long reserved : 17; /* bit position: 3 */
    /* 0x001c */ unsigned long reservedFlagValid : 12; /* bit position: 20 */
  }; /* bitfield */
} NVAPI_D3D9_DMA_TRANSFER_PARAMS, *PNVAPI_D3D9_DMA_TRANSFER_PARAMS; /* size: 0x0020 */

typedef struct _D3DCLIPSTATUS9
{
  /* 0x0000 */ unsigned long ClipUnion;
  /* 0x0004 */ unsigned long ClipIntersection;
} D3DCLIPSTATUS9, *PD3DCLIPSTATUS9; /* size: 0x0008 */

typedef struct _IMAGE_DATA_DIRECTORY
{
  /* 0x0000 */ unsigned long VirtualAddress;
  /* 0x0004 */ unsigned long Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY; /* size: 0x0008 */

class bdLinkedList<bdReference<bdMessage> >
{
  /* 0x0000 */ class bdLinkedList<bdReference<bdMessage> >::Node* m_head;
  /* 0x0004 */ class bdLinkedList<bdReference<bdMessage> >::Node* m_tail;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

class bdQueue<bdReference<bdMessage> >
{
  /* 0x0000 */ class bdLinkedList<bdReference<bdMessage> > m_list;
}; /* size: 0x000c */

struct WINTRUST_SGNR_INFO_
{
  /* 0x0000 */ unsigned long cbStruct;
  /* 0x0004 */ const wchar_t* pcwszDisplayName;
  /* 0x0008 */ struct _CMSG_SIGNER_INFO* psSignerInfo;
  /* 0x000c */ unsigned long chStores;
  /* 0x0010 */ void** pahStores;
}; /* size: 0x0014 */

struct notebonemap_t
{
  /* 0x0000 */ unsigned short note;
  /* 0x0002 */ unsigned short bone;
}; /* size: 0x0004 */

typedef struct _CRYPT_BIT_BLOB
{
  /* 0x0000 */ unsigned long cbData;
  /* 0x0004 */ unsigned char* pbData;
  /* 0x0008 */ unsigned long cUnusedBits;
} CRYPT_BIT_BLOB, *PCRYPT_BIT_BLOB; /* size: 0x000c */

typedef struct _CERT_PUBLIC_KEY_INFO
{
  /* 0x0000 */ struct _CRYPT_ALGORITHM_IDENTIFIER Algorithm;
  /* 0x000c */ struct _CRYPT_BIT_BLOB PublicKey;
} CERT_PUBLIC_KEY_INFO, *PCERT_PUBLIC_KEY_INFO; /* size: 0x0018 */

typedef struct _CERT_INFO
{
  /* 0x0000 */ unsigned long dwVersion;
  /* 0x0004 */ struct _CRYPTOAPI_BLOB SerialNumber;
  /* 0x000c */ struct _CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
  /* 0x0018 */ struct _CRYPTOAPI_BLOB Issuer;
  /* 0x0020 */ struct _FILETIME NotBefore;
  /* 0x0028 */ struct _FILETIME NotAfter;
  /* 0x0030 */ struct _CRYPTOAPI_BLOB Subject;
  /* 0x0038 */ struct _CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
  /* 0x0050 */ struct _CRYPT_BIT_BLOB IssuerUniqueId;
  /* 0x005c */ struct _CRYPT_BIT_BLOB SubjectUniqueId;
  /* 0x0068 */ unsigned long cExtension;
  /* 0x006c */ struct _CERT_EXTENSION* rgExtension;
} CERT_INFO, *PCERT_INFO; /* size: 0x0070 */

class bdReference<bdChunk>
{
  /* 0x0000 */ class bdChunk* m_ptr;
}; /* size: 0x0004 */

class bdUnicastConnection::bdControlChunkStore
{
  /* 0x0000 */ class bdReference<bdChunk> m_chunk;
  /* 0x0004 */ BOOL m_lone;
}; /* size: 0x0008 */

class phys_free_list<rigid_body_constraint_hinge>::iterator
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_hinge>::T_internal_base* m_ptr;
}; /* size: 0x0004 */

struct NV_MOSAIC_GRID_TOPO_DISPLAY
{
  /* 0x0000 */ unsigned long displayId;
  /* 0x0004 */ int overlapX;
  /* 0x0008 */ int overlapY;
  /* 0x000c */ enum _NV_ROTATE rotation;
  /* 0x0010 */ unsigned long cloneGroup;
}; /* size: 0x0014 */

struct NV_MOSAIC_DISPLAY_SETTING
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long width;
  /* 0x0008 */ unsigned long height;
  /* 0x000c */ unsigned long bpp;
  /* 0x0010 */ unsigned long freq;
}; /* size: 0x0014 */

struct NV_MOSAIC_GRID_TOPO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long rows;
  /* 0x0008 */ unsigned long columns;
  /* 0x000c */ unsigned long displayCount;
  struct /* bitfield */
  {
    /* 0x0010 */ unsigned long applyWithBezelCorrect : 1; /* bit position: 0 */
    /* 0x0010 */ unsigned long immersiveGaming : 1; /* bit position: 1 */
    /* 0x0010 */ unsigned long baseMosaic : 1; /* bit position: 2 */
    /* 0x0010 */ unsigned long driverReloadAllowed : 1; /* bit position: 3 */
    /* 0x0010 */ unsigned long acceleratePrimaryDisplay : 1; /* bit position: 4 */
    /* 0x0010 */ unsigned long reserved : 27; /* bit position: 5 */
  }; /* bitfield */
  /* 0x0014 */ struct NV_MOSAIC_GRID_TOPO_DISPLAY displays[64];
  /* 0x0514 */ struct NV_MOSAIC_DISPLAY_SETTING displaySettings;
}; /* size: 0x0528 */

typedef struct _NV_GPU_QUERY_ILLUMINATION_SUPPORT_PARM_V1
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ struct NvPhysicalGpuHandle__* hPhysicalGpu;
  /* 0x0008 */ enum _NV_GPU_ILLUMINATION_ATTRIB Attribute;
  /* 0x000c */ unsigned long bSupported;
} NV_GPU_QUERY_ILLUMINATION_SUPPORT_PARM_V1, *PNV_GPU_QUERY_ILLUMINATION_SUPPORT_PARM_V1; /* size: 0x0010 */

class compare_spawnpoint_sort
{
}; /* size: 0x0001 */

struct FxElemSetupCmd
{
  /* 0x0000 */ struct FxSystem* system;
  /* 0x0004 */ int effectStart;
  /* 0x0008 */ int effectLast;
  /* 0x000c */ struct FxElemBits* elemDrawBits;
  /* 0x0010 */ struct FxElemRenderState* elemRenderStates;
  /* 0x0014 */ int drawTime;
  /* 0x0018 */ unsigned int cameraType;
  /* 0x001c */ struct EffectElemCountInfo* effectElemCountInfo;
  /* 0x0020 */ volatile long* effectElemCountInfoIndex;
}; /* size: 0x0024 */

struct cscr_data_t
{
  /* 0x0000 */ int delete_;
  /* 0x0004 */ int initstructs;
  /* 0x0008 */ int createstruct;
  /* 0x000c */ int findstruct;
  /* 0x0010 */ int levelscript;
  /* 0x0014 */ int clientsysstatechange;
  /* 0x0018 */ int maprestart;
  /* 0x001c */ int localclientconnect;
  /* 0x0020 */ int localclientdisconnect;
  /* 0x0024 */ int entityspawned;
  /* 0x0028 */ int scriptmodelspawned;
  /* 0x002c */ int dogSoundNotify;
  /* 0x0030 */ int clientFlagCB;
  /* 0x0034 */ int clientFlagAsValCB;
  /* 0x0038 */ int corpse_callback;
  /* 0x003c */ int playerJump;
  /* 0x0040 */ int playerLand;
  /* 0x0044 */ int playerFoliage;
  /* 0x0048 */ int playerspawned;
  /* 0x004c */ int airsupport;
  /* 0x0050 */ int entityshutdownCB;
  /* 0x0054 */ int localClientChangedCB;
  /* 0x0058 */ int argusnotify;
  /* 0x005c */ int suimessage;
  /* 0x0060 */ int glassSmash;
  /* 0x0064 */ int zombieEyes;
  /* 0x0068 */ int gibEvent;
  /* 0x006c */ int playAiFootstep;
  /* 0x0070 */ int soundsetambientstate;
  /* 0x0074 */ int soundsetaiambientstate;
  /* 0x0078 */ int soundplayuidecodeloop;
  struct
  {
    /* 0x007c */ int main;
    /* 0x0080 */ int startupgametype;
    /* 0x0084 */ int precachegametype;
  } /* size: 0x000c */ gametype;
  /* 0x0088 */ int finalizeInitialization;
  /* 0x008c */ int hostMigration;
}; /* size: 0x0090 */

struct DEMO_SpawnInfluencerPreset
{
  /* 0x0000 */ unsigned short index;
  /* 0x0002 */ unsigned char type;
  /* 0x0003 */ unsigned char shape;
  /* 0x0004 */ int radius;
  /* 0x0008 */ int originalLength;
  /* 0x000c */ unsigned short scoreCurve;
  /* 0x000e */ char Padding_1035[2];
  /* 0x0010 */ int score;
  /* 0x0014 */ char description[32];
}; /* size: 0x0034 */

class bdThreadedSocket
{
  /* 0x0000 */ long Padding_1036[2];
  /* 0x0008 */ class bdThread* m_receiveThread;
  /* 0x000c */ class bdReceiveThread* m_receiver;
  /* 0x0010 */ class bdThread* m_sendThread;
  /* 0x0014 */ class bdSendThread* m_sender;
  /* 0x0018 */ unsigned int m_incomingBufferSize;
  /* 0x001c */ unsigned int m_threadStackSize;
}; /* size: 0x0020 */

class phys_list_condition_functor_has_rigid_body_and_user_rigid_body
{
  /* 0x0000 */ class rigid_body* m_rb;
}; /* size: 0x0004 */

struct NV_3D_SETTING
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum NV_3D_PROPERTY settingName;
  /* 0x0008 */ unsigned long flags;
  /* 0x000c */ unsigned long defaultValue;
  /* 0x0010 */ unsigned long currentValue;
}; /* size: 0x0014 */

struct FxDrawTrailGeoCmd
{
  /* 0x0000 */ int trailEffectFirst;
  /* 0x0004 */ int trailEffectLast;
  /* 0x0008 */ const unsigned short* effectHandles;
  /* 0x000c */ const struct FxDrawTrailResourceRequired* resourceRequiredArray;
  /* 0x0010 */ const struct FxDrawTrailResource* resourceArray;
  /* 0x0014 */ struct FxSystem* system;
  /* 0x0018 */ int drawTime;
  /* 0x001c */ unsigned int cameraType;
}; /* size: 0x0020 */

class compare_spawninfluencer_sort
{
}; /* size: 0x0001 */

struct GfxSceneBrush
{
  /* 0x0000 */ struct BModelDrawInfo info;
  /* 0x0002 */ unsigned short entnum;
  /* 0x0004 */ const struct GfxBrushModel* bmodel;
  /* 0x0008 */ struct GfxPlacement placement;
  /* 0x0024 */ const struct ShaderConstantSet* brushConstantSet;
  /* 0x0028 */ unsigned char reflectionProbeIndex;
  /* 0x0029 */ char __PADDING__[3];
}; /* size: 0x002c */

class phys_link_list<pulse_sum_contact>::iterator
{
  /* 0x0000 */ class pulse_sum_contact* m_ptr;
}; /* size: 0x0004 */

struct ZONE_PATCH_VERSION
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int version;
}; /* size: 0x0008 */

struct FxVisBlocker
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ unsigned short radius;
  /* 0x000e */ unsigned short visibility;
}; /* size: 0x0010 */

struct BspSurfRegionSetupInfo
{
  /* 0x0000 */ enum eBspSurfRegionType bspRegionType;
  /* 0x0004 */ unsigned int sceneDrawSurfStage;
  /* 0x0008 */ unsigned int sceneDrawSurfMaxCount;
}; /* size: 0x000c */

class phys_link_list<pulse_sum_point>::iterator
{
  /* 0x0000 */ class pulse_sum_point* m_ptr;
}; /* size: 0x0004 */

union XAssetPoolEntry<SndPatch>
{
  union
  {
    /* 0x0000 */ struct SndPatch entry;
    /* 0x0000 */ union XAssetPoolEntry<SndPatch>* next;
  }; /* size: 0x000c */
}; /* size: 0x000c */

struct FxEffectAtomics
{
  /* 0x0000 */ volatile long status;
  /* 0x0004 */ volatile long status2;
}; /* size: 0x0008 */

struct FxEffectContainer
{
  /* 0x0000 */ struct FxEffect effect;
  /* 0x00fc */ struct FxEffectAtomics atomics;
  /* 0x0104 */ long __PADDING__[3];
}; /* size: 0x0110 */

struct FxPlayEffectAction;

struct va_info_t
{
  /* 0x0000 */ char va_string[1024][4];
  /* 0x1000 */ int index;
}; /* size: 0x1004 */

class phys_simple_allocator<axis_aligned_sweep_and_prune::sap_node>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

struct CommonAddrGroup
{
  /* 0x0000 */ class bdSecurityID securityID;
  /* 0x0008 */ BOOL active;
  /* 0x0009 */ char Padding_1037[3];
  /* 0x000c */ unsigned int useCount;
}; /* size: 0x0010 */

struct parseInfo_t
{
  /* 0x0000 */ char token[1024];
  /* 0x0400 */ enum ParseTokenType tokenType;
  /* 0x0404 */ int lines;
  /* 0x0408 */ BOOL ungetToken;
  /* 0x0409 */ BOOL spaceDelimited;
  /* 0x040a */ BOOL keepStringQuotes;
  /* 0x040b */ BOOL csv;
  /* 0x040c */ BOOL negativeNumbers;
  /* 0x040d */ BOOL numbers;
  /* 0x040e */ char Padding_1038[2];
  /* 0x0410 */ const char* extraWordCharacters;
  /* 0x0414 */ const char* errorPrefix;
  /* 0x0418 */ const char* warningPrefix;
  /* 0x041c */ int backup_lines;
  /* 0x0420 */ const char* backup_text;
  /* 0x0424 */ const char* parseFile;
}; /* size: 0x0428 */

struct XAssetPool<FxImpactTable,4>
{
  /* 0x0000 */ union XAssetPoolEntry<FxImpactTable>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<FxImpactTable> entries[4];
}; /* size: 0x0024 */

struct ParseThreadInfo
{
  /* 0x0000 */ struct parseInfo_t parseInfo[16];
  /* 0x4280 */ int parseInfoNum;
  /* 0x4284 */ const char* tokenPos;
  /* 0x4288 */ const char* prevTokenPos;
  /* 0x428c */ char line[1024];
}; /* size: 0x468c */

struct TIMED_RADIUS_DAMAGE
{
  /* 0x0000 */ union vec3_t pos;
  /* 0x000c */ int life;
  /* 0x0010 */ float radius;
  /* 0x0014 */ float radiusSqr;
  /* 0x0018 */ int damage;
  /* 0x001c */ int rate;
  /* 0x0020 */ int mod;
  /* 0x0024 */ union Weapon weapon;
  /* 0x0028 */ int fireStarterClientNum;
}; /* size: 0x002c */

struct MigrationClient
{
  /* 0x0000 */ enum MigrationClientState state;
  /* 0x0004 */ int attempts;
  /* 0x0008 */ int msgTimeout;
  /* 0x000c */ int rating;
  /* 0x0010 */ int nextSendTime;
}; /* size: 0x0014 */

struct Q_FIXUP
{
  /* 0x0000 */ unsigned short offset;
  /* 0x0002 */ unsigned short value;
}; /* size: 0x0004 */

class bdStreamingTask
{
  /* 0x0000 */ long Padding_1039[16];
  /* 0x0040 */ BOOL m_failOnPartialError;
  /* 0x0041 */ char Padding_1040[3];
  /* 0x0044 */ unsigned int m_partsFailed;
  /* 0x0048 */ class bdStopwatch m_streamingTimer;
  /* 0x0050 */ float m_streamingTimeout;
}; /* size: 0x0058 */

struct Scr_ArraySortEntity
{
  /* 0x0000 */ int entNum;
  /* 0x0004 */ float distSq;
}; /* size: 0x0008 */

struct Q_COLUMN
{
  /* 0x0000 */ enum Q_DATA_TYPE column_type;
  /* 0x0004 */ char* column_name;
}; /* size: 0x0008 */

struct Q_QUERYSTATE
{
  /* 0x0000 */ struct Q_TABLE* table;
  /* 0x0004 */ unsigned long cur_row;
  /* 0x0008 */ unsigned long query_size;
  /* 0x000c */ struct Q_QUERYDESC* query_desc;
}; /* size: 0x0010 */

class bpi_environment_collision_info
{
  /* 0x0000 */ class broad_phase_base* m_bpb_i_start;
  /* 0x0004 */ class broad_phase_base* m_bpb_i_end;
  /* 0x0008 */ int m_bpb_count;
  /* 0x000c */ int m_bpb_last_count;
}; /* size: 0x0010 */

struct MigrationMessage
{
  /* 0x0000 */ const char* string;
  /* 0x0004 */ void* func /* function */;
}; /* size: 0x0008 */

struct GlobalUsage
{
  /* 0x0000 */ int level_fastfile;
  /* 0x0004 */ int common_fastfile;
}; /* size: 0x0008 */

struct Q_TABLE
{
  /* 0x0000 */ char* name;
  /* 0x0004 */ unsigned long column_count;
  /* 0x0008 */ unsigned long primary_key_column;
  /* 0x000c */ struct Q_COLUMN* column;
  /* 0x0010 */ unsigned long row_count;
  /* 0x0014 */ void* data;
}; /* size: 0x0018 */

struct WICRect
{
  /* 0x0000 */ int X;
  /* 0x0004 */ int Y;
  /* 0x0008 */ int Width;
  /* 0x000c */ int Height;
}; /* size: 0x0010 */

union XAssetPoolEntry<StringTable>
{
  union
  {
    /* 0x0000 */ struct StringTable entry;
    /* 0x0000 */ union XAssetPoolEntry<StringTable>* next;
  }; /* size: 0x0014 */
}; /* size: 0x0014 */

struct XAssetPool<StringTable,96>
{
  /* 0x0000 */ union XAssetPoolEntry<StringTable>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<StringTable> entries[96];
}; /* size: 0x0784 */

struct DebugDrawBrushInfo
{
  /* 0x0000 */ int depthTest;
  /* 0x0004 */ int duration;
  /* 0x0008 */ union vec3_t transform[4];
}; /* size: 0x0038 */

struct Q_DATA_ELEMENT
{
  /* 0x0000 */ enum Q_DATA_TYPE type;
  union
  {
    /* 0x0004 */ int iVal;
    /* 0x0004 */ float fVal;
    /* 0x0004 */ const char* strVal;
  }; /* size: 0x0004 */
}; /* size: 0x0008 */

struct Q_QUERYDESC
{
  /* 0x0000 */ unsigned long column_index;
  /* 0x0004 */ enum Q_OPERATOR op;
  /* 0x0008 */ struct Q_DATA_ELEMENT data;
}; /* size: 0x0010 */

struct D2D1_BITMAP_BRUSH_PROPERTIES
{
  /* 0x0000 */ enum D2D1_EXTEND_MODE extendModeX;
  /* 0x0004 */ enum D2D1_EXTEND_MODE extendModeY;
  /* 0x0008 */ enum D2D1_BITMAP_INTERPOLATION_MODE interpolationMode;
}; /* size: 0x000c */

struct Q_DB
{
  /* 0x0000 */ char* name;
  /* 0x0004 */ unsigned long table_count;
  /* 0x0008 */ struct Q_TABLE* tables;
}; /* size: 0x000c */

struct Q_DB_HEADER
{
  /* 0x0000 */ char magic_version[8];
  /* 0x0008 */ unsigned long fixup_count;
  /* 0x000c */ unsigned long fixup_offset;
  /* 0x0010 */ unsigned long string_count;
  /* 0x0014 */ void* strings;
  /* 0x0018 */ unsigned long num_db;
  /* 0x001c */ struct Q_DB* db;
}; /* size: 0x0020 */

struct InternalSync
{
  /* 0x0000 */ BOOL finished;
  /* 0x0001 */ char Padding_1041[3];
  /* 0x0004 */ enum stream_status result;
  /* 0x0008 */ unsigned int numBytesRead;
}; /* size: 0x000c */

struct profilemem_t
{
  /* 0x0000 */ struct profilemem_t* child;
  /* 0x0004 */ struct profilemem_t* parent;
  /* 0x0008 */ struct profilemem_t* nextSibling;
  /* 0x000c */ struct profilemem_t* prevSibling;
  /* 0x0010 */ unsigned int startSize;
  /* 0x0014 */ unsigned int totalSize;
  /* 0x0018 */ unsigned int hits;
  /* 0x001c */ const char* name;
}; /* size: 0x0020 */

struct ProfileMemTree
{
  /* 0x0000 */ struct profilemem_t* currentNode;
  /* 0x0004 */ struct profilemem_t nodePool[256];
  /* 0x2004 */ unsigned int treeSize;
}; /* size: 0x2008 */

struct std::_Pair_base<SpawnInfluencer * *,SpawnInfluencer * *>
{
  /* 0x0000 */ struct SpawnInfluencer** first;
  /* 0x0004 */ struct SpawnInfluencer** second;
}; /* size: 0x0008 */

struct callbackInfo
{
  /* 0x0000 */ void* callback /* function */;
  /* 0x0004 */ int id;
  /* 0x0008 */ enum stream_status reason;
  /* 0x000c */ unsigned int bytes;
  /* 0x0010 */ void* user;
}; /* size: 0x0014 */

struct profMemTreeIter_t
{
  /* 0x0000 */ struct profilemem_t* node;
  /* 0x0004 */ int nesting;
}; /* size: 0x0008 */

struct pooldata_t
{
  /* 0x0000 */ void* firstFree;
  /* 0x0004 */ int activeCount;
}; /* size: 0x0008 */

class bdTitleStats
{
  /* 0x0000 */ long Padding_1042;
  /* 0x0004 */ unsigned int m_numOnlineSessions;
  /* 0x0008 */ unsigned int m_numTotalUsers;
  /* 0x000c */ unsigned int m_numOnlineUsers;
}; /* size: 0x0010 */

struct freenode
{
  /* 0x0000 */ struct freenode* next;
}; /* size: 0x0004 */

struct PhysicalMemoryAllocation
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int pos;
}; /* size: 0x0008 */

struct PhysicalMemoryPrim
{
  /* 0x0000 */ const char* allocName;
  /* 0x0004 */ unsigned int allocListCount;
  /* 0x0008 */ unsigned int pos;
  /* 0x000c */ struct PhysicalMemoryAllocation allocList[80];
  /* 0x028c */ enum EMemTrack memTrack;
}; /* size: 0x0290 */

struct PhysicalMemory
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned char* buf;
  /* 0x0008 */ struct PhysicalMemoryPrim prim[2];
  /* 0x0528 */ unsigned int size;
}; /* size: 0x052c */

struct std::pair<SpawnPoint *,SpawnPoint *>
{
}; /* size: 0x0008 */

struct streamInfo
{
  /* 0x0000 */ int id;
  /* 0x0004 */ int file;
  /* 0x0008 */ unsigned int start_offset;
  /* 0x000c */ unsigned int buffer_size;
  /* 0x0010 */ unsigned int bytes_read;
  /* 0x0014 */ unsigned char* destination;
  /* 0x0018 */ int estMsToFinish;
  /* 0x001c */ int startDeadline;
  union
  {
    /* 0x0020 */ void* genericCallback /* function */;
    /* 0x0020 */ void* callback /* function */;
  }; /* size: 0x0004 */
  /* 0x0024 */ void* callbackUser;
  /* 0x0028 */ enum stream_status status;
  /* 0x002c */ BOOL callbackOnly;
  /* 0x002d */ char Padding_1043[3];
  /* 0x0030 */ struct streamInfo* nextInQueue;
  /* 0x0034 */ struct streamInfo* prevInQueue;
}; /* size: 0x0038 */

struct std::pair<SpawnInfluencer * *,SpawnInfluencer * *>
{
}; /* size: 0x0008 */

class tlFixedString
{
  /* 0x0000 */ unsigned int hash;
  /* 0x0004 */ char str[28];
}; /* size: 0x0020 */

struct ALLOCATION_SCHEME_FUNCTIONS
{
  /* 0x0000 */ void* Init /* function */;
  /* 0x0004 */ void* Reset /* function */;
  /* 0x0008 */ void* Destroy /* function */;
  /* 0x000c */ void* Alloc /* function */;
  /* 0x0010 */ void* Free /* function */;
}; /* size: 0x0014 */

struct constraint_solver_task_input
{
  /* 0x0000 */ class rigid_body** m_list_island;
  /* 0x0004 */ int m_list_island_count;
  /* 0x0008 */ int* m_list_island_cur;
  /* 0x000c */ int m_psys_psc_visit_counter;
  /* 0x0010 */ int m_psys_next_psc_visit_counter;
  /* 0x0014 */ int m_psys_max_vel_iters;
  /* 0x0018 */ int m_psys_max_vel_pos_iters;
  /* 0x001c */ float m_outside_delta_t;
}; /* size: 0x0020 */

union XAssetPoolEntry<ScriptParseTree>
{
  union
  {
    /* 0x0000 */ struct ScriptParseTree entry;
    /* 0x0000 */ union XAssetPoolEntry<ScriptParseTree>* next;
  }; /* size: 0x000c */
}; /* size: 0x000c */

struct XAssetPool<ScriptParseTree,1024>
{
  /* 0x0000 */ union XAssetPoolEntry<ScriptParseTree>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<ScriptParseTree> entries[1024];
}; /* size: 0x3004 */

struct vehicle_fields_s
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int constId;
  /* 0x0008 */ int ofs;
  /* 0x000c */ int size[1];
  /* 0x0010 */ enum fieldtype_t type;
  /* 0x0014 */ unsigned int whichbits;
  /* 0x0018 */ void* setter /* function */;
  /* 0x001c */ void* getter /* function */;
}; /* size: 0x0020 */

struct ltc_asn1_list_
{
  /* 0x0000 */ int type;
  /* 0x0004 */ void* data;
  /* 0x0008 */ unsigned long size;
  /* 0x000c */ int used;
  /* 0x0010 */ struct ltc_asn1_list_* prev;
  /* 0x0014 */ struct ltc_asn1_list_* next;
  /* 0x0018 */ struct ltc_asn1_list_* child;
  /* 0x001c */ struct ltc_asn1_list_* parent;
}; /* size: 0x0020 */

class phys_simple_link_list<pulse_sum_constraint_solver::temp_user_rigid_body>::iterator
{
  /* 0x0000 */ class pulse_sum_constraint_solver::temp_user_rigid_body* m_ptr;
}; /* size: 0x0004 */

union XAssetPoolEntry<VehicleDef>
{
  union
  {
    /* 0x0000 */ struct VehicleDef entry;
    /* 0x0000 */ union XAssetPoolEntry<VehicleDef>* next;
  }; /* size: 0x0a2c */
}; /* size: 0x0a2c */

struct XAssetPool<VehicleDef,32>
{
  /* 0x0000 */ union XAssetPoolEntry<VehicleDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<VehicleDef> entries[32];
}; /* size: 0x14584 */

struct OrcaPlane
{
  /* 0x0000 */ union vec2_t p;
  /* 0x0008 */ union vec2_t n;
}; /* size: 0x0010 */

union GfxSceneEntityInfo
{
  /* 0x0000 */ const struct cpose_t* pose;
}; /* size: 0x0004 */

struct EntHandleInfo
{
  /* 0x0000 */ void* handle;
  /* 0x0004 */ unsigned short next;
  /* 0x0006 */ unsigned short prev;
}; /* size: 0x0008 */

struct tiger_state
{
  /* 0x0000 */ unsigned __int64 state[3];
  /* 0x0018 */ unsigned __int64 length;
  /* 0x0020 */ unsigned long curlen;
  /* 0x0024 */ unsigned char buf[64];
  /* 0x0064 */ long __PADDING__[1];
}; /* size: 0x0068 */

class bdLeagueStatsInfo
{
  /* 0x0000 */ long Padding_1044[2];
  /* 0x0008 */ unsigned __int64 m_teamID;
  /* 0x0010 */ unsigned __int64 m_subdivisionID;
  /* 0x0018 */ unsigned char m_writeType;
  /* 0x0019 */ char Padding_1045[7];
  /* 0x0020 */ __int64 m_rating;
  /* 0x0028 */ int m_integers[8];
  /* 0x0048 */ float m_floats[3];
  /* 0x0054 */ unsigned int m_rank;
  /* 0x0058 */ unsigned int m_secondsSinceUpdate;
  /* 0x005c */ char m_name[65];
}; /* size: 0x00a0 */

struct LeagueTeamsData
{
  /* 0x0000 */ BOOL isUpdating;
  /* 0x0001 */ char Padding_1046[3];
  /* 0x0004 */ int numResults;
  /* 0x0008 */ int numResultsToFetch;
  /* 0x000c */ int currLeagueID;
  /* 0x0010 */ int currTeamsListOffset;
  /* 0x0014 */ int numResultsToFetchForLeague;
  /* 0x0018 */ class bdLeagueUserTeamResult teams[12];
  /* 0x3498 */ struct LeagueTeamSubdivisionInfo teamSubdivisionInfos[12];
  /* 0x5c58 */ class bdLeagueTeamMemberInfo teamMemberInfos[12];
  /* 0x9438 */ class bdLeagueTeamInfo teamInfos[12];
  /* 0xc8b8 */ class bdGenericLeagueID soloTeamID;
  /* 0xc8c8 */ unsigned __int64 currPlayerXuid;
  /* 0xc8d0 */ BOOL fetchAllInfoForTeamInLeague;
  /* 0xc8d1 */ char __PADDING__[7];
}; /* size: 0xc8d8 */

struct LeagueSeasonHistory
{
  /* 0x0000 */ class bdLeagueSubdivisionHistoryResult seasonHistoryInfo[16];
  /* 0x0180 */ int numResults;
  /* 0x0184 */ long __PADDING__[1];
}; /* size: 0x0188 */

struct LeagueHistoryData
{
  /* 0x0000 */ struct LeagueSeasonHistory leagueSeasonHistory[8];
  /* 0x0c40 */ class bdLeagueSubdivisionInfo subdivisionInfos[128];
  /* 0x4440 */ int numSubdivisionInfos;
  /* 0x4444 */ long Padding_1047;
  /* 0x4448 */ unsigned __int64 currTeamID;
  /* 0x4450 */ short currLeagueIndex;
  /* 0x4452 */ char Padding_1048[2];
  /* 0x4454 */ int lastUpdated;
}; /* size: 0x4458 */

struct StatsLookup
{
  /* 0x0000 */ enum StatsState state;
  /* 0x0004 */ int workCount;
  /* 0x0008 */ int workTime;
  /* 0x000c */ int backoffCount;
  /* 0x0010 */ unsigned __int64 leagueID;
  /* 0x0018 */ int divisionID;
  /* 0x001c */ BOOL isSolo;
  /* 0x001d */ char Padding_1049[3];
  /* 0x0020 */ int nameID;
  /* 0x0024 */ long Padding_1050;
  /* 0x0028 */ unsigned __int64 teamID;
  /* 0x0030 */ int memberCount;
  /* 0x0034 */ char teamName[65];
  /* 0x0075 */ BOOL isPreSeason;
  /* 0x0076 */ char Padding_1051[2];
  /* 0x0078 */ class bdLeagueSubdivisionResult subdivision;
  /* 0x00e0 */ class bdLeagueStatsInfo stats;
  /* 0x0180 */ struct LeagueTeamsData teamsData;
  /* 0xca58 */ struct LeagueHistoryData historyData;
  /* 0x10eb0 */ BOOL haveOutcomes;
  /* 0x10eb1 */ char Padding_1052[3];
  /* 0x10eb4 */ struct LeagueOutcomes outcomes;
  /* 0x10f50 */ int matchDelta;
  /* 0x10f54 */ int bonusDelta;
  /* 0x10f58 */ enum LeagueOutcome matchOutcome;
  /* 0x10f5c */ long Padding_1053;
  /* 0x10f60 */ unsigned __int64 previousSubdivisionID;
  /* 0x10f68 */ int previousDivisionID;
  /* 0x10f6c */ BOOL refreshRequested;
  /* 0x10f6d */ char __PADDING__[3];
}; /* size: 0x10f70 */

struct dwUCDGetUserDetailsTask
{
  /* 0x0000 */ class bdUCDAccountInfo* ucdAccountInfo;
  /* 0x0004 */ const char* accountName;
  /* 0x0008 */ const char* password;
}; /* size: 0x000c */

class bdQuotaUsage
{
  /* 0x0000 */ long Padding_1054;
  /* 0x0004 */ unsigned int m_usedStorageSpace;
  /* 0x0008 */ unsigned int m_usedNumFiles;
  /* 0x000c */ unsigned int m_usedDailyUploadBW;
  /* 0x0010 */ unsigned int m_usedDailyDownloadBW;
  /* 0x0014 */ unsigned int m_maxStorageSpace;
  /* 0x0018 */ unsigned int m_maxNumFiles;
  /* 0x001c */ unsigned int m_maxDailyUploadBW;
  /* 0x0020 */ unsigned int m_maxDailyDownloadBW;
}; /* size: 0x0024 */

struct HunkUserDefault
{
  /* 0x0000 */ struct HunkUser hunkUser;
  /* 0x0010 */ struct HunkUserDefault* current;
  /* 0x0014 */ struct HunkUserDefault* next;
  /* 0x0018 */ int maxSize;
  /* 0x001c */ int end;
  /* 0x0020 */ int pos;
  /* 0x0024 */ int locked;
  /* 0x0028 */ unsigned char buf[1];
  /* 0x0029 */ char __PADDING__[3];
}; /* size: 0x002c */

struct League
{
  /* 0x0000 */ int id;
  /* 0x0004 */ const char* name;
  /* 0x0008 */ const char* description;
  /* 0x000c */ const char* icon;
  /* 0x0010 */ const char* news;
  /* 0x0014 */ BOOL teamsAllowed;
  /* 0x0015 */ BOOL randomsAllowed;
  /* 0x0016 */ char Padding_1055[2];
  /* 0x0018 */ int teamSize;
  /* 0x001c */ int placementGames;
  /* 0x0020 */ float placementWindow;
  /* 0x0024 */ int bonusPool;
  /* 0x0028 */ int bonusPerWin;
  /* 0x002c */ int bonusTimeUTC;
  /* 0x0030 */ int bonusDays;
  /* 0x0034 */ BOOL bonusCumulative;
  /* 0x0035 */ char Padding_1056[3];
  /* 0x0038 */ float eloMean;
  /* 0x003c */ float eloScale;
  /* 0x0040 */ float eloK;
  /* 0x0044 */ float eloN;
  /* 0x0048 */ int eloAwards[20];
  /* 0x0098 */ int numSeasons;
  /* 0x009c */ struct LeagueSeason seasons[16];
}; /* size: 0x019c */

struct HunkUserNull
{
  /* 0x0000 */ struct HunkUser hunkUser;
  /* 0x0010 */ int size;
  /* 0x0014 */ int alignment;
}; /* size: 0x0018 */

struct dwCreateUCDAccountTask
{
  /* 0x0000 */ class bdUCDAccountInfo* ucdAccountInfo;
  /* 0x0004 */ const char* password;
  /* 0x0008 */ class bdUCDAccountID ucdAccountID;
}; /* size: 0x0018 */

struct HunkUserDebug
{
  /* 0x0000 */ struct HunkUser hunkUser;
  /* 0x0010 */ struct HunkUser* firstFit;
}; /* size: 0x0014 */

struct FIXED_HUNKUSER
{
  /* 0x0000 */ struct HunkUser hunkUser;
  /* 0x0010 */ int base_size;
  /* 0x0014 */ int block_size;
  /* 0x0018 */ struct _fixed_heapnode* free_blocks;
  /* 0x001c */ struct FastCriticalSection criticalSection;
}; /* size: 0x0024 */

struct statmonitor_s
{
  /* 0x0000 */ int endtime;
  /* 0x0004 */ struct Material* material;
}; /* size: 0x0008 */

struct ID2D1RectangleGeometry
{
}; /* size: 0x0004 */

typedef struct _fixed_heapnode
{
  /* 0x0000 */ struct _fixed_heapnode* next;
} fixed_heapnode, *Pfixed_heapnode; /* size: 0x0004 */

struct USERHEAP_FIXED_SCHEME_SPECIFIC
{
  /* 0x0000 */ int block_size;
}; /* size: 0x0004 */

struct FIRSTFIT_HUNKUSER
{
  /* 0x0000 */ struct HunkUser hunkUser;
  /* 0x0010 */ int base_size;
  /* 0x0014 */ struct _firstfit_heapnode* free_blocks;
  /* 0x0018 */ int watermarkId;
  /* 0x001c */ unsigned int hunkUser_memAllocated;
  /* 0x0020 */ struct FastCriticalSection criticalSection;
}; /* size: 0x0028 */

struct std::pair<useList_t *,useList_t *>
{
}; /* size: 0x0008 */

typedef struct _firstfit_heapnode
{
  /* 0x0000 */ struct _firstfit_heapnode* next;
  /* 0x0004 */ int size;
} firstfit_heapnode, *Pfirstfit_heapnode; /* size: 0x0008 */

union XAssetPoolEntry<FootstepTableDef>
{
  union
  {
    /* 0x0000 */ struct FootstepTableDef entry;
    /* 0x0000 */ union XAssetPoolEntry<FootstepTableDef>* next;
  }; /* size: 0x0384 */
}; /* size: 0x0384 */

struct complex4_t
{
  /* 0x0000 */ union vec4_t real;
  /* 0x0010 */ union vec4_t imag;
}; /* size: 0x0020 */

struct complex_s
{
  /* 0x0000 */ float real;
  /* 0x0004 */ float imag;
}; /* size: 0x0008 */

typedef struct _s__CatchableType
{
  /* 0x0000 */ unsigned int properties;
  /* 0x0004 */ struct _TypeDescriptor* pType;
  /* 0x0008 */ struct _PMD thisDisplacement;
  /* 0x0014 */ int sizeOrOffset;
  /* 0x0018 */ void* copyFunction /* function */;
} s__CatchableType, *Ps__CatchableType; /* size: 0x001c */

typedef struct _s__CatchableTypeArray
{
  /* 0x0000 */ int nCatchableTypes;
  /* 0x0004 */ const struct _s__CatchableType** arrayOfCatchableTypes /* zero-length array */;
} s__CatchableTypeArray, *Ps__CatchableTypeArray; /* size: 0x0004 */

struct useList_t
{
  /* 0x0000 */ struct gentity_t* ent;
  /* 0x0004 */ float score;
}; /* size: 0x0008 */

struct $_TypeDescriptor$_extraBytes_5
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[5];
}; /* size: 0x000d */

union intsAreFloatsHack
{
  union
  {
    /* 0x0000 */ int i;
    /* 0x0000 */ float f;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

union XAssetPoolEntry<FootstepFXTableDef>
{
  union
  {
    /* 0x0000 */ struct FootstepFXTableDef entry;
    /* 0x0000 */ union XAssetPoolEntry<FootstepFXTableDef>* next;
  }; /* size: 0x0084 */
}; /* size: 0x0084 */

typedef struct _D3DCOLORVALUE
{
  /* 0x0000 */ float r;
  /* 0x0004 */ float g;
  /* 0x0008 */ float b;
  /* 0x000c */ float a;
} D3DCOLORVALUE, *PD3DCOLORVALUE; /* size: 0x0010 */

struct D2D1_GRADIENT_STOP
{
  /* 0x0000 */ float position;
  /* 0x0004 */ struct _D3DCOLORVALUE color;
}; /* size: 0x0014 */

typedef struct _s__ThrowInfo
{
  /* 0x0000 */ unsigned int attributes;
  /* 0x0004 */ void* pmfnUnwind /* function */;
  /* 0x0008 */ void* pForwardCompat /* function */;
  /* 0x000c */ const struct _s__CatchableTypeArray* pCatchableTypeArray;
} s__ThrowInfo, *Ps__ThrowInfo; /* size: 0x0010 */

struct IDirect3DSurface9
{
}; /* size: 0x0004 */

struct GamerProfileBuffer
{
  /* 0x0000 */ unsigned char exeSettings[1000];
  /* 0x03e8 */ unsigned char commonSettings[1000];
  /* 0x07d0 */ BOOL isInitialized;
  /* 0x07d1 */ BOOL isLoggedIn;
  /* 0x07d2 */ BOOL errorOnRead;
}; /* size: 0x07d3 */

struct GamerProfileGlobals
{
  /* 0x0000 */ struct GamerProfileBuffer profiles[1];
  /* 0x07d3 */ char Padding_1057;
  /* 0x07d4 */ struct ddlDef_t* commonProfileDef;
  /* 0x07d8 */ struct ddlState_t commonProfileRootState;
  /* 0x07ec */ struct ddlDef_t* exeProfileDef;
  /* 0x07f0 */ struct ddlState_t exeProfileRootState;
  /* 0x0804 */ struct ddlState_t exeProfileCACState;
  /* 0x0818 */ BOOL isMatureContentEnabled;
  /* 0x0819 */ BOOL showBlood;
  /* 0x081a */ char Padding_1058[2];
  /* 0x081c */ int quickLaunchMode;
  /* 0x0820 */ int exeSettingsSize;
  /* 0x0824 */ int commonSettingsSize;
  /* 0x0828 */ BOOL is3DEnabled;
  /* 0x0829 */ char __PADDING__[3];
}; /* size: 0x082c */

union GfxEntCellRefInfo
{
  union
  {
    /* 0x0000 */ float radius;
    /* 0x0000 */ struct GfxBrushModel* bmodel;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct $_s__CatchableTypeArray$_extraBytes_8
{
  /* 0x0000 */ int nCatchableTypes;
  /* 0x0004 */ const struct _s__CatchableType* arrayOfCatchableTypes[2];
}; /* size: 0x000c */

union DevMenuChild
{
  union
  {
    /* 0x0000 */ const char* command;
    /* 0x0000 */ const struct dvar_t* dvar;
    /* 0x0000 */ struct DevGraph* graph;
    /* 0x0000 */ unsigned short menu;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct DevMenuItem
{
  /* 0x0000 */ char label[26];
  /* 0x001a */ unsigned char childType;
  /* 0x001b */ unsigned char childMenuMemory;
  /* 0x001c */ short sortKey;
  /* 0x001e */ unsigned short nextSibling;
  /* 0x0020 */ unsigned short prevSibling;
  /* 0x0022 */ unsigned short parent;
  /* 0x0024 */ union DevMenuChild child;
}; /* size: 0x0028 */

union XAssetPoolEntry<XGlobals>
{
  union
  {
    /* 0x0000 */ struct XGlobals entry;
    /* 0x0000 */ union XAssetPoolEntry<XGlobals>* next;
  }; /* size: 0x0234 */
}; /* size: 0x0234 */

struct XAssetPool<XGlobals,1>
{
  /* 0x0000 */ union XAssetPoolEntry<XGlobals>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<XGlobals> entries[1];
}; /* size: 0x0238 */

struct EvalValue
{
  /* 0x0000 */ enum EvalValueType type;
  /* 0x0004 */ long Padding_1059;
  union
  {
    union
    {
      /* 0x0008 */ double d;
      /* 0x0008 */ int i;
      /* 0x0008 */ char* s;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u;
}; /* size: 0x0010 */

struct Eval
{
  /* 0x0000 */ enum EvalOperatorType opStack[1024];
  /* 0x1000 */ struct EvalValue valStack[1024];
  /* 0x5000 */ int opStackPos;
  /* 0x5004 */ int valStackPos;
  /* 0x5008 */ int parenCount;
  /* 0x500c */ BOOL pushedOp;
  /* 0x500d */ char __PADDING__[3];
}; /* size: 0x5010 */

struct SaveHeader
{
  /* 0x0000 */ int saveVersion;
  /* 0x0004 */ int gameCheckSum;
  /* 0x0008 */ int saveCheckSum;
  /* 0x000c */ int saveId;
  /* 0x0010 */ BOOL demoPlayback;
  /* 0x0011 */ BOOL splitscreen;
  /* 0x0012 */ char Padding_1060[2];
  /* 0x0014 */ int scrCheckSum[3];
  /* 0x0020 */ char mapName[256];
  /* 0x0120 */ char buildNumber[128];
  /* 0x01a0 */ char gametype[256];
  /* 0x02a0 */ char buildVersionSuffix[16];
  /* 0x02b0 */ unsigned int networkProtocol;
  /* 0x02b4 */ char screenShotName[64];
  /* 0x02f4 */ char description[256];
  /* 0x03f4 */ char filename[64];
  /* 0x0434 */ enum SaveType saveType;
  /* 0x0438 */ struct qtime_s time;
  /* 0x045c */ int bodySize;
  /* 0x0460 */ unsigned int pad[8];
}; /* size: 0x0480 */

class bdFriendInfo
{
  /* 0x0000 */ long Padding_1061[2];
  /* 0x0008 */ unsigned __int64 m_userID;
  /* 0x0010 */ char m_userName[64];
  /* 0x0050 */ BOOL m_isOnline;
  /* 0x0051 */ unsigned char m_groupID;
}; /* size: 0x0058 */

typedef struct _WSAPROTOCOLCHAIN
{
  /* 0x0000 */ int ChainLen;
  /* 0x0004 */ unsigned long ChainEntries[7];
} WSAPROTOCOLCHAIN, *PWSAPROTOCOLCHAIN; /* size: 0x0020 */

struct doubleXPRow_t
{
  /* 0x0000 */ int row;
  /* 0x0004 */ int nameHash;
  /* 0x0008 */ int contentMask;
}; /* size: 0x000c */

struct std::pair<dvar_t const * *,dvar_t const * *>
{
}; /* size: 0x0008 */

struct XAsset
{
  /* 0x0000 */ enum XAssetType type;
  /* 0x0004 */ union XAssetHeader header;
}; /* size: 0x0008 */

struct D2D1_PIXEL_FORMAT
{
  /* 0x0000 */ enum DXGI_FORMAT format;
  /* 0x0004 */ enum D2D1_ALPHA_MODE alphaMode;
}; /* size: 0x0008 */

struct D2D1_RENDER_TARGET_PROPERTIES
{
  /* 0x0000 */ enum D2D1_RENDER_TARGET_TYPE type;
  /* 0x0004 */ struct D2D1_PIXEL_FORMAT pixelFormat;
  /* 0x000c */ float dpiX;
  /* 0x0010 */ float dpiY;
  /* 0x0014 */ enum D2D1_RENDER_TARGET_USAGE usage;
  /* 0x0018 */ enum D2D1_FEATURE_LEVEL minLevel;
}; /* size: 0x001c */

union XAssetPoolEntry<Glasses>
{
  union
  {
    /* 0x0000 */ struct Glasses entry;
    /* 0x0000 */ union XAssetPoolEntry<Glasses>* next;
  }; /* size: 0x0038 */
}; /* size: 0x0038 */

struct XAssetPool<Glasses,1>
{
  /* 0x0000 */ union XAssetPoolEntry<Glasses>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<Glasses> entries[1];
}; /* size: 0x003c */

struct std::_Pair_base<dvar_t const * *,dvar_t const * *>
{
  /* 0x0000 */ const struct dvar_t** first;
  /* 0x0004 */ const struct dvar_t** second;
}; /* size: 0x0008 */

struct std::pair<bot_threat_t *,bot_threat_t *>
{
}; /* size: 0x0008 */

struct ClientRecord
{
  /* 0x0000 */ unsigned __int64 xuid;
  /* 0x0008 */ unsigned int addr;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

struct D2D_POINT_2U
{
  /* 0x0000 */ unsigned int x;
  /* 0x0004 */ unsigned int y;
}; /* size: 0x0008 */

struct dvarCallBack_t
{
  /* 0x0000 */ BOOL needsCallback;
  /* 0x0001 */ char Padding_1062[3];
  /* 0x0004 */ void* callback /* function */;
  /* 0x0008 */ const struct dvar_t* dvar;
}; /* size: 0x000c */

struct doubleXPData_t
{
  /* 0x0000 */ struct doubleXPRow_t groups[32];
  /* 0x0180 */ BOOL isInitialized;
  /* 0x0181 */ char Padding_1063[3];
  /* 0x0184 */ const struct StringTable* groupsTable;
  /* 0x0188 */ unsigned int controllerGroups[1];
  /* 0x018c */ int controllerValues[20][1];
  /* 0x01dc */ BOOL contentPacksChecked[1];
  /* 0x01dd */ char Padding_1064[3];
  /* 0x01e0 */ unsigned int serverXPGroupMask;
  /* 0x01e4 */ unsigned int serverGunXPGroupMask;
}; /* size: 0x01e8 */

struct node_params_t
{
  /* 0x0000 */ char classname[64];
  /* 0x0040 */ char targetname[64];
  /* 0x0080 */ unsigned short targetname_hash;
  /* 0x0082 */ char target[64];
  /* 0x00c2 */ char target2[64];
  /* 0x0102 */ char Padding_1065[2];
  /* 0x0104 */ union vec3_t origin;
  /* 0x0110 */ union vec3_t angles;
  /* 0x011c */ int used;
}; /* size: 0x0120 */

class bdCommerceGiftItem
{
  /* 0x0000 */ long Padding_1066;
  /* 0x0004 */ unsigned int m_giftId;
  /* 0x0008 */ unsigned __int64 m_recipientId;
  /* 0x0010 */ unsigned __int64 m_ownerId;
  /* 0x0018 */ unsigned int m_itemId;
  /* 0x001c */ unsigned int m_itemQuantity;
  /* 0x0020 */ unsigned int m_expiry;
  /* 0x0024 */ unsigned char m_metaData[255];
}; /* size: 0x0128 */

struct TaskRecordHistory
{
  /* 0x0000 */ const struct TaskDefinition* definition;
  /* 0x0004 */ unsigned int id;
  /* 0x0008 */ int startMS;
}; /* size: 0x000c */

struct stringTableCacheEntry_t
{
  /* 0x0000 */ int nameHash;
  /* 0x0004 */ char fileName[256];
  /* 0x0104 */ const struct StringTable* asset;
  /* 0x0108 */ int hitCount;
}; /* size: 0x010c */

struct stringTableCache_t
{
  /* 0x0000 */ struct stringTableCacheEntry_t cacheEntries[16];
  /* 0x10c0 */ struct stringTableCacheEntry_t* cacheEntryList[16];
}; /* size: 0x1100 */

struct LeagueLbData
{
  /* 0x0000 */ BOOL isUpdating;
  /* 0x0001 */ char Padding_1067[3];
  /* 0x0004 */ int numResults;
  /* 0x0008 */ int totalResults;
  /* 0x000c */ int offset;
  /* 0x0010 */ unsigned __int64 currTeamID;
  /* 0x0018 */ unsigned __int64 currSubdivisionID;
  /* 0x0020 */ unsigned __int64 pivotEntity;
  /* 0x0028 */ class bdLeagueStatsInfo lbRows[500];
  /* 0x138a8 */ class bdLeagueTeamMemberInfo teamMemberInfo;
  /* 0x13d50 */ int lastUpdated;
  /* 0x13d54 */ long __PADDING__[1];
}; /* size: 0x13d58 */

struct DWRITE_GLYPH_RUN
{
  /* 0x0000 */ struct IDWriteFontFace* fontFace;
  /* 0x0004 */ float fontEmSize;
  /* 0x0008 */ unsigned int glyphCount;
  /* 0x000c */ const unsigned short* glyphIndices;
  /* 0x0010 */ const float* glyphAdvances;
  /* 0x0014 */ const struct DWRITE_GLYPH_OFFSET* glyphOffsets;
  /* 0x0018 */ int isSideways;
  /* 0x001c */ unsigned int bidiLevel;
}; /* size: 0x0020 */

struct sha256_state
{
  /* 0x0000 */ unsigned __int64 length;
  /* 0x0008 */ unsigned long state[8];
  /* 0x0028 */ unsigned long curlen;
  /* 0x002c */ unsigned char buf[64];
  /* 0x006c */ long __PADDING__[1];
}; /* size: 0x0070 */

struct D2D_SIZE_U
{
  /* 0x0000 */ unsigned int width;
  /* 0x0004 */ unsigned int height;
}; /* size: 0x0008 */

struct coreStringTableAsset_t
{
  /* 0x0000 */ int nameHash;
  /* 0x0004 */ int hitCount;
}; /* size: 0x0008 */

typedef struct _NV_DISPLAY_BLANKING_INFO_V1
{
  /* 0x0000 */ unsigned long version;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long blankingState : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long persistBlankingAcrossHotPlugUnplug : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned long reserved : 30; /* bit position: 2 */
  }; /* bitfield */
} NV_DISPLAY_BLANKING_INFO_V1, *PNV_DISPLAY_BLANKING_INFO_V1; /* size: 0x0008 */

struct hunkUsed_t
{
  /* 0x0000 */ int permanent;
  /* 0x0004 */ int temp;
}; /* size: 0x0008 */

struct hunkHeader_t
{
  /* 0x0000 */ unsigned int magic;
  /* 0x0004 */ int size;
  /* 0x0008 */ const char* name;
  /* 0x000c */ int dummy;
}; /* size: 0x0010 */

struct mem_track_node_s
{
  /* 0x0000 */ struct mem_track_t data;
  /* 0x0098 */ int project;
  /* 0x009c */ struct mem_track_node_s* prev;
  /* 0x00a0 */ struct mem_track_node_s* next;
}; /* size: 0x00a4 */

struct FXScopedEffectLock
{
  /* 0x0000 */ struct FxEffect* mRemoteEffect;
}; /* size: 0x0004 */

struct AssetList
{
  /* 0x0000 */ int assetCount;
  /* 0x0004 */ int maxCount;
  /* 0x0008 */ union XAssetHeader* assets;
}; /* size: 0x000c */

struct target_t
{
  /* 0x0000 */ struct gentity_t* ent;
  /* 0x0004 */ union vec3_t offset;
  /* 0x0010 */ int materialIndex;
  /* 0x0014 */ int offscreenMaterialIndex;
  /* 0x0018 */ int flags;
}; /* size: 0x001c */

struct fileData_s
{
  /* 0x0000 */ void* data;
  /* 0x0004 */ struct fileData_s* next;
  /* 0x0008 */ unsigned char type;
  /* 0x0009 */ char name[1];
  /* 0x000a */ char __PADDING__[2];
}; /* size: 0x000c */

union XAssetPoolEntry<Slug>
{
  union
  {
    /* 0x0000 */ struct Slug entry;
    /* 0x0000 */ union XAssetPoolEntry<Slug>* next;
  }; /* size: 0x000c */
}; /* size: 0x000c */

typedef struct _D3DVIEWPORT9
{
  /* 0x0000 */ unsigned long X;
  /* 0x0004 */ unsigned long Y;
  /* 0x0008 */ unsigned long Width;
  /* 0x000c */ unsigned long Height;
  /* 0x0010 */ float MinZ;
  /* 0x0014 */ float MaxZ;
} D3DVIEWPORT9, *PD3DVIEWPORT9; /* size: 0x0018 */

struct WINTRUST_BLOB_INFO_
{
  /* 0x0000 */ unsigned long cbStruct;
  /* 0x0004 */ struct _GUID gSubject;
  /* 0x0014 */ const wchar_t* pcwszDisplayName;
  /* 0x0018 */ unsigned long cbMemObject;
  /* 0x001c */ unsigned char* pbMemObject;
  /* 0x0020 */ unsigned long cbMemSignedMsg;
  /* 0x0024 */ unsigned char* pbMemSignedMsg;
}; /* size: 0x0028 */

union qfile_gus
{
  union
  {
    /* 0x0000 */ struct _iobuf* o;
    /* 0x0000 */ unsigned char* z;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct qfile_us
{
  /* 0x0000 */ union qfile_gus file;
  /* 0x0004 */ int iwdIsClone;
}; /* size: 0x0008 */

struct fileHandleData_t
{
  /* 0x0000 */ struct qfile_us handleFiles;
  /* 0x0008 */ int handleSync;
  /* 0x000c */ int fileSize;
  /* 0x0010 */ int zipFilePos;
  /* 0x0014 */ struct iwd_t* zipFile;
  /* 0x0018 */ int streamed;
  /* 0x001c */ char name[256];
}; /* size: 0x011c */

struct ID2D1Resource
{
}; /* size: 0x0004 */

struct iwd_t
{
  /* 0x0000 */ char iwdFilename[256];
  /* 0x0100 */ char iwdBasename[256];
  /* 0x0200 */ char iwdGamename[256];
  /* 0x0300 */ unsigned char* handle;
  /* 0x0304 */ int checksum;
  /* 0x0308 */ int pure_checksum;
  /* 0x030c */ volatile long hasOpenFile;
  /* 0x0310 */ int numFiles;
  /* 0x0314 */ unsigned char referenced;
  /* 0x0315 */ char Padding_1068[3];
  /* 0x0318 */ unsigned int hashSize;
  /* 0x031c */ struct fileInIwd_s** hashTable;
  /* 0x0320 */ struct fileInIwd_s* buildBuffer;
}; /* size: 0x0324 */

struct NV_DISPLAY_REFRESH_RATE
{
  /* 0x0000 */ unsigned long numerator;
  /* 0x0004 */ unsigned long denominator;
}; /* size: 0x0008 */

struct NV_DISPLAY_SETTING
{
  /* 0x0000 */ unsigned long width;
  /* 0x0004 */ unsigned long height;
  /* 0x0008 */ enum _NV_FORMAT colorFormat;
  /* 0x000c */ struct NV_DISPLAY_REFRESH_RATE refreshRate;
  /* 0x0014 */ unsigned long reserved;
}; /* size: 0x0018 */

struct NV_HCLONE_PATH_V1
{
  /* 0x0000 */ unsigned long version;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long isNonNVIDIA : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long isAttachedToDesktop : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned long reserved : 30; /* bit position: 2 */
  }; /* bitfield */
  /* 0x0008 */ unsigned long sourceId;
  union
  {
    /* 0x000c */ unsigned long targetId;
    /* 0x000c */ unsigned long displayId;
  }; /* size: 0x0004 */
  /* 0x0010 */ struct NV_DISPLAY_SETTING dispSetting;
  /* 0x0028 */ unsigned long reserved1;
}; /* size: 0x002c */

union XAssetPoolEntry<DestructibleDef>
{
  union
  {
    /* 0x0000 */ struct DestructibleDef entry;
    /* 0x0000 */ union XAssetPoolEntry<DestructibleDef>* next;
  }; /* size: 0x0018 */
}; /* size: 0x0018 */

struct fileInIwd_s
{
  /* 0x0000 */ unsigned long pos;
  /* 0x0004 */ char* name;
  /* 0x0008 */ struct fileInIwd_s* next;
}; /* size: 0x000c */

struct iwd_pure_check_s
{
  /* 0x0000 */ struct iwd_pure_check_s* next;
  /* 0x0004 */ int checksum;
  /* 0x0008 */ char iwdBasename[256];
  /* 0x0108 */ char iwdGamename[256];
}; /* size: 0x0208 */

struct searchpath_s
{
  /* 0x0000 */ struct searchpath_s* next;
  /* 0x0004 */ struct iwd_t* iwd;
  /* 0x0008 */ struct directory_t* dir;
  /* 0x000c */ int bLocalized;
  /* 0x0010 */ int ignore;
  /* 0x0014 */ int ignorePureCheck;
  /* 0x0018 */ int language;
}; /* size: 0x001c */

struct FxMarksGridCell
{
  /* 0x0000 */ short x;
  /* 0x0002 */ short y;
  /* 0x0004 */ short z;
}; /* size: 0x0006 */

struct FxMarksHashEntry
{
  /* 0x0000 */ struct FxMarksHashEntry* next;
  /* 0x0004 */ struct FxMarksGridCell cell;
  /* 0x000a */ unsigned short numMarks;
}; /* size: 0x000c */

struct DEMO_SpawnPoint
{
  /* 0x0000 */ unsigned short index;
  /* 0x0002 */ short yaw;
  /* 0x0004 */ short origin[3];
  /* 0x000a */ short baseWeight[3];
  /* 0x0010 */ short weight;
  /* 0x0012 */ short orderNum;
  /* 0x0014 */ unsigned char dangerous;
  /* 0x0015 */ char __PADDING__[1];
}; /* size: 0x0016 */

struct FxTriGroup
{
  /* 0x0000 */ unsigned short indices[3][2];
  /* 0x000c */ struct GfxMarkContext context;
  /* 0x0012 */ unsigned char triCount;
  /* 0x0013 */ unsigned char unused[1];
  /* 0x0014 */ int next;
}; /* size: 0x0018 */

struct directory_t
{
  /* 0x0000 */ char path[256];
  /* 0x0100 */ char gamedir[256];
}; /* size: 0x0200 */

union XAssetPoolEntry<WeaponAttachment>
{
  union
  {
    /* 0x0000 */ struct WeaponAttachment entry;
    /* 0x0000 */ union XAssetPoolEntry<WeaponAttachment>* next;
  }; /* size: 0x011c */
}; /* size: 0x011c */

struct AddonMapDef
{
  /* 0x0000 */ const char* prefix;
  /* 0x0004 */ unsigned int prefixLen;
  /* 0x0008 */ int optionalBaseMap;
}; /* size: 0x000c */

class phys_free_list<rigid_body_constraint_distance>::iterator
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_distance>::T_internal_base* m_ptr;
}; /* size: 0x0004 */

class jqProfNamedEventMarker
{
}; /* size: 0x0001 */

struct rpnStaticFunction_t
{
  /* 0x0000 */ int arguments;
  /* 0x0004 */ void* cmd /* function */;
}; /* size: 0x0008 */

struct VP_FindCustomPath::__l4::pathNodeTransientInfo
{
  /* 0x0000 */ short fromNode;
  /* 0x0002 */ short flags;
  /* 0x0004 */ float gCost;
  /* 0x0008 */ float fCost;
  /* 0x000c */ float hCost;
}; /* size: 0x0010 */

union XAssetPoolEntry<ZBarrierDef>
{
  union
  {
    /* 0x0000 */ struct ZBarrierDef entry;
    /* 0x0000 */ union XAssetPoolEntry<ZBarrierDef>* next;
  }; /* size: 0x0230 */
}; /* size: 0x0230 */

struct OperandList
{
  /* 0x0000 */ struct Operand operands[10];
  /* 0x0050 */ int operandCount;
}; /* size: 0x0054 */

struct OperandStack
{
  /* 0x0000 */ struct OperandList stack[60];
  /* 0x13b0 */ int numOperandLists;
}; /* size: 0x13b4 */

class bdPagingToken
{
  /* 0x0000 */ long Padding_1069;
  /* 0x0004 */ enum bdPagingToken::bdStatus m_status;
  /* 0x0008 */ class bdSecurityID m_sessionID;
  /* 0x0010 */ unsigned int m_numResultsPerPage;
}; /* size: 0x0014 */

union XAssetPoolEntry<MaterialTechniqueSet>
{
  union
  {
    /* 0x0000 */ struct MaterialTechniqueSet entry;
    /* 0x0000 */ union XAssetPoolEntry<MaterialTechniqueSet>* next;
  }; /* size: 0x0098 */
}; /* size: 0x0098 */

union entryInternalData
{
  union
  {
    /* 0x0000 */ enum expOperationEnum op;
    /* 0x0000 */ struct Operand operand;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct D2D_RECT_U
{
  /* 0x0000 */ unsigned int left;
  /* 0x0004 */ unsigned int top;
  /* 0x0008 */ unsigned int right;
  /* 0x000c */ unsigned int bottom;
}; /* size: 0x0010 */

struct pc_token_s
{
  /* 0x0000 */ int type;
  /* 0x0004 */ int subtype;
  /* 0x0008 */ int intvalue;
  /* 0x000c */ float floatvalue;
  /* 0x0010 */ char string[1024];
}; /* size: 0x0410 */

struct expressionEntry
{
  /* 0x0000 */ int type;
  /* 0x0004 */ union entryInternalData data;
  /* 0x000c */ struct expressionEntry* next;
}; /* size: 0x0010 */

struct ID2D1Mesh
{
}; /* size: 0x0004 */

struct ExpressionAllocState
{
  /* 0x0000 */ int size;
  /* 0x0004 */ void* buffer;
}; /* size: 0x0008 */

struct bb_msg_t
{
  /* 0x0000 */ unsigned char* data;
  /* 0x0004 */ int maxsize;
  /* 0x0008 */ int cursize;
  /* 0x000c */ BOOL overflow;
  /* 0x000d */ char Padding_1070[3];
  /* 0x0010 */ unsigned char* pppHashTable;
  /* 0x0014 */ unsigned char pppBits;
  /* 0x0015 */ char Padding_1071[3];
  /* 0x0018 */ unsigned int pppHash;
  /* 0x001c */ int pppBitOffset;
  /* 0x0020 */ int pppBitCount;
}; /* size: 0x0024 */

struct ucmd_t
{
  /* 0x0000 */ char* name;
  /* 0x0004 */ void* func /* function */;
  /* 0x0008 */ int allowFromOldServer;
}; /* size: 0x000c */

struct DefinitionMap
{
  /* 0x0000 */ unsigned int nameHash;
  /* 0x0004 */ unsigned int formatHash;
  /* 0x0008 */ int parameterCount;
  /* 0x000c */ int definitionId;
  /* 0x0010 */ unsigned char parameters[64];
}; /* size: 0x0050 */

struct IDirectSound8
{
}; /* size: 0x0004 */

struct bb_highwater_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int current_value;
  /* 0x0008 */ unsigned int sent_value;
}; /* size: 0x000c */

union XAssetPoolEntry<AddonMapEnts>
{
  union
  {
    /* 0x0000 */ struct AddonMapEnts entry;
    /* 0x0000 */ union XAssetPoolEntry<AddonMapEnts>* next;
  }; /* size: 0x0034 */
}; /* size: 0x0034 */

struct BBMsgHeader
{
  /* 0x0000 */ char ident[8];
  /* 0x0008 */ int magic;
  /* 0x000c */ unsigned int createTime;
  /* 0x0010 */ unsigned int sendTime;
  /* 0x0014 */ unsigned int flags;
}; /* size: 0x0018 */

class bdBase64
{
}; /* size: 0x0001 */

struct BBThrottle
{
  /* 0x0000 */ unsigned int name;
  /* 0x0004 */ int throttleMS;
  /* 0x0008 */ int lastMS;
}; /* size: 0x000c */

typedef struct _WIN32_FIND_DATAA
{
  /* 0x0000 */ unsigned long dwFileAttributes;
  /* 0x0004 */ struct _FILETIME ftCreationTime;
  /* 0x000c */ struct _FILETIME ftLastAccessTime;
  /* 0x0014 */ struct _FILETIME ftLastWriteTime;
  /* 0x001c */ unsigned long nFileSizeHigh;
  /* 0x0020 */ unsigned long nFileSizeLow;
  /* 0x0024 */ unsigned long dwReserved0;
  /* 0x0028 */ unsigned long dwReserved1;
  /* 0x002c */ char cFileName[260];
  /* 0x0130 */ char cAlternateFileName[14];
  /* 0x013e */ char __PADDING__[2];
} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA; /* size: 0x0140 */

class bdLink
{
  /* 0x0000 */ long Padding_1072[2];
  /* 0x0008 */ unsigned __int64 m_entityID;
  /* 0x0010 */ unsigned int m_category;
  /* 0x0014 */ char m_linkCode[64];
}; /* size: 0x0058 */

typedef struct _POINTL
{
  /* 0x0000 */ long x;
  /* 0x0004 */ long y;
} POINTL, *PPOINTL; /* size: 0x0008 */

struct audioSample_t
{
  /* 0x0000 */ unsigned char* buffer;
  /* 0x0004 */ int lengthInBytes;
  /* 0x0008 */ int lengthInSamples;
  /* 0x000c */ int bytesPerSample;
  /* 0x0010 */ int frequency;
  /* 0x0014 */ BOOL stereo;
  /* 0x0015 */ char Padding_1073[3];
  /* 0x0018 */ int channels;
  /* 0x001c */ int sampleOffset;
}; /* size: 0x0020 */

typedef struct _devicemodeA
{
  /* 0x0000 */ unsigned char dmDeviceName[32];
  /* 0x0020 */ unsigned short dmSpecVersion;
  /* 0x0022 */ unsigned short dmDriverVersion;
  /* 0x0024 */ unsigned short dmSize;
  /* 0x0026 */ unsigned short dmDriverExtra;
  /* 0x0028 */ unsigned long dmFields;
  union
  {
    struct
    {
      /* 0x002c */ short dmOrientation;
      /* 0x002e */ short dmPaperSize;
      /* 0x0030 */ short dmPaperLength;
      /* 0x0032 */ short dmPaperWidth;
      /* 0x0034 */ short dmScale;
      /* 0x0036 */ short dmCopies;
      /* 0x0038 */ short dmDefaultSource;
      /* 0x003a */ short dmPrintQuality;
    }; /* size: 0x0010 */
    struct
    {
      /* 0x002c */ struct _POINTL dmPosition;
      /* 0x0034 */ unsigned long dmDisplayOrientation;
      /* 0x0038 */ unsigned long dmDisplayFixedOutput;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x003c */ short dmColor;
  /* 0x003e */ short dmDuplex;
  /* 0x0040 */ short dmYResolution;
  /* 0x0042 */ short dmTTOption;
  /* 0x0044 */ short dmCollate;
  /* 0x0046 */ unsigned char dmFormName[32];
  /* 0x0066 */ unsigned short dmLogPixels;
  /* 0x0068 */ unsigned long dmBitsPerPel;
  /* 0x006c */ unsigned long dmPelsWidth;
  /* 0x0070 */ unsigned long dmPelsHeight;
  union
  {
    /* 0x0074 */ unsigned long dmDisplayFlags;
    /* 0x0074 */ unsigned long dmNup;
  }; /* size: 0x0004 */
  /* 0x0078 */ unsigned long dmDisplayFrequency;
  /* 0x007c */ unsigned long dmICMMethod;
  /* 0x0080 */ unsigned long dmICMIntent;
  /* 0x0084 */ unsigned long dmMediaType;
  /* 0x0088 */ unsigned long dmDitherType;
  /* 0x008c */ unsigned long dmReserved1;
  /* 0x0090 */ unsigned long dmReserved2;
  /* 0x0094 */ unsigned long dmPanningWidth;
  /* 0x0098 */ unsigned long dmPanningHeight;
} devicemodeA, *PdevicemodeA; /* size: 0x009c */

typedef struct _CRYPT_ATTRIBUTES
{
  /* 0x0000 */ unsigned long cAttr;
  /* 0x0004 */ struct _CRYPT_ATTRIBUTE* rgAttr;
} CRYPT_ATTRIBUTES, *PCRYPT_ATTRIBUTES; /* size: 0x0008 */

struct GenericAabbTree
{
  /* 0x0000 */ int firstItem;
  /* 0x0004 */ int itemCount;
  /* 0x0008 */ int firstChild;
  /* 0x000c */ int childCount;
}; /* size: 0x0010 */

struct GenericAabbTreeOptions
{
  /* 0x0000 */ void* items;
  /* 0x0004 */ int itemCount;
  /* 0x0008 */ int itemSize;
  /* 0x000c */ int maintainValidBounds;
  /* 0x0010 */ union vec3_t* mins;
  /* 0x0014 */ union vec3_t* maxs;
  /* 0x0018 */ struct GenericAabbTree* treeNodePool;
  /* 0x001c */ int treeNodeLimit;
  /* 0x0020 */ int minItemsPerLeaf;
  /* 0x0024 */ int maxItemsPerLeaf;
}; /* size: 0x0028 */

union XAssetPoolEntry<SkinnedVertsDef>
{
  union
  {
    /* 0x0000 */ struct SkinnedVertsDef entry;
    /* 0x0000 */ union XAssetPoolEntry<SkinnedVertsDef>* next;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct stringDef_s
{
  /* 0x0000 */ struct stringDef_s* next;
  /* 0x0004 */ const char* str;
}; /* size: 0x0008 */

typedef struct _CTL_ENTRY
{
  /* 0x0000 */ struct _CRYPTOAPI_BLOB SubjectIdentifier;
  /* 0x0008 */ unsigned long cAttribute;
  /* 0x000c */ struct _CRYPT_ATTRIBUTE* rgAttribute;
} CTL_ENTRY, *PCTL_ENTRY; /* size: 0x0010 */

struct conditionStack_t
{
  /* 0x0000 */ struct conditionStackMember_t members[64];
  /* 0x0900 */ int size;
}; /* size: 0x0904 */

typedef struct _RGNDATAHEADER
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long iType;
  /* 0x0008 */ unsigned long nCount;
  /* 0x000c */ unsigned long nRgnSize;
  /* 0x0010 */ struct tagRECT rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER; /* size: 0x0020 */

typedef struct _RGNDATA
{
  /* 0x0000 */ struct _RGNDATAHEADER rdh;
  /* 0x0020 */ char Buffer[1];
  /* 0x0021 */ char __PADDING__[3];
} RGNDATA, *PRGNDATA; /* size: 0x0024 */

struct nestingCounts_t
{
  /* 0x0000 */ int bracketNestingLevel;
  /* 0x0004 */ int ifNestingLevel;
}; /* size: 0x0008 */

struct loadAssets_t
{
  /* 0x0000 */ float fadeClamp;
  /* 0x0004 */ int fadeCycle;
  /* 0x0008 */ float fadeAmount;
  /* 0x000c */ float fadeInAmount;
}; /* size: 0x0010 */

class bdLinkedList<bdReference<bdDataChunk> >
{
  /* 0x0000 */ class bdLinkedList<bdReference<bdDataChunk> >::Node* m_head;
  /* 0x0004 */ class bdLinkedList<bdReference<bdDataChunk> >::Node* m_tail;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

class bdQueue<bdReference<bdDataChunk> >
{
  /* 0x0000 */ class bdLinkedList<bdReference<bdDataChunk> > m_list;
}; /* size: 0x000c */

class bdUnreliableReceiveWindow
{
  /* 0x0000 */ long Padding_1074;
  /* 0x0004 */ class bdSequenceNumber m_seqNumber;
  /* 0x0008 */ class bdQueue<bdReference<bdDataChunk> > m_recvQueue;
}; /* size: 0x0014 */

struct IDWriteFontFamily
{
}; /* size: 0x0004 */

struct KeywordHashEntry<menuDef_t,1024,128>
{
  /* 0x0000 */ const char* keyword;
  /* 0x0004 */ void* func /* function */;
}; /* size: 0x0008 */

struct FxFlagDef
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int flagType;
  /* 0x0008 */ int mask;
  /* 0x000c */ int value;
}; /* size: 0x0010 */

struct KeywordHashEntry<itemDef_s,1024,378>
{
  /* 0x0000 */ const char* keyword;
  /* 0x0004 */ void* func /* function */;
}; /* size: 0x0008 */

struct IDWriteFontFileStream
{
}; /* size: 0x0004 */

struct std::pair<FxMarkTri *,FxMarkTri *>
{
}; /* size: 0x0008 */

struct compression_state
{
  /* 0x0000 */ const unsigned char* input;
  /* 0x0004 */ unsigned int input_len;
  /* 0x0008 */ int num_output_ptr;
  /* 0x000c */ int max_output_ptr;
  /* 0x0010 */ unsigned char** output_ptr;
}; /* size: 0x0014 */

struct commandDef_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ void* handler /* function */;
}; /* size: 0x0008 */

struct EdgeInfo
{
  /* 0x0000 */ union vec3_t v_v;
  /* 0x000c */ float discNormalDist;
  /* 0x0010 */ float discriminant;
  /* 0x0014 */ union vec3_t discEdgeAxis;
  /* 0x0020 */ union vec3_t midpoint;
  /* 0x002c */ union vec3_t start_v;
  /* 0x0038 */ union vec3_t discNormalAxis;
}; /* size: 0x0044 */

class bdReference<bdMessage>
{
  /* 0x0000 */ class bdMessage* m_ptr;
}; /* size: 0x0004 */

class bdDataChunk
{
  /* 0x0000 */ long Padding_1075[4];
  /* 0x0010 */ class bdReference<bdMessage> m_message;
  /* 0x0014 */ unsigned char m_flags;
  /* 0x0015 */ char Padding_1076;
  /* 0x0016 */ unsigned short m_seqNum;
}; /* size: 0x0018 */

struct DWRITE_GLYPH_METRICS
{
  /* 0x0000 */ int leftSideBearing;
  /* 0x0004 */ unsigned int advanceWidth;
  /* 0x0008 */ int rightSideBearing;
  /* 0x000c */ int topSideBearing;
  /* 0x0010 */ unsigned int advanceHeight;
  /* 0x0014 */ int bottomSideBearing;
  /* 0x0018 */ int verticalOriginY;
}; /* size: 0x001c */

struct FxAddMarkCmd
{
  /* 0x0000 */ enum LocalClientNum_t localClientNum;
  /* 0x0004 */ const struct FxElemDef* elemDef;
  /* 0x0008 */ struct FxSpatialFrame spatialFrame;
  /* 0x0024 */ int randomSeed;
  /* 0x0028 */ unsigned int markEntnum;
  /* 0x002c */ BOOL markViewmodel;
  /* 0x002d */ char Padding_1077[3];
  /* 0x0030 */ union vec3_t viewOffset;
}; /* size: 0x003c */

struct png_text_struct
{
  /* 0x0000 */ int compression;
  /* 0x0004 */ char* key;
  /* 0x0008 */ char* text;
  /* 0x000c */ unsigned int text_length;
  /* 0x0010 */ unsigned int itxt_length;
  /* 0x0014 */ char* lang;
  /* 0x0018 */ char* lang_key;
}; /* size: 0x001c */

struct scrollInfo_s
{
  /* 0x0000 */ int nextScrollTime;
  /* 0x0004 */ int nextAdjustTime;
  /* 0x0008 */ int adjustValue;
  /* 0x000c */ int scrollKey;
  /* 0x0010 */ float xStart;
  /* 0x0014 */ float yStart;
  /* 0x0018 */ struct itemDef_s* item;
  /* 0x001c */ int scrollDir;
}; /* size: 0x0020 */

struct MenuNameHash_t
{
  /* 0x0000 */ unsigned int hash;
}; /* size: 0x0004 */

struct png_sPLT_entry_struct
{
  /* 0x0000 */ unsigned short red;
  /* 0x0002 */ unsigned short green;
  /* 0x0004 */ unsigned short blue;
  /* 0x0006 */ unsigned short alpha;
  /* 0x0008 */ unsigned short frequency;
}; /* size: 0x000a */

struct ScopedScrPlaceViewStack
{
  /* 0x0000 */ struct ScreenPlacementStack* mStack;
}; /* size: 0x0004 */

struct FLAC__StreamMetadata_SeekPoint
{
  /* 0x0000 */ unsigned __int64 sample_number;
  /* 0x0008 */ unsigned __int64 stream_offset;
  /* 0x0010 */ unsigned int frame_samples;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

struct ScreenPlacementStack
{
  /* 0x0000 */ struct ScreenPlacement stack[2];
  /* 0x00f8 */ int size;
  /* 0x00fc */ enum UIContextIndex_t contextIndex;
}; /* size: 0x0100 */

struct D3DX11_IMAGE_INFO
{
  /* 0x0000 */ unsigned int Width;
  /* 0x0004 */ unsigned int Height;
  /* 0x0008 */ unsigned int Depth;
  /* 0x000c */ unsigned int ArraySize;
  /* 0x0010 */ unsigned int MipLevels;
  /* 0x0014 */ unsigned int MiscFlags;
  /* 0x0018 */ enum DXGI_FORMAT Format;
  /* 0x001c */ enum D3D11_RESOURCE_DIMENSION ResourceDimension;
  /* 0x0020 */ enum D3DX11_IMAGE_FILE_FORMAT ImageFileFormat;
}; /* size: 0x0024 */

struct FxElem
{
  union
  {
    /* 0x0000 */ const int HANDLE_SCALE;
    /* 0x0000 */ const int POOL_SIZE;
    struct
    {
      /* 0x0000 */ unsigned char defIndex;
      /* 0x0001 */ unsigned char sequence;
      /* 0x0002 */ unsigned char atRestFraction;
      /* 0x0003 */ unsigned char emitResidual;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0004 */ int msecBegin;
  /* 0x0008 */ union vec3_t baseVel;
  union
  {
    /* 0x0014 */ int physObjId;
    /* 0x0014 */ union vec3_t origin;
  }; /* size: 0x000c */
  union
  {
    union
    {
      /* 0x0020 */ float trailTexCoord;
      struct
      {
        /* 0x0020 */ unsigned short lightingHandle;
        struct
        {
          /* 0x0022 */ unsigned char fadeAlpha;
          /* 0x0023 */ unsigned char fadeAlphaPerSec;
        } /* size: 0x0002 */ fade;
      } /* size: 0x0004 */ s;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0024 */ unsigned int attachedEffectHandle;
  /* 0x0028 */ unsigned char windInterp;
  /* 0x0029 */ unsigned char elemSpawnVisBits;
  /* 0x002a */ unsigned char pad[2];
}; /* size: 0x002c */

struct FxElemShared
{
  /* 0x0000 */ unsigned short nextElemHandleInEffect;
  /* 0x0002 */ unsigned short prevElemHandleInEffect;
}; /* size: 0x0004 */

struct FxElemContainer
{
  /* 0x0000 */ struct FxElem elem;
  /* 0x002c */ struct FxElemShared shared;
}; /* size: 0x0030 */

struct FxPool<FxElem,FxElemContainer>
{
  union
  {
    /* 0x0000 */ const int itemSize;
    /* 0x0000 */ const int POOL_SIZE;
    /* 0x0000 */ int nextFree;
    /* 0x0000 */ struct FxElemContainer item;
  }; /* size: 0x0030 */
}; /* size: 0x0030 */

struct FxPool<FxTrail,FxTrail>
{
  union
  {
    /* 0x0000 */ const int itemSize;
    /* 0x0000 */ const int POOL_SIZE;
    /* 0x0000 */ int nextFree;
    /* 0x0000 */ struct FxTrail item;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct FxTrailElem
{
  union
  {
    /* 0x0000 */ const int HANDLE_SCALE;
    /* 0x0000 */ const int POOL_SIZE;
    /* 0x0000 */ union vec3_t origin;
  }; /* size: 0x000c */
  /* 0x000c */ float spawnDist;
  /* 0x0010 */ int msecBegin;
  /* 0x0014 */ unsigned short nextTrailElemHandle;
  /* 0x0016 */ short baseVelZ;
  /* 0x0018 */ char basis[3][2];
  /* 0x001e */ unsigned char sequence;
  /* 0x001f */ unsigned char unused;
}; /* size: 0x0020 */

struct FxPool<FxTrailElem,FxTrailElem>
{
  union
  {
    /* 0x0000 */ const int itemSize;
    /* 0x0000 */ const int POOL_SIZE;
    /* 0x0000 */ int nextFree;
    /* 0x0000 */ struct FxTrailElem item;
  }; /* size: 0x0020 */
}; /* size: 0x0020 */

struct FxVisState
{
  /* 0x0000 */ struct FxVisBlocker blocker[256];
  /* 0x1000 */ volatile long blockerCount;
  /* 0x1004 */ unsigned int pad[3];
}; /* size: 0x1010 */

struct FxUniqueHandleDb::Node
{
  /* 0x0000 */ int nextNode;
  /* 0x0004 */ unsigned int handle;
  /* 0x0008 */ unsigned short effect;
  /* 0x000a */ unsigned short pad[3];
}; /* size: 0x0010 */

struct FxUniqueHandleDb
{
  /* 0x0000 */ struct FxUniqueHandleDb::Node nodes[1024];
  /* 0x4000 */ int firstFreeNode;
  /* 0x4004 */ int numNodesInUse;
  /* 0x4008 */ int pad[2];
}; /* size: 0x4010 */

struct FxPlaySoundAction
{
  /* 0x0000 */ union vec3_t spawnOrigin;
  /* 0x000c */ const char* soundName;
}; /* size: 0x0010 */

union FxPPUAction
{
  /* 0x0000 */ struct FxPlaySoundAction playSoundAction;
}; /* size: 0x0010 */

struct FxSystemBuffers
{
  /* 0x0000 */ struct FxEffectContainer effects[1024];
  /* 0x44000 */ struct FxPool<FxElem,FxElemContainer> elems[2048];
  /* 0x5c000 */ struct FxPool<FxTrail,FxTrail> trails[128];
  /* 0x5c400 */ struct FxPool<FxTrailElem,FxTrailElem> trailElems[2048];
  /* 0x6c400 */ struct FxVisState visState[2];
  /* 0x6e420 */ struct FxUniqueHandleDb uniqueHandleDb;
  /* 0x72430 */ unsigned char ppuActionTypes[128];
  /* 0x724b0 */ union FxPPUAction ppuActions[128];
  /* 0x72cb0 */ unsigned char padBuffer[80];
}; /* size: 0x72d00 */

class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >
{
  /* 0x0000 */ char* current;
}; /* size: 0x0004 */

struct DiskPrimaryLight
{
  /* 0x0000 */ unsigned char type;
  /* 0x0001 */ unsigned char canUseShadowMap;
  /* 0x0002 */ short cullDist;
  /* 0x0004 */ char priority;
  /* 0x0005 */ unsigned char useCookie;
  /* 0x0006 */ unsigned char shadowmapVolume;
  /* 0x0007 */ unsigned char _pad;
  /* 0x0008 */ union vec3_t dir;
  /* 0x0014 */ union vec3_t origin;
  /* 0x0020 */ union vec3_t color;
  /* 0x002c */ union vec3_t bouncecolor;
  /* 0x0038 */ union vec3_t angle;
  /* 0x0044 */ float intensity;
  /* 0x0048 */ float dAttenuation;
  /* 0x004c */ float cutOn;
  /* 0x0050 */ float nearEdge;
  /* 0x0054 */ float farEdge;
  /* 0x0058 */ float radius;
  /* 0x005c */ float cosHalfFovOuter;
  /* 0x0060 */ float cosHalfFovInner;
  /* 0x0064 */ int exponent;
  /* 0x0068 */ float rotationLimit;
  /* 0x006c */ float translationLimit;
  /* 0x0070 */ float roundness;
  /* 0x0074 */ float mipDistance;
  /* 0x0078 */ union vec4_t aAbB;
  /* 0x0088 */ union vec4_t cookieControl0;
  /* 0x0098 */ union vec4_t cookieControl1;
  /* 0x00a8 */ union vec4_t cookieControl2;
  /* 0x00b8 */ char defName[64];
}; /* size: 0x00f8 */

struct std::iterator<std::random_access_iterator_tag,char,int,char *,char &>
{
}; /* size: 0x0001 */

struct BspLump
{
  /* 0x0000 */ unsigned int length;
  /* 0x0004 */ unsigned int offset;
}; /* size: 0x0008 */

struct OldBspHeader
{
  /* 0x0000 */ unsigned int ident;
  /* 0x0004 */ unsigned int version;
  /* 0x0008 */ struct BspLump lumps[47];
}; /* size: 0x0180 */

struct std::random_access_iterator_tag
{
}; /* size: 0x0001 */

typedef struct _NVVIOCAPS
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ char adapterName[4096];
  /* 0x1004 */ unsigned long adapterClass;
  /* 0x1008 */ unsigned long adapterCaps;
  /* 0x100c */ unsigned long dipSwitch;
  /* 0x1010 */ unsigned long dipSwitchReserved;
  /* 0x1014 */ unsigned long boardID;
  struct
  {
    /* 0x1018 */ unsigned long majorVersion;
    /* 0x101c */ unsigned long minorVersion;
  } /* size: 0x0008 */ driver;
  struct
  {
    /* 0x1020 */ unsigned long majorVersion;
    /* 0x1024 */ unsigned long minorVersion;
  } /* size: 0x0008 */ firmWare;
  /* 0x1028 */ unsigned long ownerId;
  /* 0x102c */ enum _NVVIOOWNERTYPE ownerType;
} NVVIOCAPS, *PNVVIOCAPS; /* size: 0x1030 */

class std::reverse_iterator<char *>
{
}; /* size: 0x0004 */

struct D3DXCOLOR
{
  /* 0x0000 */ float r;
  /* 0x0004 */ float g;
  /* 0x0008 */ float b;
  /* 0x000c */ float a;
}; /* size: 0x0010 */

typedef struct _NV_DX_VIDEO_STEREO_INFO
{
  /* 0x0000 */ unsigned long dwVersion;
  /* 0x0004 */ struct NVDX_ObjectHandle__* hSurface;
  /* 0x0008 */ struct NVDX_ObjectHandle__* hLinkedSurface;
  /* 0x000c */ enum _NV_STEREO_VIDEO_FORMAT eFormat;
  /* 0x0010 */ int sViewOffset;
  /* 0x0014 */ int bStereoEnable;
} NV_DX_VIDEO_STEREO_INFO, *PNV_DX_VIDEO_STEREO_INFO; /* size: 0x0018 */

class bdLinkedList<bdEndpoint>
{
  /* 0x0000 */ class bdLinkedList<bdEndpoint>::Node* m_head;
  /* 0x0004 */ class bdLinkedList<bdEndpoint>::Node* m_tail;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

struct FLAC__EntropyCodingMethod_PartitionedRice
{
  /* 0x0000 */ unsigned int order;
  /* 0x0004 */ const struct FLAC__EntropyCodingMethod_PartitionedRiceContents* contents;
}; /* size: 0x0008 */

struct nestingStackElem_t
{
  /* 0x0000 */ int constructID;
  /* 0x0004 */ int blockID;
  /* 0x0008 */ BOOL outcome;
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

struct GfxUI3DStack
{
  /* 0x0000 */ int stack[2];
  /* 0x0008 */ int size;
}; /* size: 0x000c */

struct SpuDmaBuffer
{
}; /* size: 0x0001 */

struct ScopedUI3DStack
{
  /* 0x0000 */ BOOL mPopOnDeconstruction;
  /* 0x0001 */ char Padding_1078[3];
  /* 0x0004 */ struct GfxUI3DStack* mStack;
}; /* size: 0x0008 */

struct worldContents_s
{
  /* 0x0000 */ int contentsStaticModels;
  /* 0x0004 */ int contentsEntities;
  /* 0x0008 */ unsigned short entities;
  /* 0x000a */ unsigned short staticModels;
}; /* size: 0x000c */

struct FLAC__Subframe_Constant
{
  /* 0x0000 */ int value;
}; /* size: 0x0004 */

struct nestingStack_t
{
  /* 0x0000 */ int top;
  /* 0x0004 */ struct nestingStackElem_t members[64];
}; /* size: 0x0304 */

union XAssetPoolEntry<RawFile>
{
  union
  {
    /* 0x0000 */ struct RawFile entry;
    /* 0x0000 */ union XAssetPoolEntry<RawFile>* next;
  }; /* size: 0x000c */
}; /* size: 0x000c */

struct GfxQuad
{
  /* 0x0000 */ union vec3_t xyz[4];
  /* 0x0030 */ union vec2_t st[4];
  /* 0x0050 */ union GfxColor color;
}; /* size: 0x0054 */

struct IDWriteFont
{
}; /* size: 0x0004 */

struct playlistEntry
{
  /* 0x0000 */ const char* mapname;
  /* 0x0004 */ const char* gametype;
  /* 0x0008 */ const char* startloc;
  /* 0x000c */ int fullWeight;
  /* 0x0010 */ int remainingWeight;
  /* 0x0014 */ int ignore;
}; /* size: 0x0018 */

struct D3D10_TEX2DMS_DSV
{
  /* 0x0000 */ unsigned int UnusedField_NothingToDefine;
}; /* size: 0x0004 */

struct FxMarkTri
{
  /* 0x0000 */ unsigned short indices[3];
  /* 0x0006 */ struct GfxMarkContext context;
}; /* size: 0x000c */

struct playlistGametype
{
  /* 0x0000 */ const char* scriptName;
  /* 0x0004 */ const char* internalName;
  /* 0x0008 */ const char* localizedName;
  /* 0x000c */ const char* rules;
}; /* size: 0x0010 */

struct D3D10_TEX1D_ARRAY_RTV
{
  /* 0x0000 */ unsigned int MipSlice;
  /* 0x0004 */ unsigned int FirstArraySlice;
  /* 0x0008 */ unsigned int ArraySize;
}; /* size: 0x000c */

struct playlistInfo
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ const char* description;
  /* 0x0008 */ const char* lockdescription;
  /* 0x000c */ const char* iconName;
  /* 0x0010 */ const char* rules;
  /* 0x0014 */ int category;
  /* 0x0018 */ int baseEntry;
  /* 0x001c */ int numEntries;
  /* 0x0020 */ int unlockXp;
  /* 0x0024 */ int unlockPLevel;
  /* 0x0028 */ int gametypeBan;
  /* 0x002c */ int maxPartySize;
  /* 0x0030 */ int minPartySize;
  /* 0x0034 */ unsigned int requiredDLCMask;
  /* 0x0038 */ BOOL ranked;
  /* 0x0039 */ BOOL finishedSoloRequired;
  /* 0x003a */ char Padding_1079[2];
  /* 0x003c */ int wagerBet;
  /* 0x0040 */ int wagerEntry;
  /* 0x0044 */ int maxLocalPlayers;
  /* 0x0048 */ BOOL disableGuests;
  /* 0x0049 */ BOOL hideifmissingdlc;
  /* 0x004a */ BOOL visible_profilevar;
  /* 0x004b */ char Padding_1080;
  /* 0x004c */ enum profile_setting visProfileVar;
  /* 0x0050 */ BOOL buyable_dvar;
  /* 0x0051 */ char Padding_1081[3];
  /* 0x0054 */ const struct dvar_t* buyDvar;
  /* 0x0058 */ int leagueID;
  /* 0x005c */ int parkingPlaylist;
}; /* size: 0x0060 */

struct categoryInfo
{
  /* 0x0000 */ const char* internalName;
  /* 0x0004 */ const char* filter;
  /* 0x0008 */ const char* localizedName;
  /* 0x000c */ const char* description;
  /* 0x0010 */ const char* lockdescription;
  /* 0x0014 */ const char* iconName;
  /* 0x0018 */ const char* dlcRequiredPopupTitle;
  /* 0x001c */ const char* dlcRequiredPopupDesc;
  /* 0x0020 */ int unlockXp;
  /* 0x0024 */ int unlockPLevel;
  /* 0x0028 */ BOOL finishedSoloRequired;
  /* 0x0029 */ char Padding_1082[3];
  /* 0x002c */ int playlistCount;
  /* 0x0030 */ const char* rules;
  /* 0x0034 */ BOOL hideifmissingdlc;
  /* 0x0035 */ BOOL directtostoreifmissingdlc;
  /* 0x0036 */ BOOL visible_profilevar;
  /* 0x0037 */ char Padding_1083;
  /* 0x0038 */ enum profile_setting visProfileVar;
  /* 0x003c */ int supercategory;
  /* 0x0040 */ unsigned int requiredDLCMask;
  /* 0x0044 */ enum EUserTier minUserTier;
}; /* size: 0x0048 */

union XAssetPoolEntry<LeaderboardDef>
{
  union
  {
    /* 0x0000 */ struct LeaderboardDef entry;
    /* 0x0000 */ union XAssetPoolEntry<LeaderboardDef>* next;
  }; /* size: 0x0024 */
}; /* size: 0x0024 */

struct playlistMapList
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int base;
  /* 0x0008 */ int count;
}; /* size: 0x000c */

class bdLinkedList<bdSAckChunk::bdGapAckBlock>
{
  /* 0x0000 */ class bdLinkedList<bdSAckChunk::bdGapAckBlock>::Node* m_head;
  /* 0x0004 */ class bdLinkedList<bdSAckChunk::bdGapAckBlock>::Node* m_tail;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

struct D3D10_TEX1D_ARRAY_SRV
{
  /* 0x0000 */ unsigned int MostDetailedMip;
  /* 0x0004 */ unsigned int MipLevels;
  /* 0x0008 */ unsigned int FirstArraySlice;
  /* 0x000c */ unsigned int ArraySize;
}; /* size: 0x0010 */

struct motd_t
{
  /* 0x0000 */ int version;
  /* 0x0004 */ BOOL singleView;
  /* 0x0005 */ char Padding_1084[3];
  /* 0x0008 */ int expiration;
  /* 0x000c */ unsigned short imageCategory;
  /* 0x000e */ char title[65];
  /* 0x004f */ char message[1025];
  /* 0x0450 */ char image[33];
  /* 0x0471 */ char action[32];
  /* 0x0491 */ char actionContext[65];
  /* 0x04d2 */ char actionString[65];
  /* 0x0513 */ char bannerTitle[65];
  /* 0x0554 */ char bannerMessage[129];
  /* 0x05d5 */ char bannerImage[33];
  /* 0x05f6 */ char bannerAction[32];
  /* 0x0616 */ char bannerActionContext[65];
  /* 0x0657 */ char bannerActionString[65];
  /* 0x0698 */ char eliteImage[33];
  /* 0x06b9 */ char founderImage[33];
  /* 0x06da */ BOOL isValid;
  /* 0x06db */ char __PADDING__[1];
}; /* size: 0x06dc */

typedef struct _D3DSURFACE_DESC
{
  /* 0x0000 */ enum _D3DFORMAT Format;
  /* 0x0004 */ enum _D3DRESOURCETYPE Type;
  /* 0x0008 */ unsigned long Usage;
  /* 0x000c */ enum _D3DPOOL Pool;
  /* 0x0010 */ enum _D3DMULTISAMPLE_TYPE MultiSampleType;
  /* 0x0014 */ unsigned long MultiSampleQuality;
  /* 0x0018 */ unsigned int Width;
  /* 0x001c */ unsigned int Height;
} D3DSURFACE_DESC, *PD3DSURFACE_DESC; /* size: 0x0020 */

struct D3D10_MAPPED_TEXTURE2D
{
  /* 0x0000 */ void* pData;
  /* 0x0004 */ unsigned int RowPitch;
}; /* size: 0x0008 */

struct motdKeyHandler_t
{
  /* 0x0000 */ const char* key;
  /* 0x0004 */ void* handler /* function */;
}; /* size: 0x0008 */

struct GeoPoint
{
  /* 0x0000 */ unsigned short x;
  /* 0x0002 */ unsigned short y;
  /* 0x0004 */ unsigned short count;
}; /* size: 0x0006 */

struct uiClientState_s
{
  /* 0x0000 */ enum connstate_t connState;
  /* 0x0004 */ int connectPacketCount;
  /* 0x0008 */ char servername[1024];
  /* 0x0408 */ char messageString[1024];
  /* 0x0808 */ BOOL areTexturesLoaded;
  /* 0x0809 */ BOOL waitForMovie;
  /* 0x080a */ char __PADDING__[2];
}; /* size: 0x080c */

struct FxElemField
{
  /* 0x0000 */ const char* keyName;
  /* 0x0004 */ void* handler /* function */;
}; /* size: 0x0008 */

struct GfxQuadVertex
{
  /* 0x0000 */ union vec2_t xy;
  /* 0x0008 */ union vec2_t st;
  /* 0x0010 */ union GfxColor color;
}; /* size: 0x0014 */

class EditPlaylistPopulationTexture
{
  /* 0x0000 */ struct ID3D11Resource* resource;
  /* 0x0004 */ struct GfxImage* image;
}; /* size: 0x0008 */

union XAssetPoolEntry<ddlDef_t>
{
  union
  {
    /* 0x0000 */ struct ddlDef_t entry;
    /* 0x0000 */ union XAssetPoolEntry<ddlDef_t>* next;
  }; /* size: 0x001c */
}; /* size: 0x001c */

struct keyBoardUtitlity
{
  /* 0x0000 */ BOOL keyboardActive;
  /* 0x0001 */ char Padding_1085[3];
  /* 0x0004 */ int keyboardType;
  /* 0x0008 */ int cursorPos;
  /* 0x000c */ int maxChar;
  /* 0x0010 */ BOOL overstrikeMode;
  /* 0x0011 */ char __PADDING__[3];
}; /* size: 0x0014 */

struct IWICPalette
{
}; /* size: 0x0004 */

struct votingItem_t
{
  /* 0x0000 */ int index;
  /* 0x0004 */ char imageName[64];
  /* 0x0044 */ BOOL isLocalImage;
  /* 0x0045 */ char counterName[64];
  /* 0x0085 */ char votingItemPosition[8];
  /* 0x008d */ char votingItemString[256];
  /* 0x018d */ char __PADDING__[3];
}; /* size: 0x0190 */

struct voting_t
{
  /* 0x0000 */ int votingVersion;
  /* 0x0004 */ int expiration;
  /* 0x0008 */ int votingInterval;
  /* 0x000c */ int imageCategory;
  /* 0x0010 */ int viewCount;
  /* 0x0014 */ char title[256];
  /* 0x0114 */ char subtitle[512];
  /* 0x0314 */ char voteforstring[256];
  /* 0x0414 */ struct votingItem_t votingItems[4];
  /* 0x0a54 */ BOOL isValid;
  /* 0x0a55 */ char __PADDING__[3];
}; /* size: 0x0a58 */

struct dwTwitchIsRegisteredTask
{
  /* 0x0000 */ class bdBoolResult isRegistered;
}; /* size: 0x0008 */

struct dwTwitchGetAccountTask
{
  /* 0x0000 */ class bdTwitchUserInfo* account;
}; /* size: 0x0004 */

struct dwTwitchRegisterTask
{
  /* 0x0000 */ char accountName[256];
  /* 0x0100 */ char authToken[1024];
}; /* size: 0x0500 */

struct playerTwitchOperations
{
  /* 0x0000 */ struct dwTwitchIsRegisteredTask twIsRegisteredTask;
  /* 0x0008 */ struct dwTwitchGetAccountTask twGetAccountTask;
  /* 0x000c */ struct dwTwitchRegisterTask twRegisterTask;
}; /* size: 0x050c */

struct votingHandler_t
{
  /* 0x0000 */ const char* key;
  /* 0x0004 */ void* handler /* function */;
}; /* size: 0x0008 */

struct voteSortItem_t
{
  /* 0x0000 */ unsigned __int64 entity;
  /* 0x0008 */ unsigned char vote;
  /* 0x0009 */ char __PADDING__[7];
}; /* size: 0x0010 */

class bdLinkedList<bdUnicastConnection::bdControlChunkStore>::Node
{
  /* 0x0000 */ class bdUnicastConnection::bdControlChunkStore m_data;
  /* 0x0008 */ class bdLinkedList<bdUnicastConnection::bdControlChunkStore>::Node* m_next;
  /* 0x000c */ class bdLinkedList<bdUnicastConnection::bdControlChunkStore>::Node* m_prev;
}; /* size: 0x0010 */

struct EmblemFilterState
{
  /* 0x0000 */ const char* loc;
  /* 0x0004 */ unsigned short include;
  /* 0x0006 */ unsigned short exclude;
}; /* size: 0x0008 */

typedef struct _D3DXFONT_DESCW
{
  /* 0x0000 */ int Height;
  /* 0x0004 */ unsigned int Width;
  /* 0x0008 */ unsigned int Weight;
  /* 0x000c */ unsigned int MipLevels;
  /* 0x0010 */ int Italic;
  /* 0x0014 */ unsigned char CharSet;
  /* 0x0015 */ unsigned char OutputPrecision;
  /* 0x0016 */ unsigned char Quality;
  /* 0x0017 */ unsigned char PitchAndFamily;
  /* 0x0018 */ wchar_t FaceName[32];
} D3DXFONT_DESCW, *PD3DXFONT_DESCW; /* size: 0x0058 */

struct emblemDownloadData_t
{
  /* 0x0000 */ unsigned char buffer[1408];
  /* 0x0580 */ unsigned __int64 fileID;
  /* 0x0588 */ int timestamp;
  /* 0x058c */ long __PADDING__[1];
}; /* size: 0x0590 */

struct std::_Pair_base<DynEntSortStruct *,DynEntSortStruct *>
{
  /* 0x0000 */ struct DynEntSortStruct* first;
  /* 0x0004 */ struct DynEntSortStruct* second;
}; /* size: 0x0008 */

struct codtvFilterMapping_t
{
  /* 0x0000 */ const char* filterName;
  /* 0x0004 */ void* filterCallback /* function */;
}; /* size: 0x0008 */

struct LeagueFriendsInfo
{
  /* 0x0000 */ int friendCount;
  /* 0x0004 */ int lastDownloadTime;
  /* 0x0008 */ struct LeagueFriendInfo friendInfo[50];
}; /* size: 0x07d8 */

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >,std::_Iterator_base0>
{
  /* 0x0000 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node* _Ptr;
}; /* size: 0x0004 */

struct codtvDWContent_t
{
  /* 0x0000 */ enum fileShareLocation source;
  /* 0x0004 */ enum fileshareCategory_e category;
  /* 0x0008 */ enum filesharePlayerFilter_e playerFilter;
  /* 0x000c */ enum fileshareDataFilter_e dataFilter;
}; /* size: 0x0010 */

struct codtvTypeMapping_t
{
  /* 0x0000 */ const char* typeString;
  /* 0x0004 */ enum codtvType_e type;
}; /* size: 0x0008 */

struct D2D1_ROUNDED_RECT
{
  /* 0x0000 */ struct D2D_RECT_F rect;
  /* 0x0010 */ float radiusX;
  /* 0x0014 */ float radiusY;
}; /* size: 0x0018 */

struct FxPriorityInfo
{
  /* 0x0000 */ volatile long warningHigh[2];
  /* 0x0008 */ volatile long readIndex;
  /* 0x000c */ int pad[1];
}; /* size: 0x0010 */

struct codtvDWSourceMapping_t
{
  /* 0x0000 */ const char* dwString;
  /* 0x0004 */ enum fileShareLocation source;
}; /* size: 0x0008 */

struct FxEditorElemAtlas
{
  /* 0x0000 */ int behavior;
  /* 0x0004 */ int index;
  /* 0x0008 */ int fps;
  /* 0x000c */ int loopCount;
  /* 0x0010 */ int indexRange;
  /* 0x0014 */ int colIndexBits;
  /* 0x0018 */ int rowIndexBits;
  /* 0x001c */ int entryCount;
}; /* size: 0x0020 */

struct FxEditorTrailDef
{
  /* 0x0000 */ struct FxTrailVertex verts[64];
  /* 0x0500 */ int vertCount;
  /* 0x0504 */ unsigned short inds[128];
  /* 0x0604 */ int indCount;
}; /* size: 0x0608 */

struct FxEditorElemDef
{
  /* 0x0000 */ char name[256];
  /* 0x0100 */ int editorFlags;
  /* 0x0104 */ int flags;
  /* 0x0108 */ struct FxFloatRange spawnRange;
  /* 0x0110 */ struct FxFloatRange fadeInRange;
  /* 0x0118 */ struct FxFloatRange fadeOutRange;
  /* 0x0120 */ float spawnFrustumCullRadius;
  /* 0x0124 */ struct FxSpawnDefLooping spawnLooping;
  /* 0x012c */ struct FxSpawnDefOneShot spawnOneShot;
  /* 0x0134 */ struct FxIntRange spawnDelayMsec;
  /* 0x013c */ struct FxIntRange lifeSpanMsec;
  /* 0x0144 */ struct FxFloatRange spawnOrigin[3];
  /* 0x015c */ struct FxFloatRange spawnOffsetRadius;
  /* 0x0164 */ struct FxFloatRange spawnOffsetHeight;
  /* 0x016c */ struct FxFloatRange spawnAngles[3];
  /* 0x0184 */ struct FxFloatRange angularVelocity[3];
  /* 0x019c */ struct FxFloatRange initialRotation;
  /* 0x01a4 */ union vec4_t rotationAxis;
  /* 0x01b4 */ struct FxFloatRange gravity;
  /* 0x01bc */ struct FxFloatRange elasticity;
  /* 0x01c4 */ struct FxEditorElemAtlas atlas;
  /* 0x01e4 */ float timeScale;
  /* 0x01e8 */ float windInfluence;
  /* 0x01ec */ union vec3_t velScale[2];
  /* 0x0204 */ const struct FxCurve* velShape[2][3][2];
  /* 0x0234 */ float rotationScale;
  /* 0x0238 */ const struct FxCurve* rotationShape[2];
  /* 0x0240 */ float sizeScale[2];
  /* 0x0248 */ const struct FxCurve* sizeShape[2][2];
  /* 0x0258 */ float scaleScale;
  /* 0x025c */ const struct FxCurve* scaleShape[2];
  /* 0x0264 */ const struct FxCurve* color[2];
  /* 0x026c */ const struct FxCurve* alpha[2];
  /* 0x0274 */ float lightingFrac;
  /* 0x0278 */ union vec3_t collOffset;
  /* 0x0284 */ float collRadius;
  /* 0x0288 */ const struct FxEffectDef* effectOnImpact;
  /* 0x028c */ const struct FxEffectDef* effectOnDeath;
  /* 0x0290 */ int sortOrder;
  /* 0x0294 */ const struct FxEffectDef* emission;
  /* 0x0298 */ struct FxFloatRange emitDist;
  /* 0x02a0 */ struct FxFloatRange emitDistVariance;
  /* 0x02a8 */ const struct FxEffectDef* attachment;
  /* 0x02ac */ unsigned char elemType;
  /* 0x02ad */ char Padding_1086[3];
  /* 0x02b0 */ int visualCount;
  union
  {
    /* 0x02b4 */ union FxElemVisuals visuals[32];
    /* 0x02b4 */ struct FxElemMarkVisuals markVisuals[16];
  }; /* size: 0x0080 */
  /* 0x0334 */ int trailSplitDist;
  /* 0x0338 */ int trailRepeatDist;
  /* 0x033c */ float trailScrollTime;
  /* 0x0340 */ struct FxEditorTrailDef trailDef;
  /* 0x0948 */ int alphaFadeTimeMsec;
  /* 0x094c */ int maxWindMagnitude;
  /* 0x0950 */ int spawnIntervalAtMaxWind;
  /* 0x0954 */ int lifespanAtMaxWind;
  /* 0x0958 */ float billboardTopWidth;
  /* 0x095c */ float billboardBottomWidth;
  /* 0x0960 */ struct FxElemSpawnSound spawnSound;
  /* 0x0964 */ struct FxIntRange cloudDensityRange;
  /* 0x096c */ union vec2_t billboardPivot;
  /* 0x0974 */ float spotLightFovInnerFraction;
  /* 0x0978 */ float spotLightStartRadius;
  /* 0x097c */ float spotLightEndRadius;
}; /* size: 0x0980 */

struct codtvVideoContent_t
{
  /* 0x0000 */ char url[128];
  /* 0x0080 */ char name[64];
}; /* size: 0x00c0 */

struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
}; /* size: 0x0001 */

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0>
{
  /* 0x0000 */ struct std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
}; /* size: 0x0001 */

union codtvContent_u
{
  union
  {
    /* 0x0000 */ struct codtvDWContent_t* dwContent;
    /* 0x0000 */ struct codtvVideoContent_t* videoContent;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct codtvFolder_t
{
  /* 0x0000 */ int index;
  /* 0x0004 */ int parentIndex;
  /* 0x0008 */ char ref[16];
  /* 0x0018 */ char name[64];
  /* 0x0058 */ char customAction[32];
  /* 0x0078 */ enum codtvType_e type;
  /* 0x007c */ char imageName[32];
  /* 0x009c */ enum codtvImageCategory_e imageCategory;
  /* 0x00a0 */ union codtvContent_u content[32];
  /* 0x0120 */ int contentCount;
  /* 0x0124 */ long Padding_1087;
  /* 0x0128 */ unsigned __int64 userData;
}; /* size: 0x0130 */

class bdLinkedList<bdReference<bdMessage> >::Node
{
  /* 0x0000 */ class bdReference<bdMessage> m_data;
  /* 0x0004 */ class bdLinkedList<bdReference<bdMessage> >::Node* m_next;
  /* 0x0008 */ class bdLinkedList<bdReference<bdMessage> >::Node* m_prev;
}; /* size: 0x000c */

typedef struct _D3DPRESENT_PARAMETERS_
{
  /* 0x0000 */ unsigned int BackBufferWidth;
  /* 0x0004 */ unsigned int BackBufferHeight;
  /* 0x0008 */ enum _D3DFORMAT BackBufferFormat;
  /* 0x000c */ unsigned int BackBufferCount;
  /* 0x0010 */ enum _D3DMULTISAMPLE_TYPE MultiSampleType;
  /* 0x0014 */ unsigned long MultiSampleQuality;
  /* 0x0018 */ enum _D3DSWAPEFFECT SwapEffect;
  /* 0x001c */ struct HWND__* hDeviceWindow;
  /* 0x0020 */ int Windowed;
  /* 0x0024 */ int EnableAutoDepthStencil;
  /* 0x0028 */ enum _D3DFORMAT AutoDepthStencilFormat;
  /* 0x002c */ unsigned long Flags;
  /* 0x0030 */ unsigned int FullScreen_RefreshRateInHz;
  /* 0x0034 */ unsigned int PresentationInterval;
} D3DPRESENT_PARAMETERS_, *PD3DPRESENT_PARAMETERS_; /* size: 0x0038 */

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > > >;

struct codtvDWCategoryMapping_t
{
  /* 0x0000 */ const char* dwString;
  /* 0x0004 */ enum fileshareCategory_e category;
}; /* size: 0x0008 */

struct $_s__RTTIBaseClassArray$_extraBytes_16
{
  /* 0x0000 */ const struct _s__RTTIBaseClassDescriptor2* arrayOfBaseClassDescriptors[4];
  /* 0x0010 */ char __PADDING__[1];
}; /* size: 0x0011 */

struct D3D10_SUBRESOURCE_DATA
{
  /* 0x0000 */ const void* pSysMem;
  /* 0x0004 */ unsigned int SysMemPitch;
  /* 0x0008 */ unsigned int SysMemSlicePitch;
}; /* size: 0x000c */

struct FxGraph3D
{
  /* 0x0000 */ int intervalCount;
  union
  {
    union
    {
      /* 0x0004 */ union vec3_t constantValue;
      /* 0x0004 */ union vec3_t* sampleValue;
    }; /* size: 0x000c */
  } /* size: 0x000c */ u;
}; /* size: 0x0010 */

class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
{
  /* 0x0000 */ long Padding_1088;
  /* 0x0004 */ class std::_Mutex _Mylock;
  /* 0x0008 */ wchar_t* _Gfirst;
  /* 0x000c */ wchar_t* _Pfirst;
  /* 0x0010 */ wchar_t** _IGfirst;
  /* 0x0014 */ wchar_t** _IPfirst;
  /* 0x0018 */ wchar_t* _Gnext;
  /* 0x001c */ wchar_t* _Pnext;
  /* 0x0020 */ wchar_t** _IGnext;
  /* 0x0024 */ wchar_t** _IPnext;
  /* 0x0028 */ int _Gcount;
  /* 0x002c */ int _Pcount;
  /* 0x0030 */ int* _IGcount;
  /* 0x0034 */ int* _IPcount;
  /* 0x0038 */ class std::locale* _Plocale;
}; /* size: 0x003c */

struct png_sPLT_struct
{
  /* 0x0000 */ char* name;
  /* 0x0004 */ unsigned char depth;
  /* 0x0005 */ char Padding_1089[3];
  /* 0x0008 */ struct png_sPLT_entry_struct* entries;
  /* 0x000c */ int nentries;
}; /* size: 0x0010 */

class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t> >
{
}; /* size: 0x0010 */

class std::locale
{
  /* 0x0000 */ class std::locale::_Locimp* _Ptr;
}; /* size: 0x0004 */

class std::_Yarn<char>
{
  /* 0x0000 */ char* _Myptr;
  /* 0x0004 */ char _Nul;
}; /* size: 0x0008 */

class std::locale::_Locimp
{
  /* 0x0000 */ long Padding_1090[2];
  /* 0x0008 */ class std::locale::facet** _Facetvec;
  /* 0x000c */ unsigned int _Facetcount;
  /* 0x0010 */ int _Catmask;
  /* 0x0014 */ BOOL _Xparent;
  /* 0x0015 */ char Padding_1091[3];
  /* 0x0018 */ class std::_Yarn<char> _Name;
  /* 0x0000 */ class std::locale::_Locimp* _Clocptr;
}; /* size: 0x0020 */

struct D2D_POINT_2F
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
}; /* size: 0x0008 */

struct D2D1_BEZIER_SEGMENT
{
  /* 0x0000 */ struct D2D_POINT_2F point1;
  /* 0x0008 */ struct D2D_POINT_2F point2;
  /* 0x0010 */ struct D2D_POINT_2F point3;
}; /* size: 0x0018 */

class std::locale::facet
{
  /* 0x0000 */ long Padding_1092;
  /* 0x0004 */ unsigned int _Refs;
}; /* size: 0x0008 */

class std::locale::id
{
  union
  {
    /* 0x0000 */ unsigned int _Id;
    /* 0x0000 */ int _Id_cnt;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

typedef struct _Ctypevec
{
  /* 0x0000 */ unsigned long _Hand;
  /* 0x0004 */ unsigned int _Page;
  /* 0x0008 */ const short* _Table;
  /* 0x000c */ int _Delfl;
} Ctypevec, *PCtypevec; /* size: 0x0010 */

class std::ctype<char>
{
  union
  {
    /* 0x0000 */ class std::locale::id id;
    /* 0x0000 */ const unsigned int table_size;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_1093;
  /* 0x0008 */ struct _Ctypevec _Ctype;
}; /* size: 0x0018 */

struct DWRITE_GLYPH_OFFSET
{
  /* 0x0000 */ float advanceOffset;
  /* 0x0004 */ float ascenderOffset;
}; /* size: 0x0008 */

class std::_Lockit
{
  /* 0x0000 */ int _Locktype;
}; /* size: 0x0004 */

class std::_Locinfo
{
  /* 0x0000 */ class std::_Lockit _Lock;
  /* 0x0004 */ class std::_Yarn<char> _Days;
  /* 0x000c */ class std::_Yarn<char> _Months;
  /* 0x0014 */ class std::_Yarn<char> _Oldlocname;
  /* 0x001c */ class std::_Yarn<char> _Newlocname;
}; /* size: 0x0024 */

class std::ctype_byname<char>
{
}; /* size: 0x0018 */

class std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> >;

class std::num_get<unsigned short,std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > >;

class std::basic_istream<unsigned short,std::char_traits<unsigned short> >
{
  /* 0x0000 */ long Padding_1094[2];
  /* 0x0008 */ __int64 _Chcount;
}; /* size: 0x0058 */

struct IDWriteFontFace
{
}; /* size: 0x0004 */

struct FxSpriteElemDrawResource
{
  /* 0x0000 */ struct r_double_index_t* baseIndices;
  /* 0x0004 */ unsigned short baseVertex;
  /* 0x0006 */ char __PADDING__[2];
}; /* size: 0x0008 */

struct FxCloudElemDrawResource
{
  /* 0x0000 */ unsigned int gfxParticleCloudIndex;
}; /* size: 0x0004 */

struct FxTrailElemDrawResource
{
  /* 0x0000 */ struct r_double_index_t* baseIndices;
  /* 0x0004 */ unsigned short baseVertex;
  /* 0x0006 */ char Padding_1095[2];
  /* 0x0008 */ unsigned int vertexCapacity;
  /* 0x000c */ unsigned int indicesCapacity;
  /* 0x0010 */ unsigned int numUsedVertex;
  /* 0x0014 */ unsigned int numUsedIndices;
}; /* size: 0x0018 */

union FxElemDrawSource
{
  union
  {
    /* 0x0000 */ struct FxSpriteElemDrawResource sprite;
    /* 0x0000 */ struct FxCloudElemDrawResource cloud;
    /* 0x0000 */ struct FxTrailElemDrawResource trail;
  }; /* size: 0x0018 */
}; /* size: 0x0018 */

struct FxDrawState
{
  /* 0x0000 */ union vec3_t rotationAxis[3];
  /* 0x0024 */ enum LocalClientNum_t localClientNum;
  /* 0x0028 */ const struct FxEffect* effect;
  /* 0x002c */ const struct FxElem* elem;
  /* 0x0030 */ const struct FxElemDef* elemDef;
  /* 0x0034 */ unsigned int region;
  /* 0x0038 */ const struct FxCamera* camera;
  /* 0x003c */ int msecDraw;
  /* 0x0040 */ unsigned int superFlareIndex;
  /* 0x0044 */ unsigned int usePreAllocatedResource;
  /* 0x0048 */ union FxElemDrawSource elemResource_u;
  /* 0x0060 */ BOOL isInfraredDraw;
  /* 0x0061 */ char __PADDING__[3];
}; /* size: 0x0064 */

class std::basic_istream<unsigned short,std::char_traits<unsigned short> >::sentry
{
  /* 0x0000 */ long Padding_1096;
  /* 0x0004 */ BOOL _Ok;
}; /* size: 0x0008 */

struct youTube_t
{
  /* 0x0000 */ unsigned __int64 xuid;
  /* 0x0008 */ enum youtubeStatus_e status;
  /* 0x000c */ int authTime;
  /* 0x0010 */ int retryCount;
  /* 0x0014 */ int nextRetryTime;
  /* 0x0018 */ class bdYouTubeAuthorizationCode authCode;
  /* 0x0240 */ class bdYouTubeUserToken userToken;
  /* 0x18d0 */ BOOL isRegistered;
  /* 0x18d1 */ char __PADDING__[7];
}; /* size: 0x18d8 */

class std::basic_istream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
  /* 0x0000 */ class std::basic_istream<unsigned short,std::char_traits<unsigned short> >& _Myistr;
}; /* size: 0x0004 */

struct dwYouTubeRegistrationTask_t
{
  /* 0x0000 */ class bdYouTubeAuthorizationCode* authCode;
}; /* size: 0x0004 */

class std::hash<std::error_code>
{
}; /* size: 0x0001 */

class std::error_code
{
  /* 0x0000 */ int _Myval;
  /* 0x0004 */ const class std::error_category* _Mycat;
}; /* size: 0x0008 */

struct dwVoteHistoryTask_t
{
  /* 0x0000 */ int offset;
  /* 0x0004 */ int maxResults;
  /* 0x0008 */ class bdCategorizedRatingInfo* outVotes;
}; /* size: 0x000c */

class std::error_category
{
}; /* size: 0x0004 */

struct std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base0>
{
}; /* size: 0x0001 */

class std::ostreambuf_iterator<char,std::char_traits<char> >;

struct $_TypeDescriptor$_extraBytes_25
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[25];
}; /* size: 0x0021 */

class std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >;

class std::basic_ostream<char,std::char_traits<char> >
{
}; /* size: 0x0050 */

class std::basic_ostream<char,std::char_traits<char> >::sentry
{
  /* 0x0000 */ long Padding_1097;
  /* 0x0004 */ BOOL _Ok;
}; /* size: 0x0008 */

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
}; /* size: 0x0038 */

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >
{
}; /* size: 0x0004 */

struct mz_zip_array
{
  /* 0x0000 */ void* m_p;
  /* 0x0004 */ unsigned int m_size;
  /* 0x0008 */ unsigned int m_capacity;
  /* 0x000c */ unsigned int m_element_size;
}; /* size: 0x0010 */

struct mz_zip_internal_state_tag
{
  /* 0x0000 */ struct mz_zip_array m_central_dir;
  /* 0x0010 */ struct mz_zip_array m_central_dir_offsets;
  /* 0x0020 */ struct mz_zip_array m_sorted_central_dir_offsets;
  /* 0x0030 */ void** m_pFile;
  /* 0x0034 */ void* m_pMem;
  /* 0x0038 */ unsigned int m_mem_size;
  /* 0x003c */ unsigned int m_mem_capacity;
}; /* size: 0x0040 */

class std::bad_cast
{
}; /* size: 0x000c */

struct ID3D10View
{
}; /* size: 0x0004 */

class std::system_error
{
  /* 0x0000 */ long Padding_1098[3];
  /* 0x000c */ class std::error_code _Mycode;
}; /* size: 0x0014 */

struct ID3D10DepthStencilView
{
}; /* size: 0x0004 */

class std::codecvt_base
{
}; /* size: 0x0008 */

struct FLAC__EntropyCodingMethod_PartitionedRiceContents
{
  /* 0x0000 */ unsigned int* parameters;
  /* 0x0004 */ unsigned int* raw_bits;
  /* 0x0008 */ unsigned int capacity_by_order;
}; /* size: 0x000c */

struct std::_Bool_struct
{
  /* 0x0000 */ int _Member;
}; /* size: 0x0004 */

class std::basic_ios<char,std::char_traits<char> >
{
  /* 0x0000 */ long Padding_1099[14];
  /* 0x0038 */ class std::basic_streambuf<char,std::char_traits<char> >* _Mystrbuf;
  /* 0x003c */ class std::basic_ostream<char,std::char_traits<char> >* _Tiestr;
  /* 0x0040 */ char _Fillch;
}; /* size: 0x0048 */

struct FxPostLight
{
  /* 0x0000 */ union vec3_t begin;
  /* 0x000c */ union vec3_t end;
  /* 0x0018 */ float radius;
  /* 0x001c */ union GfxColor color;
  /* 0x0020 */ struct Material* material;
}; /* size: 0x0024 */

struct FxPostLightInfo
{
  /* 0x0000 */ struct FxPostLight postLights[96];
  /* 0x0d80 */ int postLightCount;
}; /* size: 0x0d84 */

class std::basic_streambuf<char,std::char_traits<char> >
{
  /* 0x0000 */ long Padding_1100;
  /* 0x0004 */ class std::_Mutex _Mylock;
  /* 0x0008 */ char* _Gfirst;
  /* 0x000c */ char* _Pfirst;
  /* 0x0010 */ char** _IGfirst;
  /* 0x0014 */ char** _IPfirst;
  /* 0x0018 */ char* _Gnext;
  /* 0x001c */ char* _Pnext;
  /* 0x0020 */ char** _IGnext;
  /* 0x0024 */ char** _IPnext;
  /* 0x0028 */ int _Gcount;
  /* 0x002c */ int _Pcount;
  /* 0x0030 */ int* _IGcount;
  /* 0x0034 */ int* _IPcount;
  /* 0x0038 */ class std::locale* _Plocale;
}; /* size: 0x003c */

struct FLAC__Subframe_Verbatim
{
  /* 0x0000 */ const int* data;
}; /* size: 0x0004 */

struct EncState
{
  /* 0x0000 */ const struct SpeexMode* mode;
  /* 0x0004 */ int first;
  /* 0x0008 */ int frameSize;
  /* 0x000c */ int subframeSize;
  /* 0x0010 */ int nbSubframes;
  /* 0x0014 */ int windowSize;
  /* 0x0018 */ int lpcSize;
  /* 0x001c */ int min_pitch;
  /* 0x0020 */ int max_pitch;
  /* 0x0024 */ int safe_pitch;
  /* 0x0028 */ int bounded_pitch;
  /* 0x002c */ int ol_pitch;
  /* 0x0030 */ int ol_voiced;
  /* 0x0034 */ int* pitch;
  /* 0x0038 */ float gamma1;
  /* 0x003c */ float gamma2;
  /* 0x0040 */ float lag_factor;
  /* 0x0044 */ float lpc_floor;
  /* 0x0048 */ char* stack;
  /* 0x004c */ float* inBuf;
  /* 0x0050 */ float* frame;
  /* 0x0054 */ float* excBuf;
  /* 0x0058 */ float* exc;
  /* 0x005c */ float* swBuf;
  /* 0x0060 */ float* sw;
  /* 0x0064 */ float* innov;
  /* 0x0068 */ float* window;
  /* 0x006c */ float* autocorr;
  /* 0x0070 */ float* lagWindow;
  /* 0x0074 */ float* lpc;
  /* 0x0078 */ float* lsp;
  /* 0x007c */ float* qlsp;
  /* 0x0080 */ float* old_lsp;
  /* 0x0084 */ float* old_qlsp;
  /* 0x0088 */ float* interp_lsp;
  /* 0x008c */ float* interp_qlsp;
  /* 0x0090 */ float* interp_lpc;
  /* 0x0094 */ float* interp_qlpc;
  /* 0x0098 */ float* bw_lpc1;
  /* 0x009c */ float* bw_lpc2;
  /* 0x00a0 */ float* mem_sp;
  /* 0x00a4 */ float* mem_sw;
  /* 0x00a8 */ float* mem_sw_whole;
  /* 0x00ac */ float* mem_exc;
  /* 0x00b0 */ float* pi_gain;
  /* 0x00b4 */ struct VBRState* vbr;
  /* 0x00b8 */ float vbr_quality;
  /* 0x00bc */ float relative_quality;
  /* 0x00c0 */ int vbr_enabled;
  /* 0x00c4 */ int vad_enabled;
  /* 0x00c8 */ int dtx_enabled;
  /* 0x00cc */ int dtx_count;
  /* 0x00d0 */ int abr_enabled;
  /* 0x00d4 */ float abr_drift;
  /* 0x00d8 */ float abr_drift2;
  /* 0x00dc */ float abr_count;
  /* 0x00e0 */ int complexity;
  /* 0x00e4 */ int sampling_rate;
  /* 0x00e8 */ int plc_tuning;
  /* 0x00ec */ int encode_submode;
  /* 0x00f0 */ const struct SpeexSubmode* const* submodes;
  /* 0x00f4 */ int submodeID;
  /* 0x00f8 */ int submodeSelect;
}; /* size: 0x00fc */

class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
{
}; /* size: 0x0004 */

struct locTraceWork_t
{
  /* 0x0000 */ int contents;
  /* 0x0004 */ long Padding_1101[3];
  /* 0x0010 */ struct TraceExtents extents;
}; /* size: 0x0040 */

class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
{
  /* 0x0000 */ const char* _Ptr;
}; /* size: 0x0004 */

struct ShowCollisionBrushPt
{
  /* 0x0000 */ union vec3_t xyz;
  /* 0x000c */ short sideIndex[3];
  /* 0x0012 */ char __PADDING__[2];
}; /* size: 0x0014 */

class std::istreambuf_iterator<char,std::char_traits<char> >;

struct EffectElemCountInfo
{
  /* 0x0000 */ int effectHandleIndex;
  /* 0x0004 */ unsigned int numCloudElemsToDraw;
  /* 0x0008 */ unsigned int numSpriteElemsToDraw;
  /* 0x000c */ unsigned int pad;
}; /* size: 0x0010 */

class std::num_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >;

typedef struct _D3DXMATRIXA16
{
} D3DXMATRIXA16, *PD3DXMATRIXA16; /* size: 0x0040 */

class std::basic_istream<char,std::char_traits<char> >
{
  /* 0x0000 */ long Padding_1102[2];
  /* 0x0008 */ __int64 _Chcount;
}; /* size: 0x0058 */

struct FLAC__EntropyCodingMethod
{
  /* 0x0000 */ enum FLAC__EntropyCodingMethodType type;
  union
  {
    /* 0x0004 */ struct FLAC__EntropyCodingMethod_PartitionedRice partitioned_rice;
  } /* size: 0x0008 */ data;
}; /* size: 0x000c */

struct FLAC__Subframe_Fixed
{
  /* 0x0000 */ struct FLAC__EntropyCodingMethod entropy_coding_method;
  /* 0x000c */ unsigned int order;
  /* 0x0010 */ int warmup[4];
  /* 0x0020 */ const int* residual;
}; /* size: 0x0024 */

typedef struct _D3DX10_TEXTURE_LOAD_INFO
{
  /* 0x0000 */ struct D3D10_BOX* pSrcBox;
  /* 0x0004 */ struct D3D10_BOX* pDstBox;
  /* 0x0008 */ unsigned int SrcFirstMip;
  /* 0x000c */ unsigned int DstFirstMip;
  /* 0x0010 */ unsigned int NumMips;
  /* 0x0014 */ unsigned int SrcFirstElement;
  /* 0x0018 */ unsigned int DstFirstElement;
  /* 0x001c */ unsigned int NumElements;
  /* 0x0020 */ unsigned int Filter;
  /* 0x0024 */ unsigned int MipFilter;
} D3DX10_TEXTURE_LOAD_INFO, *PD3DX10_TEXTURE_LOAD_INFO; /* size: 0x0028 */

class std::basic_istream<char,std::char_traits<char> >::sentry
{
  /* 0x0000 */ long Padding_1103;
  /* 0x0004 */ BOOL _Ok;
}; /* size: 0x0008 */

class std::basic_istream<char,std::char_traits<char> >::_Sentry_base
{
  /* 0x0000 */ class std::basic_istream<char,std::char_traits<char> >& _Myistr;
}; /* size: 0x0004 */

class Allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node,mapStringEntriesName_t>
{
}; /* size: 0x0001 */

class Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>
{
}; /* size: 0x0001 */

class std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >
{
  /* 0x0000 */ long Padding_1104;
  /* 0x0004 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node* _Myhead;
  /* 0x0008 */ unsigned int _Mysize;
  /* 0x000c */ class Allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node,mapStringEntriesName_t> _Alnod;
  /* 0x000d */ class Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t> _Alval;
}; /* size: 0x0010 */

struct D2D1_ELLIPSE
{
  /* 0x0000 */ struct D2D_POINT_2F point;
  /* 0x0008 */ float radiusX;
  /* 0x000c */ float radiusY;
}; /* size: 0x0010 */

struct FxMarkAlphaFade
{
  /* 0x0000 */ int ageLimitMsec;
  /* 0x0004 */ int fadeStartAgeMsec;
}; /* size: 0x0008 */

struct FxMark
{
  /* 0x0000 */ unsigned short prevMark;
  /* 0x0002 */ unsigned short nextMark;
  /* 0x0004 */ int frameCountDrawn;
  /* 0x0008 */ int frameCountAlloced;
  /* 0x000c */ int ageMsec;
  /* 0x0010 */ union vec3_t origin;
  /* 0x001c */ float radius;
  /* 0x0020 */ union vec3_t texCoordAxis;
  /* 0x002c */ unsigned char nativeColor[4];
  /* 0x0030 */ struct Material* material;
  /* 0x0034 */ int tris;
  /* 0x0038 */ int points;
  /* 0x003c */ struct FxMarkAlphaFade alphaFade;
  /* 0x0044 */ struct GfxMarkContext context;
  /* 0x004a */ unsigned short pointCount;
  /* 0x004c */ unsigned char triCount;
  /* 0x004d */ char __PADDING__[3];
}; /* size: 0x0050 */

union FxTriGroupPool
{
  union
  {
    /* 0x0000 */ union FxTriGroupPool* nextFreeTriGroup;
    /* 0x0000 */ struct FxTriGroup triGroup;
  }; /* size: 0x0018 */
}; /* size: 0x0018 */

struct FxMarksSystem
{
  /* 0x0000 */ struct FxMarksHashEntry gridHashTableEntries[256];
  /* 0x0c00 */ struct FxMarksHashEntry* gridHashTable[256];
  /* 0x1000 */ struct FxMark marks[256];
  /* 0x6000 */ union FxTriGroupPool triGroups[1024];
  /* 0xc000 */ union FxPointGroupPool pointGroups[1536];
  /* 0x25800 */ unsigned short entFirstMarkHandles[1792];
  /* 0x26600 */ int frameCount;
  /* 0x26604 */ unsigned short firstFreeMarkHandle;
  /* 0x26606 */ unsigned short firstActiveWorldMarkHandle;
  /* 0x26608 */ unsigned short firstViewmodelMarkHandle;
  /* 0x2660a */ char Padding_1105[2];
  /* 0x2660c */ unsigned int numViewmodelMarks;
  /* 0x26610 */ union FxTriGroupPool* firstFreeTriGroup;
  /* 0x26614 */ union FxPointGroupPool* firstFreePointGroup;
  /* 0x26618 */ BOOL noMarks;
  /* 0x26619 */ BOOL hasCarryIndex;
  /* 0x2661a */ unsigned short carryIndex;
  /* 0x2661c */ unsigned int allocedMarkCount;
  /* 0x26620 */ unsigned int freedMarkCount;
  /* 0x26624 */ int frameTime;
  /* 0x26628 */ int gridHashTableNumUsedEntries;
  /* 0x2662c */ int timeSinceLastGridUpdate;
}; /* size: 0x26630 */

class std::_Iosb<int>
{
  union
  {
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags skipws;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags unitbuf;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags uppercase;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags showbase;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags showpoint;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags showpos;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags left;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags right;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags internal;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags dec;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags oct;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags hex;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags scientific;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags fixed;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags hexfloat;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags boolalpha;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags _Stdio;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags adjustfield;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags basefield;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags floatfield;
    /* 0x0000 */ enum std::_Iosb<int>::_Iostate goodbit;
    /* 0x0000 */ enum std::_Iosb<int>::_Iostate eofbit;
    /* 0x0000 */ enum std::_Iosb<int>::_Iostate failbit;
    /* 0x0000 */ enum std::_Iosb<int>::_Iostate badbit;
    /* 0x0000 */ enum std::_Iosb<int>::_Iostate _Hardfail;
    /* 0x0000 */ enum std::_Iosb<int>::_Openmode in;
    /* 0x0000 */ enum std::_Iosb<int>::_Openmode out;
    /* 0x0000 */ enum std::_Iosb<int>::_Openmode ate;
    /* 0x0000 */ enum std::_Iosb<int>::_Openmode app;
    /* 0x0000 */ enum std::_Iosb<int>::_Openmode trunc;
    /* 0x0000 */ enum std::_Iosb<int>::_Openmode _Nocreate;
    /* 0x0000 */ enum std::_Iosb<int>::_Openmode _Noreplace;
    /* 0x0000 */ enum std::_Iosb<int>::_Openmode binary;
    /* 0x0000 */ enum std::_Iosb<int>::_Seekdir beg;
    /* 0x0000 */ enum std::_Iosb<int>::_Seekdir cur;
    /* 0x0000 */ enum std::_Iosb<int>::_Seekdir end;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct png_xy
{
  /* 0x0000 */ int redx;
  /* 0x0004 */ int redy;
  /* 0x0008 */ int greenx;
  /* 0x000c */ int greeny;
  /* 0x0010 */ int bluex;
  /* 0x0014 */ int bluey;
  /* 0x0018 */ int whitex;
  /* 0x001c */ int whitey;
}; /* size: 0x0020 */

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > > >;

typedef struct _Cvtvec
{
  /* 0x0000 */ unsigned long _Hand;
  /* 0x0004 */ unsigned int _Page;
} Cvtvec, *PCvtvec; /* size: 0x0008 */

class std::codecvt<unsigned short,char,int>
{
  /* 0x0000 */ class std::locale::id id;
  /* 0x0004 */ long Padding_1106;
  /* 0x0008 */ struct _Cvtvec _Cvt;
}; /* size: 0x0010 */

struct png_color_8_struct
{
  /* 0x0000 */ unsigned char red;
  /* 0x0001 */ unsigned char green;
  /* 0x0002 */ unsigned char blue;
  /* 0x0003 */ unsigned char gray;
  /* 0x0004 */ unsigned char alpha;
}; /* size: 0x0005 */

class bdLinkedList<bdReference<bdConnection> >::Node
{
  /* 0x0000 */ class bdReference<bdConnection> m_data;
  /* 0x0004 */ class bdLinkedList<bdReference<bdConnection> >::Node* m_next;
  /* 0x0008 */ class bdLinkedList<bdReference<bdConnection> >::Node* m_prev;
}; /* size: 0x000c */

class std::error_condition
{
  /* 0x0000 */ int _Myval;
  /* 0x0004 */ const class std::error_category* _Mycat;
}; /* size: 0x0008 */

struct D2D1_DRAWING_STATE_DESCRIPTION
{
  /* 0x0000 */ enum D2D1_ANTIALIAS_MODE antialiasMode;
  /* 0x0004 */ enum D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode;
  /* 0x0008 */ unsigned __int64 tag1;
  /* 0x0010 */ unsigned __int64 tag2;
  /* 0x0018 */ struct D2D_MATRIX_3X2_F transform;
}; /* size: 0x0030 */

class std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >
{
}; /* size: 0x0010 */

struct MapProfileEntry
{
  /* 0x0000 */ const char* label;
  /* 0x0004 */ int accessCount;
  /* 0x0008 */ unsigned __int64 ticksStart;
  /* 0x0010 */ unsigned __int64 ticksTotal;
  /* 0x0018 */ unsigned __int64 ticksSelf;
  /* 0x0020 */ int indent;
  /* 0x0024 */ struct MapProfileEntry* parent;
  /* 0x0028 */ struct MapProfileElement elements[3];
}; /* size: 0x0070 */

class std::ctype<wchar_t>
{
  /* 0x0000 */ class std::locale::id id;
  /* 0x0004 */ long Padding_1107;
  /* 0x0008 */ struct _Ctypevec _Ctype;
  /* 0x0018 */ struct _Cvtvec _Cvt;
}; /* size: 0x0020 */

struct ID3D10Resource
{
}; /* size: 0x0004 */

struct dwYouTubeUploadTask_t
{
  /* 0x0000 */ unsigned __int64 fileID;
  /* 0x0008 */ BOOL isPrivate;
  /* 0x0009 */ char __PADDING__[7];
}; /* size: 0x0010 */

struct dwYouTubeIsRegisteredTask_t
{
  /* 0x0000 */ class bdBoolResult isRegisteredResult;
}; /* size: 0x0008 */

struct dwYouTubeGetTokenTask_t
{
  /* 0x0000 */ class bdYouTubeUserToken* userToken;
}; /* size: 0x0004 */

struct controllerYouTubeTasks_t
{
  /* 0x0000 */ struct dwYouTubeUploadTask_t ytUploadTask;
  /* 0x0010 */ struct dwYouTubeIsRegisteredTask_t ytIsRegisteredTask;
  /* 0x0018 */ struct dwYouTubeRegistrationTask_t ytRegistrationTask;
  /* 0x001c */ struct dwYouTubeGetTokenTask_t ytGetTokenTask;
}; /* size: 0x0020 */

struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
  /* 0x0000 */ const class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* 0x001c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > second;
}; /* size: 0x0038 */

class std::hash<std::error_condition>
{
}; /* size: 0x0001 */

struct png_dsort_struct
{
  /* 0x0000 */ struct png_dsort_struct* next;
  /* 0x0004 */ unsigned char left;
  /* 0x0005 */ unsigned char right;
  /* 0x0006 */ char __PADDING__[2];
}; /* size: 0x0008 */

struct mapLoadProfile_t
{
  /* 0x0000 */ BOOL isLoading;
  /* 0x0001 */ char Padding_1108[3];
  /* 0x0004 */ int profileEntryCount;
  /* 0x0008 */ struct MapProfileEntry profileEntries[384];
  /* 0xa808 */ struct MapProfileEntry* currentEntry;
  /* 0xa80c */ long Padding_1109;
  /* 0xa810 */ unsigned __int64 ticksStart;
  /* 0xa818 */ unsigned __int64 ticksFinish;
  /* 0xa820 */ unsigned __int64 ticksProfiled;
  /* 0xa828 */ int elementAccessCount[3];
  /* 0xa834 */ long Padding_1110;
  /* 0xa838 */ struct MapProfileElement elements[3];
}; /* size: 0xa880 */

class std::ctype<unsigned short>
{
  /* 0x0000 */ class std::locale::id id;
  /* 0x0004 */ long Padding_1111;
  /* 0x0008 */ struct _Ctypevec _Ctype;
  /* 0x0018 */ struct _Cvtvec _Cvt;
}; /* size: 0x0020 */

struct CIN_CALLBACK_INFO
{
  /* 0x0000 */ enum CIN_CALLBACK_TYPE type;
  /* 0x0004 */ void* callback /* function */;
  /* 0x0008 */ int user;
}; /* size: 0x000c */

class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
{
  /* 0x0000 */ const wchar_t* _Ptr;
}; /* size: 0x0004 */

class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >
{
}; /* size: 0x0050 */

class std::basic_ios<wchar_t,std::char_traits<wchar_t> >
{
  /* 0x0000 */ long Padding_1112[14];
  /* 0x0038 */ class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >* _Mystrbuf;
  /* 0x003c */ class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >* _Tiestr;
  /* 0x0040 */ wchar_t _Fillch;
}; /* size: 0x0048 */

class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >
{
}; /* size: 0x0050 */

struct ID3D10DepthStencilState
{
}; /* size: 0x0004 */

struct $_TypeDescriptor$_extraBytes_52
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[52];
}; /* size: 0x003c */

struct D3D10_TEX1D_DSV
{
  /* 0x0000 */ unsigned int MipSlice;
}; /* size: 0x0004 */

struct D3D10_TEX1D_ARRAY_DSV
{
  /* 0x0000 */ unsigned int MipSlice;
  /* 0x0004 */ unsigned int FirstArraySlice;
  /* 0x0008 */ unsigned int ArraySize;
}; /* size: 0x000c */

struct D3D10_TEX2D_DSV
{
  /* 0x0000 */ unsigned int MipSlice;
}; /* size: 0x0004 */

struct D3D10_TEX2D_ARRAY_DSV
{
  /* 0x0000 */ unsigned int MipSlice;
  /* 0x0004 */ unsigned int FirstArraySlice;
  /* 0x0008 */ unsigned int ArraySize;
}; /* size: 0x000c */

struct D3D10_TEX2DMS_ARRAY_DSV
{
  /* 0x0000 */ unsigned int FirstArraySlice;
  /* 0x0004 */ unsigned int ArraySize;
}; /* size: 0x0008 */

struct D3D10_DEPTH_STENCIL_VIEW_DESC
{
  /* 0x0000 */ enum DXGI_FORMAT Format;
  /* 0x0004 */ enum D3D10_DSV_DIMENSION ViewDimension;
  union
  {
    /* 0x0008 */ struct D3D10_TEX1D_DSV Texture1D;
    /* 0x0008 */ struct D3D10_TEX1D_ARRAY_DSV Texture1DArray;
    /* 0x0008 */ struct D3D10_TEX2D_DSV Texture2D;
    /* 0x0008 */ struct D3D10_TEX2D_ARRAY_DSV Texture2DArray;
    /* 0x0008 */ struct D3D10_TEX2DMS_DSV Texture2DMS;
    struct
    {
      /* 0x0008 */ struct D3D10_TEX2DMS_ARRAY_DSV Texture2DMSArray;
      /* 0x0010 */ long __PADDING__[1];
    }; /* size: 0x000c */
  }; /* size: 0x000c */
}; /* size: 0x0014 */

class std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> >;

struct tinfl_huff_table
{
  /* 0x0000 */ unsigned char m_code_size[288];
  /* 0x0120 */ short m_look_up[1024];
  /* 0x0920 */ short m_tree[576];
}; /* size: 0x0da0 */

class dwLobbyEventHandler
{
  /* 0x0000 */ long Padding_1113;
  /* 0x0004 */ enum ControllerIndex_t m_controllerIndex;
}; /* size: 0x0008 */

struct FLAC__StreamMetadata_Padding
{
  /* 0x0000 */ int dummy;
}; /* size: 0x0004 */

struct NV_GPU_CONNECTOR_DATA
{
  /* 0x0000 */ enum _NV_GPU_CONNECTOR_TYPE type;
  /* 0x0004 */ unsigned long locationIndex;
}; /* size: 0x0008 */

struct NV_GPU_CONNECTOR_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum _NV_GPU_CONNECTOR_PLATFORM connectorPlatform;
  /* 0x0008 */ unsigned long connectorCount;
  /* 0x000c */ struct NV_GPU_CONNECTOR_DATA connector[4];
}; /* size: 0x002c */

struct DiskPrimaryLight_Version55
{
  /* 0x0000 */ unsigned char type;
  /* 0x0001 */ unsigned char canUseShadowMap;
  /* 0x0002 */ short cullDist;
  /* 0x0004 */ char priority;
  /* 0x0005 */ unsigned char useCookie;
  /* 0x0006 */ unsigned char shadowmapVolume;
  /* 0x0007 */ unsigned char _pad[1];
  /* 0x0008 */ union vec3_t dir;
  /* 0x0014 */ union vec3_t origin;
  /* 0x0020 */ union vec3_t color;
  /* 0x002c */ union vec3_t specularcolor;
  /* 0x0038 */ union vec3_t bouncecolor;
  /* 0x0044 */ union vec3_t angle;
  /* 0x0050 */ float intensity;
  /* 0x0054 */ float dAttenuation;
  /* 0x0058 */ float cutOn;
  /* 0x005c */ float nearEdge;
  /* 0x0060 */ float farEdge;
  /* 0x0064 */ float radius;
  /* 0x0068 */ float cosHalfFovOuter;
  /* 0x006c */ float cosHalfFovInner;
  /* 0x0070 */ int exponent;
  /* 0x0074 */ float rotationLimit;
  /* 0x0078 */ float translationLimit;
  /* 0x007c */ float roundness;
  /* 0x0080 */ float mipDistance;
  /* 0x0084 */ union vec4_t aAbB;
  /* 0x0094 */ union vec4_t cookieControl0;
  /* 0x00a4 */ union vec4_t cookieControl1;
  /* 0x00b4 */ union vec4_t cookieControl2;
  /* 0x00c4 */ char defName[64];
}; /* size: 0x0104 */

class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry
{
  /* 0x0000 */ long Padding_1114;
  /* 0x0004 */ BOOL _Ok;
}; /* size: 0x0008 */

class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
  /* 0x0000 */ class std::basic_istream<wchar_t,std::char_traits<wchar_t> >& _Myistr;
}; /* size: 0x0004 */

struct FLAC__StreamMetadata_CueSheet_Index
{
  /* 0x0000 */ unsigned __int64 offset;
  /* 0x0008 */ unsigned char number;
  /* 0x0009 */ char __PADDING__[7];
}; /* size: 0x0010 */

struct std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base0>
{
}; /* size: 0x0001 */

struct DevGuiInput
{
  /* 0x0000 */ enum ControllerIndex_t selectedGamePadIndex;
  /* 0x0004 */ enum ControllerIndex_t gamePadIndex;
  /* 0x0008 */ float mousePos[2];
  /* 0x0010 */ BOOL buttonDown[13];
  /* 0x001d */ BOOL prevButtonDown[13];
  /* 0x002a */ char Padding_1115[2];
  /* 0x002c */ float scrollScale;
  /* 0x0030 */ enum DevGuiInputState digitalStates[2];
  /* 0x0038 */ float digitalAxis[2];
  /* 0x0040 */ float digitalTimes[2];
  /* 0x0048 */ enum DevGuiInputState analogStates[2];
  /* 0x0050 */ float analogAxis[2];
  /* 0x0058 */ float analogTimes[2];
  /* 0x0060 */ short menuScroll[2];
  /* 0x0064 */ float menuScrollTime[2];
  /* 0x006c */ float digitalSliderTime;
  /* 0x0070 */ float analogSliderTime;
  /* 0x0074 */ float sliderScrollTime;
  /* 0x0078 */ float sliderScrollMaxTimeStep;
}; /* size: 0x007c */

struct worldTree_s
{
  /* 0x0000 */ float dist;
  /* 0x0004 */ unsigned short axis;
  union
  {
    union
    {
      /* 0x0006 */ unsigned short parent;
      /* 0x0006 */ unsigned short nextFree;
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ u;
  /* 0x0008 */ unsigned short child[2];
}; /* size: 0x000c */

struct worldSector_s
{
  /* 0x0000 */ struct worldContents_s contents;
  /* 0x000c */ struct worldTree_s tree;
}; /* size: 0x0018 */

struct FxSprite
{
  /* 0x0000 */ struct Material* material;
  /* 0x0004 */ union vec3_t pos;
  /* 0x0010 */ unsigned char rgbaColor[4];
  /* 0x0014 */ float radius;
  /* 0x0018 */ float minScreenRadius;
  /* 0x001c */ int flags;
}; /* size: 0x0020 */

struct FxSpriteInfo
{
  /* 0x0000 */ int spriteCount;
  /* 0x0004 */ int pad[3];
  /* 0x0010 */ struct FxSprite sprites[950];
}; /* size: 0x76d0 */

class std::fpos<int>
{
  union
  {
    /* 0x0000 */ const int _Stz;
    /* 0x0000 */ __int64 _Myoff;
  }; /* size: 0x0008 */
  /* 0x0008 */ __int64 _Fpos;
  /* 0x0010 */ int _Mystate;
}; /* size: 0x0018 */

class bdReference<bdStreamingTask>
{
  /* 0x0000 */ class bdStreamingTask* m_ptr;
}; /* size: 0x0004 */

struct ID3D10ShaderResourceView
{
}; /* size: 0x0004 */

class bdContentStatus
{
  /* 0x0000 */ long Padding_1116[2];
  /* 0x0008 */ unsigned __int64 m_unlockKey;
  /* 0x0010 */ enum bdContentStatusCode m_status;
}; /* size: 0x0018 */

struct FLAC__FrameFooter
{
  /* 0x0000 */ unsigned short crc;
}; /* size: 0x0002 */

class std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >
{
  /* 0x0000 */ long Padding_1117;
  /* 0x0004 */ class std::_Mutex _Mylock;
  /* 0x0008 */ unsigned short* _Gfirst;
  /* 0x000c */ unsigned short* _Pfirst;
  /* 0x0010 */ unsigned short** _IGfirst;
  /* 0x0014 */ unsigned short** _IPfirst;
  /* 0x0018 */ unsigned short* _Gnext;
  /* 0x001c */ unsigned short* _Pnext;
  /* 0x0020 */ unsigned short** _IGnext;
  /* 0x0024 */ unsigned short** _IPnext;
  /* 0x0028 */ int _Gcount;
  /* 0x002c */ int _Pcount;
  /* 0x0030 */ int* _IGcount;
  /* 0x0034 */ int* _IPcount;
  /* 0x0038 */ class std::locale* _Plocale;
}; /* size: 0x003c */

struct D3DXQUATERNION
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
  /* 0x0008 */ float z;
  /* 0x000c */ float w;
}; /* size: 0x0010 */

typedef struct _IMAGE_DOS_HEADER
{
  /* 0x0000 */ unsigned short e_magic;
  /* 0x0002 */ unsigned short e_cblp;
  /* 0x0004 */ unsigned short e_cp;
  /* 0x0006 */ unsigned short e_crlc;
  /* 0x0008 */ unsigned short e_cparhdr;
  /* 0x000a */ unsigned short e_minalloc;
  /* 0x000c */ unsigned short e_maxalloc;
  /* 0x000e */ unsigned short e_ss;
  /* 0x0010 */ unsigned short e_sp;
  /* 0x0012 */ unsigned short e_csum;
  /* 0x0014 */ unsigned short e_ip;
  /* 0x0016 */ unsigned short e_cs;
  /* 0x0018 */ unsigned short e_lfarlc;
  /* 0x001a */ unsigned short e_ovno;
  /* 0x001c */ unsigned short e_res[4];
  /* 0x0024 */ unsigned short e_oemid;
  /* 0x0026 */ unsigned short e_oeminfo;
  /* 0x0028 */ unsigned short e_res2[10];
  /* 0x003c */ long e_lfanew;
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER; /* size: 0x0040 */

class bdPS3AuthInfo
{
  /* 0x0000 */ long Padding_1118[2];
  /* 0x0008 */ char m_region[4];
  /* 0x000c */ char m_domain[4];
  /* 0x0010 */ BOOL m_AVChatAvailability;
  /* 0x0011 */ BOOL m_ContentRatingEnabled;
  /* 0x0012 */ unsigned char m_age;
}; /* size: 0x0014 */

struct cm_world_t
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ unsigned short freeHead;
  /* 0x001a */ char Padding_1119[2];
  /* 0x001c */ struct worldSector_s sectors[1024];
}; /* size: 0x601c */

struct std::unary_function<std::error_condition,unsigned int>
{
}; /* size: 0x0001 */

struct NV_VIRTUALMODE_INFO
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long isCapableOfVirtualMode : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long isInVirtualMode : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long reserved : 30; /* bit position: 2 */
  }; /* bitfield */
}; /* size: 0x0004 */

class std::codecvt<wchar_t,char,int>
{
  /* 0x0000 */ class std::locale::id id;
  /* 0x0004 */ long Padding_1120;
  /* 0x0008 */ struct _Cvtvec _Cvt;
}; /* size: 0x0010 */

class std::basic_ios<unsigned short,std::char_traits<unsigned short> >
{
  /* 0x0000 */ long Padding_1121[14];
  /* 0x0038 */ class std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >* _Mystrbuf;
  /* 0x003c */ class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >* _Tiestr;
  /* 0x0040 */ unsigned short _Fillch;
}; /* size: 0x0048 */

class bdLinkedList<bdReference<bdChunk> >
{
  /* 0x0000 */ class bdLinkedList<bdReference<bdChunk> >::Node* m_head;
  /* 0x0004 */ class bdLinkedList<bdReference<bdChunk> >::Node* m_tail;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

struct NVAPI_VIDSURF_ENCRYPT_CTRL_SET_IV
{
  /* 0x0000 */ unsigned long dwEncryptKeyProtectionMode;
  /* 0x0004 */ unsigned long dwEncryptKeyProtectionIdentifier;
  /* 0x0008 */ unsigned long dwIV[4];
}; /* size: 0x0018 */

struct StreamDelayInfo
{
  /* 0x0000 */ const void* ptr;
  /* 0x0004 */ int size;
}; /* size: 0x0008 */

class std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >;

struct NV_VIRTUALMODE_DATA
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum NV_VIRTUALMODE_CMD cmd;
  union
  {
    /* 0x0008 */ struct NV_VIRTUALMODE_INFO virtualModeInfo;
  } /* size: 0x0004 */ data;
}; /* size: 0x000c */

class std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >;

class bdFriendAndRichPresence
{
  /* 0x0000 */ long Padding_1122[2];
  /* 0x0008 */ unsigned __int64 m_userID;
  /* 0x0010 */ char m_userName[64];
  /* 0x0050 */ unsigned char m_groupID;
  /* 0x0051 */ BOOL m_isOnline;
  /* 0x0052 */ unsigned char m_richPresence[255];
  /* 0x0151 */ char Padding_1123[3];
  /* 0x0154 */ unsigned int m_richPresenceSize;
}; /* size: 0x0158 */

struct DWRITE_TEXT_RANGE
{
  /* 0x0000 */ unsigned int startPosition;
  /* 0x0004 */ unsigned int length;
}; /* size: 0x0008 */

class bdFriendProposal
{
  /* 0x0000 */ long Padding_1124[2];
  /* 0x0008 */ unsigned __int64 m_userID;
  /* 0x0010 */ char m_userName[64];
  /* 0x0050 */ unsigned char m_attachment[1024];
  /* 0x0450 */ unsigned int m_attachmentSize;
}; /* size: 0x0458 */

typedef struct _D3DLOCKED_BOX
{
  /* 0x0000 */ int RowPitch;
  /* 0x0004 */ int SlicePitch;
  /* 0x0008 */ void* pBits;
} D3DLOCKED_BOX, *PD3DLOCKED_BOX; /* size: 0x000c */

class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry
{
  /* 0x0000 */ long Padding_1125;
  /* 0x0004 */ BOOL _Ok;
}; /* size: 0x0008 */

class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
  /* 0x0000 */ class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >& _Myostr;
}; /* size: 0x0004 */

struct FLAC__Subframe_LPC
{
  /* 0x0000 */ struct FLAC__EntropyCodingMethod entropy_coding_method;
  /* 0x000c */ unsigned int order;
  /* 0x0010 */ unsigned int qlp_coeff_precision;
  /* 0x0014 */ int quantization_level;
  /* 0x0018 */ int qlp_coeff[32];
  /* 0x0098 */ int warmup[32];
  /* 0x0118 */ const int* residual;
}; /* size: 0x011c */

struct FLAC__Subframe
{
  /* 0x0000 */ enum FLAC__SubframeType type;
  union
  {
    union
    {
      /* 0x0004 */ struct FLAC__Subframe_Constant constant;
      /* 0x0004 */ struct FLAC__Subframe_Fixed fixed;
      /* 0x0004 */ struct FLAC__Subframe_LPC lpc;
      /* 0x0004 */ struct FLAC__Subframe_Verbatim verbatim;
    }; /* size: 0x011c */
  } /* size: 0x011c */ data;
  /* 0x0120 */ unsigned int wasted_bits;
}; /* size: 0x0124 */

struct dplane_t
{
  /* 0x0000 */ float normal[3];
  /* 0x000c */ float dist;
}; /* size: 0x0010 */

struct FxColor4b
{
  /* 0x0000 */ unsigned char color[4];
}; /* size: 0x0004 */

class std::_Timevec
{
  /* 0x0000 */ void* _Timeptr;
}; /* size: 0x0004 */

struct bdChunk::bdChunkData
{
  /* 0x0000 */ unsigned char m_type;
  /* 0x0001 */ unsigned char m_flags;
  /* 0x0002 */ unsigned short m_length;
}; /* size: 0x0004 */

class bdChunk
{
  /* 0x0000 */ long Padding_1126[2];
  /* 0x0008 */ enum bdChunkTypes m_type;
  /* 0x000c */ struct bdChunk::bdChunkData m_headerData;
}; /* size: 0x0010 */

struct DiskCollAabbTree
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ union vec3_t halfSize;
  /* 0x0018 */ unsigned short materialIndex;
  /* 0x001a */ unsigned short childCount;
  union
  {
    union
    {
      /* 0x001c */ int firstChildIndex;
      /* 0x001c */ int partitionIndex;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
}; /* size: 0x0020 */

struct std::unary_function<std::error_code,unsigned int>
{
}; /* size: 0x0001 */

struct std::ctype_base
{
}; /* size: 0x0008 */

struct dnode_t
{
  /* 0x0000 */ int planeNum;
  /* 0x0004 */ int children[2];
  /* 0x000c */ int mins[3];
  /* 0x0018 */ int maxs[3];
}; /* size: 0x0024 */

class std::ios_base
{
  /* 0x0000 */ long Padding_1127[2];
  /* 0x0008 */ unsigned int _Stdstr;
  /* 0x000c */ int _Mystate;
  /* 0x0010 */ int _Except;
  /* 0x0014 */ int _Fmtfl;
  /* 0x0018 */ __int64 _Prec;
  /* 0x0020 */ __int64 _Wide;
  /* 0x0028 */ struct std::ios_base::_Iosarray* _Arr;
  /* 0x002c */ struct std::ios_base::_Fnarray* _Calls;
  /* 0x0030 */ class std::locale* _Ploc;
  union
  {
    /* 0x0000 */ int _Index;
    /* 0x0000 */ BOOL _Sync;
  }; /* size: 0x0004 */
}; /* size: 0x0038 */

struct std::ios_base::_Iosarray
{
  /* 0x0000 */ struct std::ios_base::_Iosarray* _Next;
  /* 0x0004 */ int _Index;
  /* 0x0008 */ long _Lo;
  /* 0x000c */ void* _Vp;
}; /* size: 0x0010 */

struct D3DXVECTOR4
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
  /* 0x0008 */ float z;
  /* 0x000c */ float w;
}; /* size: 0x0010 */

struct std::ios_base::_Fnarray
{
  /* 0x0000 */ struct std::ios_base::_Fnarray* _Next;
  /* 0x0004 */ int _Index;
  /* 0x0008 */ void* _Pfn /* function */;
}; /* size: 0x000c */

struct DiskCollPartition
{
  /* 0x0000 */ unsigned short checkStamp;
  /* 0x0002 */ unsigned char triCount;
  /* 0x0003 */ char Padding_1128;
  /* 0x0004 */ int firstTriIndex;
  /* 0x0008 */ int nuinds;
  /* 0x000c */ int fuind;
}; /* size: 0x0010 */

class CStringEdPackage
{
  /* 0x0000 */ int m_bEndMarkerFound_ParseOnly;
  /* 0x0004 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strCurrentEntryRef_ParseOnly;
  /* 0x0020 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strCurrentEntryEnglish_ParseOnly;
  /* 0x003c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strCurrentFileRef_ParseOnly;
  /* 0x0058 */ class std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t> > m_StringEntries;
}; /* size: 0x0068 */

struct MapProfileHotSpot
{
  /* 0x0000 */ const char* label;
  /* 0x0004 */ int accessCount;
  /* 0x0008 */ __int64 ticksSelf;
  /* 0x0010 */ __int64 ticksFile;
}; /* size: 0x0018 */

class mapFlagMasksName_t
{
}; /* size: 0x0001 */

struct std::_Pair_base<MapProfileHotSpot *,MapProfileHotSpot *>
{
  /* 0x0000 */ struct MapProfileHotSpot* first;
  /* 0x0004 */ struct MapProfileHotSpot* second;
}; /* size: 0x0008 */

class EXT_Link<LocalizeEntry>
{
  /* 0x0000 */ struct LocalizeEntry* m_Data;
  /* 0x0004 */ class EXT_Link<LocalizeEntry>* m_Next;
  /* 0x0008 */ class EXT_Link<LocalizeEntry>* m_Last;
}; /* size: 0x000c */

class std::ios_base::Init
{
  /* 0x0000 */ int _Init_cnt;
}; /* size: 0x0001 */

class bdNATTraversalPacket
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char m_type;
      /* 0x0001 */ char Padding_1129;
      /* 0x0002 */ unsigned short m_protocolVersion;
      /* 0x0004 */ unsigned char m_hmac[10];
      /* 0x000e */ char Padding_1130[2];
      /* 0x0010 */ unsigned int m_ident;
      /* 0x0014 */ class bdAddr m_addrSrc;
      /* 0x001c */ class bdAddr m_addrDest;
    }; /* size: 0x0021 */
    /* 0x0000 */ unsigned int serializedSize;
  }; /* size: 0x0021 */
}; /* size: 0x0024 */

class std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> >;

class std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > >;

union XAssetPoolEntry<SndDriverGlobals>
{
  union
  {
    /* 0x0000 */ struct SndDriverGlobals entry;
    /* 0x0000 */ union XAssetPoolEntry<SndDriverGlobals>* next;
  }; /* size: 0x0044 */
}; /* size: 0x0044 */

struct XAssetPool<WeaponCamo,128>
{
  /* 0x0000 */ union XAssetPoolEntry<WeaponCamo>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<WeaponCamo> entries[128];
}; /* size: 0x0e04 */

class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::sentry
{
  /* 0x0000 */ long Padding_1131;
  /* 0x0004 */ BOOL _Ok;
}; /* size: 0x0008 */

class phys_list_condition_functor_has_no_constraints
{
}; /* size: 0x0001 */

class bdQueue<unsigned int>
{
  /* 0x0000 */ class bdLinkedList<unsigned int> m_list;
}; /* size: 0x000c */

struct $_TypeDescriptor$_extraBytes_50
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[50];
}; /* size: 0x003a */

typedef struct _Collvec
{
  /* 0x0000 */ unsigned long _Hand;
  /* 0x0004 */ unsigned int _Page;
} Collvec, *PCollvec; /* size: 0x0008 */

class bdTagsArray
{
  /* 0x0000 */ long Padding_1132[2];
  /* 0x0008 */ unsigned __int64 m_entityID;
  /* 0x0010 */ unsigned int m_numTags;
  /* 0x0014 */ long Padding_1133;
  /* 0x0018 */ class bdTag m_tags[60];
}; /* size: 0x05b8 */

class LocalizeName
{
}; /* size: 0x0001 */

class mapStringEntriesName_t
{
}; /* size: 0x0001 */

union XAssetPoolEntry<SndBank>
{
  union
  {
    /* 0x0000 */ struct SndBank entry;
    /* 0x0000 */ union XAssetPoolEntry<SndBank>* next;
  }; /* size: 0x1294 */
}; /* size: 0x1294 */

struct XAssetPool<SndBank,32>
{
  /* 0x0000 */ union XAssetPoolEntry<SndBank>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<SndBank> entries[32];
}; /* size: 0x25284 */

struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
}; /* size: 0x0038 */

struct D2D_SIZE_F
{
  /* 0x0000 */ float width;
  /* 0x0004 */ float height;
}; /* size: 0x0008 */

struct D2D1_ARC_SEGMENT
{
  /* 0x0000 */ struct D2D_POINT_2F point;
  /* 0x0008 */ struct D2D_SIZE_F size;
  /* 0x0010 */ float rotationAngle;
  /* 0x0014 */ enum D2D1_SWEEP_DIRECTION sweepDirection;
  /* 0x0018 */ enum D2D1_ARC_SIZE arcSize;
}; /* size: 0x001c */

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >,bool>
{
}; /* size: 0x0008 */

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >
{
}; /* size: 0x0004 */

union XAssetPoolEntry<GfxLightDef>
{
  union
  {
    /* 0x0000 */ struct GfxLightDef entry;
    /* 0x0000 */ union XAssetPoolEntry<GfxLightDef>* next;
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

union XAssetPoolEntry<MapEnts>
{
  union
  {
    /* 0x0000 */ struct MapEnts entry;
    /* 0x0000 */ union XAssetPoolEntry<MapEnts>* next;
  }; /* size: 0x0024 */
}; /* size: 0x0024 */

struct XAssetPool<MapEnts,2>
{
  /* 0x0000 */ union XAssetPoolEntry<MapEnts>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<MapEnts> entries[2];
}; /* size: 0x004c */

struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node
{
  /* 0x0000 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node* _Left;
  /* 0x0004 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node* _Parent;
  /* 0x0008 */ struct std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node* _Right;
  /* 0x000c */ struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > _Myval;
  /* 0x0044 */ char _Color;
  /* 0x0045 */ char _Isnil;
  /* 0x0046 */ char __PADDING__[2];
}; /* size: 0x0048 */

class bdAuthUserToServicePlainText
{
  /* 0x0000 */ unsigned __int64 m_userID;
}; /* size: 0x0008 */

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::_Iterator_base0>
{
}; /* size: 0x0001 */

struct MessageWindow
{
  /* 0x0000 */ struct MessageLine* lines;
  /* 0x0004 */ struct Message* messages;
  /* 0x0008 */ char* circularTextBuffer;
  /* 0x000c */ int textBufSize;
  /* 0x0010 */ int lineCount;
  /* 0x0014 */ int padding;
  /* 0x0018 */ int scrollTime;
  /* 0x001c */ int fadeIn;
  /* 0x0020 */ int fadeOut;
  /* 0x0024 */ int textBufPos;
  /* 0x0028 */ int firstLineIndex;
  /* 0x002c */ int activeLineCount;
  /* 0x0030 */ int messageIndex;
}; /* size: 0x0034 */

struct MessageLine
{
  /* 0x0000 */ int messageIndex;
  /* 0x0004 */ int textBufPos;
  /* 0x0008 */ int textBufSize;
  /* 0x000c */ int typingStartTime;
  /* 0x0010 */ int lastTypingSoundTime;
  /* 0x0014 */ int flags;
}; /* size: 0x0018 */

struct Message
{
  /* 0x0000 */ int startTime;
  /* 0x0004 */ int endTime;
}; /* size: 0x0008 */

struct MessageBuffer
{
  /* 0x0000 */ char gamemsgText[2048][4];
  /* 0x2000 */ struct MessageWindow gamemsgWindows[4];
  /* 0x20d0 */ struct MessageLine gamemsgLines[12][4];
  /* 0x2550 */ struct Message gamemsgMessages[12][4];
  /* 0x26d0 */ char miniconText[4096];
  /* 0x36d0 */ struct MessageWindow miniconWindow;
  /* 0x3704 */ struct MessageLine miniconLines[100];
  /* 0x4064 */ struct Message miniconMessages[100];
  /* 0x4384 */ char errorText[1024];
  /* 0x4784 */ struct MessageWindow errorWindow;
  /* 0x47b8 */ struct MessageLine errorLines[5];
  /* 0x4830 */ struct Message errorMessages[5];
}; /* size: 0x4858 */

struct Console
{
  /* 0x0000 */ int initialized;
  /* 0x0004 */ struct MessageWindow consoleWindow;
  /* 0x0038 */ struct MessageLine consoleLines[1024];
  /* 0x6038 */ struct Message consoleMessages[1024];
  /* 0x8038 */ char consoleText[32768];
  /* 0x10038 */ char textTempLine[512];
  /* 0x10238 */ unsigned int lineOffset;
  /* 0x1023c */ int displayLineOffset;
  /* 0x10240 */ int prevChannel;
  /* 0x10244 */ BOOL outputVisible;
  /* 0x10245 */ char Padding_1134[3];
  /* 0x10248 */ int fontHeight;
  /* 0x1024c */ int visibleLineCount;
  /* 0x10250 */ int visiblePixelWidth;
  /* 0x10254 */ union vec2_t screenMin;
  /* 0x1025c */ union vec2_t screenMax;
  /* 0x10264 */ struct MessageBuffer messageBuffer[1];
  /* 0x14abc */ union vec4_t color;
}; /* size: 0x14acc */

struct SpeexBits
{
  /* 0x0000 */ char* chars;
  /* 0x0004 */ int nbBits;
  /* 0x0008 */ int charPtr;
  /* 0x000c */ int bitPtr;
  /* 0x0010 */ int owner;
  /* 0x0014 */ int overflow;
  /* 0x0018 */ int buf_size;
  /* 0x001c */ int reserved1;
  /* 0x0020 */ void* reserved2;
}; /* size: 0x0024 */

struct std::binary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool>
{
}; /* size: 0x0001 */

struct StickToCodeMap
{
  /* 0x0000 */ enum GamepadPhysicalAxis physicalAxis;
  /* 0x0004 */ int posCode;
  /* 0x0008 */ int negCode;
}; /* size: 0x000c */

class std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0>::value_compare;

struct XAssetPool<Qdb,4>
{
  /* 0x0000 */ union XAssetPoolEntry<Qdb>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<Qdb> entries[4];
}; /* size: 0x0034 */

struct KeyState
{
  /* 0x0000 */ int down;
  /* 0x0004 */ int repeats;
  /* 0x0008 */ enum Bind_t binding[2];
  /* 0x0010 */ const char* bindingCheat;
}; /* size: 0x0014 */

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >;

class bdAuthDeleteAccountCypherText
{
  /* 0x0000 */ unsigned int m_magicNumber;
}; /* size: 0x0004 */

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > > >;

union XAssetPoolEntry<PhysConstraints>
{
  union
  {
    /* 0x0000 */ struct PhysConstraints entry;
    /* 0x0000 */ union XAssetPoolEntry<PhysConstraints>* next;
  }; /* size: 0x0a88 */
}; /* size: 0x0a88 */

struct XAssetPool<Slug,5>
{
  /* 0x0000 */ union XAssetPoolEntry<Slug>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<Slug> entries[5];
}; /* size: 0x0040 */

struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
  /* 0x0000 */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  /* 0x001c */ class std::basic_string<char,std::char_traits<char>,std::allocator<char> > second;
}; /* size: 0x0038 */

struct ID2D1DrawingStateBlock
{
}; /* size: 0x0004 */

class compare_spawnpoint_score_sort
{
  /* 0x0000 */ int m_team;
}; /* size: 0x0004 */

union XAssetPoolEntry<WeaponVariantDef>
{
  union
  {
    /* 0x0000 */ struct WeaponVariantDef entry;
    /* 0x0000 */ union XAssetPoolEntry<WeaponVariantDef>* next;
  }; /* size: 0x02cc */
}; /* size: 0x02cc */

struct XAssetPool<DestructibleDef,64>
{
  /* 0x0000 */ union XAssetPoolEntry<DestructibleDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<DestructibleDef> entries[64];
}; /* size: 0x0604 */

struct png_time_struct
{
  /* 0x0000 */ unsigned short year;
  /* 0x0002 */ unsigned char month;
  /* 0x0003 */ unsigned char day;
  /* 0x0004 */ unsigned char hour;
  /* 0x0005 */ unsigned char minute;
  /* 0x0006 */ unsigned char second;
  /* 0x0007 */ char __PADDING__[1];
}; /* size: 0x0008 */

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > > >;

class phys_free_list<user_rigid_body>::iterator
{
  /* 0x0000 */ class phys_free_list<user_rigid_body>::T_internal_base* m_ptr;
}; /* size: 0x0004 */

class std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >
{
}; /* size: 0x0010 */

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >,bool>
{
  /* 0x0000 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > > first;
  /* 0x0004 */ BOOL second;
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

struct DEMO_SpawnBadSpawn
{
  /* 0x0000 */ short playerEntityNum;
  /* 0x0002 */ short enemyEntityNum;
  /* 0x0004 */ unsigned char playerTeam;
  /* 0x0005 */ unsigned char pointTeam;
  /* 0x0006 */ unsigned char influencerTeam;
  /* 0x0007 */ char __PADDING__[1];
}; /* size: 0x0008 */

union XAssetPoolEntry<WeaponAttachmentUnique>
{
  union
  {
    /* 0x0000 */ struct WeaponAttachmentUnique entry;
    /* 0x0000 */ union XAssetPoolEntry<WeaponAttachmentUnique>* next;
  }; /* size: 0x01a8 */
}; /* size: 0x01a8 */

struct XAssetPool<WeaponAttachment,128>
{
  /* 0x0000 */ union XAssetPoolEntry<WeaponAttachment>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<WeaponAttachment> entries[128];
}; /* size: 0x8e04 */

struct png_XYZ
{
  /* 0x0000 */ int redX;
  /* 0x0004 */ int redY;
  /* 0x0008 */ int redZ;
  /* 0x000c */ int greenX;
  /* 0x0010 */ int greenY;
  /* 0x0014 */ int greenZ;
  /* 0x0018 */ int blueX;
  /* 0x001c */ int blueY;
  /* 0x0020 */ int blueZ;
}; /* size: 0x0024 */

class LocalizeStringVectorName
{
}; /* size: 0x0001 */

struct FxCurve
{
  /* 0x0000 */ int dimensionCount;
  /* 0x0004 */ int keyCount;
  /* 0x0008 */ float keys[1];
}; /* size: 0x000c */

struct Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node>
{
}; /* size: 0x0001 */

struct XAssetPool<SndPatch,1>
{
  /* 0x0000 */ union XAssetPoolEntry<SndPatch>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<SndPatch> entries[1];
}; /* size: 0x0010 */

struct Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>::rebind<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
{
}; /* size: 0x0001 */

union XAssetPoolEntry<MemoryBlock>
{
  union
  {
    /* 0x0000 */ struct MemoryBlock entry;
    /* 0x0000 */ union XAssetPoolEntry<MemoryBlock>* next;
  }; /* size: 0x0014 */
}; /* size: 0x0014 */

class LocalizeStringSetName
{
}; /* size: 0x0001 */

class phys_link_list<pulse_sum_normal>::iterator
{
  /* 0x0000 */ class pulse_sum_normal* m_ptr;
}; /* size: 0x0004 */

class EXT_List<LocalizeEntry>
{
  /* 0x0000 */ unsigned long m_Count;
  /* 0x0004 */ class EXT_Link<LocalizeEntry>* m_Head;
  /* 0x0008 */ class EXT_Link<LocalizeEntry>* m_Tail;
}; /* size: 0x000c */

struct FxCamera
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ volatile long isValid;
  /* 0x0010 */ union vec4_t frustum[6];
  /* 0x0070 */ union vec3_t axis[3];
  /* 0x0094 */ unsigned int frustumPlaneCount;
  /* 0x0098 */ unsigned int pad[2];
}; /* size: 0x00a0 */

struct FxDrawSurfInfo
{
  /* 0x0000 */ struct r_double_index_t* indices;
  /* 0x0004 */ unsigned int indexCount;
  /* 0x0008 */ struct Material* material;
  /* 0x000c */ const char* name;
  /* 0x0010 */ BOOL enableDepthHack;
  /* 0x0011 */ BOOL superflare;
  /* 0x0012 */ char Padding_1135[2];
  /* 0x0014 */ unsigned int pad[3];
}; /* size: 0x0020 */

struct FxSystem
{
  /* 0x0000 */ struct FxCamera camera;
  /* 0x00a0 */ struct FxCamera cameraPrev;
  /* 0x0140 */ struct FxCamera extraCamera;
  /* 0x01e0 */ struct FxCamera extraCameraPre;
  /* 0x0280 */ struct FxDrawSurfInfo drawsurfInfo;
  /* 0x02a0 */ struct FxEffectContainer* effects;
  /* 0x02a4 */ struct FxPool<FxElem,FxElemContainer>* elems;
  /* 0x02a8 */ struct FxPool<FxTrail,FxTrail>* trails;
  /* 0x02ac */ struct FxPool<FxTrailElem,FxTrailElem>* trailElems;
  /* 0x02b0 */ int gfxCloudCount;
  /* 0x02b4 */ struct FxVisState* visState;
  /* 0x02b8 */ const struct FxVisState* visStateBufferRead;
  /* 0x02bc */ struct FxVisState* visStateBufferWrite;
  /* 0x02c0 */ short activeSpotLightBoltDobj;
  /* 0x02c2 */ unsigned char hideDistortionFX;
  /* 0x02c3 */ char Padding_1136;
  /* 0x02c4 */ int msecNow;
  /* 0x02c8 */ int msecDelta;
  /* 0x02cc */ volatile long msecDraw;
  /* 0x02d0 */ int frameCount;
  /* 0x02d4 */ BOOL isInitialized;
  /* 0x02d5 */ BOOL isArchiving;
  /* 0x02d6 */ unsigned char localClientNum;
  /* 0x02d7 */ char Padding_1137;
  /* 0x02d8 */ unsigned int restartList[32];
  /* 0x0358 */ struct FxUniqueHandleDb* uniqueHandleDb;
  /* 0x035c */ struct FxPlayEffectAction* actions;
  /* 0x0360 */ unsigned char* ppuActionTypes;
  /* 0x0364 */ union FxPPUAction* ppuActions;
  /* 0x0368 */ BOOL disableOcclusionSprites;
  /* 0x0369 */ char Padding_1138[3];
  /* 0x036c */ int fxSpawnWorkersOnHold;
  /* 0x0370 */ struct FxSystemShared* shared;
  /* 0x0374 */ long __PADDING__[3];
}; /* size: 0x0380 */

struct sd_voice_mix_temp_state
{
  /* 0x0000 */ short pitchSX[512];
  /* 0x0400 */ short pitchSY[512];
  /* 0x0800 */ short pitchST[512];
  /* 0x0c00 */ float pitchT[512];
  /* 0x1400 */ float pitchU[512];
  /* 0x1c00 */ float pitchX[512];
  /* 0x2400 */ float pitchY[512];
  /* 0x2c00 */ float decodeBuffer[512];
  /* 0x3400 */ float panBuffer[256];
}; /* size: 0x3800 */

struct std::_Pair_base<XZoneInfo *,XZoneInfo *>
{
  /* 0x0000 */ struct XZoneInfo* first;
  /* 0x0004 */ struct XZoneInfo* second;
}; /* size: 0x0008 */

struct FLAC__StreamMetadata_SeekTable
{
  /* 0x0000 */ unsigned int num_points;
  /* 0x0004 */ struct FLAC__StreamMetadata_SeekPoint* points;
}; /* size: 0x0008 */

class bdLinkedList<bdEndpoint>::Node
{
  /* 0x0000 */ class bdEndpoint m_data;
  /* 0x000c */ class bdLinkedList<bdEndpoint>::Node* m_next;
  /* 0x0010 */ class bdLinkedList<bdEndpoint>::Node* m_prev;
}; /* size: 0x0014 */

struct TeamLookup
{
  /* 0x0000 */ int memberCount;
  /* 0x0004 */ int lru;
  /* 0x0008 */ unsigned __int64 members[6];
  /* 0x0038 */ class bdGenericLeagueID teamID;
}; /* size: 0x0048 */

struct FLAC__StreamMetadata_StreamInfo
{
  /* 0x0000 */ unsigned int min_blocksize;
  /* 0x0004 */ unsigned int max_blocksize;
  /* 0x0008 */ unsigned int min_framesize;
  /* 0x000c */ unsigned int max_framesize;
  /* 0x0010 */ unsigned int sample_rate;
  /* 0x0014 */ unsigned int channels;
  /* 0x0018 */ unsigned int bits_per_sample;
  /* 0x001c */ long Padding_1139;
  /* 0x0020 */ unsigned __int64 total_samples;
  /* 0x0028 */ unsigned char md5sum[16];
}; /* size: 0x0038 */

struct saveField_t
{
  /* 0x0000 */ int ofs;
  /* 0x0004 */ enum saveFieldtype_t type;
}; /* size: 0x0008 */

struct FLAC__StreamMetadata_CueSheet_Track
{
  /* 0x0000 */ unsigned __int64 offset;
  /* 0x0008 */ unsigned char number;
  /* 0x0009 */ char isrc[13];
  /* 0x0016 */ char Padding_1140[2];
  struct /* bitfield */
  {
    /* 0x0018 */ unsigned int type : 1; /* bit position: 0 */
    /* 0x0018 */ unsigned int pre_emphasis : 1; /* bit position: 1 */
  }; /* bitfield */
  /* 0x001c */ unsigned char num_indices;
  /* 0x001d */ char Padding_1141[3];
  /* 0x0020 */ struct FLAC__StreamMetadata_CueSheet_Index* indices;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

struct IDirect3DQuery9
{
}; /* size: 0x0004 */

class phys_free_list<rigid_body_constraint_ragdoll>::iterator
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base* m_ptr;
}; /* size: 0x0004 */

struct FLAC__FrameHeader
{
  /* 0x0000 */ unsigned int blocksize;
  /* 0x0004 */ unsigned int sample_rate;
  /* 0x0008 */ unsigned int channels;
  /* 0x000c */ enum FLAC__ChannelAssignment channel_assignment;
  /* 0x0010 */ unsigned int bits_per_sample;
  /* 0x0014 */ enum FLAC__FrameNumberType number_type;
  union
  {
    union
    {
      /* 0x0018 */ unsigned int frame_number;
      /* 0x0018 */ unsigned __int64 sample_number;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ number;
  /* 0x0020 */ unsigned char crc;
  /* 0x0021 */ char __PADDING__[7];
}; /* size: 0x0028 */

struct FLAC__StreamMetadata_Picture
{
  /* 0x0000 */ enum FLAC__StreamMetadata_Picture_Type type;
  /* 0x0004 */ char* mime_type;
  /* 0x0008 */ unsigned char* description;
  /* 0x000c */ unsigned int width;
  /* 0x0010 */ unsigned int height;
  /* 0x0014 */ unsigned int depth;
  /* 0x0018 */ unsigned int colors;
  /* 0x001c */ unsigned int data_length;
  /* 0x0020 */ unsigned char* data;
}; /* size: 0x0024 */

struct FLAC__StreamMetadata_Application
{
  /* 0x0000 */ unsigned char id[4];
  /* 0x0004 */ unsigned char* data;
}; /* size: 0x0008 */

union XAssetPoolEntry<MenuList>
{
  union
  {
    /* 0x0000 */ struct MenuList entry;
    /* 0x0000 */ union XAssetPoolEntry<MenuList>* next;
  }; /* size: 0x000c */
}; /* size: 0x000c */

struct FLAC__StreamMetadata_VorbisComment_Entry
{
  /* 0x0000 */ unsigned int length;
  /* 0x0004 */ unsigned char* entry;
}; /* size: 0x0008 */

union XAssetPoolEntry<Font_s>
{
  union
  {
    /* 0x0000 */ struct Font_s entry;
    /* 0x0000 */ union XAssetPoolEntry<Font_s>* next;
  }; /* size: 0x0024 */
}; /* size: 0x0024 */

struct XAssetPool<Font_s,16>
{
  /* 0x0000 */ union XAssetPoolEntry<Font_s>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<Font_s> entries[16];
}; /* size: 0x0244 */

struct FLAC__StreamMetadata_CueSheet
{
  /* 0x0000 */ char media_catalog_number[129];
  /* 0x0081 */ char Padding_1142[7];
  /* 0x0088 */ unsigned __int64 lead_in;
  /* 0x0090 */ int is_cd;
  /* 0x0094 */ unsigned int num_tracks;
  /* 0x0098 */ struct FLAC__StreamMetadata_CueSheet_Track* tracks;
  /* 0x009c */ long __PADDING__[1];
}; /* size: 0x00a0 */

class bdUserGroupNumMembers
{
  /* 0x0000 */ long Padding_1143[2];
  /* 0x0008 */ unsigned __int64 m_numMembers;
}; /* size: 0x0010 */

struct FLAC__StreamMetadata_VorbisComment
{
  /* 0x0000 */ struct FLAC__StreamMetadata_VorbisComment_Entry vendor_string;
  /* 0x0008 */ unsigned int num_comments;
  /* 0x000c */ struct FLAC__StreamMetadata_VorbisComment_Entry* comments;
}; /* size: 0x0010 */

struct FLAC__StreamMetadata_Unknown
{
  /* 0x0000 */ unsigned char* data;
}; /* size: 0x0004 */

struct std::_Pair_base<SpawnPoint *,SpawnPoint *>
{
  /* 0x0000 */ struct SpawnPoint* first;
  /* 0x0004 */ struct SpawnPoint* second;
}; /* size: 0x0008 */

union XAssetPoolEntry<LocalizeEntry>
{
  union
  {
    /* 0x0000 */ struct LocalizeEntry entry;
    /* 0x0000 */ union XAssetPoolEntry<LocalizeEntry>* next;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct XAssetPool<menuDef_t,450>
{
  /* 0x0000 */ union XAssetPoolEntry<menuDef_t>* freeHead;
  /* 0x0004 */ long Padding_1144;
  /* 0x0008 */ union XAssetPoolEntry<menuDef_t> entries[450];
}; /* size: 0x2bf28 */

struct FLAC__StreamMetadata
{
  /* 0x0000 */ enum FLAC__MetadataType type;
  /* 0x0004 */ int is_last;
  /* 0x0008 */ unsigned int length;
  /* 0x000c */ long Padding_1145;
  union
  {
    union
    {
      /* 0x0010 */ struct FLAC__StreamMetadata_StreamInfo stream_info;
      /* 0x0010 */ struct FLAC__StreamMetadata_Padding padding;
      /* 0x0010 */ struct FLAC__StreamMetadata_Application application;
      /* 0x0010 */ struct FLAC__StreamMetadata_SeekTable seek_table;
      /* 0x0010 */ struct FLAC__StreamMetadata_VorbisComment vorbis_comment;
      /* 0x0010 */ struct FLAC__StreamMetadata_CueSheet cue_sheet;
      /* 0x0010 */ struct FLAC__StreamMetadata_Picture picture;
      /* 0x0010 */ struct FLAC__StreamMetadata_Unknown unknown;
    }; /* size: 0x00a0 */
  } /* size: 0x00a0 */ data;
}; /* size: 0x00b0 */

struct FLAC__Frame
{
  /* 0x0000 */ struct FLAC__FrameHeader header;
  /* 0x0028 */ struct FLAC__Subframe subframes[8];
  /* 0x0948 */ struct FLAC__FrameFooter footer;
  /* 0x094a */ char __PADDING__[6];
}; /* size: 0x0950 */

struct sightpointtrace_t
{
  /* 0x0000 */ union vec3_t start;
  /* 0x000c */ union vec3_t end;
  /* 0x0018 */ int passEntityNum[2];
  /* 0x0020 */ int contentmask;
  /* 0x0024 */ int locational;
  /* 0x0028 */ unsigned char* priorityMap;
}; /* size: 0x002c */

union XAssetPoolEntry<EmblemSet>
{
  union
  {
    /* 0x0000 */ struct EmblemSet entry;
    /* 0x0000 */ union XAssetPoolEntry<EmblemSet>* next;
  }; /* size: 0x003c */
}; /* size: 0x003c */

class phys_simple_link_list<pulse_sum_constraint_solver::user_rigid_body_restore_info>
{
  /* 0x0000 */ class pulse_sum_constraint_solver::user_rigid_body_restore_info* m_first;
}; /* size: 0x0004 */

struct ltc_prng_descriptor
{
  /* 0x0000 */ char* name;
  /* 0x0004 */ int export_size;
  /* 0x0008 */ void* start /* function */;
  /* 0x000c */ void* add_entropy /* function */;
  /* 0x0010 */ void* ready /* function */;
  /* 0x0014 */ void* read /* function */;
  /* 0x0018 */ void* done /* function */;
  /* 0x001c */ void* pexport /* function */;
  /* 0x0020 */ void* pimport /* function */;
  /* 0x0024 */ void* test /* function */;
}; /* size: 0x0028 */

struct edge
{
  /* 0x0000 */ unsigned char* start;
  /* 0x0004 */ unsigned long size;
}; /* size: 0x0008 */

struct BBBulletInfo
{
  /* 0x0000 */ int hitpos[2];
  /* 0x0008 */ short hitcount;
  /* 0x000a */ char __PADDING__[2];
}; /* size: 0x000c */

union XAssetPoolEntry<KeyValuePairs>
{
  union
  {
    /* 0x0000 */ struct KeyValuePairs entry;
    /* 0x0000 */ union XAssetPoolEntry<KeyValuePairs>* next;
  }; /* size: 0x000c */
}; /* size: 0x000c */

struct dwUCDUpdateUserDetailsTask
{
  /* 0x0000 */ class bdUCDAccountInfo* ucdAccountInfo;
  /* 0x0004 */ const char* password;
  /* 0x0008 */ class bdBoolResult result;
}; /* size: 0x0010 */

struct D2D1_BRUSH_PROPERTIES
{
  /* 0x0000 */ float opacity;
  /* 0x0004 */ struct D2D_MATRIX_3X2_F transform;
}; /* size: 0x001c */

struct $_TypeDescriptor$_extraBytes_12
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[12];
}; /* size: 0x0014 */

struct ltc_math_descriptor
{
  /* 0x0000 */ char* name;
  /* 0x0004 */ int bits_per_digit;
  /* 0x0008 */ void* init /* function */;
  /* 0x000c */ void* init_copy /* function */;
  /* 0x0010 */ void* deinit /* function */;
  /* 0x0014 */ void* neg /* function */;
  /* 0x0018 */ void* copy /* function */;
  /* 0x001c */ void* set_int /* function */;
  /* 0x0020 */ void* get_int /* function */;
  /* 0x0024 */ void* get_digit /* function */;
  /* 0x0028 */ void* get_digit_count /* function */;
  /* 0x002c */ void* compare /* function */;
  /* 0x0030 */ void* compare_d /* function */;
  /* 0x0034 */ void* count_bits /* function */;
  /* 0x0038 */ void* count_lsb_bits /* function */;
  /* 0x003c */ void* twoexpt /* function */;
  /* 0x0040 */ void* read_radix /* function */;
  /* 0x0044 */ void* write_radix /* function */;
  /* 0x0048 */ void* unsigned_size /* function */;
  /* 0x004c */ void* unsigned_write /* function */;
  /* 0x0050 */ void* unsigned_read /* function */;
  /* 0x0054 */ void* add /* function */;
  /* 0x0058 */ void* addi /* function */;
  /* 0x005c */ void* sub /* function */;
  /* 0x0060 */ void* subi /* function */;
  /* 0x0064 */ void* mul /* function */;
  /* 0x0068 */ void* muli /* function */;
  /* 0x006c */ void* sqr /* function */;
  /* 0x0070 */ void* mpdiv /* function */;
  /* 0x0074 */ void* div_2 /* function */;
  /* 0x0078 */ void* modi /* function */;
  /* 0x007c */ void* gcd /* function */;
  /* 0x0080 */ void* lcm /* function */;
  /* 0x0084 */ void* mulmod /* function */;
  /* 0x0088 */ void* sqrmod /* function */;
  /* 0x008c */ void* invmod /* function */;
  /* 0x0090 */ void* montgomery_setup /* function */;
  /* 0x0094 */ void* montgomery_normalization /* function */;
  /* 0x0098 */ void* montgomery_reduce /* function */;
  /* 0x009c */ void* montgomery_deinit /* function */;
  /* 0x00a0 */ void* exptmod /* function */;
  /* 0x00a4 */ void* isprime /* function */;
  /* 0x00a8 */ void* ecc_ptmul /* function */;
  /* 0x00ac */ void* ecc_ptadd /* function */;
  /* 0x00b0 */ void* ecc_ptdbl /* function */;
  /* 0x00b4 */ void* ecc_map /* function */;
  /* 0x00b8 */ void* ecc_mul2add /* function */;
  /* 0x00bc */ void* rsa_keygen /* function */;
  /* 0x00c0 */ void* rsa_me /* function */;
}; /* size: 0x00c4 */

struct D2D1_STROKE_STYLE_PROPERTIES
{
  /* 0x0000 */ enum D2D1_CAP_STYLE startCap;
  /* 0x0004 */ enum D2D1_CAP_STYLE endCap;
  /* 0x0008 */ enum D2D1_CAP_STYLE dashCap;
  /* 0x000c */ enum D2D1_LINE_JOIN lineJoin;
  /* 0x0010 */ float miterLimit;
  /* 0x0014 */ enum D2D1_DASH_STYLE dashStyle;
  /* 0x0018 */ float dashOffset;
}; /* size: 0x001c */

class bdMarketplaceCurrency
{
  /* 0x0000 */ long Padding_1146;
  /* 0x0004 */ unsigned char m_currencyId;
  /* 0x0005 */ char Padding_1147[3];
  /* 0x0008 */ unsigned int m_value;
}; /* size: 0x000c */

class bdAuthCreateAccountPlainText
{
  /* 0x0000 */ unsigned __int64 m_licenseID;
}; /* size: 0x0008 */

struct CacheLbTaskData
{
  /* 0x0000 */ const struct LeaderboardDef* lbDef[10];
  /* 0x0028 */ int trackType[10];
  /* 0x0050 */ unsigned int lbReadIDs[10];
  /* 0x0078 */ int lbReadCount;
  /* 0x007c */ class LeaderboardRow<10>* lbRows[10];
  /* 0x00a4 */ class bdStatsInfoEx* statsInfoPtr[10];
}; /* size: 0x00cc */

struct client_fields_s
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int constId;
  /* 0x0008 */ int ofs;
  /* 0x000c */ int size[1];
  /* 0x0010 */ enum fieldtype_t type;
  /* 0x0014 */ unsigned int whichbits;
  /* 0x0018 */ void* setter /* function */;
  /* 0x001c */ void* getter /* function */;
}; /* size: 0x0020 */

struct IDirect3DVolumeTexture9
{
}; /* size: 0x0004 */

class axis_aligned_sweep_and_prune::axis_element
{
  /* 0x0000 */ class axis_aligned_sweep_and_prune::sap_node* m_node;
  /* 0x0004 */ int m_min_max;
  /* 0x0008 */ float m_val;
  /* 0x000c */ int m_ae_list_index;
  /* 0x0010 */ class axis_aligned_sweep_and_prune::axis_element* m_next;
}; /* size: 0x0014 */

struct clientstats_t
{
  /* 0x0000 */ unsigned __int64 clientXUID;
  /* 0x0008 */ unsigned int statscolumns[10];
  /* 0x0030 */ enum typeEnumLB type;
  /* 0x0034 */ long __PADDING__[1];
}; /* size: 0x0038 */

struct ScriptStringList
{
  /* 0x0000 */ int count;
  /* 0x0004 */ const char** strings;
}; /* size: 0x0008 */

struct XAssetList
{
  /* 0x0000 */ struct ScriptStringList stringList;
  /* 0x0008 */ int dependCount;
  /* 0x000c */ const char** depends;
  /* 0x0010 */ int assetCount;
  /* 0x0014 */ struct XAsset* assets;
}; /* size: 0x0018 */

struct DynEntityCollTree
{
  /* 0x0000 */ float dist;
  /* 0x0004 */ unsigned short axis;
  union
  {
    union
    {
      /* 0x0006 */ unsigned short parent;
      /* 0x0006 */ unsigned short nextFree;
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ u;
  /* 0x0008 */ unsigned short child[2];
}; /* size: 0x000c */

struct DynEntityCollSector
{
  /* 0x0000 */ struct DynEntityCollTree tree;
  /* 0x000c */ int contents;
  /* 0x0010 */ unsigned short entListHead;
  /* 0x0012 */ char __PADDING__[2];
}; /* size: 0x0014 */

struct DynEntityCollWorld
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ unsigned short freeHead;
  /* 0x001a */ char Padding_1148[2];
  /* 0x001c */ struct DynEntityCollSector sectors[1024];
}; /* size: 0x501c */

struct IDirect3DVolume9
{
}; /* size: 0x0004 */

struct DynEntityConstraintCreateParams
{
  /* 0x0000 */ char classname[64];
  /* 0x0040 */ char targetname[64];
  /* 0x0080 */ char target[64];
  /* 0x00c0 */ char target2[64];
  /* 0x0100 */ union vec3_t origin;
  /* 0x010c */ union vec3_t origin2;
  /* 0x0118 */ union vec3_t angles;
  /* 0x0124 */ int health;
  /* 0x0128 */ float minAngle;
  /* 0x012c */ float maxAngle;
  /* 0x0130 */ float damp;
  /* 0x0134 */ float distance;
  /* 0x0138 */ float scale;
  /* 0x013c */ float force_scale;
  /* 0x0140 */ float width;
  /* 0x0144 */ int spawnflags;
  /* 0x0148 */ float timeout;
  /* 0x014c */ char materialname[64];
}; /* size: 0x018c */

class PublicProfileInfo
{
  /* 0x0000 */ long Padding_1149[4];
  /* 0x0010 */ int m_memberVERSION;
  /* 0x0014 */ unsigned char m_memberddl[1025];
}; /* size: 0x0418 */

class bdProfileInfo
{
  /* 0x0000 */ long Padding_1150[2];
  /* 0x0008 */ unsigned __int64 m_entityID;
}; /* size: 0x0010 */

typedef struct _D3DRECT
{
  /* 0x0000 */ long x1;
  /* 0x0004 */ long y1;
  /* 0x0008 */ long x2;
  /* 0x000c */ long y2;
} D3DRECT, *PD3DRECT; /* size: 0x0010 */

union XAssetPoolEntry<FontIcon>
{
  union
  {
    /* 0x0000 */ struct FontIcon entry;
    /* 0x0000 */ union XAssetPoolEntry<FontIcon>* next;
  }; /* size: 0x0014 */
}; /* size: 0x0014 */

struct XAssetPool<FontIcon,1>
{
  /* 0x0000 */ union XAssetPoolEntry<FontIcon>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<FontIcon> entries[1];
}; /* size: 0x0018 */

struct XAssetPool<LocalizeEntry,1>
{
  /* 0x0000 */ union XAssetPoolEntry<LocalizeEntry>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<LocalizeEntry> entries[1];
}; /* size: 0x000c */

class bdAuthResetAccountPlainText
{
  /* 0x0000 */ unsigned __int64 m_userID;
}; /* size: 0x0008 */

struct D3D10_BUFFER_SRV
{
  union
  {
    /* 0x0000 */ unsigned int FirstElement;
    /* 0x0000 */ unsigned int ElementOffset;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0004 */ unsigned int NumElements;
    /* 0x0004 */ unsigned int ElementWidth;
  }; /* size: 0x0004 */
}; /* size: 0x0008 */

struct D3D10_TEX1D_SRV
{
  /* 0x0000 */ unsigned int MostDetailedMip;
  /* 0x0004 */ unsigned int MipLevels;
}; /* size: 0x0008 */

struct D3D10_TEX2D_SRV
{
  /* 0x0000 */ unsigned int MostDetailedMip;
  /* 0x0004 */ unsigned int MipLevels;
}; /* size: 0x0008 */

struct D3D10_TEX2D_ARRAY_SRV
{
  /* 0x0000 */ unsigned int MostDetailedMip;
  /* 0x0004 */ unsigned int MipLevels;
  /* 0x0008 */ unsigned int FirstArraySlice;
  /* 0x000c */ unsigned int ArraySize;
}; /* size: 0x0010 */

struct D3D10_TEX2DMS_SRV
{
  /* 0x0000 */ unsigned int UnusedField_NothingToDefine;
}; /* size: 0x0004 */

struct D3D10_TEX2DMS_ARRAY_SRV
{
  /* 0x0000 */ unsigned int FirstArraySlice;
  /* 0x0004 */ unsigned int ArraySize;
}; /* size: 0x0008 */

struct D3D10_TEX3D_SRV
{
  /* 0x0000 */ unsigned int MostDetailedMip;
  /* 0x0004 */ unsigned int MipLevels;
}; /* size: 0x0008 */

struct D3D10_TEXCUBE_SRV
{
  /* 0x0000 */ unsigned int MostDetailedMip;
  /* 0x0004 */ unsigned int MipLevels;
}; /* size: 0x0008 */

struct D3D10_SHADER_RESOURCE_VIEW_DESC
{
  /* 0x0000 */ enum DXGI_FORMAT Format;
  /* 0x0004 */ enum D3D_SRV_DIMENSION ViewDimension;
  union
  {
    /* 0x0008 */ struct D3D10_BUFFER_SRV Buffer;
    /* 0x0008 */ struct D3D10_TEX1D_SRV Texture1D;
    /* 0x0008 */ struct D3D10_TEX1D_ARRAY_SRV Texture1DArray;
    /* 0x0008 */ struct D3D10_TEX2D_SRV Texture2D;
    /* 0x0008 */ struct D3D10_TEX2D_ARRAY_SRV Texture2DArray;
    /* 0x0008 */ struct D3D10_TEX2DMS_SRV Texture2DMS;
    /* 0x0008 */ struct D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
    /* 0x0008 */ struct D3D10_TEX3D_SRV Texture3D;
    struct
    {
      /* 0x0008 */ struct D3D10_TEXCUBE_SRV TextureCube;
      /* 0x0010 */ long __PADDING__[2];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
}; /* size: 0x0018 */

class bdAuthResetAccountCypherText
{
  /* 0x0000 */ unsigned int m_magicNumber;
  /* 0x0004 */ char m_userKey[24];
}; /* size: 0x001c */

struct XZoneName
{
  /* 0x0000 */ char name[64];
  /* 0x0040 */ int flags;
  /* 0x0044 */ int fileSize;
  /* 0x0048 */ enum XZoneState state;
}; /* size: 0x004c */

struct XAssetPool<WeaponAttachment,1>
{
  /* 0x0000 */ union XAssetPoolEntry<WeaponAttachment>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<WeaponAttachment> entries[1];
}; /* size: 0x0120 */

class bdReceiveThread;

class bdUserGroupMembershipInfo
{
  /* 0x0000 */ long Padding_1151[2];
  /* 0x0008 */ unsigned __int64 m_userGroupID;
  /* 0x0010 */ char m_userGroupName[64];
  /* 0x0050 */ unsigned __int64 m_userID;
  /* 0x0058 */ short m_userGroupMemberType;
}; /* size: 0x0060 */

struct XAssetPool<Slug,1>
{
  /* 0x0000 */ union XAssetPoolEntry<Slug>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<Slug> entries[1];
}; /* size: 0x0010 */

class bdMarketplaceInventory
{
  /* 0x0000 */ long Padding_1152[2];
  /* 0x0008 */ unsigned __int64 m_playerId;
  /* 0x0010 */ unsigned int m_itemId;
  /* 0x0014 */ unsigned int m_itemQuantity;
  /* 0x0018 */ unsigned int m_itemXp;
  /* 0x001c */ unsigned int m_expireDateTime;
  /* 0x0020 */ unsigned short m_collisionField;
  /* 0x0022 */ char Padding_1153[2];
  /* 0x0024 */ unsigned int m_modDateTime;
}; /* size: 0x0028 */

class bdCore
{
  /* 0x0000 */ BOOL m_initialized;
}; /* size: 0x0001 */

class bdAuthMigrateAccountPlainText
{
  /* 0x0000 */ unsigned __int64 m_licenseID;
}; /* size: 0x0008 */

class bdEntityIDKeyArchiveMap
{
  /* 0x0000 */ long Padding_1154[2];
  /* 0x0008 */ unsigned __int64 m_entityID;
  /* 0x0010 */ unsigned short m_numMatchingKeys;
  /* 0x0012 */ char Padding_1155[2];
  /* 0x0014 */ class bdArray<bdKeyValuePair> m_keyValuePairs;
}; /* size: 0x0020 */

struct ltc_hash_descriptor
{
  /* 0x0000 */ char* name;
  /* 0x0004 */ unsigned char ID;
  /* 0x0005 */ char Padding_1156[3];
  /* 0x0008 */ unsigned long hashsize;
  /* 0x000c */ unsigned long blocksize;
  /* 0x0010 */ unsigned long OID[16];
  /* 0x0050 */ unsigned long OIDlen;
  /* 0x0054 */ void* init /* function */;
  /* 0x0058 */ void* process /* function */;
  /* 0x005c */ void* done /* function */;
  /* 0x0060 */ void* test /* function */;
  /* 0x0064 */ void* hmac_block /* function */;
}; /* size: 0x0068 */

struct DWRITE_HIT_TEST_METRICS
{
  /* 0x0000 */ unsigned int textPosition;
  /* 0x0004 */ unsigned int length;
  /* 0x0008 */ float left;
  /* 0x000c */ float top;
  /* 0x0010 */ float width;
  /* 0x0014 */ float height;
  /* 0x0018 */ unsigned int bidiLevel;
  /* 0x001c */ int isText;
  /* 0x0020 */ int isTrimmed;
}; /* size: 0x0024 */

struct md5_state
{
  /* 0x0000 */ unsigned __int64 length;
  /* 0x0008 */ unsigned long state[4];
  /* 0x0018 */ unsigned long curlen;
  /* 0x001c */ unsigned char buf[64];
  /* 0x005c */ long __PADDING__[1];
}; /* size: 0x0060 */

union Hash_state
{
  union
  {
    /* 0x0000 */ char dummy[1];
    /* 0x0000 */ struct sha256_state sha256;
    /* 0x0000 */ struct sha1_state sha1;
    /* 0x0000 */ struct md5_state md5;
    /* 0x0000 */ struct tiger_state tiger;
    /* 0x0000 */ void* data;
  }; /* size: 0x0070 */
}; /* size: 0x0070 */

class bdInitChunk
{
  /* 0x0000 */ long Padding_1157[4];
  /* 0x0010 */ unsigned int m_initTag;
  /* 0x0014 */ enum bdInitChunk::bdInitChunkFlags m_flags;
  /* 0x0018 */ class bdSecurityID m_id;
  /* 0x0020 */ class bdReference<bdByteBuffer> m_theirKey;
  /* 0x0024 */ int m_windowCredit;
}; /* size: 0x0028 */

struct std::_Pair_base<FxMarkTri *,FxMarkTri *>
{
  /* 0x0000 */ struct FxMarkTri* first;
  /* 0x0004 */ struct FxMarkTri* second;
}; /* size: 0x0008 */

struct GfxWorldVertex
{
  /* 0x0000 */ union vec3_t xyz;
  /* 0x000c */ float binormalSign;
  /* 0x0010 */ union GfxColor color;
  /* 0x0014 */ union vec2_t texCoord;
  /* 0x001c */ union PackedUnitVec normal;
  /* 0x0020 */ union PackedUnitVec tangent;
  /* 0x0024 */ union vec2_t lmapCoord;
}; /* size: 0x002c */

class bdHeartbeatChunk
{
  /* 0x0000 */ long Padding_1158[4];
  /* 0x0010 */ enum bdHeartbeatChunk::bdHeartbeatFlags m_flags;
}; /* size: 0x0014 */

struct png_unknown_chunk_t
{
  /* 0x0000 */ unsigned char name[5];
  /* 0x0005 */ char Padding_1159[3];
  /* 0x0008 */ unsigned char* data;
  /* 0x000c */ unsigned int size;
  /* 0x0010 */ unsigned char location;
  /* 0x0011 */ char __PADDING__[3];
}; /* size: 0x0014 */

struct MarkClipPlaneSet
{
  /* 0x0000 */ union vec4_t planes[11];
  /* 0x00b0 */ int planeCount;
}; /* size: 0x00b4 */

struct MarkInfoCollidedDObj
{
  /* 0x0000 */ struct DObj* dObj;
  /* 0x0004 */ struct cpose_t* pose;
  /* 0x0008 */ unsigned short entnum;
  /* 0x000a */ char __PADDING__[2];
}; /* size: 0x000c */

struct MarkInfoCollidedBModel
{
  /* 0x0000 */ struct GfxBrushModel* brushModel;
  /* 0x0004 */ struct cpose_t* pose;
  /* 0x0008 */ unsigned short entnum;
  /* 0x000a */ char __PADDING__[2];
}; /* size: 0x000c */

struct MarkInfo
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ union vec3_t localOrigin;
  /* 0x0018 */ union vec3_t localTexCoordAxis;
  /* 0x0024 */ union vec3_t axis[3];
  /* 0x0048 */ float radius;
  /* 0x004c */ struct Material* material;
  /* 0x0050 */ int maxTris;
  /* 0x0054 */ struct FxMarkTri* tris;
  /* 0x0058 */ int maxPoints;
  /* 0x005c */ struct FxMarkPoint* points;
  /* 0x0060 */ union vec3_t mins;
  /* 0x006c */ union vec3_t maxs;
  /* 0x0078 */ struct MarkClipPlaneSet clipPlanes;
  /* 0x012c */ union vec3_t viewOffset;
  /* 0x0138 */ BOOL markHasLightmap;
  /* 0x0139 */ BOOL markHasReflection;
  /* 0x013a */ char Padding_1160[2];
  /* 0x013c */ enum MarkFragmentsAgainstEnum markAgainst;
  /* 0x0140 */ unsigned short smodelsCollided[32];
  /* 0x0180 */ int smodelCollidedCount;
  /* 0x0184 */ struct MarkInfoCollidedDObj sceneDObjsCollided[32];
  /* 0x0304 */ int sceneDObjCollidedCount;
  /* 0x0308 */ struct MarkInfoCollidedBModel sceneBModelsCollided[32];
  /* 0x0488 */ int sceneBModelCollidedCount;
  /* 0x048c */ struct MarkInfoCollidedDObj viewmodelDObjsCollided[1];
  /* 0x0498 */ int viewmodelDObjsCollidedCount;
  /* 0x049c */ int usedTriCount;
  /* 0x04a0 */ int usedPointCount;
  /* 0x04a4 */ void* callback /* function */;
  /* 0x04a8 */ void* callbackContext;
}; /* size: 0x04ac */

struct ClientSnapshotData
{
  /* 0x0000 */ int snapshotSize[16];
  /* 0x0040 */ int compressedSize[16];
  /* 0x0080 */ int index;
}; /* size: 0x0084 */

struct snapshotEntityNumbers_t
{
  /* 0x0000 */ int numSnapshotEntities;
  /* 0x0004 */ int snapshotEntities[1024];
}; /* size: 0x1004 */

typedef struct _NV_DISPLAY_FEATURE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long enableScalerUnderscan : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long enableCEoverHDMI : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long reservedOEM : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long isDriverCtrlCEoverHDMI : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long reserved : 28; /* bit position: 4 */
  }; /* bitfield */
} NV_DISPLAY_FEATURE, *PNV_DISPLAY_FEATURE; /* size: 0x0004 */

struct Block
{
  /* 0x0000 */ int num;
  /* 0x0004 */ int size;
  /* 0x0008 */ int timeout;
}; /* size: 0x000c */

struct MigrationGlobals
{
  /* 0x0000 */ enum MigrationState state;
  /* 0x0004 */ struct MigrationClient clients[18];
  /* 0x016c */ struct Block window[32];
  /* 0x02ec */ enum ClientNum_t newHost;
  /* 0x02f0 */ int totalSize;
  /* 0x02f4 */ int block;
  /* 0x02f8 */ unsigned int windowIndex;
  /* 0x02fc */ BOOL active;
  /* 0x02fd */ char Padding_1161[3];
  /* 0x0300 */ int blocksPerFrame;
  /* 0x0304 */ int migrationCount;
  /* 0x0308 */ int migrationTime;
  /* 0x030c */ char reason[64];
  /* 0x034c */ int giveUpTime;
  /* 0x0350 */ int startTime;
}; /* size: 0x0354 */

union statValue_t
{
  union
  {
    /* 0x0000 */ int integer;
    /* 0x0000 */ unsigned int unsignedInt;
    /* 0x0000 */ __int64 integer64;
    /* 0x0000 */ unsigned __int64 unsignedInt64;
    /* 0x0000 */ float value;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct statAddValue_t
{
  /* 0x0000 */ union statValue_t originalValue;
  /* 0x0008 */ union statValue_t currentValue;
  /* 0x0010 */ enum ddlPrimitiveTypes_e varType;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

typedef struct _D3DVECTOR
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
  /* 0x0008 */ float z;
} D3DVECTOR, *PD3DVECTOR; /* size: 0x000c */

struct AimTweakables
{
  /* 0x0000 */ float slowdownRegionWidth;
  /* 0x0004 */ float slowdownRegionHeight;
  /* 0x0008 */ float autoAimRegionWidth;
  /* 0x000c */ float autoAimRegionHeight;
  /* 0x0010 */ float autoMeleeRegionWidth;
  /* 0x0014 */ float autoMeleeRegionHeight;
  /* 0x0018 */ float lockOnRegionWidth;
  /* 0x001c */ float lockOnRegionHeight;
}; /* size: 0x0020 */

struct AimScreenTarget
{
  /* 0x0000 */ int entIndex;
  /* 0x0004 */ union vec2_t clipMins;
  /* 0x000c */ union vec2_t clipMaxs;
  /* 0x0014 */ union vec3_t aimPos;
  /* 0x0020 */ union vec3_t velocity;
  /* 0x002c */ union vec3_t origin;
  /* 0x0038 */ float distSqr;
  /* 0x003c */ float crosshairDistSqr;
  /* 0x0040 */ BOOL aimPosValid;
  /* 0x0041 */ char __PADDING__[3];
}; /* size: 0x0044 */

struct AimAssistGlobals
{
  /* 0x0000 */ struct AimAssistPlayerState ps;
  /* 0x0068 */ enum LocalClientNum_t localClientNum;
  /* 0x006c */ BOOL initialized;
  /* 0x006d */ char Padding_1162[3];
  /* 0x0070 */ struct AimTweakables tweakables;
  /* 0x0090 */ union vec3_t viewOrigin;
  /* 0x009c */ union vec3_t viewAngles;
  /* 0x00a8 */ union vec3_t viewAxis[3];
  /* 0x00cc */ float fovTurnRateScale;
  /* 0x00d0 */ float fovScaleInv;
  /* 0x00d4 */ float adsLerp;
  /* 0x00d8 */ float pitchDelta;
  /* 0x00dc */ float yawDelta;
  /* 0x00e0 */ float screenWidth;
  /* 0x00e4 */ float screenHeight;
  /* 0x00e8 */ long Padding_1163[2];
  /* 0x00f0 */ union vec4_t screenMtx[4];
  /* 0x0130 */ union vec4_t invScreenMtx[4];
  /* 0x0170 */ struct AimScreenTarget screenTargets[64];
  /* 0x1270 */ int screenTargetCount;
  /* 0x1274 */ int autoAimTargetEnt;
  /* 0x1278 */ BOOL autoAimPressed;
  /* 0x1279 */ BOOL autoAimActive;
  /* 0x127a */ char Padding_1164[2];
  /* 0x127c */ float autoAimPitch;
  /* 0x1280 */ float autoAimPitchTarget;
  /* 0x1284 */ float autoAimYaw;
  /* 0x1288 */ float autoAimYawTarget;
  /* 0x128c */ BOOL autoAimJustGotTarget;
  /* 0x128d */ BOOL autoAimHasRealTarget;
  /* 0x128e */ BOOL aimSlowdownActive;
  /* 0x128f */ char Padding_1165;
  /* 0x1290 */ int aimSlowdownTargetEnt;
  /* 0x1294 */ int autoMeleeTargetEnt;
  /* 0x1298 */ enum eAutoMeleeState autoMeleeState;
  /* 0x129c */ float autoMeleePitch;
  /* 0x12a0 */ float autoMeleePitchTarget;
  /* 0x12a4 */ float autoMeleeYaw;
  /* 0x12a8 */ float autoMeleeYawTarget;
  /* 0x12ac */ int lockOnTargetEnt;
  /* 0x12b0 */ class bitarray<64> prev_button_bits;
  /* 0x12b8 */ BOOL overrideSnapWidthAndLerp;
  /* 0x12b9 */ char Padding_1166[3];
  /* 0x12bc */ float overrideAutoaimLerpValue;
  /* 0x12c0 */ float overrideAutoaimWidthValue;
  /* 0x12c4 */ float inputIdleTime;
  /* 0x12c8 */ long __PADDING__[2];
}; /* size: 0x12d0 */

struct NVAPI_FLIP_CHAIN_CALLBACK_PARAMS
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ void* pPrimaryFlipped /* function */;
  /* 0x0008 */ void* pPrimaryFlipChainModified /* function */;
  /* 0x000c */ void* pPrimaryAliasInvalid /* function */;
  /* 0x0010 */ void* pPrimaryAliasOperationDropped /* function */;
  /* 0x0014 */ void* pCursorVisibleUpdated /* function */;
  /* 0x0018 */ void* pCursorShapeUpdated /* function */;
}; /* size: 0x001c */

struct FxSpawnEffectCmd
{
  /* 0x0000 */ union vec4_t spawnAxis;
  /* 0x0010 */ union vec3_t spawnPos;
  /* 0x001c */ unsigned int newEffectUniqueHandle;
  /* 0x0020 */ const struct FxEffectDef* effectDef;
  /* 0x0024 */ int msecBegin;
  /* 0x0028 */ unsigned int ownerEffect;
  /* 0x002c */ int dobjHandle;
  /* 0x0030 */ int boneIndex;
  /* 0x0034 */ int markEntnum;
  /* 0x0038 */ short groundEntityNum;
  /* 0x003a */ unsigned char runnerSortOrder;
  /* 0x003b */ unsigned char localClientNum;
}; /* size: 0x003c */

struct game_hudelem_field_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int constId;
  /* 0x0008 */ int ofs;
  /* 0x000c */ int size;
  /* 0x0010 */ enum fieldtype_t type;
  /* 0x0014 */ int mask;
  /* 0x0018 */ int shift;
  /* 0x001c */ void* setter /* function */;
  /* 0x0020 */ void* getter /* function */;
}; /* size: 0x0024 */

class bdReference<bdSAckChunk>
{
  /* 0x0000 */ class bdSAckChunk* m_ptr;
}; /* size: 0x0004 */

typedef struct _NVVIOGAMMARAMP8
{
  /* 0x0000 */ unsigned short uRed[256];
  /* 0x0200 */ unsigned short uGreen[256];
  /* 0x0400 */ unsigned short uBlue[256];
} NVVIOGAMMARAMP8, *PNVVIOGAMMARAMP8; /* size: 0x0600 */

typedef struct _NVVIOGAMMARAMP10
{
  /* 0x0000 */ unsigned short uRed[1024];
  /* 0x0800 */ unsigned short uGreen[1024];
  /* 0x1000 */ unsigned short uBlue[1024];
} NVVIOGAMMARAMP10, *PNVVIOGAMMARAMP10; /* size: 0x1800 */

struct bot_threat_t
{
  /* 0x0000 */ struct gentity_t* ent;
  /* 0x0004 */ float dot;
  /* 0x0008 */ float distSq;
}; /* size: 0x000c */

struct SaveGame
{
  /* 0x0000 */ struct SaveHeader header;
  /* 0x0480 */ struct MemoryFile memFile;
  /* 0x84a8 */ long __PADDING__[22];
}; /* size: 0x8500 */

typedef struct _D3DBOX
{
  /* 0x0000 */ unsigned int Left;
  /* 0x0004 */ unsigned int Top;
  /* 0x0008 */ unsigned int Right;
  /* 0x000c */ unsigned int Bottom;
  /* 0x0010 */ unsigned int Front;
  /* 0x0014 */ unsigned int Back;
} D3DBOX, *PD3DBOX; /* size: 0x0018 */

typedef struct _NVVIOSTREAM
{
  /* 0x0000 */ unsigned long bitsPerComponent;
  /* 0x0004 */ enum _NVVIOCOMPONENTSAMPLING sampling;
  /* 0x0008 */ unsigned long expansionEnable;
  /* 0x000c */ unsigned long numLinks;
  /* 0x0010 */ struct
  {
    /* 0x0010 */ unsigned long jack;
    /* 0x0014 */ unsigned long channel;
  } /* size: 0x0008 */ links[2];
} NVVIOSTREAM, *PNVVIOSTREAM; /* size: 0x0020 */

typedef struct _NVVIOINPUTCONFIG
{
  /* 0x0000 */ unsigned long numRawCaptureImages;
  /* 0x0004 */ enum _NVVIOSIGNALFORMAT signalFormat;
  /* 0x0008 */ unsigned long numStreams;
  /* 0x000c */ struct _NVVIOSTREAM streams[4];
  /* 0x008c */ unsigned long bTestMode;
} NVVIOINPUTCONFIG, *PNVVIOINPUTCONFIG; /* size: 0x0090 */

typedef struct _NVVIOOUTPUTREGION
{
  /* 0x0000 */ unsigned long x;
  /* 0x0004 */ unsigned long y;
  /* 0x0008 */ unsigned long width;
  /* 0x000c */ unsigned long height;
} NVVIOOUTPUTREGION, *PNVVIOOUTPUTREGION; /* size: 0x0010 */

typedef struct _NVVIOCOLORCONVERSION
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ float colorMatrix[3][3];
  /* 0x0028 */ float colorOffset[3];
  /* 0x0034 */ float colorScale[3];
  /* 0x0040 */ unsigned long compositeSafe;
} NVVIOCOLORCONVERSION, *PNVVIOCOLORCONVERSION; /* size: 0x0044 */

typedef struct _NVVIOGAMMACORRECTION
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long vioGammaCorrectionType;
  union
  {
    union
    {
      /* 0x0008 */ struct _NVVIOGAMMARAMP8 gammaRamp8;
      /* 0x0008 */ struct _NVVIOGAMMARAMP10 gammaRamp10;
    }; /* size: 0x1800 */
  } /* size: 0x1800 */ gammaRamp;
  /* 0x1808 */ float fGammaValueR;
  /* 0x180c */ float fGammaValueG;
  /* 0x1810 */ float fGammaValueB;
} NVVIOGAMMACORRECTION, *PNVVIOGAMMACORRECTION; /* size: 0x1814 */

typedef struct _NVVIOSYNCDELAY
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long horizontalDelay;
  /* 0x0008 */ unsigned long verticalDelay;
} NVVIOSYNCDELAY, *PNVVIOSYNCDELAY; /* size: 0x000c */

typedef struct _NVVIOCOMPOSITERANGE
{
  /* 0x0000 */ unsigned long uRange;
  /* 0x0004 */ unsigned long uEnabled;
  /* 0x0008 */ unsigned long uMin;
  /* 0x000c */ unsigned long uMax;
} NVVIOCOMPOSITERANGE, *PNVVIOCOMPOSITERANGE; /* size: 0x0010 */

typedef struct _NVVIOOUTPUTCONFIG_V3
{
  /* 0x0000 */ enum _NVVIOSIGNALFORMAT signalFormat;
  /* 0x0004 */ enum _NVVIODATAFORMAT dataFormat;
  /* 0x0008 */ struct _NVVIOOUTPUTREGION outputRegion;
  /* 0x0018 */ enum _NVVIOOUTPUTAREA outputArea;
  /* 0x001c */ struct _NVVIOCOLORCONVERSION colorConversion;
  /* 0x0060 */ struct _NVVIOGAMMACORRECTION gammaCorrection;
  /* 0x1874 */ unsigned long syncEnable;
  /* 0x1878 */ enum _NVVIOSYNCSOURCE syncSource;
  /* 0x187c */ struct _NVVIOSYNCDELAY syncDelay;
  /* 0x1888 */ enum _NVVIOCOMPSYNCTYPE compositeSyncType;
  /* 0x188c */ unsigned long frameLockEnable;
  /* 0x1890 */ unsigned long psfSignalFormat;
  /* 0x1894 */ unsigned long enable422Filter;
  /* 0x1898 */ unsigned long compositeTerminate;
  /* 0x189c */ unsigned long enableDataIntegrityCheck;
  /* 0x18a0 */ unsigned long cscOverride;
  /* 0x18a4 */ unsigned long flipQueueLength;
  /* 0x18a8 */ unsigned long enableANCTimeCodeGeneration;
  /* 0x18ac */ unsigned long enableComposite;
  /* 0x18b0 */ unsigned long enableAlphaKeyComposite;
  /* 0x18b4 */ struct _NVVIOCOMPOSITERANGE compRange;
  /* 0x18c4 */ unsigned char reservedData[256];
  /* 0x19c4 */ unsigned long enableFullColorRange;
  /* 0x19c8 */ unsigned long enableRGBData;
  /* 0x19cc */ enum _NVVIOANCPARITYCOMPUTATION ancParityComputation;
  /* 0x19d0 */ unsigned long enableAudioBlanking;
} NVVIOOUTPUTCONFIG_V3, *PNVVIOOUTPUTCONFIG_V3; /* size: 0x19d4 */

struct reservedslot_t
{
  /* 0x0000 */ char pass[24];
  /* 0x0018 */ BOOL inUse;
}; /* size: 0x0019 */

class bdReliableReceiveWindow
{
  /* 0x0000 */ class bdSequenceNumber m_newest;
  /* 0x0004 */ class bdSequenceNumber m_lastCumulative;
  /* 0x0008 */ class bdSequenceNumber m_lastDispatched;
  /* 0x000c */ class bdReference<bdDataChunk> m_frame[128];
  /* 0x020c */ BOOL m_shouldAck;
  /* 0x020d */ char Padding_1167[3];
  /* 0x0210 */ int m_recvWindowCredit;
  /* 0x0214 */ int m_recvWindowUsedCredit;
  /* 0x0218 */ class bdReference<bdSAckChunk> m_sack;
}; /* size: 0x021c */

struct perfVal_t
{
  /* 0x0000 */ unsigned int min;
  /* 0x0004 */ unsigned int max;
  /* 0x0008 */ unsigned int avg;
  /* 0x000c */ unsigned int count;
  /* 0x0010 */ unsigned int total;
}; /* size: 0x0014 */

typedef struct _WSAPROTOCOL_INFOA
{
  /* 0x0000 */ unsigned long dwServiceFlags1;
  /* 0x0004 */ unsigned long dwServiceFlags2;
  /* 0x0008 */ unsigned long dwServiceFlags3;
  /* 0x000c */ unsigned long dwServiceFlags4;
  /* 0x0010 */ unsigned long dwProviderFlags;
  /* 0x0014 */ struct _GUID ProviderId;
  /* 0x0024 */ unsigned long dwCatalogEntryId;
  /* 0x0028 */ struct _WSAPROTOCOLCHAIN ProtocolChain;
  /* 0x0048 */ int iVersion;
  /* 0x004c */ int iAddressFamily;
  /* 0x0050 */ int iMaxSockAddr;
  /* 0x0054 */ int iMinSockAddr;
  /* 0x0058 */ int iSocketType;
  /* 0x005c */ int iProtocol;
  /* 0x0060 */ int iProtocolMaxOffset;
  /* 0x0064 */ int iNetworkByteOrder;
  /* 0x0068 */ int iSecurityScheme;
  /* 0x006c */ unsigned long dwMessageSize;
  /* 0x0070 */ unsigned long dwProviderReserved;
  /* 0x0074 */ char szProtocol[256];
} WSAPROTOCOL_INFOA, *PWSAPROTOCOL_INFOA; /* size: 0x0174 */

struct ConnectionLog
{
  /* 0x0000 */ unsigned __int64 magic;
  /* 0x0008 */ unsigned __int64 matchID;
  /* 0x0010 */ int numClients;
  /* 0x0014 */ int numSamples;
  /* 0x0018 */ unsigned int hostAddr;
  /* 0x001c */ long Padding_1168;
  /* 0x0020 */ struct ClientRecord clients[128];
  /* 0x0820 */ struct Sample samples[1024];
}; /* size: 0x3820 */

class bdPlatformStreamSocket
{
  union
  {
    /* 0x0000 */ unsigned __int64 m_totalBytesSent;
    /* 0x0000 */ unsigned __int64 m_totalBytesRecvd;
  }; /* size: 0x0008 */
}; /* size: 0x0001 */

typedef struct _CMSG_SIGNER_INFO
{
  /* 0x0000 */ unsigned long dwVersion;
  /* 0x0004 */ struct _CRYPTOAPI_BLOB Issuer;
  /* 0x000c */ struct _CRYPTOAPI_BLOB SerialNumber;
  /* 0x0014 */ struct _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  /* 0x0020 */ struct _CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
  /* 0x002c */ struct _CRYPTOAPI_BLOB EncryptedHash;
  /* 0x0034 */ struct _CRYPT_ATTRIBUTES AuthAttrs;
  /* 0x003c */ struct _CRYPT_ATTRIBUTES UnauthAttrs;
} CMSG_SIGNER_INFO, *PCMSG_SIGNER_INFO; /* size: 0x0044 */

typedef struct _CRYPT_ATTRIBUTE
{
  /* 0x0000 */ char* pszObjId;
  /* 0x0004 */ unsigned long cValue;
  /* 0x0008 */ struct _CRYPTOAPI_BLOB* rgValue;
} CRYPT_ATTRIBUTE, *PCRYPT_ATTRIBUTE; /* size: 0x000c */

struct BreakablePiece
{
  /* 0x0000 */ const struct XModel* model;
  /* 0x0004 */ int physObjId;
  /* 0x0008 */ unsigned short lightingHandle;
  /* 0x000a */ BOOL active;
  /* 0x000b */ char __PADDING__[1];
}; /* size: 0x000c */

typedef struct _CERT_EXTENSION
{
  /* 0x0000 */ char* pszObjId;
  /* 0x0004 */ int fCritical;
  /* 0x0008 */ struct _CRYPTOAPI_BLOB Value;
} CERT_EXTENSION, *PCERT_EXTENSION; /* size: 0x0010 */

typedef struct _CTL_CONTEXT
{
  /* 0x0000 */ unsigned long dwMsgAndCertEncodingType;
  /* 0x0004 */ unsigned char* pbCtlEncoded;
  /* 0x0008 */ unsigned long cbCtlEncoded;
  /* 0x000c */ struct _CTL_INFO* pCtlInfo;
  /* 0x0010 */ void* hCertStore;
  /* 0x0014 */ void* hCryptMsg;
  /* 0x0018 */ unsigned char* pbCtlContent;
  /* 0x001c */ unsigned long cbCtlContent;
} CTL_CONTEXT, *PCTL_CONTEXT; /* size: 0x0020 */

struct D3D10_BOX
{
  /* 0x0000 */ unsigned int left;
  /* 0x0004 */ unsigned int top;
  /* 0x0008 */ unsigned int front;
  /* 0x000c */ unsigned int right;
  /* 0x0010 */ unsigned int bottom;
  /* 0x0014 */ unsigned int back;
}; /* size: 0x0018 */

struct FxEditorEffectDef
{
  /* 0x0000 */ char name[64];
  /* 0x0040 */ int elemCount;
  /* 0x0044 */ unsigned short flags;
  /* 0x0046 */ unsigned char editorFlags;
  /* 0x0047 */ unsigned char edPriority;
  /* 0x0048 */ union vec3_t boundMin;
  /* 0x0054 */ union vec3_t boundMax;
  /* 0x0060 */ union vec3_t boundCenter;
  /* 0x006c */ union vec3_t boundSize;
  /* 0x0078 */ float occlusionQueryDepthBias;
  /* 0x007c */ int occlusionQueryFadeIn;
  /* 0x0080 */ int occlusionQueryFadeOut;
  /* 0x0084 */ struct FxFloatRange occlusionQueryScaleRange;
  /* 0x008c */ struct FxEditorElemDef elems[32];
}; /* size: 0x1308c */

struct D2D1_BITMAP_PROPERTIES
{
  /* 0x0000 */ struct D2D1_PIXEL_FORMAT pixelFormat;
  /* 0x0008 */ float dpiX;
  /* 0x000c */ float dpiY;
}; /* size: 0x0010 */

typedef struct _CERT_CONTEXT
{
  /* 0x0000 */ unsigned long dwCertEncodingType;
  /* 0x0004 */ unsigned char* pbCertEncoded;
  /* 0x0008 */ unsigned long cbCertEncoded;
  /* 0x000c */ struct _CERT_INFO* pCertInfo;
  /* 0x0010 */ void* hCertStore;
} CERT_CONTEXT, *PCERT_CONTEXT; /* size: 0x0014 */

typedef struct _WINTRUST_DATA
{
  /* 0x0000 */ unsigned long cbStruct;
  /* 0x0004 */ void* pPolicyCallbackData;
  /* 0x0008 */ void* pSIPClientData;
  /* 0x000c */ unsigned long dwUIChoice;
  /* 0x0010 */ unsigned long fdwRevocationChecks;
  /* 0x0014 */ unsigned long dwUnionChoice;
  union
  {
    /* 0x0018 */ struct WINTRUST_FILE_INFO_* pFile;
    /* 0x0018 */ struct WINTRUST_CATALOG_INFO_* pCatalog;
    /* 0x0018 */ struct WINTRUST_BLOB_INFO_* pBlob;
    /* 0x0018 */ struct WINTRUST_SGNR_INFO_* pSgnr;
    /* 0x0018 */ struct WINTRUST_CERT_INFO_* pCert;
  }; /* size: 0x0004 */
  /* 0x001c */ unsigned long dwStateAction;
  /* 0x0020 */ void* hWVTStateData;
  /* 0x0024 */ wchar_t* pwszURLReference;
  /* 0x0028 */ unsigned long dwProvFlags;
  /* 0x002c */ unsigned long dwUIContext;
} WINTRUST_DATA, *PWINTRUST_DATA; /* size: 0x0030 */

struct WINTRUST_FILE_INFO_
{
  /* 0x0000 */ unsigned long cbStruct;
  /* 0x0004 */ const wchar_t* pcwszFilePath;
  /* 0x0008 */ void* hFile;
  /* 0x000c */ struct _GUID* pgKnownSubject;
}; /* size: 0x0010 */

class bdSAckChunk::bdGapAckBlock
{
  /* 0x0000 */ unsigned int m_start;
  /* 0x0004 */ unsigned int m_end;
}; /* size: 0x0008 */

class bdLinkedList<bdSAckChunk::bdGapAckBlock>::Node
{
  /* 0x0000 */ class bdSAckChunk::bdGapAckBlock m_data;
  /* 0x0008 */ class bdLinkedList<bdSAckChunk::bdGapAckBlock>::Node* m_next;
  /* 0x000c */ class bdLinkedList<bdSAckChunk::bdGapAckBlock>::Node* m_prev;
}; /* size: 0x0010 */

struct WINTRUST_CATALOG_INFO_
{
  /* 0x0000 */ unsigned long cbStruct;
  /* 0x0004 */ unsigned long dwCatalogVersion;
  /* 0x0008 */ const wchar_t* pcwszCatalogFilePath;
  /* 0x000c */ const wchar_t* pcwszMemberTag;
  /* 0x0010 */ const wchar_t* pcwszMemberFilePath;
  /* 0x0014 */ void* hMemberFile;
  /* 0x0018 */ unsigned char* pbCalculatedFileHash;
  /* 0x001c */ unsigned long cbCalculatedFileHash;
  /* 0x0020 */ const struct _CTL_CONTEXT* pcCatalogContext;
}; /* size: 0x0024 */

struct IDWriteFontFileLoader
{
}; /* size: 0x0004 */

struct WINTRUST_CERT_INFO_
{
  /* 0x0000 */ unsigned long cbStruct;
  /* 0x0004 */ const wchar_t* pcwszDisplayName;
  /* 0x0008 */ struct _CERT_CONTEXT* psCertContext;
  /* 0x000c */ unsigned long chStores;
  /* 0x0010 */ void** pahStores;
  /* 0x0014 */ unsigned long dwFlags;
  /* 0x0018 */ struct _FILETIME* psftVerifyAsOf;
}; /* size: 0x001c */

struct FxActiveMarkSurf
{
  /* 0x0000 */ struct Material* material;
  /* 0x0004 */ struct GfxMarkContext context;
  /* 0x000a */ char Padding_1169[2];
  /* 0x000c */ int indexCount;
  /* 0x0010 */ unsigned short* indices;
  /* 0x0014 */ unsigned int visLightsMask;
}; /* size: 0x0018 */

struct tlFileBuf
{
  /* 0x0000 */ unsigned char* Buf;
  /* 0x0004 */ unsigned int Size;
  /* 0x0008 */ unsigned int UserData;
}; /* size: 0x000c */

class bdReference<bdInitChunk>
{
  /* 0x0000 */ class bdInitChunk* m_ptr;
}; /* size: 0x0004 */

struct ID2D1StrokeStyle
{
}; /* size: 0x0004 */

struct jqWorker
{
  /* 0x0000 */ long Padding_1170[4];
  /* 0x0010 */ struct jqWorker* ThisPtr;
  /* 0x0014 */ int Processor;
  /* 0x0018 */ int WorkerID;
  /* 0x001c */ int NumQueues;
  /* 0x0020 */ struct jqQueue WorkerSpecific;
  /* 0x0058 */ struct jqQueue* Queues[8];
  /* 0x0078 */ unsigned __int64 WorkTime;
}; /* size: 0x0080 */

struct FxTrailSegmentDrawState
{
  /* 0x0000 */ struct FxTrailDef* trailDef;
  /* 0x0004 */ union vec3_t posWorld;
  /* 0x0010 */ union vec3_t basis[2];
  /* 0x0028 */ float rotation;
  /* 0x002c */ float size[2];
  /* 0x0034 */ float uCoord;
  /* 0x0038 */ unsigned char color[4];
}; /* size: 0x003c */

typedef struct _jqWorker
{
  /* 0x0000 */ enum jqWorkerType Type;
  /* 0x0004 */ void* Thread;
  /* 0x0008 */ unsigned long ThreadId;
  /* 0x000c */ BOOL Idle;
  /* 0x000d */ char __PADDING__[3];
} jqWorker, *PjqWorker; /* size: 0x0010 */

struct ID3D10Counter
{
}; /* size: 0x0004 */

struct huff_t
{
  /* 0x0000 */ int blocNode;
  /* 0x0004 */ int blocPtrs;
  /* 0x0008 */ struct nodetype* tree;
  /* 0x000c */ struct nodetype* loc[257];
  /* 0x0410 */ struct nodetype** freelist;
  /* 0x0414 */ struct nodetype nodeList[768];
  /* 0x4014 */ struct nodetype* nodePtrs[768];
}; /* size: 0x4c14 */

struct huffman_t
{
  /* 0x0000 */ struct huff_t compressDecompress;
}; /* size: 0x4c14 */

struct PathItem
{
  /* 0x0000 */ char name[64];
  /* 0x0040 */ struct PathItem* parent;
  /* 0x0044 */ struct PathItem* next;
}; /* size: 0x0048 */

struct areaParms_t
{
  /* 0x0000 */ const union vec3_t* mins;
  /* 0x0004 */ const union vec3_t* maxs;
  /* 0x0008 */ int* list;
  /* 0x000c */ int count;
  /* 0x0010 */ int maxcount;
  /* 0x0014 */ int contentmask;
}; /* size: 0x0018 */

struct ClumpFile
{
  /* 0x0000 */ unsigned int name;
  /* 0x0004 */ unsigned int fileSectorOffset;
  /* 0x0008 */ unsigned __int64 fileSize;
}; /* size: 0x0010 */

typedef struct _D3DMATRIX
{
  union
  {
    struct
    {
      /* 0x0000 */ float _11;
      /* 0x0004 */ float _12;
      /* 0x0008 */ float _13;
      /* 0x000c */ float _14;
      /* 0x0010 */ float _21;
      /* 0x0014 */ float _22;
      /* 0x0018 */ float _23;
      /* 0x001c */ float _24;
      /* 0x0020 */ float _31;
      /* 0x0024 */ float _32;
      /* 0x0028 */ float _33;
      /* 0x002c */ float _34;
      /* 0x0030 */ float _41;
      /* 0x0034 */ float _42;
      /* 0x0038 */ float _43;
      /* 0x003c */ float _44;
    }; /* size: 0x0040 */
    /* 0x0000 */ float m[4][4];
  }; /* size: 0x0040 */
} D3DMATRIX, *PD3DMATRIX; /* size: 0x0040 */

struct EffectElementDraw
{
  /* 0x0000 */ struct FxEffect* effect;
  /* 0x0004 */ struct r_double_index_t* firstIndex;
  /* 0x0008 */ unsigned short firstParticleCloudIndex;
  /* 0x000a */ unsigned short firstVertex;
  /* 0x000c */ unsigned short numParticleCloudAlloc;
  /* 0x000e */ unsigned short numCodeMeshAlloc;
}; /* size: 0x0010 */

struct winding_t
{
  /* 0x0000 */ int numpoints;
  /* 0x0004 */ union vec3_t p[4];
}; /* size: 0x0034 */

struct stream_fh
{
  /* 0x0000 */ char name[256];
  /* 0x0100 */ void* h;
  /* 0x0104 */ BOOL inUse;
  /* 0x0105 */ BOOL shouldOpen;
  /* 0x0106 */ BOOL shouldClose;
  /* 0x0107 */ BOOL error;
  /* 0x0108 */ int flags;
  /* 0x010c */ int extAsInt;
  /* 0x0110 */ unsigned int readOffset;
  /* 0x0114 */ unsigned int easyOffset;
  /* 0x0118 */ __int64 fileSize;
}; /* size: 0x0120 */

class bdLinkedList<bdUnicastConnection::bdControlChunkStore>
{
  /* 0x0000 */ class bdLinkedList<bdUnicastConnection::bdControlChunkStore>::Node* m_head;
  /* 0x0004 */ class bdLinkedList<bdUnicastConnection::bdControlChunkStore>::Node* m_tail;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

struct png_color_struct
{
  /* 0x0000 */ unsigned char red;
  /* 0x0001 */ unsigned char green;
  /* 0x0002 */ unsigned char blue;
}; /* size: 0x0003 */

struct PathRoot
{
  /* 0x0000 */ struct PathItem* rootItem;
  /* 0x0004 */ struct PathItem* leafs;
  /* 0x0008 */ struct PathItem* branches;
}; /* size: 0x000c */

struct GamePadCheat
{
  /* 0x0000 */ enum GamePadButton codeButtons[10];
  /* 0x0028 */ enum GamePadButton holdButtons[2];
  /* 0x0030 */ void* unlockFunc /* function */;
  /* 0x0034 */ const char* unlockCmd;
  /* 0x0038 */ const char* menu;
  /* 0x003c */ const char* sound;
  /* 0x0040 */ int buttonTimer;
  /* 0x0044 */ int codeIndex;
}; /* size: 0x0048 */

struct mapping_data_t
{
  /* 0x0000 */ int guid;
  /* 0x0004 */ enum GUIDType type;
  /* 0x0008 */ void* data;
}; /* size: 0x000c */

struct D3D10_SAMPLER_DESC
{
  /* 0x0000 */ enum D3D10_FILTER Filter;
  /* 0x0004 */ enum D3D10_TEXTURE_ADDRESS_MODE AddressU;
  /* 0x0008 */ enum D3D10_TEXTURE_ADDRESS_MODE AddressV;
  /* 0x000c */ enum D3D10_TEXTURE_ADDRESS_MODE AddressW;
  /* 0x0010 */ float MipLODBias;
  /* 0x0014 */ unsigned int MaxAnisotropy;
  /* 0x0018 */ enum D3D10_COMPARISON_FUNC ComparisonFunc;
  /* 0x001c */ float BorderColor[4];
  /* 0x002c */ float MinLOD;
  /* 0x0030 */ float MaxLOD;
}; /* size: 0x0034 */

struct PacketQueue
{
  /* 0x0000 */ struct PacketQueueBlock* head;
  /* 0x0004 */ struct PacketQueueBlock* tail;
  /* 0x0008 */ int queuedPackets;
  /* 0x000c */ int queuedBytes;
  /* 0x0010 */ BOOL packetLost;
  /* 0x0011 */ BOOL packetReordered;
  /* 0x0012 */ char Padding_1171[2];
  /* 0x0014 */ int bucketBits;
  /* 0x0018 */ int bucketUpdateMS;
  /* 0x001c */ const char* name;
  /* 0x0020 */ struct PacketQueue* nextQueue;
  /* 0x0024 */ BOOL emulation;
  /* 0x0025 */ char Padding_1172[3];
  /* 0x0028 */ int queuedBytesLimit;
  /* 0x002c */ int queuedPacketsLimit;
  /* 0x0030 */ int latencyMS;
  /* 0x0034 */ int latencyJitterMS;
  /* 0x0038 */ int packetLossPercent;
  /* 0x003c */ int packetLossRepeatPercent;
  /* 0x0040 */ int packetReorderPercent;
  /* 0x0044 */ int packetReorderRepeatPercent;
  /* 0x0048 */ int packetDuplicationPercent;
  /* 0x004c */ int bucketBitsPerMS;
  /* 0x0050 */ int bucketBitsLimit;
}; /* size: 0x0054 */

struct tinfl_decompressor_tag
{
  /* 0x0000 */ unsigned int m_state;
  /* 0x0004 */ unsigned int m_num_bits;
  /* 0x0008 */ unsigned int m_zhdr0;
  /* 0x000c */ unsigned int m_zhdr1;
  /* 0x0010 */ unsigned int m_z_adler32;
  /* 0x0014 */ unsigned int m_final;
  /* 0x0018 */ unsigned int m_type;
  /* 0x001c */ unsigned int m_check_adler32;
  /* 0x0020 */ unsigned int m_dist;
  /* 0x0024 */ unsigned int m_counter;
  /* 0x0028 */ unsigned int m_num_extra;
  /* 0x002c */ unsigned int m_table_sizes[3];
  /* 0x0038 */ unsigned int m_bit_buf;
  /* 0x003c */ unsigned int m_dist_from_out_buf_start;
  /* 0x0040 */ struct tinfl_huff_table m_tables[3];
  /* 0x2920 */ unsigned char m_raw_header[4];
  /* 0x2924 */ unsigned char m_len_codes[457];
  /* 0x2aed */ char __PADDING__[3];
}; /* size: 0x2af0 */

struct netFieldOrderInfo_t
{
  /* 0x0000 */ int entState[79];
  /* 0x013c */ int arcEnt[10];
  /* 0x0164 */ int arcEntState[2];
  /* 0x016c */ int matchState[29];
  /* 0x01e0 */ int clientState[67];
  /* 0x02ec */ int playerState[223];
  /* 0x0668 */ int actorState[98];
  /* 0x07f0 */ int objective[15];
  /* 0x082c */ int hudElem[46];
}; /* size: 0x08e4 */

typedef union _lightLogicParam_t
{
  union
  {
    /* 0x0000 */ int i;
    /* 0x0000 */ float f;
    /* 0x0000 */ unsigned int s;
  }; /* size: 0x0004 */
} lightLogicParam_t, *PlightLogicParam_t; /* size: 0x0004 */

struct lightLogicParams_t
{
  /* 0x0000 */ union _lightLogicParam_t p[16];
  /* 0x0040 */ union vec4_t v[2];
}; /* size: 0x0060 */

typedef struct _lightParams_t
{
  /* 0x0000 */ BOOL bPaused;
  /* 0x0001 */ char Padding_1173[3];
  /* 0x0004 */ union vec4_t color;
  /* 0x0014 */ float intensity;
  /* 0x0018 */ float radius;
  /* 0x001c */ float fovInner;
  /* 0x0020 */ float fovOuter;
  /* 0x0024 */ void* pLightLogic /* function */;
  /* 0x0028 */ struct lightLogicParams_t params;
  /* 0x0088 */ short state;
  /* 0x008a */ short nextState;
  /* 0x008c */ struct _mixerLight_t* pMixer;
} lightParams_t, *PlightParams_t; /* size: 0x0090 */

struct msg_patch_t
{
  /* 0x0000 */ int cursize;
  /* 0x0004 */ int bit;
  /* 0x0008 */ int patchBits;
}; /* size: 0x000c */

typedef struct _lightModel_t
{
  /* 0x0000 */ short state;
  /* 0x0002 */ short onModelIndex;
  /* 0x0004 */ short offModelIndex;
  /* 0x0006 */ char Padding_1174[2];
  /* 0x0008 */ unsigned int tagName;
  /* 0x000c */ const struct FxEffectDef* fxDef;
  /* 0x0010 */ struct centity_t* pParentEnt;
  /* 0x0014 */ struct centity_t* modelEntity[1];
  /* 0x0018 */ int fxId[1];
} lightModel_t, *PlightModel_t; /* size: 0x001c */

typedef struct _mixerLight_t
{
  /* 0x0000 */ struct centity_t* pLight[1];
  /* 0x0004 */ struct _lightParams_t lightChannel[2];
  /* 0x0124 */ float ltrRampTime;
  /* 0x0128 */ float rtlRampTime;
  /* 0x012c */ BOOL bActive;
  /* 0x012d */ char Padding_1175[3];
  /* 0x0130 */ int startCrossfadeTime;
  /* 0x0134 */ unsigned char mixPos;
  /* 0x0135 */ char Padding_1176[3];
  /* 0x0138 */ float mixVal;
  /* 0x013c */ void* pMixerLogic /* function */;
  /* 0x0140 */ float rotateTime;
  /* 0x0144 */ int nextRotateEndTime;
  /* 0x0148 */ union _lightLogicParam_t p[4];
  /* 0x0158 */ short state;
  /* 0x015a */ char Padding_1177[2];
  /* 0x015c */ struct _lightModel_t spinnerModels;
  /* 0x0178 */ struct _lightModel_t lightModels;
  /* 0x0194 */ int exploderID;
  /* 0x0198 */ unsigned long bHasExploder : 1; /* bit position: 0 */
} mixerLight_t, *PmixerLight_t; /* size: 0x019c */

struct meminfo_t
{
  /* 0x0000 */ int total[2];
  /* 0x0008 */ int nonSwapTotal;
  /* 0x000c */ int nonSwapMinSpecTotal;
  /* 0x0010 */ int typeTotal[2][58];
}; /* size: 0x01e0 */

struct FxGenerateVertsCmd
{
  /* 0x0000 */ struct FxSystem* system;
  /* 0x0004 */ struct FxBeamInfo* beamInfo;
  /* 0x0008 */ struct FxPostLightInfo* postLightInfo;
  /* 0x000c */ struct FxSpriteInfo* spriteInfo;
  /* 0x0010 */ enum LocalClientNum_t localClientNum;
  /* 0x0014 */ union vec3_t vieworg;
  /* 0x0020 */ union vec3_t viewaxis[3];
  /* 0x0044 */ unsigned char genVertsCameraType;
  /* 0x0045 */ char Padding_1178[3];
  /* 0x0048 */ int drawTime;
  /* 0x004c */ struct FxSmpDrawBuffer* smpDrawBuffer;
}; /* size: 0x0050 */

struct TempMemInfo
{
  /* 0x0000 */ int permanent;
  /* 0x0004 */ int high;
  /* 0x0008 */ int highExtra;
  /* 0x000c */ int hunkSize;
  /* 0x0010 */ int low;
  /* 0x0014 */ struct mem_track_t data;
}; /* size: 0x00ac */

class bitarray<58>
{
  /* 0x0000 */ int array[2];
}; /* size: 0x0008 */

struct SpeexSBMode
{
  /* 0x0000 */ const struct SpeexMode* nb_mode;
  /* 0x0004 */ int frameSize;
  /* 0x0008 */ int subframeSize;
  /* 0x000c */ int lpcSize;
  /* 0x0010 */ int bufSize;
  /* 0x0014 */ float gamma1;
  /* 0x0018 */ float gamma2;
  /* 0x001c */ float lag_factor;
  /* 0x0020 */ float lpc_floor;
  /* 0x0024 */ float folding_gain;
  /* 0x0028 */ const struct SpeexSubmode* submodes[8];
  /* 0x0048 */ int defaultSubmode;
  /* 0x004c */ int low_quality_map[11];
  /* 0x0078 */ int quality_map[11];
  /* 0x00a4 */ const float* vbr_thresh[11];
  /* 0x00a8 */ int nb_modes;
}; /* size: 0x00ac */

struct IWICBitmap
{
}; /* size: 0x0004 */

struct zombieBoxWeapon_t
{
  /* 0x0000 */ unsigned short weaponNameIndex;
  /* 0x0002 */ char Padding_1179[2];
  /* 0x0004 */ const struct WeaponVariantDef* pWeapDef;
  /* 0x0008 */ BOOL bIsDualWield;
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

struct gdt_remote_cmd_handler
{
  /* 0x0000 */ const char* assetType;
  /* 0x0004 */ void* action /* function */;
  /* 0x0008 */ BOOL printSuccessMessage;
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

struct GfxSkinnedXModelSurfs
{
  /* 0x0000 */ void* firstSurf;
}; /* size: 0x0004 */

struct GfxSceneModel
{
  /* 0x0000 */ union XModelDrawInfo info;
  /* 0x0004 */ const struct XModel* model;
  /* 0x0008 */ const struct DObj* obj;
  /* 0x000c */ const struct cpose_t* pose;
  /* 0x0010 */ struct GfxScaledPlacement placement;
  /* 0x0030 */ float lightingOriginToleranceSq;
  /* 0x0034 */ float invScaleSq;
  /* 0x0038 */ float radius;
  /* 0x003c */ union vec3_t lightingOrigin;
  /* 0x0048 */ unsigned short* cachedLightingHandle;
  /* 0x004c */ unsigned short gfxEntIndex;
  /* 0x004e */ unsigned short entnum;
  /* 0x0050 */ unsigned char modelShaderConstantSetIndex;
  /* 0x0051 */ unsigned char primaryLightIndex;
  /* 0x0052 */ unsigned char reflectionProbeIndex;
  /* 0x0053 */ unsigned char useHeroLighting;
  /* 0x0054 */ unsigned char noLodCullOut;
  /* 0x0055 */ char __PADDING__[3];
}; /* size: 0x0058 */

struct GfxSceneDpvs
{
  /* 0x0000 */ enum LocalClientNum_t localClientNum;
  /* 0x0004 */ unsigned char* entVisData[7];
  /* 0x0020 */ unsigned short* sceneXModelIndex;
  /* 0x0024 */ unsigned short* sceneDObjIndex;
  /* 0x0028 */ union GfxEntCellRefInfo* entInfo[4];
}; /* size: 0x0038 */

typedef struct _D3DLOCKED_RECT
{
  /* 0x0000 */ int Pitch;
  /* 0x0004 */ void* pBits;
} D3DLOCKED_RECT, *PD3DLOCKED_RECT; /* size: 0x0008 */

struct GfxSceneEntityCull
{
  /* 0x0000 */ volatile unsigned int state;
  /* 0x0004 */ union vec3_t mins;
  /* 0x0010 */ union vec3_t maxs;
  /* 0x001c */ char lods[32];
  /* 0x003c */ struct GfxSkinnedXModelSurfs skinnedSurfs;
}; /* size: 0x0040 */

struct GfxSceneEntity
{
  /* 0x0000 */ union vec3_t lightingOrigin;
  /* 0x000c */ struct GfxScaledPlacement placement;
  /* 0x002c */ float radius;
  /* 0x0030 */ struct GfxSceneEntityCull cull;
  /* 0x0070 */ const struct DObj* obj;
  /* 0x0074 */ union GfxSceneEntityInfo info;
  /* 0x0078 */ float lightingOriginToleranceSq;
  /* 0x007c */ float invScaleSq;
  /* 0x0080 */ unsigned short gfxEntIndex;
  /* 0x0082 */ unsigned short gfxEntIndex2;
  /* 0x0084 */ unsigned short entnum;
  /* 0x0086 */ unsigned char primaryLightIndex;
  /* 0x0087 */ unsigned char reflectionProbeIndex;
  /* 0x0088 */ unsigned char altXModelIndex;
  /* 0x0089 */ unsigned char entShaderConstantSetIndex;
  /* 0x008a */ unsigned char useHeroLighting;
  /* 0x008b */ char __PADDING__[1];
}; /* size: 0x008c */

struct GfxSceneGlassBrush
{
  /* 0x0000 */ struct GfxPlacement placement;
  /* 0x001c */ const struct GfxBrushModel* bmodel;
  /* 0x0020 */ struct Material* altStreamingMaterial;
  /* 0x0024 */ struct BModelDrawInfo info;
  /* 0x0026 */ unsigned char reflectionProbeIndex;
  /* 0x0027 */ char __PADDING__[1];
}; /* size: 0x0028 */

struct SceneModelBatchCmd
{
  /* 0x0000 */ int nModels;
  /* 0x0004 */ struct GfxSceneModel* models[8];
}; /* size: 0x0024 */

struct GfxScene
{
  /* 0x0000 */ union GfxDrawSurf bspDrawSurfs[4608];
  /* 0x9000 */ union GfxDrawSurf smodelDrawSurfsLight[4608];
  /* 0x12000 */ union GfxDrawSurf entDrawSurfsLight[4608];
  /* 0x1b000 */ union GfxDrawSurf smodelDrawSurfsLightMapOpaque[3584];
  /* 0x22000 */ union GfxDrawSurf bspDrawSurfsLightMap[3584];
  /* 0x29000 */ union GfxDrawSurf entDrawSurfsLightMapOpaque[3584];
  /* 0x30000 */ union GfxDrawSurf depthHackCameraDrawSurfs[512];
  /* 0x31000 */ union GfxDrawSurf codemeshDrawSurfsLight[1024];
  /* 0x33000 */ union GfxDrawSurf entDrawSurfsSonar[512];
  /* 0x34000 */ union GfxDrawSurf bspDrawSurfsLitTrans[512];
  /* 0x35000 */ union GfxDrawSurf smodelDrawSurfsLitTrans[512];
  /* 0x36000 */ union GfxDrawSurf entDrawSurfsLitTrans[1024];
  /* 0x38000 */ union GfxDrawSurf smodelDrawSurfsLitQuasiOpaque[2048];
  /* 0x3c000 */ union GfxDrawSurf entDrawSurfsLitQuasiOpaque[512];
  /* 0x3d000 */ union GfxDrawSurf bspDrawSurfsEmissiveOpaque[1024];
  /* 0x3f000 */ union GfxDrawSurf smodelDrawSurfsEmissiveOpaque[1024];
  /* 0x41000 */ union GfxDrawSurf entDrawSurfsEmissiveOpaque[1024];
  /* 0x43000 */ union GfxDrawSurf bspDrawSurfsEmissiveTrans[1024];
  /* 0x45000 */ union GfxDrawSurf smodelDrawSurfsEmissiveTrans[1024];
  /* 0x47000 */ union GfxDrawSurf entDrawSurfsEmissiveTrans[1024];
  /* 0x49000 */ union GfxDrawSurf fxDrawSurfsEmissive[8192];
  /* 0x59000 */ union GfxDrawSurf fxDrawSurfsEmissiveAuto[8192];
  /* 0x69000 */ union GfxDrawSurf fxDrawSurfsEmissiveDecal[8192];
  /* 0x79000 */ union GfxDrawSurf fxDrawSurfsEmissiveViewmodel[512];
  /* 0x7a000 */ union GfxDrawSurf fxDrawSurfsEmissiveSuperflare[64];
  /* 0x7a200 */ union GfxDrawSurf smodelDrawSurfsEmissiveFX[512];
  /* 0x7b200 */ union GfxDrawSurf entDrawSurfsEmissiveFX[512];
  /* 0x7c200 */ union GfxDrawSurf bspSunShadowDrawSurfs0[4096];
  /* 0x84200 */ union GfxDrawSurf smodelSunShadowDrawSurfs0[4096];
  /* 0x8c200 */ union GfxDrawSurf entSunShadowDrawSurfs0[4096];
  /* 0x94200 */ union GfxDrawSurf codemeshSunShadowDrawSurfs0[512];
  /* 0x95200 */ union GfxDrawSurf bspSunShadowDrawSurfs1[8192];
  /* 0xa5200 */ union GfxDrawSurf smodelSunShadowDrawSurfs1[8192];
  /* 0xb5200 */ union GfxDrawSurf entSunShadowDrawSurfs1[8192];
  /* 0xc5200 */ union GfxDrawSurf codemeshSunShadowDrawSurfs1[512];
  /* 0xc6200 */ union GfxDrawSurf bspSpotShadowDrawSurfs0[1024];
  /* 0xc8200 */ union GfxDrawSurf smodelSpotShadowDrawSurfs0[1024];
  /* 0xca200 */ union GfxDrawSurf entSpotShadowDrawSurfs0[1024];
  /* 0xcc200 */ union GfxDrawSurf bspSpotShadowDrawSurfs1[1024];
  /* 0xce200 */ union GfxDrawSurf smodelSpotShadowDrawSurfs1[1024];
  /* 0xd0200 */ union GfxDrawSurf entSpotShadowDrawSurfs1[1024];
  /* 0xd2200 */ union GfxDrawSurf bspSpotShadowDrawSurfs2[1024];
  /* 0xd4200 */ union GfxDrawSurf smodelSpotShadowDrawSurfs2[1024];
  /* 0xd6200 */ union GfxDrawSurf entSpotShadowDrawSurfs2[1024];
  /* 0xd8200 */ union GfxDrawSurf bspSpotShadowDrawSurfs3[1024];
  /* 0xda200 */ union GfxDrawSurf smodelSpotShadowDrawSurfs3[1024];
  /* 0xdc200 */ union GfxDrawSurf entSpotShadowDrawSurfs3[1024];
  /* 0xde200 */ unsigned char shadowableLightIsUsed[255];
  /* 0xde2ff */ char Padding_1180;
  /* 0xde300 */ unsigned char cachedShadowableLightIsUsed[255][4];
  /* 0xde6fc */ BOOL invalidateShadowableLightCache;
  /* 0xde6fd */ char Padding_1181[3];
  /* 0xde700 */ struct GfxLight cachedVisibleLights[4][4];
  /* 0xdfd00 */ int cachedVisibleLightCounts[4];
  /* 0xdfd10 */ int maxDrawSurfCount[50];
  /* 0xdfdd8 */ volatile long drawSurfCount[50];
  /* 0xdfea0 */ union GfxDrawSurf* drawSurfs[50];
  /* 0xdff68 */ union GfxDrawSurf fxDrawSurfsLight[8192];
  /* 0xeff68 */ union GfxDrawSurf fxDrawSurfsLightAuto[8192];
  /* 0xfff68 */ union GfxDrawSurf fxDrawSurfsLightDecal[8192];
  /* 0x10ff68 */ struct GfxSceneDef def;
  /* 0x10ff7c */ volatile long addedLightCount;
  /* 0x10ff80 */ struct GfxLight addedLight[32];
  /* 0x112b80 */ BOOL isAddedLightCulled[32];
  /* 0x112ba0 */ float dynamicSpotLightNearPlaneOffset;
  /* 0x112ba4 */ union vec4_t dynamicSpotLightPlanes[6];
  /* 0x112c04 */ volatile long sceneDObjCount;
  /* 0x112c08 */ struct GfxSceneEntity sceneDObj[1024];
  /* 0x135c08 */ unsigned char sceneDObjVisData[1024][7];
  /* 0x137808 */ int sceneDObjViewmodelIndex;
  /* 0x13780c */ volatile long sceneModelCount;
  /* 0x137810 */ struct GfxSceneModel sceneModel[1024];
  /* 0x14d810 */ unsigned char sceneModelVisData[1024][7];
  /* 0x14f410 */ volatile long sceneBrushCount;
  /* 0x14f414 */ struct GfxSceneBrush sceneBrush[1024];
  /* 0x15a414 */ unsigned char sceneBrushVisData[1024][3];
  /* 0x15b014 */ volatile long glassBrushCount;
  /* 0x15b018 */ struct GfxSceneGlassBrush glassBrush[1024];
  /* 0x165018 */ unsigned char glassBrushVisData[1024];
  /* 0x165418 */ unsigned int sceneDynModelCount;
  /* 0x16541c */ unsigned int sceneDynBrushCount;
  /* 0x165420 */ struct DpvsPlane shadowFarPlane[2];
  /* 0x165448 */ struct DpvsPlane shadowNearPlane[2];
  /* 0x165470 */ struct GfxSceneDpvs dpvs;
  /* 0x1654a8 */ struct SceneModelBatchCmd modelSkelCmd;
  /* 0x1654cc */ long __PADDING__[13];
}; /* size: 0x165500 */

class bdLinkedList<bdReference<bdChunk> >::Node
{
  /* 0x0000 */ class bdReference<bdChunk> m_data;
  /* 0x0004 */ class bdLinkedList<bdReference<bdChunk> >::Node* m_next;
  /* 0x0008 */ class bdLinkedList<bdReference<bdChunk> >::Node* m_prev;
}; /* size: 0x000c */

struct ID2D1SolidColorBrush
{
}; /* size: 0x0004 */

struct FxDrawTrailResource
{
  /* 0x0000 */ struct r_double_index_t* baseIndices;
  /* 0x0004 */ unsigned short baseVertex;
  /* 0x0006 */ unsigned short pad;
}; /* size: 0x0008 */

struct DiskBrushModel
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ unsigned short firstTriSoup;
  /* 0x001a */ unsigned short triSoupCount;
  /* 0x001c */ int firstSurface;
  /* 0x0020 */ int numSurfaces;
  /* 0x0024 */ int firstBrush;
  /* 0x0028 */ int numBrushes;
}; /* size: 0x002c */

struct D3DXMATRIX
{
}; /* size: 0x0040 */

struct FxDrawTrailResourceRequired
{
  /* 0x0000 */ int numCodeMeshVerts;
  /* 0x0004 */ int numIndices;
}; /* size: 0x0008 */

struct OccQueryDebugEntry
{
  /* 0x0000 */ const struct FxEffectDef* def;
  /* 0x0004 */ int count;
}; /* size: 0x0008 */

struct DiskLeaf_Version14
{
  /* 0x0000 */ int cluster;
  /* 0x0004 */ int unused0;
  /* 0x0008 */ int firstCollAabbIndex;
  /* 0x000c */ int collAabbCount;
  /* 0x0010 */ int firstLeafBrush;
  /* 0x0014 */ int numLeafBrushes;
  /* 0x0018 */ int cellNum;
  /* 0x001c */ int unused1;
  /* 0x0020 */ int unused2;
}; /* size: 0x0024 */

class bdBytePacker
{
}; /* size: 0x0001 */

struct FxInsertSortElem
{
  /* 0x0000 */ int defSortOrder;
  /* 0x0004 */ float distToCamSq;
  /* 0x0008 */ int msecBegin;
  /* 0x000c */ int defIndex;
  /* 0x0010 */ unsigned char elemType;
  /* 0x0011 */ char __PADDING__[3];
}; /* size: 0x0014 */

struct std::pair<MapProfileHotSpot *,MapProfileHotSpot *>
{
}; /* size: 0x0008 */

typedef struct _D3DX10_FONT_DESCW
{
  /* 0x0000 */ int Height;
  /* 0x0004 */ unsigned int Width;
  /* 0x0008 */ unsigned int Weight;
  /* 0x000c */ unsigned int MipLevels;
  /* 0x0010 */ int Italic;
  /* 0x0014 */ unsigned char CharSet;
  /* 0x0015 */ unsigned char OutputPrecision;
  /* 0x0016 */ unsigned char Quality;
  /* 0x0017 */ unsigned char PitchAndFamily;
  /* 0x0018 */ wchar_t FaceName[32];
} D3DX10_FONT_DESCW, *PD3DX10_FONT_DESCW; /* size: 0x0058 */

struct DvarDumpInfo
{
  /* 0x0000 */ int count;
  /* 0x0004 */ int channel;
  /* 0x0008 */ const char* match;
}; /* size: 0x000c */

struct std::pair<unsigned int *,unsigned int *>
{
}; /* size: 0x0008 */

struct KnownContentPackData
{
  /* 0x0000 */ char contentName[128];
  /* 0x0080 */ const char* pakName;
  /* 0x0084 */ int contentPack;
  /* 0x0088 */ int contentMask;
  /* 0x008c */ BOOL loadFastfileLoaded;
  /* 0x008d */ char __PADDING__[3];
}; /* size: 0x0090 */

struct MINIZPNGAllocData
{
  /* 0x0000 */ unsigned char* allocBuffer;
  /* 0x0004 */ unsigned int bytesUsed;
  /* 0x0008 */ unsigned int maxBytes;
}; /* size: 0x000c */

struct SlowMotionCommon
{
  /* 0x0000 */ BOOL enable;
  /* 0x0001 */ char Padding_1182[3];
  /* 0x0004 */ int type;
  /* 0x0008 */ int delayMsec;
  /* 0x000c */ float startTimescale;
  /* 0x0010 */ float endTimescale;
  /* 0x0014 */ int startMsec;
  /* 0x0018 */ int endMsec;
  /* 0x001c */ float viewTimescale;
  /* 0x0020 */ BOOL viewEnable;
  /* 0x0021 */ char Padding_1183[3];
  /* 0x0024 */ int viewType;
  /* 0x0028 */ float viewStartTimescale;
  /* 0x002c */ float viewEndTimescale;
  /* 0x0030 */ int viewStartMsec;
  /* 0x0034 */ int viewEndMsec;
}; /* size: 0x0038 */

struct NV_MOSAIC_TOPOLOGY
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long rowCount;
  /* 0x0008 */ unsigned long colCount;
  /* 0x000c */ struct
  {
    /* 0x000c */ struct NvPhysicalGpuHandle__* hPhysicalGPU;
    /* 0x0010 */ unsigned long displayOutputId;
    /* 0x0014 */ int overlapX;
    /* 0x0018 */ int overlapY;
  } /* size: 0x0010 */ gpuLayout[8][8];
}; /* size: 0x040c */

struct tdefl_sym_freq
{
  /* 0x0000 */ unsigned short m_key;
  /* 0x0002 */ unsigned short m_sym_index;
}; /* size: 0x0004 */

struct AimTarget
{
  /* 0x0000 */ int entIndex;
  /* 0x0004 */ float worldDistSqr;
  /* 0x0008 */ union vec3_t mins;
  /* 0x0014 */ union vec3_t maxs;
  /* 0x0020 */ union vec3_t velocity;
}; /* size: 0x002c */

struct MINIZPNGAllocSegmentHeader
{
  /* 0x0000 */ unsigned int safety;
  /* 0x0004 */ unsigned int length;
}; /* size: 0x0008 */

struct MINIZAllocData
{
  /* 0x0000 */ unsigned char* allocBuffer;
  /* 0x0004 */ unsigned int bytesUsed;
}; /* size: 0x0008 */

struct tdefl_compressor
{
  /* 0x0000 */ void* m_pPut_buf_func /* function */;
  /* 0x0004 */ void* m_pPut_buf_user;
  /* 0x0008 */ unsigned int m_flags;
  /* 0x000c */ unsigned int m_max_probes[2];
  /* 0x0014 */ int m_greedy_parsing;
  /* 0x0018 */ unsigned int m_adler32;
  /* 0x001c */ unsigned int m_lookahead_pos;
  /* 0x0020 */ unsigned int m_lookahead_size;
  /* 0x0024 */ unsigned int m_dict_size;
  /* 0x0028 */ unsigned char* m_pLZ_code_buf;
  /* 0x002c */ unsigned char* m_pLZ_flags;
  /* 0x0030 */ unsigned char* m_pOutput_buf;
  /* 0x0034 */ unsigned char* m_pOutput_buf_end;
  /* 0x0038 */ unsigned int m_num_flags_left;
  /* 0x003c */ unsigned int m_total_lz_bytes;
  /* 0x0040 */ unsigned int m_lz_code_buf_dict_pos;
  /* 0x0044 */ unsigned int m_bits_in;
  /* 0x0048 */ unsigned int m_bit_buffer;
  /* 0x004c */ unsigned int m_saved_match_dist;
  /* 0x0050 */ unsigned int m_saved_match_len;
  /* 0x0054 */ unsigned int m_saved_lit;
  /* 0x0058 */ unsigned int m_output_flush_ofs;
  /* 0x005c */ unsigned int m_output_flush_remaining;
  /* 0x0060 */ unsigned int m_finished;
  /* 0x0064 */ unsigned int m_block_index;
  /* 0x0068 */ unsigned int m_wants_to_finish;
  /* 0x006c */ enum tdefl_status m_prev_return_status;
  /* 0x0070 */ const void* m_pIn_buf;
  /* 0x0074 */ void* m_pOut_buf;
  /* 0x0078 */ unsigned int* m_pIn_buf_size;
  /* 0x007c */ unsigned int* m_pOut_buf_size;
  /* 0x0080 */ enum tdefl_flush m_flush;
  /* 0x0084 */ const unsigned char* m_pSrc;
  /* 0x0088 */ unsigned int m_src_buf_left;
  /* 0x008c */ unsigned int m_out_buf_ofs;
  /* 0x0090 */ unsigned char m_dict[33025];
  /* 0x8191 */ char Padding_1184;
  /* 0x8192 */ unsigned short m_huff_count[288][3];
  /* 0x8852 */ unsigned short m_huff_codes[288][3];
  /* 0x8f12 */ unsigned char m_huff_code_sizes[288][3];
  /* 0x9272 */ unsigned char m_lz_code_buf[65536];
  /* 0x19272 */ unsigned short m_next[32768];
  /* 0x29272 */ unsigned short m_hash[32768];
  /* 0x39272 */ unsigned char m_output_buf[85196];
  /* 0x4df3e */ char __PADDING__[2];
}; /* size: 0x4df40 */

union XAssetPoolEntry<GfxImage>
{
  union
  {
    /* 0x0000 */ struct GfxImage entry;
    /* 0x0000 */ union XAssetPoolEntry<GfxImage>* next;
  }; /* size: 0x0050 */
}; /* size: 0x0050 */

struct NV_U56
{
  union
  {
    /* 0x0000 */ unsigned __int64 quadWord;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 hugePart : 56; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 unusedPart : 8; /* bit position: 56 */
      }; /* bitfield */
    } /* size: 0x0008 */ parts;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct token_s
{
  /* 0x0000 */ char string[1024];
  /* 0x0400 */ int type;
  /* 0x0404 */ int subtype;
  /* 0x0408 */ unsigned long intvalue;
  /* 0x040c */ long Padding_1185;
  /* 0x0410 */ double floatvalue;
  /* 0x0418 */ char* whitespace_p;
  /* 0x041c */ char* endwhitespace_p;
  /* 0x0420 */ int line;
  /* 0x0424 */ int linescrossed;
  /* 0x0428 */ struct token_s* next;
  /* 0x042c */ long __PADDING__[1];
}; /* size: 0x0430 */

struct tdefl_output_buffer
{
  /* 0x0000 */ unsigned int m_size;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned char* m_pBuf;
  /* 0x000c */ int m_expandable;
}; /* size: 0x0010 */

struct mz_zip_archive
{
  /* 0x0000 */ unsigned __int64 m_archive_size;
  /* 0x0008 */ unsigned __int64 m_central_directory_file_ofs;
  /* 0x0010 */ unsigned int m_total_files;
  /* 0x0014 */ enum mz_zip_mode m_zip_mode;
  /* 0x0018 */ unsigned int m_file_offset_alignment;
  /* 0x001c */ void* m_pAlloc /* function */;
  /* 0x0020 */ void* m_pFree /* function */;
  /* 0x0024 */ void* m_pRealloc /* function */;
  /* 0x0028 */ void* m_pAlloc_opaque;
  /* 0x002c */ void* m_pRead /* function */;
  /* 0x0030 */ void* m_pWrite /* function */;
  /* 0x0034 */ void* m_pIO_opaque;
  /* 0x0038 */ struct mz_zip_internal_state_tag* m_pState;
  /* 0x003c */ long __PADDING__[1];
}; /* size: 0x0040 */

typedef struct _NV_MONITOR_CAPS_VSDB
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char sourcePhysicalAddressB : 4; /* bit position: 0 */
    /* 0x0000 */ unsigned char sourcePhysicalAddressA : 4; /* bit position: 4 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0001 */ unsigned char sourcePhysicalAddressD : 4; /* bit position: 0 */
    /* 0x0001 */ unsigned char sourcePhysicalAddressC : 4; /* bit position: 4 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0002 */ unsigned char supportDualDviOperation : 1; /* bit position: 0 */
    /* 0x0002 */ unsigned char reserved6 : 2; /* bit position: 1 */
    /* 0x0002 */ unsigned char supportDeepColorYCbCr444 : 1; /* bit position: 3 */
    /* 0x0002 */ unsigned char supportDeepColor30bits : 1; /* bit position: 4 */
    /* 0x0002 */ unsigned char supportDeepColor36bits : 1; /* bit position: 5 */
    /* 0x0002 */ unsigned char supportDeepColor48bits : 1; /* bit position: 6 */
    /* 0x0002 */ unsigned char supportAI : 1; /* bit position: 7 */
  }; /* bitfield */
  /* 0x0003 */ unsigned char maxTmdsClock;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned char cnc0SupportGraphicsTextContent : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned char cnc1SupportPhotoContent : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned char cnc2SupportCinemaContent : 1; /* bit position: 2 */
    /* 0x0004 */ unsigned char cnc3SupportGameContent : 1; /* bit position: 3 */
    /* 0x0004 */ unsigned char reserved8 : 1; /* bit position: 4 */
    /* 0x0004 */ unsigned char hasVicEntries : 1; /* bit position: 5 */
    /* 0x0004 */ unsigned char hasInterlacedLatencyField : 1; /* bit position: 6 */
    /* 0x0004 */ unsigned char hasLatencyField : 1; /* bit position: 7 */
  }; /* bitfield */
  /* 0x0005 */ unsigned char videoLatency;
  /* 0x0006 */ unsigned char audioLatency;
  /* 0x0007 */ unsigned char interlacedVideoLatency;
  /* 0x0008 */ unsigned char interlacedAudioLatency;
  struct /* bitfield */
  {
    /* 0x0009 */ unsigned char reserved13 : 7; /* bit position: 0 */
    /* 0x0009 */ unsigned char has3dEntries : 1; /* bit position: 7 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x000a */ unsigned char hdmi3dLength : 5; /* bit position: 0 */
    /* 0x000a */ unsigned char hdmiVicLength : 3; /* bit position: 5 */
  }; /* bitfield */
  /* 0x000b */ unsigned char hdmi_vic[7];
  /* 0x0012 */ unsigned char hdmi_3d[31];
} NV_MONITOR_CAPS_VSDB, *PNV_MONITOR_CAPS_VSDB; /* size: 0x0031 */

typedef struct _NV_MONITOR_CAPS_VCDB
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char quantizationRangeYcc : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned char quantizationRangeRgb : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned char scanInfoPreferredVideoFormat : 2; /* bit position: 2 */
    /* 0x0000 */ unsigned char scanInfoITVideoFormats : 2; /* bit position: 4 */
    /* 0x0000 */ unsigned char scanInfoCEVideoFormats : 2; /* bit position: 6 */
  }; /* bitfield */
} NV_MONITOR_CAPS_VCDB, *PNV_MONITOR_CAPS_VCDB; /* size: 0x0001 */

typedef struct _NV_MONITOR_CAPABILITIES
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned short size;
  /* 0x0006 */ char Padding_1186[2];
  /* 0x0008 */ unsigned long infoType;
  /* 0x000c */ unsigned long connectorType;
  /* 0x0010 */ unsigned char bIsValidInfo : 1; /* bit position: 0 */
  union
  {
    union
    {
      /* 0x0011 */ struct _NV_MONITOR_CAPS_VSDB vsdb;
      /* 0x0011 */ struct _NV_MONITOR_CAPS_VCDB vcdb;
    }; /* size: 0x0031 */
  } /* size: 0x0031 */ data;
  /* 0x0042 */ char __PADDING__[2];
} NV_MONITOR_CAPABILITIES, *PNV_MONITOR_CAPABILITIES; /* size: 0x0044 */

struct RBWaypoint
{
  /* 0x0000 */ union vec3_t pos;
  /* 0x000c */ struct Material* material;
  /* 0x0010 */ union GfxColor color;
  /* 0x0014 */ float radius;
  /* 0x0018 */ BOOL fixedSize;
  /* 0x0019 */ BOOL alignBottom;
  /* 0x001a */ BOOL forceNear;
  /* 0x001b */ char __PADDING__[1];
}; /* size: 0x001c */

struct NV_LID_DOCK_PARAMS
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long currentLidState;
  /* 0x0008 */ unsigned long currentDockState;
  /* 0x000c */ unsigned long currentLidPolicy;
  /* 0x0010 */ unsigned long currentDockPolicy;
  /* 0x0014 */ unsigned long forcedLidMechanismPresent;
  /* 0x0018 */ unsigned long forcedDockMechanismPresent;
}; /* size: 0x001c */

class bdLoopbackConnection
{
  /* 0x0000 */ long Padding_1187[9];
  /* 0x0024 */ class bdQueue<bdReference<bdMessage> > m_messages;
}; /* size: 0x0030 */

struct BattleChatterParams
{
  /* 0x0000 */ unsigned char WhichSoundIsPlaying;
  /* 0x0001 */ char Padding_1188[3];
  /* 0x0004 */ unsigned int SecondAlias;
  /* 0x0008 */ int EntityNum;
  /* 0x000c */ enum LocalClientNum_t LocalClientNum;
  /* 0x0010 */ int CurrentPlayingSound;
  /* 0x0014 */ union vec3_t SndOrigin;
}; /* size: 0x0020 */

struct NV_AUDIO_INFOFRAME
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char channelCount : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned char rsvd_bits_byte1 : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned char codingType : 4; /* bit position: 4 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0001 */ unsigned char sampleSize : 2; /* bit position: 0 */
    /* 0x0001 */ unsigned char sampleRate : 3; /* bit position: 2 */
    /* 0x0001 */ unsigned char rsvd_bits_byte2 : 3; /* bit position: 5 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0002 */ unsigned char codingExtensionType : 5; /* bit position: 0 */
    /* 0x0002 */ unsigned char rsvd_bits_byte3 : 3; /* bit position: 5 */
  }; /* bitfield */
  /* 0x0003 */ unsigned char speakerPlacement;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned char lfePlaybackLevel : 2; /* bit position: 0 */
    /* 0x0004 */ unsigned char rsvd_bits_byte5 : 1; /* bit position: 2 */
    /* 0x0004 */ unsigned char levelShift : 4; /* bit position: 3 */
    /* 0x0004 */ unsigned char downmixInhibit : 1; /* bit position: 7 */
  }; /* bitfield */
  /* 0x0005 */ unsigned char rsvd_byte6;
  /* 0x0006 */ unsigned char rsvd_byte7;
  /* 0x0007 */ unsigned char rsvd_byte8;
  /* 0x0008 */ unsigned char rsvd_byte9;
  /* 0x0009 */ unsigned char rsvd_byte10;
}; /* size: 0x000a */

class bdReference<bdInitAckChunk>
{
  /* 0x0000 */ class bdInitAckChunk* m_ptr;
}; /* size: 0x0004 */

struct NV_PCLK_RANGE
{
  /* 0x0000 */ unsigned long uMaxPixClk;
  /* 0x0004 */ unsigned long uMinPixClk;
}; /* size: 0x0008 */

struct mz_internal_state;

struct mz_stream_s
{
  /* 0x0000 */ const unsigned char* next_in;
  /* 0x0004 */ unsigned int avail_in;
  /* 0x0008 */ unsigned long total_in;
  /* 0x000c */ unsigned char* next_out;
  /* 0x0010 */ unsigned int avail_out;
  /* 0x0014 */ unsigned long total_out;
  /* 0x0018 */ char* msg;
  /* 0x001c */ struct mz_internal_state* state;
  /* 0x0020 */ void* zalloc /* function */;
  /* 0x0024 */ void* zfree /* function */;
  /* 0x0028 */ void* opaque;
  /* 0x002c */ int data_type;
  /* 0x0030 */ unsigned long adler;
  /* 0x0034 */ unsigned long reserved;
}; /* size: 0x0038 */

struct ID3D10RenderTargetView
{
}; /* size: 0x0004 */

struct NVDX_ObjectHandle__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct BspHeader
{
  /* 0x0000 */ unsigned int ident;
  /* 0x0004 */ unsigned int version;
  /* 0x0008 */ unsigned int chunkCount;
  /* 0x000c */ struct BspChunk chunks[100];
}; /* size: 0x032c */

struct CommonAddr
{
  /* 0x0000 */ int groupIndex;
  /* 0x0004 */ unsigned int useCount;
  /* 0x0008 */ class bdReference<bdCommonAddr> addr;
}; /* size: 0x000c */

struct CmdText
{
  /* 0x0000 */ unsigned char* data;
  /* 0x0004 */ int maxsize;
  /* 0x0008 */ int cmdsize;
}; /* size: 0x000c */

struct dynent_field_s
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int ofs;
  /* 0x0008 */ enum fieldtype_t type;
  /* 0x000c */ enum dynEntFieldType_t dynEntStruct;
  /* 0x0010 */ void* setter /* function */;
  /* 0x0014 */ void* getter /* function */;
}; /* size: 0x0018 */

struct staticmodeltrace_t
{
  /* 0x0000 */ struct TraceExtents extents;
  /* 0x0030 */ int contents;
  /* 0x0034 */ long __PADDING__[3];
}; /* size: 0x0040 */

struct leafList2_t
{
  /* 0x0000 */ unsigned int count;
  /* 0x0004 */ unsigned int maxcount;
  /* 0x0008 */ unsigned short* list;
  /* 0x000c */ union vec3_t origin;
  /* 0x0018 */ float radius;
}; /* size: 0x001c */

struct LayeredTechniqueSetName
{
  /* 0x0000 */ const char* inputName;
  /* 0x0004 */ const char* namePrefixRegister;
  /* 0x0008 */ const char* nameChunk;
}; /* size: 0x000c */

struct dbrush_t
{
  /* 0x0000 */ short numSides;
  /* 0x0002 */ short materialNum;
}; /* size: 0x0004 */

struct NV_MOSAIC_DISPLAY_DETAILS
{
  /* 0x0000 */ unsigned long displayId;
  /* 0x0004 */ unsigned long problemFlags;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long supportsRotation : 1; /* bit position: 0 */
    /* 0x0008 */ unsigned long reserved : 31; /* bit position: 1 */
  }; /* bitfield */
}; /* size: 0x000c */

struct dmaterial_t
{
  /* 0x0000 */ char material[64];
  /* 0x0040 */ int surfaceFlags;
  /* 0x0044 */ int contentFlags;
}; /* size: 0x0048 */

struct dbrushside_t
{
  union
  {
    union
    {
      /* 0x0000 */ int planeNum;
      /* 0x0000 */ float bound;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0004 */ int materialNum;
}; /* size: 0x0008 */

struct DiskLeaf
{
  /* 0x0000 */ int cluster;
  /* 0x0004 */ int firstCollAabbIndex;
  /* 0x0008 */ int collAabbCount;
  /* 0x000c */ int firstLeafBrush;
  /* 0x0010 */ int numLeafBrushes;
  /* 0x0014 */ int cellNum;
}; /* size: 0x0018 */

struct zombieWeaponStatHashMap_t
{
  /* 0x0000 */ int weaponNameHash;
  /* 0x0004 */ int weaponStatIndex;
}; /* size: 0x0008 */

struct dwUCDUpdateMarketingOptInTask
{
  /* 0x0000 */ BOOL shouldOptIn;
  /* 0x0001 */ char Padding_1189[3];
  /* 0x0004 */ class bdBoolResult result;
}; /* size: 0x000c */

struct png_row_info_struct
{
  /* 0x0000 */ unsigned int width;
  /* 0x0004 */ unsigned int rowbytes;
  /* 0x0008 */ unsigned char color_type;
  /* 0x0009 */ unsigned char bit_depth;
  /* 0x000a */ unsigned char channels;
  /* 0x000b */ unsigned char pixel_depth;
}; /* size: 0x000c */

struct png_info_def
{
  /* 0x0000 */ unsigned int width;
  /* 0x0004 */ unsigned int height;
  /* 0x0008 */ unsigned int valid;
  /* 0x000c */ unsigned int rowbytes;
  /* 0x0010 */ struct png_color_struct* palette;
  /* 0x0014 */ unsigned short num_palette;
  /* 0x0016 */ unsigned short num_trans;
  /* 0x0018 */ unsigned char bit_depth;
  /* 0x0019 */ unsigned char color_type;
  /* 0x001a */ unsigned char compression_type;
  /* 0x001b */ unsigned char filter_type;
  /* 0x001c */ unsigned char interlace_type;
  /* 0x001d */ unsigned char channels;
  /* 0x001e */ unsigned char pixel_depth;
  /* 0x001f */ unsigned char spare_byte;
  /* 0x0020 */ unsigned char signature[8];
  /* 0x0028 */ int gamma;
  /* 0x002c */ unsigned char srgb_intent;
  /* 0x002d */ char Padding_1190[3];
  /* 0x0030 */ int num_text;
  /* 0x0034 */ int max_text;
  /* 0x0038 */ struct png_text_struct* text;
  /* 0x003c */ struct png_time_struct mod_time;
  /* 0x0044 */ struct png_color_8_struct sig_bit;
  /* 0x0049 */ char Padding_1191[3];
  /* 0x004c */ unsigned char* trans_alpha;
  /* 0x0050 */ struct png_color_16_struct trans_color;
  /* 0x005a */ struct png_color_16_struct background;
  /* 0x0064 */ int x_offset;
  /* 0x0068 */ int y_offset;
  /* 0x006c */ unsigned char offset_unit_type;
  /* 0x006d */ char Padding_1192[3];
  /* 0x0070 */ unsigned int x_pixels_per_unit;
  /* 0x0074 */ unsigned int y_pixels_per_unit;
  /* 0x0078 */ unsigned char phys_unit_type;
  /* 0x0079 */ char Padding_1193[3];
  /* 0x007c */ unsigned short* hist;
  /* 0x0080 */ int x_white;
  /* 0x0084 */ int y_white;
  /* 0x0088 */ int x_red;
  /* 0x008c */ int y_red;
  /* 0x0090 */ int x_green;
  /* 0x0094 */ int y_green;
  /* 0x0098 */ int x_blue;
  /* 0x009c */ int y_blue;
  /* 0x00a0 */ char* pcal_purpose;
  /* 0x00a4 */ int pcal_X0;
  /* 0x00a8 */ int pcal_X1;
  /* 0x00ac */ char* pcal_units;
  /* 0x00b0 */ char** pcal_params;
  /* 0x00b4 */ unsigned char pcal_type;
  /* 0x00b5 */ unsigned char pcal_nparams;
  /* 0x00b6 */ char Padding_1194[2];
  /* 0x00b8 */ unsigned int free_me;
  /* 0x00bc */ struct png_unknown_chunk_t* unknown_chunks;
  /* 0x00c0 */ int unknown_chunks_num;
  /* 0x00c4 */ char* iccp_name;
  /* 0x00c8 */ unsigned char* iccp_profile;
  /* 0x00cc */ unsigned int iccp_proflen;
  /* 0x00d0 */ unsigned char iccp_compression;
  /* 0x00d1 */ char Padding_1195[3];
  /* 0x00d4 */ struct png_sPLT_struct* splt_palettes;
  /* 0x00d8 */ unsigned int splt_palettes_num;
  /* 0x00dc */ unsigned char scal_unit;
  /* 0x00dd */ char Padding_1196[3];
  /* 0x00e0 */ char* scal_s_width;
  /* 0x00e4 */ char* scal_s_height;
  /* 0x00e8 */ unsigned char** row_pointers;
}; /* size: 0x00ec */

struct dwGetUserInfoTask
{
  /* 0x0000 */ unsigned __int64* userIDs;
  /* 0x0004 */ int numUserIDs;
  /* 0x0008 */ class bdUserInfo* outUserInfos;
  /* 0x000c */ void* successCallback /* function */;
  /* 0x0010 */ void* failureCallback /* function */;
}; /* size: 0x0014 */

struct XAssetPool<FootstepTableDef,32>
{
  /* 0x0000 */ union XAssetPoolEntry<FootstepTableDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<FootstepTableDef> entries[32];
}; /* size: 0x7084 */

union XAssetPoolEntry<XAnimParts>
{
  union
  {
    /* 0x0000 */ struct XAnimParts entry;
    /* 0x0000 */ union XAssetPoolEntry<XAnimParts>* next;
  }; /* size: 0x0068 */
}; /* size: 0x0068 */

struct XAssetPool<XAnimParts,5200>
{
  /* 0x0000 */ union XAssetPoolEntry<XAnimParts>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<XAnimParts> entries[5200];
}; /* size: 0x84084 */

struct png_struct_def
{
  /* 0x0000 */ int longjmp_buffer[16];
  /* 0x0040 */ void* longjmp_fn /* function */;
  /* 0x0044 */ void* error_fn /* function */;
  /* 0x0048 */ void* warning_fn /* function */;
  /* 0x004c */ void* error_ptr;
  /* 0x0050 */ void* write_data_fn /* function */;
  /* 0x0054 */ void* read_data_fn /* function */;
  /* 0x0058 */ void* io_ptr;
  /* 0x005c */ void* read_user_transform_fn /* function */;
  /* 0x0060 */ void* write_user_transform_fn /* function */;
  /* 0x0064 */ void* user_transform_ptr;
  /* 0x0068 */ unsigned char user_transform_depth;
  /* 0x0069 */ unsigned char user_transform_channels;
  /* 0x006a */ char Padding_1197[2];
  /* 0x006c */ unsigned int mode;
  /* 0x0070 */ unsigned int flags;
  /* 0x0074 */ unsigned int transformations;
  /* 0x0078 */ struct z_stream_s zstream;
  /* 0x00ac */ unsigned char* zbuf;
  /* 0x00b0 */ unsigned int zbuf_size;
  /* 0x00b4 */ unsigned int zlib_state;
  /* 0x00b8 */ int zlib_level;
  /* 0x00bc */ int zlib_method;
  /* 0x00c0 */ int zlib_window_bits;
  /* 0x00c4 */ int zlib_mem_level;
  /* 0x00c8 */ int zlib_strategy;
  /* 0x00cc */ int zlib_text_level;
  /* 0x00d0 */ int zlib_text_method;
  /* 0x00d4 */ int zlib_text_window_bits;
  /* 0x00d8 */ int zlib_text_mem_level;
  /* 0x00dc */ int zlib_text_strategy;
  /* 0x00e0 */ unsigned int width;
  /* 0x00e4 */ unsigned int height;
  /* 0x00e8 */ unsigned int num_rows;
  /* 0x00ec */ unsigned int usr_width;
  /* 0x00f0 */ unsigned int rowbytes;
  /* 0x00f4 */ unsigned int iwidth;
  /* 0x00f8 */ unsigned int row_number;
  /* 0x00fc */ unsigned int chunk_name;
  /* 0x0100 */ unsigned char* prev_row;
  /* 0x0104 */ unsigned char* row_buf;
  /* 0x0108 */ unsigned char* sub_row;
  /* 0x010c */ unsigned char* up_row;
  /* 0x0110 */ unsigned char* avg_row;
  /* 0x0114 */ unsigned char* paeth_row;
  /* 0x0118 */ unsigned int info_rowbytes;
  /* 0x011c */ unsigned int idat_size;
  /* 0x0120 */ unsigned int crc;
  /* 0x0124 */ struct png_color_struct* palette;
  /* 0x0128 */ unsigned short num_palette;
  /* 0x012a */ char Padding_1198[2];
  /* 0x012c */ int num_palette_max;
  /* 0x0130 */ unsigned short num_trans;
  /* 0x0132 */ unsigned char compression;
  /* 0x0133 */ unsigned char filter;
  /* 0x0134 */ unsigned char interlaced;
  /* 0x0135 */ unsigned char pass;
  /* 0x0136 */ unsigned char do_filter;
  /* 0x0137 */ unsigned char color_type;
  /* 0x0138 */ unsigned char bit_depth;
  /* 0x0139 */ unsigned char usr_bit_depth;
  /* 0x013a */ unsigned char pixel_depth;
  /* 0x013b */ unsigned char channels;
  /* 0x013c */ unsigned char usr_channels;
  /* 0x013d */ unsigned char sig_bytes;
  /* 0x013e */ unsigned char maximum_pixel_depth;
  /* 0x013f */ unsigned char transformed_pixel_depth;
  /* 0x0140 */ unsigned char io_chunk_string[5];
  /* 0x0145 */ char Padding_1199;
  /* 0x0146 */ unsigned short filler;
  /* 0x0148 */ unsigned char background_gamma_type;
  /* 0x0149 */ char Padding_1200[3];
  /* 0x014c */ int background_gamma;
  /* 0x0150 */ struct png_color_16_struct background;
  /* 0x015a */ struct png_color_16_struct background_1;
  /* 0x0164 */ void* output_flush_fn /* function */;
  /* 0x0168 */ unsigned int flush_dist;
  /* 0x016c */ unsigned int flush_rows;
  /* 0x0170 */ int gamma_shift;
  /* 0x0174 */ int gamma;
  /* 0x0178 */ int screen_gamma;
  /* 0x017c */ unsigned char* gamma_table;
  /* 0x0180 */ unsigned short** gamma_16_table;
  /* 0x0184 */ unsigned char* gamma_from_1;
  /* 0x0188 */ unsigned char* gamma_to_1;
  /* 0x018c */ unsigned short** gamma_16_from_1;
  /* 0x0190 */ unsigned short** gamma_16_to_1;
  /* 0x0194 */ struct png_color_8_struct sig_bit;
  /* 0x0199 */ struct png_color_8_struct shift;
  /* 0x019e */ char Padding_1201[2];
  /* 0x01a0 */ unsigned char* trans_alpha;
  /* 0x01a4 */ struct png_color_16_struct trans_color;
  /* 0x01ae */ char Padding_1202[2];
  /* 0x01b0 */ void* read_row_fn /* function */;
  /* 0x01b4 */ void* write_row_fn /* function */;
  /* 0x01b8 */ void* info_fn /* function */;
  /* 0x01bc */ void* row_fn /* function */;
  /* 0x01c0 */ void* end_fn /* function */;
  /* 0x01c4 */ unsigned char* save_buffer_ptr;
  /* 0x01c8 */ unsigned char* save_buffer;
  /* 0x01cc */ unsigned char* current_buffer_ptr;
  /* 0x01d0 */ unsigned char* current_buffer;
  /* 0x01d4 */ unsigned int push_length;
  /* 0x01d8 */ unsigned int skip_length;
  /* 0x01dc */ unsigned int save_buffer_size;
  /* 0x01e0 */ unsigned int save_buffer_max;
  /* 0x01e4 */ unsigned int buffer_size;
  /* 0x01e8 */ unsigned int current_buffer_size;
  /* 0x01ec */ int process_mode;
  /* 0x01f0 */ int cur_palette;
  /* 0x01f4 */ unsigned char* palette_lookup;
  /* 0x01f8 */ unsigned char* quantize_index;
  /* 0x01fc */ unsigned short* hist;
  /* 0x0200 */ unsigned char heuristic_method;
  /* 0x0201 */ unsigned char num_prev_filters;
  /* 0x0202 */ char Padding_1203[2];
  /* 0x0204 */ unsigned char* prev_filters;
  /* 0x0208 */ unsigned short* filter_weights;
  /* 0x020c */ unsigned short* inv_filter_weights;
  /* 0x0210 */ unsigned short* filter_costs;
  /* 0x0214 */ unsigned short* inv_filter_costs;
  /* 0x0218 */ char time_buffer[29];
  /* 0x0235 */ char Padding_1204[3];
  /* 0x0238 */ unsigned int free_me;
  /* 0x023c */ void* user_chunk_ptr;
  /* 0x0240 */ void* read_user_chunk_fn /* function */;
  /* 0x0244 */ int num_chunk_list;
  /* 0x0248 */ unsigned char* chunk_list;
  /* 0x024c */ unsigned char is_sRGB;
  /* 0x024d */ unsigned char rgb_to_gray_status;
  /* 0x024e */ unsigned char rgb_to_gray_coefficients_set;
  /* 0x024f */ char Padding_1205;
  /* 0x0250 */ unsigned short rgb_to_gray_red_coeff;
  /* 0x0252 */ unsigned short rgb_to_gray_green_coeff;
  /* 0x0254 */ unsigned int mng_features_permitted;
  /* 0x0258 */ unsigned char filter_type;
  /* 0x0259 */ char Padding_1206[3];
  /* 0x025c */ void* mem_ptr;
  /* 0x0260 */ void* malloc_fn /* function */;
  /* 0x0264 */ void* free_fn /* function */;
  /* 0x0268 */ unsigned char* big_row_buf;
  /* 0x026c */ unsigned char* quantize_sort;
  /* 0x0270 */ unsigned char* index_to_palette;
  /* 0x0274 */ unsigned char* palette_to_index;
  /* 0x0278 */ unsigned char compression_type;
  /* 0x0279 */ char Padding_1207[3];
  /* 0x027c */ unsigned int user_width_max;
  /* 0x0280 */ unsigned int user_height_max;
  /* 0x0284 */ unsigned int user_chunk_cache_max;
  /* 0x0288 */ unsigned int user_chunk_malloc_max;
  /* 0x028c */ struct png_unknown_chunk_t unknown_chunk;
  /* 0x02a0 */ unsigned int old_big_row_buf_size;
  /* 0x02a4 */ char* chunkdata;
  /* 0x02a8 */ unsigned int io_state;
  /* 0x02ac */ unsigned char* big_prev_row;
  /* 0x02b0 */ void* read_filter[4] /* function */;
}; /* size: 0x02c0 */

struct NV_SLI_GROUP
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ long Padding_1208;
  /* 0x0008 */ unsigned __int64 topologyMask;
  /* 0x0010 */ unsigned long flags;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

struct XAssetPool<FootstepFXTableDef,4>
{
  /* 0x0000 */ union XAssetPoolEntry<FootstepFXTableDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<FootstepFXTableDef> entries[4];
}; /* size: 0x0214 */

struct PlayerDetails
{
  /* 0x0000 */ char fullDisplayName[38];
  /* 0x0026 */ char clanDisplayName[7];
  /* 0x002d */ char gamerTag[32];
  /* 0x004d */ char Padding_1209[3];
  /* 0x0050 */ unsigned int fullDisplayNameLength;
  /* 0x0054 */ unsigned int clanDisplayLength;
  /* 0x0058 */ unsigned int gamerTagDisplayLength;
  /* 0x005c */ BOOL inView;
  /* 0x005d */ char Padding_1210[3];
  /* 0x0060 */ int inViewStartTime;
  /* 0x0064 */ int inViewLastTime;
}; /* size: 0x0068 */

union XAssetPoolEntry<XModel>
{
  union
  {
    /* 0x0000 */ struct XModel entry;
    /* 0x0000 */ union XAssetPoolEntry<XModel>* next;
  }; /* size: 0x00f8 */
}; /* size: 0x00f8 */

struct XAssetPool<XModel,1400>
{
  /* 0x0000 */ union XAssetPoolEntry<XModel>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<XModel> entries[1400];
}; /* size: 0x54c44 */

struct EffectFile
{
  /* 0x0000 */ const char* nonflesh[32][21];
  /* 0x0a80 */ const char* flesh[4][21];
}; /* size: 0x0bd0 */

struct devguiGlob_t
{
  /* 0x0000 */ struct DevMenuItem menus[2048];
  /* 0x14000 */ struct DevMenuItem* nextFreeMenu;
  /* 0x14004 */ struct DevMenuItem topmostMenu;
  /* 0x1402c */ BOOL bindNextKey;
  /* 0x1402d */ BOOL isActive;
  /* 0x1402e */ BOOL isInitialized;
  /* 0x1402f */ BOOL editingMenuItem;
  /* 0x14030 */ unsigned short selectedMenu;
  /* 0x14032 */ char Padding_1211[2];
  /* 0x14034 */ int selRow;
  /* 0x14038 */ BOOL editingKnot;
  /* 0x14039 */ char Padding_1212[3];
  /* 0x1403c */ int top;
  /* 0x14040 */ int bottom;
  /* 0x14044 */ int left;
  /* 0x14048 */ int right;
  /* 0x1404c */ int sliderWidth;
  /* 0x14050 */ int textLabelWidth;
}; /* size: 0x14054 */

struct ECRYPT_ctx
{
  /* 0x0000 */ unsigned int input[16];
  /* 0x0040 */ unsigned char output[64];
  /* 0x0080 */ unsigned int cont;
}; /* size: 0x0084 */

struct DynEntityCreateParams
{
  /* 0x0000 */ char typeName[64];
  /* 0x0040 */ char modelName[64];
  /* 0x0080 */ char physModelName[64];
  /* 0x00c0 */ char destroyFxFile[64];
  /* 0x0100 */ char destroySound[64];
  /* 0x0140 */ char destroyPiecesFile[64];
  /* 0x0180 */ char physPresetFile[64];
  /* 0x01c0 */ char targetname[64];
  /* 0x0200 */ char target[64];
  /* 0x0240 */ char destroyedModelName[64];
  /* 0x0280 */ union vec3_t origin;
  /* 0x028c */ union vec3_t angles;
  /* 0x0298 */ int health;
  /* 0x029c */ float mass;
  /* 0x02a0 */ float bounce;
  /* 0x02a4 */ float friction;
  /* 0x02a8 */ union vec3_t centerOfMass;
  /* 0x02b4 */ BOOL startInPhysics;
  /* 0x02b5 */ BOOL autoActivate;
  /* 0x02b6 */ BOOL noBulletDamage;
  /* 0x02b7 */ BOOL noExplosiveDamage;
  /* 0x02b8 */ BOOL alwaysFloats;
  /* 0x02b9 */ char __PADDING__[3];
}; /* size: 0x02bc */

struct DynEnt_BurnData
{
  /* 0x0000 */ unsigned short id;
  /* 0x0002 */ char Padding_1213[2];
  /* 0x0004 */ unsigned int fx;
}; /* size: 0x0008 */

struct XAssetPool<PhysPreset,65>
{
  /* 0x0000 */ union XAssetPoolEntry<PhysPreset>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<PhysPreset> entries[65];
}; /* size: 0x1558 */

typedef struct _NVVIOVIDEOMODE
{
  /* 0x0000 */ unsigned long horizontalPixels;
  /* 0x0004 */ unsigned long verticalLines;
  /* 0x0008 */ float fFrameRate;
  /* 0x000c */ enum _NVVIOINTERLACEMODE interlaceMode;
  /* 0x0010 */ enum _NVVIOVIDEOSTANDARD videoStandard;
  /* 0x0014 */ enum _NVVIOVIDEOTYPE videoType;
} NVVIOVIDEOMODE, *PNVVIOVIDEOMODE; /* size: 0x0018 */

typedef struct _NVVIOSIGNALFORMATDETAIL
{
  /* 0x0000 */ enum _NVVIOSIGNALFORMAT signalFormat;
  /* 0x0004 */ struct _NVVIOVIDEOMODE videoMode;
} NVVIOSIGNALFORMATDETAIL, *PNVVIOSIGNALFORMATDETAIL; /* size: 0x001c */

struct NV_GPU_THERMAL_SETTINGS_V2
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long count;
  /* 0x0008 */ struct
  {
    /* 0x0008 */ enum NV_THERMAL_CONTROLLER controller;
    /* 0x000c */ int defaultMinTemp;
    /* 0x0010 */ int defaultMaxTemp;
    /* 0x0014 */ int currentTemp;
    /* 0x0018 */ enum NV_THERMAL_TARGET target;
  } /* size: 0x0014 */ sensor[3];
}; /* size: 0x0044 */

struct CG_PerfData
{
  /* 0x0000 */ int history[32];
  /* 0x0080 */ int count;
  /* 0x0084 */ int index;
  /* 0x0088 */ int instant;
  /* 0x008c */ int total;
  /* 0x0090 */ float average;
  /* 0x0094 */ float variance;
  /* 0x0098 */ int min;
  /* 0x009c */ int max;
}; /* size: 0x00a0 */

struct CG_PerfInfo
{
  /* 0x0000 */ BOOL initialized;
  /* 0x0001 */ char Padding_1214[3];
  /* 0x0004 */ struct CG_PerfData frame;
  /* 0x00a4 */ struct CG_PerfData script;
  /* 0x0144 */ struct CG_PerfData script_devblocks;
  /* 0x01e4 */ struct CG_PerfData cscript;
  /* 0x0284 */ struct CG_PerfData server;
  /* 0x0324 */ struct CG_PerfData script_opcodes;
  /* 0x03c4 */ struct CG_PerfData script_threads;
  /* 0x0464 */ struct CG_PerfData cscript_opcodes;
  /* 0x0504 */ struct CG_PerfData cscript_threads;
  /* 0x05a4 */ struct CG_PerfData renderExec;
  /* 0x0644 */ struct CG_PerfData renderSwap;
}; /* size: 0x06e4 */

struct XAssetPool<PhysConstraints,64>
{
  /* 0x0000 */ union XAssetPoolEntry<PhysConstraints>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<PhysConstraints> entries[64];
}; /* size: 0x2a204 */

struct RumbleDevguiGraphInfo
{
  /* 0x0000 */ struct RumbleInfo* rumbleInfo;
  /* 0x0004 */ struct RumbleGraph* rumbleGraph;
}; /* size: 0x0008 */

struct RumbleGraph
{
  /* 0x0000 */ char graphName[64];
  /* 0x0040 */ union vec2_t knots[16];
  /* 0x00c0 */ int knotCount;
  /* 0x00c4 */ struct DevGraph devguiGraph;
  /* 0x00e4 */ struct RumbleDevguiGraphInfo devguiGraphInfo;
}; /* size: 0x00ec */

struct XAssetPool<WeaponVariantDef,256>
{
  /* 0x0000 */ union XAssetPoolEntry<WeaponVariantDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<WeaponVariantDef> entries[256];
}; /* size: 0x2cc04 */

struct NV_GPU_ECC_STATUS_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long isSupported : 1; /* bit position: 0 */
  /* 0x0008 */ enum _NV_ECC_CONFIGURATION configurationOptions;
  /* 0x000c */ unsigned long isEnabled : 1; /* bit position: 0 */
}; /* size: 0x0010 */

struct XAssetPool<WeaponAttachmentUnique,2048>
{
  /* 0x0000 */ union XAssetPoolEntry<WeaponAttachmentUnique>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<WeaponAttachmentUnique> entries[2048];
}; /* size: 0xd4004 */

struct ytDWKeys_t
{
  /* 0x0000 */ char devKey[257];
  /* 0x0101 */ char devSecret[65];
  /* 0x0142 */ char consumerKey[257];
  /* 0x0243 */ char consumerSecret[65];
}; /* size: 0x0284 */

struct XAssetPool<ZBarrierDef,16>
{
  /* 0x0000 */ union XAssetPoolEntry<ZBarrierDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<ZBarrierDef> entries[16];
}; /* size: 0x2304 */

union XAssetPoolEntry<Material>
{
  union
  {
    /* 0x0000 */ struct Material entry;
    /* 0x0000 */ union XAssetPoolEntry<Material>* next;
  }; /* size: 0x0070 */
}; /* size: 0x0070 */

struct XAssetPool<Material,4992>
{
  /* 0x0000 */ union XAssetPoolEntry<Material>* freeHead;
  /* 0x0004 */ long Padding_1215;
  /* 0x0008 */ union XAssetPoolEntry<Material> entries[4992];
}; /* size: 0x88808 */

struct XAssetPool<MaterialTechniqueSet,2048>
{
  /* 0x0000 */ union XAssetPoolEntry<MaterialTechniqueSet>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<MaterialTechniqueSet> entries[2048];
}; /* size: 0x4c004 */

struct liveVote_t
{
  /* 0x0000 */ enum ControllerIndex_t requestController;
  /* 0x0004 */ enum ControllerIndex_t ownerController;
  /* 0x0008 */ unsigned __int64 entities[575];
  /* 0x1200 */ unsigned char votes[575];
  /* 0x143f */ char Padding_1216;
  /* 0x1440 */ int numVotes;
  /* 0x1444 */ long Padding_1217;
  /* 0x1448 */ unsigned __int64 recentlyLikedEntities[25];
  /* 0x1510 */ unsigned char recentlyLikedCategories[25];
  /* 0x1529 */ char Padding_1218[3];
  /* 0x152c */ int numRecentlyLiked;
  /* 0x1530 */ int offset;
  /* 0x1534 */ int isReady;
  /* 0x1538 */ int lastFullFetchTime;
  /* 0x153c */ int nextPageFetchTime;
}; /* size: 0x1540 */

struct CompassDogs
{
  /* 0x0000 */ int entityNum;
  /* 0x0004 */ int lastUpdate;
  /* 0x0008 */ union vec2_t lastPos;
  /* 0x0010 */ float lastYaw;
  /* 0x0014 */ enum team_t team;
  /* 0x0018 */ int ownerIndex;
  /* 0x001c */ BOOL enemy;
  /* 0x001d */ char __PADDING__[3];
}; /* size: 0x0020 */

struct XAssetPool<GfxImage,5312>
{
  /* 0x0000 */ union XAssetPoolEntry<GfxImage>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<GfxImage> entries[5312];
}; /* size: 0x67c04 */

struct RopeRenderInfo
{
  /* 0x0000 */ struct VisualRope ropes[96];
  /* 0x0d80 */ int ropeCount;
}; /* size: 0x0d84 */

struct dwVoteSubmitTask_t
{
  /* 0x0000 */ enum dwVoteCategory_e category;
  /* 0x0004 */ long Padding_1219;
  /* 0x0008 */ unsigned __int64 entity;
  /* 0x0010 */ enum dwVote_e vote;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

struct liveVoteTasks_t
{
  /* 0x0000 */ struct dwVoteSubmitTask_t submitTask;
  /* 0x0018 */ struct dwVoteHistoryTask_t historyTask;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

struct XAssetPool<AddonMapEnts,1>
{
  /* 0x0000 */ union XAssetPoolEntry<AddonMapEnts>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<AddonMapEnts> entries[1];
}; /* size: 0x0038 */

union XAssetPoolEntry<TracerDef>
{
  union
  {
    /* 0x0000 */ struct TracerDef entry;
    /* 0x0000 */ union XAssetPoolEntry<TracerDef>* next;
  }; /* size: 0x0080 */
}; /* size: 0x0080 */

struct XAssetPool<TracerDef,50>
{
  /* 0x0000 */ union XAssetPoolEntry<TracerDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<TracerDef> entries[50];
}; /* size: 0x1904 */

struct twitch_s
{
  /* 0x0000 */ unsigned __int64 xuid;
  /* 0x0008 */ BOOL isRegistered;
  /* 0x0009 */ char Padding_1220[3];
  /* 0x000c */ class bdTwitchUserInfo account;
  /* 0x0514 */ enum twitchStatus_e status;
  /* 0x0518 */ int retryCount;
  /* 0x051c */ int nextRetryTime;
}; /* size: 0x0520 */

struct XAssetPool<SkinnedVertsDef,1>
{
  /* 0x0000 */ union XAssetPoolEntry<SkinnedVertsDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<SkinnedVertsDef> entries[1];
}; /* size: 0x000c */

struct hostDelegateDetails_t
{
  /* 0x0000 */ int delegateIdx;
  /* 0x0004 */ int delegateTime;
  /* 0x0008 */ int lastDelegateSendTime;
}; /* size: 0x000c */

struct XAssetPool<XModelPieces,64>
{
  /* 0x0000 */ union XAssetPoolEntry<XModelPieces>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<XModelPieces> entries[64];
}; /* size: 0x0304 */

struct hostDelegate_t
{
  /* 0x0000 */ unsigned __int64 playerXuid;
  /* 0x0008 */ struct netadr_t playerAddr;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

struct matchClientScoreData_t
{
  /* 0x0000 */ unsigned __int64 xuid;
  /* 0x0008 */ unsigned __int64 leagueTeamID;
  /* 0x0010 */ int rank;
  /* 0x0014 */ int prestige;
  /* 0x0018 */ enum ClientNum_t clientNum;
  /* 0x001c */ struct Material* hRankIcon;
  /* 0x0020 */ char name[32];
  /* 0x0040 */ char clanAbbrev[8];
  /* 0x0048 */ struct score_s score;
  /* 0x0090 */ enum team_t team;
  /* 0x0094 */ BOOL isInfoValid;
  /* 0x0095 */ BOOL clanAbbrevEV;
  /* 0x0096 */ char __PADDING__[2];
}; /* size: 0x0098 */

struct listColumnInfo_t
{
  /* 0x0000 */ enum listColumnTypes_t type;
  /* 0x0004 */ float fWidth;
  /* 0x0008 */ const char* pszName;
  /* 0x000c */ int iAlignment;
  /* 0x0010 */ enum scoreboardColumnType_t sbColumnType;
}; /* size: 0x0014 */

struct matchScoreBoardData_t
{
  /* 0x0000 */ struct matchClientScoreData_t matchClientScoreData[18];
  /* 0x0ab0 */ enum scoreboardColumnType_t scoreboardColumnTypes[5];
  /* 0x0ac4 */ struct listColumnInfo_t inGameScoreboardColumnInfo[12];
  /* 0x0bb4 */ int numClients;
  /* 0x0bb8 */ int numAllies;
  /* 0x0bbc */ int numInGameScoreboardColumns;
  /* 0x0bc0 */ unsigned __int64 leagueTeamIDs[10];
  /* 0x0c10 */ int teamScores[10];
  /* 0x0c38 */ int sortByNameIndexes[18];
  /* 0x0c80 */ int sortByClientNumIndexes[18];
  /* 0x0cc8 */ char mapName[64];
  /* 0x0d08 */ char gameType[32];
  /* 0x0d28 */ BOOL isPlayerlistDirty;
  /* 0x0d29 */ char Padding_1221[3];
  /* 0x0d2c */ int numTeams;
  /* 0x0d30 */ float xpScale;
  /* 0x0d34 */ long __PADDING__[1];
}; /* size: 0x0d38 */

struct MetPlayerInfo
{
  /* 0x0000 */ unsigned char version;
  /* 0x0001 */ char Padding_1222[7];
  /* 0x0008 */ struct XuidInfo playersXuidInfo[50];
  /* 0x0968 */ unsigned char metPlayerCount;
  /* 0x0969 */ char __PADDING__[7];
}; /* size: 0x0970 */

struct csinfo_t
{
  /* 0x0000 */ int start;
  /* 0x0004 */ int end;
  /* 0x0008 */ char* label;
}; /* size: 0x000c */

struct serverStatusInfoResponse_t
{
  /* 0x0000 */ char string[20480];
  /* 0x5000 */ struct netadr_t address;
  /* 0x5014 */ int time;
  /* 0x5018 */ int startTime;
  /* 0x501c */ int pending;
  /* 0x5020 */ int print;
  /* 0x5024 */ int retrieved;
  /* 0x5028 */ class bdSecurityID secId;
}; /* size: 0x5030 */

struct GfxConfiguration
{
  /* 0x0000 */ unsigned int maxClientViews;
  /* 0x0004 */ unsigned int entCount;
  /* 0x0008 */ unsigned int entnumNone;
  /* 0x000c */ unsigned int entnumOrdinaryEnd;
  /* 0x0010 */ int threadContextCount;
  /* 0x0014 */ int critSectCount;
}; /* size: 0x0018 */

struct LeagueDivisionIcon
{
  /* 0x0000 */ int rankPosition;
  /* 0x0004 */ const char* smallIcon;
  /* 0x0008 */ const char* largeIcon;
}; /* size: 0x000c */

struct LeagueDivision
{
  /* 0x0000 */ int id;
  /* 0x0004 */ const char* name;
  /* 0x0008 */ const char* description;
  /* 0x000c */ float minSkill;
  /* 0x0010 */ float maxSkill;
  /* 0x0014 */ float avgSkill;
  /* 0x0018 */ int subdivisionSize;
  /* 0x001c */ BOOL canPlace;
  /* 0x001d */ BOOL tweakSkill;
  /* 0x001e */ char Padding_1223[2];
  /* 0x0020 */ int numIcons;
  /* 0x0024 */ struct LeagueDivisionIcon icons[6];
}; /* size: 0x006c */

struct LeagueTeam
{
  /* 0x0000 */ struct LeagueStats baseStats;
  /* 0x0034 */ long Padding_1224;
  /* 0x0038 */ unsigned __int64 teamID;
  /* 0x0040 */ struct LeagueDivision* division;
  /* 0x0044 */ int memberCount;
  /* 0x0048 */ int input;
  /* 0x004c */ float workingSkill;
  /* 0x0050 */ float workingVariance;
  /* 0x0054 */ struct LeagueStats newStats;
}; /* size: 0x0088 */

struct FXScopedCooperativeIteration
{
  /* 0x0000 */ const struct FxSystem* mSystem;
}; /* size: 0x0004 */

class bdLeagueAndSubdivisionResult
{
  /* 0x0000 */ long Padding_1225[2];
  /* 0x0008 */ unsigned __int64 m_leagueID;
  /* 0x0010 */ unsigned __int64 m_subdivisionID;
}; /* size: 0x0018 */

struct GfxPosFP16TexVertex
{
  /* 0x0000 */ union vec3_t xyz;
  /* 0x000c */ union PackedTexCoords texCoord;
}; /* size: 0x0010 */

class bdArray<bdReference<bdCommonAddr> >
{
  /* 0x0000 */ class bdReference<bdCommonAddr>* m_data;
  /* 0x0004 */ unsigned int m_capacity;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

struct NV_INFOFRAME_PROPERTY
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long mode : 4; /* bit position: 0 */
    /* 0x0000 */ unsigned long blackList : 2; /* bit position: 4 */
    /* 0x0000 */ unsigned long reserved : 10; /* bit position: 6 */
    /* 0x0000 */ unsigned long version : 8; /* bit position: 16 */
    /* 0x0000 */ unsigned long length : 8; /* bit position: 24 */
  }; /* bitfield */
}; /* size: 0x0004 */

class bdQueue<bdEndpoint>
{
  /* 0x0000 */ class bdLinkedList<bdEndpoint> m_list;
}; /* size: 0x000c */

struct Leaderboard
{
  /* 0x0000 */ struct LeaderboardDef* lbDefs[5];
  /* 0x0014 */ long Padding_1226;
  /* 0x0018 */ class LeaderboardRow<10> ustats[305];
  /* 0xbeb8 */ class LeaderboardRow<10> cstats[50][1];
  /* 0xddf8 */ int offset;
  /* 0xddfc */ int curIdx;
  /* 0xde00 */ int numResults;
  /* 0xde04 */ int totalResults;
  /* 0xde08 */ int filter;
  /* 0xde0c */ BOOL isUpdating;
  /* 0xde0d */ BOOL notSameFilter;
  /* 0xde0e */ char Padding_1227[2];
  /* 0xde10 */ unsigned __int64 pivotEntity;
  /* 0xde18 */ void* successCallback /* function */;
  /* 0xde1c */ void* failureCallback /* function */;
}; /* size: 0xde20 */

struct LbGlob
{
  /* 0x0000 */ struct LeaderboardDef* writeLeaderboards[32];
  /* 0x0080 */ int writeCount;
  /* 0x0084 */ long Padding_1228;
  /* 0x0088 */ struct Leaderboard leaderboard;
  /* 0xdea8 */ char feederText[32];
  /* 0xdec8 */ BOOL isWritingInUse;
  /* 0xdec9 */ char __PADDING__[7];
}; /* size: 0xded0 */

struct FxMarkDObjUpdateContext
{
  /* 0x0000 */ struct XModel* models[32];
  /* 0x0080 */ const char* modelParentBones[32];
  /* 0x0100 */ int modelCount;
  /* 0x0104 */ BOOL isBrush;
  /* 0x0105 */ char Padding_1229;
  /* 0x0106 */ unsigned short brushIndex;
}; /* size: 0x0108 */

struct lbTaskContext_t
{
  /* 0x0000 */ enum ControllerIndex_t controllerIndex;
  /* 0x0004 */ int filter;
  /* 0x0008 */ int offset;
  /* 0x000c */ int kickoffTime;
  /* 0x0010 */ BOOL needsProcessing;
  /* 0x0011 */ char __PADDING__[3];
}; /* size: 0x0014 */

struct challengeHashLookup_t
{
  /* 0x0000 */ const char** baseStatNames;
  /* 0x0004 */ int baseStatNameCount;
  /* 0x0008 */ int* baseStatNameHash;
  /* 0x000c */ const char** challengeStatNames;
  /* 0x0010 */ int challengeStatCount;
}; /* size: 0x0014 */

struct challengeTableInfo_t
{
  /* 0x0000 */ struct challengeTableRow_t challengeTable[1024];
  /* 0x12000 */ short startIndices[20][5];
  /* 0x120c8 */ short numEntries[20][5];
  /* 0x12190 */ short challengeRowIndices[1024];
  /* 0x12990 */ short uniqueChallengeIndices[1024];
  /* 0x13190 */ unsigned int challengeCount;
  /* 0x13194 */ unsigned int uniqueChallengeCount;
  /* 0x13198 */ struct hashName_t itemHashNames[1536];
  /* 0x16198 */ struct hashName_t attachmentHashNames[180];
  /* 0x16738 */ struct hashName_t groupHashNames[120];
  /* 0x16af8 */ struct hashName_t gametypeHashNames[640];
  /* 0x17ef8 */ int weaponStatHash[11];
  /* 0x17f24 */ int gametypeStatHash[18];
  /* 0x17f6c */ struct challengeHashLookup_t weaponChallengeHashLookup;
  /* 0x17f80 */ struct challengeHashLookup_t gametypeChallengeHashLookup;
}; /* size: 0x17f94 */

struct D3D10_TEX3D_RTV
{
  /* 0x0000 */ unsigned int MipSlice;
  /* 0x0004 */ unsigned int FirstWSlice;
  /* 0x0008 */ unsigned int WSize;
}; /* size: 0x000c */

struct lbdef_t
{
  /* 0x0000 */ char stat[64][10];
  /* 0x0280 */ char gametype[8];
  /* 0x0288 */ int lbid_daily;
  /* 0x028c */ int lbid_weekly;
}; /* size: 0x0290 */

struct dediUserData_t
{
  /* 0x0000 */ enum dediConnectionState_e connectionState;
  /* 0x0004 */ BOOL onConnectCalled;
  /* 0x0005 */ char Padding_1230[3];
  /* 0x0008 */ int signInState;
  /* 0x000c */ class bdInetAddr authAddr;
  /* 0x0010 */ class bdInetAddr lsgAddr;
  /* 0x0014 */ int errorCount;
  /* 0x0018 */ int backoffRecoverTime;
  /* 0x001c */ char gamertag[32];
  /* 0x003c */ long Padding_1231;
  /* 0x0040 */ unsigned __int64 xuid;
  /* 0x0048 */ char xuidString[21];
  /* 0x005d */ char Padding_1232[3];
  /* 0x0060 */ enum EUserTier tier;
  /* 0x0064 */ BOOL isReadyToParty;
  /* 0x0065 */ BOOL isPartyInitialized;
  /* 0x0066 */ BOOL isPartyReady;
  /* 0x0067 */ BOOL isInParty;
  /* 0x0068 */ BOOL isInLocalParty;
  /* 0x0069 */ char __PADDING__[7];
}; /* size: 0x0070 */

struct SpeexMode
{
  /* 0x0000 */ const void* mode;
  /* 0x0004 */ void* query /* function */;
  /* 0x0008 */ const char* modeName;
  /* 0x000c */ int modeID;
  /* 0x0010 */ int bitstream_version;
  /* 0x0014 */ void* enc_init /* function */;
  /* 0x0018 */ void* enc_destroy /* function */;
  /* 0x001c */ void* enc /* function */;
  /* 0x0020 */ void* dec_init /* function */;
  /* 0x0024 */ void* dec_destroy /* function */;
  /* 0x0028 */ void* dec /* function */;
  /* 0x002c */ void* enc_ctl /* function */;
  /* 0x0030 */ void* dec_ctl /* function */;
}; /* size: 0x0034 */

struct WeaponOptions::CamoLookup
{
  /* 0x0000 */ int index;
  /* 0x0004 */ BOOL isMaterialCamo;
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

union TaggedIndex
{
  union
  {
    /* 0x0000 */ unsigned int asUInt32;
    struct
    {
      /* 0x0000 */ unsigned short tag;
      /* 0x0002 */ short index;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct FxSystemShared
{
  /* 0x0000 */ union TaggedIndex firstFreeElem;
  /* 0x0004 */ union TaggedIndex firstFreeTrailElem;
  /* 0x0008 */ union TaggedIndex firstFreeTrail;
  /* 0x000c */ volatile long activeElemCount;
  /* 0x0010 */ volatile long activeTrailElemCount;
  /* 0x0014 */ volatile long activeTrailCount;
  /* 0x0018 */ volatile long firstActiveEffect;
  /* 0x001c */ volatile long firstNewEffect;
  /* 0x0020 */ volatile long firstFreeEffect;
  /* 0x0024 */ unsigned short activeSpotLightEffectHandle;
  /* 0x0026 */ unsigned short activeSpotLightElemHandle;
  /* 0x0028 */ volatile long activeSpotLightEffectCount;
  /* 0x002c */ volatile long activeSpotLightElemCount;
  /* 0x0030 */ unsigned short allEffectHandles[1024];
  /* 0x0830 */ volatile long iteratorCount;
  /* 0x0834 */ volatile long firstActiveActionPPU;
  /* 0x0838 */ volatile long firstNewActionPPU;
  /* 0x083c */ volatile long firstFreeActionPPU;
  /* 0x0840 */ struct FxPriorityInfo priorityInfo;
  /* 0x0850 */ volatile long needsGarbageCollection;
  /* 0x0854 */ long __PADDING__[3];
}; /* size: 0x0860 */

struct FxSystemContainer
{
  /* 0x0000 */ struct FxSystem system;
  /* 0x0380 */ struct FxSystemShared shared;
}; /* size: 0x0be0 */

struct FxGraph1D
{
  /* 0x0000 */ int intervalCount;
  union
  {
    union
    {
      /* 0x0004 */ float constantValue;
      /* 0x0004 */ float* sampleValue;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
}; /* size: 0x0008 */

struct SaveMemoryGlob
{
  /* 0x0000 */ struct SaveGame migration;
}; /* size: 0x8500 */

struct std::_Pair_base<useList_t *,useList_t *>
{
  /* 0x0000 */ struct useList_t* first;
  /* 0x0004 */ struct useList_t* second;
}; /* size: 0x0008 */

typedef struct _NVVIOCHANNELSTATUS
{
  /* 0x0000 */ unsigned long smpte352;
  /* 0x0004 */ enum _NVVIOSIGNALFORMAT signalFormat;
  /* 0x0008 */ enum _NVVIOBITSPERCOMPONENT bitsPerComponent;
  /* 0x000c */ enum _NVVIOCOMPONENTSAMPLING samplingFormat;
  /* 0x0010 */ enum _NVVIOCOLORSPACE colorSpace;
  /* 0x0014 */ enum _NVVIOLINKID linkID;
} NVVIOCHANNELSTATUS, *PNVVIOCHANNELSTATUS; /* size: 0x0018 */

typedef struct _NVVIOINPUTSTATUS
{
  /* 0x0000 */ struct _NVVIOCHANNELSTATUS vidIn[2][4];
  /* 0x00c0 */ enum _NVVIOCAPTURESTATUS captureStatus;
} NVVIOINPUTSTATUS, *PNVVIOINPUTSTATUS; /* size: 0x00c4 */

typedef struct _NVVIOOUTPUTSTATUS
{
  /* 0x0000 */ enum _NVVIOINPUTOUTPUTSTATUS vid1Out;
  /* 0x0004 */ enum _NVVIOINPUTOUTPUTSTATUS vid2Out;
  /* 0x0008 */ enum _NVVIOSYNCSTATUS sdiSyncIn;
  /* 0x000c */ enum _NVVIOSYNCSTATUS compSyncIn;
  /* 0x0010 */ unsigned long syncEnable;
  /* 0x0014 */ enum _NVVIOSYNCSOURCE syncSource;
  /* 0x0018 */ enum _NVVIOSIGNALFORMAT syncFormat;
  /* 0x001c */ unsigned long frameLockEnable;
  /* 0x0020 */ unsigned long outputVideoLocked;
  /* 0x0024 */ unsigned long dataIntegrityCheckErrorCount;
  /* 0x0028 */ unsigned long dataIntegrityCheckEnabled;
  /* 0x002c */ unsigned long dataIntegrityCheckFailed;
  /* 0x0030 */ unsigned long uSyncSourceLocked;
  /* 0x0034 */ unsigned long uPowerOn;
} NVVIOOUTPUTSTATUS, *PNVVIOOUTPUTSTATUS; /* size: 0x0038 */

class bdCryptoUtils
{
}; /* size: 0x0001 */

struct antilagActorStore_t
{
  /* 0x0000 */ union vec3_t position[32];
  /* 0x0180 */ union vec3_t angles[32];
  /* 0x0300 */ unsigned char actorMoved[32];
}; /* size: 0x0320 */

struct antilagVehicleStore_t
{
  /* 0x0000 */ union vec3_t position[16];
  /* 0x00c0 */ union vec3_t angles[16];
  /* 0x0180 */ unsigned char vehicleMoved[16];
}; /* size: 0x0190 */

struct vehicle_path_node_link_t
{
  /* 0x0000 */ short nextIdx;
  /* 0x0002 */ char Padding_1233[2];
  /* 0x0004 */ float length;
  /* 0x0008 */ union vec3_t dir;
}; /* size: 0x0014 */

struct vn_field_t
{
  /* 0x0000 */ char* name;
  /* 0x0004 */ unsigned int constId;
  /* 0x0008 */ int ofs;
  /* 0x000c */ int size[1];
  /* 0x0010 */ enum fieldtype_t type;
  /* 0x0014 */ BOOL writable;
  /* 0x0015 */ char __PADDING__[3];
}; /* size: 0x0018 */

struct FxMarksCmd
{
  /* 0x0000 */ struct FxSystem* system;
  /* 0x0004 */ const struct GfxLight* visibleLights;
  /* 0x0008 */ int visibleLightCount;
  /* 0x000c */ enum LocalClientNum_t localClientNum;
  /* 0x0010 */ unsigned char updateCameraType;
  /* 0x0011 */ char __PADDING__[3];
}; /* size: 0x0014 */

struct NV_HCLONE_TOPOLOGY_V1
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long numHCloneNodes;
  /* 0x0008 */ struct NV_HCLONE_NODE_V1* pHCloneNodeArray;
  struct /* bitfield */
  {
    /* 0x000c */ unsigned long isMultiHClonePairsEnabled : 1; /* bit position: 0 */
    /* 0x000c */ unsigned long isNWayHCloneNodesEnabled : 1; /* bit position: 1 */
    /* 0x000c */ unsigned long reserved1 : 30; /* bit position: 2 */
  }; /* bitfield */
  /* 0x0010 */ enum NV_HCLONE_HOTPLUG_BEHAVIOR HCloneHotPlugBehavior;
}; /* size: 0x0014 */

struct VehicleLocalPhysics
{
  /* 0x0000 */ struct trace_t groundTrace;
  /* 0x0040 */ int hasGround;
  /* 0x0044 */ int onGround;
  /* 0x0048 */ long __PADDING__[2];
}; /* size: 0x0050 */

struct kbutton_t
{
  /* 0x0000 */ int down[2];
  /* 0x0008 */ unsigned int downtime;
  /* 0x000c */ unsigned int msec;
  /* 0x0010 */ BOOL active;
  /* 0x0011 */ BOOL wasPressed;
  /* 0x0012 */ char Padding_1234[2];
  /* 0x0014 */ float val;
}; /* size: 0x0018 */

struct VehiclePhysicsBackup
{
  /* 0x0000 */ struct vehicle_pathpos_t pathPos;
  /* 0x0144 */ struct vehicle_physic_t phys;
}; /* size: 0x025c */

struct ipFilter_s
{
  /* 0x0000 */ unsigned int mask;
  /* 0x0004 */ unsigned int compare;
}; /* size: 0x0008 */

struct SpawnPoint
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ float weight[9];
  /* 0x0030 */ float baseWeight[9];
  /* 0x0054 */ int entNum;
  /* 0x0058 */ int teamMask;
  /* 0x005c */ float yaw;
  /* 0x0060 */ int id;
  /* 0x0064 */ int orderNum;
  /* 0x0068 */ int dangerous;
  /* 0x006c */ int dangerTimestamp[9];
  /* 0x0090 */ int scoreCullTime[9];
  /* 0x00b4 */ union vec3_t losCheckPos;
}; /* size: 0x00c0 */

struct SpawnClientData
{
  /* 0x0000 */ int lastSpawnInstanceId;
  /* 0x0004 */ int lastSpawnId;
  /* 0x0008 */ int lastSpawnTime;
  /* 0x000c */ int flags;
  /* 0x0010 */ int pointTeam;
  /* 0x0014 */ int influencerTeam;
  /* 0x0018 */ int numInfluencers;
  /* 0x001c */ int numPresets;
  /* 0x0020 */ int numSpawnPoints;
  /* 0x0024 */ int numClients;
  /* 0x0028 */ BOOL clientPosDataArchived;
  /* 0x0029 */ char __PADDING__[3];
}; /* size: 0x002c */

struct SpawnSystem_t
{
  /* 0x0000 */ struct SortedPointArray sortedTeamSpawnPoints[9];
  /* 0x1c68 */ struct SpawnPoint spawnPoints[200];
  /* 0xb268 */ int spawnPointCount;
  /* 0xb26c */ BOOL spawnPointsArchived;
  /* 0xb26d */ char Padding_1235[3];
  /* 0xb270 */ int influencerPresetCount;
  /* 0xb274 */ struct SpawnInfluencerPreset influencerPresets[256];
  /* 0xf274 */ struct SpawnInfluencer influencers[272];
  /* 0x182f4 */ struct SpawnInfluencer* sortedInfluencers[272];
  /* 0x18734 */ int sortedInfluencerCount;
  /* 0x18738 */ int lastInfluencerSortTime;
  /* 0x1873c */ enum eSpawnSystemDebugMode debugMode;
  /* 0x18740 */ int debugHighlightedSpawnPoint;
  /* 0x18744 */ int spawnInstanceCount;
  /* 0x18748 */ int influencerInstanceCount;
  /* 0x1874c */ struct SpawnClientData clientData[18];
  /* 0x18a64 */ struct SpawnClientPosData clientsPosArchive[18][18];
  /* 0x1a8c4 */ unsigned char demoClientBuffer[10000][18];
  /* 0x467e4 */ int demoClientBufferPos[18];
  /* 0x4682c */ BOOL demoRecordingEnabled;
  /* 0x4682d */ char Padding_1236[3];
  /* 0x46830 */ int demoBytesWritten;
  /* 0x46834 */ int lastSpawnPointId;
  /* 0x46838 */ int spawnPointIdShift;
}; /* size: 0x4683c */

struct XAssetPool<StringTable,1>
{
  /* 0x0000 */ union XAssetPoolEntry<StringTable>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<StringTable> entries[1];
}; /* size: 0x0018 */

struct XAssetPool<ddlDef_t,1>
{
  /* 0x0000 */ union XAssetPoolEntry<ddlDef_t>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<ddlDef_t> entries[1];
}; /* size: 0x0020 */

struct std::pair<int *,int *>
{
}; /* size: 0x0008 */

struct FxElemBits
{
  /* 0x0000 */ volatile long bits[64];
}; /* size: 0x0100 */

struct ClientTriggerAabbNode
{
  /* 0x0000 */ struct Bounds bounds;
  /* 0x0018 */ unsigned short firstChild;
  /* 0x001a */ unsigned short childCount;
}; /* size: 0x001c */

struct GfxPosColorVertex
{
  /* 0x0000 */ union vec3_t xyz;
  /* 0x000c */ union GfxColor color;
}; /* size: 0x0010 */

struct std::_Pair_base<int *,int *>
{
  /* 0x0000 */ int* first;
  /* 0x0004 */ int* second;
}; /* size: 0x0008 */

struct DEMO_SpawnInfluencerInstance
{
  /* 0x0000 */ unsigned short index;
  /* 0x0002 */ unsigned short presetIndex;
  /* 0x0004 */ short entityNum;
  /* 0x0006 */ short origin[3];
  /* 0x000c */ short angles[3];
  /* 0x0012 */ unsigned short length;
  /* 0x0014 */ short score;
}; /* size: 0x0016 */

struct SpawnFuncEntry
{
  /* 0x0000 */ const char* classname;
  /* 0x0004 */ void* callback /* function */;
}; /* size: 0x0008 */

typedef struct _NV_BOARD_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned char BoardNum[16];
} NV_BOARD_INFO, *PNV_BOARD_INFO; /* size: 0x0014 */

struct game_hudelem_s
{
  /* 0x0000 */ struct hudelem_s elem;
  /* 0x007c */ enum ClientNum_t clientNum;
  /* 0x0080 */ int team;
  /* 0x0084 */ int archived;
}; /* size: 0x0088 */

struct XAssetPool<TracerDef,1>
{
  /* 0x0000 */ union XAssetPoolEntry<TracerDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<TracerDef> entries[1];
}; /* size: 0x0084 */

struct scoreInfoTable_t
{
  /* 0x0000 */ struct scoreInfo_t scoreInfos[512];
  /* 0x1800 */ int numScoreInfos;
}; /* size: 0x1804 */

struct std::_Pair_base<DBReorderAssetEntry *,DBReorderAssetEntry *>
{
  /* 0x0000 */ struct DBReorderAssetEntry* first;
  /* 0x0004 */ struct DBReorderAssetEntry* second;
}; /* size: 0x0008 */

class bdFacebookProfilePicture
{
  /* 0x0000 */ long Padding_1237[2];
  /* 0x0008 */ unsigned __int64 m_accountID;
  /* 0x0010 */ unsigned int m_pictureDataLength;
  /* 0x0014 */ unsigned char m_pictureData[16384];
}; /* size: 0x4018 */

struct NV_INFOFRAME_AUDIO
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long codingType : 5; /* bit position: 0 */
    /* 0x0000 */ unsigned long codingExtensionType : 6; /* bit position: 5 */
    /* 0x0000 */ unsigned long sampleSize : 3; /* bit position: 11 */
    /* 0x0000 */ unsigned long sampleRate : 4; /* bit position: 14 */
    /* 0x0000 */ unsigned long channelCount : 4; /* bit position: 18 */
    /* 0x0000 */ unsigned long speakerPlacement : 9; /* bit position: 22 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long downmixInhibit : 2; /* bit position: 0 */
    /* 0x0004 */ unsigned long lfePlaybackLevel : 3; /* bit position: 2 */
    /* 0x0004 */ unsigned long levelShift : 5; /* bit position: 5 */
    /* 0x0004 */ unsigned long Future12 : 2; /* bit position: 10 */
    /* 0x0004 */ unsigned long Future2x : 4; /* bit position: 12 */
    /* 0x0004 */ unsigned long Future3x : 4; /* bit position: 16 */
    /* 0x0004 */ unsigned long Future52 : 2; /* bit position: 20 */
    /* 0x0004 */ unsigned long Future6 : 9; /* bit position: 22 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long Future7 : 9; /* bit position: 0 */
    /* 0x0008 */ unsigned long Future8 : 9; /* bit position: 9 */
    /* 0x0008 */ unsigned long Future9 : 9; /* bit position: 18 */
  }; /* bitfield */
  /* 0x000c */ unsigned long Future10 : 9; /* bit position: 0 */
}; /* size: 0x0010 */

struct NV_GPU_CLIENT_POWER_POLICIES_POLICY_STATUS_V1
{
  /* 0x0000 */ enum NV_GPU_CLIENT_POWER_POLICIES_POLICY_ID policyId;
  /* 0x0004 */ struct NV_GPU_CLIENT_POWER_READING_V1 powerLimit;
}; /* size: 0x0010 */

class bdGroupInfo
{
  /* 0x0000 */ long Padding_1238;
  /* 0x0004 */ unsigned char m_groupID;
  /* 0x0005 */ char m_groupName[32];
}; /* size: 0x0028 */

struct NV_GPU_CLIENT_POWER_POLICIES_STATUS_V1
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned char numPolicies;
  /* 0x0005 */ char Padding_1239[3];
  /* 0x0008 */ struct NV_GPU_CLIENT_POWER_POLICIES_POLICY_STATUS_V1 policies[4];
}; /* size: 0x0048 */

struct rankData_t
{
  /* 0x0000 */ int minxp[96];
  /* 0x0180 */ int maxxp[96];
  /* 0x0300 */ int rankId[96];
  /* 0x0480 */ unsigned char unlocks[20][96];
  /* 0x0c00 */ int topRow;
  /* 0x0c04 */ BOOL isValid;
  /* 0x0c05 */ char __PADDING__[3];
}; /* size: 0x0c08 */

struct std::_Pair_base<bot_threat_t *,bot_threat_t *>
{
  /* 0x0000 */ struct bot_threat_t* first;
  /* 0x0004 */ struct bot_threat_t* second;
}; /* size: 0x0008 */

struct PrintChannel
{
  /* 0x0000 */ char name[32];
  /* 0x0020 */ BOOL allowScript;
}; /* size: 0x0021 */

struct FxElemPreVisualState
{
  /* 0x0000 */ float sampleLerp;
  /* 0x0004 */ float sampleLerpInv;
  /* 0x0008 */ const struct FxElemVisStateSample* refStateMain;
  /* 0x000c */ const struct FxElemVisStateSample* refState;
  /* 0x0010 */ int randomSeed;
  /* 0x0014 */ float distanceFade;
  /* 0x0018 */ float occlusionFade;
}; /* size: 0x001c */

struct FxTrailDrawState
{
  /* 0x0000 */ int exactSegmentCount;
  /* 0x0004 */ unsigned short lastRandomSeed;
  /* 0x0006 */ char __PADDING__[2];
}; /* size: 0x0008 */

struct EntHandleList
{
  /* 0x0000 */ unsigned short infoIndex;
}; /* size: 0x0002 */

struct tsVote_t
{
  /* 0x0000 */ struct SubpartyInfo* party;
  /* 0x0004 */ int bid;
  /* 0x0008 */ BOOL valid;
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

struct tsTeam_t
{
  /* 0x0000 */ int id;
  /* 0x0004 */ int partyCount;
  /* 0x0008 */ float skill;
  /* 0x000c */ struct SubpartyInfo* parties[18];
  /* 0x0054 */ struct tsVote_t vote;
}; /* size: 0x0060 */

struct FxProfileEntry
{
  /* 0x0000 */ const struct FxEffectDef* effectDef;
  /* 0x0004 */ int effectCount;
  /* 0x0008 */ int activeElemCount;
  /* 0x000c */ int pendingElemCount;
  /* 0x0010 */ int trailCount;
  /* 0x0014 */ int activeTrailElemCount;
  /* 0x0018 */ int pendingTrailElemCount;
}; /* size: 0x001c */

struct Avoid
{
  /* 0x0000 */ union vec3_t pos;
  /* 0x000c */ float radius;
  /* 0x0010 */ float maxSpeed;
  /* 0x0014 */ float timeHorizon;
  /* 0x0018 */ union vec2_t vel;
  /* 0x0020 */ union vec2_t prefVel;
  /* 0x0028 */ int priority;
  /* 0x002c */ int entnum;
  /* 0x0030 */ int flags;
}; /* size: 0x0034 */

struct FxCmd
{
  /* 0x0000 */ struct FxSystem* system;
  /* 0x0004 */ float elemRemoveChance;
  /* 0x0008 */ const struct GfxLight* visibleLights;
  /* 0x000c */ int visibleLightCount;
  /* 0x0010 */ int updateEffectBegin;
  /* 0x0014 */ int updateEffectEnd;
  /* 0x0018 */ enum LocalClientNum_t localClientNum;
  /* 0x001c */ unsigned char updateCameraType;
  /* 0x001d */ BOOL isInfraredDraw;
  /* 0x001e */ char __PADDING__[2];
}; /* size: 0x0020 */

struct NV_DX_CREATE_VIDEO_PARAMS2
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long cvFlags;
  /* 0x0008 */ unsigned long flipQueueHint;
  /* 0x000c */ unsigned long maxSrcWidth;
  /* 0x0010 */ unsigned long maxSrcHeight;
  /* 0x0014 */ unsigned long dwNumOvlSurfs;
  /* 0x0018 */ struct NVDX_ObjectHandle__* hOvlSurfs[6];
}; /* size: 0x0030 */

struct NV_GPU_FLAT_PANEL_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum _NV_GPU_FLATPANEL_SIGNAL_TYPE signalType;
  /* 0x0008 */ enum _NV_GPU_FLATPANEL_SIGNAL_LINK linkType;
  /* 0x000c */ enum _NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_LANES displayPortLanes;
  /* 0x0010 */ unsigned long colorFlags;
  struct /* bitfield */
  {
    /* 0x0014 */ unsigned long hdmiCapable : 1; /* bit position: 0 */
    /* 0x0014 */ unsigned long scalerDisabled : 1; /* bit position: 1 */
    /* 0x0014 */ unsigned long refreshRateLocked : 1; /* bit position: 2 */
  }; /* bitfield */
}; /* size: 0x0018 */

struct NV_3D_SETTING_RANGE
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum NV_3D_PROPERTY settingName;
  /* 0x0008 */ unsigned long value[25];
  /* 0x006c */ unsigned long validRangeCount;
}; /* size: 0x0070 */

struct NV_DISPLAY_PATH
{
  /* 0x0000 */ unsigned long deviceMask;
  /* 0x0004 */ unsigned long sourceId;
  /* 0x0008 */ unsigned long bPrimary : 1; /* bit position: 0 */
  /* 0x000c */ enum _NV_GPU_CONNECTOR_TYPE connector;
  /* 0x0010 */ unsigned long width;
  /* 0x0014 */ unsigned long height;
  /* 0x0018 */ unsigned long depth;
  /* 0x001c */ enum _NV_FORMAT colorFormat;
  /* 0x0020 */ enum _NV_ROTATE rotation;
  /* 0x0024 */ enum _NV_SCALING scaling;
  /* 0x0028 */ unsigned long refreshRate;
  /* 0x002c */ unsigned long interlaced : 1; /* bit position: 0 */
  /* 0x0030 */ enum _NV_DISPLAY_TV_FORMAT tvFormat;
  /* 0x0034 */ unsigned long posx;
  /* 0x0038 */ unsigned long posy;
  struct /* bitfield */
  {
    /* 0x003c */ unsigned long bGDIPrimary : 1; /* bit position: 0 */
    /* 0x003c */ unsigned long bForceModeSet : 1; /* bit position: 1 */
    /* 0x003c */ unsigned long bFocusDisplay : 1; /* bit position: 2 */
    /* 0x003c */ unsigned long gpuId : 24; /* bit position: 3 */
  }; /* bitfield */
}; /* size: 0x0040 */

struct NV_DISPLAY_PATH_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long count;
  /* 0x0008 */ struct NV_DISPLAY_PATH path[4];
}; /* size: 0x0108 */

struct ConDrawInputGlob
{
  /* 0x0000 */ char autoCompleteChoice[64];
  /* 0x0040 */ int matchIndex;
  /* 0x0044 */ int matchCount;
  /* 0x0048 */ const char* inputText;
  /* 0x004c */ int inputTextLen;
  /* 0x0050 */ BOOL hasExactMatch;
  /* 0x0051 */ BOOL mayAutoComplete;
  /* 0x0052 */ char Padding_1240[2];
  /* 0x0054 */ float x;
  /* 0x0058 */ float y;
  /* 0x005c */ float leftX;
  /* 0x0060 */ float fontHeight;
}; /* size: 0x0064 */

struct ID2D1DCRenderTarget
{
}; /* size: 0x0004 */

struct IDirect3DPixelShader9
{
}; /* size: 0x0004 */

struct NV_DISPLAY_DVC_INFO_EX
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ int currentLevel;
  /* 0x0008 */ int minLevel;
  /* 0x000c */ int maxLevel;
  /* 0x0010 */ int defaultLevel;
}; /* size: 0x0014 */

struct EffectDefGetter
{
  /* 0x0000 */ const struct FxEffectDef* mEffectDef;
}; /* size: 0x0004 */

struct ElemDefGetter
{
  /* 0x0000 */ const struct FxElemDef* mElemDef;
}; /* size: 0x0004 */

struct WeaponAttachmentUniqueFull
{
  /* 0x0000 */ struct WeaponAttachmentUnique attachment;
  /* 0x01a8 */ const char* szXAnims[88];
  /* 0x0308 */ unsigned short hideTags[32];
  /* 0x0348 */ float locationDamageMultipliers[21];
}; /* size: 0x039c */

struct D3D10_TEX2DMS_RTV
{
  /* 0x0000 */ unsigned int UnusedField_NothingToDefine;
}; /* size: 0x0004 */

struct FxUpdateElem
{
  /* 0x0000 */ struct FxEffect* effect;
  /* 0x0004 */ const struct FxEffectDef* effectDef;
  /* 0x0008 */ const struct FxElemDef* elemDef;
  /* 0x000c */ int elemIndex;
  /* 0x0010 */ int atRestFraction;
  /* 0x0014 */ struct orientation_t orient;
  /* 0x0044 */ int randomSeed;
  /* 0x0048 */ int sequence;
  /* 0x004c */ float msecLifeSpan;
  /* 0x0050 */ int msecElemBegin;
  /* 0x0054 */ int msecElemEnd;
  /* 0x0058 */ int msecUpdateBegin;
  /* 0x005c */ int msecUpdateEnd;
  /* 0x0060 */ float msecElapsed;
  /* 0x0064 */ float normTimeUpdateEnd;
  /* 0x0068 */ float* elemOrigin;
  /* 0x006c */ float* elemBaseVel;
  /* 0x0070 */ union vec3_t posWorld;
  /* 0x007c */ BOOL onGround;
  /* 0x007d */ char Padding_1241[3];
  /* 0x0080 */ int physObjId;
  /* 0x0084 */ struct ElemDefGetter elemDefGetter;
}; /* size: 0x0088 */

struct NV_HDMI_STEREO_MODE
{
  /* 0x0000 */ unsigned short HVisible;
  /* 0x0002 */ unsigned short VVisible;
  /* 0x0004 */ unsigned short HActive;
  /* 0x0006 */ unsigned short VActive;
  /* 0x0008 */ unsigned short VActiveSpace[2];
  /* 0x000c */ unsigned short rr;
  /* 0x000e */ char Padding_1242[2];
  /* 0x0010 */ enum NV_HDMI_STEREO_TYPE stereoType;
}; /* size: 0x0014 */

struct D3D10_COUNTER_DESC
{
  /* 0x0000 */ enum D3D10_COUNTER Counter;
  /* 0x0004 */ unsigned int MiscFlags;
}; /* size: 0x0008 */

struct FxBeamInfo
{
  /* 0x0000 */ struct FxBeam beams[96];
  /* 0x1e00 */ volatile long beamCount;
}; /* size: 0x1e04 */

struct NV_GPU_PERF_PSTATES_INFO_V2
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long flags;
  /* 0x0008 */ unsigned long numPstates;
  /* 0x000c */ unsigned long numClocks;
  /* 0x0010 */ unsigned long numVoltages;
  /* 0x0014 */ struct
  {
    /* 0x0014 */ enum _NV_GPU_PERF_PSTATE_ID pstateId;
    /* 0x0018 */ unsigned long flags;
    /* 0x001c */ struct
    {
      /* 0x001c */ enum _NV_GPU_PUBLIC_CLOCK_ID domainId;
      /* 0x0020 */ unsigned long flags;
      /* 0x0024 */ unsigned long freq;
    } /* size: 0x000c */ clocks[32];
    /* 0x019c */ struct
    {
      /* 0x019c */ enum _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID domainId;
      /* 0x01a0 */ unsigned long flags;
      /* 0x01a4 */ unsigned long mvolt;
    } /* size: 0x000c */ voltages[16];
  } /* size: 0x0248 */ pstates[16];
}; /* size: 0x2494 */

struct FxElemRenderVisualState
{
  /* 0x0000 */ union vec2_t size;
}; /* size: 0x0008 */

struct FxElemRenderState
{
  /* 0x0000 */ struct orientation_t orient;
  /* 0x0030 */ struct FxElemPreVisualState preVisState;
  /* 0x004c */ union vec3_t posWorld;
  /* 0x0058 */ struct FxElemRenderVisualState visState;
  /* 0x0060 */ int randomSeed;
  /* 0x0064 */ float msecLifeSpan;
  /* 0x0068 */ float msecElapsed;
  /* 0x006c */ float normTimeUpdateEnd;
  /* 0x0070 */ struct FxColor4b baseColor;
  /* 0x0074 */ long __PADDING__[3];
}; /* size: 0x0080 */

struct FxSmpDrawBuffer
{
  /* 0x0000 */ struct FxElemBits elemDrawBits;
  /* 0x0100 */ struct EffectElemCountInfo effectCountInfo[1024];
  /* 0x4100 */ struct EffectElementDraw effectElementDraw[1024];
  /* 0x8100 */ struct FxElemRenderState elemRenderState[2048];
  /* 0x48100 */ struct FxDrawTrailResourceRequired resReqArray[1024];
  /* 0x4a100 */ struct FxDrawTrailResource resArray[1024];
  /* 0x4c100 */ struct FxTrailDrawState trailDrawState[128];
  /* 0x4c500 */ unsigned short resReqTrailEffects[1024];
  /* 0x4cd00 */ volatile long effectCountInfoIndex;
  /* 0x4cd04 */ volatile long numTrailEffectsAlloced;
  /* 0x4cd08 */ long __PADDING__[2];
}; /* size: 0x4cd10 */

struct ID3D10Texture1D
{
}; /* size: 0x0004 */

struct D3D10_DEPTH_STENCILOP_DESC
{
  /* 0x0000 */ enum D3D10_STENCIL_OP StencilFailOp;
  /* 0x0004 */ enum D3D10_STENCIL_OP StencilDepthFailOp;
  /* 0x0008 */ enum D3D10_STENCIL_OP StencilPassOp;
  /* 0x000c */ enum D3D10_COMPARISON_FUNC StencilFunc;
}; /* size: 0x0010 */

struct D3D10_DEPTH_STENCIL_DESC
{
  /* 0x0000 */ int DepthEnable;
  /* 0x0004 */ enum D3D10_DEPTH_WRITE_MASK DepthWriteMask;
  /* 0x0008 */ enum D3D10_COMPARISON_FUNC DepthFunc;
  /* 0x000c */ int StencilEnable;
  /* 0x0010 */ unsigned char StencilReadMask;
  /* 0x0011 */ unsigned char StencilWriteMask;
  /* 0x0012 */ char Padding_1243[2];
  /* 0x0014 */ struct D3D10_DEPTH_STENCILOP_DESC FrontFace;
  /* 0x0024 */ struct D3D10_DEPTH_STENCILOP_DESC BackFace;
}; /* size: 0x0034 */

struct PriorityDebugEntry
{
  /* 0x0000 */ const struct FxEffectDef* def;
  /* 0x0004 */ int count;
}; /* size: 0x0008 */

struct NVVIOTOPOLOGYTARGET
{
  /* 0x0000 */ struct NvPhysicalGpuHandle__* hPhysicalGpu;
  /* 0x0004 */ struct NvVioHandle__* hVioHandle;
  /* 0x0008 */ unsigned long vioId;
  /* 0x000c */ unsigned long outputId;
}; /* size: 0x0010 */

typedef struct _NV_VIO_TOPOLOGY
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long vioTotalDeviceCount;
  /* 0x0008 */ struct NVVIOTOPOLOGYTARGET vioTarget[8];
} NV_VIO_TOPOLOGY, *PNV_VIO_TOPOLOGY; /* size: 0x0088 */

struct MarkGenContext
{
  /* 0x0000 */ enum LocalClientNum_t localClientNum;
  /* 0x0004 */ struct Material* material;
  /* 0x0008 */ float radius;
  /* 0x000c */ const unsigned char* nativeColor;
  /* 0x0010 */ const struct FxMarkAlphaFade* markAlpha;
}; /* size: 0x0014 */

struct NvEventHandle__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct visField_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int offset;
  /* 0x0008 */ int fieldType;
}; /* size: 0x000c */

struct NV_HDCP_CN
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 uSessionID : 37; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 uDisplay : 3; /* bit position: 37 */
    /* 0x0000 */ unsigned __int64 uReserved : 24; /* bit position: 40 */
  }; /* bitfield */
}; /* size: 0x0008 */

struct NvMonitorHandle__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct D3DXVECTOR3
{
}; /* size: 0x000c */

struct NvDRSSessionHandle__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct ID3D10Device
{
}; /* size: 0x0004 */

struct AnimStateDefProperty
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int flag;
  /* 0x0008 */ void* simpleCallback /* function */;
  /* 0x000c */ void* tokenizeCallback /* function */;
}; /* size: 0x0010 */

struct XAssetPool<GfxLightDef,1>
{
  /* 0x0000 */ union XAssetPoolEntry<GfxLightDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<GfxLightDef> entries[1];
}; /* size: 0x0014 */

struct FxDrawSpriteGeoCmd
{
  /* 0x0000 */ struct EffectElementDraw* effectElemDrawFirst;
  /* 0x0004 */ struct EffectElementDraw* effectElemDrawLast;
  /* 0x0008 */ struct FxElemBits* elemDrawBits;
  /* 0x000c */ struct FxSystem* system;
  /* 0x0010 */ int drawTime;
  /* 0x0014 */ struct FxElemRenderState* elemRenderStates;
  /* 0x0018 */ int cameraType;
}; /* size: 0x001c */

struct NV_GPU_GPIO_PIN_DATA
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long gpioPinNumber;
  /* 0x0008 */ unsigned long gpioDataReadWrite;
  /* 0x000c */ enum NVAPI_GPIO_DIRECTION gpioDirection;
}; /* size: 0x0010 */

struct CompassZombie
{
  /* 0x0000 */ int entityNum;
  /* 0x0004 */ int lastUpdate;
  /* 0x0008 */ union vec2_t lastPos;
  /* 0x0010 */ float lastYaw;
  /* 0x0014 */ enum team_t team;
  /* 0x0018 */ int ownerIndex;
  /* 0x001c */ BOOL enemy;
  /* 0x001d */ char __PADDING__[3];
}; /* size: 0x0020 */

struct std::pair<DynEntSortStruct *,DynEntSortStruct *>
{
}; /* size: 0x0008 */

struct RumbleInfo
{
  /* 0x0000 */ int rumbleNameIndex;
  /* 0x0004 */ float duration;
  /* 0x0008 */ float range;
  /* 0x000c */ struct RumbleGraph* highRumbleGraph;
  /* 0x0010 */ struct RumbleGraph* lowRumbleGraph;
  /* 0x0014 */ int fadeWithDistance;
  /* 0x0018 */ int broadcast;
  /* 0x001c */ const struct dvar_t* durationDvar;
  /* 0x0020 */ const struct dvar_t* loopDvar;
}; /* size: 0x0024 */

struct NV_DRIVER_MEMORY_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long dedicatedVideoMemory;
  /* 0x0008 */ unsigned long systemVideoMemory;
  /* 0x000c */ unsigned long sharedSystemMemory;
}; /* size: 0x0010 */

typedef struct _NVAPI_D3D9_DMA_MAP_PARAMS
{
  /* 0x0000 */ unsigned long dwWidth;
  /* 0x0004 */ unsigned long dwHeight;
  /* 0x0008 */ unsigned long dwFormat;
  /* 0x000c */ void* pMemory;
  /* 0x0010 */ struct NVDX_ObjectHandle__* hSysmemSurface;
} NVAPI_D3D9_DMA_MAP_PARAMS, *PNVAPI_D3D9_DMA_MAP_PARAMS; /* size: 0x0014 */

typedef struct _NVAPI_D3D9_DMA_EVENT_PARAMS
{
  /* 0x0000 */ void* hCompletionEvent;
} NVAPI_D3D9_DMA_EVENT_PARAMS, *PNVAPI_D3D9_DMA_EVENT_PARAMS; /* size: 0x0004 */

typedef struct _NVAPI_D3D9_DMA_COLOR_MATRIX_PARAMS
{
  /* 0x0000 */ unsigned long colorMatrixFlags;
  /* 0x0004 */ float* colorMatrix;
} NVAPI_D3D9_DMA_COLOR_MATRIX_PARAMS, *PNVAPI_D3D9_DMA_COLOR_MATRIX_PARAMS; /* size: 0x0008 */

typedef struct _NVAPI_D3D9_DMA_PARAMS
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long dwCommand;
  union
  {
    /* 0x0008 */ struct _NVAPI_D3D9_DMA_DESCRIBE_PARAMS DescribeParams;
    /* 0x0008 */ struct _NVAPI_D3D9_DMA_MAP_PARAMS MapParams;
    /* 0x0008 */ struct _NVAPI_D3D9_DMA_UNMAP_PARAMS UnmapParams;
    /* 0x0008 */ struct _NVAPI_D3D9_DMA_EVENT_PARAMS EventParams;
    /* 0x0008 */ struct _NVAPI_D3D9_DMA_TRANSFER_PARAMS TransferParams;
    struct
    {
      /* 0x0008 */ struct _NVAPI_D3D9_DMA_COLOR_MATRIX_PARAMS ColorMatrixParams;
      /* 0x0010 */ long __PADDING__[6];
    }; /* size: 0x0020 */
  }; /* size: 0x0020 */
} NVAPI_D3D9_DMA_PARAMS, *PNVAPI_D3D9_DMA_PARAMS; /* size: 0x0028 */

typedef struct _NV_GAMUT_METADATA_RANGE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long GBD_Color_Space : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned long GBD_Color_Precision : 2; /* bit position: 3 */
    /* 0x0000 */ unsigned long Rsvd : 2; /* bit position: 5 */
    /* 0x0000 */ unsigned long Format_Flag : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned long Min_Red_Data : 12; /* bit position: 8 */
    /* 0x0000 */ unsigned long Max_Red_Data : 12; /* bit position: 20 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long Min_Green_Data : 12; /* bit position: 0 */
    /* 0x0004 */ unsigned long Max_Green_Data : 12; /* bit position: 12 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long Min_Blue_Data : 12; /* bit position: 0 */
    /* 0x0008 */ unsigned long Max_Blue_Data : 12; /* bit position: 12 */
  }; /* bitfield */
} NV_GAMUT_METADATA_RANGE, *PNV_GAMUT_METADATA_RANGE; /* size: 0x000c */

typedef struct _NV_GAMUT_METADATA_VERTICES
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long GBD_Color_Space : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned long GBD_Color_Precision : 2; /* bit position: 3 */
    /* 0x0000 */ unsigned long Rsvd : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long Facet_Mode : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned long Format_Flag : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned long Number_Vertices_H : 8; /* bit position: 8 */
    /* 0x0000 */ unsigned long Number_Vertices_L : 8; /* bit position: 16 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long Black_Y_R : 12; /* bit position: 0 */
    /* 0x0004 */ unsigned long Black_Cb_G : 12; /* bit position: 12 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long Black_Cr_B : 12; /* bit position: 0 */
    /* 0x0008 */ unsigned long Red_Y_R : 12; /* bit position: 12 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x000c */ unsigned long Red_Cb_G : 12; /* bit position: 0 */
    /* 0x000c */ unsigned long Red_Cr_B : 12; /* bit position: 12 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0010 */ unsigned long Green_Y_R : 12; /* bit position: 0 */
    /* 0x0010 */ unsigned long Green_Cb_G : 12; /* bit position: 12 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0014 */ unsigned long Green_Cr_B : 12; /* bit position: 0 */
    /* 0x0014 */ unsigned long Blue_Y_R : 12; /* bit position: 12 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0018 */ unsigned long Blue_Cb_G : 12; /* bit position: 0 */
    /* 0x0018 */ unsigned long Blue_Cr_B : 12; /* bit position: 12 */
  }; /* bitfield */
} NV_GAMUT_METADATA_VERTICES, *PNV_GAMUT_METADATA_VERTICES; /* size: 0x001c */

typedef struct _NV_GAMUT_METADATA
{
  union
  {
    union
    {
      /* 0x0000 */ struct _NV_GAMUT_METADATA_RANGE rangeData;
      /* 0x0000 */ struct _NV_GAMUT_METADATA_VERTICES verticesData;
    }; /* size: 0x001c */
  } /* size: 0x001c */ data;
} NV_GAMUT_METADATA, *PNV_GAMUT_METADATA; /* size: 0x001c */

typedef struct _NVAPI_STEREO_HANDSHAKE_RESPONSE_PARAMS
{
  /* 0x0000 */ struct NvGUID vendorGUID;
  /* 0x0010 */ unsigned char response[20];
  /* 0x0024 */ unsigned long flags;
} NVAPI_STEREO_HANDSHAKE_RESPONSE_PARAMS, *PNVAPI_STEREO_HANDSHAKE_RESPONSE_PARAMS; /* size: 0x0028 */

struct matchSummaryWeaponStatHash_t
{
  /* 0x0000 */ int statNameHash;
  /* 0x0004 */ int limit;
  /* 0x0008 */ char statName[16];
}; /* size: 0x0018 */

struct PartyInfo
{
  /* 0x0000 */ int flags;
  /* 0x0004 */ struct XSESSION_INFO info;
  /* 0x0041 */ char Padding_1244[3];
  /* 0x0044 */ struct netadr_t serverAddr;
  /* 0x0058 */ int occupiedPublicSlots;
  /* 0x005c */ int occupiedPrivateSlots;
  /* 0x0060 */ int numPublicSlots;
  /* 0x0064 */ int numPrivateSlots;
  /* 0x0068 */ float skill;
  /* 0x006c */ int geo1;
  /* 0x0070 */ int geo2;
  /* 0x0074 */ int geo3;
  /* 0x0078 */ int geo4;
  /* 0x007c */ int ping;
  /* 0x0080 */ int avgPing;
  /* 0x0084 */ long Padding_1245;
  /* 0x0088 */ unsigned __int64 xuid;
  /* 0x0090 */ int upload;
  /* 0x0094 */ int mapPacks;
}; /* size: 0x0098 */

struct dwGetUCDRegistrationTask
{
  /* 0x0000 */ class bdUCDAccountStatus* ucdAccountStatus;
}; /* size: 0x0004 */

typedef struct _NVAPI_STEREO_HANDSHAKE_CHALLENGE_PARAMS
{
  /* 0x0000 */ unsigned char challenge[16];
} NVAPI_STEREO_HANDSHAKE_CHALLENGE_PARAMS, *PNVAPI_STEREO_HANDSHAKE_CHALLENGE_PARAMS; /* size: 0x0010 */

typedef struct _NVAPI_STEREO_HANDSHAKE_PARAMS
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long dwCommand;
  union
  {
    /* 0x0008 */ struct _NVAPI_STEREO_HANDSHAKE_CHALLENGE_PARAMS ChallengeParams;
    /* 0x0008 */ struct _NVAPI_STEREO_HANDSHAKE_RESPONSE_PARAMS ResponseParams;
  }; /* size: 0x0028 */
} NVAPI_STEREO_HANDSHAKE_PARAMS, *PNVAPI_STEREO_HANDSHAKE_PARAMS; /* size: 0x0030 */

struct PlayerRank
{
  /* 0x0000 */ unsigned __int64 xuid;
  /* 0x0008 */ int rank;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

typedef struct _NVAPI_VIDEO_FEATURE_DETAILS
{
  /* 0x0000 */ enum _NVAPI_VIDEO_FEATURE eFeature;
  /* 0x0004 */ enum _NVAPI_VIDEO_ENGINES eEngine;
  /* 0x0008 */ enum _NVAPI_VIDEO_DRIVER_ENTRY_POINT eEntryPoint;
  /* 0x000c */ unsigned long dwReserved;
} NVAPI_VIDEO_FEATURE_DETAILS, *PNVAPI_VIDEO_FEATURE_DETAILS; /* size: 0x0010 */

class phys_list_condition_functor_has_user_rigid_body
{
}; /* size: 0x0001 */

struct broad_phase_prolog_task_input
{
  /* 0x0000 */ class phys_vec3* m_aabb_min;
  /* 0x0004 */ class phys_vec3* m_aabb_max;
}; /* size: 0x0008 */

class bdMessage
{
  /* 0x0000 */ long Padding_1246[2];
  /* 0x0008 */ unsigned char m_type;
  /* 0x0009 */ char Padding_1247[3];
  /* 0x000c */ class bdReference<bdBitBuffer> m_payload;
  /* 0x0010 */ BOOL m_payloadTypeChecked;
  /* 0x0011 */ char Padding_1248[3];
  /* 0x0014 */ class bdReference<bdByteBuffer> m_unencPayload;
}; /* size: 0x0018 */

class phys_free_list<broad_phase_collision_pair>::iterator
{
  /* 0x0000 */ class phys_free_list<broad_phase_collision_pair>::T_internal_base* m_ptr;
}; /* size: 0x0004 */

struct rankTierData_t
{
  /* 0x0000 */ int tierStep0Limits[8];
  /* 0x0020 */ float tierSkillLimits[16][8];
  /* 0x0220 */ int topTier;
  /* 0x0224 */ int topRank;
  /* 0x0228 */ BOOL isValid;
  /* 0x0229 */ char __PADDING__[3];
}; /* size: 0x022c */

struct XBlock
{
  /* 0x0000 */ unsigned char* data;
  /* 0x0004 */ unsigned int size;
}; /* size: 0x0008 */

struct NV_DISPLAY_PORT_CONFIG
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum NV_DP_LINK_RATE linkRate;
  /* 0x0008 */ enum NV_DP_LANE_COUNT laneCount;
  /* 0x000c */ enum NV_DP_COLOR_FORMAT colorFormat;
  /* 0x0010 */ enum NV_DP_DYNAMIC_RANGE dynamicRange;
  /* 0x0014 */ enum NV_DP_COLORIMETRY colorimetry;
  /* 0x0018 */ enum NV_DP_BPC bpc;
  struct /* bitfield */
  {
    /* 0x001c */ unsigned long isHPD : 1; /* bit position: 0 */
    /* 0x001c */ unsigned long isSetDeferred : 1; /* bit position: 1 */
    /* 0x001c */ unsigned long isChromaLpfOff : 1; /* bit position: 2 */
    /* 0x001c */ unsigned long isDitherOff : 1; /* bit position: 3 */
    /* 0x001c */ unsigned long testLinkTrain : 1; /* bit position: 4 */
    /* 0x001c */ unsigned long testColorChange : 1; /* bit position: 5 */
  }; /* bitfield */
}; /* size: 0x0020 */

typedef struct _NVAPI_SET_VIDEO_STATE_COMPONENT
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long componentID;
  /* 0x0008 */ unsigned long enable;
  /* 0x000c */ unsigned long setToValue;
  /* 0x0010 */ unsigned __int64 setToAlgo;
  /* 0x0018 */ unsigned long retStatus;
  /* 0x001c */ unsigned long reserved;
  union
  {
    /* 0x0020 */ unsigned __int64 qwReserved[4];
    struct
    {
      struct
      {
        /* 0x0020 */ unsigned long dwAppKey;
        struct /* bitfield */
        {
          /* 0x0024 */ unsigned long bTopPriority : 1; /* bit position: 0 */
          /* 0x0024 */ unsigned long bHasCustomAlgo : 1; /* bit position: 1 */
          /* 0x0024 */ unsigned long bReserved : 30; /* bit position: 2 */
        }; /* bitfield */
        struct
        {
          /* 0x0028 */ unsigned __int64 pData;
          /* 0x0030 */ unsigned long dwSize;
          /* 0x0034 */ long __PADDING__[1];
        } /* size: 0x0010 */ customAlgo;
      } /* size: 0x0018 */ appInfo;
      /* 0x0038 */ long __PADDING__[2];
    }; /* size: 0x0020 */
  }; /* size: 0x0020 */
} NVAPI_SET_VIDEO_STATE_COMPONENT, *PNVAPI_SET_VIDEO_STATE_COMPONENT; /* size: 0x0040 */

struct peerResults_t
{
  /* 0x0000 */ unsigned int receivedPacketCount;
  /* 0x0004 */ unsigned int totalLatencyMS;
  /* 0x0008 */ float m;
  /* 0x000c */ float s;
}; /* size: 0x0010 */

struct tempHostResults_t
{
  /* 0x0000 */ struct peerResults_t peerResults;
  /* 0x0010 */ enum ClientNum_t clientnum;
  /* 0x0014 */ enum connectionType_e connectionType;
}; /* size: 0x0018 */

struct NV_COPROC_FLAGS_EX
{
  /* 0x0000 */ unsigned long version;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long is_IGPU_MODE_ONLY : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long is_DGPU_MODE_ONLY : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned long reserved : 30; /* bit position: 2 */
  }; /* bitfield */
}; /* size: 0x0008 */

struct GfxExtraCamParms
{
  /* 0x0000 */ unsigned int multiExtraCamIndex;
  /* 0x0004 */ enum GfxExtraCamParms::eExtraCamRenderMode renderMode;
}; /* size: 0x0008 */

struct XAssetPool<GfxLightDef,32>
{
  /* 0x0000 */ union XAssetPoolEntry<GfxLightDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<GfxLightDef> entries[32];
}; /* size: 0x0204 */

struct XAssetPool<MenuList,164>
{
  /* 0x0000 */ union XAssetPoolEntry<MenuList>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<MenuList> entries[164];
}; /* size: 0x07b4 */

struct CollisionBorder
{
  /* 0x0000 */ union vec3_t distEq;
  /* 0x000c */ float zBase;
  /* 0x0010 */ float zSlope;
  /* 0x0014 */ float start;
  /* 0x0018 */ float length;
}; /* size: 0x001c */

struct NvVioHandle__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct XAssetPool<LocalizeEntry,14336>
{
  /* 0x0000 */ union XAssetPoolEntry<LocalizeEntry>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<LocalizeEntry> entries[14336];
}; /* size: 0x1c004 */

struct XAssetPool<SndDriverGlobals,1>
{
  /* 0x0000 */ union XAssetPoolEntry<SndDriverGlobals>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<SndDriverGlobals> entries[1];
}; /* size: 0x0048 */

struct std::pair<XZoneInfo *,XZoneInfo *>
{
}; /* size: 0x0008 */

struct ID2D1EllipseGeometry
{
}; /* size: 0x0004 */

struct XAssetPool<EmblemSet,1>
{
  /* 0x0000 */ union XAssetPoolEntry<EmblemSet>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<EmblemSet> entries[1];
}; /* size: 0x0040 */

struct XAssetPool<RawFile,1024>
{
  /* 0x0000 */ union XAssetPoolEntry<RawFile>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<RawFile> entries[1024];
}; /* size: 0x3004 */

struct NV_INFOFRAME_VIDEO
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long vic : 8; /* bit position: 0 */
    /* 0x0000 */ unsigned long pixelRepeat : 5; /* bit position: 8 */
    /* 0x0000 */ unsigned long colorSpace : 3; /* bit position: 13 */
    /* 0x0000 */ unsigned long colorimetry : 3; /* bit position: 16 */
    /* 0x0000 */ unsigned long extendedColorimetry : 4; /* bit position: 19 */
    /* 0x0000 */ unsigned long rgbQuantizationRange : 3; /* bit position: 23 */
    /* 0x0000 */ unsigned long yccQuantizationRange : 3; /* bit position: 26 */
    /* 0x0000 */ unsigned long itContent : 2; /* bit position: 29 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long contentTypes : 3; /* bit position: 0 */
    /* 0x0004 */ unsigned long scanInfo : 3; /* bit position: 3 */
    /* 0x0004 */ unsigned long activeFormatInfoPresent : 2; /* bit position: 6 */
    /* 0x0004 */ unsigned long activeFormatAspectRatio : 5; /* bit position: 8 */
    /* 0x0004 */ unsigned long picAspectRatio : 3; /* bit position: 13 */
    /* 0x0004 */ unsigned long nonuniformScaling : 3; /* bit position: 16 */
    /* 0x0004 */ unsigned long barInfo : 3; /* bit position: 19 */
  }; /* bitfield */
  /* 0x0008 */ unsigned long top_bar : 17; /* bit position: 0 */
  /* 0x000c */ unsigned long bottom_bar : 17; /* bit position: 0 */
  /* 0x0010 */ unsigned long left_bar : 17; /* bit position: 0 */
  struct /* bitfield */
  {
    /* 0x0014 */ unsigned long right_bar : 17; /* bit position: 0 */
    /* 0x0014 */ unsigned long Future17 : 2; /* bit position: 17 */
    /* 0x0014 */ unsigned long Future47 : 2; /* bit position: 19 */
  }; /* bitfield */
}; /* size: 0x0018 */

struct XAssetPool<LeaderboardDef,128>
{
  /* 0x0000 */ union XAssetPoolEntry<LeaderboardDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<LeaderboardDef> entries[128];
}; /* size: 0x1204 */

struct IDirect3DIndexBuffer9
{
}; /* size: 0x0004 */

struct XAssetPool<ddlDef_t,24>
{
  /* 0x0000 */ union XAssetPoolEntry<ddlDef_t>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<ddlDef_t> entries[24];
}; /* size: 0x02a4 */

typedef struct _NV_INFOFRAME_STATE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long bDisabled : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long bDriverCtrl : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long reserved : 30; /* bit position: 2 */
  }; /* bitfield */
} NV_INFOFRAME_STATE, *PNV_INFOFRAME_STATE; /* size: 0x0004 */

struct XAssetPool<EmblemSet,4>
{
  /* 0x0000 */ union XAssetPoolEntry<EmblemSet>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<EmblemSet> entries[4];
}; /* size: 0x00f4 */

union SHA1_Transform::__l2::CHAR64LONG16
{
  union
  {
    /* 0x0000 */ unsigned char c[64];
    /* 0x0000 */ unsigned int l[16];
  }; /* size: 0x0040 */
}; /* size: 0x0040 */

struct XAssetPool<KeyValuePairs,64>
{
  /* 0x0000 */ union XAssetPoolEntry<KeyValuePairs>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<KeyValuePairs> entries[64];
}; /* size: 0x0304 */

typedef struct _NVAPI_VIDEO_FEATURE_DESCRIPTOR
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum _NVAPI_VIDEO_FEATURE_GET_FLAG eVideoFeatureGetID;
  /* 0x0008 */ unsigned long dwVFCount;
  /* 0x000c */ unsigned long dwStartVFCount;
  /* 0x0010 */ struct _NVAPI_VIDEO_FEATURE_DETAILS astFeatureDetails[3];
  /* 0x0040 */ unsigned long adwReserved[4];
} NVAPI_VIDEO_FEATURE_DESCRIPTOR, *PNVAPI_VIDEO_FEATURE_DESCRIPTOR; /* size: 0x0050 */

typedef struct _NVAPI_VID_FEATURE_STRINGS
{
  /* 0x0000 */ enum _NVAPI_VIDEO_FEATURE eFeature;
  /* 0x0004 */ char szFeature[64];
  /* 0x0044 */ char szEngine[64];
  /* 0x0084 */ char szDrvEntryPoint[64];
  /* 0x00c4 */ char szReserved1[64];
} NVAPI_VID_FEATURE_STRINGS, *PNVAPI_VID_FEATURE_STRINGS; /* size: 0x0104 */

typedef struct _NVAPI_DX_VIDEO_FEATURE_DETAILS
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ struct _NVAPI_VIDEO_FEATURE_DESCRIPTOR videoFeaturesPacket;
  /* 0x0054 */ struct _NVAPI_VID_FEATURE_STRINGS astFeatureDescNames[3];
} NVAPI_DX_VIDEO_FEATURE_DETAILS, *PNVAPI_DX_VIDEO_FEATURE_DETAILS; /* size: 0x0360 */

struct XAssetPool<MemoryBlock,16>
{
  /* 0x0000 */ union XAssetPoolEntry<MemoryBlock>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<MemoryBlock> entries[16];
}; /* size: 0x0144 */

struct XAssetPool<FxEffectDef,1>
{
  /* 0x0000 */ union XAssetPoolEntry<FxEffectDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<FxEffectDef> entries[1];
}; /* size: 0x0050 */

struct XAssetPool<Material,1>
{
  /* 0x0000 */ union XAssetPoolEntry<Material>* freeHead;
  /* 0x0004 */ long Padding_1249;
  /* 0x0008 */ union XAssetPoolEntry<Material> entries[1];
}; /* size: 0x0078 */

struct XAssetPool<DestructibleDef,1>
{
  /* 0x0000 */ union XAssetPoolEntry<DestructibleDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<DestructibleDef> entries[1];
}; /* size: 0x001c */

class phys_free_list<rigid_body_constraint_upright>::iterator
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_upright>::T_internal_base* m_ptr;
}; /* size: 0x0004 */

struct std::pair<DBReorderAssetEntry *,DBReorderAssetEntry *>
{
}; /* size: 0x0008 */

class phys_free_list<rigid_body_constraint_point>::T_internal
{
  /* 0x0000 */ long Padding_1250[4];
  /* 0x0010 */ class rigid_body_constraint_point m_data;
  /* 0x0060 */ int m_ptr_list_index;
}; /* size: 0x0070 */

class bdLinkedList<unsigned int>::Node
{
  /* 0x0000 */ unsigned int m_data;
  /* 0x0004 */ class bdLinkedList<unsigned int>::Node* m_next;
  /* 0x0008 */ class bdLinkedList<unsigned int>::Node* m_prev;
}; /* size: 0x000c */

struct XAssetPool<FxImpactTable,1>
{
  /* 0x0000 */ union XAssetPoolEntry<FxImpactTable>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<FxImpactTable> entries[1];
}; /* size: 0x000c */

class phys_free_list<rigid_body_constraint_upright>::T_internal
{
  /* 0x0000 */ long Padding_1251[4];
  /* 0x0010 */ class rigid_body_constraint_upright m_data;
  /* 0x00c0 */ int m_ptr_list_index;
}; /* size: 0x00d0 */

struct XAssetPool<MemoryBlock,1>
{
  /* 0x0000 */ union XAssetPoolEntry<MemoryBlock>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<MemoryBlock> entries[1];
}; /* size: 0x0018 */

struct NV_DISPLAY_TV_OUTPUT_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long supportedFormats;
  /* 0x0008 */ enum _NV_DISPLAY_TV_FORMAT currentFormat;
  /* 0x000c */ enum _NV_GPU_CONNECTOR_TYPE currentConnector;
}; /* size: 0x0010 */

class bdMsgGroupSubscriptionFailure
{
  /* 0x0000 */ long Padding_1252;
  /* 0x0004 */ enum bdLobbyErrorCode m_errorCode;
  /* 0x0008 */ unsigned char m_category;
}; /* size: 0x000c */

struct ID2D1GradientStopCollection
{
}; /* size: 0x0004 */

struct XAssetPool<XModel,1>
{
  /* 0x0000 */ union XAssetPoolEntry<XModel>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<XModel> entries[1];
}; /* size: 0x00fc */

struct NV_HDCP_BSTATUS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long ucDeviceCount : 7; /* bit position: 0 */
    /* 0x0000 */ unsigned long bMaxDevicesExceeded : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned long bRepeaterDepth : 3; /* bit position: 8 */
    /* 0x0000 */ unsigned long bMaxCascadeExceeded : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned long bHDMImode : 1; /* bit position: 12 */
    /* 0x0000 */ unsigned long bReserved : 19; /* bit position: 13 */
  }; /* bitfield */
}; /* size: 0x0004 */

struct ID2D1TessellationSink
{
}; /* size: 0x0004 */

struct XAssetPool<MenuList,1>
{
  /* 0x0000 */ union XAssetPoolEntry<MenuList>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<MenuList> entries[1];
}; /* size: 0x0010 */

struct NV_U40
{
  union
  {
    /* 0x0000 */ unsigned __int64 quadWord;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 hugePart : 40; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 unusedPart : 24; /* bit position: 40 */
      }; /* bitfield */
    } /* size: 0x0008 */ parts;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

typedef struct _HeapManager::Block
{
  /* 0x0000 */ struct _HeapManager::Block* next;
  /* 0x0004 */ char memBlock[4096];
} HeapManager::Block, *PHeapManager::Block; /* size: 0x1004 */

struct XAssetEntry
{
  /* 0x0000 */ struct XAsset asset;
  /* 0x0008 */ unsigned char zoneIndex;
  /* 0x0009 */ BOOL inuse;
  /* 0x000a */ unsigned short nextHash;
  /* 0x000c */ unsigned short nextOverride;
  /* 0x000e */ unsigned short usageFrame;
}; /* size: 0x0010 */

union XAssetEntryPoolEntry
{
  union
  {
    /* 0x0000 */ struct XAssetEntry entry;
    /* 0x0000 */ union XAssetEntryPoolEntry* next;
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

class bdArbitratedStatsInfo
{
  /* 0x0000 */ long Padding_1253[2];
  /* 0x0008 */ unsigned int m_leaderboardID;
  /* 0x000c */ long Padding_1254;
  /* 0x0010 */ unsigned __int64 m_entityID;
  /* 0x0018 */ enum bdStats::bdWriteType m_writeType;
  /* 0x001c */ long Padding_1255;
  /* 0x0020 */ __int64 m_rating;
}; /* size: 0x0028 */

class tlPcQPF
{
}; /* size: 0x0001 */

struct XAssetPool<PhysConstraints,1>
{
  /* 0x0000 */ union XAssetPoolEntry<PhysConstraints>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<PhysConstraints> entries[1];
}; /* size: 0x0a8c */

struct IWICBitmapSource
{
}; /* size: 0x0004 */

struct XAssetPool<KeyValuePairs,1>
{
  /* 0x0000 */ union XAssetPoolEntry<KeyValuePairs>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<KeyValuePairs> entries[1];
}; /* size: 0x0010 */

struct XAssetPool<Font_s,1>
{
  /* 0x0000 */ union XAssetPoolEntry<Font_s>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<Font_s> entries[1];
}; /* size: 0x0028 */

struct NV_VIEW_TARGET_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long count;
  /* 0x0008 */ struct
  {
    /* 0x0008 */ unsigned long deviceMask;
    /* 0x000c */ unsigned long sourceId;
    struct /* bitfield */
    {
      /* 0x0010 */ unsigned long bPrimary : 1; /* bit position: 0 */
      /* 0x0010 */ unsigned long bInterlaced : 1; /* bit position: 1 */
      /* 0x0010 */ unsigned long bGDIPrimary : 1; /* bit position: 2 */
      /* 0x0010 */ unsigned long bForceModeSet : 1; /* bit position: 3 */
    }; /* bitfield */
  } /* size: 0x000c */ target[2];
}; /* size: 0x0020 */

class bdUnreliableSendWindow
{
  /* 0x0000 */ long Padding_1256;
  /* 0x0004 */ unsigned short m_seqNumber;
  /* 0x0006 */ char Padding_1257[2];
  /* 0x0008 */ class bdQueue<bdReference<bdDataChunk> > m_sendQueue;
}; /* size: 0x0014 */

struct XAssetPool<FootstepFXTableDef,1>
{
  /* 0x0000 */ union XAssetPoolEntry<FootstepFXTableDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<FootstepFXTableDef> entries[1];
}; /* size: 0x0088 */

struct XAssetPool<SndBank,1>
{
  /* 0x0000 */ union XAssetPoolEntry<SndBank>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<SndBank> entries[1];
}; /* size: 0x1298 */

struct PerMapMaterialTable
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ struct Material** material;
}; /* size: 0x0008 */

typedef struct _D3DTRIPATCH_INFO
{
  /* 0x0000 */ unsigned int StartVertexOffset;
  /* 0x0004 */ unsigned int NumVertices;
  /* 0x0008 */ enum _D3DBASISTYPE Basis;
  /* 0x000c */ enum _D3DDEGREETYPE Degree;
} D3DTRIPATCH_INFO, *PD3DTRIPATCH_INFO; /* size: 0x0010 */

struct XAssetPool<ZBarrierDef,1>
{
  /* 0x0000 */ union XAssetPoolEntry<ZBarrierDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<ZBarrierDef> entries[1];
}; /* size: 0x0234 */

typedef struct _D3DMATERIAL9
{
  /* 0x0000 */ struct _D3DCOLORVALUE Diffuse;
  /* 0x0010 */ struct _D3DCOLORVALUE Ambient;
  /* 0x0020 */ struct _D3DCOLORVALUE Specular;
  /* 0x0030 */ struct _D3DCOLORVALUE Emissive;
  /* 0x0040 */ float Power;
} D3DMATERIAL9, *PD3DMATERIAL9; /* size: 0x0044 */

struct XZoneInfoInternal
{
  /* 0x0000 */ char name[64];
  /* 0x0040 */ int flags;
}; /* size: 0x0044 */

struct XAssetPool<WeaponAttachmentUnique,1>
{
  /* 0x0000 */ union XAssetPoolEntry<WeaponAttachmentUnique>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<WeaponAttachmentUnique> entries[1];
}; /* size: 0x01ac */

struct NV_GPU_CLIENT_POWER_POLICIES_INFO_V1
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned char bSupported;
  /* 0x0005 */ unsigned char numPolicies;
  /* 0x0006 */ char Padding_1258[2];
  /* 0x0008 */ struct NV_GPU_CLIENT_POWER_POLICIES_POLICY_INFO_V1 policies[4];
}; /* size: 0x00b8 */

struct XAssetPool<MaterialTechniqueSet,1>
{
  /* 0x0000 */ union XAssetPoolEntry<MaterialTechniqueSet>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<MaterialTechniqueSet> entries[1];
}; /* size: 0x009c */

class bdLinkedList<bdReference<bdConnection> >
{
  /* 0x0000 */ class bdLinkedList<bdReference<bdConnection> >::Node* m_head;
  /* 0x0004 */ class bdLinkedList<bdReference<bdConnection> >::Node* m_tail;
  /* 0x0008 */ unsigned int m_size;
}; /* size: 0x000c */

class bdQueue<bdReference<bdConnection> >
{
  /* 0x0000 */ class bdLinkedList<bdReference<bdConnection> > m_list;
}; /* size: 0x000c */

struct NV_GET_PCLK
{
  /* 0x0000 */ unsigned long uOrgPixelClock;
  /* 0x0004 */ unsigned long uCurrPixelClock;
  /* 0x0008 */ unsigned long uCurrSpreadSpectrum;
  /* 0x000c */ struct NV_PCLK_RANGE uFineAdjustBounds;
  /* 0x0014 */ struct NV_PCLK_RANGE uCourseAdjustBounds;
}; /* size: 0x001c */

struct XAssetPool<RawFile,1>
{
  /* 0x0000 */ union XAssetPoolEntry<RawFile>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<RawFile> entries[1];
}; /* size: 0x0010 */

class bdSendThread;

struct XAssetPool<LeaderboardDef,1>
{
  /* 0x0000 */ union XAssetPoolEntry<LeaderboardDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<LeaderboardDef> entries[1];
}; /* size: 0x0028 */

class phys_free_list<rigid_body_constraint_hinge>::T_internal
{
  /* 0x0000 */ long Padding_1259[4];
  /* 0x0010 */ class rigid_body_constraint_hinge m_data;
  /* 0x00e0 */ int m_ptr_list_index;
}; /* size: 0x00f0 */

struct XAssetPool<VehicleDef,1>
{
  /* 0x0000 */ union XAssetPoolEntry<VehicleDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<VehicleDef> entries[1];
}; /* size: 0x0a30 */

class phys_free_list<rigid_body_constraint_distance>::T_internal
{
  /* 0x0000 */ long Padding_1260[4];
  /* 0x0010 */ class rigid_body_constraint_distance m_data;
  /* 0x0070 */ int m_ptr_list_index;
}; /* size: 0x0080 */

struct MtlStateMapBitGroup
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ const struct MtlStateMapBitName* bitNames;
  /* 0x0008 */ int stateBitsMask[2];
}; /* size: 0x0010 */

struct XAssetPool<Qdb,1>
{
  /* 0x0000 */ union XAssetPoolEntry<Qdb>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<Qdb> entries[1];
}; /* size: 0x0010 */

struct ID3D10Predicate
{
}; /* size: 0x0004 */

struct XAssetPool<FootstepTableDef,1>
{
  /* 0x0000 */ union XAssetPoolEntry<FootstepTableDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<FootstepTableDef> entries[1];
}; /* size: 0x0388 */

struct BspSurfRegion
{
  /* 0x0000 */ unsigned short triSurfList[128];
  /* 0x0100 */ struct GfxBspDrawSurfData surfData;
  /* 0x0118 */ unsigned int triSurfCount;
  /* 0x011c */ long Padding_1261;
  /* 0x0120 */ union GfxDrawSurf prevDrawSurf;
  /* 0x0128 */ unsigned int sceneDrawSurfStage;
  /* 0x012c */ BOOL isUsed;
  /* 0x012d */ char __PADDING__[3];
}; /* size: 0x0130 */

struct XAssetPool<WeaponCamo,1>
{
  /* 0x0000 */ union XAssetPoolEntry<WeaponCamo>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<WeaponCamo> entries[1];
}; /* size: 0x0020 */

struct D3D10_TEX2DMS_ARRAY_RTV
{
  /* 0x0000 */ unsigned int FirstArraySlice;
  /* 0x0004 */ unsigned int ArraySize;
}; /* size: 0x0008 */

struct XAssetPool<MapEnts,1>
{
  /* 0x0000 */ union XAssetPoolEntry<MapEnts>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<MapEnts> entries[1];
}; /* size: 0x0028 */

struct ID3D10Buffer
{
}; /* size: 0x0004 */

struct XAssetPool<XModelPieces,1>
{
  /* 0x0000 */ union XAssetPoolEntry<XModelPieces>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<XModelPieces> entries[1];
}; /* size: 0x0010 */

struct XZone
{
  /* 0x0000 */ unsigned short index;
  /* 0x0002 */ char Padding_1262[2];
  /* 0x0004 */ int flags;
  /* 0x0008 */ struct XBlock blocks[8];
}; /* size: 0x0048 */

struct XAssetPool<WeaponVariantDef,1>
{
  /* 0x0000 */ union XAssetPoolEntry<WeaponVariantDef>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<WeaponVariantDef> entries[1];
}; /* size: 0x02d0 */

class phys_link_list<pulse_sum_wheel>::iterator
{
  /* 0x0000 */ class pulse_sum_wheel* m_ptr;
}; /* size: 0x0004 */

struct XAssetPool<XAnimParts,1>
{
  /* 0x0000 */ union XAssetPoolEntry<XAnimParts>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<XAnimParts> entries[1];
}; /* size: 0x006c */

struct XAssetPool<ScriptParseTree,1>
{
  /* 0x0000 */ union XAssetPoolEntry<ScriptParseTree>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<ScriptParseTree> entries[1];
}; /* size: 0x0010 */

struct XAssetPool<GfxImage,1>
{
  /* 0x0000 */ union XAssetPoolEntry<GfxImage>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<GfxImage> entries[1];
}; /* size: 0x0054 */

struct D2D1_TRIANGLE
{
  /* 0x0000 */ struct D2D_POINT_2F point1;
  /* 0x0008 */ struct D2D_POINT_2F point2;
  /* 0x0010 */ struct D2D_POINT_2F point3;
}; /* size: 0x0018 */

class bdFacebookUserAttribute
{
  /* 0x0000 */ long Padding_1263;
  /* 0x0004 */ unsigned int m_name;
  /* 0x0008 */ char m_value[512];
}; /* size: 0x0208 */

class phys_link_list<phys_collision_pair>::iterator
{
  /* 0x0000 */ class phys_collision_pair* m_ptr;
}; /* size: 0x0004 */

struct NV_GPU_PERF_PSTATES20_PARAM_DELTA
{
  /* 0x0000 */ int value;
  struct
  {
    /* 0x0004 */ int min;
    /* 0x0008 */ int max;
  } /* size: 0x0008 */ valueRange;
}; /* size: 0x000c */

struct NV_GPU_PSTATE20_BASE_VOLTAGE_ENTRY_V1
{
  /* 0x0000 */ enum _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID domainId;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long bIsEditable : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long reserved : 31; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0008 */ unsigned long volt_uV;
  /* 0x000c */ struct NV_GPU_PERF_PSTATES20_PARAM_DELTA voltDelta_uV;
}; /* size: 0x0018 */

struct ColVert
{
  /* 0x0000 */ union vec3_t xyz;
  /* 0x000c */ float unused;
}; /* size: 0x0010 */

class phys_free_list<rigid_body_constraint_ragdoll>::T_internal
{
  /* 0x0000 */ long Padding_1264[4];
  /* 0x0010 */ class rigid_body_constraint_ragdoll m_data;
  /* 0x0130 */ int m_ptr_list_index;
}; /* size: 0x0140 */

struct nrm3_10_11_11
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ int x : 10; /* bit position: 0 */
      /* 0x0000 */ int y : 11; /* bit position: 10 */
      /* 0x0000 */ int z : 11; /* bit position: 21 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

typedef struct _D3DRECTPATCH_INFO
{
  /* 0x0000 */ unsigned int StartVertexOffsetWidth;
  /* 0x0004 */ unsigned int StartVertexOffsetHeight;
  /* 0x0008 */ unsigned int Width;
  /* 0x000c */ unsigned int Height;
  /* 0x0010 */ unsigned int Stride;
  /* 0x0014 */ enum _D3DBASISTYPE Basis;
  /* 0x0018 */ enum _D3DDEGREETYPE Degree;
} D3DRECTPATCH_INFO, *PD3DRECTPATCH_INFO; /* size: 0x001c */

union PackedLightingCoords
{
  union
  {
    /* 0x0000 */ unsigned int packed;
    /* 0x0000 */ unsigned char array[4];
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct FxInt16Range
{
  /* 0x0000 */ short base;
  /* 0x0002 */ short amplitude;
}; /* size: 0x0004 */

struct GfxPackedVertexQuant
{
  /* 0x0000 */ short xyz[3];
  /* 0x0006 */ short binormalSign;
  /* 0x0008 */ union GfxColor color;
  /* 0x000c */ union PackedTexCoords texCoord;
  /* 0x0010 */ union PackedUnitVec normal;
  /* 0x0014 */ union PackedUnitVec tangent;
}; /* size: 0x0018 */

class bdSanitizedString
{
  /* 0x0000 */ long Padding_1265;
  /* 0x0004 */ BOOL m_sanitized;
  /* 0x0005 */ char Padding_1266[3];
  /* 0x0008 */ unsigned int m_length;
  /* 0x000c */ char* m_sanitizedBuffer;
}; /* size: 0x0010 */

struct ShaderStats
{
  /* 0x0000 */ unsigned char cost;
  /* 0x0001 */ unsigned char ALU;
  /* 0x0002 */ unsigned char vertex;
  /* 0x0003 */ unsigned char texture;
  /* 0x0004 */ unsigned char sequencer;
  /* 0x0005 */ unsigned char interpolator;
  /* 0x0006 */ unsigned char GPR;
  /* 0x0007 */ unsigned char threads;
}; /* size: 0x0008 */

struct jqProfInfo
{
  /* 0x0000 */ struct jqProfEvent* EventBuffer;
  /* 0x0004 */ struct jqProfEvent** EventCurPtr;
  /* 0x0008 */ int BufferSize;
  /* 0x000c */ unsigned int Pad[1];
}; /* size: 0x0010 */

struct dec4
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ int x : 10; /* bit position: 0 */
      /* 0x0000 */ int y : 10; /* bit position: 10 */
      /* 0x0000 */ int z : 10; /* bit position: 20 */
      /* 0x0000 */ int w : 2; /* bit position: 30 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct NV_GPU_COOLER_POLICY_TABLE
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum NV_COOLER_POLICY policy;
  /* 0x0008 */ struct
  {
    /* 0x0008 */ unsigned long levelId;
    /* 0x000c */ unsigned long currentLevel;
    /* 0x0010 */ unsigned long defaultLevel;
  } /* size: 0x000c */ policyCoolerLevel[24];
}; /* size: 0x0128 */

struct udec4
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int x : 10; /* bit position: 0 */
      /* 0x0000 */ unsigned int y : 10; /* bit position: 10 */
      /* 0x0000 */ unsigned int z : 10; /* bit position: 20 */
      /* 0x0000 */ unsigned int w : 2; /* bit position: 30 */
    }; /* bitfield */
    /* 0x0000 */ unsigned int v;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct FxInt8Range
{
  /* 0x0000 */ char base;
  /* 0x0001 */ char amplitude;
}; /* size: 0x0002 */

struct XSurfaceSection
{
  /* 0x0000 */ unsigned short minVertex;
  /* 0x0002 */ unsigned short vertexCount;
  /* 0x0004 */ unsigned short triCount;
  /* 0x0006 */ unsigned short triCountNoCull;
}; /* size: 0x0008 */

struct GfxReflectionProbeStreamPart
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ float himipRadiusInvSq;
  /* 0x0010 */ union vec3_t maxs;
}; /* size: 0x001c */

struct GfxPosTexVertex
{
  /* 0x0000 */ union vec3_t xyz;
  /* 0x000c */ union vec2_t texCoord;
}; /* size: 0x0014 */

struct jqProfThread
{
  /* 0x0000 */ unsigned __int64 ThreadId;
  /* 0x0008 */ char Name[120];
  /* 0x0080 */ int StackLevel;
  /* 0x0084 */ struct jqProfEvent* Stack[31];
}; /* size: 0x0100 */

struct ClientTriggers
{
  /* 0x0000 */ struct MapTriggers trigger;
  /* 0x0018 */ unsigned short numClientTriggerNodes;
  /* 0x001a */ char Padding_1267[2];
  /* 0x001c */ struct ClientTriggerAabbNode* clientTriggerAabbTree;
  /* 0x0020 */ unsigned int triggerStringLength;
  /* 0x0024 */ char* triggerString;
  /* 0x0028 */ unsigned short* triggerStringOffsets;
  /* 0x002c */ unsigned char* triggerType;
  /* 0x0030 */ union vec3_t* origins;
  /* 0x0034 */ float* scriptDelay;
  /* 0x0038 */ short* audioTriggers;
}; /* size: 0x003c */

struct DBDecompressCmd_t
{
  /* 0x0000 */ int which;
  /* 0x0004 */ struct DB_LOAD_STREAM* stream;
  /* 0x0008 */ unsigned char* ioBuffer;
  /* 0x000c */ unsigned char iv[8];
}; /* size: 0x0014 */

struct DB_LOAD_STREAM
{
  /* 0x0000 */ unsigned char decompressedData[32768];
  /* 0x8000 */ unsigned char checksum[32];
  /* 0x8020 */ unsigned char* compressedData;
  /* 0x8024 */ int compressedDataAvail;
  /* 0x8028 */ int decompressedDataAvail;
  /* 0x802c */ int decompressedDataOffset;
  /* 0x8030 */ BOOL busy;
  /* 0x8031 */ char __PADDING__[79];
}; /* size: 0x8080 */

struct DB_LoadData
{
  /* 0x0000 */ int f;
  /* 0x0004 */ const char* filename;
  /* 0x0008 */ struct XBlock* blocks;
  /* 0x000c */ int flags;
  /* 0x0010 */ void* interrupt /* function */;
  /* 0x0014 */ int allocType;
  /* 0x0018 */ unsigned __int64 readOffset;
  /* 0x0020 */ unsigned __int64 endOffset;
  /* 0x0028 */ unsigned char* ioBuffer;
  /* 0x002c */ int ioBufferOffset;
  /* 0x0030 */ unsigned char* compressData;
  /* 0x0034 */ int tail;
  /* 0x0038 */ int head;
  /* 0x003c */ struct DBDecompressCmd_t cmd[4];
  /* 0x008c */ long Padding_1268[29];
  /* 0x0100 */ struct DB_LOAD_STREAM stream[4];
  /* 0x20300 */ int next_buffer;
  /* 0x20304 */ int locks[4];
  /* 0x20314 */ BOOL loadPending[4];
  /* 0x20318 */ BOOL abort;
  /* 0x20319 */ char Padding_1269[3];
  /* 0x2031c */ int requiredVersion;
  /* 0x20320 */ int lastError;
  /* 0x20324 */ int startTime;
  /* 0x20328 */ long __PADDING__[22];
}; /* size: 0x20380 */

struct ID3D10PixelShader
{
}; /* size: 0x0004 */

struct mp_int
{
  /* 0x0000 */ int used;
  /* 0x0004 */ int alloc;
  /* 0x0008 */ int sign;
  /* 0x000c */ unsigned long* dp;
}; /* size: 0x0010 */

class phys_simple_link_list<pulse_sum_constraint_solver::user_rigid_body_restore_info>::iterator
{
  /* 0x0000 */ class pulse_sum_constraint_solver::user_rigid_body_restore_info* m_ptr;
}; /* size: 0x0004 */

struct ID3D10Texture3D
{
}; /* size: 0x0004 */

struct XFile
{
  /* 0x0000 */ unsigned int size;
  /* 0x0004 */ unsigned int externalSize;
  /* 0x0008 */ unsigned int blockSize[8];
}; /* size: 0x0028 */

class axis_aligned_sweep_and_prune::active_pair
{
  /* 0x0000 */ class axis_aligned_sweep_and_prune::sap_node* m_p1;
  /* 0x0004 */ class axis_aligned_sweep_and_prune::sap_node* m_p2;
  /* 0x0008 */ class axis_aligned_sweep_and_prune::active_pair* m_next;
  /* 0x000c */ class phys_gjk_cache_info* m_gjk_ci;
}; /* size: 0x0010 */

struct SHA1_CTX
{
  /* 0x0000 */ unsigned int state[5];
  /* 0x0014 */ unsigned int count[2];
  /* 0x001c */ unsigned char buffer[64];
}; /* size: 0x005c */

struct ID3D10InputLayout
{
}; /* size: 0x0004 */

class phys_inplace_avl_tree<user_rigid_body *,pulse_sum_constraint_solver::temp_user_rigid_body,pulse_sum_constraint_solver::temp_user_rigid_body::avl_tree_accessor>
{
  /* 0x0000 */ class pulse_sum_constraint_solver::temp_user_rigid_body* m_tree_root;
}; /* size: 0x0004 */

struct PartyProber
{
  /* 0x0000 */ struct PartyInfo hosts[50];
  /* 0x1db0 */ int hostCount;
  /* 0x1db4 */ enum ProberMode mode;
  /* 0x1db8 */ enum ProberState state;
  /* 0x1dbc */ enum ControllerIndex_t controllerIndex;
  /* 0x1dc0 */ int partyId;
  /* 0x1dc4 */ struct PartyData_s* partyToNotify;
  /* 0x1dc8 */ enum searchSessionMode_t searchMode;
  /* 0x1dcc */ int minPlayers;
  /* 0x1dd0 */ int mapPacks;
  /* 0x1dd4 */ int requiredFlags;
  /* 0x1dd8 */ int searchStartUTC;
  /* 0x1ddc */ struct netadr_t masterAddr;
  /* 0x1df0 */ int echoChallenge;
  /* 0x1df4 */ long Padding_1270;
  /* 0x1df8 */ struct PartyInfo echoHost;
  /* 0x1e90 */ int echoHostNum;
  /* 0x1e94 */ int clientDisagreeTime[18];
  /* 0x1edc */ int clientAgreeTime[18];
  /* 0x1f24 */ int clientPacketTime;
  /* 0x1f28 */ int clientWaitStart;
  /* 0x1f2c */ int hostIndex;
  /* 0x1f30 */ struct netadr_t hostAddr;
  /* 0x1f44 */ unsigned int hostChallenge;
  /* 0x1f48 */ int hostNum;
  /* 0x1f4c */ int nextSearchTime;
  /* 0x1f50 */ int packetStartTime;
  /* 0x1f54 */ int packetRecvTime;
  /* 0x1f58 */ int packetSendTime;
  /* 0x1f5c */ int retryCount;
  /* 0x1f60 */ char errorMessage[256];
}; /* size: 0x2060 */

class phys_simple_link_list<pulse_sum_constraint_solver::temp_user_rigid_body>
{
  /* 0x0000 */ class pulse_sum_constraint_solver::temp_user_rigid_body* m_first;
}; /* size: 0x0004 */

struct ErrorMap
{
  /* 0x0000 */ const char* partyMessage;
  /* 0x0004 */ const char* errorMessage;
}; /* size: 0x0008 */

typedef struct _D3DRASTER_STATUS
{
  /* 0x0000 */ int InVBlank;
  /* 0x0004 */ unsigned int ScanLine;
} D3DRASTER_STATUS, *PD3DRASTER_STATUS; /* size: 0x0008 */

struct std::pair<PartyInfo *,PartyInfo *>
{
}; /* size: 0x0008 */

typedef struct _stat64
{
  /* 0x0000 */ unsigned int st_dev;
  /* 0x0004 */ unsigned short st_ino;
  /* 0x0006 */ unsigned short st_mode;
  /* 0x0008 */ short st_nlink;
  /* 0x000a */ short st_uid;
  /* 0x000c */ short st_gid;
  /* 0x000e */ char Padding_1271[2];
  /* 0x0010 */ unsigned int st_rdev;
  /* 0x0014 */ long Padding_1272;
  /* 0x0018 */ __int64 st_size;
  /* 0x0020 */ __int64 st_atime;
  /* 0x0028 */ __int64 st_mtime;
  /* 0x0030 */ __int64 st_ctime;
} stat64, *Pstat64; /* size: 0x0038 */

struct NV_VIDEO_INFOFRAME
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char scanInfo : 2; /* bit position: 0 */
    /* 0x0000 */ unsigned char barInfo : 2; /* bit position: 2 */
    /* 0x0000 */ unsigned char activeFormatInfoPresent : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned char colorSpace : 2; /* bit position: 5 */
    /* 0x0000 */ unsigned char rsvd_bits_byte1 : 1; /* bit position: 7 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0001 */ unsigned char activeFormatAspectRatio : 4; /* bit position: 0 */
    /* 0x0001 */ unsigned char picAspectRatio : 2; /* bit position: 4 */
    /* 0x0001 */ unsigned char colorimetry : 2; /* bit position: 6 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0002 */ unsigned char nonuniformScaling : 2; /* bit position: 0 */
    /* 0x0002 */ unsigned char rgbQuantizationRange : 2; /* bit position: 2 */
    /* 0x0002 */ unsigned char extendedColorimetry : 3; /* bit position: 4 */
    /* 0x0002 */ unsigned char itContent : 1; /* bit position: 7 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0003 */ unsigned char vic : 7; /* bit position: 0 */
    /* 0x0003 */ unsigned char rsvd_bits_byte4 : 1; /* bit position: 7 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned char pixelRepeat : 4; /* bit position: 0 */
    /* 0x0004 */ unsigned char contentTypes : 2; /* bit position: 4 */
    /* 0x0004 */ unsigned char yccQuantizationRange : 2; /* bit position: 6 */
  }; /* bitfield */
  /* 0x0005 */ unsigned char topBarLow;
  /* 0x0006 */ unsigned char topBarHigh;
  /* 0x0007 */ unsigned char bottomBarLow;
  /* 0x0008 */ unsigned char bottomBarHigh;
  /* 0x0009 */ unsigned char leftBarLow;
  /* 0x000a */ unsigned char leftBarHigh;
  /* 0x000b */ unsigned char rightBarLow;
  /* 0x000c */ unsigned char rightBarHigh;
}; /* size: 0x000d */

struct IDWriteTextLayout
{
}; /* size: 0x0004 */

struct ProbeSorter
{
  /* 0x0000 */ struct PartyProber* prober;
}; /* size: 0x0004 */

struct ID2D1Factory
{
}; /* size: 0x0004 */

class bdUnlockContentInfoWithSubtype
{
  /* 0x0000 */ long Padding_1273;
  /* 0x0004 */ unsigned int m_contentKey;
  /* 0x0008 */ unsigned int m_contentKeySubtype;
  /* 0x000c */ long Padding_1274;
  /* 0x0010 */ unsigned __int64 m_hardwareID;
}; /* size: 0x0018 */

struct PartyMessages
{
  /* 0x0000 */ const char* string;
  /* 0x0004 */ void* func /* function */;
  /* 0x0008 */ BOOL verbose;
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

struct D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES
{
  /* 0x0000 */ struct D2D_POINT_2F startPoint;
  /* 0x0008 */ struct D2D_POINT_2F endPoint;
}; /* size: 0x0010 */

struct migrateClientData_t
{
  /* 0x0000 */ struct peerResults_t peerResults[18];
  /* 0x0120 */ unsigned __int64 nominees[18];
  /* 0x01b0 */ enum migrateClientState_t clientState;
  /* 0x01b4 */ unsigned int sentPacketCount;
  /* 0x01b8 */ int lastPacketSendMs;
  /* 0x01bc */ int currentNominee;
  /* 0x01c0 */ int migrateStartMs;
  /* 0x01c4 */ int lasthostTimeMS;
  /* 0x01c8 */ int hostStartMS;
  /* 0x01cc */ int lastCalcTime;
  /* 0x01d0 */ int nextTestPacketSendMS;
  /* 0x01d4 */ long Padding_1275;
  /* 0x01d8 */ unsigned __int64 peerXor;
}; /* size: 0x01e0 */

struct NV_GPU_TOPOLOGY_V2
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long gpuCount;
  /* 0x0008 */ struct NvPhysicalGpuHandle__* hPhysicalGpu[8];
  /* 0x0028 */ unsigned long displayGpuIndex;
  union
  {
    /* 0x002c */ unsigned long displayOutputTargetMask;
    /* 0x002c */ unsigned long displayId;
  }; /* size: 0x0004 */
  /* 0x0030 */ unsigned long noDisplayGpuMask;
  /* 0x0034 */ unsigned long flags;
  /* 0x0038 */ unsigned long status;
}; /* size: 0x003c */

struct NV_GPU_TOPOLOGIES
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long gpuTopoCount;
  /* 0x0008 */ struct NV_GPU_TOPOLOGY_V2 gpuTopo[256];
  /* 0x3c08 */ unsigned long sliGroupCount;
  /* 0x3c0c */ long Padding_1276;
  /* 0x3c10 */ struct NV_SLI_GROUP sliGroup[256];
}; /* size: 0x5410 */

struct migrateHostData_t
{
  /* 0x0000 */ unsigned __int64 nominees[18];
  /* 0x0090 */ struct peerResults_t peerResults[18];
  /* 0x01b0 */ enum ClientNum_t tokenHolder;
  /* 0x01b4 */ unsigned int missingPeerLimit;
}; /* size: 0x01b8 */

struct CharPair
{
  /* 0x0000 */ unsigned char LeadChar;
  /* 0x0001 */ unsigned char SecondChar;
}; /* size: 0x0002 */

struct NormKeyVals
{
  /* 0x0000 */ struct CharPair RegChars;
  /* 0x0002 */ struct CharPair ShiftChars;
  /* 0x0004 */ struct CharPair CtrlChars;
  /* 0x0006 */ struct CharPair AltChars;
}; /* size: 0x0008 */

struct ID3DXFont
{
}; /* size: 0x0004 */

struct Hmac_state
{
  /* 0x0000 */ union Hash_state md;
  /* 0x0070 */ int hash;
  /* 0x0074 */ long Padding_1277;
  /* 0x0078 */ union Hash_state hashstate;
  /* 0x00e8 */ unsigned char* key;
  /* 0x00ec */ long __PADDING__[1];
}; /* size: 0x00f0 */

struct Assignment
{
  /* 0x0000 */ float fitness;
  /* 0x0004 */ unsigned char team[18];
  /* 0x0016 */ char __PADDING__[2];
}; /* size: 0x0018 */

struct ID2D1GeometryGroup
{
}; /* size: 0x0004 */

struct JoinPartyResponse
{
  /* 0x0000 */ const char* failureReason;
  /* 0x0004 */ unsigned int challenge;
}; /* size: 0x0008 */

class bdMarketplaceProductItem
{
  /* 0x0000 */ long Padding_1278;
  /* 0x0004 */ unsigned int m_itemId;
  /* 0x0008 */ unsigned int m_itemQuantity;
}; /* size: 0x000c */

class bdMarketplaceProduct
{
  /* 0x0000 */ long Padding_1279;
  /* 0x0004 */ unsigned int m_productId;
  /* 0x0008 */ unsigned char m_productName[135];
  /* 0x008f */ unsigned char m_productNameSize;
  /* 0x0090 */ unsigned char m_description[240];
  /* 0x0180 */ unsigned char m_descriptionSize;
  /* 0x0181 */ unsigned char m_productData[64];
  /* 0x01c1 */ unsigned char m_productDataSize;
  /* 0x01c2 */ unsigned short m_collisionField;
  /* 0x01c4 */ unsigned int m_modDateTime;
  /* 0x01c8 */ unsigned char m_numItems;
  /* 0x01c9 */ char Padding_1280[3];
  /* 0x01cc */ class bdMarketplaceProductItem m_productItems[10];
  /* 0x0244 */ unsigned char m_numEntitlements;
  /* 0x0245 */ char Padding_1281[3];
  /* 0x0248 */ unsigned int m_productEntitlements[4];
}; /* size: 0x0258 */

struct PotentialTeam
{
  /* 0x0000 */ int parties[18];
  /* 0x0048 */ int partyCount;
  /* 0x004c */ int playerCount;
  /* 0x0050 */ int totalSkill;
}; /* size: 0x0054 */

struct s_mutePlyerData
{
  /* 0x0000 */ struct s_mutePlayerInfo player[64];
  /* 0x0400 */ int numOfExistingPlayers;
  /* 0x0404 */ struct s_mutePlayerInfo* head;
}; /* size: 0x0408 */

struct PartyField
{
  /* 0x0000 */ int bits;
  /* 0x0004 */ int offset;
  /* 0x0008 */ int size;
  /* 0x000c */ const char* name;
}; /* size: 0x0010 */

struct IDirect3DTexture9
{
}; /* size: 0x0004 */

struct PrintChannelGlob
{
  /* 0x0000 */ struct PrintChannel openChannels[256];
  /* 0x2100 */ unsigned int filters[8][7];
}; /* size: 0x21e0 */

typedef struct _IMAGE_FILE_HEADER
{
  /* 0x0000 */ unsigned short Machine;
  /* 0x0002 */ unsigned short NumberOfSections;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned long PointerToSymbolTable;
  /* 0x000c */ unsigned long NumberOfSymbols;
  /* 0x0010 */ unsigned short SizeOfOptionalHeader;
  /* 0x0012 */ unsigned short Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER; /* size: 0x0014 */

typedef struct _NVAPI_FRAME_RATE_NOTIFY_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ long Padding_1282;
  /* 0x0008 */ unsigned __int64 hWnd;
  struct /* bitfield */
  {
    /* 0x0010 */ unsigned long bEnable : 1; /* bit position: 0 */
    /* 0x0010 */ unsigned long bReserved : 31; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0014 */ long __PADDING__[1];
} NVAPI_FRAME_RATE_NOTIFY_INFO, *PNVAPI_FRAME_RATE_NOTIFY_INFO; /* size: 0x0018 */

struct R_AddDrawCallsCmd
{
  /* 0x0000 */ struct GfxBackEndData* data;
}; /* size: 0x0004 */

struct D3D10_MAPPED_TEXTURE3D
{
  /* 0x0000 */ void* pData;
  /* 0x0004 */ unsigned int RowPitch;
  /* 0x0008 */ unsigned int DepthPitch;
}; /* size: 0x000c */

struct ID2D1RoundedRectangleGeometry
{
}; /* size: 0x0004 */

class bdCommerceItem
{
  /* 0x0000 */ long Padding_1283[2];
  /* 0x0008 */ unsigned __int64 m_inventoryItemId;
  /* 0x0010 */ unsigned __int64 m_ownerId;
  /* 0x0018 */ unsigned int m_itemId;
  /* 0x001c */ unsigned int m_itemQuantity;
  /* 0x0020 */ unsigned int m_expiry;
  /* 0x0024 */ unsigned char m_metaData[255];
  /* 0x0123 */ char Padding_1284;
  /* 0x0124 */ unsigned int m_metaDataSize;
}; /* size: 0x0128 */

struct NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_STATUS_V1
{
  /* 0x0000 */ enum NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID channelId;
  /* 0x0004 */ struct NV_GPU_CLIENT_POWER_READING_V1 power;
}; /* size: 0x0010 */

class <CrtImplementationDetails>::NativeDll
{
  union
  {
    /* 0x0000 */ const unsigned int ProcessDetach;
    /* 0x0000 */ const unsigned int ProcessAttach;
    /* 0x0000 */ const unsigned int ThreadAttach;
    /* 0x0000 */ const unsigned int ThreadDetach;
    /* 0x0000 */ const unsigned int ProcessVerifier;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct ID2D1HwndRenderTarget
{
}; /* size: 0x0004 */

struct ClientPing
{
  /* 0x0000 */ BOOL active;
  /* 0x0001 */ char Padding_1285[3];
  /* 0x0004 */ int ping;
  /* 0x0008 */ int nextPingTime;
}; /* size: 0x000c */

typedef struct _D3DLIGHT9
{
  /* 0x0000 */ enum _D3DLIGHTTYPE Type;
  /* 0x0004 */ struct _D3DCOLORVALUE Diffuse;
  /* 0x0014 */ struct _D3DCOLORVALUE Specular;
  /* 0x0024 */ struct _D3DCOLORVALUE Ambient;
  /* 0x0034 */ struct _D3DVECTOR Position;
  /* 0x0040 */ struct _D3DVECTOR Direction;
  /* 0x004c */ float Range;
  /* 0x0050 */ float Falloff;
  /* 0x0054 */ float Attenuation0;
  /* 0x0058 */ float Attenuation1;
  /* 0x005c */ float Attenuation2;
  /* 0x0060 */ float Theta;
  /* 0x0064 */ float Phi;
} D3DLIGHT9, *PD3DLIGHT9; /* size: 0x0068 */

class bdCommerceCurrency
{
  /* 0x0000 */ long Padding_1286;
  /* 0x0004 */ int m_currencyID;
  /* 0x0008 */ int m_value;
}; /* size: 0x000c */

typedef struct _NVAPI_RENDERED_CURSOR_BITMAP_DATA
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long headIndex;
  /* 0x0008 */ unsigned long bufferSize;
  /* 0x000c */ struct tagBITMAP* pBitmap;
  /* 0x0010 */ unsigned long xHot;
  /* 0x0014 */ unsigned long yHot;
  /* 0x0018 */ enum NV_HW_CURSOR_COLOR_FORMAT_FLAGS formatFlag;
  /* 0x001c */ unsigned long bVisible;
} NVAPI_RENDERED_CURSOR_BITMAP_DATA, *PNVAPI_RENDERED_CURSOR_BITMAP_DATA; /* size: 0x0020 */

struct ping_t
{
  /* 0x0000 */ struct netadr_t adr;
  /* 0x0014 */ int start;
  /* 0x0018 */ int time;
  /* 0x001c */ char info[1024];
}; /* size: 0x041c */

struct IDWriteTextRenderer
{
}; /* size: 0x0004 */

struct NV_GPU_DYNAMIC_PSTATES_INFO_EX
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long flags;
  /* 0x0008 */ struct
  {
    /* 0x0008 */ unsigned long bIsPresent : 1; /* bit position: 0 */
    /* 0x000c */ unsigned long percentage;
  } /* size: 0x0008 */ utilization[8];
}; /* size: 0x0048 */

struct PlayerKeyState
{
  /* 0x0000 */ struct field_t chatField;
  /* 0x0118 */ int chat_team;
  /* 0x011c */ int overstrikeMode;
  /* 0x0120 */ int anyKeyDown;
  /* 0x0124 */ struct KeyState keys[256];
  /* 0x1524 */ enum LocSelInputState locSelInputState;
}; /* size: 0x1528 */

struct keyNumToNameMapping_t
{
  /* 0x0000 */ int keynum;
  /* 0x0004 */ const char* buttonName;
}; /* size: 0x0008 */

struct IDirect3DVertexShader9
{
}; /* size: 0x0004 */

struct GamepadVirtualAxisMapping
{
  /* 0x0000 */ enum GamepadPhysicalAxis physicalAxis;
  /* 0x0004 */ enum GamepadMapping mapType;
}; /* size: 0x0008 */

struct GpadAxesGlob
{
  /* 0x0000 */ int axesValues[6];
  /* 0x0018 */ struct GamepadVirtualAxisMapping virtualAxes[6];
}; /* size: 0x0048 */

struct NV_3D_APP_INFO_V2
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long processId;
  /* 0x0008 */ char processName[256];
}; /* size: 0x0108 */

struct NV_SET_PCLK
{
  /* 0x0000 */ struct NV_PCLK_RANGE uAllowedRanges[10];
  /* 0x0050 */ struct NV_PCLK_RANGE uDisallowedRanges[10];
}; /* size: 0x00a0 */

struct DispLocals
{
  /* 0x0000 */ unsigned short wUser1;
  /* 0x0002 */ unsigned short wUser2;
  /* 0x0004 */ unsigned short savCntrl;
  /* 0x0006 */ unsigned short setCntrl;
  /* 0x0008 */ unsigned short StatusWord;
  /* 0x000a */ long double Fac /* 80-bit float */;
  /* 0x0014 */ unsigned long Function;
  /* 0x0018 */ unsigned char ErrorType;
  /* 0x0019 */ unsigned char bUser3;
  /* 0x001a */ unsigned long typ;
  /* 0x001e */ unsigned long nam;
  /* 0x0022 */ unsigned __int64 arg1;
  /* 0x002a */ unsigned __int64 arg2;
  /* 0x0032 */ unsigned __int64 retval;
  /* 0x003a */ unsigned char savebuf;
  /* 0x003b */ char __PADDING__[107];
}; /* size: 0x00a6 */

class phys_free_list<rigid_body_constraint_point>::iterator
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_point>::T_internal_base* m_ptr;
}; /* size: 0x0004 */

struct ID2D1Bitmap
{
}; /* size: 0x0004 */

class bdMarketplaceEntitlement
{
  /* 0x0000 */ long Padding_1287[2];
  /* 0x0008 */ unsigned __int64 m_playerId;
  /* 0x0010 */ unsigned short m_numPlayerEntitlements;
  /* 0x0012 */ char Padding_1288[2];
  /* 0x0014 */ unsigned int m_playerEntitlements[1000];
}; /* size: 0x0fb8 */

struct TypeDescriptor
{
  /* 0x0000 */ unsigned long hash;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char* name /* zero-length array */;
}; /* size: 0x0008 */

struct TempImage
{
  /* 0x0000 */ struct GfxImage* image;
  /* 0x0004 */ BOOL used;
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

struct NV_GPU_PSTATE20_CLOCK_ENTRY_V1
{
  /* 0x0000 */ enum _NV_GPU_PUBLIC_CLOCK_ID domainId;
  /* 0x0004 */ enum NV_GPU_PERF_PSTATE20_CLOCK_TYPE_ID typeId;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long bIsEditable : 1; /* bit position: 0 */
    /* 0x0008 */ unsigned long reserved : 31; /* bit position: 1 */
  }; /* bitfield */
  /* 0x000c */ struct NV_GPU_PERF_PSTATES20_PARAM_DELTA freqDelta_kHz;
  union
  {
    union
    {
      struct
      {
        /* 0x0018 */ unsigned long freq_kHz;
      } /* size: 0x0004 */ single;
      struct
      {
        /* 0x0018 */ unsigned long minFreq_kHz;
        /* 0x001c */ unsigned long maxFreq_kHz;
        /* 0x0020 */ enum _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID domainId;
        /* 0x0024 */ unsigned long minVoltage_uV;
        /* 0x0028 */ unsigned long maxVoltage_uV;
      } /* size: 0x0014 */ range;
    }; /* size: 0x0014 */
  } /* size: 0x0014 */ data;
}; /* size: 0x002c */

struct CompositeJob
{
  /* 0x0000 */ enum CompositeState state;
  /* 0x0004 */ enum CompositeType type;
  /* 0x0008 */ int id;
  /* 0x000c */ int layerCount;
  /* 0x0010 */ struct CompositeEmblemLayer layers[32];
  /* 0x0590 */ struct GfxImage* renderImage;
  /* 0x0594 */ struct GfxImage* resultImage;
  /* 0x0598 */ BOOL cancel;
  /* 0x0599 */ char __PADDING__[3];
}; /* size: 0x059c */

struct ClientViewParams
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
  /* 0x0008 */ float width;
  /* 0x000c */ float height;
  /* 0x0010 */ enum ClientViewViewportSize viewportSize;
}; /* size: 0x0014 */

struct IDWriteRenderingParams
{
}; /* size: 0x0004 */

struct clientMouse_t
{
  /* 0x0000 */ int mouseDx[2];
  /* 0x0008 */ int mouseDy[2];
  /* 0x0010 */ int mouseIndex;
}; /* size: 0x0014 */

struct ID2D1BitmapBrush
{
}; /* size: 0x0004 */

struct AimInput
{
  /* 0x0000 */ float deltaTime;
  /* 0x0004 */ float pitch;
  /* 0x0008 */ float pitchAxis;
  /* 0x000c */ float pitchMax;
  /* 0x0010 */ float yaw;
  /* 0x0014 */ float yawAxis;
  /* 0x0018 */ float yawMax;
  /* 0x001c */ float forwardAxis;
  /* 0x0020 */ float rightAxis;
  /* 0x0024 */ class bitarray<64> button_bits;
  /* 0x002c */ enum LocalClientNum_t localClientNum;
  /* 0x0030 */ const struct playerState_s* ps;
  /* 0x0034 */ float adsFrac;
}; /* size: 0x0038 */

struct AimOutput
{
  /* 0x0000 */ float pitch;
  /* 0x0004 */ float yaw;
  /* 0x0008 */ float meleeChargeYaw;
  /* 0x000c */ unsigned short meleeChargeEnt;
  /* 0x000e */ unsigned char meleeChargeDist;
  /* 0x000f */ char __PADDING__[1];
}; /* size: 0x0010 */

struct CEntityAreaParms
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ int contentMask;
  /* 0x001c */ int* list;
  /* 0x0020 */ int maxCount;
  /* 0x0024 */ int count;
}; /* size: 0x0028 */

struct ID3DXSprite
{
}; /* size: 0x0004 */

struct NVAPI_VIDSURF_ENCRYPT_CTRL_GET_GUIDS
{
  /* 0x0000 */ struct _GUID guids[4];
}; /* size: 0x0040 */

struct ClientPlayerAttachmentInfo
{
  /* 0x0000 */ const char* translatedDisplayName;
}; /* size: 0x0004 */

struct D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES
{
  /* 0x0000 */ struct D2D_POINT_2F center;
  /* 0x0008 */ struct D2D_POINT_2F gradientOriginOffset;
  /* 0x0010 */ float radiusX;
  /* 0x0014 */ float radiusY;
}; /* size: 0x0018 */

struct snd_weapon_shot
{
  /* 0x0000 */ enum LocalClientNum_t localClientNum;
  /* 0x0004 */ union SndEntHandle shooter;
  /* 0x0008 */ union Weapon weapon;
  /* 0x000c */ union vec3_t origin;
  /* 0x0018 */ union vec3_t direction;
  /* 0x0024 */ unsigned int tagName;
  /* 0x0028 */ unsigned int burstCount;
  /* 0x002c */ BOOL shooterIsPlayer;
  /* 0x002d */ BOOL shooterIsLocalPlayer;
  /* 0x002e */ BOOL leftGun;
  /* 0x002f */ BOOL isLastShotInClip;
  /* 0x0030 */ BOOL isTurret;
  /* 0x0031 */ BOOL doubleTap;
  /* 0x0032 */ BOOL fakeFire;
  /* 0x0033 */ BOOL firstShotOfBurst;
}; /* size: 0x0034 */

struct snd_autosim_play
{
  /* 0x0000 */ unsigned int frame;
  /* 0x0004 */ struct snd_weapon_shot shot;
}; /* size: 0x0038 */

typedef struct _s_ThrowInfo
{
  /* 0x0000 */ unsigned int attributes;
  /* 0x0004 */ void* pmfnUnwind /* function */;
  /* 0x0008 */ void* pForwardCompat /* function */;
  /* 0x000c */ const struct _s_CatchableTypeArray* pCatchableTypeArray;
} s_ThrowInfo, *Ps_ThrowInfo; /* size: 0x0010 */

struct snd_autosim
{
  /* 0x0000 */ struct snd_weapon_shot shot;
  /* 0x0034 */ unsigned int lastPing;
  /* 0x0038 */ unsigned int lastShot;
  /* 0x003c */ unsigned int fireTime;
  /* 0x0040 */ unsigned short shotCount;
  /* 0x0042 */ unsigned short eventCount;
  /* 0x0044 */ int used;
  /* 0x0048 */ int isNew;
}; /* size: 0x004c */

struct NV_UNDERSCAN_CONFIG
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ float xRatio;
  /* 0x0008 */ float yRatio;
  /* 0x000c */ unsigned long nativeWidth;
  /* 0x0010 */ unsigned long nativeHeight;
  /* 0x0014 */ unsigned long nativeRR;
  struct /* bitfield */
  {
    /* 0x0018 */ unsigned long isInterlaced : 1; /* bit position: 0 */
    /* 0x0018 */ unsigned long isScalerUnderscan : 1; /* bit position: 1 */
    /* 0x0018 */ unsigned long isOnThisMonitorOnly : 1; /* bit position: 2 */
    /* 0x0018 */ unsigned long isOnThisDisplayOutputIdOnly : 1; /* bit position: 3 */
    /* 0x0018 */ unsigned long isEnabled : 1; /* bit position: 4 */
    /* 0x0018 */ unsigned long reserved : 27; /* bit position: 5 */
  }; /* bitfield */
}; /* size: 0x001c */

struct ID2D1RenderTarget
{
}; /* size: 0x0004 */

struct WeaponOptions
{
  /* 0x0000 */ struct WeaponOptions::CamoLookup camoLookupTable[128];
  /* 0x0400 */ struct WeaponCamo* meleeCamo;
  /* 0x0404 */ struct WeaponOptions::Reticle reticles[64][7];
  /* 0x1204 */ const struct GfxImage* emblemClearTexture;
}; /* size: 0x1208 */

struct NvUnAttachedDisplayHandle__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct OverheadFade
{
  /* 0x0000 */ int nextCheckTime;
  /* 0x0004 */ int lastTime;
  /* 0x0008 */ int startTime;
  /* 0x000c */ BOOL visible;
  /* 0x000d */ char Padding_1289[3];
  /* 0x0010 */ float alphaScale;
}; /* size: 0x0014 */

struct CG_DrawRangefinderHUD::__l8::Element;

typedef struct _D3DVERTEXBUFFER_DESC
{
  /* 0x0000 */ enum _D3DFORMAT Format;
  /* 0x0004 */ enum _D3DRESOURCETYPE Type;
  /* 0x0008 */ unsigned long Usage;
  /* 0x000c */ enum _D3DPOOL Pool;
  /* 0x0010 */ unsigned int Size;
  /* 0x0014 */ unsigned long FVF;
} D3DVERTEXBUFFER_DESC, *PD3DVERTEXBUFFER_DESC; /* size: 0x0018 */

struct ExtraCamClientStateRestore
{
  /* 0x0000 */ unsigned char m_buffer[864];
  /* 0x0360 */ union vec3_t m_vieworg;
  /* 0x036c */ union vec3_t m_refdefViewAngles;
  /* 0x0378 */ union vec3_t m_viewaxis[3];
  /* 0x039c */ enum LocalClientNum_t m_localClientNum;
}; /* size: 0x03a0 */

struct TestEffect
{
  /* 0x0000 */ char name[64];
  /* 0x0040 */ union vec3_t pos;
  /* 0x004c */ int time;
  /* 0x0050 */ int respawnTime;
}; /* size: 0x0054 */

struct cent_field_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int ofs;
  /* 0x0008 */ enum fieldtype_t type;
}; /* size: 0x000c */

typedef struct _D3DDEVICE_CREATION_PARAMETERS
{
  /* 0x0000 */ unsigned int AdapterOrdinal;
  /* 0x0004 */ enum _D3DDEVTYPE DeviceType;
  /* 0x0008 */ struct HWND__* hFocusWindow;
  /* 0x000c */ unsigned long BehaviorFlags;
} D3DDEVICE_CREATION_PARAMETERS, *PD3DDEVICE_CREATION_PARAMETERS; /* size: 0x0010 */

struct CgSoundPlaybackTrackingInfo
{
  /* 0x0000 */ int entitynum;
  /* 0x0004 */ union vec3_t origin;
  /* 0x0010 */ unsigned int aliasname;
  /* 0x0014 */ int wasInKillcam;
}; /* size: 0x0018 */

struct NV_INFOFRAME_HEADER
{
  /* 0x0000 */ unsigned char type;
  /* 0x0001 */ unsigned char version;
  /* 0x0002 */ unsigned char length;
}; /* size: 0x0003 */

struct ID3DX10Sprite
{
}; /* size: 0x0004 */

struct cent_field_s
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned int constId;
  /* 0x0008 */ int ofs;
  /* 0x000c */ int size[1];
  /* 0x0010 */ enum fieldtype_t type;
  /* 0x0014 */ void* setter /* function */;
  /* 0x0018 */ void* getter /* function */;
}; /* size: 0x001c */

struct IDWriteFontList
{
}; /* size: 0x0004 */

struct IDWriteLocalizedStrings
{
}; /* size: 0x0004 */

struct NV_UNDERSCAN_CAP
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ float xRatioMin;
  /* 0x0008 */ float xRatioMax;
  /* 0x000c */ float yRatioMin;
  /* 0x0010 */ float yRatioMax;
  struct /* bitfield */
  {
    /* 0x0014 */ unsigned long supportSourceUnderscan : 1; /* bit position: 0 */
    /* 0x0014 */ unsigned long supportScalerUnderscan : 1; /* bit position: 1 */
    /* 0x0014 */ unsigned long supportMonitorIdMatch : 1; /* bit position: 2 */
    /* 0x0014 */ unsigned long supportDisplayOutputIdMatch : 1; /* bit position: 3 */
    /* 0x0014 */ unsigned long supportXYIndependentCtrl : 1; /* bit position: 4 */
    /* 0x0014 */ unsigned long isSourceUnderscanRecommended : 1; /* bit position: 5 */
    /* 0x0014 */ unsigned long isScalerUnderscanRecommended : 1; /* bit position: 6 */
  }; /* bitfield */
}; /* size: 0x0018 */

class std::_Tree<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >
{
}; /* size: 0x0010 */

struct ID3DX10Font
{
}; /* size: 0x0004 */

struct D3DXVECTOR2
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
}; /* size: 0x0008 */

typedef struct _D3DX10_SPRITE
{
  /* 0x0000 */ struct D3DXMATRIX matWorld;
  /* 0x0040 */ struct D3DXVECTOR2 TexCoord;
  /* 0x0048 */ struct D3DXVECTOR2 TexSize;
  /* 0x0050 */ struct D3DXCOLOR ColorModulate;
  /* 0x0060 */ struct ID3D10ShaderResourceView* pTexture;
  /* 0x0064 */ unsigned int TextureIndex;
} D3DX10_SPRITE, *PD3DX10_SPRITE; /* size: 0x0068 */

struct std::pair<unsigned int,ID3D11BlendState *>;

struct NV_EDID_V3
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned char EDID_Data[256];
  /* 0x0104 */ unsigned long sizeofEDID;
  /* 0x0108 */ unsigned long edidId;
  /* 0x010c */ unsigned long offset;
}; /* size: 0x0110 */

typedef struct _NV_GPS_GET_PERF_SENSOR_COUNTERS_PARAM_V1
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long objHndl;
  /* 0x0008 */ unsigned short blockId;
  /* 0x000a */ char Padding_1290[2];
  /* 0x000c */ unsigned long nextExpectedSampleTime;
  /* 0x0010 */ unsigned long countersReq;
  /* 0x0014 */ unsigned long countersReturned;
  /* 0x0018 */ unsigned long counterBlock[32];
} NV_GPS_GET_PERF_SENSOR_COUNTERS_PARAM_V1, *PNV_GPS_GET_PERF_SENSOR_COUNTERS_PARAM_V1; /* size: 0x0098 */

typedef struct _D3DINDEXBUFFER_DESC
{
  /* 0x0000 */ enum _D3DFORMAT Format;
  /* 0x0004 */ enum _D3DRESOURCETYPE Type;
  /* 0x0008 */ unsigned long Usage;
  /* 0x000c */ enum _D3DPOOL Pool;
  /* 0x0010 */ unsigned int Size;
} D3DINDEXBUFFER_DESC, *PD3DINDEXBUFFER_DESC; /* size: 0x0014 */

class bdShutdownChunk
{
  /* 0x0000 */ long Padding_1291[4];
  /* 0x0010 */ enum bdShutdownChunk::bdShutdownFlags m_flags;
}; /* size: 0x0014 */

struct soundRandom_t
{
  /* 0x0000 */ unsigned int soundAlias;
  /* 0x0004 */ const char* soundName;
  /* 0x0008 */ union vec3_t pos;
  /* 0x0014 */ unsigned int minWait;
  /* 0x0018 */ unsigned int maxWait;
  /* 0x001c */ int nextPlayTime;
  /* 0x0020 */ struct soundRandom_t* next;
}; /* size: 0x0024 */

struct IDWritePixelSnapping
{
}; /* size: 0x0004 */

class std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >
{
}; /* size: 0x0004 */

struct NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_INFO_V1
{
  /* 0x0000 */ enum NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID channelId;
}; /* size: 0x0004 */

struct NV_GPU_CLIENT_POWER_TOPOLOGY_INFO_V1
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned char bSupported;
  /* 0x0005 */ unsigned char numChannels;
  /* 0x0006 */ char Padding_1292[2];
  /* 0x0008 */ struct NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_INFO_V1 channels[4];
}; /* size: 0x0018 */

class bdReference<bdCookieEchoChunk>
{
  /* 0x0000 */ class bdCookieEchoChunk* m_ptr;
}; /* size: 0x0004 */

struct DWRITE_TRIMMING
{
  /* 0x0000 */ enum DWRITE_TRIMMING_GRANULARITY granularity;
  /* 0x0004 */ unsigned int delimiter;
  /* 0x0008 */ unsigned int delimiterCount;
}; /* size: 0x000c */

struct scoreboardSortByName_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ const char* clanAbbrev;
  /* 0x0008 */ int matchClientScoreDataIndex;
  /* 0x000c */ enum ClientNum_t clientNum;
  /* 0x0010 */ BOOL clanAbbrevEV;
  /* 0x0011 */ char __PADDING__[3];
}; /* size: 0x0014 */

class bdMallocMemory
{
  union
  {
    /* 0x0000 */ struct bdMallocMemory::bdMemoryChainElement* m_memoryChain;
    /* 0x0000 */ unsigned int m_allocatedBytes;
    /* 0x0000 */ unsigned int m_numAllocations;
    /* 0x0000 */ class bdMutex m_mutex;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct ID2D1RadialGradientBrush
{
}; /* size: 0x0004 */

struct ActiveRumble
{
  /* 0x0000 */ const struct RumbleInfo* rumbleInfo;
  /* 0x0004 */ int startTime;
  /* 0x0008 */ BOOL loop;
  /* 0x0009 */ char Padding_1293[3];
  /* 0x000c */ enum RumbleSourceType sourceType;
  union
  {
    union
    {
      /* 0x0010 */ int entityNum;
      /* 0x0010 */ union vec3_t pos;
    }; /* size: 0x000c */
  } /* size: 0x000c */ source;
}; /* size: 0x001c */

struct RumbleGlobals
{
  /* 0x0000 */ struct RumbleGraph graphs[96];
  /* 0x5880 */ struct RumbleInfo infos[48];
  /* 0x5f40 */ struct ActiveRumble activeRumbles[32];
  /* 0x62c0 */ union vec3_t receiverPos;
  /* 0x62cc */ int receiverEntNum;
}; /* size: 0x62d0 */

class bdConnectionStatistics
{
  /* 0x0000 */ unsigned int m_bytesSent;
  /* 0x0004 */ unsigned int m_bytesSentPerSecond;
  /* 0x0008 */ unsigned int m_avgBytesSent;
  /* 0x000c */ unsigned int m_lastBytesSent;
  /* 0x0010 */ unsigned int m_bytesRecv;
  /* 0x0014 */ unsigned int m_avgPacketSentSize;
  /* 0x0018 */ unsigned int m_avgPacketRecvSize;
  /* 0x001c */ unsigned int m_maxPacketSizeSent;
  /* 0x0020 */ unsigned int m_minPacketSizeSent;
  /* 0x0024 */ unsigned int m_maxPacketSizeRecv;
  /* 0x0028 */ unsigned int m_minPacketSizeRecv;
  /* 0x002c */ unsigned int m_packetsSent;
  /* 0x0030 */ unsigned int m_packetsRecv;
  /* 0x0034 */ float m_maxRTT;
  /* 0x0038 */ float m_minRTT;
  /* 0x003c */ float m_avgRTT;
}; /* size: 0x0040 */

struct g_MODULE_PRIVATEDATA
{
  /* 0x0000 */ unsigned long checksum;
  /* 0x0004 */ unsigned long TimeDateStamp;
}; /* size: 0x0008 */

struct NV_I2C_INFO_EX
{
  /* 0x0000 */ unsigned long flags;
  /* 0x0004 */ unsigned long encrClientID;
}; /* size: 0x0008 */

struct D3D10_BLEND_DESC
{
  /* 0x0000 */ int AlphaToCoverageEnable;
  /* 0x0004 */ int BlendEnable[8];
  /* 0x0024 */ enum D3D10_BLEND SrcBlend;
  /* 0x0028 */ enum D3D10_BLEND DestBlend;
  /* 0x002c */ enum D3D10_BLEND_OP BlendOp;
  /* 0x0030 */ enum D3D10_BLEND SrcBlendAlpha;
  /* 0x0034 */ enum D3D10_BLEND DestBlendAlpha;
  /* 0x0038 */ enum D3D10_BLEND_OP BlendOpAlpha;
  /* 0x003c */ unsigned char RenderTargetWriteMask[8];
}; /* size: 0x0044 */

typedef struct _IMAGE_OPTIONAL_HEADER
{
  /* 0x0000 */ unsigned short Magic;
  /* 0x0002 */ unsigned char MajorLinkerVersion;
  /* 0x0003 */ unsigned char MinorLinkerVersion;
  /* 0x0004 */ unsigned long SizeOfCode;
  /* 0x0008 */ unsigned long SizeOfInitializedData;
  /* 0x000c */ unsigned long SizeOfUninitializedData;
  /* 0x0010 */ unsigned long AddressOfEntryPoint;
  /* 0x0014 */ unsigned long BaseOfCode;
  /* 0x0018 */ unsigned long BaseOfData;
  /* 0x001c */ unsigned long ImageBase;
  /* 0x0020 */ unsigned long SectionAlignment;
  /* 0x0024 */ unsigned long FileAlignment;
  /* 0x0028 */ unsigned short MajorOperatingSystemVersion;
  /* 0x002a */ unsigned short MinorOperatingSystemVersion;
  /* 0x002c */ unsigned short MajorImageVersion;
  /* 0x002e */ unsigned short MinorImageVersion;
  /* 0x0030 */ unsigned short MajorSubsystemVersion;
  /* 0x0032 */ unsigned short MinorSubsystemVersion;
  /* 0x0034 */ unsigned long Win32VersionValue;
  /* 0x0038 */ unsigned long SizeOfImage;
  /* 0x003c */ unsigned long SizeOfHeaders;
  /* 0x0040 */ unsigned long CheckSum;
  /* 0x0044 */ unsigned short Subsystem;
  /* 0x0046 */ unsigned short DllCharacteristics;
  /* 0x0048 */ unsigned long SizeOfStackReserve;
  /* 0x004c */ unsigned long SizeOfStackCommit;
  /* 0x0050 */ unsigned long SizeOfHeapReserve;
  /* 0x0054 */ unsigned long SizeOfHeapCommit;
  /* 0x0058 */ unsigned long LoaderFlags;
  /* 0x005c */ unsigned long NumberOfRvaAndSizes;
  /* 0x0060 */ struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER, *PIMAGE_OPTIONAL_HEADER; /* size: 0x00e0 */

struct TargetHighlightParam
{
  /* 0x0000 */ BOOL rangeFinderEnabled;
  /* 0x0001 */ char Padding_1294[3];
  /* 0x0004 */ float highlightSize;
  /* 0x0008 */ float maxHighlightSize;
  /* 0x000c */ float activeHalfWidth;
  /* 0x0010 */ float activeHalfHeight;
}; /* size: 0x0014 */

struct IDWriteFontFile
{
}; /* size: 0x0004 */

struct laser_cache_t
{
  /* 0x0000 */ int valid;
  /* 0x0004 */ int entnum;
  /* 0x0008 */ int lastUsed;
  /* 0x000c */ long Padding_1295;
  /* 0x0010 */ struct trace_t trace;
}; /* size: 0x0050 */

struct cg_hudelem_t
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
  /* 0x0008 */ float rotation;
  /* 0x000c */ float width;
  /* 0x0010 */ float height;
  /* 0x0014 */ char hudElemLabel[256];
  /* 0x0114 */ float labelWidth;
  /* 0x0118 */ char hudElemText[256];
  /* 0x0218 */ float textWidth;
  /* 0x021c */ struct Font_s* font;
  /* 0x0220 */ float fontScale;
  /* 0x0224 */ float fontHeight;
  /* 0x0228 */ union vec4_t color;
  /* 0x0238 */ int timeNow;
}; /* size: 0x023c */

struct NV_GPU_ECC_CONFIGURATION_INFO
{
  /* 0x0000 */ unsigned long version;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long isEnabled : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long isEnabledByDefault : 1; /* bit position: 1 */
  }; /* bitfield */
}; /* size: 0x0008 */

struct DelayListInfo
{
  /* 0x0000 */ struct centity_t* head;
  /* 0x0004 */ struct centity_t* latest;
  /* 0x0008 */ int size;
}; /* size: 0x000c */

class bdShutdownCompleteChunk
{
  /* 0x0000 */ long Padding_1296[4];
  /* 0x0010 */ enum bdShutdownCompleteChunk::bdShutdownCompleteFlags m_flags;
}; /* size: 0x0014 */

struct NV_VIEWPORTF
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
  /* 0x0008 */ float w;
  /* 0x000c */ float h;
}; /* size: 0x0010 */

struct NV_CUSTOM_DISPLAY
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long width;
  /* 0x0008 */ unsigned long height;
  /* 0x000c */ unsigned long depth;
  /* 0x0010 */ enum _NV_FORMAT colorFormat;
  /* 0x0014 */ struct NV_VIEWPORTF srcPartition;
  /* 0x0024 */ float xRatio;
  /* 0x0028 */ float yRatio;
  /* 0x002c */ struct tagNV_TIMING timing;
  /* 0x008c */ unsigned long hwModeSetOnly : 1; /* bit position: 0 */
}; /* size: 0x0090 */

struct cg_vertex_t
{
  /* 0x0000 */ union vec2_t position;
  /* 0x0008 */ union vec4_t color;
  /* 0x0018 */ union vec2_t texCoord;
}; /* size: 0x0020 */

struct IDWriteTypography
{
}; /* size: 0x0004 */

struct lagometer_t
{
  /* 0x0000 */ int frameSamples[128];
  /* 0x0200 */ int frameCount;
  /* 0x0204 */ int snapshotFlags[128];
  /* 0x0404 */ int snapshotSamples[128];
  /* 0x0604 */ int entitySamples[128];
  /* 0x0804 */ int changedEntitySamples[128];
  /* 0x0a04 */ int archivedEntitySamples[128];
  /* 0x0c04 */ int serverBandwidth[128];
  /* 0x0e04 */ int killcamTimes[128];
  /* 0x1004 */ int snapshotCount;
}; /* size: 0x1008 */

class bdSAckChunk
{
  /* 0x0000 */ long Padding_1297[4];
  /* 0x0010 */ enum bdSAckChunk::bdSAckFlags m_flags;
  /* 0x0014 */ unsigned short m_cumulativeAck;
  /* 0x0016 */ char Padding_1298[2];
  /* 0x0018 */ class bdLinkedList<bdSAckChunk::bdGapAckBlock> m_gaps;
  /* 0x0024 */ int m_windowCredit;
}; /* size: 0x0028 */

struct DrawNameEntity
{
  /* 0x0000 */ int entnum;
  /* 0x0004 */ float alpha;
  /* 0x0008 */ enum team_indicator teamIndicator;
  /* 0x000c */ float dist;
}; /* size: 0x0010 */

struct ID2D1SimplifiedGeometrySink
{
}; /* size: 0x0004 */

struct ScreenBurn
{
  /* 0x0000 */ int startTime;
  /* 0x0004 */ int endTime;
  /* 0x0008 */ enum LocalClientNum_t localClientNum;
}; /* size: 0x000c */

struct ScreenBlur
{
  /* 0x0000 */ enum BlurPriority priority;
  /* 0x0004 */ enum BlurTime time;
  /* 0x0008 */ int timeStart;
  /* 0x000c */ int timeEnd;
  /* 0x0010 */ float start;
  /* 0x0014 */ float end;
  /* 0x0018 */ float radius;
}; /* size: 0x001c */

struct DWRITE_LINE_METRICS
{
  /* 0x0000 */ unsigned int length;
  /* 0x0004 */ unsigned int trailingWhitespaceLength;
  /* 0x0008 */ unsigned int newlineLength;
  /* 0x000c */ float height;
  /* 0x0010 */ float baseline;
  /* 0x0014 */ int isTrimmed;
}; /* size: 0x0018 */

struct CenterPrint
{
  /* 0x0000 */ int time;
  /* 0x0004 */ char text[1024];
  /* 0x0404 */ int priority;
}; /* size: 0x0408 */

struct RopeGenerateVertsCmd
{
  /* 0x0000 */ struct RopeRenderInfo* ropeInfo;
  /* 0x0004 */ enum LocalClientNum_t localClientNum;
  /* 0x0008 */ union vec3_t vieworg;
  /* 0x0014 */ union vec3_t viewaxis[3];
}; /* size: 0x0038 */

struct HudGrenade
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ float predicted_dmg_ratio;
  /* 0x0010 */ float predicted_time_ratio;
  /* 0x0014 */ struct Material* material;
}; /* size: 0x0018 */

struct NvDRSProfileHandle__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct CompassObituary
{
  /* 0x0000 */ union vec2_t pos;
  /* 0x0008 */ int updateTime;
}; /* size: 0x000c */

struct CompassFakeFire
{
  /* 0x0000 */ union vec2_t pos;
  /* 0x0008 */ float yaw;
  /* 0x000c */ int entityNum;
  /* 0x0010 */ int beginFadeTime;
  /* 0x0014 */ BOOL enemy;
  /* 0x0015 */ BOOL satellite;
  /* 0x0016 */ char __PADDING__[2];
}; /* size: 0x0018 */

struct CompassVehicle
{
  /* 0x0000 */ int entityNum;
  /* 0x0004 */ int lastUpdate;
  /* 0x0008 */ union vec2_t lastPos;
  /* 0x0010 */ float lastYaw;
  /* 0x0014 */ float turretYaw;
  /* 0x0018 */ enum team_t team;
  /* 0x001c */ int ownerIndex;
}; /* size: 0x0020 */

typedef struct _JMP_BUF
{
  /* 0x0000 */ unsigned long saved_ebp;
  /* 0x0004 */ unsigned long saved_ebx;
  /* 0x0008 */ unsigned long saved_edi;
  /* 0x000c */ unsigned long saved_esi;
  /* 0x0010 */ unsigned long saved_esp;
  /* 0x0014 */ unsigned long saved_return;
  /* 0x0018 */ unsigned long saved_xregistration;
  /* 0x001c */ unsigned long saved_trylevel;
  /* 0x0020 */ unsigned long version_cookie;
  /* 0x0024 */ unsigned long unwind_func;
  /* 0x0028 */ unsigned long unwind_data;
  /* 0x002c */ long __PADDING__[5];
} JMP_BUF, *PJMP_BUF; /* size: 0x0040 */

struct CompassTurrets
{
  /* 0x0000 */ int entityNum;
  /* 0x0004 */ int lastUpdate;
  /* 0x0008 */ int beginFadeTime;
  /* 0x000c */ union vec2_t lastPos;
  /* 0x0014 */ float lastYaw;
  /* 0x0018 */ enum team_t team;
  /* 0x001c */ int ownerIndex;
  /* 0x0020 */ BOOL enemy;
  /* 0x0021 */ BOOL firing;
  /* 0x0022 */ char __PADDING__[2];
}; /* size: 0x0024 */

class bdReference<bdHeartbeatChunk>
{
  /* 0x0000 */ class bdHeartbeatChunk* m_ptr;
}; /* size: 0x0004 */

struct CompassGuidedMissile
{
  /* 0x0000 */ int entityNum;
  /* 0x0004 */ int lastUpdate;
  /* 0x0008 */ union vec2_t lastPos;
  /* 0x0010 */ float lastYaw;
  /* 0x0014 */ BOOL isDrone;
  /* 0x0015 */ char Padding_1299[3];
  /* 0x0018 */ enum team_t team;
  /* 0x001c */ int ownerIndex;
}; /* size: 0x0020 */

struct ID2D1PathGeometry
{
}; /* size: 0x0004 */

struct CompassActor
{
  /* 0x0000 */ int lastUpdate;
  /* 0x0004 */ union vec2_t lastPos;
  /* 0x000c */ union vec2_t lastEnemyPos;
  /* 0x0014 */ union vec2_t satelliteEnemyPos;
  /* 0x001c */ float lastYaw;
  /* 0x0020 */ float sattelitePingYaw;
  /* 0x0024 */ int pingTime;
  /* 0x0028 */ int beginFadeTime;
  /* 0x002c */ int beginShoutCasterFadeTime;
  /* 0x0030 */ int beginRadarFadeTime;
  /* 0x0034 */ int beginSatelliteFadeTime;
  /* 0x0038 */ int beginStaticImageFadeTime;
  /* 0x003c */ int beginVoiceFadeTime;
  /* 0x0040 */ unsigned int perks[2];
  struct /* bitfield */
  {
    /* 0x0048 */ unsigned char needsRevive : 1; /* bit position: 0 */
    /* 0x0048 */ unsigned char gpsJammerActive : 1; /* bit position: 1 */
    /* 0x0048 */ unsigned char inVehicle : 1; /* bit position: 2 */
    /* 0x0048 */ unsigned char enemy : 1; /* bit position: 3 */
  }; /* bitfield */
  /* 0x0049 */ char Padding_1300[3];
  /* 0x004c */ int sensorGrenadePingTime;
  /* 0x0050 */ float currentFadeTimeAmount;
}; /* size: 0x0054 */

struct CompassArtillery
{
  /* 0x0000 */ union vec2_t pos;
  /* 0x0008 */ union vec2_t realPos;
  /* 0x0010 */ int fireTime;
}; /* size: 0x0014 */

struct ID2D1BitmapRenderTarget
{
}; /* size: 0x0004 */

struct CompassHelicopter
{
  /* 0x0000 */ int entityNum;
  /* 0x0004 */ int lastUpdate;
  /* 0x0008 */ union vec2_t lastPos;
  /* 0x0010 */ float lastYaw;
  /* 0x0014 */ enum team_t team;
  /* 0x0018 */ int ownerIndex;
}; /* size: 0x001c */

struct cgCloudLayer_t
{
  /* 0x0000 */ struct XModel* model;
  /* 0x0004 */ float cloudCover;
  /* 0x0008 */ float minHeight;
  /* 0x000c */ float maxHeight;
  /* 0x0010 */ float minSpeed;
  /* 0x0014 */ float maxSpeed;
  /* 0x0018 */ float radius;
}; /* size: 0x001c */

struct cgCloud_t
{
  /* 0x0000 */ union vec3_t pos;
  /* 0x000c */ float speed;
  /* 0x0010 */ float qsin;
  /* 0x0014 */ float qcos;
  /* 0x0018 */ struct cgCloudLayer_t* layer;
}; /* size: 0x001c */

struct CameraShake
{
  /* 0x0000 */ int time;
  /* 0x0004 */ float scale;
  /* 0x0008 */ float length;
  /* 0x000c */ float radius;
  /* 0x0010 */ union vec3_t src;
  /* 0x001c */ float size;
  /* 0x0020 */ float rumbleScale;
}; /* size: 0x0024 */

struct CameraShakeSet
{
  /* 0x0000 */ struct CameraShake shakes[4];
  /* 0x0090 */ float phase;
}; /* size: 0x0094 */

typedef struct _NV_POSITION
{
  /* 0x0000 */ int x;
  /* 0x0004 */ int y;
} NV_POSITION, *PNV_POSITION; /* size: 0x0008 */

struct ID3D10Query
{
}; /* size: 0x0004 */

struct script_s
{
  /* 0x0000 */ char filename[64];
  /* 0x0040 */ char* buffer;
  /* 0x0044 */ char* script_p;
  /* 0x0048 */ char* end_p;
  /* 0x004c */ char* lastscript_p;
  /* 0x0050 */ char* whitespace_p;
  /* 0x0054 */ char* endwhitespace_p;
  /* 0x0058 */ int length;
  /* 0x005c */ int line;
  /* 0x0060 */ int lastline;
  /* 0x0064 */ int tokenavailable;
  /* 0x0068 */ int flags;
  /* 0x006c */ struct punctuation_s* punctuations;
  /* 0x0070 */ struct punctuation_s** punctuationtable;
  /* 0x0074 */ long Padding_1301;
  /* 0x0078 */ struct token_s token;
  /* 0x04a8 */ struct script_s* next;
  /* 0x04ac */ long __PADDING__[1];
}; /* size: 0x04b0 */

struct ID3D10GeometryShader
{
}; /* size: 0x0004 */

struct punctuation_s
{
  /* 0x0000 */ char* p;
  /* 0x0004 */ int n;
  /* 0x0008 */ struct punctuation_s* next;
}; /* size: 0x000c */

struct directive_s
{
  /* 0x0000 */ char* name;
  /* 0x0004 */ void* func /* function */;
}; /* size: 0x0008 */

struct ID3D10BlendState
{
}; /* size: 0x0004 */

struct source_s
{
  /* 0x0000 */ char filename[64];
  /* 0x0040 */ char includepath[64];
  /* 0x0080 */ struct punctuation_s* punctuations;
  /* 0x0084 */ struct script_s* scriptstack;
  /* 0x0088 */ struct token_s* tokens;
  /* 0x008c */ struct define_s* defines;
  /* 0x0090 */ struct define_s** definehash;
  /* 0x0094 */ struct indent_s* indentstack;
  /* 0x0098 */ int skip;
  /* 0x009c */ long Padding_1302;
  /* 0x00a0 */ struct token_s token;
}; /* size: 0x04d0 */

typedef struct _NVAPI_QUERY_COLOR_INFO
{
  /* 0x0000 */ unsigned long dwColorSpaces;
  /* 0x0004 */ unsigned long dwReserved[4];
} NVAPI_QUERY_COLOR_INFO, *PNVAPI_QUERY_COLOR_INFO; /* size: 0x0014 */

typedef struct _DDBLTBATCH
{
  /* 0x0000 */ struct tagRECT* lprDest;
  /* 0x0004 */ struct IDirectDrawSurface* lpDDSSrc;
  /* 0x0008 */ struct tagRECT* lprSrc;
  /* 0x000c */ unsigned long dwFlags;
  /* 0x0010 */ struct _DDBLTFX* lpDDBltFx;
} DDBLTBATCH, *PDDBLTBATCH; /* size: 0x0014 */

struct define_s
{
  /* 0x0000 */ char* name;
  /* 0x0004 */ int flags;
  /* 0x0008 */ int builtin;
  /* 0x000c */ int numparms;
  /* 0x0010 */ struct token_s* parms;
  /* 0x0014 */ struct token_s* tokens;
  /* 0x0018 */ struct define_s* next;
  /* 0x001c */ struct define_s* hashnext;
}; /* size: 0x0020 */

struct NV_GPU_DISPLAY_MODE
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long activeWidth;
  /* 0x0008 */ unsigned long activeHeight;
  /* 0x000c */ unsigned long totalWidth;
  /* 0x0010 */ unsigned long totalHeight;
  /* 0x0014 */ unsigned long depth;
  /* 0x0018 */ unsigned long frequency;
}; /* size: 0x001c */

struct indent_s
{
  /* 0x0000 */ int type;
  /* 0x0004 */ enum parseSkip_t skip;
  /* 0x0008 */ struct script_s* script;
  /* 0x000c */ struct indent_s* next;
}; /* size: 0x0010 */

struct D3DXVECTOR2_16F
{
  /* 0x0000 */ struct D3DXFLOAT16 x;
  /* 0x0002 */ struct D3DXFLOAT16 y;
}; /* size: 0x0004 */

struct SBDecState
{
  /* 0x0000 */ const struct SpeexMode* mode;
  /* 0x0004 */ void* st_low;
  /* 0x0008 */ int full_frame_size;
  /* 0x000c */ int frame_size;
  /* 0x0010 */ int subframeSize;
  /* 0x0014 */ int nbSubframes;
  /* 0x0018 */ int lpcSize;
  /* 0x001c */ int first;
  /* 0x0020 */ int sampling_rate;
  /* 0x0024 */ int lpc_enh_enabled;
  /* 0x0028 */ char* stack;
  /* 0x002c */ float* x0d;
  /* 0x0030 */ float* x1d;
  /* 0x0034 */ float* high;
  /* 0x0038 */ float* y0;
  /* 0x003c */ float* y1;
  /* 0x0040 */ float* g0_mem;
  /* 0x0044 */ float* g1_mem;
  /* 0x0048 */ float* exc;
  /* 0x004c */ float* qlsp;
  /* 0x0050 */ float* old_qlsp;
  /* 0x0054 */ float* interp_qlsp;
  /* 0x0058 */ float* interp_qlpc;
  /* 0x005c */ float* mem_sp;
  /* 0x0060 */ float* pi_gain;
  /* 0x0064 */ int encode_submode;
  /* 0x0068 */ const struct SpeexSubmode* const* submodes;
  /* 0x006c */ int submodeID;
}; /* size: 0x0070 */

struct value_s
{
  /* 0x0000 */ long intvalue;
  /* 0x0004 */ long Padding_1303;
  /* 0x0008 */ double floatvalue;
  /* 0x0010 */ int parentheses;
  /* 0x0014 */ struct value_s* prev;
  /* 0x0018 */ struct value_s* next;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

struct operator_s
{
  /* 0x0000 */ int op;
  /* 0x0004 */ int priority;
  /* 0x0008 */ int parentheses;
  /* 0x000c */ struct operator_s* prev;
  /* 0x0010 */ struct operator_s* next;
}; /* size: 0x0014 */

struct unlockMapping_t
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ const char* stringRef;
}; /* size: 0x0008 */

struct unlockableItemsDataShared
{
  /* 0x0000 */ struct unlockMapping_t unlockMappings[20];
  /* 0x00a0 */ int itemGroupToUnlock[20];
  /* 0x00f0 */ int itemGroupCount[20];
}; /* size: 0x0140 */

struct tagTEXTMETRICA
{
  /* 0x0000 */ long tmHeight;
  /* 0x0004 */ long tmAscent;
  /* 0x0008 */ long tmDescent;
  /* 0x000c */ long tmInternalLeading;
  /* 0x0010 */ long tmExternalLeading;
  /* 0x0014 */ long tmAveCharWidth;
  /* 0x0018 */ long tmMaxCharWidth;
  /* 0x001c */ long tmWeight;
  /* 0x0020 */ long tmOverhang;
  /* 0x0024 */ long tmDigitizedAspectX;
  /* 0x0028 */ long tmDigitizedAspectY;
  /* 0x002c */ unsigned char tmFirstChar;
  /* 0x002d */ unsigned char tmLastChar;
  /* 0x002e */ unsigned char tmDefaultChar;
  /* 0x002f */ unsigned char tmBreakChar;
  /* 0x0030 */ unsigned char tmItalic;
  /* 0x0031 */ unsigned char tmUnderlined;
  /* 0x0032 */ unsigned char tmStruckOut;
  /* 0x0033 */ unsigned char tmPitchAndFamily;
  /* 0x0034 */ unsigned char tmCharSet;
  /* 0x0035 */ char __PADDING__[3];
}; /* size: 0x0038 */

struct FactionData
{
  /* 0x0000 */ union vec3_t factionColor[10];
  /* 0x0078 */ BOOL initialized;
  /* 0x0079 */ char __PADDING__[3];
}; /* size: 0x007c */

struct XVertexInfo0
{
  /* 0x0000 */ unsigned short boneOffset;
}; /* size: 0x0002 */

struct XVertexInfo2
{
  /* 0x0000 */ struct XVertexInfo0 vert0;
  /* 0x0002 */ struct XBlendLoadInfo blend[2];
}; /* size: 0x000a */

struct BG_InitClientFields::__l5::clientFieldSystemDef_s
{
  /* 0x0000 */ int systemIndex;
  /* 0x0004 */ int numNetFields;
  /* 0x0008 */ int setNetfieldAddressOffsets[160];
}; /* size: 0x0288 */

class D2D1::Matrix3x2F
{
}; /* size: 0x0018 */

struct D3DX10_IMAGE_LOAD_INFO
{
  /* 0x0000 */ unsigned int Width;
  /* 0x0004 */ unsigned int Height;
  /* 0x0008 */ unsigned int Depth;
  /* 0x000c */ unsigned int FirstMipLevel;
  /* 0x0010 */ unsigned int MipLevels;
  /* 0x0014 */ enum D3D10_USAGE Usage;
  /* 0x0018 */ unsigned int BindFlags;
  /* 0x001c */ unsigned int CpuAccessFlags;
  /* 0x0020 */ unsigned int MiscFlags;
  /* 0x0024 */ enum DXGI_FORMAT Format;
  /* 0x0028 */ unsigned int Filter;
  /* 0x002c */ unsigned int MipFilter;
  /* 0x0030 */ struct D3DX10_IMAGE_INFO* pSrcInfo;
}; /* size: 0x0034 */

struct IDirect3DVertexDeclaration9
{
}; /* size: 0x0004 */

struct IDirect3DResource9
{
}; /* size: 0x0004 */

typedef struct _D3DX11_TEXTURE_LOAD_INFO
{
  /* 0x0000 */ struct D3D11_BOX* pSrcBox;
  /* 0x0004 */ struct D3D11_BOX* pDstBox;
  /* 0x0008 */ unsigned int SrcFirstMip;
  /* 0x000c */ unsigned int DstFirstMip;
  /* 0x0010 */ unsigned int NumMips;
  /* 0x0014 */ unsigned int SrcFirstElement;
  /* 0x0018 */ unsigned int DstFirstElement;
  /* 0x001c */ unsigned int NumElements;
  /* 0x0020 */ unsigned int Filter;
  /* 0x0024 */ unsigned int MipFilter;
} D3DX11_TEXTURE_LOAD_INFO, *PD3DX11_TEXTURE_LOAD_INFO; /* size: 0x0028 */

struct ID3D10RasterizerState
{
}; /* size: 0x0004 */

struct NvPhysicalGpuHandle__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct ID3D10SamplerState
{
}; /* size: 0x0004 */

struct std::pair<AimTarget *,AimTarget *>
{
}; /* size: 0x0008 */

struct AimTargetGlob
{
  /* 0x0000 */ struct AimTarget targets[64];
  /* 0x0b00 */ int targetCount;
}; /* size: 0x0b04 */

struct CombFilterMem
{
  /* 0x0000 */ int last_pitch;
  /* 0x0004 */ float last_pitch_gain[3];
  /* 0x0010 */ float smooth_gain;
}; /* size: 0x0014 */

struct ID3D10DeviceChild
{
}; /* size: 0x0004 */

struct GfxLightGridRow
{
  /* 0x0000 */ unsigned short colStart;
  /* 0x0002 */ unsigned short colCount;
  /* 0x0004 */ unsigned short zStart;
  /* 0x0006 */ unsigned short zCount;
  /* 0x0008 */ unsigned int firstEntry;
}; /* size: 0x000c */

struct NV_HYBRID_APP_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ char appName[256];
  /* 0x0104 */ char friendlyName[256];
}; /* size: 0x0204 */

class bdFacebookAccount
{
  /* 0x0000 */ long Padding_1304[2];
  /* 0x0008 */ unsigned __int64 m_accountID;
  /* 0x0010 */ char m_accountName[128];
}; /* size: 0x0090 */

struct NV_INFOFRAME_DATA
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned short size;
  /* 0x0006 */ unsigned char cmd;
  /* 0x0007 */ unsigned char type;
  union
  {
    union
    {
      /* 0x0008 */ struct NV_INFOFRAME_PROPERTY property;
      /* 0x0008 */ struct NV_INFOFRAME_AUDIO audio;
      /* 0x0008 */ struct NV_INFOFRAME_VIDEO video;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ infoframe;
}; /* size: 0x0020 */

struct GfxLightingSHAndVis
{
  /* 0x0000 */ struct GfxLightingSH sh;
  /* 0x0030 */ float vis;
}; /* size: 0x0034 */

class bdFacebookTag
{
  /* 0x0000 */ long Padding_1305[2];
  /* 0x0008 */ unsigned __int64 m_accountID;
  /* 0x0010 */ unsigned short m_x;
  /* 0x0012 */ unsigned short m_y;
}; /* size: 0x0018 */

typedef struct _NVVIOCONFIG_V3
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long fields;
  /* 0x0008 */ enum _NVVIOCONFIGTYPE nvvioConfigType;
  union
  {
    union
    {
      /* 0x000c */ struct _NVVIOINPUTCONFIG inConfig;
      /* 0x000c */ struct _NVVIOOUTPUTCONFIG_V3 outConfig;
    }; /* size: 0x19d4 */
  } /* size: 0x19d4 */ vioConfig;
} NVVIOCONFIG_V3, *PNVVIOCONFIG_V3; /* size: 0x19e0 */

struct GfxSmodelLightGlob
{
  /* 0x0000 */ unsigned short freeableHandles[7680];
  /* 0x3c00 */ unsigned int lightingBits[512];
  struct
  {
    /* 0x4400 */ unsigned short smodelIndex[7680];
    /* 0x8000 */ unsigned int usedFrameCount[7680];
    /* 0xf800 */ unsigned int entryLimit;
    /* 0xf804 */ unsigned int assignedCount;
    /* 0xf808 */ unsigned int freeableCount;
    /* 0xf80c */ unsigned int frameCount;
    /* 0xf810 */ int anyNewLighting;
    /* 0xf814 */ unsigned int pad[27];
  } /* size: 0xb480 */ local;
}; /* size: 0xf880 */

struct CURLMsg
{
  /* 0x0000 */ enum CURLMSG msg;
  /* 0x0004 */ void* easy_handle;
  union
  {
    union
    {
      /* 0x0008 */ void* whatever;
      /* 0x0008 */ enum CURLcode result;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ data;
}; /* size: 0x000c */

typedef struct _NV_OVLY_SURFS_INFO
{
  /* 0x0000 */ struct NVDX_ObjectHandle__* handle[6];
  /* 0x0018 */ unsigned int numSurfs;
} NV_OVLY_SURFS_INFO, *PNV_OVLY_SURFS_INFO; /* size: 0x001c */

class Sse_SkinVertex_3
{
}; /* size: 0x0001 */

class bdReceivedMessage
{
  /* 0x0000 */ class bdReference<bdMessage> m_message;
  /* 0x0004 */ class bdReference<bdConnection> m_connection;
}; /* size: 0x0008 */

struct NV_GPU_VOLTAGE_DOMAIN_STATUS_V1
{
  /* 0x0000 */ enum _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID domainId;
  /* 0x0004 */ unsigned long voltageuV;
}; /* size: 0x0008 */

struct NV_GPU_VOLTAGE_DOMAINS_STATUS_V1
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long flags;
  /* 0x0008 */ unsigned long numDomains;
  /* 0x000c */ struct NV_GPU_VOLTAGE_DOMAIN_STATUS_V1 domains[16];
}; /* size: 0x008c */

struct D3DXPLANE
{
  /* 0x0000 */ float a;
  /* 0x0004 */ float b;
  /* 0x0008 */ float c;
  /* 0x000c */ float d;
}; /* size: 0x0010 */

class bdHMac
{
}; /* size: 0x0004 */

struct NV_MOSAIC_DISPLAY_CAPS_V2
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long displayCount;
  /* 0x0008 */ struct NV_MOSAIC_DISPLAY_DETAILS displays[128];
  /* 0x0608 */ unsigned long displaySettingsCount;
  /* 0x060c */ struct NV_MOSAIC_DISPLAY_SETTING displaySettings[1600];
  /* 0x830c */ unsigned long problemFlags;
}; /* size: 0x8310 */

typedef struct _NVAPI_GET_VIDEO_STATE_COMPONENT
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long componentID;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long bIsSupported : 1; /* bit position: 0 */
    /* 0x0008 */ unsigned long bIsOverridenByUser : 1; /* bit position: 1 */
    /* 0x0008 */ unsigned long reserved1 : 30; /* bit position: 2 */
  }; /* bitfield */
  /* 0x000c */ unsigned long isEnabled;
  /* 0x0010 */ unsigned long minValue;
  /* 0x0014 */ unsigned long maxValue;
  /* 0x0018 */ unsigned long totalSteps;
  /* 0x001c */ unsigned long defaultValue;
  /* 0x0020 */ unsigned long unityValue;
  /* 0x0024 */ unsigned long currentValueActive;
  /* 0x0028 */ unsigned __int64 defaultAlgo;
  /* 0x0030 */ unsigned __int64 currentAlgoActive;
  union
  {
    /* 0x0038 */ unsigned __int64 qwReserved[9];
    struct
    {
      struct
      {
        /* 0x0038 */ unsigned long dwAppKey;
        struct /* bitfield */
        {
          /* 0x003c */ unsigned long bTopPriority : 1; /* bit position: 0 */
          /* 0x003c */ unsigned long bHasCustomAlgo : 1; /* bit position: 1 */
          /* 0x003c */ unsigned long bReserved : 30; /* bit position: 2 */
        }; /* bitfield */
        struct
        {
          /* 0x0040 */ unsigned __int64 pData;
          /* 0x0048 */ unsigned long dwSize;
          /* 0x004c */ long __PADDING__[1];
        } /* size: 0x0010 */ customAlgo;
      } /* size: 0x0018 */ appInfo;
      /* 0x0050 */ long __PADDING__[12];
    }; /* size: 0x0048 */
  }; /* size: 0x0048 */
} NVAPI_GET_VIDEO_STATE_COMPONENT, *PNVAPI_GET_VIDEO_STATE_COMPONENT; /* size: 0x0080 */

struct NV_MOSAIC_CAPS_V2
{
  /* 0x0000 */ unsigned long version;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long bSupportsImmersiveGaming : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long bSupportsMosaic : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned long bSupportsGlobalRotation : 1; /* bit position: 2 */
    /* 0x0004 */ unsigned long bSupportsPerDisplayRotation : 1; /* bit position: 3 */
    /* 0x0004 */ unsigned long bSupportsPerDisplaySettings : 1; /* bit position: 4 */
    /* 0x0004 */ unsigned long bSupportsOverlap : 1; /* bit position: 5 */
    /* 0x0004 */ unsigned long bSupportsGaps : 1; /* bit position: 6 */
    /* 0x0004 */ unsigned long bSupportsUnevenGapping : 1; /* bit position: 7 */
    /* 0x0004 */ unsigned long bSupportsPassiveStereo : 1; /* bit position: 8 */
    /* 0x0004 */ unsigned long reserved : 23; /* bit position: 9 */
  }; /* bitfield */
}; /* size: 0x0008 */

struct tagTEXTMETRICW
{
  /* 0x0000 */ long tmHeight;
  /* 0x0004 */ long tmAscent;
  /* 0x0008 */ long tmDescent;
  /* 0x000c */ long tmInternalLeading;
  /* 0x0010 */ long tmExternalLeading;
  /* 0x0014 */ long tmAveCharWidth;
  /* 0x0018 */ long tmMaxCharWidth;
  /* 0x001c */ long tmWeight;
  /* 0x0020 */ long tmOverhang;
  /* 0x0024 */ long tmDigitizedAspectX;
  /* 0x0028 */ long tmDigitizedAspectY;
  /* 0x002c */ wchar_t tmFirstChar;
  /* 0x002e */ wchar_t tmLastChar;
  /* 0x0030 */ wchar_t tmDefaultChar;
  /* 0x0032 */ wchar_t tmBreakChar;
  /* 0x0034 */ unsigned char tmItalic;
  /* 0x0035 */ unsigned char tmUnderlined;
  /* 0x0036 */ unsigned char tmStruckOut;
  /* 0x0037 */ unsigned char tmPitchAndFamily;
  /* 0x0038 */ unsigned char tmCharSet;
  /* 0x0039 */ char __PADDING__[3];
}; /* size: 0x003c */

typedef struct _NVDRS_GPU_SUPPORT
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long geforce : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long quadro : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long nvs : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long reserved4 : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long reserved5 : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long reserved6 : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long reserved7 : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned long reserved8 : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned long reserved9 : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned long reserved10 : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned long reserved11 : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned long reserved12 : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned long reserved13 : 1; /* bit position: 12 */
    /* 0x0000 */ unsigned long reserved14 : 1; /* bit position: 13 */
    /* 0x0000 */ unsigned long reserved15 : 1; /* bit position: 14 */
    /* 0x0000 */ unsigned long reserved16 : 1; /* bit position: 15 */
    /* 0x0000 */ unsigned long reserved17 : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned long reserved18 : 1; /* bit position: 17 */
    /* 0x0000 */ unsigned long reserved19 : 1; /* bit position: 18 */
    /* 0x0000 */ unsigned long reserved20 : 1; /* bit position: 19 */
    /* 0x0000 */ unsigned long reserved21 : 1; /* bit position: 20 */
    /* 0x0000 */ unsigned long reserved22 : 1; /* bit position: 21 */
    /* 0x0000 */ unsigned long reserved23 : 1; /* bit position: 22 */
    /* 0x0000 */ unsigned long reserved24 : 1; /* bit position: 23 */
    /* 0x0000 */ unsigned long reserved25 : 1; /* bit position: 24 */
    /* 0x0000 */ unsigned long reserved26 : 1; /* bit position: 25 */
    /* 0x0000 */ unsigned long reserved27 : 1; /* bit position: 26 */
    /* 0x0000 */ unsigned long reserved28 : 1; /* bit position: 27 */
    /* 0x0000 */ unsigned long reserved29 : 1; /* bit position: 28 */
    /* 0x0000 */ unsigned long reserved30 : 1; /* bit position: 29 */
    /* 0x0000 */ unsigned long reserved31 : 1; /* bit position: 30 */
    /* 0x0000 */ unsigned long reserved32 : 1; /* bit position: 31 */
  }; /* bitfield */
} NVDRS_GPU_SUPPORT, *PNVDRS_GPU_SUPPORT; /* size: 0x0004 */

typedef struct _NVDRS_PROFILE
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned short profileName[2048];
  /* 0x1004 */ struct _NVDRS_GPU_SUPPORT gpuSupport;
  /* 0x1008 */ unsigned long isPredefined;
  /* 0x100c */ unsigned long numOfApps;
  /* 0x1010 */ unsigned long numOfSettings;
} NVDRS_PROFILE, *PNVDRS_PROFILE; /* size: 0x1014 */

struct NV_HDMI_STEREO_MODES_LIST_V1
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long displayId;
  /* 0x0008 */ unsigned short enumIndex;
  /* 0x000a */ unsigned short count;
  /* 0x000c */ unsigned long width;
  /* 0x0010 */ unsigned long height;
  /* 0x0014 */ unsigned long refreshRate;
  struct /* bitfield */
  {
    /* 0x0018 */ unsigned long bMatchDimension : 1; /* bit position: 0 */
    /* 0x0018 */ unsigned long bMatchRR : 1; /* bit position: 1 */
    /* 0x0018 */ unsigned long bPassThroughMode : 1; /* bit position: 2 */
    /* 0x0018 */ unsigned long reserved : 29; /* bit position: 3 */
  }; /* bitfield */
  /* 0x001c */ unsigned short numberOfModes;
  /* 0x001e */ char Padding_1306[2];
  /* 0x0020 */ struct NV_HDMI_STEREO_MODE modeList[256];
}; /* size: 0x1420 */

typedef struct _NVVIOPCIINFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long pciDeviceId;
  /* 0x0008 */ unsigned long pciSubSystemId;
  /* 0x000c */ unsigned long pciRevisionId;
  /* 0x0010 */ unsigned long pciDomain;
  /* 0x0014 */ unsigned long pciBus;
  /* 0x0018 */ unsigned long pciSlot;
  /* 0x001c */ enum _NVVIOPCILINKWIDTH pciLinkWidth;
  /* 0x0020 */ enum _NVVIOPCILINKRATE pciLinkRate;
} NVVIOPCIINFO, *PNVVIOPCIINFO; /* size: 0x0024 */

struct NvSBox
{
  /* 0x0000 */ int sX;
  /* 0x0004 */ int sY;
  /* 0x0008 */ int sWidth;
  /* 0x000c */ int sHeight;
}; /* size: 0x0010 */

struct NV_DX_PRESENT_VIDEO_PARAMS1
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ struct NVDX_ObjectHandle__* surfaceHandle;
  /* 0x0008 */ unsigned long pvFlags;
  /* 0x000c */ unsigned long colourKey;
  /* 0x0010 */ unsigned long timeStampLow;
  /* 0x0014 */ unsigned long timeStampHigh;
  /* 0x0018 */ unsigned long flipRate;
  /* 0x001c */ struct NvSBox srcUnclipped;
  /* 0x002c */ struct NvSBox srcClipped;
  /* 0x003c */ struct NvSBox dst;
}; /* size: 0x004c */

struct NV_DISPLAY_IMAGE_SHARPENING_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long currentLevel;
  /* 0x0008 */ unsigned long minLevel;
  /* 0x000c */ unsigned long maxLevel;
}; /* size: 0x0010 */

typedef struct _NV_GPU_SET_ILLUMINATION_PARM_V1
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ struct NvPhysicalGpuHandle__* hPhysicalGpu;
  /* 0x0008 */ enum _NV_GPU_ILLUMINATION_ATTRIB Attribute;
  /* 0x000c */ unsigned long Value;
} NV_GPU_SET_ILLUMINATION_PARM_V1, *PNV_GPU_SET_ILLUMINATION_PARM_V1; /* size: 0x0010 */

typedef struct _NV_GPU_DITHER_CONTROL_V1
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum _NVAPI_DITHER_TYPE ditherEnable;
  /* 0x0008 */ enum _NVAPI_DITHER_BITS ditherBitDepth;
  /* 0x000c */ enum _NVAPI_DITHER_MODE ditherMode;
  /* 0x0010 */ unsigned long ditherBitDepths;
  /* 0x0014 */ unsigned long ditherModes;
} NV_GPU_DITHER_CONTROL_V1, *PNV_GPU_DITHER_CONTROL_V1; /* size: 0x0018 */

typedef struct _NV_DISPLAYCONFIG_PATH_TARGET_INFO_V2
{
  /* 0x0000 */ unsigned long displayId;
  /* 0x0004 */ struct _NV_DISPLAYCONFIG_PATH_ADVANCED_TARGET_INFO_V1* details;
  /* 0x0008 */ unsigned long targetId;
} NV_DISPLAYCONFIG_PATH_TARGET_INFO_V2, *PNV_DISPLAYCONFIG_PATH_TARGET_INFO_V2; /* size: 0x000c */

typedef struct _NV_DISPLAYCONFIG_PATH_ADVANCED_TARGET_INFO_V1
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum _NV_ROTATE rotation;
  /* 0x0008 */ enum _NV_SCALING scaling;
  /* 0x000c */ unsigned long refreshRate1K;
  struct /* bitfield */
  {
    /* 0x0010 */ unsigned long interlaced : 1; /* bit position: 0 */
    /* 0x0010 */ unsigned long primary : 1; /* bit position: 1 */
    /* 0x0010 */ unsigned long reserved : 30; /* bit position: 2 */
  }; /* bitfield */
  /* 0x0014 */ enum _NV_GPU_CONNECTOR_TYPE connector;
  /* 0x0018 */ enum _NV_DISPLAY_TV_FORMAT tvFormat;
  /* 0x001c */ enum _NV_TIMING_OVERRIDE timingOverride;
  /* 0x0020 */ struct tagNV_TIMING timing;
} NV_DISPLAYCONFIG_PATH_ADVANCED_TARGET_INFO_V1, *PNV_DISPLAYCONFIG_PATH_ADVANCED_TARGET_INFO_V1; /* size: 0x0080 */

typedef struct _NV_RESOLUTION
{
  /* 0x0000 */ unsigned long width;
  /* 0x0004 */ unsigned long height;
  /* 0x0008 */ unsigned long colorDepth;
} NV_RESOLUTION, *PNV_RESOLUTION; /* size: 0x000c */

typedef struct _NV_DISPLAYCONFIG_SOURCE_MODE_INFO_V1
{
  /* 0x0000 */ struct _NV_RESOLUTION resolution;
  /* 0x000c */ enum _NV_FORMAT colorFormat;
  /* 0x0010 */ struct _NV_POSITION position;
  /* 0x0018 */ enum _NV_DISPLAYCONFIG_SPANNING_ORIENTATION spanningOrientation;
  struct /* bitfield */
  {
    /* 0x001c */ unsigned long bGDIPrimary : 1; /* bit position: 0 */
    /* 0x001c */ unsigned long bSLIFocus : 1; /* bit position: 1 */
    /* 0x001c */ unsigned long reserved : 30; /* bit position: 2 */
  }; /* bitfield */
} NV_DISPLAYCONFIG_SOURCE_MODE_INFO_V1, *PNV_DISPLAYCONFIG_SOURCE_MODE_INFO_V1; /* size: 0x0020 */

class bdRichPresenceInfo
{
  /* 0x0000 */ long Padding_1307;
  /* 0x0004 */ BOOL m_online;
  /* 0x0005 */ unsigned char m_richPresence[32];
  /* 0x0025 */ char Padding_1308[3];
  /* 0x0028 */ unsigned int m_count;
}; /* size: 0x002c */

class bdMessagingGroupInfo
{
  /* 0x0000 */ long Padding_1309;
  /* 0x0004 */ unsigned char m_category;
  /* 0x0005 */ char Padding_1310[3];
  /* 0x0008 */ unsigned __int64 m_groupID;
  /* 0x0010 */ unsigned int m_estimatedSubscriberCount;
}; /* size: 0x0018 */

class bdTeamMemberProfile
{
}; /* size: 0x0010 */

struct TranslatorGuardRN
{
  /* 0x0000 */ struct EHRegistrationNode* pNext;
  /* 0x0004 */ void* pFrameHandler;
  /* 0x0008 */ unsigned int RandomCookie;
  /* 0x000c */ const struct _s_FuncInfo* pFuncInfo;
  /* 0x0010 */ struct EHRegistrationNode* pRN;
  /* 0x0014 */ int CatchDepth;
  /* 0x0018 */ struct EHRegistrationNode* pMarkerRN;
  /* 0x001c */ void* ESP;
  /* 0x0020 */ void* EBP;
  /* 0x0024 */ int DidUnwind;
}; /* size: 0x0028 */

class bdAuthMigrateAccountCypherText
{
  /* 0x0000 */ unsigned int m_magicNumber;
  /* 0x0004 */ unsigned int m_oldTitleID;
  /* 0x0008 */ unsigned __int64 m_oldLicenseID;
}; /* size: 0x0010 */

typedef struct _NVAPI_STEREO_CAPS
{
  /* 0x0000 */ unsigned long version;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long supportsWindowedModeOff : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long supportsWindowedModeAutomatic : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned long supportsWindowedModePersistent : 1; /* bit position: 2 */
    /* 0x0004 */ unsigned long reserved : 29; /* bit position: 3 */
  }; /* bitfield */
  /* 0x0008 */ unsigned long reserved2[3];
} NVAPI_STEREO_CAPS, *PNVAPI_STEREO_CAPS; /* size: 0x0014 */

class bdAuthDeleteAccountPlainText
{
  /* 0x0000 */ unsigned __int64 m_userID;
}; /* size: 0x0008 */

typedef struct _D3DXFONT_DESCA
{
  /* 0x0000 */ int Height;
  /* 0x0004 */ unsigned int Width;
  /* 0x0008 */ unsigned int Weight;
  /* 0x000c */ unsigned int MipLevels;
  /* 0x0010 */ int Italic;
  /* 0x0014 */ unsigned char CharSet;
  /* 0x0015 */ unsigned char OutputPrecision;
  /* 0x0016 */ unsigned char Quality;
  /* 0x0017 */ unsigned char PitchAndFamily;
  /* 0x0018 */ char FaceName[32];
} D3DXFONT_DESCA, *PD3DXFONT_DESCA; /* size: 0x0038 */

typedef struct _NVAPI_CSC_MATRIX
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long useCustomMatrix : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long reserved : 31; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0004 */ float aCSCCoeff[4][3];
} NVAPI_CSC_MATRIX, *PNVAPI_CSC_MATRIX; /* size: 0x0034 */

typedef struct _NV_GPU_COLORSPACE_CONVERSION_V1
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum _NV_STANDARD_COLORSPACE sourceColorSpace;
  /* 0x0008 */ enum _NV_STANDARD_COLORSPACE outputColorSpace;
  /* 0x000c */ unsigned long flags;
  /* 0x0010 */ unsigned long clientID;
  /* 0x0014 */ struct _NVAPI_CSC_MATRIX MatrixPre;
  /* 0x0048 */ struct _NVAPI_CSC_MATRIX MatrixPost;
} NV_GPU_COLORSPACE_CONVERSION_V1, *PNV_GPU_COLORSPACE_CONVERSION_V1; /* size: 0x007c */

class bdDTLSCookieAck
{
  /* 0x0000 */ long Padding_1311[3];
  /* 0x000c */ unsigned char m_ECCKey[100];
  /* 0x0070 */ class bdSecurityID m_secID;
}; /* size: 0x0078 */

class DNameNode
{
}; /* size: 0x0004 */

struct GfxDrawMethod
{
  /* 0x0000 */ enum GfxDrawSceneMethod drawScene;
  /* 0x0004 */ unsigned char baseTechType;
  /* 0x0005 */ unsigned char emissiveTechType;
  /* 0x0006 */ unsigned char litTechType[11][16];
  /* 0x00b6 */ char __PADDING__[2];
}; /* size: 0x00b8 */

struct BspSurfRegions
{
  /* 0x0000 */ struct BspSurfRegion region[2];
}; /* size: 0x0260 */

class phys_free_list<rigid_body_constraint_custom_path>::iterator
{
  /* 0x0000 */ class phys_free_list<rigid_body_constraint_custom_path>::T_internal_base* m_ptr;
}; /* size: 0x0004 */

struct DWRITE_OVERHANG_METRICS
{
  /* 0x0000 */ float left;
  /* 0x0004 */ float top;
  /* 0x0008 */ float right;
  /* 0x000c */ float bottom;
}; /* size: 0x0010 */

class bdFacebookAttachmentProperty
{
  /* 0x0000 */ long Padding_1312;
  /* 0x0004 */ char m_name[50];
  /* 0x0036 */ char m_value[70];
  /* 0x007c */ char m_href[1024];
}; /* size: 0x047c */

typedef struct _NVAPI_QUERY_STEREO_INFO
{
  /* 0x0000 */ unsigned long dwFormats;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long bIsSupported : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long bIsEnabled : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned long dwReserved1 : 30; /* bit position: 2 */
  }; /* bitfield */
  /* 0x0008 */ unsigned long dwReserved2[4];
} NVAPI_QUERY_STEREO_INFO, *PNVAPI_QUERY_STEREO_INFO; /* size: 0x0018 */

typedef struct _NVAPI_DX_QUERY_VIDEO_INFO
{
  /* 0x0000 */ unsigned long dwVersion;
  /* 0x0004 */ enum _NVAPI_D3D9_QUERY_COMMAND eQueryCommand;
  union
  {
    /* 0x0008 */ struct _NVAPI_QUERY_STEREO_INFO stStereoInfo;
    struct
    {
      /* 0x0008 */ struct _NVAPI_QUERY_COLOR_INFO stColorInfo;
      /* 0x001c */ long __PADDING__[1];
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
} NVAPI_DX_QUERY_VIDEO_INFO, *PNVAPI_DX_QUERY_VIDEO_INFO; /* size: 0x0020 */

class bdMessageSigning
{
  /* 0x0000 */ long Padding_1313;
  /* 0x0004 */ unsigned int m_timeStamp;
  /* 0x0008 */ unsigned char m_messageAuthenticationCode[44];
  /* 0x0034 */ unsigned char m_macPiggyback[512];
}; /* size: 0x0234 */

struct NV_MOSAIC_TOPO_DETAILS
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ struct NvLogicalGpuHandle__* hLogicalGPU;
  /* 0x0008 */ unsigned long validityMask;
  /* 0x000c */ unsigned long rowCount;
  /* 0x0010 */ unsigned long colCount;
  /* 0x0014 */ struct
  {
    /* 0x0014 */ struct NvPhysicalGpuHandle__* hPhysicalGPU;
    /* 0x0018 */ unsigned long displayOutputId;
    /* 0x001c */ int overlapX;
    /* 0x0020 */ int overlapY;
  } /* size: 0x0010 */ gpuLayout[8][8];
}; /* size: 0x0414 */

struct NV_MOSAIC_TOPO_GROUP
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ struct NV_MOSAIC_TOPO_BRIEF brief;
  /* 0x0014 */ unsigned long count;
  /* 0x0018 */ struct NV_MOSAIC_TOPO_DETAILS topos[2];
}; /* size: 0x0840 */

struct jqAtomicQueuePtr<jqAtomicQueue<jqConditionalQueue *,32>::NodeType>
{
  union
  {
    struct
    {
      /* 0x0000 */ struct jqAtomicQueue<jqConditionalQueue *,32>::NodeType* Ptr;
      /* 0x0004 */ unsigned int Count;
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned __int64 Val64;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

class bdUserGroupInfo
{
  /* 0x0000 */ long Padding_1314[2];
  /* 0x0008 */ unsigned __int64 m_userGroupID;
  /* 0x0010 */ char m_userGroupName[64];
}; /* size: 0x0050 */

struct NvLogicalGpuHandle__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct NV_UID
{
  union
  {
    /* 0x0000 */ unsigned long data1;
    struct
    {
      /* 0x0000 */ unsigned char revMin;
      /* 0x0001 */ unsigned char revMaj;
      /* 0x0002 */ unsigned char verMin;
      /* 0x0003 */ unsigned char verMaj;
    } /* size: 0x0004 */ ver;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned short data2;
  /* 0x0006 */ unsigned short data3;
  /* 0x0008 */ unsigned char data4[8];
}; /* size: 0x0010 */

struct NV_DISPLAY_HUE_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long currentHueAngle;
  /* 0x0008 */ unsigned long defaultHueAngle;
}; /* size: 0x000c */

typedef struct _NVDRS_SETTING
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned short settingName[2048];
  /* 0x1004 */ unsigned long settingId;
  /* 0x1008 */ enum _NVDRS_SETTING_TYPE settingType;
  /* 0x100c */ enum _NVDRS_SETTING_LOCATION settingLocation;
  /* 0x1010 */ unsigned long isCurrentPredefined;
  /* 0x1014 */ unsigned long isPredefinedValid;
  union
  {
    /* 0x1018 */ unsigned long u32PredefinedValue;
    /* 0x1018 */ struct _NVDRS_BINARY_SETTING binaryPredefinedValue;
    /* 0x1018 */ unsigned short wszPredefinedValue[2048];
  }; /* size: 0x1004 */
  union
  {
    /* 0x201c */ unsigned long u32CurrentValue;
    /* 0x201c */ struct _NVDRS_BINARY_SETTING binaryCurrentValue;
    struct
    {
      /* 0x201c */ unsigned short wszCurrentValue[2048];
      /* 0x301c */ long __PADDING__[1];
    }; /* size: 0x1004 */
  }; /* size: 0x1004 */
} NVDRS_SETTING, *PNVDRS_SETTING; /* size: 0x3020 */

struct D2D1_HWND_RENDER_TARGET_PROPERTIES
{
  /* 0x0000 */ struct HWND__* hwnd;
  /* 0x0004 */ struct D2D_SIZE_U pixelSize;
  /* 0x000c */ enum D2D1_PRESENT_OPTIONS presentOptions;
}; /* size: 0x0010 */

struct SCOPE_ID
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Zone : 28; /* bit position: 0 */
      /* 0x0000 */ unsigned long Level : 4; /* bit position: 28 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct sockaddr_in6
{
  /* 0x0000 */ unsigned short sin6_family;
  /* 0x0002 */ unsigned short sin6_port;
  /* 0x0004 */ unsigned long sin6_flowinfo;
  /* 0x0008 */ struct in6_addr sin6_addr;
  union
  {
    /* 0x0018 */ unsigned long sin6_scope_id;
    /* 0x0018 */ struct SCOPE_ID sin6_scope_struct;
  }; /* size: 0x0004 */
}; /* size: 0x001c */

class bdNumContentUpdated
{
  /* 0x0000 */ long Padding_1315;
  /* 0x0004 */ unsigned int m_numUpdated;
}; /* size: 0x0008 */

typedef struct _NV_DPCD_PARAMS_V2
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long displayId;
  /* 0x0008 */ enum _NV_DPCD_CMD cmd;
  /* 0x000c */ unsigned long addr;
  /* 0x0010 */ unsigned char data[16];
  /* 0x0020 */ unsigned long size;
  /* 0x0024 */ enum _NV_DPCD_REPLY_TYPE replyType;
} NV_DPCD_PARAMS_V2, *PNV_DPCD_PARAMS_V2; /* size: 0x0028 */

struct NV_DISPLAY_DRIVER_MEMORY_INFO_V2
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long dedicatedVideoMemory;
  /* 0x0008 */ unsigned long availableDedicatedVideoMemory;
  /* 0x000c */ unsigned long systemVideoMemory;
  /* 0x0010 */ unsigned long sharedSystemMemory;
  /* 0x0014 */ unsigned long curAvailableDedicatedVideoMemory;
}; /* size: 0x0018 */

typedef struct _KEY_EVENT_RECORD
{
  /* 0x0000 */ int bKeyDown;
  /* 0x0004 */ unsigned short wRepeatCount;
  /* 0x0006 */ unsigned short wVirtualKeyCode;
  /* 0x0008 */ unsigned short wVirtualScanCode;
  union
  {
    union
    {
      /* 0x000a */ wchar_t UnicodeChar;
      /* 0x000a */ char AsciiChar;
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ uChar;
  /* 0x000c */ unsigned long dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD; /* size: 0x0010 */

class bdMarketplaceSku
{
  /* 0x0000 */ long Padding_1316;
  /* 0x0004 */ unsigned int m_skuId;
  /* 0x0008 */ unsigned int m_productId;
  /* 0x000c */ unsigned char m_isEnabled;
  /* 0x000d */ unsigned char m_skuData[64];
  /* 0x004d */ unsigned char m_skuDataSize;
  /* 0x004e */ unsigned char m_ignoreEntitlements;
  /* 0x004f */ char Padding_1317;
  /* 0x0050 */ unsigned int m_saleStartDateTime;
  /* 0x0054 */ unsigned int m_saleEndDateTime;
  /* 0x0058 */ unsigned int m_rentalDuration;
  /* 0x005c */ unsigned char m_promotionalText[135];
  /* 0x00e3 */ unsigned char m_promotionalTextSize;
  /* 0x00e4 */ unsigned int m_origSkuId;
  /* 0x00e8 */ unsigned short m_collisionField;
  /* 0x00ea */ char Padding_1318[2];
  /* 0x00ec */ unsigned int m_modDateTime;
  /* 0x00f0 */ unsigned char m_numPrices;
  /* 0x00f1 */ char Padding_1319[3];
  /* 0x00f4 */ class bdMarketplaceCurrency m_skuPrices[10];
}; /* size: 0x016c */

struct NV_GPU_SETCOOLER_LEVEL_V2
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ struct
  {
    /* 0x0004 */ unsigned long currentLevel;
    /* 0x0008 */ enum NV_COOLER_POLICY currentPolicy;
  } /* size: 0x0008 */ cooler[20];
}; /* size: 0x00a4 */

struct IWICBitmapLock
{
}; /* size: 0x0004 */

typedef struct _NVVIOSTATUS
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum _NVVIOSTATUSTYPE nvvioStatusType;
  union
  {
    union
    {
      /* 0x0008 */ struct _NVVIOINPUTSTATUS inStatus;
      /* 0x0008 */ struct _NVVIOOUTPUTSTATUS outStatus;
    }; /* size: 0x00c4 */
  } /* size: 0x00c4 */ vioStatus;
} NVVIOSTATUS, *PNVVIOSTATUS; /* size: 0x00cc */

struct NV_HCLONE_NODE_V1
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long numPaths;
  /* 0x0008 */ struct NV_HCLONE_PATH_V1* pHClonePathArray;
  /* 0x000c */ unsigned long reserved1;
}; /* size: 0x0010 */

class phys_simple_allocator<axis_aligned_sweep_and_prune::active_pair>
{
  /* 0x0000 */ int m_count;
}; /* size: 0x0004 */

typedef struct _LDOUBLE
{
  /* 0x0000 */ unsigned char ld[10];
} LDOUBLE, *PLDOUBLE; /* size: 0x000a */

struct curl_certinfo
{
  /* 0x0000 */ int num_of_certs;
  /* 0x0004 */ struct curl_slist** certinfo;
}; /* size: 0x0008 */

struct NV_GPU_PERF_VOLTAGES
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long flags;
  /* 0x0008 */ unsigned long numDomains;
  /* 0x000c */ struct
  {
    /* 0x000c */ enum _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID domainId;
    /* 0x0010 */ unsigned long flags;
    /* 0x0014 */ unsigned long numVoltages;
    /* 0x0018 */ struct
    {
      /* 0x0018 */ unsigned long flags;
      /* 0x001c */ unsigned long mvolt;
    } /* size: 0x0008 */ voltages[128];
  } /* size: 0x040c */ domains[16];
}; /* size: 0x40cc */

class bdCommerceItemQuantity
{
  /* 0x0000 */ long Padding_1320[2];
  /* 0x0008 */ unsigned __int64 m_inventoryItemId;
  /* 0x0010 */ unsigned int m_itemQuantity;
}; /* size: 0x0018 */

struct NV_GPU_GETCOOLER_SETTINGS_V3
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long count;
  /* 0x0008 */ struct
  {
    /* 0x0008 */ enum NV_COOLER_TYPE type;
    /* 0x000c */ enum NV_COOLER_CONTROLLER controller;
    /* 0x0010 */ unsigned long defaultMinLevel;
    /* 0x0014 */ unsigned long defaultMaxLevel;
    /* 0x0018 */ unsigned long currentMinLevel;
    /* 0x001c */ unsigned long currentMaxLevel;
    /* 0x0020 */ unsigned long currentLevel;
    /* 0x0024 */ enum NV_COOLER_POLICY defaultPolicy;
    /* 0x0028 */ enum NV_COOLER_POLICY currentPolicy;
    /* 0x002c */ enum NV_COOLER_TARGET target;
    /* 0x0030 */ enum NV_COOLER_CONTROL controlType;
    /* 0x0034 */ enum NV_COOLER_ACTIVITY_LEVEL active;
    /* 0x0038 */ struct NV_COOLER_TACHOMETER tachometer;
  } /* size: 0x0040 */ cooler[20];
}; /* size: 0x0508 */

class bdCommerceReceiptStatus
{
  /* 0x0000 */ long Padding_1321;
  /* 0x0004 */ BOOL m_isValid;
}; /* size: 0x0008 */

struct DWRITE_STRIKETHROUGH
{
  /* 0x0000 */ float width;
  /* 0x0004 */ float thickness;
  /* 0x0008 */ float offset;
  /* 0x000c */ enum DWRITE_READING_DIRECTION readingDirection;
  /* 0x0010 */ enum DWRITE_FLOW_DIRECTION flowDirection;
  /* 0x0014 */ const wchar_t* localeName;
  /* 0x0018 */ enum DWRITE_MEASURING_MODE measuringMode;
}; /* size: 0x001c */

struct IDirectDrawSurface
{
}; /* size: 0x0004 */

class bdAuthCreateAccountCypherText
{
  /* 0x0000 */ unsigned int m_magicNumber;
  /* 0x0004 */ char m_username[64];
  /* 0x0044 */ char m_userKey[24];
}; /* size: 0x005c */

typedef struct _NV_GPS_SET_THERMAL_LIMIT_PARM
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum NV_GPS_SENSOR_INDEX sensorIndex;
  /* 0x0008 */ unsigned long newLimit;
} NV_GPS_SET_THERMAL_LIMIT_PARM, *PNV_GPS_SET_THERMAL_LIMIT_PARM; /* size: 0x000c */

typedef struct _exception
{
  /* 0x0000 */ int type;
  /* 0x0004 */ char* name;
  /* 0x0008 */ double arg1;
  /* 0x0010 */ double arg2;
  /* 0x0018 */ double retval;
} exception, *Pexception; /* size: 0x0020 */

struct NV_I2C_INFO_V3
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long displayMask;
  /* 0x0008 */ unsigned char bIsDDCPort;
  /* 0x0009 */ unsigned char i2cDevAddress;
  /* 0x000a */ char Padding_1322[2];
  /* 0x000c */ unsigned char* pbI2cRegAddress;
  /* 0x0010 */ unsigned long regAddrSize;
  /* 0x0014 */ unsigned char* pbData;
  /* 0x0018 */ unsigned long cbSize;
  /* 0x001c */ unsigned long i2cSpeed;
  /* 0x0020 */ enum NV_I2C_SPEED i2cSpeedKhz;
  /* 0x0024 */ unsigned char portId;
  /* 0x0025 */ char Padding_1323[3];
  /* 0x0028 */ unsigned long bIsPortIdSet;
}; /* size: 0x002c */

struct NV_COLOR_DATA
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned short size;
  /* 0x0006 */ unsigned char cmd;
  struct
  {
    /* 0x0007 */ unsigned char colorFormat;
    /* 0x0008 */ unsigned char colorimetry;
  } /* size: 0x0002 */ data;
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

class stdext::exception
{
  /* 0x0000 */ long Padding_1324;
  /* 0x0004 */ const char* _Ptr;
}; /* size: 0x0008 */

struct NV_GPU_ECC_ERROR_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ long Padding_1325;
  struct
  {
    /* 0x0008 */ unsigned __int64 singleBitErrors;
    /* 0x0010 */ unsigned __int64 doubleBitErrors;
  } /* size: 0x0010 */ current;
  struct
  {
    /* 0x0018 */ unsigned __int64 singleBitErrors;
    /* 0x0020 */ unsigned __int64 doubleBitErrors;
  } /* size: 0x0010 */ aggregate;
}; /* size: 0x0028 */

class bdDummySocket
{
}; /* size: 0x0020 */

struct NVAPI_VIDSURF_ENCRYPT_CTRL_SET_KEY
{
  /* 0x0000 */ unsigned long dwEncryptKeyProtectionMode;
  /* 0x0004 */ unsigned long dwEncryptKeyProtectionIdentifier;
  /* 0x0008 */ unsigned long dwKey[4];
}; /* size: 0x0018 */

struct DiskGfxDummyReflectionProbe
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ unsigned char pixels[288];
}; /* size: 0x012c */

class bdPlatformTrulyRandomInit
{
}; /* size: 0x0001 */

struct D2D1_FACTORY_OPTIONS
{
  /* 0x0000 */ enum D2D1_DEBUG_LEVEL debugLevel;
}; /* size: 0x0004 */

struct NV_DISPLAY_DVC_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long currentLevel;
  /* 0x0008 */ unsigned long minLevel;
  /* 0x000c */ unsigned long maxLevel;
}; /* size: 0x0010 */

class bdMailInboxInfo
{
  /* 0x0000 */ long Padding_1326;
  /* 0x0004 */ unsigned int m_priority;
  /* 0x0008 */ unsigned int m_count;
}; /* size: 0x000c */

typedef struct _s_ESTypeList
{
  /* 0x0000 */ int nCount;
  /* 0x0004 */ const struct _s_HandlerType* pTypeArray;
} s_ESTypeList, *Ps_ESTypeList; /* size: 0x0008 */

class bdMailHeaderPriority
{
  /* 0x0000 */ long Padding_1327[2];
  /* 0x0008 */ unsigned __int64 m_senderID;
  /* 0x0010 */ char m_senderName[64];
  /* 0x0050 */ unsigned __int64 m_mailID;
  /* 0x0058 */ unsigned int m_timeStamp;
  /* 0x005c */ unsigned int m_mailPriority;
  /* 0x0060 */ unsigned int m_size;
}; /* size: 0x0068 */

typedef struct _NVAPI_SURFACE_LAYOUT_STRUCT
{
  /* 0x0000 */ int bEnableLayoutOverride;
  /* 0x0004 */ enum _NVAPI_SURFACE_LAYOUT slLayout;
  /* 0x0008 */ unsigned long reserved[4];
} NVAPI_SURFACE_LAYOUT_STRUCT, *PNVAPI_SURFACE_LAYOUT_STRUCT; /* size: 0x0018 */

typedef struct _NV_VIDEO_STEREO_INFO
{
  /* 0x0000 */ unsigned long dwVersion;
  /* 0x0004 */ enum _NV_STEREO_VIDEO_FORMAT eFormat;
  /* 0x0008 */ int sViewOffset;
  /* 0x000c */ unsigned long bStereoEnable : 1; /* bit position: 0 */
} NV_VIDEO_STEREO_INFO, *PNV_VIDEO_STEREO_INFO; /* size: 0x0010 */

struct $_TypeDescriptor$_extraBytes_39
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[39];
}; /* size: 0x002f */

typedef struct _NV_GPU_GET_ILLUMINATION_PARM_V1
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ struct NvPhysicalGpuHandle__* hPhysicalGpu;
  /* 0x0008 */ enum _NV_GPU_ILLUMINATION_ATTRIB Attribute;
  /* 0x000c */ unsigned long Value;
} NV_GPU_GET_ILLUMINATION_PARM_V1, *PNV_GPU_GET_ILLUMINATION_PARM_V1; /* size: 0x0010 */

class bdAuthChangeUserKeyPlainText
{
  /* 0x0000 */ unsigned __int64 m_userID;
}; /* size: 0x0008 */

typedef struct _D3DDISPLAYMODE
{
  /* 0x0000 */ unsigned int Width;
  /* 0x0004 */ unsigned int Height;
  /* 0x0008 */ unsigned int RefreshRate;
  /* 0x000c */ enum _D3DFORMAT Format;
} D3DDISPLAYMODE, *PD3DDISPLAYMODE; /* size: 0x0010 */

struct NV_GPU_CLIENT_POWER_TOPOLOGY_STATUS_V1
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned char numChannels;
  /* 0x0005 */ char Padding_1328[3];
  /* 0x0008 */ struct NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_STATUS_V1 channels[4];
}; /* size: 0x0048 */

class bdReliableSendWindow
{
  /* 0x0000 */ class bdSequenceNumber m_lastAcked;
  /* 0x0004 */ class bdSequenceNumber m_nextFree;
  /* 0x0008 */ float m_timeoutPeriod;
  /* 0x000c */ unsigned char m_retransmitCountThreshold;
  /* 0x000d */ char Padding_1329[3];
  /* 0x0010 */ class bdReliableSendWindow::bdMessageFrame m_frame[128];
  /* 0x0c10 */ int m_remoteReceiveWindowCredit;
  /* 0x0c14 */ int m_flightSize;
  /* 0x0c18 */ int m_partialBytesAcked;
  /* 0x0c1c */ int m_slowStartThresh;
  /* 0x0c20 */ int m_congestionWindow;
  /* 0x0c24 */ long Padding_1330;
  /* 0x0c28 */ class bdStopwatch m_lastSent;
}; /* size: 0x0c30 */

typedef struct _NV_RECT
{
  /* 0x0000 */ unsigned long left;
  /* 0x0004 */ unsigned long top;
  /* 0x0008 */ unsigned long right;
  /* 0x000c */ unsigned long bottom;
} NV_RECT, *PNV_RECT; /* size: 0x0010 */

struct NV_SLI_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum _NV_SLI_MODE mode;
  /* 0x0008 */ unsigned long gpus;
}; /* size: 0x000c */

struct NV_INFOFRAME
{
  /* 0x0000 */ struct NV_INFOFRAME_HEADER header;
  union
  {
    union
    {
      /* 0x0003 */ struct NV_AUDIO_INFOFRAME audio;
      /* 0x0003 */ struct NV_VIDEO_INFOFRAME video;
    }; /* size: 0x000d */
  } /* size: 0x000d */ u;
}; /* size: 0x0010 */

typedef struct _NVVIODATAFORMATDETAIL
{
  /* 0x0000 */ enum _NVVIODATAFORMAT dataFormat;
  /* 0x0004 */ unsigned long vioCaps;
} NVVIODATAFORMATDETAIL, *PNVVIODATAFORMATDETAIL; /* size: 0x0008 */

class bdInitAckChunk
{
  /* 0x0000 */ long Padding_1331[4];
  /* 0x0010 */ unsigned int m_initTag;
  /* 0x0014 */ enum bdInitAckChunk::bdInitAckChunkFlags m_flags;
  /* 0x0018 */ class bdReference<bdByteBuffer> m_cookieBuffer;
  /* 0x001c */ class bdReference<bdCookie> m_cookie;
  /* 0x0020 */ int m_windowCredit;
  /* 0x0024 */ unsigned int m_peerTag;
}; /* size: 0x0028 */

class bdHeartbeatAckChunk
{
  /* 0x0000 */ long Padding_1332[4];
  /* 0x0010 */ enum bdHeartbeatAckChunk::bdHeartbeatAckFlags m_flags;
}; /* size: 0x0014 */

struct NVDX_SwapChainHandle__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct jpeg_marker_reader
{
  /* 0x0000 */ void* reset_marker_reader /* function */;
  /* 0x0004 */ void* read_markers /* function */;
  /* 0x0008 */ void* read_restart_marker /* function */;
  /* 0x000c */ unsigned char saw_SOI;
  /* 0x000d */ unsigned char saw_SOF;
  /* 0x000e */ char Padding_1333[2];
  /* 0x0010 */ int next_restart_num;
  /* 0x0014 */ unsigned int discarded_bytes;
}; /* size: 0x0018 */

struct my_marker_reader
{
  /* 0x0000 */ struct jpeg_marker_reader pub;
  /* 0x0018 */ void* process_COM /* function */;
  /* 0x001c */ void* process_APPn[16] /* function */;
  /* 0x005c */ unsigned int length_limit_COM;
  /* 0x0060 */ unsigned int length_limit_APPn[16];
  /* 0x00a0 */ struct jpeg_marker_struct* cur_marker;
  /* 0x00a4 */ unsigned int bytes_read;
}; /* size: 0x00a8 */

struct NV_GPU_CLOCK_FREQUENCIES_V2
{
  /* 0x0000 */ unsigned long version;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long ClockType : 2; /* bit position: 0 */
    /* 0x0004 */ unsigned long reserved : 22; /* bit position: 2 */
    /* 0x0004 */ unsigned long reserved1 : 8; /* bit position: 24 */
  }; /* bitfield */
  /* 0x0008 */ struct
  {
    struct /* bitfield */
    {
      /* 0x0008 */ unsigned long bIsPresent : 1; /* bit position: 0 */
      /* 0x0008 */ unsigned long reserved : 31; /* bit position: 1 */
    }; /* bitfield */
    /* 0x000c */ unsigned long frequency;
  } /* size: 0x0008 */ domain[32];
}; /* size: 0x0108 */

class phys_free_list<rigid_body_constraint_custom_orientation>::T_internal
{
  /* 0x0000 */ long Padding_1334[2];
  /* 0x0008 */ class rigid_body_constraint_custom_orientation m_data;
  /* 0x003c */ int m_ptr_list_index;
}; /* size: 0x0040 */

struct NV_SCANOUT_WARPING_DATA
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ float* vertices;
  /* 0x0008 */ enum NV_GPU_WARPING_VERTICE_FORMAT vertexFormat;
  /* 0x000c */ int numVertices;
  /* 0x0010 */ struct NvSBox* textureRect;
}; /* size: 0x0014 */

struct jpeg_alloc
{
  /* 0x0000 */ void* malloc /* function */;
  /* 0x0004 */ void* free /* function */;
}; /* size: 0x0008 */

typedef struct _NV_GPS_GET_THERMAL_LIMIT_PARM
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum NV_GPS_SENSOR_INDEX sensorIndex;
  /* 0x0008 */ unsigned long limit;
  /* 0x000c */ unsigned long lowerBound;
  /* 0x0010 */ unsigned long upperBound;
  /* 0x0014 */ enum NV_GPS_THERM_LIMIT_SRC limitSource;
} NV_GPS_GET_THERMAL_LIMIT_PARM, *PNV_GPS_GET_THERMAL_LIMIT_PARM; /* size: 0x0018 */

struct NV_SCANOUT_INTENSITY_DATA_V2
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long width;
  /* 0x0008 */ unsigned long height;
  /* 0x000c */ float* blendingTexture;
  /* 0x0010 */ float* offsetTexture;
  /* 0x0014 */ unsigned long offsetTexChannels;
}; /* size: 0x0018 */

typedef struct _NV_DX_VIDEO_CAPS
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ long Padding_1335;
  /* 0x0008 */ struct _NVAPI_VIDEO_CAPS_PACKET videoCapsPacket;
} NV_DX_VIDEO_CAPS, *PNV_DX_VIDEO_CAPS; /* size: 0x05a8 */

class bdPacket
{
  /* 0x0000 */ long Padding_1336;
  /* 0x0004 */ class bdLinkedList<bdReference<bdChunk> > m_chunks;
  /* 0x0010 */ class bdReference<bdCommonAddr> m_me;
  /* 0x0014 */ unsigned int m_tag;
  /* 0x0018 */ unsigned int m_bufferSize;
  /* 0x001c */ unsigned int m_currentSize;
}; /* size: 0x0020 */

class axis_aligned_sweep_and_prune::sap_node
{
  /* 0x0000 */ class broad_phase_base* m_bpb;
  /* 0x0004 */ class axis_aligned_sweep_and_prune::axis_element m_ae1[2][3];
  /* 0x007c */ int m_updated;
}; /* size: 0x0080 */

struct jpeg_progress_mgr
{
  /* 0x0000 */ void* progress_monitor /* function */;
  /* 0x0004 */ long pass_counter;
  /* 0x0008 */ long pass_limit;
  /* 0x000c */ int completed_passes;
  /* 0x0010 */ int total_passes;
}; /* size: 0x0014 */

struct NVAPI_VIDSURF_ENCRYPT_CTRL_SET_GUID
{
  /* 0x0000 */ struct _GUID guid;
}; /* size: 0x0010 */

struct NVAPI_VIDSURF_ENCRYPT_CTRL_ENABLE
{
  /* 0x0000 */ unsigned long* pSurface;
  /* 0x0004 */ unsigned long bEnable;
}; /* size: 0x0008 */

struct NVAPI_VIDSURF_ENCRYPT_CTRL_PARAMS
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long dwCommand;
  union
  {
    /* 0x0008 */ struct NVAPI_VIDSURF_ENCRYPT_CTRL_GET_GUID_COUNT GetGuidCount;
    /* 0x0008 */ struct NVAPI_VIDSURF_ENCRYPT_CTRL_GET_GUIDS GetGuids;
    /* 0x0008 */ struct NVAPI_VIDSURF_ENCRYPT_CTRL_SET_GUID SetGuid;
    /* 0x0008 */ struct NVAPI_VIDSURF_ENCRYPT_CTRL_ENABLE Enable;
    /* 0x0008 */ struct NVAPI_VIDSURF_ENCRYPT_CTRL_SET_KEY SetKey;
    struct
    {
      /* 0x0008 */ struct NVAPI_VIDSURF_ENCRYPT_CTRL_SET_IV SetIV;
      /* 0x0020 */ long __PADDING__[10];
    }; /* size: 0x0040 */
  }; /* size: 0x0040 */
}; /* size: 0x0048 */

class bdHashTiger192
{
}; /* size: 0x0004 */

struct DWRITE_CLUSTER_METRICS
{
  /* 0x0000 */ float width;
  /* 0x0004 */ unsigned short length;
  struct /* bitfield */
  {
    /* 0x0006 */ unsigned short canWrapLineAfter : 1; /* bit position: 0 */
    /* 0x0006 */ unsigned short isWhitespace : 1; /* bit position: 1 */
    /* 0x0006 */ unsigned short isNewline : 1; /* bit position: 2 */
    /* 0x0006 */ unsigned short isSoftHyphen : 1; /* bit position: 3 */
    /* 0x0006 */ unsigned short isRightToLeft : 1; /* bit position: 4 */
    /* 0x0006 */ unsigned short padding : 11; /* bit position: 5 */
  }; /* bitfield */
}; /* size: 0x0008 */

typedef struct _NV_GPU_DISPLAYIDS
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum NV_MONITOR_CONN_TYPE connectorType;
  /* 0x0008 */ unsigned long displayId;
  struct /* bitfield */
  {
    /* 0x000c */ unsigned long isDynamic : 1; /* bit position: 0 */
    /* 0x000c */ unsigned long isMultiStreamRootNode : 1; /* bit position: 1 */
    /* 0x000c */ unsigned long isActive : 1; /* bit position: 2 */
    /* 0x000c */ unsigned long isCluster : 1; /* bit position: 3 */
    /* 0x000c */ unsigned long isOSVisible : 1; /* bit position: 4 */
    /* 0x000c */ unsigned long reserved : 27; /* bit position: 5 */
  }; /* bitfield */
} NV_GPU_DISPLAYIDS, *PNV_GPU_DISPLAYIDS; /* size: 0x0010 */

class bdPlatformSemaphore
{
}; /* size: 0x0001 */

struct NV_HDMI_SUPPORT_INFO
{
  /* 0x0000 */ unsigned long version;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long isGpuHDMICapable : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long isMonUnderscanCapable : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned long isMonBasicAudioCapable : 1; /* bit position: 2 */
    /* 0x0004 */ unsigned long isMonYCbCr444Capable : 1; /* bit position: 3 */
    /* 0x0004 */ unsigned long isMonYCbCr422Capable : 1; /* bit position: 4 */
    /* 0x0004 */ unsigned long isMonxvYCC601Capable : 1; /* bit position: 5 */
    /* 0x0004 */ unsigned long isMonxvYCC709Capable : 1; /* bit position: 6 */
    /* 0x0004 */ unsigned long isMonHDMI : 1; /* bit position: 7 */
  }; /* bitfield */
  /* 0x0008 */ unsigned long EDID861ExtRev;
}; /* size: 0x000c */

struct $_TypeDescriptor$_extraBytes_13
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0004 */ void* spare;
  /* 0x0008 */ char name[13];
}; /* size: 0x0015 */

struct NvDisplayHandle__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _NV_DISPLAY_MODE_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long width;
  /* 0x0008 */ unsigned long height;
  /* 0x000c */ unsigned long depth;
  /* 0x0010 */ unsigned long refreshRate1K;
  struct /* bitfield */
  {
    /* 0x0014 */ unsigned long preferred : 1; /* bit position: 0 */
    /* 0x0014 */ unsigned long reserved : 31; /* bit position: 1 */
  }; /* bitfield */
} NV_DISPLAY_MODE_INFO, *PNV_DISPLAY_MODE_INFO; /* size: 0x0018 */

typedef struct _EH4_SCOPETABLE_RECORD
{
  /* 0x0000 */ unsigned long EnclosingLevel;
  /* 0x0004 */ void* FilterFunc /* function */;
  union
  {
    union
    {
      /* 0x0008 */ void* HandlerAddress /* function */;
      /* 0x0008 */ void* FinallyFunc /* function */;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
} EH4_SCOPETABLE_RECORD, *PEH4_SCOPETABLE_RECORD; /* size: 0x000c */

struct NV_GET_CURRENT_SLI_STATE
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long maxNumAFRGroups;
  /* 0x0008 */ unsigned long numAFRGroups;
  /* 0x000c */ unsigned long currentAFRIndex;
  /* 0x0010 */ unsigned long nextFrameAFRIndex;
  /* 0x0014 */ unsigned long previousFrameAFRIndex;
  /* 0x0018 */ unsigned long bIsCurAFRGroupNew;
}; /* size: 0x001c */

class bdShutdownAckChunk
{
  /* 0x0000 */ long Padding_1337[4];
  /* 0x0010 */ enum bdShutdownAckChunk::bdShutdownAckFlags m_flags;
}; /* size: 0x0014 */

typedef struct _D3DVSHADERCAPS2_0
{
  /* 0x0000 */ unsigned long Caps;
  /* 0x0004 */ int DynamicFlowControlDepth;
  /* 0x0008 */ int NumTemps;
  /* 0x000c */ int StaticFlowControlDepth;
} D3DVSHADERCAPS2_0, *PD3DVSHADERCAPS2_0; /* size: 0x0010 */

struct NV_MOSAIC_DISPLAY_TOPO_STATUS
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long errorFlags;
  /* 0x0008 */ unsigned long warningFlags;
  /* 0x000c */ unsigned long displayCount;
  /* 0x0010 */ struct
  {
    /* 0x0010 */ unsigned long displayId;
    /* 0x0014 */ unsigned long errorFlags;
    /* 0x0018 */ unsigned long warningFlags;
    struct /* bitfield */
    {
      /* 0x001c */ unsigned long supportsRotation : 1; /* bit position: 0 */
      /* 0x001c */ unsigned long reserved : 31; /* bit position: 1 */
    }; /* bitfield */
  } /* size: 0x0010 */ displays[128];
}; /* size: 0x0810 */

struct NV_HDCP_CS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 uAttachPoints : 16; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 bNonHDCP : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned __int64 uHeadIndex : 4; /* bit position: 17 */
    /* 0x0000 */ unsigned __int64 uRFUPlanes : 8; /* bit position: 21 */
    /* 0x0000 */ unsigned __int64 uNumberOfActiveHeads : 2; /* bit position: 29 */
    /* 0x0000 */ unsigned __int64 uReserved2 : 9; /* bit position: 31 */
    /* 0x0000 */ unsigned __int64 uAttachedPlanes : 8; /* bit position: 40 */
    /* 0x0000 */ unsigned __int64 bCloneMode : 1; /* bit position: 48 */
    /* 0x0000 */ unsigned __int64 bSpanMode : 1; /* bit position: 49 */
    /* 0x0000 */ unsigned __int64 reserved : 14; /* bit position: 50 */
  }; /* bitfield */
}; /* size: 0x0008 */

struct IDirect3D9
{
}; /* size: 0x0004 */

class bdReference<bdCookieAckChunk>
{
  /* 0x0000 */ class bdCookieAckChunk* m_ptr;
}; /* size: 0x0004 */

struct NV_GPU_PERF_PSTATES20_INFO_V1
{
  /* 0x0000 */ unsigned long version;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long bIsEditable : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long reserved : 31; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0008 */ unsigned long numPstates;
  /* 0x000c */ unsigned long numClocks;
  /* 0x0010 */ unsigned long numBaseVoltages;
  /* 0x0014 */ struct
  {
    /* 0x0014 */ enum _NV_GPU_PERF_PSTATE_ID pstateId;
    struct /* bitfield */
    {
      /* 0x0018 */ unsigned long bIsEditable : 1; /* bit position: 0 */
      /* 0x0018 */ unsigned long reserved : 31; /* bit position: 1 */
    }; /* bitfield */
    /* 0x001c */ struct NV_GPU_PSTATE20_CLOCK_ENTRY_V1 clocks[8];
    /* 0x017c */ struct NV_GPU_PSTATE20_BASE_VOLTAGE_ENTRY_V1 baseVoltages[4];
  } /* size: 0x01c8 */ pstates[16];
}; /* size: 0x1c94 */

typedef struct _D3DVOLUME_DESC
{
  /* 0x0000 */ enum _D3DFORMAT Format;
  /* 0x0004 */ enum _D3DRESOURCETYPE Type;
  /* 0x0008 */ unsigned long Usage;
  /* 0x000c */ enum _D3DPOOL Pool;
  /* 0x0010 */ unsigned int Width;
  /* 0x0014 */ unsigned int Height;
  /* 0x0018 */ unsigned int Depth;
} D3DVOLUME_DESC, *PD3DVOLUME_DESC; /* size: 0x001c */

struct NV_DISP_PATH_V2
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long device;
  /* 0x0008 */ enum _NV_GPU_CONNECTOR_TYPE connector;
  /* 0x000c */ unsigned long srcID;
  /* 0x0010 */ unsigned long srcImportance;
  /* 0x0014 */ unsigned long width;
  /* 0x0018 */ unsigned long height;
  /* 0x001c */ unsigned long depth;
  /* 0x0020 */ enum _NV_ROTATE rotation;
  /* 0x0024 */ enum _NV_FORMAT colorFormat;
  /* 0x0028 */ struct NV_VIEWPORTF srcPartition;
  /* 0x0038 */ struct NV_VIEWPORTF viewportIn;
  /* 0x0048 */ enum _NV_SCALING scaling;
  /* 0x004c */ struct NV_VIEWPORTF viewportOut;
  /* 0x005c */ enum _NV_TIMING_OVERRIDE timingOverride;
  /* 0x0060 */ unsigned long refreshRate;
  struct /* bitfield */
  {
    /* 0x0064 */ unsigned long interlaced : 1; /* bit position: 0 */
    /* 0x0064 */ unsigned long hwModeSetOnly : 1; /* bit position: 1 */
    /* 0x0064 */ unsigned long SelectCustomTiming : 1; /* bit position: 2 */
    /* 0x0064 */ unsigned long needNullModeset : 1; /* bit position: 3 */
    /* 0x0064 */ unsigned long need6x4Modeset : 1; /* bit position: 4 */
    /* 0x0064 */ unsigned long forceModeSet : 1; /* bit position: 5 */
    /* 0x0064 */ unsigned long gpuId : 24; /* bit position: 6 */
    /* 0x0064 */ unsigned long isSliFocusDisplay : 1; /* bit position: 30 */
    /* 0x0064 */ unsigned long forceModeEnum : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0068 */ enum _NV_DISPLAY_TV_FORMAT tvFormat;
  /* 0x006c */ struct tagNV_TIMING timing;
  /* 0x00cc */ unsigned long refreshRate1K;
}; /* size: 0x00d0 */

struct NV_HDCP_PACKET
{
  /* 0x0000 */ struct NV_UID uidHDCP;
  /* 0x0010 */ unsigned long packetSize;
  /* 0x0014 */ unsigned long hDisplayContext;
  /* 0x0018 */ enum NV_HDCP_COMMANDS cmdCommand;
  /* 0x001c */ enum NV_HDCP_FLAGS flFlags;
  /* 0x0020 */ enum NV_HDCP_RET_STATUS hdcpPacketStatus;
  /* 0x0024 */ unsigned long apIndex;
  /* 0x0028 */ struct NV_HDCP_CN cN;
  /* 0x0030 */ struct NV_U40 cKsv;
  /* 0x0038 */ struct NV_HDCP_BSTATUS bStatus[16];
  /* 0x0078 */ struct NV_HDCP_STATUS hdcpStatus[16];
  /* 0x0138 */ struct NV_HDCP_CS cS;
  /* 0x0140 */ struct NV_U56 kP[2];
  /* 0x0150 */ struct NV_U40 aN[2];
  /* 0x0160 */ struct NV_U40 aKsv[2];
  /* 0x0170 */ struct NV_U40 dKsv[2];
  /* 0x0180 */ unsigned char vP[20];
  /* 0x0194 */ unsigned __int64 mP;
  /* 0x019c */ unsigned long numBKSVs;
  /* 0x01a0 */ struct NV_U40 bKsvList[127];
}; /* size: 0x0598 */

struct NV_HDCP_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ struct NV_HDCP_PACKET nvHdcpPacket;
}; /* size: 0x059c */

struct NV_DISPLAY_DRIVER_VERSION
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long drvVersion;
  /* 0x0008 */ unsigned long bldChangeListNum;
  /* 0x000c */ char szBuildBranchString[64];
  /* 0x004c */ char szAdapterString[64];
}; /* size: 0x008c */

typedef struct _DDCOLORKEY
{
  /* 0x0000 */ unsigned long dwColorSpaceLowValue;
  /* 0x0004 */ unsigned long dwColorSpaceHighValue;
} DDCOLORKEY, *PDDCOLORKEY; /* size: 0x0008 */

typedef struct _DDBLTFX
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwDDFX;
  /* 0x0008 */ unsigned long dwROP;
  /* 0x000c */ unsigned long dwDDROP;
  /* 0x0010 */ unsigned long dwRotationAngle;
  /* 0x0014 */ unsigned long dwZBufferOpCode;
  /* 0x0018 */ unsigned long dwZBufferLow;
  /* 0x001c */ unsigned long dwZBufferHigh;
  /* 0x0020 */ unsigned long dwZBufferBaseDest;
  /* 0x0024 */ unsigned long dwZDestConstBitDepth;
  union
  {
    /* 0x0028 */ unsigned long dwZDestConst;
    /* 0x0028 */ struct IDirectDrawSurface* lpDDSZBufferDest;
  }; /* size: 0x0004 */
  /* 0x002c */ unsigned long dwZSrcConstBitDepth;
  union
  {
    /* 0x0030 */ unsigned long dwZSrcConst;
    /* 0x0030 */ struct IDirectDrawSurface* lpDDSZBufferSrc;
  }; /* size: 0x0004 */
  /* 0x0034 */ unsigned long dwAlphaEdgeBlendBitDepth;
  /* 0x0038 */ unsigned long dwAlphaEdgeBlend;
  /* 0x003c */ unsigned long dwReserved;
  /* 0x0040 */ unsigned long dwAlphaDestConstBitDepth;
  union
  {
    /* 0x0044 */ unsigned long dwAlphaDestConst;
    /* 0x0044 */ struct IDirectDrawSurface* lpDDSAlphaDest;
  }; /* size: 0x0004 */
  /* 0x0048 */ unsigned long dwAlphaSrcConstBitDepth;
  union
  {
    /* 0x004c */ unsigned long dwAlphaSrcConst;
    /* 0x004c */ struct IDirectDrawSurface* lpDDSAlphaSrc;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0050 */ unsigned long dwFillColor;
    /* 0x0050 */ unsigned long dwFillDepth;
    /* 0x0050 */ unsigned long dwFillPixel;
    /* 0x0050 */ struct IDirectDrawSurface* lpDDSPattern;
  }; /* size: 0x0004 */
  /* 0x0054 */ struct _DDCOLORKEY ddckDestColorkey;
  /* 0x005c */ struct _DDCOLORKEY ddckSrcColorkey;
} DDBLTFX, *PDDBLTFX; /* size: 0x0064 */

struct NV_GPU_PERF_CLOCK_TABLE
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long levelCount;
  /* 0x0008 */ unsigned long gpuPerflevel;
  /* 0x000c */ unsigned long domainCount;
  /* 0x0010 */ unsigned long gpuPerfFlags;
  /* 0x0014 */ struct
  {
    /* 0x0014 */ unsigned long level;
    /* 0x0018 */ unsigned long flags;
    /* 0x001c */ struct
    {
      /* 0x001c */ enum _NV_GPU_PUBLIC_CLOCK_ID domainId;
      /* 0x0020 */ unsigned long domainFlags;
      /* 0x0024 */ unsigned long currentFreq;
      /* 0x0028 */ unsigned long defaultFreq;
      /* 0x002c */ unsigned long minFreq;
      /* 0x0030 */ unsigned long maxFreq;
      /* 0x0034 */ unsigned long bSetClock : 1; /* bit position: 0 */
    } /* size: 0x001c */ domain[32];
  } /* size: 0x0388 */ perfLevel[12];
}; /* size: 0x2a74 */

struct SBEncState
{
  /* 0x0000 */ const struct SpeexMode* mode;
  /* 0x0004 */ void* st_low;
  /* 0x0008 */ int full_frame_size;
  /* 0x000c */ int frame_size;
  /* 0x0010 */ int subframeSize;
  /* 0x0014 */ int nbSubframes;
  /* 0x0018 */ int windowSize;
  /* 0x001c */ int lpcSize;
  /* 0x0020 */ int bufSize;
  /* 0x0024 */ int first;
  /* 0x0028 */ float lag_factor;
  /* 0x002c */ float lpc_floor;
  /* 0x0030 */ float gamma1;
  /* 0x0034 */ float gamma2;
  /* 0x0038 */ char* stack;
  /* 0x003c */ float* x0d;
  /* 0x0040 */ float* x1d;
  /* 0x0044 */ float* high;
  /* 0x0048 */ float* y0;
  /* 0x004c */ float* y1;
  /* 0x0050 */ float* h0_mem;
  /* 0x0054 */ float* h1_mem;
  /* 0x0058 */ float* g0_mem;
  /* 0x005c */ float* g1_mem;
  /* 0x0060 */ float* excBuf;
  /* 0x0064 */ float* exc;
  /* 0x0068 */ float* buf;
  /* 0x006c */ float* res;
  /* 0x0070 */ float* sw;
  /* 0x0074 */ float* target;
  /* 0x0078 */ float* window;
  /* 0x007c */ float* lagWindow;
  /* 0x0080 */ float* autocorr;
  /* 0x0084 */ float* lpc;
  /* 0x0088 */ float* lsp;
  /* 0x008c */ float* qlsp;
  /* 0x0090 */ float* old_lsp;
  /* 0x0094 */ float* old_qlsp;
  /* 0x0098 */ float* interp_lsp;
  /* 0x009c */ float* interp_qlsp;
  /* 0x00a0 */ float* interp_lpc;
  /* 0x00a4 */ float* interp_qlpc;
  /* 0x00a8 */ float* bw_lpc1;
  /* 0x00ac */ float* bw_lpc2;
  /* 0x00b0 */ float* mem_sp;
  /* 0x00b4 */ float* mem_sp2;
  /* 0x00b8 */ float* mem_sw;
  /* 0x00bc */ float* pi_gain;
  /* 0x00c0 */ float vbr_quality;
  /* 0x00c4 */ int vbr_enabled;
  /* 0x00c8 */ int abr_enabled;
  /* 0x00cc */ float abr_drift;
  /* 0x00d0 */ float abr_drift2;
  /* 0x00d4 */ float abr_count;
  /* 0x00d8 */ int vad_enabled;
  /* 0x00dc */ float relative_quality;
  /* 0x00e0 */ int encode_submode;
  /* 0x00e4 */ const struct SpeexSubmode* const* submodes;
  /* 0x00e8 */ int submodeID;
  /* 0x00ec */ int submodeSelect;
  /* 0x00f0 */ int complexity;
  /* 0x00f4 */ int sampling_rate;
}; /* size: 0x00f8 */

struct NV_NVAPI_GET_DP_DONGLE_INFO
{
  /* 0x0000 */ unsigned long version;
  struct
  {
    /* 0x0004 */ unsigned long displayMask;
  } /* size: 0x0004 */ input;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0008 */ unsigned long isDP2DVI : 1; /* bit position: 0 */
      /* 0x0008 */ unsigned long isDP2HDMI : 1; /* bit position: 1 */
      /* 0x0008 */ unsigned long reserved : 30; /* bit position: 2 */
    }; /* bitfield */
  } /* size: 0x0004 */ output;
}; /* size: 0x000c */

struct NV_EVENT_REGISTER_CALLBACK
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ enum NV_EVENT_TYPE eventId;
  /* 0x0008 */ void* callbackParam;
  union
  {
    union
    {
      /* 0x000c */ void* nvThermalCallback /* function */;
      /* 0x000c */ void* nvFanSpeedCallback /* function */;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ nvCallBackFunc;
}; /* size: 0x0010 */

struct NV_DISPLAY_PORT_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long dpcd_ver;
  /* 0x0008 */ enum NV_DP_LINK_RATE maxLinkRate;
  /* 0x000c */ enum NV_DP_LANE_COUNT maxLaneCount;
  /* 0x0010 */ enum NV_DP_LINK_RATE curLinkRate;
  /* 0x0014 */ enum NV_DP_LANE_COUNT curLaneCount;
  /* 0x0018 */ enum NV_DP_COLOR_FORMAT colorFormat;
  /* 0x001c */ enum NV_DP_DYNAMIC_RANGE dynamicRange;
  /* 0x0020 */ enum NV_DP_COLORIMETRY colorimetry;
  /* 0x0024 */ enum NV_DP_BPC bpc;
  struct /* bitfield */
  {
    /* 0x0028 */ unsigned long isDp : 1; /* bit position: 0 */
    /* 0x0028 */ unsigned long isInternalDp : 1; /* bit position: 1 */
    /* 0x0028 */ unsigned long isColorCtrlSupported : 1; /* bit position: 2 */
    /* 0x0028 */ unsigned long is6BPCSupported : 1; /* bit position: 3 */
    /* 0x0028 */ unsigned long is8BPCSupported : 1; /* bit position: 4 */
    /* 0x0028 */ unsigned long is10BPCSupported : 1; /* bit position: 5 */
    /* 0x0028 */ unsigned long is12BPCSupported : 1; /* bit position: 6 */
    /* 0x0028 */ unsigned long is16BPCSupported : 1; /* bit position: 7 */
    /* 0x0028 */ unsigned long isYCrCb422Supported : 1; /* bit position: 8 */
    /* 0x0028 */ unsigned long isYCrCb444Supported : 1; /* bit position: 9 */
  }; /* bitfield */
}; /* size: 0x002c */

struct NV_TV_ENCODER_CONTROLS
{
  /* 0x0000 */ unsigned long version;
  struct
  {
    /* 0x0004 */ unsigned long defaultLevel;
    /* 0x0008 */ unsigned long currentLevel;
    /* 0x000c */ unsigned long minLevel;
    /* 0x0010 */ unsigned long maxLevel;
  } /* size: 0x0010 */ flicker;
  struct
  {
    /* 0x0014 */ unsigned long defaultLevel;
    /* 0x0018 */ unsigned long currentLevel;
    /* 0x001c */ unsigned long minLevel;
    /* 0x0020 */ unsigned long maxLevel;
  } /* size: 0x0010 */ saturation;
}; /* size: 0x0024 */

struct NV_MOSAIC_SUPPORTED_TOPO_INFO
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long topoBriefsCount;
  /* 0x0008 */ struct NV_MOSAIC_TOPO_BRIEF topoBriefs[35];
  /* 0x0238 */ unsigned long displaySettingsCount;
  /* 0x023c */ struct NV_MOSAIC_DISPLAY_SETTING displaySettings[40];
}; /* size: 0x055c */

struct NV_MOSAIC_SUPPORTED_TOPOLOGIES
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long totalCount;
  /* 0x0008 */ struct NV_MOSAIC_TOPOLOGY topos[16];
}; /* size: 0x40c8 */

struct NV_CHIPSET_INFO_v4
{
  /* 0x0000 */ unsigned long version;
  /* 0x0004 */ unsigned long vendorId;
  /* 0x0008 */ unsigned long deviceId;
  /* 0x000c */ char szVendorName[64];
  /* 0x004c */ char szChipsetName[64];
  /* 0x008c */ unsigned long flags;
  /* 0x0090 */ unsigned long subSysVendorId;
  /* 0x0094 */ unsigned long subSysDeviceId;
  /* 0x0098 */ char szSubSysVendorName[64];
  /* 0x00d8 */ unsigned long HBvendorId;
  /* 0x00dc */ unsigned long HBdeviceId;
  /* 0x00e0 */ unsigned long HBsubSysVendorId;
  /* 0x00e4 */ unsigned long HBsubSysDeviceId;
}; /* size: 0x00e8 */

struct ltp_params
{
  /* 0x0000 */ const char* gain_cdbk;
  /* 0x0004 */ int gain_bits;
  /* 0x0008 */ int pitch_bits;
}; /* size: 0x000c */

typedef struct _COORD
{
  /* 0x0000 */ short X;
  /* 0x0002 */ short Y;
} COORD, *PCOORD; /* size: 0x0004 */

typedef struct _MOUSE_EVENT_RECORD
{
  /* 0x0000 */ struct _COORD dwMousePosition;
  /* 0x0004 */ unsigned long dwButtonState;
  /* 0x0008 */ unsigned long dwControlKeyState;
  /* 0x000c */ unsigned long dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD; /* size: 0x0010 */

typedef struct _WINDOW_BUFFER_SIZE_RECORD
{
  /* 0x0000 */ struct _COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD; /* size: 0x0004 */

typedef struct _MENU_EVENT_RECORD
{
  /* 0x0000 */ unsigned int dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD; /* size: 0x0004 */

typedef struct _FOCUS_EVENT_RECORD
{
  /* 0x0000 */ int bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD; /* size: 0x0004 */

struct SpeexSubmode
{
  /* 0x0000 */ int lbr_pitch;
  /* 0x0004 */ int forced_pitch_gain;
  /* 0x0008 */ int have_subframe_gain;
  /* 0x000c */ int double_codebook;
  /* 0x0010 */ void* lsp_quant /* function */;
  /* 0x0014 */ void* lsp_unquant /* function */;
  /* 0x0018 */ void* ltp_quant /* function */;
  /* 0x001c */ void* ltp_unquant /* function */;
  /* 0x0020 */ const void* ltp_params;
  /* 0x0024 */ void* innovation_quant /* function */;
  /* 0x0028 */ void* innovation_unquant /* function */;
  /* 0x002c */ const void* innovation_params;
  /* 0x0030 */ float lpc_enh_k1;
  /* 0x0034 */ float lpc_enh_k2;
  /* 0x0038 */ float lpc_enh_k3;
  /* 0x003c */ float comb_gain;
  /* 0x0040 */ int bits_per_frame;
}; /* size: 0x0044 */

struct jpeg_color_converter
{
  /* 0x0000 */ void* start_pass /* function */;
  /* 0x0004 */ void* color_convert /* function */;
}; /* size: 0x0008 */

struct my_color_converter
{
  /* 0x0000 */ struct jpeg_color_converter pub;
  /* 0x0008 */ long* rgb_ycc_tab;
}; /* size: 0x000c */

struct AddSceneEntSurfsCmd
{
  /* 0x0000 */ const struct GfxLight* visibleLights;
  /* 0x0004 */ int visibleLightCount;
  /* 0x0008 */ union vec4_t* dynamicSpotLightPlanes;
  /* 0x000c */ const struct GfxViewParms* viewParms;
  /* 0x0010 */ union GfxDrawSurf** drawSurfs;
  /* 0x0014 */ union GfxDrawSurf** lastDrawSurfs;
  /* 0x0018 */ void* sceneEnts;
  /* 0x001c */ unsigned char* sceneEntVisData;
  /* 0x0020 */ unsigned char* sceneEntVisDataSunShadow0;
  /* 0x0024 */ unsigned char* sceneEntVisDataSunShadow1;
  /* 0x0028 */ unsigned int sceneEntStart;
  /* 0x002c */ unsigned int sceneEntCount;
  /* 0x0030 */ BOOL isExtraCamera;
  /* 0x0031 */ BOOL sonarUseThermalMaterial;
  /* 0x0032 */ BOOL lightmapOnlyEntSurfs;
  /* 0x0033 */ char __PADDING__[1];
}; /* size: 0x0034 */

struct SpeexCallback
{
  /* 0x0000 */ int callback_id;
  /* 0x0004 */ void* func /* function */;
  /* 0x0008 */ void* data;
  /* 0x000c */ void* reserved1;
  /* 0x0010 */ int reserved2;
}; /* size: 0x0014 */

struct DecState
{
  /* 0x0000 */ const struct SpeexMode* mode;
  /* 0x0004 */ int first;
  /* 0x0008 */ int count_lost;
  /* 0x000c */ int frameSize;
  /* 0x0010 */ int subframeSize;
  /* 0x0014 */ int nbSubframes;
  /* 0x0018 */ int lpcSize;
  /* 0x001c */ int min_pitch;
  /* 0x0020 */ int max_pitch;
  /* 0x0024 */ int sampling_rate;
  /* 0x0028 */ float last_ol_gain;
  /* 0x002c */ char* stack;
  /* 0x0030 */ float* inBuf;
  /* 0x0034 */ float* frame;
  /* 0x0038 */ float* excBuf;
  /* 0x003c */ float* exc;
  /* 0x0040 */ float* innov;
  /* 0x0044 */ float* qlsp;
  /* 0x0048 */ float* old_qlsp;
  /* 0x004c */ float* interp_qlsp;
  /* 0x0050 */ float* interp_qlpc;
  /* 0x0054 */ float* mem_sp;
  /* 0x0058 */ float* pi_gain;
  /* 0x005c */ int last_pitch;
  /* 0x0060 */ float last_pitch_gain;
  /* 0x0064 */ float pitch_gain_buf[3];
  /* 0x0070 */ int pitch_gain_buf_idx;
  /* 0x0074 */ float level;
  /* 0x0078 */ float max_level;
  /* 0x007c */ float min_level;
  /* 0x0080 */ int encode_submode;
  /* 0x0084 */ const struct SpeexSubmode* const* submodes;
  /* 0x0088 */ int submodeID;
  /* 0x008c */ int lpc_enh_enabled;
  /* 0x0090 */ struct CombFilterMem* comb_mem;
  /* 0x0094 */ struct SpeexCallback speex_callbacks[16];
  /* 0x01d4 */ struct SpeexCallback user_callback;
  /* 0x01e8 */ float voc_m1;
  /* 0x01ec */ float voc_m2;
  /* 0x01f0 */ float voc_mean;
  /* 0x01f4 */ int voc_offset;
  /* 0x01f8 */ int dtx_enabled;
}; /* size: 0x01fc */

struct D3D10_TEX1D_RTV
{
  /* 0x0000 */ unsigned int MipSlice;
}; /* size: 0x0004 */

struct FilterEntInfo
{
  /* 0x0000 */ enum LocalClientNum_t localClientNum;
  /* 0x0004 */ unsigned int entnum;
  /* 0x0008 */ union GfxEntCellRefInfo info;
  /* 0x000c */ unsigned int cellOffset;
}; /* size: 0x0010 */

struct D3D10_BUFFER_RTV
{
  union
  {
    /* 0x0000 */ unsigned int FirstElement;
    /* 0x0000 */ unsigned int ElementOffset;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0004 */ unsigned int NumElements;
    /* 0x0004 */ unsigned int ElementWidth;
  }; /* size: 0x0004 */
}; /* size: 0x0008 */

struct D2D1_QUADRATIC_BEZIER_SEGMENT
{
  /* 0x0000 */ struct D2D_POINT_2F point1;
  /* 0x0008 */ struct D2D_POINT_2F point2;
}; /* size: 0x0010 */

struct D3D10_TEX2D_RTV
{
  /* 0x0000 */ unsigned int MipSlice;
}; /* size: 0x0004 */

struct D3D10_RASTERIZER_DESC
{
  /* 0x0000 */ enum D3D10_FILL_MODE FillMode;
  /* 0x0004 */ enum D3D10_CULL_MODE CullMode;
  /* 0x0008 */ int FrontCounterClockwise;
  /* 0x000c */ int DepthBias;
  /* 0x0010 */ float DepthBiasClamp;
  /* 0x0014 */ float SlopeScaledDepthBias;
  /* 0x0018 */ int DepthClipEnable;
  /* 0x001c */ int ScissorEnable;
  /* 0x0020 */ int MultisampleEnable;
  /* 0x0024 */ int AntialiasedLineEnable;
}; /* size: 0x0028 */

class bdCookie
{
  /* 0x0000 */ long Padding_1338[2];
  /* 0x0008 */ unsigned int m_localTag;
  /* 0x000c */ unsigned int m_peerTag;
  /* 0x0010 */ unsigned int m_localTieTag;
  /* 0x0014 */ unsigned int m_peerTieTag;
  union
  {
    /* 0x0000 */ unsigned char m_secret[20];
    /* 0x0000 */ BOOL m_secretInitialized;
  }; /* size: 0x0014 */
}; /* size: 0x0018 */

struct D3D10_TEX2D_ARRAY_RTV
{
  /* 0x0000 */ unsigned int MipSlice;
  /* 0x0004 */ unsigned int FirstArraySlice;
  /* 0x0008 */ unsigned int ArraySize;
}; /* size: 0x000c */

struct jpeg_color_deconverter
{
  /* 0x0000 */ void* start_pass /* function */;
  /* 0x0004 */ void* color_convert /* function */;
}; /* size: 0x0008 */

struct my_color_deconverter
{
  /* 0x0000 */ struct jpeg_color_deconverter pub;
  /* 0x0008 */ int* Cr_r_tab;
  /* 0x000c */ int* Cb_b_tab;
  /* 0x0010 */ long* Cr_g_tab;
  /* 0x0014 */ long* Cb_g_tab;
}; /* size: 0x0018 */

struct D3D10_COUNTER_INFO
{
  /* 0x0000 */ enum D3D10_COUNTER LastDeviceDependentCounter;
  /* 0x0004 */ unsigned int NumSimultaneousCounters;
  /* 0x0008 */ unsigned char NumDetectableParallelUnits;
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

typedef struct _D3DX10_FONT_DESCA
{
  /* 0x0000 */ int Height;
  /* 0x0004 */ unsigned int Width;
  /* 0x0008 */ unsigned int Weight;
  /* 0x000c */ unsigned int MipLevels;
  /* 0x0010 */ int Italic;
  /* 0x0014 */ unsigned char CharSet;
  /* 0x0015 */ unsigned char OutputPrecision;
  /* 0x0016 */ unsigned char Quality;
  /* 0x0017 */ unsigned char PitchAndFamily;
  /* 0x0018 */ char FaceName[32];
} D3DX10_FONT_DESCA, *PD3DX10_FONT_DESCA; /* size: 0x0038 */

struct ID3D10Texture2D
{
}; /* size: 0x0004 */

struct D3D10_RENDER_TARGET_VIEW_DESC
{
  /* 0x0000 */ enum DXGI_FORMAT Format;
  /* 0x0004 */ enum D3D10_RTV_DIMENSION ViewDimension;
  union
  {
    /* 0x0008 */ struct D3D10_BUFFER_RTV Buffer;
    /* 0x0008 */ struct D3D10_TEX1D_RTV Texture1D;
    /* 0x0008 */ struct D3D10_TEX1D_ARRAY_RTV Texture1DArray;
    /* 0x0008 */ struct D3D10_TEX2D_RTV Texture2D;
    /* 0x0008 */ struct D3D10_TEX2D_ARRAY_RTV Texture2DArray;
    /* 0x0008 */ struct D3D10_TEX2DMS_RTV Texture2DMS;
    /* 0x0008 */ struct D3D10_TEX2DMS_ARRAY_RTV Texture2DMSArray;
    /* 0x0008 */ struct D3D10_TEX3D_RTV Texture3D;
  }; /* size: 0x000c */
}; /* size: 0x0014 */

struct GfxWindowParms
{
  /* 0x0000 */ struct HWND__* hwnd;
  /* 0x0004 */ int hz;
  /* 0x0008 */ BOOL fullscreen;
  /* 0x0009 */ char Padding_1339[3];
  /* 0x000c */ int x;
  /* 0x0010 */ int y;
  /* 0x0014 */ int sceneWidth;
  /* 0x0018 */ int sceneHeight;
  /* 0x001c */ int displayWidth;
  /* 0x0020 */ int displayHeight;
}; /* size: 0x0024 */

struct ID3D10VertexShader
{
}; /* size: 0x0004 */

struct jpeg_common_struct
{
  /* 0x0000 */ struct jpeg_error_mgr* err;
  /* 0x0004 */ struct jpeg_memory_mgr* mem;
  /* 0x0008 */ struct jpeg_progress_mgr* progress;
  /* 0x000c */ void* client_data;
  /* 0x0010 */ unsigned char is_decompressor;
  /* 0x0011 */ char Padding_1340[3];
  /* 0x0014 */ int global_state;
  /* 0x0018 */ struct jpeg_alloc alloc;
}; /* size: 0x0020 */

struct std::pair<unsigned int const ,ID3D11BlendState *>
{
}; /* size: 0x0008 */

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node>
{
}; /* size: 0x0001 */

struct D3DXVECTOR4_16F
{
  /* 0x0000 */ struct D3DXFLOAT16 x;
  /* 0x0002 */ struct D3DXFLOAT16 y;
  /* 0x0004 */ struct D3DXFLOAT16 z;
  /* 0x0006 */ struct D3DXFLOAT16 w;
}; /* size: 0x0008 */

class bdVerifyString
{
  /* 0x0000 */ long Padding_1341;
  /* 0x0004 */ BOOL m_verified;
}; /* size: 0x0008 */

struct D3DX11_IMAGE_LOAD_INFO
{
  /* 0x0000 */ unsigned int Width;
  /* 0x0004 */ unsigned int Height;
  /* 0x0008 */ unsigned int Depth;
  /* 0x000c */ unsigned int FirstMipLevel;
  /* 0x0010 */ unsigned int MipLevels;
  /* 0x0014 */ enum D3D11_USAGE Usage;
  /* 0x0018 */ unsigned int BindFlags;
  /* 0x001c */ unsigned int CpuAccessFlags;
  /* 0x0020 */ unsigned int MiscFlags;
  /* 0x0024 */ enum DXGI_FORMAT Format;
  /* 0x0028 */ unsigned int Filter;
  /* 0x002c */ unsigned int MipFilter;
  /* 0x0030 */ struct D3DX11_IMAGE_INFO* pSrcInfo;
}; /* size: 0x0034 */

class bdUserGroupList
{
  /* 0x0000 */ long Padding_1342[2];
  /* 0x0008 */ unsigned __int64 m_userID;
  /* 0x0010 */ unsigned __int64 m_groupList[32];
  /* 0x0110 */ unsigned int m_groupCount;
}; /* size: 0x0118 */

struct ltc_utctime
{
  /* 0x0000 */ unsigned int YY;
  /* 0x0004 */ unsigned int MM;
  /* 0x0008 */ unsigned int DD;
  /* 0x000c */ unsigned int hh;
  /* 0x0010 */ unsigned int mm;
  /* 0x0014 */ unsigned int ss;
  /* 0x0018 */ unsigned int off_dir;
  /* 0x001c */ unsigned int off_hh;
  /* 0x0020 */ unsigned int off_mm;
}; /* size: 0x0024 */

class bdGetFilesResult
{
  /* 0x0000 */ long Padding_1343[2];
  /* 0x0008 */ unsigned __int64 m_ID;
  /* 0x0010 */ class bdFileData m_data;
}; /* size: 0x0020 */

struct ID3DInclude
{
}; /* size: 0x0004 */

class bdTransferrableUnlockedContent
{
  /* 0x0000 */ long Padding_1344;
  /* 0x0004 */ unsigned int m_numTransferrableToSharedUnlock;
  /* 0x0008 */ unsigned int m_numTransferrableToRegularUnlock;
}; /* size: 0x000c */

struct DWRITE_FONT_FEATURE
{
  /* 0x0000 */ enum DWRITE_FONT_FEATURE_TAG nameTag;
  /* 0x0004 */ unsigned int parameter;
}; /* size: 0x0008 */

struct GfxMeshGlobals
{
  /* 0x0000 */ struct GfxQuadMeshData fullSceneViewMesh[4];
}; /* size: 0x00e0 */

class bdAuthUserToHostPlainText
{
  /* 0x0000 */ unsigned __int64 m_userID;
  /* 0x0008 */ unsigned __int64 m_hostLicenseID;
}; /* size: 0x0010 */

typedef struct _D3DPSHADERCAPS2_0
{
  /* 0x0000 */ unsigned long Caps;
  /* 0x0004 */ int DynamicFlowControlDepth;
  /* 0x0008 */ int NumTemps;
  /* 0x000c */ int StaticFlowControlDepth;
  /* 0x0010 */ int NumInstructionSlots;
} D3DPSHADERCAPS2_0, *PD3DPSHADERCAPS2_0; /* size: 0x0014 */

struct DWRITE_FONT_METRICS
{
  /* 0x0000 */ unsigned short designUnitsPerEm;
  /* 0x0002 */ unsigned short ascent;
  /* 0x0004 */ unsigned short descent;
  /* 0x0006 */ short lineGap;
  /* 0x0008 */ unsigned short capHeight;
  /* 0x000a */ unsigned short xHeight;
  /* 0x000c */ short underlinePosition;
  /* 0x000e */ unsigned short underlineThickness;
  /* 0x0010 */ short strikethroughPosition;
  /* 0x0012 */ unsigned short strikethroughThickness;
}; /* size: 0x0014 */

struct DWRITE_TEXT_METRICS
{
  /* 0x0000 */ float left;
  /* 0x0004 */ float top;
  /* 0x0008 */ float width;
  /* 0x000c */ float widthIncludingTrailingWhitespace;
  /* 0x0010 */ float height;
  /* 0x0014 */ float layoutWidth;
  /* 0x0018 */ float layoutHeight;
  /* 0x001c */ unsigned int maxBidiReorderingDepth;
  /* 0x0020 */ unsigned int lineCount;
}; /* size: 0x0024 */

struct des_test_case
{
  /* 0x0000 */ int num;
  /* 0x0004 */ int mode;
  /* 0x0008 */ unsigned char key[8];
  /* 0x0010 */ unsigned char txt[8];
  /* 0x0018 */ unsigned char out[8];
}; /* size: 0x0020 */

class bdPlatformTiming
{
}; /* size: 0x0001 */

struct DWRITE_MATRIX
{
  /* 0x0000 */ float m11;
  /* 0x0004 */ float m12;
  /* 0x0008 */ float m21;
  /* 0x000c */ float m22;
  /* 0x0010 */ float dx;
  /* 0x0014 */ float dy;
}; /* size: 0x0018 */

struct DWRITE_GLYPH_RUN_DESCRIPTION
{
  /* 0x0000 */ const wchar_t* localeName;
  /* 0x0004 */ const wchar_t* string;
  /* 0x0008 */ unsigned int stringLength;
  /* 0x000c */ const unsigned short* clusterMap;
  /* 0x0010 */ unsigned int textPosition;
}; /* size: 0x0014 */

typedef struct _D3DGAMMARAMP
{
  /* 0x0000 */ unsigned short red[256];
  /* 0x0200 */ unsigned short green[256];
  /* 0x0400 */ unsigned short blue[256];
} D3DGAMMARAMP, *PD3DGAMMARAMP; /* size: 0x0600 */

typedef struct _D3DADAPTER_IDENTIFIER9
{
  /* 0x0000 */ char Driver[512];
  /* 0x0200 */ char Description[512];
  /* 0x0400 */ char DeviceName[32];
  /* 0x0420 */ union _LARGE_INTEGER DriverVersion;
  /* 0x0428 */ unsigned long VendorId;
  /* 0x042c */ unsigned long DeviceId;
  /* 0x0430 */ unsigned long SubSysId;
  /* 0x0434 */ unsigned long Revision;
  /* 0x0438 */ struct _GUID DeviceIdentifier;
  /* 0x0448 */ unsigned long WHQLLevel;
} D3DADAPTER_IDENTIFIER9, *PD3DADAPTER_IDENTIFIER9; /* size: 0x044c */

struct GfxSortDrawSurfsInterface
{
}; /* size: 0x0001 */

struct ID2D1Layer
{
}; /* size: 0x0004 */

struct GfxCmdDrawTriangles
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ const struct Material* material;
  /* 0x0008 */ unsigned char techType;
  /* 0x0009 */ char Padding_1345;
  /* 0x000a */ short indexCount;
  /* 0x000c */ short vertexCount;
  /* 0x000e */ char __PADDING__[2];
}; /* size: 0x0010 */

class D2D1::ColorF
{
  union
  {
    /* 0x0000 */ const unsigned int sc_redShift;
    /* 0x0000 */ const unsigned int sc_greenShift;
    /* 0x0000 */ const unsigned int sc_blueShift;
    /* 0x0000 */ const unsigned int sc_redMask;
    /* 0x0000 */ const unsigned int sc_greenMask;
    /* 0x0000 */ const unsigned int sc_blueMask;
  }; /* size: 0x0004 */
}; /* size: 0x0010 */

struct PerfTimerFrame
{
  /* 0x0000 */ unsigned int beginTime;
  /* 0x0004 */ unsigned int totalTime;
  /* 0x0008 */ struct PerfTimer* timers[80];
}; /* size: 0x0148 */

struct IDirect3DBaseTexture9
{
}; /* size: 0x0004 */

class bdBlockedUser
{
  /* 0x0000 */ long Padding_1346[2];
  /* 0x0008 */ unsigned __int64 m_userID;
  /* 0x0010 */ char m_userName[64];
}; /* size: 0x0050 */

union ddscolor_t
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned short b : 5; /* bit position: 0 */
        /* 0x0000 */ unsigned short g : 6; /* bit position: 5 */
        /* 0x0000 */ unsigned short r : 5; /* bit position: 11 */
      }; /* bitfield */
    } /* size: 0x0002 */ c;
    /* 0x0000 */ unsigned short rgb;
  }; /* size: 0x0002 */
}; /* size: 0x0002 */

typedef struct _D3DCAPS9
{
  /* 0x0000 */ enum _D3DDEVTYPE DeviceType;
  /* 0x0004 */ unsigned int AdapterOrdinal;
  /* 0x0008 */ unsigned long Caps;
  /* 0x000c */ unsigned long Caps2;
  /* 0x0010 */ unsigned long Caps3;
  /* 0x0014 */ unsigned long PresentationIntervals;
  /* 0x0018 */ unsigned long CursorCaps;
  /* 0x001c */ unsigned long DevCaps;
  /* 0x0020 */ unsigned long PrimitiveMiscCaps;
  /* 0x0024 */ unsigned long RasterCaps;
  /* 0x0028 */ unsigned long ZCmpCaps;
  /* 0x002c */ unsigned long SrcBlendCaps;
  /* 0x0030 */ unsigned long DestBlendCaps;
  /* 0x0034 */ unsigned long AlphaCmpCaps;
  /* 0x0038 */ unsigned long ShadeCaps;
  /* 0x003c */ unsigned long TextureCaps;
  /* 0x0040 */ unsigned long TextureFilterCaps;
  /* 0x0044 */ unsigned long CubeTextureFilterCaps;
  /* 0x0048 */ unsigned long VolumeTextureFilterCaps;
  /* 0x004c */ unsigned long TextureAddressCaps;
  /* 0x0050 */ unsigned long VolumeTextureAddressCaps;
  /* 0x0054 */ unsigned long LineCaps;
  /* 0x0058 */ unsigned long MaxTextureWidth;
  /* 0x005c */ unsigned long MaxTextureHeight;
  /* 0x0060 */ unsigned long MaxVolumeExtent;
  /* 0x0064 */ unsigned long MaxTextureRepeat;
  /* 0x0068 */ unsigned long MaxTextureAspectRatio;
  /* 0x006c */ unsigned long MaxAnisotropy;
  /* 0x0070 */ float MaxVertexW;
  /* 0x0074 */ float GuardBandLeft;
  /* 0x0078 */ float GuardBandTop;
  /* 0x007c */ float GuardBandRight;
  /* 0x0080 */ float GuardBandBottom;
  /* 0x0084 */ float ExtentsAdjust;
  /* 0x0088 */ unsigned long StencilCaps;
  /* 0x008c */ unsigned long FVFCaps;
  /* 0x0090 */ unsigned long TextureOpCaps;
  /* 0x0094 */ unsigned long MaxTextureBlendStages;
  /* 0x0098 */ unsigned long MaxSimultaneousTextures;
  /* 0x009c */ unsigned long VertexProcessingCaps;
  /* 0x00a0 */ unsigned long MaxActiveLights;
  /* 0x00a4 */ unsigned long MaxUserClipPlanes;
  /* 0x00a8 */ unsigned long MaxVertexBlendMatrices;
  /* 0x00ac */ unsigned long MaxVertexBlendMatrixIndex;
  /* 0x00b0 */ float MaxPointSize;
  /* 0x00b4 */ unsigned long MaxPrimitiveCount;
  /* 0x00b8 */ unsigned long MaxVertexIndex;
  /* 0x00bc */ unsigned long MaxStreams;
  /* 0x00c0 */ unsigned long MaxStreamStride;
  /* 0x00c4 */ unsigned long VertexShaderVersion;
  /* 0x00c8 */ unsigned long MaxVertexShaderConst;
  /* 0x00cc */ unsigned long PixelShaderVersion;
  /* 0x00d0 */ float PixelShader1xMaxValue;
  /* 0x00d4 */ unsigned long DevCaps2;
  /* 0x00d8 */ float MaxNpatchTessellationLevel;
  /* 0x00dc */ unsigned long Reserved5;
  /* 0x00e0 */ unsigned int MasterAdapterOrdinal;
  /* 0x00e4 */ unsigned int AdapterOrdinalInGroup;
  /* 0x00e8 */ unsigned int NumberOfAdaptersInGroup;
  /* 0x00ec */ unsigned long DeclTypes;
  /* 0x00f0 */ unsigned long NumSimultaneousRTs;
  /* 0x00f4 */ unsigned long StretchRectFilterCaps;
  /* 0x00f8 */ struct _D3DVSHADERCAPS2_0 VS20Caps;
  /* 0x0108 */ struct _D3DPSHADERCAPS2_0 PS20Caps;
  /* 0x011c */ unsigned long VertexTextureFilterCaps;
  /* 0x0120 */ unsigned long MaxVShaderInstructionsExecuted;
  /* 0x0124 */ unsigned long MaxPShaderInstructionsExecuted;
  /* 0x0128 */ unsigned long MaxVertexShader30InstructionSlots;
  /* 0x012c */ unsigned long MaxPixelShader30InstructionSlots;
} D3DCAPS9, *PD3DCAPS9; /* size: 0x0130 */

class bdCookieAckChunk
{
  /* 0x0000 */ long Padding_1347[4];
  /* 0x0010 */ enum bdCookieAckChunk::bdCookieAckFlags m_flags;
}; /* size: 0x0014 */

struct IDirect3DVertexBuffer9
{
}; /* size: 0x0004 */

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >
{
}; /* size: 0x0004 */

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >,bool>
{
  /* 0x0000 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > > first;
  /* 0x0004 */ BOOL second;
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

struct ID2D1Geometry
{
}; /* size: 0x0004 */

struct RCinematicsBinkDuck
{
  /* 0x0000 */ unsigned int start;
  /* 0x0004 */ unsigned int end;
}; /* size: 0x0008 */

struct DWRITE_INLINE_OBJECT_METRICS
{
  /* 0x0000 */ float width;
  /* 0x0004 */ float height;
  /* 0x0008 */ float baseline;
  /* 0x000c */ int supportsSideways;
}; /* size: 0x0010 */

struct jpeg_destination_mgr
{
  /* 0x0000 */ unsigned char* next_output_byte;
  /* 0x0004 */ unsigned int free_in_buffer;
  /* 0x0008 */ void* init_destination /* function */;
  /* 0x000c */ void* empty_output_buffer /* function */;
  /* 0x0010 */ void* term_destination /* function */;
}; /* size: 0x0014 */

struct my_destination_mgr
{
  /* 0x0000 */ struct jpeg_destination_mgr pub;
  /* 0x0014 */ unsigned char* outfile;
  /* 0x0018 */ int size;
}; /* size: 0x001c */

struct bdMallocMemory::bdMemoryChainElement
{
  /* 0x0000 */ unsigned short m_magic;
  /* 0x0002 */ char Padding_1348[2];
  /* 0x0004 */ unsigned int m_size;
  /* 0x0008 */ BOOL m_aligned;
  /* 0x0009 */ char Padding_1349[3];
  /* 0x000c */ struct bdMallocMemory::bdMemoryChainElement* m_prev;
  /* 0x0010 */ struct bdMallocMemory::bdMemoryChainElement* m_next;
}; /* size: 0x0014 */

struct ID2D1Brush
{
}; /* size: 0x0004 */

struct IDirect3DDevice9
{
}; /* size: 0x0004 */

class bdQueue<bdUnicastConnection::bdControlChunkStore>
{
  /* 0x0000 */ class bdLinkedList<bdUnicastConnection::bdControlChunkStore> m_list;
}; /* size: 0x000c */

class bdUnicastConnection
{
  /* 0x0000 */ long Padding_1350[9];
  /* 0x0024 */ class bdConnectionStatistics m_stats;
  /* 0x0064 */ class bdReliableSendWindow* m_reliableSendWindow;
  /* 0x0068 */ class bdReliableReceiveWindow* m_reliableRecvWindow;
  /* 0x006c */ class bdUnreliableSendWindow m_unreliableSendWindow;
  /* 0x0080 */ class bdUnreliableReceiveWindow m_unreliableReceiveWindow;
  /* 0x0094 */ class bdQueue<bdUnicastConnection::bdControlChunkStore> m_outQueue;
  /* 0x00a0 */ class bdStopwatch m_sendTimer;
  /* 0x00a8 */ class bdStopwatch m_receiveTimer;
  /* 0x00b0 */ enum bdUnicastConnection::bdUnicastConnectionStatus m_state;
  /* 0x00b4 */ unsigned int m_localTag;
  /* 0x00b8 */ unsigned int m_peerTag;
  /* 0x00bc */ long Padding_1351;
  /* 0x00c0 */ class bdStopwatch m_initTimer;
  /* 0x00c8 */ unsigned char m_initResends;
  /* 0x00c9 */ char Padding_1352[7];
  /* 0x00d0 */ class bdStopwatch m_cookieTimer;
  /* 0x00d8 */ unsigned char m_cookieResends;
  /* 0x00d9 */ char Padding_1353[7];
  /* 0x00e0 */ class bdStopwatch m_shutdownTimer;
  /* 0x00e8 */ unsigned char m_shutdownResends;
  /* 0x00e9 */ char Padding_1354[7];
  /* 0x00f0 */ class bdStopwatch m_shutdownGuard;
  /* 0x00f8 */ class bdReference<bdInitAckChunk> m_initAckChunk;
  /* 0x00fc */ float m_smoothedRTT;
  /* 0x0100 */ float m_RTTVariation;
  /* 0x0104 */ class bdAddressMap* m_addrMap;
}; /* size: 0x0108 */

typedef struct _D3D11_SHADER_VARIABLE_DESC
{
  /* 0x0000 */ const char* Name;
  /* 0x0004 */ unsigned int StartOffset;
  /* 0x0008 */ unsigned int Size;
  /* 0x000c */ unsigned int uFlags;
  /* 0x0010 */ void* DefaultValue;
  /* 0x0014 */ unsigned int StartTexture;
  /* 0x0018 */ unsigned int TextureSize;
  /* 0x001c */ unsigned int StartSampler;
  /* 0x0020 */ unsigned int SamplerSize;
} D3D11_SHADER_VARIABLE_DESC, *PD3D11_SHADER_VARIABLE_DESC; /* size: 0x0024 */

typedef struct _PROCESS_MEMORY_COUNTERS
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ unsigned long PageFaultCount;
  /* 0x0008 */ unsigned long PeakWorkingSetSize;
  /* 0x000c */ unsigned long WorkingSetSize;
  /* 0x0010 */ unsigned long QuotaPeakPagedPoolUsage;
  /* 0x0014 */ unsigned long QuotaPagedPoolUsage;
  /* 0x0018 */ unsigned long QuotaPeakNonPagedPoolUsage;
  /* 0x001c */ unsigned long QuotaNonPagedPoolUsage;
  /* 0x0020 */ unsigned long PagefileUsage;
  /* 0x0024 */ unsigned long PeakPagefileUsage;
} PROCESS_MEMORY_COUNTERS, *PPROCESS_MEMORY_COUNTERS; /* size: 0x0028 */

union jqProfEndCaptureWrite::__l4::ProfEventUPtr
{
  union
  {
    /* 0x0000 */ struct jqProfEvent** Ptr;
    /* 0x0000 */ unsigned int* PtrAsInt;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct jqProfEvent
{
  /* 0x0000 */ unsigned __int64 ThreadId;
  /* 0x0008 */ unsigned __int64 Tick;
  /* 0x0010 */ unsigned int Color;
  /* 0x0014 */ unsigned int Pad[3];
  /* 0x0020 */ char Description[96];
}; /* size: 0x0080 */

union jqProfEndCaptureWrite::__l4::ProfEventUVal
{
  union
  {
    /* 0x0000 */ struct jqProfEvent* Val;
    /* 0x0000 */ unsigned int ValAsInt;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct std::_Pair_base<GfxSurface *,GfxSurface *>
{
  /* 0x0000 */ struct GfxSurface* first;
  /* 0x0004 */ struct GfxSurface* second;
}; /* size: 0x0008 */

typedef struct _SYSTEM_INFO
{
  union
  {
    /* 0x0000 */ unsigned long dwOemId;
    struct
    {
      /* 0x0000 */ unsigned short wProcessorArchitecture;
      /* 0x0002 */ unsigned short wReserved;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long dwPageSize;
  /* 0x0008 */ void* lpMinimumApplicationAddress;
  /* 0x000c */ void* lpMaximumApplicationAddress;
  /* 0x0010 */ unsigned long dwActiveProcessorMask;
  /* 0x0014 */ unsigned long dwNumberOfProcessors;
  /* 0x0018 */ unsigned long dwProcessorType;
  /* 0x001c */ unsigned long dwAllocationGranularity;
  /* 0x0020 */ unsigned short wProcessorLevel;
  /* 0x0022 */ unsigned short wProcessorRevision;
} SYSTEM_INFO, *PSYSTEM_INFO; /* size: 0x0024 */

struct VBRState
{
  /* 0x0000 */ float energy_alpha;
  /* 0x0004 */ float average_energy;
  /* 0x0008 */ float last_energy;
  /* 0x000c */ float last_log_energy[5];
  /* 0x0020 */ float accum_sum;
  /* 0x0024 */ float last_pitch_coef;
  /* 0x0028 */ float soft_pitch;
  /* 0x002c */ float last_quality;
  /* 0x0030 */ float noise_level;
  /* 0x0034 */ float noise_accum;
  /* 0x0038 */ float noise_accum_count;
  /* 0x003c */ int consec_noise;
}; /* size: 0x0040 */

struct jqAtomicQueue<jqConditionalQueue *,32>
{
  /* 0x0000 */ struct jqAtomicQueuePtr<jqAtomicQueue<jqConditionalQueue *,32>::NodeType>* FreeListPtr;
  /* 0x0004 */ long Padding_1355;
  /* 0x0008 */ struct jqAtomicQueuePtr<jqAtomicQueue<jqConditionalQueue *,32>::NodeType> _FreeList;
  /* 0x0010 */ struct jqAtomicQueuePtr<jqAtomicQueue<jqConditionalQueue *,32>::NodeType> Head;
  /* 0x0018 */ struct jqAtomicQueuePtr<jqAtomicQueue<jqConditionalQueue *,32>::NodeType> Tail;
  /* 0x0020 */ struct jqAtomicQueue<jqConditionalQueue *,32>* ThisPtr;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

struct jqAtomicQueue<jqConditionalQueue *,32>::NodeType
{
  /* 0x0000 */ struct jqAtomicQueuePtr<jqAtomicQueue<jqConditionalQueue *,32>::NodeType> Next;
  /* 0x0008 */ struct jqConditionalQueue* Data;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

class phys_free_list<rigid_body_constraint_angular_actuator>::T_internal
{
  /* 0x0000 */ long Padding_1356[4];
  /* 0x0010 */ class rigid_body_constraint_angular_actuator m_data;
  /* 0x00d0 */ int m_ptr_list_index;
}; /* size: 0x00e0 */

class stdext::bad_array_new_length
{
}; /* size: 0x0008 */

struct phys_slot_pool::extra_info
{
  /* 0x0000 */ class phys_slot_pool* m_slot_pool_owner;
  /* 0x0004 */ void* m_allocation_owner;
}; /* size: 0x0008 */

struct std::pair<XModel * *,XModel * *>
{
}; /* size: 0x0008 */

struct DiskGfxVolumePlane
{
  /* 0x0000 */ union vec4_t plane;
}; /* size: 0x0010 */

struct SpeexNBMode
{
  /* 0x0000 */ int frameSize;
  /* 0x0004 */ int subframeSize;
  /* 0x0008 */ int lpcSize;
  /* 0x000c */ int pitchStart;
  /* 0x0010 */ int pitchEnd;
  /* 0x0014 */ float gamma1;
  /* 0x0018 */ float gamma2;
  /* 0x001c */ float lag_factor;
  /* 0x0020 */ float lpc_floor;
  /* 0x0024 */ const struct SpeexSubmode* submodes[16];
  /* 0x0064 */ int defaultSubmode;
  /* 0x0068 */ int quality_map[11];
}; /* size: 0x0094 */

class axis_aligned_sweep_and_prune
{
  /* 0x0000 */ class phys_simple_allocator<axis_aligned_sweep_and_prune::sap_node> m_sap_node_allocator;
  /* 0x0004 */ class axis_aligned_sweep_and_prune::axis_element* m_x_list;
  /* 0x0008 */ class axis_aligned_sweep_and_prune::axis_element* m_y_list;
  /* 0x000c */ class axis_aligned_sweep_and_prune::axis_element* m_z_list;
  /* 0x0010 */ void* m_should_collide_callback /* function */;
  /* 0x0014 */ class phys_simple_allocator<axis_aligned_sweep_and_prune::active_pair> m_active_pair_allocator;
  /* 0x0018 */ int m_max_num_active_pairs;
  /* 0x001c */ class axis_aligned_sweep_and_prune::active_pair* m_list_bpi_bpi;
  /* 0x0020 */ class axis_aligned_sweep_and_prune::active_pair* m_list_bpi_bpg;
  /* 0x0024 */ class axis_aligned_sweep_and_prune::active_pair* m_list_bpg_bpg;
}; /* size: 0x0028 */

struct DiskGfxLutVolume
{
  /* 0x0000 */ unsigned int control;
  /* 0x0004 */ short boundsXmin;
  /* 0x0006 */ short boundsYmin;
  /* 0x0008 */ short boundsZmin;
  /* 0x000a */ short boundsXmax;
  /* 0x000c */ short boundsYmax;
  /* 0x000e */ short boundsZmax;
  /* 0x0010 */ unsigned int controlEx;
  /* 0x0014 */ int lutIndex;
  /* 0x0018 */ float lutTransitionTime;
  /* 0x001c */ unsigned int priority;
}; /* size: 0x0020 */

class gjk_sep_dir
{
}; /* size: 0x0001 */

class narrow_phase_collision_task_input
{
  /* 0x0000 */ class contact_point_info** m_list_output_cpi;
  /* 0x0004 */ class rigid_body_constraint_contact* m_rbc_contact_search_tree_root;
  /* 0x0008 */ class phys_collision_pair** m_list_pcp_iterator;
}; /* size: 0x000c */

class bdHMacSHA1
{
  /* 0x0000 */ long Padding_1357[2];
  /* 0x0008 */ struct Hmac_state m_state;
}; /* size: 0x00f8 */

struct phys_inplace_avl_tree<user_rigid_body *,pulse_sum_constraint_solver::temp_user_rigid_body,pulse_sum_constraint_solver::temp_user_rigid_body::avl_tree_accessor>::stack_item
{
  /* 0x0000 */ class pulse_sum_constraint_solver::temp_user_rigid_body** m_node;
  /* 0x0004 */ int m_child;
}; /* size: 0x0008 */

class phys_link_list<pulse_sum_node>::iterator
{
  /* 0x0000 */ class pulse_sum_node* m_ptr;
}; /* size: 0x0004 */

struct GfxSceneParms
{
  /* 0x0000 */ enum LocalClientNum_t localClientNum;
  /* 0x0004 */ float blurRadius;
  /* 0x0008 */ float adsZScale;
  /* 0x000c */ float sunVisibility;
  /* 0x0010 */ float rimIntensity;
  /* 0x0014 */ union vec4_t genericSceneVector0;
  /* 0x0024 */ union vec4_t genericSceneVector1;
  /* 0x0034 */ union vec4_t genericSceneVector2;
  /* 0x0044 */ union vec4_t genericSceneVector3;
  /* 0x0054 */ union vec4_t cameraVelocity;
  /* 0x0064 */ struct GfxDepthOfField dof;
  /* 0x0088 */ struct GfxLightScale charPrimaryLightScale;
  /* 0x0090 */ struct GfxFilm film;
  /* 0x01a0 */ struct GfxBloom bloom;
  /* 0x0230 */ struct GfxCompositeFx flameFx;
  /* 0x025c */ struct GfxReviveFx reviveFx;
  /* 0x0294 */ struct GfxCompositeFx waterSheetingFx;
  /* 0x02c0 */ struct GfxDoubleVision doubleVision;
  /* 0x02dc */ struct GfxGenericFilter genericFilter;
  /* 0x0d9c */ struct GfxPoison poisonFx;
  /* 0x0da4 */ struct GfxCompositeFx electrifiedFx;
  /* 0x0dd0 */ struct GfxCompositeFx transportedFx;
  /* 0x0dfc */ struct GfxSaveScreenFx saveScreenFx;
  /* 0x0e50 */ BOOL isRenderingFullScreen;
  /* 0x0e51 */ BOOL playerTeleported;
  /* 0x0e52 */ char Padding_1358[2];
  /* 0x0e54 */ struct GfxViewport sceneViewport;
  /* 0x0e64 */ struct GfxViewport displayViewport;
  /* 0x0e74 */ struct GfxViewport scissorViewport;
  /* 0x0e84 */ const struct GfxLight* primaryLights;
  /* 0x0e88 */ float sceneX;
  /* 0x0e8c */ float sceneY;
  /* 0x0e90 */ float sceneW;
  /* 0x0e94 */ float sceneH;
}; /* size: 0x0e98 */

struct jpeg_decompress_struct
{
  /* 0x0000 */ struct jpeg_error_mgr* err;
  /* 0x0004 */ struct jpeg_memory_mgr* mem;
  /* 0x0008 */ struct jpeg_progress_mgr* progress;
  /* 0x000c */ void* client_data;
  /* 0x0010 */ unsigned char is_decompressor;
  /* 0x0011 */ char Padding_1359[3];
  /* 0x0014 */ int global_state;
  /* 0x0018 */ struct jpeg_alloc alloc;
  /* 0x0020 */ struct jpeg_source_mgr* src;
  /* 0x0024 */ unsigned int image_width;
  /* 0x0028 */ unsigned int image_height;
  /* 0x002c */ int num_components;
  /* 0x0030 */ enum J_COLOR_SPACE jpeg_color_space;
  /* 0x0034 */ enum J_COLOR_SPACE out_color_space;
  /* 0x0038 */ unsigned int scale_num;
  /* 0x003c */ unsigned int scale_denom;
  /* 0x0040 */ double output_gamma;
  /* 0x0048 */ unsigned char buffered_image;
  /* 0x0049 */ unsigned char raw_data_out;
  /* 0x004a */ char Padding_1360[2];
  /* 0x004c */ enum J_DCT_METHOD dct_method;
  /* 0x0050 */ unsigned char do_fancy_upsampling;
  /* 0x0051 */ unsigned char do_block_smoothing;
  /* 0x0052 */ unsigned char quantize_colors;
  /* 0x0053 */ char Padding_1361;
  /* 0x0054 */ enum J_DITHER_MODE dither_mode;
  /* 0x0058 */ unsigned char two_pass_quantize;
  /* 0x0059 */ char Padding_1362[3];
  /* 0x005c */ int desired_number_of_colors;
  /* 0x0060 */ unsigned char enable_1pass_quant;
  /* 0x0061 */ unsigned char enable_external_quant;
  /* 0x0062 */ unsigned char enable_2pass_quant;
  /* 0x0063 */ char Padding_1363;
  /* 0x0064 */ unsigned int output_width;
  /* 0x0068 */ unsigned int output_height;
  /* 0x006c */ int out_color_components;
  /* 0x0070 */ int output_components;
  /* 0x0074 */ int rec_outbuf_height;
  /* 0x0078 */ int actual_number_of_colors;
  /* 0x007c */ unsigned char** colormap;
  /* 0x0080 */ unsigned int output_scanline;
  /* 0x0084 */ int input_scan_number;
  /* 0x0088 */ unsigned int input_iMCU_row;
  /* 0x008c */ int output_scan_number;
  /* 0x0090 */ unsigned int output_iMCU_row;
  /* 0x0094 */ int* coef_bits[64];
  /* 0x0098 */ struct JQUANT_TBL* quant_tbl_ptrs[4];
  /* 0x00a8 */ struct JHUFF_TBL* dc_huff_tbl_ptrs[4];
  /* 0x00b8 */ struct JHUFF_TBL* ac_huff_tbl_ptrs[4];
  /* 0x00c8 */ int data_precision;
  /* 0x00cc */ struct jpeg_component_info* comp_info;
  /* 0x00d0 */ unsigned char progressive_mode;
  /* 0x00d1 */ unsigned char arith_code;
  /* 0x00d2 */ unsigned char arith_dc_L[16];
  /* 0x00e2 */ unsigned char arith_dc_U[16];
  /* 0x00f2 */ unsigned char arith_ac_K[16];
  /* 0x0102 */ char Padding_1364[2];
  /* 0x0104 */ unsigned int restart_interval;
  /* 0x0108 */ unsigned char saw_JFIF_marker;
  /* 0x0109 */ unsigned char JFIF_major_version;
  /* 0x010a */ unsigned char JFIF_minor_version;
  /* 0x010b */ unsigned char density_unit;
  /* 0x010c */ unsigned short X_density;
  /* 0x010e */ unsigned short Y_density;
  /* 0x0110 */ unsigned char saw_Adobe_marker;
  /* 0x0111 */ unsigned char Adobe_transform;
  /* 0x0112 */ unsigned char CCIR601_sampling;
  /* 0x0113 */ char Padding_1365;
  /* 0x0114 */ struct jpeg_marker_struct* marker_list;
  /* 0x0118 */ int max_h_samp_factor;
  /* 0x011c */ int max_v_samp_factor;
  /* 0x0120 */ int min_DCT_scaled_size;
  /* 0x0124 */ unsigned int total_iMCU_rows;
  /* 0x0128 */ unsigned char* sample_range_limit;
  /* 0x012c */ int comps_in_scan;
  /* 0x0130 */ struct jpeg_component_info* cur_comp_info[4];
  /* 0x0140 */ unsigned int MCUs_per_row;
  /* 0x0144 */ unsigned int MCU_rows_in_scan;
  /* 0x0148 */ int blocks_in_MCU;
  /* 0x014c */ int MCU_membership[10];
  /* 0x0174 */ int Ss;
  /* 0x0178 */ int Se;
  /* 0x017c */ int Ah;
  /* 0x0180 */ int Al;
  /* 0x0184 */ int unread_marker;
  /* 0x0188 */ struct jpeg_decomp_master* master;
  /* 0x018c */ struct jpeg_d_main_controller* main;
  /* 0x0190 */ struct jpeg_d_coef_controller* coef;
  /* 0x0194 */ struct jpeg_d_post_controller* post;
  /* 0x0198 */ struct jpeg_input_controller* inputctl;
  /* 0x019c */ struct jpeg_marker_reader* marker;
  /* 0x01a0 */ struct jpeg_entropy_decoder* entropy;
  /* 0x01a4 */ struct jpeg_inverse_dct* idct;
  /* 0x01a8 */ struct jpeg_upsampler* upsample;
  /* 0x01ac */ struct jpeg_color_deconverter* cconvert;
  /* 0x01b0 */ struct jpeg_color_quantizer* cquantize;
  /* 0x01b4 */ long __PADDING__[1];
}; /* size: 0x01b8 */

typedef struct _EXCEPTION_REGISTRATION_RECORD
{
  /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* Next;
  /* 0x0004 */ void* Handler /* function */;
} EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD; /* size: 0x0008 */

typedef struct _EH4_EXCEPTION_REGISTRATION_RECORD
{
  /* 0x0000 */ void* SavedESP;
  /* 0x0004 */ struct _EXCEPTION_POINTERS* ExceptionPointers;
  /* 0x0008 */ struct _EXCEPTION_REGISTRATION_RECORD SubRecord;
  /* 0x0010 */ unsigned int EncodedScopeTable;
  /* 0x0014 */ unsigned long TryLevel;
} EH4_EXCEPTION_REGISTRATION_RECORD, *PEH4_EXCEPTION_REGISTRATION_RECORD; /* size: 0x0018 */

struct std::pair<unsigned __int64 const ,ID3D11DepthStencilState *>
{
}; /* size: 0x0010 */

struct std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node
{
  /* 0x0000 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node* _Left;
  /* 0x0004 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node* _Parent;
  /* 0x0008 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node* _Right;
  /* 0x000c */ long Padding_1366;
  /* 0x0010 */ struct std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> _Myval;
  /* 0x0020 */ char _Color;
  /* 0x0021 */ char _Isnil;
  /* 0x0022 */ char __PADDING__[6];
}; /* size: 0x0028 */

struct std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node
{
  /* 0x0000 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node* _Left;
  /* 0x0004 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node* _Parent;
  /* 0x0008 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node* _Right;
  /* 0x000c */ struct std::pair<unsigned int const ,ID3D11BlendState *> _Myval;
  /* 0x0014 */ char _Color;
  /* 0x0015 */ char _Isnil;
  /* 0x0016 */ char __PADDING__[2];
}; /* size: 0x0018 */

typedef struct _TP_CALLBACK_ENVIRON_V3
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ struct _TP_POOL* Pool;
  /* 0x0008 */ struct _TP_CLEANUP_GROUP* CleanupGroup;
  /* 0x000c */ void* CleanupGroupCancelCallback /* function */;
  /* 0x0010 */ void* RaceDll;
  /* 0x0014 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0018 */ void* FinalizationCallback /* function */;
  union
  {
    union
    {
      /* 0x001c */ unsigned long Flags;
      struct
      {
        struct /* bitfield */
        {
          /* 0x001c */ unsigned long LongFunction : 1; /* bit position: 0 */
          /* 0x001c */ unsigned long Persistent : 1; /* bit position: 1 */
          /* 0x001c */ unsigned long Private : 30; /* bit position: 2 */
        }; /* bitfield */
      } /* size: 0x0004 */ s;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0020 */ enum _TP_CALLBACK_PRIORITY CallbackPriority;
  /* 0x0024 */ unsigned long Size;
} TP_CALLBACK_ENVIRON_V3, *PTP_CALLBACK_ENVIRON_V3; /* size: 0x0028 */

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > > >;

struct MtlStateMapBitName
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ int bits;
}; /* size: 0x0008 */

struct TechniqueNameControl
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned char type;
  /* 0x0005 */ BOOL inUse;
  /* 0x0006 */ char __PADDING__[2];
}; /* size: 0x0008 */

class Sse_SkinVertex_0
{
}; /* size: 0x0001 */

struct std::pair<GfxStaticModelCombinedInst *,GfxStaticModelCombinedInst *>
{
}; /* size: 0x0008 */

struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
{
  /* 0x0000 */ unsigned __int64 Frequency;
  /* 0x0008 */ int Disjoint;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

struct GfxCmdClearScreen
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ unsigned char whichToClear;
  /* 0x0005 */ unsigned char stencil;
  /* 0x0006 */ char Padding_1367[2];
  /* 0x0008 */ float depth;
  /* 0x000c */ union vec4_t color;
}; /* size: 0x001c */

struct GfxCmdProjectionSet
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ enum GfxProjectionTypes projection;
}; /* size: 0x0008 */

struct DdsBlock_Dxt1_t
{
  /* 0x0000 */ union ddscolor_t color0;
  /* 0x0002 */ union ddscolor_t color1;
  /* 0x0004 */ unsigned char bits[4];
}; /* size: 0x0008 */

struct DdsBlock_Dxt5_t
{
  /* 0x0000 */ unsigned char alpha0;
  /* 0x0001 */ unsigned char alpha1;
  /* 0x0002 */ unsigned char alpha[6];
  /* 0x0008 */ struct DdsBlock_Dxt1_t color;
}; /* size: 0x0010 */

struct GfxDrawRecord
{
  /* 0x0000 */ struct GfxViewInfo* viewInfo;
  /* 0x0004 */ struct GfxBackEndData* data;
  /* 0x0008 */ unsigned int viewInfoIndex;
}; /* size: 0x000c */

struct GfxDrawRecordGlob
{
  /* 0x0000 */ struct GfxDrawRecord records[4];
  /* 0x0030 */ unsigned int count;
  /* 0x0034 */ unsigned int frame;
}; /* size: 0x0038 */

class bdUnlockContentInfo
{
  /* 0x0000 */ long Padding_1368;
  /* 0x0004 */ unsigned int m_contentKey;
  /* 0x0008 */ unsigned __int64 m_hardwareID;
}; /* size: 0x0010 */

struct curl_version_info_data
{
  /* 0x0000 */ enum CURLversion age;
  /* 0x0004 */ const char* version;
  /* 0x0008 */ unsigned int version_num;
  /* 0x000c */ const char* host;
  /* 0x0010 */ int features;
  /* 0x0014 */ const char* ssl_version;
  /* 0x0018 */ long ssl_version_num;
  /* 0x001c */ const char* libz_version;
  /* 0x0020 */ const char* const* protocols;
  /* 0x0024 */ const char* ares;
  /* 0x0028 */ int ares_num;
  /* 0x002c */ const char* libidn;
  /* 0x0030 */ int iconv_ver_num;
  /* 0x0034 */ const char* libssh_version;
}; /* size: 0x0038 */

class bdMarketplaceInventoryItemQuantity
{
  /* 0x0000 */ long Padding_1369[2];
  /* 0x0008 */ unsigned __int64 m_playerId;
  /* 0x0010 */ unsigned int m_itemId;
  /* 0x0014 */ unsigned int m_itemQuantity;
}; /* size: 0x0018 */

struct CodeConstantSource
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ unsigned char source;
  /* 0x0005 */ char Padding_1370[3];
  /* 0x0008 */ const struct CodeConstantSource* subtable;
  /* 0x000c */ int arrayCount;
  /* 0x0010 */ int arrayStride;
}; /* size: 0x0014 */

struct DpvsDynamicCellCmd_Individual
{
  /* 0x0000 */ const struct DpvsPlane* planes;
  /* 0x0004 */ unsigned int cellIndex;
  /* 0x0008 */ unsigned short viewIndex;
  /* 0x000a */ unsigned char planeCount;
  /* 0x000b */ unsigned char frustumPlaneCount;
}; /* size: 0x000c */

struct DpvsDynamicCellCmd
{
  /* 0x0000 */ unsigned int numBatches;
  /* 0x0004 */ struct DpvsDynamicCellCmd_Individual batches[6];
}; /* size: 0x004c */

struct DiskSmodelLightmapVColor
{
  /* 0x0000 */ unsigned char r;
  /* 0x0001 */ unsigned char g;
  /* 0x0002 */ unsigned char b;
  /* 0x0003 */ unsigned char a;
}; /* size: 0x0004 */

typedef struct _cpinfo
{
  /* 0x0000 */ unsigned int MaxCharSize;
  /* 0x0004 */ unsigned char DefaultChar[2];
  /* 0x0006 */ unsigned char LeadByte[12];
  /* 0x0012 */ char __PADDING__[2];
} cpinfo, *Pcpinfo; /* size: 0x0014 */

struct jpeg_comp_master
{
  /* 0x0000 */ void* prepare_for_pass /* function */;
  /* 0x0004 */ void* pass_startup /* function */;
  /* 0x0008 */ void* finish_pass /* function */;
  /* 0x000c */ unsigned char call_pass_startup;
  /* 0x000d */ unsigned char is_last_pass;
  /* 0x000e */ char __PADDING__[2];
}; /* size: 0x0010 */

class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >
{
}; /* size: 0x0004 */

struct std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >,bool>
{
  /* 0x0000 */ class std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > > first;
  /* 0x0004 */ BOOL second;
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

struct GfxSModelDrawSurfData
{
  /* 0x0000 */ struct GfxDelayedCmdBuf delayedCmdBuf;
  /* 0x0010 */ struct GfxDrawSurfList drawSurfList;
}; /* size: 0x0018 */

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned int const ,ID3D11BlendState *>,int,std::pair<unsigned int const ,ID3D11BlendState *> const *,std::pair<unsigned int const ,ID3D11BlendState *> const &,std::_Iterator_base0>
{
}; /* size: 0x0001 */

struct GfxSModelDrawSurfLightingData
{
  /* 0x0000 */ struct GfxDelayedCmdBuf delayedCmdBuf;
  /* 0x0010 */ struct GfxDrawSurfList drawSurf[10];
}; /* size: 0x0060 */

class std::__non_rtti_object
{
}; /* size: 0x000c */

struct GfxStaticModelId
{
  /* 0x0000 */ unsigned short surfType;
  /* 0x0002 */ unsigned short objectId;
}; /* size: 0x0004 */

struct GfxDrawConsts
{
  /* 0x0000 */ union vec4_t outdoorLookupMatrix[4];
  /* 0x0040 */ struct GfxScaledPlacement identityPlacement;
}; /* size: 0x0060 */

struct XAssetPool<GfxImage,5376>
{
  /* 0x0000 */ union XAssetPoolEntry<GfxImage>* freeHead;
  /* 0x0004 */ union XAssetPoolEntry<GfxImage> entries[5376];
}; /* size: 0x69004 */

struct r_globals_load_t
{
  /* 0x0000 */ int* cullGroupIndices;
  /* 0x0004 */ union vec3_t* portalVerts;
  /* 0x0008 */ struct GfxAabbTree* aabbTrees;
  /* 0x000c */ int aabbTreeCount;
  /* 0x0010 */ int nodeCount;
  /* 0x0014 */ struct mnode_load_t* nodes;
  /* 0x0018 */ int reflectionProbesLoaded;
  /* 0x001c */ int staticModelReflectionProbesLoaded;
  /* 0x0020 */ struct GfxBspLoad load;
  /* 0x02c4 */ struct GfxStaticModelSortModel* sortModels;
}; /* size: 0x02c8 */

class std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >
{
}; /* size: 0x0001 */

struct mnode_load_t
{
  /* 0x0000 */ int cellIndex;
  /* 0x0004 */ int planeIndex;
  /* 0x0008 */ unsigned int children[2];
}; /* size: 0x0010 */

struct GfxStaticModelSortModel
{
  /* 0x0000 */ const struct XModel* model;
}; /* size: 0x0004 */

struct DiskGfxSkyGridVolume
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ union vec3_t lightingOrigin;
  /* 0x0024 */ unsigned short colorsIndex;
  /* 0x0026 */ unsigned char primaryLightIndex;
  /* 0x0027 */ unsigned char visibility;
}; /* size: 0x0028 */

typedef struct _s_HandlerType
{
  /* 0x0000 */ unsigned int adjectives;
  /* 0x0004 */ struct TypeDescriptor* pType;
  /* 0x0008 */ int dispCatchObj;
  /* 0x000c */ void* addressOfHandler;
} s_HandlerType, *Ps_HandlerType; /* size: 0x0010 */

struct ScopedShaderConstantSetUndo
{
  /* 0x0000 */ struct GfxCmdBufSourceState* m_sourceState;
  /* 0x0004 */ struct ShaderConstantSet m_scs;
}; /* size: 0x007c */

struct std::pair<GfxSurface *,GfxSurface *>
{
}; /* size: 0x0008 */

typedef struct _s_FuncInfo
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned int magicNumber : 29; /* bit position: 0 */
    /* 0x0000 */ unsigned int bbtFlags : 3; /* bit position: 29 */
  }; /* bitfield */
  /* 0x0004 */ int maxState;
  /* 0x0008 */ const struct _s_UnwindMapEntry* pUnwindMap;
  /* 0x000c */ unsigned int nTryBlocks;
  /* 0x0010 */ const struct _s_TryBlockMapEntry* pTryBlockMap;
  /* 0x0014 */ unsigned int nIPMapEntries;
  /* 0x0018 */ void* pIPtoStateMap;
  /* 0x001c */ const struct _s_ESTypeList* pESTypeList;
  /* 0x0020 */ int EHFlags;
} s_FuncInfo, *Ps_FuncInfo; /* size: 0x0024 */

class std::bad_typeid
{
}; /* size: 0x000c */

struct GfxCmdResolveComposite
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ void* callback /* function */;
}; /* size: 0x0008 */

struct std::_Pair_base<GfxStaticModelCombinedInst *,GfxStaticModelCombinedInst *>
{
  /* 0x0000 */ struct GfxStaticModelCombinedInst* first;
  /* 0x0004 */ struct GfxStaticModelCombinedInst* second;
}; /* size: 0x0008 */

struct rterrmsgs
{
  /* 0x0000 */ int rterrno;
  /* 0x0004 */ const wchar_t* rterrtxt;
}; /* size: 0x0008 */

struct GfxStaticModelCombinedInst
{
  /* 0x0000 */ struct GfxStaticModelDrawInst smodelDrawInst;
  /* 0x0098 */ struct GfxStaticModelInst smodelInst;
}; /* size: 0x00bc */

struct GfxCmdDrawEmblemLayer
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ const struct Material* material;
  /* 0x0008 */ const struct GfxImage* image;
  /* 0x000c */ float outlineSize;
  /* 0x0010 */ float smoothSize;
  /* 0x0014 */ unsigned char stencilValue;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0015 */ unsigned char stencilWrite : 1; /* bit position: 0 */
      /* 0x0015 */ unsigned char noclip : 1; /* bit position: 1 */
    }; /* bitfield */
  } /* size: 0x0001 */ bits;
  /* 0x0016 */ char Padding_1371[2];
  /* 0x0018 */ struct GfxQuad quad;
}; /* size: 0x006c */

struct std::pair<GfxStaticModelSortModel *,GfxStaticModelSortModel *>
{
}; /* size: 0x0008 */

struct funtab
{
  /* 0x0000 */ unsigned char fnamlen;
  /* 0x0001 */ unsigned char fnam;
  /* 0x0002 */ char Padding_1372[5];
  /* 0x0007 */ unsigned char fuseval;
  /* 0x0008 */ char Padding_1373[5];
  /* 0x000d */ unsigned char fnumarg;
  /* 0x000e */ unsigned char fnumber;
  /* 0x000f */ char __PADDING__[1];
}; /* size: 0x0010 */

class std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >
{
}; /* size: 0x0010 */

struct std::_Pair_base<GfxStaticModelSortModel *,GfxStaticModelSortModel *>
{
  /* 0x0000 */ struct GfxStaticModelSortModel* first;
  /* 0x0004 */ struct GfxStaticModelSortModel* second;
}; /* size: 0x0008 */

class Replicator
{
  /* 0x0000 */ int index;
  /* 0x0004 */ class DName* dNameBuffer[10];
}; /* size: 0x002c */

struct DiskGfxCell_Version21
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ unsigned short aabbTreeIndex[2];
  /* 0x001c */ int firstPortal;
  /* 0x0020 */ int portalCount;
  /* 0x0024 */ int firstCullGroup;
  /* 0x0028 */ int cullGroupCount;
}; /* size: 0x002c */

struct GfxPackedWorldVertex
{
  /* 0x0000 */ union vec3_t xyz;
  /* 0x000c */ float binormalSign;
  /* 0x0010 */ union GfxColor color;
  /* 0x0014 */ union PackedTexCoords texCoord;
  /* 0x0018 */ union PackedUnitVec normal;
  /* 0x001c */ union PackedUnitVec tangent;
  /* 0x0020 */ union PackedLmapCoords lmapCoord;
}; /* size: 0x0024 */

class stdext::bad_exception
{
}; /* size: 0x0008 */

class stdext::bad_alloc
{
}; /* size: 0x0008 */

class pDNameNode
{
  /* 0x0000 */ long Padding_1374;
  /* 0x0004 */ class DName* me;
}; /* size: 0x0008 */

struct DiskGfxAabbTree
{
  /* 0x0000 */ unsigned int firstSurface;
  /* 0x0004 */ unsigned int surfaceCount;
  /* 0x0008 */ unsigned int childCount;
}; /* size: 0x000c */

struct DiskGfxCell_Version14
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ int aabbTreeIndex;
  /* 0x001c */ int firstPortal;
  /* 0x0020 */ int portalCount;
  /* 0x0024 */ int firstCullGroup;
  /* 0x0028 */ int cullGroupCount;
  /* 0x002c */ int unused0;
  /* 0x0030 */ int unused1;
}; /* size: 0x0034 */

struct DiskGfxOutdoorBounds
{
  /* 0x0000 */ union vec3_t bounds[2];
}; /* size: 0x0018 */

struct DiskLightingInfo
{
  /* 0x0000 */ unsigned int lightingFlags;
  /* 0x0004 */ int lightingQuality;
}; /* size: 0x0008 */

struct DiskTriangleSoup_Version8
{
  /* 0x0000 */ unsigned short materialIndex;
  /* 0x0002 */ unsigned char lightmapIndex;
  /* 0x0003 */ unsigned char reflectionProbeIndex;
  /* 0x0004 */ int firstVertex;
  /* 0x0008 */ unsigned short vertexCount;
  /* 0x000a */ unsigned short indexCount;
  /* 0x000c */ int firstIndex;
}; /* size: 0x0010 */

struct ShadowGlobals
{
  /* 0x0000 */ const struct MaterialTechnique* defaultShadowCasterTechnique;
}; /* size: 0x0004 */

struct DiskGfxWorldFogVolume
{
  /* 0x0000 */ unsigned int control;
  /* 0x0004 */ short boundsXmin;
  /* 0x0006 */ short boundsYmin;
  /* 0x0008 */ short boundsZmin;
  /* 0x000a */ short boundsXmax;
  /* 0x000c */ short boundsYmax;
  /* 0x000e */ short boundsZmax;
  /* 0x0010 */ float fogTransitionTime;
  /* 0x0014 */ float baseDist;
  /* 0x0018 */ float halfDist;
  /* 0x001c */ float baseHeight;
  /* 0x0020 */ float halfHeight;
  /* 0x0024 */ float sunFogPitch;
  /* 0x0028 */ float sunFogYaw;
  /* 0x002c */ float sunFogInner;
  /* 0x0030 */ float sunFogOuter;
  /* 0x0034 */ union vec3_t fogColor;
  /* 0x0040 */ float fogOpacity;
  /* 0x0044 */ union vec3_t sunFogColor;
  /* 0x0050 */ float sunFogOpacity;
  /* 0x0054 */ unsigned int controlEx;
  /* 0x0058 */ unsigned int priority;
  /* 0x005c */ union vec3_t source;
  /* 0x0068 */ float inner;
  /* 0x006c */ union vec3_t direction;
  /* 0x0078 */ float outer;
  /* 0x007c */ float fovInner;
  /* 0x0080 */ float fovOuter;
}; /* size: 0x0084 */

struct DiskGfxReflectionProbeVolumeData
{
  /* 0x0000 */ union vec4_t volumePlanes[6];
}; /* size: 0x0060 */

struct DiskGfxReflectionProbe
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ unsigned char pixels[131232];
  /* 0x200ac */ struct DiskGfxReflectionProbeVolumeData probeVolumes[16];
  /* 0x206ac */ unsigned int probeVolumeCount;
  /* 0x206b0 */ union vec3_t lightingSH[9];
  /* 0x2071c */ char name[64];
}; /* size: 0x2075c */

struct IDirectDrawPalette
{
}; /* size: 0x0004 */

struct DiskHeroOnlyLight
{
  /* 0x0000 */ unsigned char type;
  /* 0x0001 */ unsigned char unused[3];
  /* 0x0004 */ union vec3_t color;
  /* 0x0010 */ union vec3_t dir;
  /* 0x001c */ union vec3_t origin;
  /* 0x0028 */ float radius;
  /* 0x002c */ float cosHalfFovOuter;
  /* 0x0030 */ float cosHalfFovInner;
  /* 0x0034 */ int exponent;
}; /* size: 0x0038 */

struct DiskGfxOccluder
{
  /* 0x0000 */ char name[16];
  /* 0x0010 */ union vec3_t pts[4];
}; /* size: 0x0040 */

struct IDirectDraw
{
}; /* size: 0x0004 */

struct DiskLightRegionHull
{
  /* 0x0000 */ float kdopMidPoint[9];
  /* 0x0024 */ float kdopHalfSize[9];
  /* 0x0048 */ unsigned int axisCount;
}; /* size: 0x004c */

struct tagUSEROBJECTFLAGS
{
  /* 0x0000 */ int fInherit;
  /* 0x0004 */ int fReserved;
  /* 0x0008 */ unsigned long dwFlags;
}; /* size: 0x000c */

class std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >
{
}; /* size: 0x0001 */

struct DiskGfxLightCorona
{
  /* 0x0000 */ union vec3_t origin;
  /* 0x000c */ float radius;
  /* 0x0010 */ union vec3_t color;
  /* 0x001c */ float intensity;
}; /* size: 0x0020 */

struct DiskGfxWorldFogModifierVolume
{
  /* 0x0000 */ unsigned int control;
  /* 0x0004 */ short boundsXmin;
  /* 0x0006 */ short boundsYmin;
  /* 0x0008 */ short boundsZmin;
  /* 0x000a */ short boundsXmax;
  /* 0x000c */ short boundsYmax;
  /* 0x000e */ short boundsZmax;
  /* 0x0010 */ unsigned int controlEx;
  /* 0x0014 */ float transitionTime;
  /* 0x0018 */ float depthScale;
  /* 0x001c */ float heightScale;
  /* 0x0020 */ union vec4_t colorAdjust;
  /* 0x0030 */ unsigned int priority;
}; /* size: 0x0034 */

struct r_lightmapGroup_t
{
  /* 0x0000 */ int wideCount;
  /* 0x0004 */ int highCount;
}; /* size: 0x0008 */

struct ModelList
{
  /* 0x0000 */ int count;
  /* 0x0004 */ struct XModel* sorted[2048];
}; /* size: 0x2004 */

struct GfxLightGridHeader
{
  /* 0x0000 */ unsigned short mins[3];
  /* 0x0006 */ unsigned short maxs[3];
  /* 0x000c */ unsigned int rowAxis;
  /* 0x0010 */ unsigned int colAxis;
  /* 0x0014 */ unsigned short rowDataStart[8192];
}; /* size: 0x4014 */

struct ImageList
{
  /* 0x0000 */ unsigned int count;
  /* 0x0004 */ struct GfxImage* image[5376];
}; /* size: 0x5404 */

struct DiskGfxPortal
{
  /* 0x0000 */ int planeIndex;
  /* 0x0004 */ int cellIndex;
  /* 0x0008 */ int firstPortalVertex;
  /* 0x000c */ int portalVertexCount;
}; /* size: 0x0010 */

typedef struct _INPUT_RECORD
{
  /* 0x0000 */ unsigned short EventType;
  /* 0x0002 */ char Padding_1375[2];
  union
  {
    union
    {
      /* 0x0004 */ struct _KEY_EVENT_RECORD KeyEvent;
      /* 0x0004 */ struct _MOUSE_EVENT_RECORD MouseEvent;
      /* 0x0004 */ struct _WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
      /* 0x0004 */ struct _MENU_EVENT_RECORD MenuEvent;
      /* 0x0004 */ struct _FOCUS_EVENT_RECORD FocusEvent;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ Event;
} INPUT_RECORD, *PINPUT_RECORD; /* size: 0x0014 */

struct DiskGfxExposureVolume
{
  /* 0x0000 */ unsigned int control;
  /* 0x0004 */ short boundsXmin;
  /* 0x0006 */ short boundsYmin;
  /* 0x0008 */ short boundsZmin;
  /* 0x000a */ short boundsXmax;
  /* 0x000c */ short boundsYmax;
  /* 0x000e */ short boundsZmax;
  /* 0x0010 */ float exposure;
  /* 0x0014 */ float luminanceIncreaseScale;
  /* 0x0018 */ float luminanceDecreaseScale;
  /* 0x001c */ float featherRange;
  /* 0x0020 */ float featherAdjust;
  /* 0x0024 */ union vec4_t boundingSphere;
  /* 0x0034 */ unsigned int controlEx;
  /* 0x0038 */ unsigned int priority;
  /* 0x003c */ union vec3_t source;
  /* 0x0048 */ float inner;
  /* 0x004c */ union vec3_t direction;
  /* 0x0058 */ float outer;
  /* 0x005c */ float fovInner;
  /* 0x0060 */ float fovOuter;
}; /* size: 0x0064 */

struct DiskLightRegion
{
  /* 0x0000 */ unsigned char hullCount;
}; /* size: 0x0001 */

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >,bool>
{
}; /* size: 0x0008 */

struct DiskLightRegionAxis
{
  /* 0x0000 */ union vec3_t dir;
  /* 0x000c */ float midPoint;
  /* 0x0010 */ float halfSize;
}; /* size: 0x0014 */

struct DiskGfxShadowMapVolume
{
  /* 0x0000 */ unsigned int control;
  /* 0x0004 */ short boundsXmin;
  /* 0x0006 */ short boundsYmin;
  /* 0x0008 */ short boundsZmin;
  /* 0x000a */ short boundsXmax;
  /* 0x000c */ short boundsYmax;
  /* 0x000e */ short boundsZmax;
  /* 0x0010 */ unsigned int controlEx;
  /* 0x0014 */ unsigned int primaryLightTarget;
  /* 0x0018 */ unsigned int paddingforlater[2];
  /* 0x0020 */ unsigned int priority;
}; /* size: 0x0024 */

struct DiskTriangleSoup_Version12
{
  /* 0x0000 */ unsigned short materialIndex;
  /* 0x0002 */ unsigned char lightmapIndex;
  /* 0x0003 */ unsigned char reflectionProbeIndex;
  /* 0x0004 */ int vertexLayerData;
  /* 0x0008 */ int firstVertex;
  /* 0x000c */ unsigned short vertexCount;
  /* 0x000e */ unsigned short indexCount;
  /* 0x0010 */ int firstIndex;
}; /* size: 0x0014 */

struct std::less<unsigned __int64>
{
}; /* size: 0x0001 */

class std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0>
{
  /* 0x0000 */ struct std::less<unsigned __int64> comp;
}; /* size: 0x0001 */

struct DiskGfxStaticModelData
{
  /* 0x0000 */ unsigned int smid;
  /* 0x0004 */ union vec3_t lightingOrigin;
  /* 0x0010 */ unsigned short colorsIndex;
  /* 0x0012 */ unsigned char primaryLightIndex;
  /* 0x0013 */ unsigned char visibility;
  /* 0x0014 */ unsigned short lightmapUVIndex;
  /* 0x0016 */ char __PADDING__[2];
}; /* size: 0x0018 */

struct DiskGfxCell
{
  /* 0x0000 */ union vec3_t mins;
  /* 0x000c */ union vec3_t maxs;
  /* 0x0018 */ unsigned short aabbTreeIndex;
  /* 0x001a */ char Padding_1376[2];
  /* 0x001c */ int firstPortal;
  /* 0x0020 */ int portalCount;
  /* 0x0024 */ int firstCullGroup;
  /* 0x0028 */ int cullGroupCount;
  /* 0x002c */ unsigned char reflectionProbeCount;
  /* 0x002d */ unsigned char reflectionProbes[64];
  /* 0x006d */ char __PADDING__[3];
}; /* size: 0x0070 */

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > > >;

class std::map<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> > >
{
}; /* size: 0x0010 */

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > > >;

class std::map<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> > >
{
}; /* size: 0x0010 */

class DName
{
  /* 0x0000 */ class DNameNode* node;
  struct /* bitfield */
  {
    /* 0x0004 */ enum DNameStatus stat : 8; /* bit position: 0 */
    /* 0x0004 */ unsigned int isIndir : 1; /* bit position: 8 */
    /* 0x0004 */ unsigned int isAUDC : 1; /* bit position: 9 */
    /* 0x0004 */ unsigned int isAUDTThunk : 1; /* bit position: 10 */
    /* 0x0004 */ unsigned int isArrayType : 1; /* bit position: 11 */
    /* 0x0004 */ unsigned int NoTE : 1; /* bit position: 12 */
    /* 0x0004 */ unsigned int pinPtr : 1; /* bit position: 13 */
    /* 0x0004 */ unsigned int comArray : 1; /* bit position: 14 */
    /* 0x0004 */ unsigned int vcallThunk : 1; /* bit position: 15 */
  }; /* bitfield */
}; /* size: 0x0008 */

class std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >
{
}; /* size: 0x0010 */

struct GfxBuffers
{
  /* 0x0000 */ struct GfxIndexBufferState dynamicIndexBufferPool[2];
  /* 0x0020 */ struct GfxVertexBufferState skinnedCacheVbPool[2];
  /* 0x0040 */ unsigned char* skinnedCacheLockAddr;
  /* 0x0044 */ struct GfxVertexBufferState dynamicVertexBufferPool[2];
  /* 0x0064 */ struct ID3D11Buffer* particleCloudVertexBuffer;
  /* 0x0068 */ struct ID3D11Buffer* particleCloudIndexBuffer;
  /* 0x006c */ int dynamicBufferFrame;
}; /* size: 0x0070 */

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > > >;

struct GfxParticleCloudVertex
{
  /* 0x0000 */ short xyz[3];
  /* 0x0006 */ short corner;
}; /* size: 0x0008 */

struct GfxDynamicIndices
{
  /* 0x0000 */ volatile long used;
  /* 0x0004 */ int total;
  /* 0x0008 */ struct ID3D11Buffer* buffer;
  /* 0x000c */ unsigned short* indices;
}; /* size: 0x0010 */

struct CinematicFlagsFields
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned short initialized : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned short usingAlpha : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned short openPending : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned short opened : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned short isPreloading : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned short underrun : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned short active : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned short finishedNaturally : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned short pathInitialized : 1; /* bit position: 8 */
  }; /* bitfield */
  /* 0x0002 */ unsigned short padding : 9; /* bit position: 0 */
}; /* size: 0x0004 */

union CinematicFlags
{
  union
  {
    /* 0x0000 */ struct CinematicFlagsFields fields;
    /* 0x0000 */ unsigned short packed;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct CinematicInfo
{
  /* 0x0000 */ int id;
  /* 0x0004 */ void* movieHandle;
  /* 0x0008 */ char name[512];
  /* 0x0208 */ float playbackVolume;
  /* 0x020c */ struct CIN_CALLBACK_INFO callbackInfo;
  /* 0x0218 */ unsigned int playbackFlags;
  /* 0x021c */ union CinematicFlags commonflags;
  /* 0x0220 */ unsigned int currentPaused;
  /* 0x0224 */ unsigned int targetPaused;
  /* 0x0228 */ int soundId;
  /* 0x022c */ int nextSoundId;
  /* 0x0230 */ BOOL checkForNextSound;
  /* 0x0231 */ char soundAlias[256];
  /* 0x0331 */ char Padding_1377[3];
  /* 0x0334 */ struct MoviePlayerFunctions* moviePlayer;
  /* 0x0338 */ int getPathStreamId;
}; /* size: 0x033c */

struct AsyncOpenData
{
  /* 0x0000 */ char localCinematicName[512];
  /* 0x0200 */ unsigned int localFlags;
  /* 0x0204 */ BOOL isNextBink;
  /* 0x0205 */ char Padding_1378[3];
  /* 0x0208 */ void* outMovieHandle;
}; /* size: 0x020c */

struct CinematicGlob
{
  /* 0x0000 */ struct CinematicInfo current;
  /* 0x033c */ struct CinematicInfo queue[6];
  /* 0x16a4 */ int numQueued;
  /* 0x16a8 */ int nextReservedId;
  /* 0x16ac */ int nextNormalId;
  /* 0x16b0 */ int openRequestId;
  /* 0x16b4 */ int nextOpenRequestId;
  /* 0x16b8 */ int framesStopped;
  /* 0x16bc */ void* memPool;
  /* 0x16c0 */ void* ds;
  /* 0x16c4 */ struct AsyncOpenData asyncOpenData;
  /* 0x18d0 */ int lastTime;
  /* 0x18d4 */ int gap[8];
  /* 0x18f4 */ int gptr;
  /* 0x18f8 */ int soundEndTimeMs;
  /* 0x18fc */ int soundTimeMs;
  /* 0x1900 */ int movieTimeMs;
  /* 0x1904 */ int timeCalcTimeMs;
  /* 0x1908 */ void* masterBufferBase;
  /* 0x190c */ unsigned int bytesAllocated;
  /* 0x1910 */ void* activeMovie;
  /* 0x1914 */ void* nextSeamlessMovie;
}; /* size: 0x1918 */

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node>
{
}; /* size: 0x0001 */

struct MoviePlayerFunctions
{
  /* 0x0000 */ void* InitMemory /* function */;
  /* 0x0004 */ void* UpdateMoviesAndImages /* function */;
  /* 0x0008 */ void* ForceRelinquishIO /* function */;
  /* 0x000c */ void* Destroy /* function */;
  /* 0x0010 */ void* OpenPath /* function */;
  /* 0x0014 */ void* OpenFromFastfile /* function */;
  /* 0x0018 */ void* StartPlayback /* function */;
  /* 0x001c */ void* StopPlayback /* function */;
  /* 0x0020 */ void* SetPaused /* function */;
  /* 0x0024 */ void* GetTimeRemaining /* function */;
  /* 0x0028 */ void* GetTimeElapsed /* function */;
  /* 0x002c */ void* SetMovieClock /* function */;
  /* 0x0030 */ void* SetVolume /* function */;
  /* 0x0034 */ void* IsUnderrun /* function */;
  /* 0x0038 */ void* IsReadyToStart /* function */;
  /* 0x003c */ void* GetMaxTextureBytesNeeded /* function */;
  /* 0x0040 */ void* GetMainBytesNeeded /* function */;
  /* 0x0044 */ void* GetLastError /* function */;
}; /* size: 0x0048 */

struct CodeSamplerSource
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ enum MaterialTextureSource source;
  /* 0x0008 */ const struct CodeSamplerSource* subtable;
  /* 0x000c */ int arrayCount;
  /* 0x0010 */ int arrayStride;
}; /* size: 0x0014 */

struct GfxCmdDrawUITriangles
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ const struct Material* material;
  /* 0x0008 */ short triCount;
  /* 0x000a */ unsigned char stencilValue;
  struct
  {
    struct /* bitfield */
    {
      /* 0x000b */ unsigned char stencilWrite : 1; /* bit position: 0 */
      /* 0x000b */ unsigned char noclip : 1; /* bit position: 1 */
    }; /* bitfield */
  } /* size: 0x0001 */ bits;
}; /* size: 0x000c */

typedef struct _FP80
{
  /* 0x0000 */ unsigned short W[5];
} FP80, *PFP80; /* size: 0x000a */

typedef struct _FP128
{
  /* 0x0000 */ unsigned long W[4];
} FP128, *PFP128; /* size: 0x0010 */

typedef struct _I64
{
  /* 0x0000 */ unsigned long W[2];
} I64, *PI64; /* size: 0x0008 */

typedef struct _U64
{
  /* 0x0000 */ unsigned long W[2];
} U64, *PU64; /* size: 0x0008 */

typedef struct _BCD80
{
  /* 0x0000 */ unsigned short W[5];
} BCD80, *PBCD80; /* size: 0x000a */

typedef struct _U32ARRAY
{
  /* 0x0000 */ unsigned long W[4];
} U32ARRAY, *PU32ARRAY; /* size: 0x0010 */

typedef struct _FPQ64
{
  /* 0x0000 */ __int64 W[2];
} FPQ64, *PFPQ64; /* size: 0x0010 */

typedef struct _FPIEEE_EXCEPTION_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned int Inexact : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned int Underflow : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned int Overflow : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned int ZeroDivide : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned int InvalidOperation : 1; /* bit position: 4 */
  }; /* bitfield */
} FPIEEE_EXCEPTION_FLAGS, *PFPIEEE_EXCEPTION_FLAGS; /* size: 0x0004 */

struct GfxCmdDrawQuadList2D
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ const struct Material* material;
  /* 0x0008 */ int quadCount;
}; /* size: 0x000c */

typedef struct _s_CatchableType
{
  /* 0x0000 */ unsigned int properties;
  /* 0x0004 */ struct TypeDescriptor* pType;
  /* 0x0008 */ struct PMD thisDisplacement;
  /* 0x0014 */ int sizeOrOffset;
  /* 0x0018 */ void* copyFunction /* function */;
} s_CatchableType, *Ps_CatchableType; /* size: 0x001c */

typedef union _dbl
{
  union
  {
    /* 0x0000 */ long lng[2];
    /* 0x0000 */ double dbl;
  }; /* size: 0x0008 */
} dbl, *Pdbl; /* size: 0x0008 */

typedef struct _FILEX
{
  /* 0x0000 */ struct _iobuf f;
  /* 0x0020 */ struct _RTL_CRITICAL_SECTION lock;
} FILEX, *PFILEX; /* size: 0x0038 */

struct std::binary_function<unsigned __int64,unsigned __int64,bool>
{
}; /* size: 0x0001 */

struct MovieSpecificInfo
{
  /* 0x0000 */ struct BINK* bink;
  /* 0x0004 */ unsigned int binkIOSize;
  /* 0x0008 */ unsigned int playbackFlags;
  /* 0x000c */ float playbackVolume;
  /* 0x0010 */ BOOL started;
  /* 0x0011 */ BOOL paused;
  /* 0x0012 */ BOOL useAltBinkHunk;
  /* 0x0013 */ char __PADDING__[1];
}; /* size: 0x0014 */

struct CinematicTextureSet
{
  /* 0x0000 */ struct GfxImage drawImageY;
  /* 0x0050 */ struct GfxImage drawImageCr;
  /* 0x00a0 */ struct GfxImage drawImageCb;
  /* 0x00f0 */ struct GfxImage drawImageA;
}; /* size: 0x0140 */

struct CinematicHunk
{
  /* 0x0000 */ void* base;
  /* 0x0004 */ void* atFront;
  /* 0x0008 */ void* atBack;
  /* 0x000c */ void* end;
  /* 0x0010 */ void* lastAllocPtr;
  /* 0x0014 */ BOOL fragmented;
  /* 0x0015 */ char __PADDING__[3];
}; /* size: 0x0018 */

struct CinematicGlob_Bink
{
  /* 0x0000 */ int readRequestId;
  /* 0x0004 */ struct MovieSpecificInfo current;
  /* 0x0018 */ struct MovieSpecificInfo next;
  /* 0x002c */ long Padding_1379;
  /* 0x0030 */ struct BINKTEXTURESET binkTextureSet;
  /* 0x0120 */ struct CinematicTextureSet textureSet;
  /* 0x0260 */ int activeImageFrame;
  /* 0x0264 */ struct CinematicHunk masterHunk;
  /* 0x027c */ struct CinematicHunk binkHunk;
  /* 0x0294 */ struct CinematicHunk altBinkHunk;
  /* 0x02ac */ BOOL altBinkHunkAlloced;
  /* 0x02ad */ BOOL nextBinkShouldUseAlt;
  /* 0x02ae */ char Padding_1380[2];
  /* 0x02b0 */ int asyncThreadIndex;
  /* 0x02b4 */ float framesPerMs;
  /* 0x02b8 */ float timeInMsec;
  /* 0x02bc */ int lastUnpauseMovieTime;
  /* 0x02c0 */ int lastUnpauseSysTime;
  /* 0x02c4 */ float lastSeamlessBinkTimeMs;
  /* 0x02c8 */ long __PADDING__[2];
}; /* size: 0x02d0 */

struct std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > > >;

typedef struct _XCPT_ACTION
{
  /* 0x0000 */ unsigned long XcptNum;
  /* 0x0004 */ int SigNum;
  /* 0x0008 */ void* XcptAction /* function */;
} XCPT_ACTION, *PXCPT_ACTION; /* size: 0x000c */

struct BINKRECT
{
  /* 0x0000 */ int Left;
  /* 0x0004 */ int Top;
  /* 0x0008 */ int Width;
  /* 0x000c */ int Height;
}; /* size: 0x0010 */

struct BUNDLEPOINTERS
{
  /* 0x0000 */ void* typeptr;
  /* 0x0004 */ void* type16ptr;
  /* 0x0008 */ void* colorptr;
  /* 0x000c */ void* bits2ptr;
  /* 0x0010 */ void* motionXptr;
  /* 0x0014 */ void* motionYptr;
  /* 0x0018 */ void* dctptr;
  /* 0x001c */ void* mdctptr;
  /* 0x0020 */ void* patptr;
}; /* size: 0x0024 */

struct BINKIO
{
  /* 0x0000 */ void* ReadHeader /* function */;
  /* 0x0004 */ void* ReadFrame /* function */;
  /* 0x0008 */ void* GetBufferSize /* function */;
  /* 0x000c */ void* SetInfo /* function */;
  /* 0x0010 */ void* Idle /* function */;
  /* 0x0014 */ void* Close /* function */;
  /* 0x0018 */ void* BGControl /* function */;
  /* 0x001c */ struct BINK* bink;
  /* 0x0020 */ void* suspend_callback /* function */;
  /* 0x0024 */ void* try_suspend_callback /* function */;
  /* 0x0028 */ void* resume_callback /* function */;
  /* 0x002c */ void* idle_on_callback /* function */;
  /* 0x0030 */ void* simulate_callback /* function */;
  /* 0x0034 */ void* timer_callback /* function */;
  /* 0x0038 */ void* flipendian_callback /* function */;
  /* 0x003c */ void* lockedadd_callback /* function */;
  /* 0x0040 */ volatile unsigned int ReadError;
  /* 0x0044 */ volatile unsigned int DoingARead;
  /* 0x0048 */ volatile unsigned int BytesRead;
  /* 0x004c */ volatile unsigned int Working;
  /* 0x0050 */ volatile unsigned int TotalTime;
  /* 0x0054 */ volatile unsigned int ForegroundTime;
  /* 0x0058 */ volatile unsigned int IdleTime;
  /* 0x005c */ volatile unsigned int ThreadTime;
  /* 0x0060 */ volatile unsigned int BufSize;
  /* 0x0064 */ volatile unsigned int BufHighUsed;
  /* 0x0068 */ volatile unsigned int CurBufSize;
  /* 0x006c */ volatile unsigned int CurBufUsed;
  /* 0x0070 */ volatile unsigned int Suspended;
  /* 0x0074 */ unsigned int align[3];
  /* 0x0080 */ volatile unsigned char iodata[160];
}; /* size: 0x0120 */

struct BINK
{
  /* 0x0000 */ unsigned int Width;
  /* 0x0004 */ unsigned int Height;
  /* 0x0008 */ unsigned int Frames;
  /* 0x000c */ unsigned int FrameNum;
  /* 0x0010 */ unsigned int LastFrameNum;
  /* 0x0014 */ unsigned int FrameRate;
  /* 0x0018 */ unsigned int FrameRateDiv;
  /* 0x001c */ unsigned int ReadError;
  /* 0x0020 */ unsigned int OpenFlags;
  /* 0x0024 */ unsigned int BinkType;
  /* 0x0028 */ unsigned int Size;
  /* 0x002c */ unsigned int FrameSize;
  /* 0x0030 */ unsigned int SndSize;
  /* 0x0034 */ unsigned int FrameChangePercent;
  /* 0x0038 */ int NumTracks;
  /* 0x003c */ int NumRects;
  /* 0x0040 */ struct BINKRECT FrameRects[8];
  /* 0x00c0 */ unsigned __int64 FileOffset;
  /* 0x00c8 */ unsigned int Highest1SecRate;
  /* 0x00cc */ unsigned int Highest1SecFrame;
  /* 0x00d0 */ struct BINKFRAMEBUFFERS* FrameBuffers;
  /* 0x00d4 */ void* MaskPlane;
  /* 0x00d8 */ void* AsyncMaskPlane;
  /* 0x00dc */ void* InUseMaskPlane;
  /* 0x00e0 */ void* LastMaskPlane;
  /* 0x00e4 */ struct BINK* next_bink;
  /* 0x00e8 */ void* compframe;
  /* 0x00ec */ int* trackindexes;
  /* 0x00f0 */ unsigned int MaskPitch;
  /* 0x00f4 */ unsigned int MaskLength;
  /* 0x00f8 */ unsigned int LargestFrameSize;
  /* 0x00fc */ unsigned int InternalFrames;
  /* 0x0100 */ int async_in_progress[2];
  /* 0x0108 */ int Paused;
  /* 0x010c */ unsigned int skippedlastblit;
  /* 0x0110 */ unsigned int soundon;
  /* 0x0114 */ unsigned int videoon;
  /* 0x0118 */ unsigned int needio;
  /* 0x011c */ unsigned int compframesize;
  /* 0x0120 */ unsigned int compframekey;
  /* 0x0124 */ unsigned int playingtracks;
  /* 0x0128 */ unsigned int changepercent;
  /* 0x012c */ int closing;
  /* 0x0130 */ struct BUNDLEPOINTERS bunp;
  /* 0x0154 */ struct BINKSND* bsnd;
  /* 0x0158 */ unsigned int* frameoffsets;
  /* 0x015c */ void* binkaudiomem;
  /* 0x0160 */ unsigned int bink_unique;
  /* 0x0164 */ int in_bink_list;
  /* 0x0168 */ unsigned int decompwidth;
  /* 0x016c */ unsigned int decompheight;
  /* 0x0170 */ unsigned int* tracksizes;
  /* 0x0174 */ unsigned int* tracktypes;
  /* 0x0178 */ int* trackIDs;
  /* 0x017c */ void* preloadptr;
  /* 0x0180 */ int simulate;
  /* 0x0184 */ int adjustsim;
  /* 0x0188 */ unsigned int compframeoffset;
  /* 0x018c */ unsigned int compframenum;
  /* 0x0190 */ struct BINKIO bio;
  /* 0x02b0 */ unsigned char pri_io_mutex[128];
  /* 0x0330 */ unsigned char io_mutex[128];
  /* 0x03b0 */ unsigned char snd_mutex[128];
  /* 0x0430 */ unsigned char* ioptr;
  /* 0x0434 */ unsigned int* rtframetimes;
  /* 0x0438 */ unsigned int* rtadecomptimes;
  /* 0x043c */ unsigned int* rtvdecomptimes;
  /* 0x0440 */ unsigned int* rtblittimes;
  /* 0x0444 */ unsigned int* rtreadtimes;
  /* 0x0448 */ unsigned int* rtidlereadtimes;
  /* 0x044c */ unsigned int* rtthreadreadtimes;
  /* 0x0450 */ unsigned int runtimeframes;
  /* 0x0454 */ int rtindex;
  /* 0x0458 */ unsigned int iosize;
  /* 0x045c */ unsigned int numrects;
  /* 0x0460 */ unsigned int playedframes;
  /* 0x0464 */ unsigned int firstframetime;
  /* 0x0468 */ unsigned int totalmem;
  /* 0x046c */ unsigned int soundskips;
  /* 0x0470 */ unsigned int startblittime;
  /* 0x0474 */ unsigned int startsynctime;
  /* 0x0478 */ unsigned int startsyncframe;
  /* 0x047c */ unsigned int twoframestime;
  /* 0x0480 */ unsigned int slowestframetime;
  /* 0x0484 */ unsigned int slowestframe;
  /* 0x0488 */ unsigned int slowest2frametime;
  /* 0x048c */ unsigned int slowest2frame;
  /* 0x0490 */ unsigned int timevdecomp;
  /* 0x0494 */ unsigned int timeadecomp;
  /* 0x0498 */ unsigned int timeblit;
  /* 0x049c */ unsigned int timeopen;
  /* 0x04a0 */ unsigned int fileframerate;
  /* 0x04a4 */ unsigned int fileframeratediv;
  /* 0x04a8 */ unsigned int lastblitflags;
  /* 0x04ac */ unsigned int lastdecompframe;
  /* 0x04b0 */ unsigned int lastfinisheddoframe;
  /* 0x04b4 */ unsigned int lastresynctime;
  /* 0x04b8 */ unsigned int doresync;
  /* 0x04bc */ unsigned int skipped_status_this_frame;
  /* 0x04c0 */ unsigned int very_delayed;
  /* 0x04c4 */ unsigned int skippedblits;
  /* 0x04c8 */ unsigned int skipped_in_a_row;
  /* 0x04cc */ unsigned int paused_sync_diff;
  /* 0x04d0 */ unsigned int last_time_almost_empty;
  /* 0x04d4 */ int allkeys;
  /* 0x04d8 */ unsigned int lastfileread;
  /* 0x04dc */ unsigned int marker;
  /* 0x04e0 */ void* alloccompframe;
  /* 0x04e4 */ struct BINKFRAMEBUFFERS* allocatedframebuffers;
  /* 0x04e8 */ unsigned int limit_speakers;
  /* 0x04ec */ long __PADDING__[1];
}; /* size: 0x04f0 */

typedef struct _CRT_FLOAT
{
  /* 0x0000 */ float f;
} CRT_FLOAT, *PCRT_FLOAT; /* size: 0x0004 */

struct std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >::rebind<std::pair<unsigned int const ,ID3D11BlendState *> >
{
}; /* size: 0x0001 */

class Sse_SkinVertex_2
{
}; /* size: 0x0001 */

struct std::less<unsigned int>
{
}; /* size: 0x0001 */

typedef class _LocaleUpdate
{
  /* 0x0000 */ struct localeinfo_struct localeinfo;
  /* 0x0008 */ struct _tiddata* ptd;
  /* 0x000c */ BOOL updated;
} LocaleUpdate, *PLocaleUpdate; /* size: 0x0010 */

typedef struct _finddata32_t
{
  /* 0x0000 */ unsigned int attrib;
  /* 0x0004 */ long time_create;
  /* 0x0008 */ long time_access;
  /* 0x000c */ long time_write;
  /* 0x0010 */ unsigned long size;
  /* 0x0014 */ char name[260];
} finddata32_t, *Pfinddata32_t; /* size: 0x0118 */

struct BINKSND
{
  /* 0x0000 */ unsigned char* sndwritepos;
  /* 0x0004 */ unsigned int audiodecompsize;
  /* 0x0008 */ unsigned int sndbufsize;
  /* 0x000c */ unsigned char* sndbuf;
  /* 0x0010 */ unsigned char* sndend;
  /* 0x0014 */ unsigned int sndcomp;
  /* 0x0018 */ unsigned char* sndreadpos;
  /* 0x001c */ unsigned int orig_freq;
  /* 0x0020 */ unsigned int freq;
  /* 0x0024 */ int bits;
  /* 0x0028 */ int chans;
  /* 0x002c */ int BestSizeIn16;
  /* 0x0030 */ unsigned int BestSizeMask;
  /* 0x0034 */ int OnOff;
  /* 0x0038 */ unsigned int Latency;
  /* 0x003c */ unsigned int VideoScale;
  /* 0x0040 */ unsigned int sndendframe;
  /* 0x0044 */ unsigned int sndpad;
  /* 0x0048 */ int sndprime;
  /* 0x004c */ int ThreadServiceType;
  /* 0x0050 */ unsigned int SoundDroppedOut;
  /* 0x0054 */ unsigned int sndconvert8;
  /* 0x0058 */ unsigned char snddata[256];
  /* 0x0158 */ unsigned int align;
  /* 0x015c */ void* Ready /* function */;
  /* 0x0160 */ void* Lock /* function */;
  /* 0x0164 */ void* Unlock /* function */;
  /* 0x0168 */ void* Volume /* function */;
  /* 0x016c */ void* Pan /* function */;
  /* 0x0170 */ void* Pause /* function */;
  /* 0x0174 */ void* SetOnOff /* function */;
  /* 0x0178 */ void* Close /* function */;
  /* 0x017c */ void* SpeakerVols /* function */;
}; /* size: 0x0180 */

struct ScriptableConstant
{
  /* 0x0000 */ unsigned char source;
  /* 0x0001 */ char Padding_1381[3];
  /* 0x0004 */ const char* sourceName;
  /* 0x0008 */ unsigned int sourceNameHash;
}; /* size: 0x000c */

typedef struct _tiddata
{
  /* 0x0000 */ unsigned long _tid;
  /* 0x0004 */ unsigned int _thandle;
  /* 0x0008 */ int _terrno;
  /* 0x000c */ unsigned long _tdoserrno;
  /* 0x0010 */ unsigned int _fpds;
  /* 0x0014 */ unsigned long _holdrand;
  /* 0x0018 */ char* _token;
  /* 0x001c */ unsigned short* _wtoken;
  /* 0x0020 */ unsigned char* _mtoken;
  /* 0x0024 */ char* _errmsg;
  /* 0x0028 */ unsigned short* _werrmsg;
  /* 0x002c */ char* _namebuf0;
  /* 0x0030 */ unsigned short* _wnamebuf0;
  /* 0x0034 */ char* _namebuf1;
  /* 0x0038 */ unsigned short* _wnamebuf1;
  /* 0x003c */ char* _asctimebuf;
  /* 0x0040 */ unsigned short* _wasctimebuf;
  /* 0x0044 */ void* _gmtimebuf;
  /* 0x0048 */ char* _cvtbuf;
  /* 0x004c */ unsigned char _con_ch_buf[5];
  /* 0x0051 */ char Padding_1382;
  /* 0x0052 */ unsigned short _ch_buf_used;
  /* 0x0054 */ void* _initaddr;
  /* 0x0058 */ void* _initarg;
  /* 0x005c */ void* _pxcptacttab;
  /* 0x0060 */ void* _tpxcptinfoptrs;
  /* 0x0064 */ int _tfpecode;
  /* 0x0068 */ struct threadmbcinfostruct* ptmbcinfo;
  /* 0x006c */ struct threadlocaleinfostruct* ptlocinfo;
  /* 0x0070 */ int _ownlocale;
  /* 0x0074 */ unsigned long _NLG_dwCode;
  /* 0x0078 */ void* _terminate;
  /* 0x007c */ void* _unexpected;
  /* 0x0080 */ void* _translator;
  /* 0x0084 */ void* _purecall;
  /* 0x0088 */ void* _curexception;
  /* 0x008c */ void* _curcontext;
  /* 0x0090 */ int _ProcessingThrow;
  /* 0x0094 */ void* _curexcspec;
  /* 0x0098 */ void* _pFrameInfoChain;
  /* 0x009c */ struct setloc_struct _setloc_data;
  /* 0x01f8 */ void* _reserved1;
  /* 0x01fc */ void* _reserved2;
  /* 0x0200 */ void* _reserved3;
  /* 0x0204 */ void* _reserved4;
  /* 0x0208 */ void* _reserved5;
  /* 0x020c */ int _cxxReThrow;
  /* 0x0210 */ unsigned long __initDomain;
} tiddata, *Ptiddata; /* size: 0x0214 */

struct GfxCmdSaveScreenSection
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ float s0;
  /* 0x0008 */ float t0;
  /* 0x000c */ float ds;
  /* 0x0010 */ float dt;
  /* 0x0014 */ int screenTimerId;
}; /* size: 0x0018 */

struct GfxCmdDrawText3D
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ union vec3_t org;
  /* 0x0010 */ struct Font_s* font;
  /* 0x0014 */ union vec3_t xPixelStep;
  /* 0x0020 */ union vec3_t yPixelStep;
  /* 0x002c */ union GfxColor color;
  /* 0x0030 */ char text[4];
}; /* size: 0x0034 */

struct FpFormatDescriptor
{
  /* 0x0000 */ int max_exp;
  /* 0x0004 */ int min_exp;
  /* 0x0008 */ int precision;
  /* 0x000c */ int exp_width;
  /* 0x0010 */ int format_width;
  /* 0x0014 */ int bias;
}; /* size: 0x0018 */

struct GfxCmdSetMaterialColor
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ union vec4_t color;
}; /* size: 0x0014 */

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >,std::_Iterator_base0>
{
  /* 0x0000 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node* _Ptr;
}; /* size: 0x0004 */

class UnDecorator
{
  union
  {
    /* 0x0000 */ class Replicator ArgList;
    struct
    {
      /* 0x0000 */ class Replicator* pArgList;
      /* 0x0004 */ long Padding_1383[10];
      /* 0x002c */ class Replicator ZNameList;
    }; /* size: 0x0030 */
    /* 0x0000 */ class Replicator* pZNameList;
    /* 0x0000 */ class Replicator* pTemplateArgList;
    /* 0x0000 */ const char* gName;
    /* 0x0000 */ const char* name;
    /* 0x0000 */ char* outputString;
    /* 0x0000 */ int maxStringLength;
    /* 0x0000 */ unsigned long disableFlags;
    /* 0x0000 */ BOOL fExplicitTemplateParams;
    /* 0x0000 */ BOOL fGetTemplateArgumentList;
    /* 0x0000 */ void* m_pGetParameter /* function */;
  }; /* size: 0x0030 */
}; /* size: 0x0058 */

class DNameStatusNode
{
  /* 0x0000 */ long Padding_1384;
  /* 0x0004 */ enum DNameStatus me;
  /* 0x0008 */ int myLen;
}; /* size: 0x000c */

struct GfxCmdDrawFullScreenColoredQuad
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ const struct Material* material;
  /* 0x0008 */ float s0;
  /* 0x000c */ float t0;
  /* 0x0010 */ float s1;
  /* 0x0014 */ float t1;
  /* 0x0018 */ union GfxColor color;
}; /* size: 0x001c */

struct DrawSurfListInfoSetup
{
  /* 0x0000 */ int drawlist;
  /* 0x0004 */ int baseTechType;
  /* 0x0008 */ int cameraView;
  /* 0x000c */ int depthHackList;
  /* 0x0010 */ enum OcclusionReportsMode occlusionReportsMode;
}; /* size: 0x0014 */

typedef struct _s_TryBlockMapEntry
{
  /* 0x0000 */ int tryLow;
  /* 0x0004 */ int tryHigh;
  /* 0x0008 */ int catchHigh;
  /* 0x000c */ int nCatches;
  /* 0x0010 */ const struct _s_HandlerType* pHandlerArray;
} s_TryBlockMapEntry, *Ps_TryBlockMapEntry; /* size: 0x0014 */

struct DrawDepthWorkerCmd
{
  /* 0x0000 */ const struct GfxBackEndData* data;
  /* 0x0004 */ struct GfxWorkerData* workerData;
  /* 0x0008 */ struct GfxViewInfo* viewInfo;
  /* 0x000c */ unsigned char cmdBufType;
  /* 0x000d */ char __PADDING__[3];
}; /* size: 0x0010 */

typedef struct _s_UnwindMapEntry
{
  /* 0x0000 */ int toState;
  /* 0x0004 */ void* action /* function */;
} s_UnwindMapEntry, *Ps_UnwindMapEntry; /* size: 0x0008 */

struct GfxCandidateShadowedLight
{
  /* 0x0000 */ unsigned int shadowableLightIndex;
  /* 0x0004 */ float score;
}; /* size: 0x0008 */

struct positional_param
{
  /* 0x0000 */ enum ARG_TYPE arg_type;
  /* 0x0004 */ char* arg_ptr;
  /* 0x0008 */ wchar_t type;
  /* 0x000a */ char Padding_1385[2];
  /* 0x000c */ int flags;
}; /* size: 0x0010 */

struct GfxCmdSaveScreen
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ int screenTimerId;
}; /* size: 0x0008 */

struct _output_s_l::__l83::_count_string;

typedef struct _NT_TIB
{
  /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;
  /* 0x0004 */ void* StackBase;
  /* 0x0008 */ void* StackLimit;
  /* 0x000c */ void* SubSystemTib;
  union
  {
    /* 0x0010 */ void* FiberData;
    /* 0x0010 */ unsigned long Version;
  }; /* size: 0x0004 */
  /* 0x0014 */ void* ArbitraryUserPointer;
  /* 0x0018 */ struct _NT_TIB* Self;
} NT_TIB, *PNT_TIB; /* size: 0x001c */

struct BINKREALTIME
{
  /* 0x0000 */ unsigned int FrameNum;
  /* 0x0004 */ unsigned int FrameRate;
  /* 0x0008 */ unsigned int FrameRateDiv;
  /* 0x000c */ unsigned int Frames;
  /* 0x0010 */ unsigned int FramesTime;
  /* 0x0014 */ unsigned int FramesVideoDecompTime;
  /* 0x0018 */ unsigned int FramesAudioDecompTime;
  /* 0x001c */ unsigned int FramesReadTime;
  /* 0x0020 */ unsigned int FramesIdleReadTime;
  /* 0x0024 */ unsigned int FramesThreadReadTime;
  /* 0x0028 */ unsigned int FramesBlitTime;
  /* 0x002c */ unsigned int ReadBufferSize;
  /* 0x0030 */ unsigned int ReadBufferUsed;
  /* 0x0034 */ unsigned int FramesDataRate;
}; /* size: 0x0038 */

struct GfxAssembledShaderTextFile
{
  /* 0x0000 */ unsigned int srcLine;
  /* 0x0004 */ unsigned int destLine;
  /* 0x0008 */ char fileName[256];
}; /* size: 0x0108 */

struct GfxAssembledShaderText
{
  /* 0x0000 */ char* string;
  /* 0x0004 */ unsigned int used;
  /* 0x0008 */ unsigned int total;
  /* 0x000c */ unsigned int currentDestLine;
  /* 0x0010 */ BOOL overflowed;
  /* 0x0011 */ char Padding_1386[3];
  /* 0x0014 */ unsigned int fileCount;
  /* 0x0018 */ struct GfxAssembledShaderTextFile files[192];
}; /* size: 0xc618 */

struct std::_Pair_base<GfxCachedShaderText *,GfxCachedShaderText *>
{
  /* 0x0000 */ struct GfxCachedShaderText* first;
  /* 0x0004 */ struct GfxCachedShaderText* second;
}; /* size: 0x0008 */

struct GfxCachedShaderText
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ const char* text;
  /* 0x0008 */ int textSize;
}; /* size: 0x000c */

struct ID3D10Blob
{
}; /* size: 0x0004 */

typedef struct _D3D_SHADER_MACRO
{
  /* 0x0000 */ const char* Name;
  /* 0x0004 */ const char* Definition;
} D3D_SHADER_MACRO, *PD3D_SHADER_MACRO; /* size: 0x0008 */

struct jpeg_entropy_decoder
{
  /* 0x0000 */ void* start_pass /* function */;
  /* 0x0004 */ void* decode_mcu /* function */;
  /* 0x0008 */ unsigned char insufficient_data;
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

struct bitread_perm_state
{
  /* 0x0000 */ long get_buffer;
  /* 0x0004 */ int bits_left;
}; /* size: 0x0008 */

struct savable_state
{
  /* 0x0000 */ unsigned int EOBRUN;
  /* 0x0004 */ int last_dc_val[4];
}; /* size: 0x0014 */

struct huff_entropy_decoder
{
  /* 0x0000 */ struct jpeg_entropy_decoder pub;
  /* 0x000c */ struct bitread_perm_state bitstate;
  /* 0x0014 */ struct savable_state saved;
  /* 0x0024 */ unsigned int restarts_to_go;
  /* 0x0028 */ struct d_derived_tbl* dc_derived_tbls[4];
  /* 0x0038 */ struct d_derived_tbl* ac_derived_tbls[4];
  /* 0x0048 */ struct d_derived_tbl* dc_cur_tbls[10];
  /* 0x0070 */ struct d_derived_tbl* ac_cur_tbls[10];
  /* 0x0098 */ unsigned char dc_needed[10];
  /* 0x00a2 */ unsigned char ac_needed[10];
}; /* size: 0x00ac */

struct SkinXModelCmd
{
  /* 0x0000 */ void* modelSurfs;
  /* 0x0004 */ const struct DObjAnimMat* mat;
  /* 0x0008 */ int surfacePartBits[5];
  /* 0x001c */ union vec3_t viewoffset;
  /* 0x0028 */ unsigned short surfCount;
  /* 0x002a */ char __PADDING__[6];
}; /* size: 0x0030 */

struct GfxModelRigidSurface
{
  /* 0x0000 */ struct GfxModelSkinnedSurface surf;
  /* 0x0018 */ struct GfxModelRigidSurfacePiece pieces[1];
}; /* size: 0x0040 */

struct bitread_working_state
{
  /* 0x0000 */ const unsigned char* next_input_byte;
  /* 0x0004 */ unsigned int bytes_in_buffer;
  /* 0x0008 */ long get_buffer;
  /* 0x000c */ int bits_left;
  /* 0x0010 */ struct jpeg_decompress_struct* cinfo;
}; /* size: 0x0014 */

struct XModelRigidCullInfoContext
{
  /* 0x0000 */ int cullInfoPos;
  /* 0x0004 */ unsigned int cullInfoBufSize;
  /* 0x0008 */ unsigned char cullFlags;
  /* 0x0009 */ char Padding_1387[3];
  /* 0x000c */ unsigned int size;
}; /* size: 0x0010 */

struct BModelSurface
{
  /* 0x0000 */ struct GfxScaledPlacement* placement;
  /* 0x0004 */ struct GfxSurface* surf;
  /* 0x0008 */ struct ShaderConstantSet* shaderConstSet;
}; /* size: 0x000c */

struct jpeg_scan_info
{
  /* 0x0000 */ int comps_in_scan;
  /* 0x0004 */ int component_index[4];
  /* 0x0014 */ int Ss;
  /* 0x0018 */ int Se;
  /* 0x001c */ int Ah;
  /* 0x0020 */ int Al;
}; /* size: 0x0024 */

struct DpvsCellCmd
{
  /* 0x0000 */ unsigned char type;
  /* 0x0001 */ unsigned char viewIndex;
  /* 0x0002 */ unsigned char planeCount;
  /* 0x0003 */ unsigned char frustumPlaneCount;
  /* 0x0004 */ const struct DpvsPlane* planes;
  union
  {
    /* 0x0008 */ const struct GfxCell* cell;
    /* 0x0008 */ const struct GfxCell* cell_local;
    /* 0x0008 */ unsigned int cellIndex;
  }; /* size: 0x0004 */
  /* 0x000c */ unsigned short cachedCellIndex;
  /* 0x000e */ unsigned short cachedCellCount;
}; /* size: 0x0010 */

struct jpeg_c_main_controller
{
  /* 0x0000 */ void* start_pass /* function */;
  /* 0x0004 */ void* process_data /* function */;
}; /* size: 0x0008 */

struct DpvsPlanes
{
  /* 0x0000 */ const struct DpvsPlane* planes;
  /* 0x0004 */ int count;
}; /* size: 0x0008 */

struct DpvsClipPlanes
{
  /* 0x0000 */ struct DpvsPlane planes[16];
  /* 0x0140 */ unsigned int count;
}; /* size: 0x0144 */

struct GfxCmdBufContext
{
  union
  {
    struct
    {
      /* 0x0000 */ struct GfxCmdBufSourceState* source;
      /* 0x0004 */ struct GfxCmdBufState* state;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ struct GfxCmdBufSourceState* source;
      /* 0x0004 */ struct GfxCmdBufState* state;
    } /* size: 0x0008 */ local;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct BspTriangleBatch_t
{
  /* 0x0000 */ unsigned short triCount;
  /* 0x0002 */ unsigned short vertexCount;
  /* 0x0004 */ int baseIndex;
  /* 0x0008 */ int vertexDataOffset0;
}; /* size: 0x000c */

struct jpeg_color_quantizer
{
  /* 0x0000 */ void* start_pass /* function */;
  /* 0x0004 */ void* color_quantize /* function */;
  /* 0x0008 */ void* finish_pass /* function */;
  /* 0x000c */ void* new_color_map /* function */;
}; /* size: 0x0010 */

struct my_cquantizer
{
  /* 0x0000 */ struct jpeg_color_quantizer pub;
  /* 0x0010 */ unsigned char** sv_colormap;
  /* 0x0014 */ int desired;
  /* 0x0018 */ unsigned short** histogram[32];
  /* 0x001c */ unsigned char needs_zeroed;
  /* 0x001d */ char Padding_1388[3];
  /* 0x0020 */ short* fserrors;
  /* 0x0024 */ unsigned char on_odd_row;
  /* 0x0025 */ char Padding_1389[3];
  /* 0x0028 */ int* error_limiter;
}; /* size: 0x002c */

struct GfxTrianglesDrawStream
{
  /* 0x0000 */ const unsigned int* primDrawSurfPos;
  /* 0x0004 */ unsigned int surfCount;
  /* 0x0008 */ const unsigned short* surfList;
  /* 0x000c */ const union GfxTexture* reflectionProbeTexture;
  /* 0x0010 */ const union GfxTexture* lightmapSecondaryTexture;
  /* 0x0014 */ unsigned int customSamplerFlags;
  /* 0x0018 */ union GfxTexture* whiteTexture;
  /* 0x001c */ struct GfxCmdBufContext context;
  /* 0x0024 */ struct GfxSurface* surfaces;
}; /* size: 0x0028 */

union large_pool_struct
{
  union
  {
    struct
    {
      /* 0x0000 */ union large_pool_struct* next;
      /* 0x0004 */ unsigned int bytes_used;
      /* 0x0008 */ unsigned int bytes_left;
    } /* size: 0x000c */ hdr;
    /* 0x0000 */ double dummy;
  }; /* size: 0x000c */
}; /* size: 0x0010 */

struct ID3D11ShaderReflectionType
{
}; /* size: 0x0004 */

struct DrawLitWorkerCmd
{
  /* 0x0000 */ const struct GfxBackEndData* data;
  /* 0x0004 */ struct GfxWorkerData* workerData;
  /* 0x0008 */ struct GfxViewInfo* viewInfo;
  /* 0x000c */ const struct GfxDrawSurfListInfo* drawList;
  /* 0x0010 */ unsigned char cmdBufPartitionIndex;
  /* 0x0011 */ unsigned char cmdBufPartitionCount;
  /* 0x0012 */ unsigned char cmdBufType;
  /* 0x0013 */ unsigned char drawListType;
}; /* size: 0x0014 */

typedef struct _EXCEPTION_RECORD_CRT
{
  /* 0x0000 */ unsigned long exception_number;
  /* 0x0004 */ unsigned long exception_flags;
  /* 0x0008 */ unsigned long exception_record;
  /* 0x000c */ unsigned long exception_address;
  /* 0x0010 */ unsigned long number_parameters;
  /* 0x0014 */ unsigned long exception_information;
  /* 0x0018 */ long __PADDING__[14];
} EXCEPTION_RECORD_CRT, *PEXCEPTION_RECORD_CRT; /* size: 0x0050 */

struct GfxStaticModelDrawStream
{
  /* 0x0000 */ unsigned int precompiledIndex;
  /* 0x0004 */ const unsigned int* primDrawSurfPos;
  /* 0x0008 */ unsigned int smodelCount;
  /* 0x000c */ const unsigned short* smodelList;
  /* 0x0010 */ const union GfxTexture* reflectionProbeTexture;
  /* 0x0014 */ unsigned int customSamplerFlags;
  /* 0x0018 */ union vec4_t viewOrigin;
  /* 0x0028 */ struct GfxFrameStats* frameStats;
  /* 0x002c */ struct GfxPrimStats* primStats;
  /* 0x0030 */ unsigned int viewInfoIndex;
  /* 0x0034 */ struct XSurface* localSurf;
}; /* size: 0x0038 */

struct ID3D11ShaderReflectionVariable
{
}; /* size: 0x0004 */

struct ScopeTable
{
  /* 0x0000 */ unsigned long GSCookieOffset;
  /* 0x0004 */ unsigned long GSCookieXOROffset;
  /* 0x0008 */ unsigned long EHCookieOffset;
  /* 0x000c */ unsigned long EHCookieXOROffset;
  /* 0x0010 */ unsigned long ScopeRecord;
}; /* size: 0x0014 */

struct SunShadowMapUserData
{
  /* 0x0000 */ const struct GfxSunShadowPartition* partition;
  /* 0x0004 */ const struct GfxDrawSurfListInfo* drawList;
}; /* size: 0x0008 */

typedef struct _D3D11_SIGNATURE_PARAMETER_DESC
{
  /* 0x0000 */ const char* SemanticName;
  /* 0x0004 */ unsigned int SemanticIndex;
  /* 0x0008 */ unsigned int Register;
  /* 0x000c */ enum D3D_NAME SystemValueType;
  /* 0x0010 */ enum D3D_REGISTER_COMPONENT_TYPE ComponentType;
  /* 0x0014 */ unsigned char Mask;
  /* 0x0015 */ unsigned char ReadWriteMask;
  /* 0x0016 */ char Padding_1390[2];
  /* 0x0018 */ unsigned int Stream;
} D3D11_SIGNATURE_PARAMETER_DESC, *PD3D11_SIGNATURE_PARAMETER_DESC; /* size: 0x001c */

typedef struct _SCOPETABLE_ENTRY
{
  /* 0x0000 */ unsigned long enclosing_level;
  /* 0x0004 */ unsigned long filter;
  /* 0x0008 */ unsigned long specific_handler;
} SCOPETABLE_ENTRY, *PSCOPETABLE_ENTRY; /* size: 0x000c */

struct Ui3dStatus
{
  /* 0x0000 */ BOOL initialized;
  /* 0x0001 */ BOOL rendering;
  /* 0x0002 */ char Padding_1391[2];
  /* 0x0004 */ int width;
  /* 0x0008 */ int height;
  /* 0x000c */ int pmemLocation;
  /* 0x0010 */ BOOL hasPingPongBuffer;
  /* 0x0011 */ char Padding_1392[3];
  /* 0x0014 */ float blurRadius;
}; /* size: 0x0018 */

struct FxWorldMarkPoint
{
  /* 0x0000 */ union vec3_t xyz;
  /* 0x000c */ union vec3_t vertWeights;
}; /* size: 0x0018 */

struct GfxReverseSortDrawSurfsInterface
{
}; /* size: 0x0001 */

struct ExtraCamConfig
{
  /* 0x0000 */ unsigned int renderTargetWidth;
  /* 0x0004 */ unsigned int renderTargetHeight;
  /* 0x0008 */ unsigned int multi_renderTargetWidth;
  /* 0x000c */ unsigned int multi_renderTargetHeight;
  /* 0x0010 */ BOOL initialized;
  /* 0x0011 */ char __PADDING__[3];
}; /* size: 0x0014 */

struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;

struct PerfTimerStyle
{
  /* 0x0000 */ struct Font_s* font;
  /* 0x0004 */ float fontWidth;
  /* 0x0008 */ float fontHeight;
  /* 0x000c */ enum PerfTimerDisplayMode displayMode;
  /* 0x0010 */ enum PerfTimerDisplayType displayType;
  /* 0x0014 */ void* convertTime /* function */;
  /* 0x0018 */ unsigned int timerCount;
  /* 0x001c */ unsigned int timerNameCharCount;
  /* 0x0020 */ const char** timerNames;
  /* 0x0024 */ const union GfxColor* timerColors;
  /* 0x0028 */ float totalBarY;
  /* 0x002c */ float budgetMs;
  /* 0x0030 */ float budgetPixels;
  /* 0x0034 */ unsigned int bucketCount;
  /* 0x0038 */ const char** bucketNames;
}; /* size: 0x003c */

struct IDirectDrawSurface7
{
}; /* size: 0x0004 */

struct XVertexInfo3
{
  /* 0x0000 */ struct XVertexInfo0 vert0;
  /* 0x0002 */ struct XBlendLoadInfo blend[3];
}; /* size: 0x000e */

struct std::pair<MaterialMemory *,MaterialMemory *>
{
}; /* size: 0x0008 */

struct PerfTimerFrameHistory
{
  /* 0x0000 */ unsigned int currentFrame;
  /* 0x0004 */ unsigned int frameCount;
  /* 0x0008 */ struct PerfTimerFrame frames[64];
}; /* size: 0x5208 */

struct stream_dest_info_t
{
  /* 0x0000 */ const char* Usage;
  /* 0x0004 */ unsigned char UsageIndex;
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

struct PerfTimer
{
  /* 0x0000 */ unsigned int beginTime;
  /* 0x0004 */ unsigned int totalTime;
  /* 0x0008 */ struct PerfTimer* parent;
  /* 0x000c */ struct PerfTimer* nextSibling;
  /* 0x0010 */ BOOL hasChild;
  /* 0x0011 */ BOOL isActive;
  /* 0x0012 */ BOOL hide;
  /* 0x0013 */ unsigned char bucket;
}; /* size: 0x0014 */

struct GPUTimer
{
  /* 0x0000 */ long Padding_1393[5];
  /* 0x0014 */ struct GPUTimeStamp* firstTimeStamp;
  /* 0x0018 */ struct GPUTimeStamp* currentTimeStamp;
  /* 0x001c */ int adjustTime;
}; /* size: 0x0020 */

struct GPUTimerFrame
{
  /* 0x0000 */ unsigned int frameIndex;
  /* 0x0004 */ unsigned int beginTime;
  /* 0x0008 */ unsigned int totalTime;
  /* 0x000c */ BOOL isCurrent;
  /* 0x000d */ char Padding_1394[3];
  /* 0x0010 */ struct GPUTimer timers[40];
}; /* size: 0x0510 */

struct GPUTimeStamp
{
  /* 0x0000 */ struct ID3D11Query* disjoint;
  /* 0x0004 */ struct ID3D11Query* beginQuery;
  /* 0x0008 */ struct ID3D11Query* endQuery;
  /* 0x000c */ struct GPUTimeStamp* next;
}; /* size: 0x0010 */

struct jpeg_upsampler
{
  /* 0x0000 */ void* start_pass /* function */;
  /* 0x0004 */ void* upsample /* function */;
  /* 0x0008 */ unsigned char need_context_rows;
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

struct my_upsampler
{
  /* 0x0000 */ struct jpeg_upsampler pub;
  /* 0x000c */ void* upmethod /* function */;
  /* 0x0010 */ int* Cr_r_tab;
  /* 0x0014 */ int* Cb_b_tab;
  /* 0x0018 */ long* Cr_g_tab;
  /* 0x001c */ long* Cb_g_tab;
  /* 0x0020 */ unsigned char* spare_row;
  /* 0x0024 */ unsigned char spare_full;
  /* 0x0025 */ char Padding_1395[3];
  /* 0x0028 */ unsigned int out_row_width;
  /* 0x002c */ unsigned int rows_to_go;
}; /* size: 0x0030 */

struct std::_Pair_base<GfxImage * *,GfxImage * *>
{
  /* 0x0000 */ struct GfxImage** first;
  /* 0x0004 */ struct GfxImage** second;
}; /* size: 0x0008 */

struct std::pair<GfxImage * *,GfxImage * *>
{
}; /* size: 0x0008 */

struct jpeg_d_post_controller
{
  /* 0x0000 */ void* start_pass /* function */;
  /* 0x0004 */ void* post_process_data /* function */;
}; /* size: 0x0008 */

struct my_post_controller
{
  /* 0x0000 */ struct jpeg_d_post_controller pub;
  /* 0x0008 */ struct jvirt_sarray_control* whole_image;
  /* 0x000c */ unsigned char** buffer;
  /* 0x0010 */ unsigned int strip_height;
  /* 0x0014 */ unsigned int starting_row;
  /* 0x0018 */ unsigned int next_row;
}; /* size: 0x001c */

struct BuiltinImageConstructorTable
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ void* LoadCallback /* function */;
}; /* size: 0x0008 */

struct MaterialString
{
  /* 0x0000 */ const char* string;
  /* 0x0004 */ unsigned int hash;
}; /* size: 0x0008 */

struct GfxImageFileHeader
{
  /* 0x0000 */ char tag[3];
  /* 0x0003 */ unsigned char version;
  /* 0x0004 */ unsigned char format;
  /* 0x0005 */ unsigned char flags;
  /* 0x0006 */ short dimensions[3];
  /* 0x000c */ float gamma;
  /* 0x0010 */ unsigned char maxGlossForMip[16];
  /* 0x0020 */ int fileSizeForPicmip[8];
}; /* size: 0x0040 */

typedef struct _EH4_SCOPETABLE
{
  /* 0x0000 */ unsigned long GSCookieOffset;
  /* 0x0004 */ unsigned long GSCookieXOROffset;
  /* 0x0008 */ unsigned long EHCookieOffset;
  /* 0x000c */ unsigned long EHCookieXOROffset;
  /* 0x0010 */ struct _EH4_SCOPETABLE_RECORD ScopeRecord[1];
} EH4_SCOPETABLE, *PEH4_SCOPETABLE; /* size: 0x001c */

struct WaveletHuffmanDecode
{
  /* 0x0000 */ short value;
  /* 0x0002 */ short bits;
}; /* size: 0x0004 */

struct WaveletDecode
{
  /* 0x0000 */ unsigned short value;
  /* 0x0002 */ unsigned short bit;
  /* 0x0004 */ const unsigned char* data;
  /* 0x0008 */ int width;
  /* 0x000c */ int height;
  /* 0x0010 */ int channels;
  /* 0x0014 */ int bpp;
  /* 0x0018 */ int mipLevel;
  /* 0x001c */ BOOL dataInitialized;
  /* 0x001d */ char __PADDING__[3];
}; /* size: 0x0020 */

struct DdsBlock_Dxt3_t
{
  /* 0x0000 */ unsigned char alpha[8];
  /* 0x0008 */ struct DdsBlock_Dxt1_t color;
}; /* size: 0x0010 */

struct MaterialStateMapRule
{
  /* 0x0000 */ unsigned int stateBitsMask[2];
  /* 0x0008 */ unsigned int stateBitsValue[2];
  /* 0x0010 */ unsigned int stateBitsSet[2];
  /* 0x0018 */ unsigned int stateBitsClear[2];
}; /* size: 0x0020 */

struct MaterialStateMapRuleSet
{
  /* 0x0000 */ int ruleCount;
  /* 0x0004 */ struct MaterialStateMapRule rules[1];
}; /* size: 0x0024 */

struct GfxRawPixel
{
  /* 0x0000 */ unsigned char r;
  /* 0x0001 */ unsigned char g;
  /* 0x0002 */ unsigned char b;
  /* 0x0003 */ unsigned char a;
}; /* size: 0x0004 */

struct GfxRawImage
{
  /* 0x0000 */ char name[64];
  /* 0x0040 */ BOOL hasAlpha;
  /* 0x0041 */ char Padding_1396[3];
  /* 0x0044 */ int width;
  /* 0x0048 */ int height;
  /* 0x004c */ float gamma;
  /* 0x0050 */ unsigned char flags;
  /* 0x0051 */ char Padding_1397[3];
  /* 0x0054 */ struct GfxRawPixel* pixels;
}; /* size: 0x0058 */

struct LIST_ENTRY64
{
  /* 0x0000 */ unsigned __int64 Flink;
  /* 0x0008 */ unsigned __int64 Blink;
}; /* size: 0x0010 */

struct GfxMetrics
{
  /* 0x0000 */ unsigned short cubemapShotRes;
  /* 0x0002 */ unsigned short cubemapShotPixelBorder;
}; /* size: 0x0004 */

typedef struct _DDPIXELFORMAT
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long dwFourCC;
  union
  {
    /* 0x000c */ unsigned long dwRGBBitCount;
    /* 0x000c */ unsigned long dwYUVBitCount;
    /* 0x000c */ unsigned long dwZBufferBitDepth;
    /* 0x000c */ unsigned long dwAlphaBitDepth;
    /* 0x000c */ unsigned long dwLuminanceBitCount;
    /* 0x000c */ unsigned long dwBumpBitCount;
    /* 0x000c */ unsigned long dwPrivateFormatBitCount;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0010 */ unsigned long dwRBitMask;
    /* 0x0010 */ unsigned long dwYBitMask;
    /* 0x0010 */ unsigned long dwStencilBitDepth;
    /* 0x0010 */ unsigned long dwLuminanceBitMask;
    /* 0x0010 */ unsigned long dwBumpDuBitMask;
    /* 0x0010 */ unsigned long dwOperations;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0014 */ unsigned long dwGBitMask;
    /* 0x0014 */ unsigned long dwUBitMask;
    /* 0x0014 */ unsigned long dwZBitMask;
    /* 0x0014 */ unsigned long dwBumpDvBitMask;
    struct
    {
      /* 0x0014 */ unsigned short wFlipMSTypes;
      /* 0x0016 */ unsigned short wBltMSTypes;
    } /* size: 0x0004 */ MultiSampleCaps;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0018 */ unsigned long dwBBitMask;
    /* 0x0018 */ unsigned long dwVBitMask;
    /* 0x0018 */ unsigned long dwStencilBitMask;
    /* 0x0018 */ unsigned long dwBumpLuminanceBitMask;
  }; /* size: 0x0004 */
  union
  {
    /* 0x001c */ unsigned long dwRGBAlphaBitMask;
    /* 0x001c */ unsigned long dwYUVAlphaBitMask;
    /* 0x001c */ unsigned long dwLuminanceAlphaBitMask;
    /* 0x001c */ unsigned long dwRGBZBitMask;
    /* 0x001c */ unsigned long dwYUVZBitMask;
  }; /* size: 0x0004 */
} DDPIXELFORMAT, *PDDPIXELFORMAT; /* size: 0x0020 */

typedef struct _DDSCAPS
{
  /* 0x0000 */ unsigned long dwCaps;
} DDSCAPS, *PDDSCAPS; /* size: 0x0004 */

typedef struct _DDSURFACEDESC
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long dwHeight;
  /* 0x000c */ unsigned long dwWidth;
  union
  {
    /* 0x0010 */ long lPitch;
    /* 0x0010 */ unsigned long dwLinearSize;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned long dwBackBufferCount;
  union
  {
    /* 0x0018 */ unsigned long dwMipMapCount;
    /* 0x0018 */ unsigned long dwZBufferBitDepth;
    /* 0x0018 */ unsigned long dwRefreshRate;
  }; /* size: 0x0004 */
  /* 0x001c */ unsigned long dwAlphaBitDepth;
  /* 0x0020 */ unsigned long dwReserved;
  /* 0x0024 */ void* lpSurface;
  /* 0x0028 */ struct _DDCOLORKEY ddckCKDestOverlay;
  /* 0x0030 */ struct _DDCOLORKEY ddckCKDestBlt;
  /* 0x0038 */ struct _DDCOLORKEY ddckCKSrcOverlay;
  /* 0x0040 */ struct _DDCOLORKEY ddckCKSrcBlt;
  /* 0x0048 */ struct _DDPIXELFORMAT ddpfPixelFormat;
  /* 0x0068 */ struct _DDSCAPS ddsCaps;
} DDSURFACEDESC, *PDDSURFACEDESC; /* size: 0x006c */

struct GfxAssets
{
  /* 0x0000 */ struct ID3D11Query* pixelCountQuery[4];
}; /* size: 0x0010 */

struct IDXGIDevice
{
}; /* size: 0x0004 */

struct IDirectDraw7
{
}; /* size: 0x0004 */

struct IDXGIDevice1
{
}; /* size: 0x0004 */

struct GfxGammaRamp
{
  /* 0x0000 */ unsigned short entries[256];
}; /* size: 0x0200 */

struct jpeg_error_mgr
{
  /* 0x0000 */ void* error_exit /* function */;
  /* 0x0004 */ void* emit_message /* function */;
  /* 0x0008 */ void* output_message /* function */;
  /* 0x000c */ void* format_message /* function */;
  /* 0x0010 */ void* reset_error_mgr /* function */;
  /* 0x0014 */ int msg_code;
  union
  {
    union
    {
      /* 0x0018 */ int i[8];
      /* 0x0018 */ char s[80];
    }; /* size: 0x0050 */
  } /* size: 0x0050 */ msg_parm;
  /* 0x0068 */ int trace_level;
  /* 0x006c */ long num_warnings;
  /* 0x0070 */ const char* const* jpeg_message_table;
  /* 0x0074 */ int last_jpeg_message;
  /* 0x0078 */ const char* const* addon_message_table;
  /* 0x007c */ int first_addon_message;
  /* 0x0080 */ int last_addon_message;
  /* 0x0084 */ void* exit /* function */;
  /* 0x0088 */ void* printf /* function */;
}; /* size: 0x008c */

struct jpeg_memory_mgr
{
  /* 0x0000 */ void* alloc_small /* function */;
  /* 0x0004 */ void* alloc_large /* function */;
  /* 0x0008 */ void* alloc_sarray /* function */;
  /* 0x000c */ void* alloc_barray /* function */;
  /* 0x0010 */ void* request_virt_sarray /* function */;
  /* 0x0014 */ void* request_virt_barray /* function */;
  /* 0x0018 */ void* realize_virt_arrays /* function */;
  /* 0x001c */ void* access_virt_sarray /* function */;
  /* 0x0020 */ void* access_virt_barray /* function */;
  /* 0x0024 */ void* free_pool /* function */;
  /* 0x0028 */ void* self_destruct /* function */;
  /* 0x002c */ long max_memory_to_use;
  /* 0x0030 */ long max_alloc_chunk;
  /* 0x0034 */ struct jpeg_alloc alloc;
}; /* size: 0x003c */

struct c_derived_tbl
{
  /* 0x0000 */ unsigned int ehufco[256];
  /* 0x0400 */ char ehufsi[256];
}; /* size: 0x0500 */

struct GfxDrawSurfListArgs
{
  /* 0x0000 */ struct GfxCmdBufContext context;
  /* 0x0008 */ unsigned int firstDrawSurfIndex;
  /* 0x000c */ const struct GfxDrawSurfListInfo* info;
}; /* size: 0x0010 */

typedef struct _KSYSTEM_TIME
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long High1Time;
  /* 0x0008 */ long High2Time;
} KSYSTEM_TIME, *PKSYSTEM_TIME; /* size: 0x000c */

typedef struct _KUSER_SHARED_DATA
{
  /* 0x0000 */ unsigned long TickCountLowDeprecated;
  /* 0x0004 */ unsigned long TickCountMultiplier;
  /* 0x0008 */ volatile struct _KSYSTEM_TIME InterruptTime;
  /* 0x0014 */ volatile struct _KSYSTEM_TIME SystemTime;
  /* 0x0020 */ volatile struct _KSYSTEM_TIME TimeZoneBias;
  /* 0x002c */ unsigned short ImageNumberLow;
  /* 0x002e */ unsigned short ImageNumberHigh;
  /* 0x0030 */ wchar_t NtSystemRoot[260];
  /* 0x0238 */ unsigned long MaxStackTraceDepth;
  /* 0x023c */ unsigned long CryptoExponent;
  /* 0x0240 */ unsigned long TimeZoneId;
  /* 0x0244 */ unsigned long LargePageMinimum;
  /* 0x0248 */ unsigned long Reserved2[7];
  /* 0x0264 */ enum _NT_PRODUCT_TYPE NtProductType;
  /* 0x0268 */ unsigned char ProductTypeIsValid;
  /* 0x0269 */ char Padding_1398[3];
  /* 0x026c */ unsigned long NtMajorVersion;
  /* 0x0270 */ unsigned long NtMinorVersion;
  /* 0x0274 */ unsigned char ProcessorFeatures[64];
  /* 0x02b4 */ unsigned long Reserved1;
  /* 0x02b8 */ unsigned long Reserved3;
  /* 0x02bc */ volatile unsigned long TimeSlip;
  /* 0x02c0 */ enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
  /* 0x02c4 */ long Padding_1399;
  /* 0x02c8 */ union _LARGE_INTEGER SystemExpirationDate;
  /* 0x02d0 */ unsigned long SuiteMask;
  /* 0x02d4 */ unsigned char KdDebuggerEnabled;
  /* 0x02d5 */ char Padding_1400[3];
  /* 0x02d8 */ volatile unsigned long ActiveConsoleId;
  /* 0x02dc */ volatile unsigned long DismountCount;
  /* 0x02e0 */ unsigned long ComPlusPackage;
  /* 0x02e4 */ unsigned long LastSystemRITEventTickCount;
  /* 0x02e8 */ unsigned long NumberOfPhysicalPages;
  /* 0x02ec */ unsigned char SafeBootMode;
  /* 0x02ed */ char Padding_1401[3];
  /* 0x02f0 */ unsigned long TraceLogging;
  /* 0x02f4 */ long Padding_1402;
  /* 0x02f8 */ unsigned __int64 Fill0;
  /* 0x0300 */ unsigned __int64 SystemCall[4];
  union
  {
    /* 0x0320 */ volatile struct _KSYSTEM_TIME TickCount;
    struct
    {
      /* 0x0320 */ volatile unsigned __int64 TickCountQuad;
      /* 0x0328 */ long __PADDING__[2];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} KUSER_SHARED_DATA, *PKUSER_SHARED_DATA; /* size: 0x0330 */

typedef struct _CLIENT_ID
{
  /* 0x0000 */ void* UniqueProcess;
  /* 0x0004 */ void* UniqueThread;
} CLIENT_ID, *PCLIENT_ID; /* size: 0x0008 */

struct r_backEndGlobals_t
{
  /* 0x0000 */ int glowCount;
  /* 0x0004 */ struct GfxImage* glowImage;
  /* 0x0008 */ struct GfxImage* godRaysImage;
  /* 0x000c */ struct Font_s* debugFont;
  /* 0x0010 */ struct GfxFrameStats frameStatsMax;
}; /* size: 0x1464 */

struct backing_store_struct
{
  /* 0x0000 */ void* read_backing_store /* function */;
  /* 0x0004 */ void* write_backing_store /* function */;
  /* 0x0008 */ void* close_backing_store /* function */;
  /* 0x000c */ struct _iobuf* temp_file;
  /* 0x0010 */ char temp_name[64];
}; /* size: 0x0050 */

struct jvirt_sarray_control
{
  /* 0x0000 */ unsigned char** mem_buffer;
  /* 0x0004 */ unsigned int rows_in_array;
  /* 0x0008 */ unsigned int samplesperrow;
  /* 0x000c */ unsigned int maxaccess;
  /* 0x0010 */ unsigned int rows_in_mem;
  /* 0x0014 */ unsigned int rowsperchunk;
  /* 0x0018 */ unsigned int cur_start_row;
  /* 0x001c */ unsigned int first_undef_row;
  /* 0x0020 */ unsigned char pre_zero;
  /* 0x0021 */ unsigned char dirty;
  /* 0x0022 */ unsigned char b_s_open;
  /* 0x0023 */ char Padding_1403;
  /* 0x0024 */ struct jvirt_sarray_control* next;
  /* 0x0028 */ struct backing_store_struct b_s_info;
}; /* size: 0x0078 */

struct _ASSEMBLY_STORAGE_MAP;

struct jpeg_decomp_master
{
  /* 0x0000 */ void* prepare_for_output_pass /* function */;
  /* 0x0004 */ void* finish_output_pass /* function */;
  /* 0x0008 */ unsigned char is_dummy_pass;
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

struct jvirt_barray_control
{
  /* 0x0000 */ short** mem_buffer[64];
  /* 0x0004 */ unsigned int rows_in_array;
  /* 0x0008 */ unsigned int blocksperrow;
  /* 0x000c */ unsigned int maxaccess;
  /* 0x0010 */ unsigned int rows_in_mem;
  /* 0x0014 */ unsigned int rowsperchunk;
  /* 0x0018 */ unsigned int cur_start_row;
  /* 0x001c */ unsigned int first_undef_row;
  /* 0x0020 */ unsigned char pre_zero;
  /* 0x0021 */ unsigned char dirty;
  /* 0x0022 */ unsigned char b_s_open;
  /* 0x0023 */ char Padding_1404;
  /* 0x0024 */ struct jvirt_barray_control* next;
  /* 0x0028 */ struct backing_store_struct b_s_info;
}; /* size: 0x0078 */

struct jpeg_compress_struct
{
  /* 0x0000 */ struct jpeg_error_mgr* err;
  /* 0x0004 */ struct jpeg_memory_mgr* mem;
  /* 0x0008 */ struct jpeg_progress_mgr* progress;
  /* 0x000c */ void* client_data;
  /* 0x0010 */ unsigned char is_decompressor;
  /* 0x0011 */ char Padding_1405[3];
  /* 0x0014 */ int global_state;
  /* 0x0018 */ struct jpeg_alloc alloc;
  /* 0x0020 */ struct jpeg_destination_mgr* dest;
  /* 0x0024 */ unsigned int image_width;
  /* 0x0028 */ unsigned int image_height;
  /* 0x002c */ int input_components;
  /* 0x0030 */ enum J_COLOR_SPACE in_color_space;
  /* 0x0034 */ long Padding_1406;
  /* 0x0038 */ double input_gamma;
  /* 0x0040 */ int data_precision;
  /* 0x0044 */ int num_components;
  /* 0x0048 */ enum J_COLOR_SPACE jpeg_color_space;
  /* 0x004c */ struct jpeg_component_info* comp_info;
  /* 0x0050 */ struct JQUANT_TBL* quant_tbl_ptrs[4];
  /* 0x0060 */ struct JHUFF_TBL* dc_huff_tbl_ptrs[4];
  /* 0x0070 */ struct JHUFF_TBL* ac_huff_tbl_ptrs[4];
  /* 0x0080 */ unsigned char arith_dc_L[16];
  /* 0x0090 */ unsigned char arith_dc_U[16];
  /* 0x00a0 */ unsigned char arith_ac_K[16];
  /* 0x00b0 */ int num_scans;
  /* 0x00b4 */ const struct jpeg_scan_info* scan_info;
  /* 0x00b8 */ unsigned char raw_data_in;
  /* 0x00b9 */ unsigned char arith_code;
  /* 0x00ba */ unsigned char optimize_coding;
  /* 0x00bb */ unsigned char CCIR601_sampling;
  /* 0x00bc */ int smoothing_factor;
  /* 0x00c0 */ enum J_DCT_METHOD dct_method;
  /* 0x00c4 */ unsigned int restart_interval;
  /* 0x00c8 */ int restart_in_rows;
  /* 0x00cc */ unsigned char write_JFIF_header;
  /* 0x00cd */ unsigned char JFIF_major_version;
  /* 0x00ce */ unsigned char JFIF_minor_version;
  /* 0x00cf */ unsigned char density_unit;
  /* 0x00d0 */ unsigned short X_density;
  /* 0x00d2 */ unsigned short Y_density;
  /* 0x00d4 */ unsigned char write_Adobe_marker;
  /* 0x00d5 */ char Padding_1407[3];
  /* 0x00d8 */ unsigned int next_scanline;
  /* 0x00dc */ unsigned char progressive_mode;
  /* 0x00dd */ char Padding_1408[3];
  /* 0x00e0 */ int max_h_samp_factor;
  /* 0x00e4 */ int max_v_samp_factor;
  /* 0x00e8 */ unsigned int total_iMCU_rows;
  /* 0x00ec */ int comps_in_scan;
  /* 0x00f0 */ struct jpeg_component_info* cur_comp_info[4];
  /* 0x0100 */ unsigned int MCUs_per_row;
  /* 0x0104 */ unsigned int MCU_rows_in_scan;
  /* 0x0108 */ int blocks_in_MCU;
  /* 0x010c */ int MCU_membership[10];
  /* 0x0134 */ int Ss;
  /* 0x0138 */ int Se;
  /* 0x013c */ int Ah;
  /* 0x0140 */ int Al;
  /* 0x0144 */ struct jpeg_comp_master* master;
  /* 0x0148 */ struct jpeg_c_main_controller* main;
  /* 0x014c */ struct jpeg_c_prep_controller* prep;
  /* 0x0150 */ struct jpeg_c_coef_controller* coef;
  /* 0x0154 */ struct jpeg_marker_writer* marker;
  /* 0x0158 */ struct jpeg_color_converter* cconvert;
  /* 0x015c */ struct jpeg_downsampler* downsample;
  /* 0x0160 */ struct jpeg_forward_dct* fdct;
  /* 0x0164 */ struct jpeg_entropy_encoder* entropy;
  /* 0x0168 */ struct jpeg_scan_info* script_space;
  /* 0x016c */ int script_space_size;
}; /* size: 0x0170 */

struct SpotShadowMapUserData
{
  /* 0x0000 */ const struct GfxSpotShadow* spotShadow;
  /* 0x0004 */ const struct GfxDrawSurfListInfo* drawList;
}; /* size: 0x0008 */

struct jpeg_c_coef_controller
{
  /* 0x0000 */ void* start_pass /* function */;
  /* 0x0004 */ void* compress_data /* function */;
}; /* size: 0x0008 */

struct my_coef_controller
{
  /* 0x0000 */ struct jpeg_c_coef_controller pub;
  /* 0x0008 */ unsigned int iMCU_row_num;
  /* 0x000c */ unsigned int mcu_ctr;
  /* 0x0010 */ int MCU_vert_offset;
  /* 0x0014 */ int MCU_rows_per_iMCU_row;
  /* 0x0018 */ short* MCU_buffer[64][10];
  /* 0x0040 */ struct jvirt_barray_control* whole_image[10];
}; /* size: 0x0068 */

struct jpeg_entropy_encoder
{
  /* 0x0000 */ void* start_pass /* function */;
  /* 0x0004 */ void* encode_mcu /* function */;
  /* 0x0008 */ void* finish_pass /* function */;
}; /* size: 0x000c */

struct jpeg_source_mgr
{
  /* 0x0000 */ const unsigned char* next_input_byte;
  /* 0x0004 */ unsigned int bytes_in_buffer;
  /* 0x0008 */ void* init_source /* function */;
  /* 0x000c */ void* fill_input_buffer /* function */;
  /* 0x0010 */ void* skip_input_data /* function */;
  /* 0x0014 */ void* resync_to_restart /* function */;
  /* 0x0018 */ void* term_source /* function */;
}; /* size: 0x001c */

struct jpeg_c_prep_controller
{
  /* 0x0000 */ void* start_pass /* function */;
  /* 0x0004 */ void* pre_process_data /* function */;
}; /* size: 0x0008 */

struct my_prep_controller
{
  /* 0x0000 */ struct jpeg_c_prep_controller pub;
  /* 0x0008 */ unsigned char** color_buf[10];
  /* 0x0030 */ unsigned int rows_to_go;
  /* 0x0034 */ int next_buf_row;
  /* 0x0038 */ int this_row_group;
  /* 0x003c */ int next_buf_stop;
}; /* size: 0x0040 */

struct jpeg_marker_writer
{
  /* 0x0000 */ void* write_file_header /* function */;
  /* 0x0004 */ void* write_frame_header /* function */;
  /* 0x0008 */ void* write_scan_header /* function */;
  /* 0x000c */ void* write_file_trailer /* function */;
  /* 0x0010 */ void* write_tables_only /* function */;
  /* 0x0014 */ void* write_marker_header /* function */;
  /* 0x0018 */ void* write_marker_byte /* function */;
}; /* size: 0x001c */

struct Corona
{
  /* 0x0000 */ BOOL inUse;
  /* 0x0001 */ char Padding_1409[3];
  /* 0x0004 */ struct GfxLightCorona* info;
  /* 0x0008 */ int timeSinceSpawned;
  /* 0x000c */ float currentVisibility;
  /* 0x0010 */ float targetVisibility;
  /* 0x0014 */ int hitNum;
  /* 0x0018 */ BOOL wasEverVisible;
  /* 0x0019 */ BOOL queryIssued[5];
  /* 0x001e */ char Padding_1410[2];
  /* 0x0020 */ struct ID3D11Query* query[5];
  /* 0x0034 */ struct ID3D11Query* queryMax[5];
}; /* size: 0x0048 */

struct JQUANT_TBL
{
  /* 0x0000 */ unsigned short quantval[64];
  /* 0x0080 */ unsigned char sent_table;
  /* 0x0081 */ char __PADDING__[1];
}; /* size: 0x0082 */

struct GfxDecodedLightGridColors
{
  /* 0x0000 */ union vec4_t rgb[56];
}; /* size: 0x0380 */

struct JHUFF_TBL
{
  /* 0x0000 */ unsigned char bits[17];
  /* 0x0011 */ unsigned char huffval[256];
  /* 0x0111 */ unsigned char sent_table;
}; /* size: 0x0112 */

struct jpeg_component_info
{
  /* 0x0000 */ int component_id;
  /* 0x0004 */ int component_index;
  /* 0x0008 */ int h_samp_factor;
  /* 0x000c */ int v_samp_factor;
  /* 0x0010 */ int quant_tbl_no;
  /* 0x0014 */ int dc_tbl_no;
  /* 0x0018 */ int ac_tbl_no;
  /* 0x001c */ unsigned int width_in_blocks;
  /* 0x0020 */ unsigned int height_in_blocks;
  /* 0x0024 */ int DCT_scaled_size;
  /* 0x0028 */ unsigned int downsampled_width;
  /* 0x002c */ unsigned int downsampled_height;
  /* 0x0030 */ unsigned char component_needed;
  /* 0x0031 */ char Padding_1411[3];
  /* 0x0034 */ int MCU_width;
  /* 0x0038 */ int MCU_height;
  /* 0x003c */ int MCU_blocks;
  /* 0x0040 */ int MCU_sample_width;
  /* 0x0044 */ int last_col_width;
  /* 0x0048 */ int last_row_height;
  /* 0x004c */ struct JQUANT_TBL* quant_table;
  /* 0x0050 */ void* dct_table;
}; /* size: 0x0054 */

struct jpeg_d_main_controller
{
  /* 0x0000 */ void* start_pass /* function */;
  /* 0x0004 */ void* process_data /* function */;
}; /* size: 0x0008 */

struct CatchGuardRN
{
  /* 0x0000 */ struct EHRegistrationNode* pNext;
  /* 0x0004 */ void* pFrameHandler;
  /* 0x0008 */ unsigned int RandomCookie;
  /* 0x000c */ const struct _s_FuncInfo* pFuncInfo;
  /* 0x0010 */ struct EHRegistrationNode* pRN;
  /* 0x0014 */ int CatchDepth;
}; /* size: 0x0018 */

struct jpeg_input_controller
{
  /* 0x0000 */ void* consume_input /* function */;
  /* 0x0004 */ void* reset_input_controller /* function */;
  /* 0x0008 */ void* start_input_pass /* function */;
  /* 0x000c */ void* finish_input_pass /* function */;
  /* 0x0010 */ unsigned char has_multiple_scans;
  /* 0x0011 */ unsigned char eoi_reached;
  /* 0x0012 */ char __PADDING__[2];
}; /* size: 0x0014 */

typedef struct _ACTIVATION_CONTEXT_STACK
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long NextCookieSequenceNumber;
  /* 0x0008 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* ActiveFrame;
  /* 0x000c */ struct _LIST_ENTRY FrameListCache;
} ACTIVATION_CONTEXT_STACK, *PACTIVATION_CONTEXT_STACK; /* size: 0x0014 */

struct jpeg_inverse_dct
{
  /* 0x0000 */ void* start_pass /* function */;
  /* 0x0004 */ void* inverse_DCT[10] /* function */;
}; /* size: 0x002c */

class pairNode
{
  /* 0x0000 */ long Padding_1412;
  /* 0x0004 */ class DNameNode* left;
  /* 0x0008 */ class DNameNode* right;
  /* 0x000c */ int myLen;
}; /* size: 0x0010 */

typedef struct __JUMP_BUFFER
{
  /* 0x0000 */ unsigned long Ebp;
  /* 0x0004 */ unsigned long Ebx;
  /* 0x0008 */ unsigned long Edi;
  /* 0x000c */ unsigned long Esi;
  /* 0x0010 */ unsigned long Esp;
  /* 0x0014 */ unsigned long Eip;
  /* 0x0018 */ unsigned long Registration;
  /* 0x001c */ unsigned long TryLevel;
  /* 0x0020 */ unsigned long Cookie;
  /* 0x0024 */ unsigned long UnwindFunc;
  /* 0x0028 */ unsigned long UnwindData[6];
} _JUMP_BUFFER, *P_JUMP_BUFFER; /* size: 0x0040 */

class charNode
{
  /* 0x0000 */ long Padding_1413;
  /* 0x0004 */ char me;
}; /* size: 0x0008 */

typedef struct _STARTUPINFOW
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ unsigned short* lpReserved;
  /* 0x0008 */ unsigned short* lpDesktop;
  /* 0x000c */ unsigned short* lpTitle;
  /* 0x0010 */ unsigned long dwX;
  /* 0x0014 */ unsigned long dwY;
  /* 0x0018 */ unsigned long dwXSize;
  /* 0x001c */ unsigned long dwYSize;
  /* 0x0020 */ unsigned long dwXCountChars;
  /* 0x0024 */ unsigned long dwYCountChars;
  /* 0x0028 */ unsigned long dwFillAttribute;
  /* 0x002c */ unsigned long dwFlags;
  /* 0x0030 */ unsigned short wShowWindow;
  /* 0x0032 */ unsigned short cbReserved2;
  /* 0x0034 */ unsigned char* lpReserved2;
  /* 0x0038 */ void* hStdInput;
  /* 0x003c */ void* hStdOutput;
  /* 0x0040 */ void* hStdError;
} STARTUPINFOW, *PSTARTUPINFOW; /* size: 0x0044 */

struct jpeg_downsampler
{
  /* 0x0000 */ void* start_pass /* function */;
  /* 0x0004 */ void* downsample /* function */;
  /* 0x0008 */ unsigned char need_context_rows;
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

typedef struct _FPIEEE_VALUE
{
  union
  {
    union
    {
      /* 0x0000 */ float Fp32Value;
      /* 0x0000 */ double Fp64Value;
      /* 0x0000 */ struct _FP80 Fp80Value;
      /* 0x0000 */ struct _FP128 Fp128Value;
      /* 0x0000 */ short I16Value;
      /* 0x0000 */ int I32Value;
      /* 0x0000 */ struct _I64 I64Value;
      /* 0x0000 */ unsigned short U16Value;
      /* 0x0000 */ unsigned int U32Value;
      /* 0x0000 */ struct _U64 U64Value;
      /* 0x0000 */ struct _BCD80 Bcd80Value;
      /* 0x0000 */ char* StringValue;
      /* 0x0000 */ int CompareValue;
      /* 0x0000 */ struct _U32ARRAY U32ArrayValue;
      /* 0x0000 */ __int64 Q64Value;
      /* 0x0000 */ struct _FPQ64 Fpq64Value;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ Value;
  struct /* bitfield */
  {
    /* 0x0010 */ unsigned int OperandValid : 1; /* bit position: 0 */
    /* 0x0010 */ unsigned int Format : 4; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0014 */ long __PADDING__[3];
} FPIEEE_VALUE, *PFPIEEE_VALUE; /* size: 0x0020 */

typedef struct _FPIEEE_RECORD
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned int RoundingMode : 2; /* bit position: 0 */
    /* 0x0000 */ unsigned int Precision : 3; /* bit position: 2 */
    /* 0x0000 */ unsigned int Operation : 12; /* bit position: 5 */
  }; /* bitfield */
  /* 0x0004 */ struct _FPIEEE_EXCEPTION_FLAGS Cause;
  /* 0x0008 */ struct _FPIEEE_EXCEPTION_FLAGS Enable;
  /* 0x000c */ struct _FPIEEE_EXCEPTION_FLAGS Status;
  /* 0x0010 */ struct _FPIEEE_VALUE Operand1;
  /* 0x0030 */ struct _FPIEEE_VALUE Operand2;
  /* 0x0050 */ struct _FPIEEE_VALUE Result;
} FPIEEE_RECORD, *PFPIEEE_RECORD; /* size: 0x0070 */

struct jpeg_forward_dct
{
  /* 0x0000 */ void* start_pass /* function */;
  /* 0x0004 */ void* forward_DCT /* function */;
}; /* size: 0x0008 */

typedef struct _IMAGE_NT_HEADERS
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ struct _IMAGE_FILE_HEADER FileHeader;
  /* 0x0018 */ struct _IMAGE_OPTIONAL_HEADER OptionalHeader;
} IMAGE_NT_HEADERS, *PIMAGE_NT_HEADERS; /* size: 0x00f8 */

struct LightGlobals
{
  /* 0x0000 */ int defCount;
  /* 0x0004 */ struct GfxLightDef* defs[64];
}; /* size: 0x0104 */

struct std::pair<GfxSurface * *,GfxSurface * *>
{
}; /* size: 0x0008 */

struct LightDefCopyConfig
{
  /* 0x0000 */ unsigned char* dest;
  /* 0x0004 */ unsigned int zoom;
}; /* size: 0x0008 */

struct MarkModelCoreContext
{
  /* 0x0000 */ struct MarkInfo* markInfo;
  /* 0x0004 */ struct GfxMarkContext* markContext;
  /* 0x0008 */ union vec3_t markOrigin;
  /* 0x0014 */ union vec3_t markDir;
  /* 0x0020 */ const struct MarkClipPlaneSet* clipPlanes;
  /* 0x0024 */ const union vec3_t* transformMatrix;
  /* 0x0028 */ const union vec3_t* transformNormalMatrix;
}; /* size: 0x002c */

typedef struct _FloatOutStruct
{
  /* 0x0000 */ short exp;
  /* 0x0002 */ char sign;
  /* 0x0003 */ char ManLen;
  /* 0x0004 */ char man[22];
} FloatOutStruct, *PFloatOutStruct; /* size: 0x001a */

struct BuiltInMaterialTable
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ struct Material** material;
}; /* size: 0x0008 */

struct stream_source_info_t
{
  /* 0x0000 */ unsigned char Stream;
  /* 0x0001 */ unsigned char Offset;
  /* 0x0002 */ unsigned char Type;
}; /* size: 0x0003 */

struct std::_Pair_base<MaterialMemory *,MaterialMemory *>
{
  /* 0x0000 */ struct MaterialMemory* first;
  /* 0x0004 */ struct MaterialMemory* second;
}; /* size: 0x0008 */

struct MaterialList
{
  /* 0x0000 */ unsigned int count;
  /* 0x0004 */ struct MaterialMemory sorted[4992];
}; /* size: 0x9c04 */

struct GfxShaderConstantBlock
{
  /* 0x0000 */ unsigned int count;
  /* 0x0004 */ unsigned short dest[32];
  /* 0x0044 */ const float* value[32];
}; /* size: 0x00c4 */

struct GfxRenderCommandExecState
{
  /* 0x0000 */ const void* cmd;
}; /* size: 0x0004 */

struct CustomCodeConstantMapping
{
  /* 0x0000 */ unsigned short cbuffer;
  /* 0x0002 */ unsigned short dest;
  /* 0x0004 */ struct MaterialArgumentCodeConst codeConst;
}; /* size: 0x0008 */

typedef struct _s_CatchableTypeArray
{
  /* 0x0000 */ int nCatchableTypes;
  /* 0x0004 */ const struct _s_CatchableType** arrayOfCatchableTypes /* zero-length array */;
} s_CatchableTypeArray, *Ps_CatchableTypeArray; /* size: 0x0004 */

struct MaterialStateMap
{
  /* 0x0000 */ const char* name;
  /* 0x0004 */ struct MaterialStateMapRuleSet* ruleSet[10];
}; /* size: 0x002c */

struct MaterialTypeInfo
{
  /* 0x0000 */ const char* prefix;
  /* 0x0004 */ const char* techniqueSetPrefix;
  /* 0x0008 */ unsigned int prefixLen;
}; /* size: 0x000c */

struct std::pair<Material * *,Material * *>
{
}; /* size: 0x0008 */

struct code_page_info
{
  /* 0x0000 */ int code_page;
  /* 0x0004 */ unsigned short mbulinfo[6];
  /* 0x0010 */ unsigned char rgrange[8][4];
}; /* size: 0x0030 */

typedef struct _D3D11_SHADER_BUFFER_DESC
{
  /* 0x0000 */ const char* Name;
  /* 0x0004 */ enum _D3D_CBUFFER_TYPE Type;
  /* 0x0008 */ unsigned int Variables;
  /* 0x000c */ unsigned int Size;
  /* 0x0010 */ unsigned int uFlags;
} D3D11_SHADER_BUFFER_DESC, *PD3D11_SHADER_BUFFER_DESC; /* size: 0x0014 */

typedef struct _D3D11_SHADER_DESC
{
  /* 0x0000 */ unsigned int Version;
  /* 0x0004 */ const char* Creator;
  /* 0x0008 */ unsigned int Flags;
  /* 0x000c */ unsigned int ConstantBuffers;
  /* 0x0010 */ unsigned int BoundResources;
  /* 0x0014 */ unsigned int InputParameters;
  /* 0x0018 */ unsigned int OutputParameters;
  /* 0x001c */ unsigned int InstructionCount;
  /* 0x0020 */ unsigned int TempRegisterCount;
  /* 0x0024 */ unsigned int TempArrayCount;
  /* 0x0028 */ unsigned int DefCount;
  /* 0x002c */ unsigned int DclCount;
  /* 0x0030 */ unsigned int TextureNormalInstructions;
  /* 0x0034 */ unsigned int TextureLoadInstructions;
  /* 0x0038 */ unsigned int TextureCompInstructions;
  /* 0x003c */ unsigned int TextureBiasInstructions;
  /* 0x0040 */ unsigned int TextureGradientInstructions;
  /* 0x0044 */ unsigned int FloatInstructionCount;
  /* 0x0048 */ unsigned int IntInstructionCount;
  /* 0x004c */ unsigned int UintInstructionCount;
  /* 0x0050 */ unsigned int StaticFlowControlCount;
  /* 0x0054 */ unsigned int DynamicFlowControlCount;
  /* 0x0058 */ unsigned int MacroInstructionCount;
  /* 0x005c */ unsigned int ArrayInstructionCount;
  /* 0x0060 */ unsigned int CutInstructionCount;
  /* 0x0064 */ unsigned int EmitInstructionCount;
  /* 0x0068 */ enum D3D_PRIMITIVE_TOPOLOGY GSOutputTopology;
  /* 0x006c */ unsigned int GSMaxOutputVertexCount;
  /* 0x0070 */ enum D3D_PRIMITIVE InputPrimitive;
  /* 0x0074 */ unsigned int PatchConstantParameters;
  /* 0x0078 */ unsigned int cGSInstanceCount;
  /* 0x007c */ unsigned int cControlPoints;
  /* 0x0080 */ enum D3D_TESSELLATOR_OUTPUT_PRIMITIVE HSOutputPrimitive;
  /* 0x0084 */ enum D3D_TESSELLATOR_PARTITIONING HSPartitioning;
  /* 0x0088 */ enum D3D_TESSELLATOR_DOMAIN TessellatorDomain;
  /* 0x008c */ unsigned int cBarrierInstructions;
  /* 0x0090 */ unsigned int cInterlockedInstructions;
  /* 0x0094 */ unsigned int cTextureStoreInstructions;
} D3D11_SHADER_DESC, *PD3D11_SHADER_DESC; /* size: 0x0098 */

struct ShaderArgumentDest
{
  /* 0x0000 */ struct ShaderIndexRange indexRange;
  /* 0x000c */ const char* paramName;
}; /* size: 0x0010 */

struct box
{
  /* 0x0000 */ int c0min;
  /* 0x0004 */ int c0max;
  /* 0x0008 */ int c1min;
  /* 0x000c */ int c1max;
  /* 0x0010 */ int c2min;
  /* 0x0014 */ int c2max;
  /* 0x0018 */ long volume;
  /* 0x001c */ long colorcount;
}; /* size: 0x0020 */

struct ID3D11ShaderReflection
{
}; /* size: 0x0004 */

typedef struct _D3D11_SHADER_TYPE_DESC
{
  /* 0x0000 */ enum _D3D_SHADER_VARIABLE_CLASS Class;
  /* 0x0004 */ enum _D3D_SHADER_VARIABLE_TYPE Type;
  /* 0x0008 */ unsigned int Rows;
  /* 0x000c */ unsigned int Columns;
  /* 0x0010 */ unsigned int Elements;
  /* 0x0014 */ unsigned int Members;
  /* 0x0018 */ unsigned int Offset;
  /* 0x001c */ const char* Name;
} D3D11_SHADER_TYPE_DESC, *PD3D11_SHADER_TYPE_DESC; /* size: 0x0020 */

typedef struct _D3D11_SHADER_INPUT_BIND_DESC
{
  /* 0x0000 */ const char* Name;
  /* 0x0004 */ enum _D3D_SHADER_INPUT_TYPE Type;
  /* 0x0008 */ unsigned int BindPoint;
  /* 0x000c */ unsigned int BindCount;
  /* 0x0010 */ unsigned int uFlags;
  /* 0x0014 */ enum D3D_RESOURCE_RETURN_TYPE ReturnType;
  /* 0x0018 */ enum D3D_SRV_DIMENSION Dimension;
  /* 0x001c */ unsigned int NumSamples;
} D3D11_SHADER_INPUT_BIND_DESC, *PD3D11_SHADER_INPUT_BIND_DESC; /* size: 0x0020 */

struct ShaderArgumentSource
{
  /* 0x0000 */ struct ShaderIndexRange indexRange;
  /* 0x000c */ unsigned short type;
  /* 0x000e */ char Padding_1414[2];
  union
  {
    union
    {
      /* 0x0010 */ const float* literalConst;
      /* 0x0010 */ unsigned short codeIndex;
      /* 0x0010 */ const char* name;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
}; /* size: 0x0014 */

struct VertexConstantMappingEntry
{
  /* 0x0000 */ unsigned char value;
  /* 0x0001 */ unsigned char materialType;
  /* 0x0002 */ char Padding_1415[2];
  /* 0x0004 */ struct VertexConstantMapping* mappingArray;
  /* 0x0008 */ unsigned int mappingCount;
}; /* size: 0x000c */

struct VertexConstantMapping
{
  /* 0x0000 */ unsigned short type;
  /* 0x0002 */ unsigned short dest;
  /* 0x0004 */ struct MaterialArgumentCodeConst codeConst;
}; /* size: 0x0008 */

struct OcclusionQuery
{
  /* 0x0000 */ BOOL enabled;
  /* 0x0001 */ BOOL error;
  /* 0x0002 */ BOOL isWorldPos;
  /* 0x0003 */ BOOL isValidPos;
  /* 0x0004 */ union vec3_t position;
  /* 0x0010 */ float depthBias;
  /* 0x0014 */ float lastVisibility;
  /* 0x0018 */ int localClientNum;
  /* 0x001c */ int hitNum;
  /* 0x0020 */ BOOL issued[2];
  /* 0x0022 */ char Padding_1416[2];
  /* 0x0024 */ struct ID3D11Query* query[2];
}; /* size: 0x002c */

struct std::_Pair_base<XModel * *,XModel * *>
{
  /* 0x0000 */ struct XModel** first;
  /* 0x0004 */ struct XModel** second;
}; /* size: 0x0008 */

struct GfxModelLightGlob
{
  /* 0x0000 */ float invImageHeight;
  /* 0x0004 */ unsigned int baseIndex;
  /* 0x0008 */ unsigned int totalEntryLimit;
  /* 0x000c */ unsigned int entryBitsY;
  /* 0x0010 */ unsigned int imageHeight;
  /* 0x0014 */ const struct GfxEntity* entities;
  /* 0x0018 */ unsigned int modFrameCount;
  /* 0x001c */ struct GfxImage* image;
  /* 0x0020 */ unsigned int xmodelEntryLimit;
  /* 0x0024 */ struct GfxLightingInfo* lightingInfo;
  /* 0x0028 */ union vec3_t* lightingOrigins;
  /* 0x002c */ struct GfxLightingSHAndVis* lightingSHAndVis;
  /* 0x0030 */ int allocModelFail;
  /* 0x0034 */ unsigned int* pixelFreeBits[4];
  /* 0x0044 */ unsigned int* prevPrevPixelFreeBits;
  /* 0x0048 */ unsigned int* prevPixelFreeBits;
  /* 0x004c */ unsigned int* currPixelFreeBits;
  /* 0x0050 */ unsigned int pixelFreeBitsSize;
  /* 0x0054 */ unsigned int pixelFreeBitsWordCount;
  /* 0x0058 */ unsigned int pixelFreeRover;
  /* 0x005c */ unsigned char* buffer;
  /* 0x0060 */ int currentImage;
  /* 0x0064 */ struct ID3D11Texture3D* stagingImages[2];
  /* 0x006c */ struct D3D11_MAPPED_SUBRESOURCE lockedBox;
}; /* size: 0x0078 */

struct my_memory_mgr
{
  /* 0x0000 */ struct jpeg_memory_mgr pub;
  /* 0x003c */ union small_pool_struct* small_list[2];
  /* 0x0044 */ union large_pool_struct* large_list[2];
  /* 0x004c */ struct jvirt_sarray_control* virt_sarray_list;
  /* 0x0050 */ struct jvirt_barray_control* virt_barray_list;
  /* 0x0054 */ long total_space_allocated;
  /* 0x0058 */ unsigned int last_rowsperchunk;
}; /* size: 0x005c */

struct SseMatrix
{
  /* 0x0000 */ union __m128 col0;
  /* 0x0010 */ union __m128 col1;
  /* 0x0020 */ union __m128 col2;
  /* 0x0030 */ union __m128 col3;
}; /* size: 0x0040 */

class Sse_SkinVertex_1
{
}; /* size: 0x0001 */

struct GfxPackedVertexNormal
{
  /* 0x0000 */ union PackedUnitVec normal;
  /* 0x0004 */ union PackedUnitVec tangent;
}; /* size: 0x0008 */

struct OutdoorGlob
{
  /* 0x0000 */ union vec3_t bbox[2];
  /* 0x0018 */ union vec3_t scale;
  /* 0x0024 */ union vec3_t invScale;
  /* 0x0030 */ union vec3_t add;
  /* 0x003c */ unsigned char* pic;
}; /* size: 0x0040 */

struct GfxShadowedLightEntry
{
  /* 0x0000 */ unsigned char shadowableLightIndex;
  /* 0x0001 */ BOOL isFadingOut;
  /* 0x0002 */ char Padding_1417[2];
  /* 0x0004 */ float fade;
}; /* size: 0x0008 */

struct GfxShadowedLightHistory
{
  /* 0x0000 */ struct GfxShadowedLightEntry entries[4];
  /* 0x0020 */ unsigned int entryCount;
  /* 0x0024 */ unsigned int lastUpdateTime;
}; /* size: 0x0028 */

struct GfxCmdStretchPicRotateXY
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ const struct Material* material;
  /* 0x0008 */ float x;
  /* 0x000c */ float y;
  /* 0x0010 */ float w0;
  /* 0x0014 */ float w;
  /* 0x0018 */ float h;
  /* 0x001c */ float s0;
  /* 0x0020 */ float t0;
  /* 0x0024 */ float s1;
  /* 0x0028 */ float t1;
  /* 0x002c */ union GfxColor color;
  /* 0x0030 */ float rotation;
}; /* size: 0x0034 */

typedef struct _DDOVERLAYFX
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwAlphaEdgeBlendBitDepth;
  /* 0x0008 */ unsigned long dwAlphaEdgeBlend;
  /* 0x000c */ unsigned long dwReserved;
  /* 0x0010 */ unsigned long dwAlphaDestConstBitDepth;
  union
  {
    /* 0x0014 */ unsigned long dwAlphaDestConst;
    /* 0x0014 */ struct IDirectDrawSurface* lpDDSAlphaDest;
  }; /* size: 0x0004 */
  /* 0x0018 */ unsigned long dwAlphaSrcConstBitDepth;
  union
  {
    /* 0x001c */ unsigned long dwAlphaSrcConst;
    /* 0x001c */ struct IDirectDrawSurface* lpDDSAlphaSrc;
  }; /* size: 0x0004 */
  /* 0x0020 */ struct _DDCOLORKEY dckDestColorkey;
  /* 0x0028 */ struct _DDCOLORKEY dckSrcColorkey;
  /* 0x0030 */ unsigned long dwDDFX;
  /* 0x0034 */ unsigned long dwFlags;
} DDOVERLAYFX, *PDDOVERLAYFX; /* size: 0x0038 */

struct GfxCmdSetViewport
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ struct GfxViewport viewport;
}; /* size: 0x0014 */

typedef struct _TEB_ACTIVE_FRAME
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ struct _TEB_ACTIVE_FRAME* Previous;
  /* 0x0008 */ const struct _TEB_ACTIVE_FRAME_CONTEXT* Context;
} TEB_ACTIVE_FRAME, *PTEB_ACTIVE_FRAME; /* size: 0x000c */

struct GfxCmdDrawFramed2D
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ float x;
  /* 0x0008 */ float y;
  /* 0x000c */ float w;
  /* 0x0010 */ float h;
  /* 0x0014 */ float thicknessW;
  /* 0x0018 */ float thicknessH;
  /* 0x001c */ float thicknessTex;
  /* 0x0020 */ int sides;
  /* 0x0024 */ union GfxColor color;
  /* 0x0028 */ const struct Material* material;
}; /* size: 0x002c */

struct GfxCmdDrawText2D
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ int type;
  /* 0x0008 */ float x;
  /* 0x000c */ float y;
  /* 0x0010 */ float w;
  /* 0x0014 */ float h;
  /* 0x0018 */ float rotation;
  /* 0x001c */ struct Font_s* font;
  /* 0x0020 */ float xScale;
  /* 0x0024 */ float yScale;
  /* 0x0028 */ union GfxColor color;
  /* 0x002c */ int maxChars;
  /* 0x0030 */ int renderFlags;
  /* 0x0034 */ int cursorPos;
  /* 0x0038 */ char cursorLetter;
  /* 0x0039 */ char Padding_1418[3];
  /* 0x003c */ union GfxColor glowForceColor;
  /* 0x0040 */ int fxBirthTime;
  /* 0x0044 */ int fxLetterTime;
  /* 0x0048 */ int fxDecayStartTime;
  /* 0x004c */ int fxDecayDuration;
  /* 0x0050 */ int fxRedactDecayStartTime;
  /* 0x0054 */ int fxRedactDecayDuration;
  /* 0x0058 */ const struct Material* fxMaterial;
  /* 0x005c */ const struct Material* fxMaterialGlow;
  /* 0x0060 */ float padding;
  /* 0x0064 */ char text[3];
  /* 0x0067 */ char __PADDING__[1];
}; /* size: 0x0068 */

struct GfxCmdDrawQuadPic
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ const struct Material* material;
  /* 0x0008 */ union vec2_t verts[4];
  /* 0x0028 */ float w;
  /* 0x002c */ union GfxColor color;
}; /* size: 0x0030 */

struct LIST_ENTRY32
{
  /* 0x0000 */ unsigned long Flink;
  /* 0x0004 */ unsigned long Blink;
}; /* size: 0x0008 */

struct GfxCmdDrawPoints
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ short pointCount;
  /* 0x0006 */ unsigned char size;
  /* 0x0007 */ unsigned char dimensions;
  /* 0x0008 */ struct GfxPointVertex verts[1];
}; /* size: 0x0018 */

struct GfxCmdConstantSet
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ struct ShaderConstantSet scs;
}; /* size: 0x007c */

struct GfxCmdSetCustomConstant
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ unsigned int type;
  /* 0x0008 */ union vec4_t vec;
}; /* size: 0x0018 */

struct GfxCmdSetScissor
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ int enabled;
  /* 0x0008 */ struct GfxViewport scissor;
}; /* size: 0x0018 */

struct GfxCmdStretchComposite
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ const struct GfxImage* image;
  /* 0x0008 */ struct GfxQuad quad;
  /* 0x005c */ unsigned char stencilValue;
  struct
  {
    struct /* bitfield */
    {
      /* 0x005d */ unsigned char stencilWrite : 1; /* bit position: 0 */
      /* 0x005d */ unsigned char noclip : 1; /* bit position: 1 */
    }; /* bitfield */
  } /* size: 0x0001 */ bits;
  /* 0x005e */ char __PADDING__[2];
}; /* size: 0x0060 */

struct GfxCmdDrawLines
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ short lineCount;
  /* 0x0006 */ unsigned char width;
  /* 0x0007 */ unsigned char dimensions;
  /* 0x0008 */ struct GfxPointVertex verts[2];
}; /* size: 0x0028 */

struct GfxCmdStretchPic
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ const struct Material* material;
  /* 0x0008 */ float x;
  /* 0x000c */ float y;
  /* 0x0010 */ float w0;
  /* 0x0014 */ float w;
  /* 0x0018 */ float h;
  /* 0x001c */ float s0;
  /* 0x0020 */ float t0;
  /* 0x0024 */ float s1;
  /* 0x0028 */ float t1;
  /* 0x002c */ union GfxColor color;
}; /* size: 0x0030 */

struct GfxCmdStretchPicRotateST
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ const struct Material* material;
  /* 0x0008 */ float x;
  /* 0x000c */ float y;
  /* 0x0010 */ float w;
  /* 0x0014 */ float h;
  /* 0x0018 */ float centerS;
  /* 0x001c */ float centerT;
  /* 0x0020 */ float radiusST;
  /* 0x0024 */ float scaleFinalS;
  /* 0x0028 */ float scaleFinalT;
  /* 0x002c */ union GfxColor color;
  /* 0x0030 */ float rotation;
}; /* size: 0x0034 */

struct GfxCmdBlendSavedScreenFlashed
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ float intensityWhiteout;
  /* 0x0008 */ float intensityScreengrab;
  /* 0x000c */ float s0;
  /* 0x0010 */ float t0;
  /* 0x0014 */ float ds;
  /* 0x0018 */ float dt;
}; /* size: 0x001c */

struct GfxCmdDrawUIQuads
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ const struct Material* material;
  /* 0x0008 */ short quadCount;
  /* 0x000a */ unsigned char stencilValue;
  struct
  {
    struct /* bitfield */
    {
      /* 0x000b */ unsigned char stencilWrite : 1; /* bit position: 0 */
      /* 0x000b */ unsigned char noclip : 1; /* bit position: 1 */
    }; /* bitfield */
  } /* size: 0x0001 */ bits;
}; /* size: 0x000c */

struct GfxCmdPCCopyImageGenMIP
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ void* callback /* function */;
  /* 0x0008 */ struct GfxImage* image;
  /* 0x000c */ void* job;
}; /* size: 0x0010 */

struct GfxCmdBlendSavedScreenBlurred
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ int fadeMsec;
  /* 0x0008 */ float s0;
  /* 0x000c */ float t0;
  /* 0x0010 */ float ds;
  /* 0x0014 */ float dt;
  /* 0x0018 */ int screenTimerId;
}; /* size: 0x001c */

struct GfxCmdBeginView
{
  /* 0x0000 */ struct GfxCmdHeader header;
  /* 0x0004 */ struct GfxSceneDef sceneDef;
  /* 0x0018 */ const struct GfxViewParms* viewParms;
}; /* size: 0x001c */

struct ExtraCamSettings
{
  /* 0x0000 */ BOOL enabled;
  /* 0x0001 */ char Padding_1419[3];
  /* 0x0004 */ int width;
  /* 0x0008 */ int height;
  /* 0x000c */ int multiExtraCamWidth;
  /* 0x0010 */ int multiExtraCamHeight;
  /* 0x0014 */ int location;
}; /* size: 0x0018 */

struct GfxRenderTargetTexture
{
}; /* size: 0x0001 */

typedef struct _GDI_TEB_BATCH
{
  /* 0x0000 */ unsigned long Offset;
  /* 0x0004 */ unsigned long HDC;
  /* 0x0008 */ unsigned long Buffer[310];
} GDI_TEB_BATCH, *PGDI_TEB_BATCH; /* size: 0x04e0 */

typedef struct _Wx86ThreadState
{
  /* 0x0000 */ unsigned long* CallBx86Eip;
  /* 0x0004 */ void* DeallocationCpu;
  /* 0x0008 */ unsigned char UseKnownWx86Dll;
  /* 0x0009 */ char OleStubInvoked;
  /* 0x000a */ char __PADDING__[2];
} Wx86ThreadState, *PWx86ThreadState; /* size: 0x000c */

typedef struct _TEB
{
  /* 0x0000 */ struct _NT_TIB NtTib;
  /* 0x001c */ void* EnvironmentPointer;
  /* 0x0020 */ struct _CLIENT_ID ClientId;
  /* 0x0028 */ void* ActiveRpcHandle;
  /* 0x002c */ void* ThreadLocalStoragePointer;
  /* 0x0030 */ struct _PEB* ProcessEnvironmentBlock;
  /* 0x0034 */ unsigned long LastErrorValue;
  /* 0x0038 */ unsigned long CountOfOwnedCriticalSections;
  /* 0x003c */ void* CsrClientThread;
  /* 0x0040 */ void* Win32ThreadInfo;
  /* 0x0044 */ unsigned long User32Reserved[26];
  /* 0x00ac */ unsigned long UserReserved[5];
  /* 0x00c0 */ void* WOW32Reserved;
  /* 0x00c4 */ unsigned long CurrentLocale;
  /* 0x00c8 */ unsigned long FpSoftwareStatusRegister;
  /* 0x00cc */ void* SystemReserved1[54];
  /* 0x01a4 */ long ExceptionCode;
  /* 0x01a8 */ struct _ACTIVATION_CONTEXT_STACK ActivationContextStack;
  /* 0x01bc */ unsigned char SpareBytes1[24];
  /* 0x01d4 */ struct _GDI_TEB_BATCH GdiTebBatch;
  /* 0x06b4 */ struct _CLIENT_ID RealClientId;
  /* 0x06bc */ void* GdiCachedProcessHandle;
  /* 0x06c0 */ unsigned long GdiClientPID;
  /* 0x06c4 */ unsigned long GdiClientTID;
  /* 0x06c8 */ void* GdiThreadLocalInfo;
  /* 0x06cc */ unsigned long Win32ClientInfo[62];
  /* 0x07c4 */ void* glDispatchTable[233];
  /* 0x0b68 */ unsigned long glReserved1[29];
  /* 0x0bdc */ void* glReserved2;
  /* 0x0be0 */ void* glSectionInfo;
  /* 0x0be4 */ void* glSection;
  /* 0x0be8 */ void* glTable;
  /* 0x0bec */ void* glCurrentRC;
  /* 0x0bf0 */ void* glContext;
  /* 0x0bf4 */ unsigned long LastStatusValue;
  /* 0x0bf8 */ struct _UNICODE_STRING StaticUnicodeString;
  /* 0x0c00 */ wchar_t StaticUnicodeBuffer[261];
  /* 0x0e0a */ char Padding_1420[2];
  /* 0x0e0c */ void* DeallocationStack;
  /* 0x0e10 */ void* TlsSlots[64];
  /* 0x0f10 */ struct _LIST_ENTRY TlsLinks;
  /* 0x0f18 */ void* Vdm;
  /* 0x0f1c */ void* ReservedForNtRpc;
  /* 0x0f20 */ void* DbgSsReserved[2];
  /* 0x0f28 */ unsigned long HardErrorMode;
  /* 0x0f2c */ void* Instrumentation[16];
  /* 0x0f6c */ void* WinSockData;
  /* 0x0f70 */ unsigned long GdiBatchCount;
  /* 0x0f74 */ unsigned char InDbgPrint;
  /* 0x0f75 */ unsigned char FreeStackOnTermination;
  /* 0x0f76 */ unsigned char HasFiberData;
  /* 0x0f77 */ unsigned char IdealProcessor;
  /* 0x0f78 */ unsigned long Spare3;
  /* 0x0f7c */ void* ReservedForPerf;
  /* 0x0f80 */ void* ReservedForOle;
  /* 0x0f84 */ unsigned long WaitingOnLoaderLock;
  /* 0x0f88 */ struct _Wx86ThreadState Wx86Thread;
  /* 0x0f94 */ void** TlsExpansionSlots;
  /* 0x0f98 */ unsigned long ImpersonationLocale;
  /* 0x0f9c */ unsigned long IsImpersonating;
  /* 0x0fa0 */ void* NlsCache;
  /* 0x0fa4 */ void* pShimData;
  /* 0x0fa8 */ unsigned long HeapVirtualAffinity;
  /* 0x0fac */ void* CurrentTransactionHandle;
  /* 0x0fb0 */ struct _TEB_ACTIVE_FRAME* ActiveFrame;
  /* 0x0fb4 */ void* FlsData;
} TEB, *PTEB; /* size: 0x0fb8 */

struct SceneEntCmd
{
  /* 0x0000 */ const struct GfxViewInfo* viewInfo;
  /* 0x0004 */ const struct GfxSunShadow* sunShadow;
  /* 0x0008 */ int sceneStage;
  /* 0x000c */ BOOL sceneCalculatedSunShadow;
  /* 0x000d */ char __PADDING__[3];
}; /* size: 0x0010 */

struct IDirectDrawClipper
{
}; /* size: 0x0004 */

union GfxShaderConstantState
{
  union
  {
    struct
    {
      /* 0x0000 */ struct MaterialArgumentCodeConst codeConst;
      /* 0x0004 */ unsigned int version;
    } /* size: 0x0008 */ fields;
    /* 0x0000 */ unsigned __int64 packed;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

class std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0>::value_compare;

class std::reverse_iterator<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > > >;

class std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0>::value_compare;

class std::reverse_iterator<std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > > >;

struct std::binary_function<unsigned int,unsigned int,bool>
{
}; /* size: 0x0001 */

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >;

class std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >;

class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node>
{
}; /* size: 0x0001 */

struct std::_Allocator_base<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >
{
}; /* size: 0x0001 */

struct std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node>
{
}; /* size: 0x0001 */

class std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >
{
  /* 0x0000 */ long Padding_1421;
  /* 0x0004 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node* _Myhead;
  /* 0x0008 */ unsigned int _Mysize;
  /* 0x000c */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node> _Alnod;
  /* 0x000d */ class std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> > _Alval;
}; /* size: 0x0010 */

struct std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node>
{
}; /* size: 0x0001 */

class std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >
{
  /* 0x0000 */ long Padding_1422;
  /* 0x0004 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node* _Myhead;
  /* 0x0008 */ unsigned int _Mysize;
  /* 0x000c */ class std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node> _Alnod;
  /* 0x000d */ class std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> > _Alval;
}; /* size: 0x0010 */

struct std::pair<unsigned __int64,ID3D11DepthStencilState *>;

struct std::_Pair_base<unsigned __int64 const ,ID3D11DepthStencilState *>
{
  /* 0x0000 */ const unsigned __int64 first;
  /* 0x0008 */ struct ID3D11DepthStencilState* second;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >,std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > > >;

struct std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node>
{
}; /* size: 0x0001 */

class std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0>
{
  /* 0x0000 */ struct std::less<unsigned int> comp;
}; /* size: 0x0001 */

class std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >,std::_Iterator_base0>
{
  /* 0x0000 */ struct std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node* _Ptr;
}; /* size: 0x0004 */

struct std::_Allocator_base<std::pair<unsigned int const ,ID3D11BlendState *> >
{
}; /* size: 0x0001 */

struct std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >,bool>
{
}; /* size: 0x0008 */

struct phuff_entropy_encoder
{
  /* 0x0000 */ struct jpeg_entropy_encoder pub;
  /* 0x000c */ unsigned char gather_statistics;
  /* 0x000d */ char Padding_1423[3];
  /* 0x0010 */ unsigned char* next_output_byte;
  /* 0x0014 */ unsigned int free_in_buffer;
  /* 0x0018 */ long put_buffer;
  /* 0x001c */ int put_bits;
  /* 0x0020 */ struct jpeg_compress_struct* cinfo;
  /* 0x0024 */ int last_dc_val[4];
  /* 0x0034 */ int ac_tbl_no;
  /* 0x0038 */ unsigned int EOBRUN;
  /* 0x003c */ unsigned int BE;
  /* 0x0040 */ char* bit_buffer;
  /* 0x0044 */ unsigned int restarts_to_go;
  /* 0x0048 */ int next_restart_num;
  /* 0x004c */ struct c_derived_tbl* derived_tbls[4];
  /* 0x005c */ long* count_ptrs[4];
}; /* size: 0x006c */

class std::_Tree<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >
{
}; /* size: 0x0010 */

struct std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned __int64 const ,ID3D11DepthStencilState *>,int,std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> const *,std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> const &,std::_Iterator_base0>
{
}; /* size: 0x0001 */

union DepthStencilBitsMask
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned int stateBits1;
      /* 0x0004 */ unsigned char mask;
    }; /* size: 0x0005 */
    /* 0x0000 */ unsigned __int64 u;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct IPakDataChunkHeader
{
  /* 0x0000 */ unsigned int countAndOffset;
  /* 0x0004 */ unsigned int commands[31];
}; /* size: 0x0080 */

struct StreamAllocGlob
{
  /* 0x0000 */ struct StreamTempImage tempImages[32];
}; /* size: 0x0180 */

struct CoronaState
{
  /* 0x0000 */ unsigned int numActive;
  /* 0x0004 */ unsigned int numPending;
  /* 0x0008 */ struct Corona active[16];
  /* 0x0488 */ struct Corona pending[16];
}; /* size: 0x0908 */

struct tagDDDEVICEIDENTIFIER2
{
  /* 0x0000 */ char szDriver[512];
  /* 0x0200 */ char szDescription[512];
  /* 0x0400 */ union _LARGE_INTEGER liDriverVersion;
  /* 0x0408 */ unsigned long dwVendorId;
  /* 0x040c */ unsigned long dwDeviceId;
  /* 0x0410 */ unsigned long dwSubSysId;
  /* 0x0414 */ unsigned long dwRevision;
  /* 0x0418 */ struct _GUID guidDeviceIdentifier;
  /* 0x0428 */ unsigned long dwWHQLLevel;
  /* 0x042c */ long __PADDING__[1];
}; /* size: 0x0430 */

typedef struct _DDSCAPS2
{
  /* 0x0000 */ unsigned long dwCaps;
  /* 0x0004 */ unsigned long dwCaps2;
  /* 0x0008 */ unsigned long dwCaps3;
  union
  {
    /* 0x000c */ unsigned long dwCaps4;
    /* 0x000c */ unsigned long dwVolumeDepth;
  }; /* size: 0x0004 */
} DDSCAPS2, *PDDSCAPS2; /* size: 0x0010 */

struct GfxImageFilter
{
  /* 0x0000 */ int passCount;
  /* 0x0004 */ struct GfxImageFilterPass passes[32];
  /* 0x1384 */ struct GfxImage* sourceImage;
  /* 0x1388 */ unsigned char finalTarget;
  /* 0x1389 */ char __PADDING__[3];
}; /* size: 0x138c */

class DDraw
{
  /* 0x0000 */ void* pDirectDrawCreateEx /* function */;
  /* 0x0004 */ void* pDirectDrawEnumerateEx /* function */;
  /* 0x0008 */ struct HINSTANCE__* hDDraw;
  /* 0x000c */ struct _GUID* lpGUID;
  /* 0x0010 */ BOOL Initialized;
}; /* size: 0x0014 */

typedef struct _DDCAPS_DX7
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwCaps;
  /* 0x0008 */ unsigned long dwCaps2;
  /* 0x000c */ unsigned long dwCKeyCaps;
  /* 0x0010 */ unsigned long dwFXCaps;
  /* 0x0014 */ unsigned long dwFXAlphaCaps;
  /* 0x0018 */ unsigned long dwPalCaps;
  /* 0x001c */ unsigned long dwSVCaps;
  /* 0x0020 */ unsigned long dwAlphaBltConstBitDepths;
  /* 0x0024 */ unsigned long dwAlphaBltPixelBitDepths;
  /* 0x0028 */ unsigned long dwAlphaBltSurfaceBitDepths;
  /* 0x002c */ unsigned long dwAlphaOverlayConstBitDepths;
  /* 0x0030 */ unsigned long dwAlphaOverlayPixelBitDepths;
  /* 0x0034 */ unsigned long dwAlphaOverlaySurfaceBitDepths;
  /* 0x0038 */ unsigned long dwZBufferBitDepths;
  /* 0x003c */ unsigned long dwVidMemTotal;
  /* 0x0040 */ unsigned long dwVidMemFree;
  /* 0x0044 */ unsigned long dwMaxVisibleOverlays;
  /* 0x0048 */ unsigned long dwCurrVisibleOverlays;
  /* 0x004c */ unsigned long dwNumFourCCCodes;
  /* 0x0050 */ unsigned long dwAlignBoundarySrc;
  /* 0x0054 */ unsigned long dwAlignSizeSrc;
  /* 0x0058 */ unsigned long dwAlignBoundaryDest;
  /* 0x005c */ unsigned long dwAlignSizeDest;
  /* 0x0060 */ unsigned long dwAlignStrideAlign;
  /* 0x0064 */ unsigned long dwRops[8];
  /* 0x0084 */ struct _DDSCAPS ddsOldCaps;
  /* 0x0088 */ unsigned long dwMinOverlayStretch;
  /* 0x008c */ unsigned long dwMaxOverlayStretch;
  /* 0x0090 */ unsigned long dwMinLiveVideoStretch;
  /* 0x0094 */ unsigned long dwMaxLiveVideoStretch;
  /* 0x0098 */ unsigned long dwMinHwCodecStretch;
  /* 0x009c */ unsigned long dwMaxHwCodecStretch;
  /* 0x00a0 */ unsigned long dwReserved1;
  /* 0x00a4 */ unsigned long dwReserved2;
  /* 0x00a8 */ unsigned long dwReserved3;
  /* 0x00ac */ unsigned long dwSVBCaps;
  /* 0x00b0 */ unsigned long dwSVBCKeyCaps;
  /* 0x00b4 */ unsigned long dwSVBFXCaps;
  /* 0x00b8 */ unsigned long dwSVBRops[8];
  /* 0x00d8 */ unsigned long dwVSBCaps;
  /* 0x00dc */ unsigned long dwVSBCKeyCaps;
  /* 0x00e0 */ unsigned long dwVSBFXCaps;
  /* 0x00e4 */ unsigned long dwVSBRops[8];
  /* 0x0104 */ unsigned long dwSSBCaps;
  /* 0x0108 */ unsigned long dwSSBCKeyCaps;
  /* 0x010c */ unsigned long dwSSBFXCaps;
  /* 0x0110 */ unsigned long dwSSBRops[8];
  /* 0x0130 */ unsigned long dwMaxVideoPorts;
  /* 0x0134 */ unsigned long dwCurrVideoPorts;
  /* 0x0138 */ unsigned long dwSVBCaps2;
  /* 0x013c */ unsigned long dwNLVBCaps;
  /* 0x0140 */ unsigned long dwNLVBCaps2;
  /* 0x0144 */ unsigned long dwNLVBCKeyCaps;
  /* 0x0148 */ unsigned long dwNLVBFXCaps;
  /* 0x014c */ unsigned long dwNLVBRops[8];
  /* 0x016c */ struct _DDSCAPS2 ddsCaps;
} DDCAPS_DX7, *PDDCAPS_DX7; /* size: 0x017c */

typedef struct _DDSURFACEDESC2
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long dwHeight;
  /* 0x000c */ unsigned long dwWidth;
  union
  {
    /* 0x0010 */ long lPitch;
    /* 0x0010 */ unsigned long dwLinearSize;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0014 */ unsigned long dwBackBufferCount;
    /* 0x0014 */ unsigned long dwDepth;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0018 */ unsigned long dwMipMapCount;
    /* 0x0018 */ unsigned long dwRefreshRate;
    /* 0x0018 */ unsigned long dwSrcVBHandle;
  }; /* size: 0x0004 */
  /* 0x001c */ unsigned long dwAlphaBitDepth;
  /* 0x0020 */ unsigned long dwReserved;
  /* 0x0024 */ void* lpSurface;
  union
  {
    /* 0x0028 */ struct _DDCOLORKEY ddckCKDestOverlay;
    /* 0x0028 */ unsigned long dwEmptyFaceColor;
  }; /* size: 0x0008 */
  /* 0x0030 */ struct _DDCOLORKEY ddckCKDestBlt;
  /* 0x0038 */ struct _DDCOLORKEY ddckCKSrcOverlay;
  /* 0x0040 */ struct _DDCOLORKEY ddckCKSrcBlt;
  union
  {
    /* 0x0048 */ struct _DDPIXELFORMAT ddpfPixelFormat;
    /* 0x0048 */ unsigned long dwFVF;
  }; /* size: 0x0020 */
  /* 0x0068 */ struct _DDSCAPS2 ddsCaps;
  /* 0x0078 */ unsigned long dwTextureStage;
} DDSURFACEDESC2, *PDDSURFACEDESC2; /* size: 0x007c */

struct Ui3dTextureWindow
{
  /* 0x0000 */ struct GfxViewport vp;
  /* 0x0010 */ struct ScreenPlacement scrPlace;
  /* 0x008c */ float normX;
  /* 0x0090 */ float normY;
  /* 0x0094 */ float normW;
  /* 0x0098 */ float normH;
  /* 0x009c */ int numRenderCmds;
  /* 0x00a0 */ int numRenderCmdsThatDrawsSomething;
}; /* size: 0x00a4 */

struct XVertexInfo1
{
  /* 0x0000 */ struct XVertexInfo0 vert0;
  /* 0x0002 */ struct XBlendLoadInfo blend[1];
}; /* size: 0x0006 */

struct DrawEmissiveFXCallbacUserData
{
  /* 0x0000 */ unsigned char targetId;
  /* 0x0001 */ char Padding_1424[3];
  /* 0x0004 */ unsigned int drawListIndex;
}; /* size: 0x0008 */

struct my_fdct_controller
{
  /* 0x0000 */ struct jpeg_forward_dct pub;
  /* 0x0008 */ void* do_dct /* function */;
  /* 0x000c */ int* divisors[4];
  /* 0x001c */ void* do_float_dct /* function */;
  /* 0x0020 */ float* float_divisors[4];
}; /* size: 0x0030 */

struct working_state
{
  /* 0x0000 */ unsigned char* next_output_byte;
  /* 0x0004 */ unsigned int free_in_buffer;
  /* 0x0008 */ struct savable_state cur;
  /* 0x001c */ long Padding_1425;
  /* 0x0020 */ struct jpeg_compress_struct* cinfo;
}; /* size: 0x0024 */

struct huff_entropy_encoder
{
  /* 0x0000 */ struct jpeg_entropy_encoder pub;
  /* 0x000c */ struct savable_state saved;
  /* 0x0020 */ long Padding_1426;
  /* 0x0024 */ unsigned int restarts_to_go;
  /* 0x0028 */ int next_restart_num;
  /* 0x002c */ struct c_derived_tbl* dc_derived_tbls[4];
  /* 0x003c */ struct c_derived_tbl* ac_derived_tbls[4];
  /* 0x004c */ long* dc_count_ptrs[4];
  /* 0x005c */ long* ac_count_ptrs[4];
}; /* size: 0x006c */

struct my_main_controller
{
  /* 0x0000 */ struct jpeg_c_main_controller pub;
  /* 0x0008 */ unsigned int cur_iMCU_row;
  /* 0x000c */ unsigned int rowgroup_ctr;
  /* 0x0010 */ unsigned char suspended;
  /* 0x0011 */ char Padding_1427[3];
  /* 0x0014 */ enum J_BUF_MODE pass_mode;
  /* 0x0018 */ unsigned char** buffer[10];
}; /* size: 0x0040 */

struct my_marker_writer
{
  /* 0x0000 */ struct jpeg_marker_writer pub;
  /* 0x001c */ unsigned int last_restart_interval;
}; /* size: 0x0020 */

struct my_comp_master
{
  /* 0x0000 */ struct jpeg_comp_master pub;
  /* 0x0010 */ enum c_pass_type pass_type;
  /* 0x0014 */ int pass_number;
  /* 0x0018 */ int total_passes;
  /* 0x001c */ int scan_number;
}; /* size: 0x0020 */

struct my_downsampler
{
  /* 0x0000 */ struct jpeg_downsampler pub;
  /* 0x000c */ void* methods[10] /* function */;
}; /* size: 0x0034 */

struct my_source_mgr
{
  /* 0x0000 */ struct jpeg_source_mgr pub;
  /* 0x001c */ unsigned char start_of_file;
  /* 0x001d */ char __PADDING__[3];
}; /* size: 0x0020 */

struct my_idct_controller
{
  /* 0x0000 */ struct jpeg_inverse_dct pub;
  /* 0x002c */ int cur_method[10];
}; /* size: 0x0054 */

struct my_input_controller
{
  /* 0x0000 */ struct jpeg_input_controller pub;
  /* 0x0014 */ unsigned char inheaders;
  /* 0x0015 */ char __PADDING__[3];
}; /* size: 0x0018 */

struct my_decomp_master
{
  /* 0x0000 */ struct jpeg_decomp_master pub;
  /* 0x000c */ int pass_number;
  /* 0x0010 */ unsigned char using_merged_upsample;
  /* 0x0011 */ char Padding_1428[3];
  /* 0x0014 */ struct jpeg_color_quantizer* quantizer_1pass;
  /* 0x0018 */ struct jpeg_color_quantizer* quantizer_2pass;
}; /* size: 0x001c */

struct phuff_entropy_decoder
{
  /* 0x0000 */ struct jpeg_entropy_decoder pub;
  /* 0x000c */ struct bitread_perm_state bitstate;
  /* 0x0014 */ struct savable_state saved;
  /* 0x0028 */ unsigned int restarts_to_go;
  /* 0x002c */ struct d_derived_tbl* derived_tbls[4];
  /* 0x003c */ struct d_derived_tbl* ac_derived_tbl;
}; /* size: 0x0040 */

union small_pool_struct
{
  union
  {
    struct
    {
      /* 0x0000 */ union small_pool_struct* next;
      /* 0x0004 */ unsigned int bytes_used;
      /* 0x0008 */ unsigned int bytes_left;
    } /* size: 0x000c */ hdr;
    /* 0x0000 */ double dummy;
  }; /* size: 0x000c */
}; /* size: 0x0010 */

typedef struct _PEB_FREE_BLOCK
{
  /* 0x0000 */ struct _PEB_FREE_BLOCK* Next;
  /* 0x0004 */ unsigned long Size;
} PEB_FREE_BLOCK, *PPEB_FREE_BLOCK; /* size: 0x0008 */

typedef struct _PEB_LDR_DATA
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned char Initialized;
  /* 0x0005 */ char Padding_1429[3];
  /* 0x0008 */ void* SsHandle;
  /* 0x000c */ struct _LIST_ENTRY InLoadOrderModuleList;
  /* 0x0014 */ struct _LIST_ENTRY InMemoryOrderModuleList;
  /* 0x001c */ struct _LIST_ENTRY InInitializationOrderModuleList;
  /* 0x0024 */ void* EntryInProgress;
} PEB_LDR_DATA, *PPEB_LDR_DATA; /* size: 0x0028 */

struct _RTL_USER_PROCESS_PARAMETERS;

struct _ACTIVATION_CONTEXT_DATA;

typedef struct _PEB
{
  /* 0x0000 */ unsigned char InheritedAddressSpace;
  /* 0x0001 */ unsigned char ReadImageFileExecOptions;
  /* 0x0002 */ unsigned char BeingDebugged;
  /* 0x0003 */ unsigned char SpareBool;
  /* 0x0004 */ void* Mutant;
  /* 0x0008 */ void* ImageBaseAddress;
  /* 0x000c */ struct _PEB_LDR_DATA* Ldr;
  /* 0x0010 */ struct _RTL_USER_PROCESS_PARAMETERS* ProcessParameters;
  /* 0x0014 */ void* SubSystemData;
  /* 0x0018 */ void* ProcessHeap;
  /* 0x001c */ struct _RTL_CRITICAL_SECTION* FastPebLock;
  /* 0x0020 */ void* SparePtr1;
  /* 0x0024 */ void* SparePtr2;
  /* 0x0028 */ unsigned long EnvironmentUpdateCount;
  /* 0x002c */ void* KernelCallbackTable;
  /* 0x0030 */ unsigned long SystemReserved[1];
  struct /* bitfield */
  {
    /* 0x0034 */ unsigned long ExecuteOptions : 2; /* bit position: 0 */
    /* 0x0034 */ unsigned long SpareBits : 30; /* bit position: 2 */
  }; /* bitfield */
  /* 0x0038 */ struct _PEB_FREE_BLOCK* FreeList;
  /* 0x003c */ unsigned long TlsExpansionCounter;
  /* 0x0040 */ void* TlsBitmap;
  /* 0x0044 */ unsigned long TlsBitmapBits[2];
  /* 0x004c */ void* ReadOnlySharedMemoryBase;
  /* 0x0050 */ void* ReadOnlySharedMemoryHeap;
  /* 0x0054 */ void** ReadOnlyStaticServerData;
  /* 0x0058 */ void* AnsiCodePageData;
  /* 0x005c */ void* OemCodePageData;
  /* 0x0060 */ void* UnicodeCaseTableData;
  /* 0x0064 */ unsigned long NumberOfProcessors;
  /* 0x0068 */ unsigned long NtGlobalFlag;
  /* 0x006c */ long Padding_1430;
  /* 0x0070 */ union _LARGE_INTEGER CriticalSectionTimeout;
  /* 0x0078 */ unsigned long HeapSegmentReserve;
  /* 0x007c */ unsigned long HeapSegmentCommit;
  /* 0x0080 */ unsigned long HeapDeCommitTotalFreeThreshold;
  /* 0x0084 */ unsigned long HeapDeCommitFreeBlockThreshold;
  /* 0x0088 */ unsigned long NumberOfHeaps;
  /* 0x008c */ unsigned long MaximumNumberOfHeaps;
  /* 0x0090 */ void** ProcessHeaps;
  /* 0x0094 */ void* GdiSharedHandleTable;
  /* 0x0098 */ void* ProcessStarterHelper;
  /* 0x009c */ unsigned long GdiDCAttributeList;
  /* 0x00a0 */ struct _RTL_CRITICAL_SECTION* LoaderLock;
  /* 0x00a4 */ unsigned long OSMajorVersion;
  /* 0x00a8 */ unsigned long OSMinorVersion;
  /* 0x00ac */ unsigned short OSBuildNumber;
  /* 0x00ae */ unsigned short OSCSDVersion;
  /* 0x00b0 */ unsigned long OSPlatformId;
  /* 0x00b4 */ unsigned long ImageSubsystem;
  /* 0x00b8 */ unsigned long ImageSubsystemMajorVersion;
  /* 0x00bc */ unsigned long ImageSubsystemMinorVersion;
  /* 0x00c0 */ unsigned long ImageProcessAffinityMask;
  /* 0x00c4 */ unsigned long GdiHandleBuffer[34];
  /* 0x014c */ void* PostProcessInitRoutine /* function */;
  /* 0x0150 */ void* TlsExpansionBitmap;
  /* 0x0154 */ unsigned long TlsExpansionBitmapBits[32];
  /* 0x01d4 */ unsigned long SessionId;
  /* 0x01d8 */ union _ULARGE_INTEGER AppCompatFlags;
  /* 0x01e0 */ union _ULARGE_INTEGER AppCompatFlagsUser;
  /* 0x01e8 */ void* pShimData;
  /* 0x01ec */ void* AppCompatInfo;
  /* 0x01f0 */ struct _UNICODE_STRING CSDVersion;
  /* 0x01f8 */ const struct _ACTIVATION_CONTEXT_DATA* ActivationContextData;
  /* 0x01fc */ struct _ASSEMBLY_STORAGE_MAP* ProcessAssemblyStorageMap;
  /* 0x0200 */ const struct _ACTIVATION_CONTEXT_DATA* SystemDefaultActivationContextData;
  /* 0x0204 */ struct _ASSEMBLY_STORAGE_MAP* SystemAssemblyStorageMap;
  /* 0x0208 */ unsigned long MinimumStackCommit;
  /* 0x020c */ void** FlsCallback;
  /* 0x0210 */ struct _LIST_ENTRY FlsListHead;
  /* 0x0218 */ void* FlsBitmap;
  /* 0x021c */ unsigned long FlsBitmapBits[4];
  /* 0x022c */ unsigned long FlsHighIndex;
} PEB, *PPEB; /* size: 0x0230 */

typedef struct _NLG_INFO
{
  /* 0x0000 */ unsigned long dwSig;
  /* 0x0004 */ unsigned long uoffDestination;
  /* 0x0008 */ unsigned long dwCode;
  /* 0x000c */ unsigned long uoffFramePointer;
} NLG_INFO, *PNLG_INFO; /* size: 0x0010 */

typedef struct _EXCEPTION_REGISTRATION_COMMON
{
  /* 0x0000 */ long Padding_1431[2];
  /* 0x0008 */ unsigned long scopetable;
  /* 0x000c */ unsigned long trylevel;
} EXCEPTION_REGISTRATION_COMMON, *PEXCEPTION_REGISTRATION_COMMON; /* size: 0x0010 */

struct ExceptionRecordStruct
{
  /* 0x0000 */ unsigned long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ unsigned long ExceptionRecord_;
  /* 0x000c */ unsigned long ExceptionAddress;
  /* 0x0010 */ unsigned long NumberParameters;
  /* 0x0014 */ unsigned long ExceptionInfo;
  /* 0x0018 */ long __PADDING__[14];
}; /* size: 0x0050 */

struct RegistrationNode
{
  /* 0x0000 */ unsigned long Next;
  /* 0x0004 */ unsigned long Handler;
  /* 0x0008 */ unsigned long EH4ScopeTable;
  /* 0x000c */ unsigned long TryLevel;
}; /* size: 0x0010 */

struct ScopeTableRecord
{
  /* 0x0000 */ unsigned long EnclosingLevel;
  /* 0x0004 */ unsigned long FilterFunc;
  union
  {
    /* 0x0008 */ unsigned long HandlerAddress;
    /* 0x0008 */ unsigned long FinallyFunc;
  }; /* size: 0x0004 */
}; /* size: 0x000c */

typedef struct _strflt
{
  /* 0x0000 */ int sign;
  /* 0x0004 */ int decpt;
  /* 0x0008 */ int flag;
  /* 0x000c */ char* mantissa;
} strflt, *Pstrflt; /* size: 0x0010 */

typedef struct _SYSTEMTIME
{
  /* 0x0000 */ unsigned short wYear;
  /* 0x0002 */ unsigned short wMonth;
  /* 0x0004 */ unsigned short wDayOfWeek;
  /* 0x0006 */ unsigned short wDay;
  /* 0x0008 */ unsigned short wHour;
  /* 0x000a */ unsigned short wMinute;
  /* 0x000c */ unsigned short wSecond;
  /* 0x000e */ unsigned short wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME; /* size: 0x0010 */

struct stat
{
  /* 0x0000 */ unsigned int st_dev;
  /* 0x0004 */ unsigned short st_ino;
  /* 0x0006 */ unsigned short st_mode;
  /* 0x0008 */ short st_nlink;
  /* 0x000a */ short st_uid;
  /* 0x000c */ short st_gid;
  /* 0x000e */ char Padding_1432[2];
  /* 0x0010 */ unsigned int st_rdev;
  /* 0x0014 */ long st_size;
  /* 0x0018 */ __int64 st_atime;
  /* 0x0020 */ __int64 st_mtime;
  /* 0x0028 */ __int64 st_ctime;
}; /* size: 0x0030 */

typedef struct _stat64i32
{
  /* 0x0000 */ unsigned int st_dev;
  /* 0x0004 */ unsigned short st_ino;
  /* 0x0006 */ unsigned short st_mode;
  /* 0x0008 */ short st_nlink;
  /* 0x000a */ short st_uid;
  /* 0x000c */ short st_gid;
  /* 0x000e */ char Padding_1433[2];
  /* 0x0010 */ unsigned int st_rdev;
  /* 0x0014 */ long st_size;
  /* 0x0018 */ __int64 st_atime;
  /* 0x0020 */ __int64 st_mtime;
  /* 0x0028 */ __int64 st_ctime;
} stat64i32, *Pstat64i32; /* size: 0x0030 */

struct errentry
{
  /* 0x0000 */ unsigned long oscode;
  /* 0x0004 */ int errnocode;
}; /* size: 0x0008 */

struct ioinfo
{
  /* 0x0000 */ int osfhnd;
  /* 0x0004 */ char osfile;
  /* 0x0005 */ char pipech;
  /* 0x0006 */ char Padding_1434[2];
  /* 0x0008 */ int lockinitflag;
  /* 0x000c */ struct _RTL_CRITICAL_SECTION lock;
  struct /* bitfield */
  {
    /* 0x0024 */ char textmode : 7; /* bit position: 0 */
    /* 0x0024 */ char unicode : 1; /* bit position: 7 */
  }; /* bitfield */
  /* 0x0025 */ char pipech2[2];
  /* 0x0027 */ char Padding_1435;
  /* 0x0028 */ __int64 startpos;
  /* 0x0030 */ int utf8translations;
  /* 0x0034 */ char dbcsBuffer;
  /* 0x0035 */ char Padding_1436[3];
  /* 0x0038 */ int dbcsBufferUsed;
  /* 0x003c */ long __PADDING__[1];
}; /* size: 0x0040 */

typedef struct _BY_HANDLE_FILE_INFORMATION
{
  /* 0x0000 */ unsigned long dwFileAttributes;
  /* 0x0004 */ struct _FILETIME ftCreationTime;
  /* 0x000c */ struct _FILETIME ftLastAccessTime;
  /* 0x0014 */ struct _FILETIME ftLastWriteTime;
  /* 0x001c */ unsigned long dwVolumeSerialNumber;
  /* 0x0020 */ unsigned long nFileSizeHigh;
  /* 0x0024 */ unsigned long nFileSizeLow;
  /* 0x0028 */ unsigned long nNumberOfLinks;
  /* 0x002c */ unsigned long nFileIndexHigh;
  /* 0x0030 */ unsigned long nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION; /* size: 0x0034 */

union doubleint
{
  union
  {
    /* 0x0000 */ __int64 bigint;
    struct
    {
      /* 0x0000 */ unsigned long lowerhalf;
      /* 0x0004 */ long upperhalf;
    } /* size: 0x0008 */ twoints;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct EnhKeyVals
{
  /* 0x0000 */ unsigned short ScanCode;
  /* 0x0002 */ struct CharPair RegChars;
  /* 0x0004 */ struct CharPair ShiftChars;
  /* 0x0006 */ struct CharPair CtrlChars;
  /* 0x0008 */ struct CharPair AltChars;
}; /* size: 0x000a */

struct HWINSTA__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct tagLC_STRINGS
{
  /* 0x0000 */ char szLanguage[64];
  /* 0x0040 */ char szCountry[64];
  /* 0x0080 */ char szCodePage[16];
}; /* size: 0x0090 */

struct tagLOCALETAB
{
  /* 0x0000 */ char* szName;
  /* 0x0004 */ char chAbbrev[4];
}; /* size: 0x0008 */

union FT
{
  union
  {
    /* 0x0000 */ unsigned __int64 ft_scalar;
    /* 0x0000 */ struct _FILETIME ft_struct;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

typedef struct _IMAGE_SECTION_HEADER
{
  /* 0x0000 */ unsigned char Name[8];
  union
  {
    union
    {
      /* 0x0008 */ unsigned long PhysicalAddress;
      /* 0x0008 */ unsigned long VirtualSize;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ Misc;
  /* 0x000c */ unsigned long VirtualAddress;
  /* 0x0010 */ unsigned long SizeOfRawData;
  /* 0x0014 */ unsigned long PointerToRawData;
  /* 0x0018 */ unsigned long PointerToRelocations;
  /* 0x001c */ unsigned long PointerToLinenumbers;
  /* 0x0020 */ unsigned short NumberOfRelocations;
  /* 0x0022 */ unsigned short NumberOfLinenumbers;
  /* 0x0024 */ unsigned long Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER; /* size: 0x0028 */

typedef struct _TIME_ZONE_INFORMATION
{
  /* 0x0000 */ long Bias;
  /* 0x0004 */ wchar_t StandardName[32];
  /* 0x0044 */ struct _SYSTEMTIME StandardDate;
  /* 0x0054 */ long StandardBias;
  /* 0x0058 */ wchar_t DaylightName[32];
  /* 0x0098 */ struct _SYSTEMTIME DaylightDate;
  /* 0x00a8 */ long DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION; /* size: 0x00ac */

struct transitiondate
{
  /* 0x0000 */ int yr;
  /* 0x0004 */ int yd;
  /* 0x0008 */ int ms;
}; /* size: 0x000c */

typedef struct _LDBL12
{
  /* 0x0000 */ unsigned char ld12[12];
} LDBL12, *PLDBL12; /* size: 0x000c */

typedef struct _flt
{
  /* 0x0000 */ int flags;
  /* 0x0004 */ int nbytes;
  /* 0x0008 */ long lval;
  /* 0x000c */ long Padding_1437;
  /* 0x0010 */ double dval;
} flt, *Pflt; /* size: 0x0018 */

struct _output_l::__l77::_count_string;

typedef union _CRT_DOUBLE_COMPONENTS
{
  union
  {
    /* 0x0000 */ double d;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 mantissa : 52; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 exponent : 11; /* bit position: 52 */
      /* 0x0000 */ unsigned __int64 sign : 1; /* bit position: 63 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} CRT_DOUBLE_COMPONENTS, *PCRT_DOUBLE_COMPONENTS; /* size: 0x0008 */

struct MTStackFrame
{
  /* 0x0000 */ unsigned __int64 MTS_LocalFac;
  /* 0x0008 */ unsigned char MTS_cdispflags;
}; /* size: 0x0009 */

struct EHRegistrationNode
{
  /* 0x0000 */ struct EHRegistrationNode* pNext;
  /* 0x0004 */ void* frameHandler;
  /* 0x0008 */ int state;
}; /* size: 0x000c */

struct FrameInfo
{
  /* 0x0000 */ void* pExceptionObject;
  /* 0x0004 */ struct FrameInfo* pNext;
}; /* size: 0x0008 */

typedef class _HeapManager
{
  /* 0x0000 */ void* pOpNew /* function */;
  /* 0x0004 */ void* pOpDelete /* function */;
  /* 0x0008 */ struct _HeapManager::Block* head;
  /* 0x000c */ struct _HeapManager::Block* tail;
  /* 0x0010 */ unsigned int blockLeft;
} HeapManager, *PHeapManager; /* size: 0x0014 */

class pcharNode
{
  /* 0x0000 */ long Padding_1438;
  /* 0x0004 */ char* me;
  /* 0x0008 */ int myLen;
}; /* size: 0x000c */

struct $_s__CatchableTypeArray$_extraBytes_12
{
  /* 0x0000 */ int nCatchableTypes;
  /* 0x0004 */ const struct _s__CatchableType* arrayOfCatchableTypes[3];
}; /* size: 0x0010 */

#include <poppack.h>
